function Auth(e,t){e.signupUrl=t+"/register",e.loginUrl=t+"/login"}function Router(e,t,n){n.html5Mode(!0),e.state("home",{url:"/",templateUrl:"js/views/posts/index.html"}).state("postsIndex",{url:"/posts",templateUrl:"js/views/posts/index.html",controller:"PostsIndexCtrl as postsIndex"}).state("postsNew",{url:"/posts/new",templateUrl:"js/views/posts/new.html",controller:"PostsNewCtrl as postsNew"}).state("postsShow",{url:"/posts/:id",templateUrl:"js/views/posts/show.html",controller:"PostsShowCtrl as postsShow"}).state("postsEdit",{url:"/posts/:id/edit",templateUrl:"js/views/posts/edit.html",controller:"PostsEditCtrl as postsEdit"}).state("usersShow",{url:"/users/:id",templateUrl:"js/views/users/show.html",controller:"UsersShowCtrl as usersShow"}).state("login",{url:"/login",templateUrl:"js/views/auth/login.html",controller:"AuthCtrl as auth"}).state("register",{url:"/register",templateUrl:"js/views/auth/register.html",controller:"AuthCtrl as auth"}).state("about",{url:"/about",templateUrl:"js/views/static/about.html"}),t.otherwise("/")}function AuthCtrl(e,t){function n(){e.signup(i.user).then(function(){return t.go("login")})}function r(){e.login(i.credentials).then(function(){return t.go("postsIndex")})}var i=this;i.register=n,i.login=r}function MainCtrl(e,t,n){function r(){n.logout(),t.go("home")}var i=this;e.$on("$stateChangeSuccess",function(){i.stateHasChanged&&(i.message=null),i.stateHasChanged||(i.stateHasChanged=!0),i.isNavCollapsed=!0}),i.isAuthenticated=n.isAuthenticated,e.$on("error",function(e,n){i.stateHasChanged=!1,i.message=n.data.message,t.go("login")}),e.$on("$stateChangeSuccess",function(){i.stateHasChanged&&(i.message=null),i.stateHasChanged||(i.stateHasChanged=!0),n.getPayload()&&(i.currentUser=n.getPayload())});var o=["postsNew","postsEdit"];e.$on("$stateChangeStart",function(e,r){!n.isAuthenticated()&&o.includes(r.name)&&(e.preventDefault(),t.go("login"),i.message="You must be logged in to access this page."),i.pageName=r.name}),i.logout=r}function PaymentController(e,t){var n=this;n.card={},n.payee=null,n.amount=null,n.currency="gbp",n.paymentSuccessful=!1,n.pay=function(){Stripe.card.createToken(n.card,function(r,i){if(200===r){var o={card:n.card,token:i.id,amount:n.amount,currency:n.currency,payee:n.payee};e.post(t+"/payment",o).then(function(e){200===e.status?(n.paymentSuccessful=!0,document.getElementById("payment_modal").style.visibility="hidden"):n.paymentSuccessful=!1})}})},n.reset=function(){n.card={},n.payee="",n.amount=null,n.paymentSuccessful=!1,n.Form.$setPristine(!0),document.getElementsByTagName("form")[0].reset()}}function PostsIndexCtrl(e,t,n){this.all=e.query(),n.pageSize=6,n.currentPage=1}function PostsNewCtrl(e,t,n){function r(){e.save({post:i.post}).$promise.then(function(){return n.go("postsIndex")})}var i=this;i.post={image:"http://placehold.it/350x150"},i.users=t.query(),i.create=r}function PostsShowCtrl(e,t,n,r,i,o){function a(){s.post.$remove().then(function(){return i.go("postsIndex")})}var s=this;o.getPayload()&&(s.currentUser=t.get({id:o.getPayload().id})),s.post=e.get(r),s.comment={},s.delete=a}function PostsEditCtrl(e,t,n,r){function i(){e.update({id:o.post.id,post:o.post}).$promise.then(function(){return r.go("postsShow",{id:o.post.id})})}var o=this;e.get(n).$promise.then(function(e){o.post=e}),o.users=t.query(),o.update=i}function UsersIndexCtrl(e){this.all=e.query()}function UsersShowCtrl(e,t,n,r){function i(){o.user.$remove().then(function(){r.logout(),n.go("register")})}var o=this;o.user=e.get(t),o.delete=i}function base64(){var e=new FileReader;return{restrict:"A",require:"ngModel",link:function(t,n,r,i){e.onload=function(){i.$setViewValue(e.result)},n.on("change",function(t){var n=(t.target.files||t.dataTransfer.files)[0];e.readAsDataURL(n)})}}}function Comment(e,t){return new e(t+"/comments/:id",{id:"@id"},{update:{method:"PUT"}})}function Post(e,t){return new e(t+"/posts/:id",{id:"@id"},{update:{method:"PUT"}})}function User(e,t){return new e(t+"/users/:id",{id:"@id"},{update:{method:"PUT"}})}!function(e){"use strict";function t(e,t){return t=t||Error,function(){var n,r,i=arguments[0],o=arguments[1],a="["+(e?e+":":"")+i+"] ",s=W(arguments,2).map(function(e){return xe(e,Yr.objectMaxDepth)});for(a+=o.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1);return t<s.length?s[t]:e}),a+="\nhttp://errors.angularjs.org/1.6.4/"+(e?e+"/":"")+i,r=0,n="?";r<s.length;r++,n="&")a+=n+"p"+r+"="+encodeURIComponent(s[r]);return new t(a)}}function n(e){if(!w(e))return Yr;y(e.objectMaxDepth)&&(Yr.objectMaxDepth=r(e.objectMaxDepth)?e.objectMaxDepth:NaN)}function r(e){return k(e)&&e>0}function i(e){if(null==e||O(e))return!1;if(pi(e)||C(e)||Xr&&e instanceof Xr)return!0;var t="length"in Object(e)&&e.length;return k(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function o(e,t,n){var r,a;if(e)if(D(e))for(r in e)"prototype"!==r&&"length"!==r&&"name"!==r&&e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else if(pi(e)||i(e)){var s="object"!=typeof e;for(r=0,a=e.length;r<a;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else if(x(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)Wr.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function u(){return++li}function l(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function c(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;i<o;++i){var a=t[i];if(w(a)||D(a))for(var s=Object.keys(a),u=0,p=s.length;u<p;u++){var d=s[u],f=a[d];n&&w(f)?S(f)?e[d]=new Date(f.valueOf()):E(f)?e[d]=new RegExp(f):f.nodeName?e[d]=f.cloneNode(!0):V(f)?e[d]=f.clone():(w(e[d])||(e[d]=pi(f)?[]:{}),c(e[d],[f],!0)):e[d]=f}}return l(e,r),e}function p(e){return c(e,ni.call(arguments,1),!1)}function d(e){return c(e,ni.call(arguments,1),!0)}function f(e){return parseInt(e,10)}function h(e,t){return p(Object.create(e),t)}function m(){}function g(e){return e}function $(e){return function(){return e}}function v(e){return D(e.toString)&&e.toString!==oi}function b(e){return void 0===e}function y(e){return void 0!==e}function w(e){return null!==e&&"object"==typeof e}function x(e){return null!==e&&"object"==typeof e&&!ai(e)}function C(e){return"string"==typeof e}function k(e){return"number"==typeof e}function S(e){return"[object Date]"===oi.call(e)}function D(e){return"function"==typeof e}function E(e){return"[object RegExp]"===oi.call(e)}function O(e){return e&&e.window===e}function T(e){return e&&e.$evalAsync&&e.$watch}function A(e){return"[object File]"===oi.call(e)}function M(e){return"[object FormData]"===oi.call(e)}function P(e){return"[object Blob]"===oi.call(e)}function I(e){return"boolean"==typeof e}function N(e){return e&&D(e.then)}function U(e){return e&&k(e.length)&&di.test(oi.call(e))}function j(e){return"[object ArrayBuffer]"===oi.call(e)}function V(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function z(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function R(e){return Gr(e.nodeName||e[0]&&e[0].nodeName)}function q(e,t){return-1!==Array.prototype.indexOf.call(e,t)}function F(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function L(e,t,n){function i(e,t,n){if(--n<0)return"...";var r,i=t.$$hashKey;if(pi(e))for(var o=0,s=e.length;o<s;o++)t.push(a(e[o],n));else if(x(e))for(r in e)t[r]=a(e[r],n);else if(e&&"function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&(t[r]=a(e[r],n));else for(r in e)Wr.call(e,r)&&(t[r]=a(e[r],n));return l(t,i),t}function a(e,t){if(!w(e))return e;var n=u.indexOf(e);if(-1!==n)return c[n];if(O(e)||T(e))throw si("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,o=s(e);return void 0===o&&(o=pi(e)?[]:Object.create(ai(e)),r=!0),u.push(e),c.push(o),r?i(e,o,t):o}function s(e){switch(oi.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(a(e.buffer),e.byteOffset,e.length);case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":var n=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]);return n.lastIndex=e.lastIndex,n;case"[object Blob]":return new e.constructor([e],{type:e.type})}if(D(e.cloneNode))return e.cloneNode(!0)}var u=[],c=[];if(n=r(n)?n:NaN,t){if(U(t)||j(t))throw si("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw si("cpi","Can't copy! Source and destination are identical.");return pi(t)?t.length=0:o(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),u.push(e),c.push(t),i(e,t,n)}return a(e,n)}function _(e,t){return e===t||e!==e&&t!==t}function H(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o===a&&"object"===o){if(!pi(e)){if(S(e))return!!S(t)&&_(e.getTime(),t.getTime());if(E(e))return!!E(t)&&e.toString()===t.toString();if(T(e)||T(t)||O(e)||O(t)||pi(t)||S(t)||E(t))return!1;i=$e();for(r in e)if("$"!==r.charAt(0)&&!D(e[r])){if(!H(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&y(t[r])&&!D(t[r]))return!1;return!0}if(!pi(t))return!1;if((n=e.length)===t.length){for(r=0;r<n;r++)if(!H(e[r],t[r]))return!1;return!0}}return!1}function B(e,t,n){return e.concat(ni.call(t,n))}function W(e,t){return ni.call(e,t||0)}function Y(e,t){var n=arguments.length>2?W(arguments,2):[];return!D(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,B(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function G(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:O(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":T(n)&&(r="$SCOPE"),r}function K(e,t){if(!b(e))return k(t)||(t=t?2:null),JSON.stringify(e,G,t)}function J(e){return C(e)?JSON.parse(e):e}function Z(e,t){e=e.replace($i,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return ci(n)?t:n}function Q(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function X(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return Q(e,n*(Z(t,r)-r))}function ee(e){e=Xr(e).clone();try{e.empty()}catch(e){}var t=Xr("<div>").append(e).html();try{return e[0].nodeType===Ci?Gr(t):t.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(e,t){return"<"+Gr(t)})}catch(e){return Gr(t)}}function te(e){try{return decodeURIComponent(e)}catch(e){}}function ne(e){var t={};return o((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=te(r),y(r)&&(i=!y(i)||te(i),Wr.call(t,r)?pi(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function re(e){var t=[];return o(e,function(e,n){pi(e)?o(e,function(e){t.push(oe(n,!0)+(!0===e?"":"="+oe(e,!0)))}):t.push(oe(n,!0)+(!0===e?"":"="+oe(e,!0)))}),t.length?t.join("&"):""}function ie(e){return oe(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function oe(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function ae(e,t){var n,r,i=vi.length;for(r=0;r<i;++r)if(n=vi[r]+t,C(n=e.getAttribute(n)))return n;return null}function se(t,n){var r,i,a={};if(o(vi,function(e){var n=e+"app";!r&&t.hasAttribute&&t.hasAttribute(n)&&(r=t,i=t.getAttribute(n))}),o(vi,function(e){var n,o=e+"app";!r&&(n=t.querySelector("["+o.replace(":","\\:")+"]"))&&(r=n,i=n.getAttribute(o))}),r){if(!bi)return void e.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");a.strictDi=null!==ae(r,"strict-di"),n(r,i?[i]:[],a)}}function ue(t,n,r){w(r)||(r={}),r=p({strictDi:!1},r);var i=function(){if(t=Xr(t),t.injector()){var i=t[0]===e.document?"document":ee(t);throw si("btstrpd","App already bootstrapped with this element '{0}'",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),r.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng");var o=ut(n,r.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},a=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;if(e&&a.test(e.name)&&(r.debugInfoEnabled=!0,e.name=e.name.replace(a,"")),e&&!s.test(e.name))return i();e.name=e.name.replace(s,""),ui.resumeBootstrap=function(e){return o(e,function(e){n.push(e)}),i()},D(ui.resumeDeferredBootstrap)&&ui.resumeDeferredBootstrap()}function le(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ce(e){var t=ui.element(e).injector();if(!t)throw si("test","no injector found for element argument to getTestability");return t.get("$$testability")}function pe(e,t){return t=t||"_",e.replace(yi,function(e,n){return(n?t:"")+e.toLowerCase()})}function de(e,t,n){if(!e)throw si("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function fe(e,t,n){return n&&pi(e)&&(e=e[e.length-1]),de(D(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function he(e,t){if("hasOwnProperty"===e)throw si("badname","hasOwnProperty is not a valid {0} name",t)}function me(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;s<a;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&D(e)?Y(o,e):e}function ge(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Xr(ni.call(e,0,i))),t.push(n));return t||e}function $e(){return Object.create(null)}function ve(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=!v(e)||pi(e)||S(e)?K(e):e.toString()}return e}function be(e){function n(e,t,n){return e[t]||(e[t]=n())}var r=t("$injector"),i=t("ng"),o=n(e,"angular",Object);return o.$$minErr=o.$$minErr||t,n(o,"module",function(){var e={};return function(t,o,a){var s={};return function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)}(t,"module"),o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=u),function(){return r[n||"push"]([e,t,arguments]),d}}function n(e,n,r){return r||(r=u),function(i,o){return o&&D(o)&&(o.$$moduleName=t),r.push([e,n,arguments]),d}}if(!o)throw r("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",t);var u=[],l=[],c=[],p=e("$injector","invoke","push",l),d={_invokeQueue:u,_configBlocks:l,_runBlocks:c,info:function(e){if(y(e)){if(!w(e))throw i("aobj","Argument '{0}' must be an object","value");return s=e,this}return s},requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator",l),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:p,run:function(e){return c.push(e),this}};return a&&p(a),d})}})}function ye(e,t){if(pi(e)){t=t||[];for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}else if(w(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function we(e,t){var n=[];return r(t)&&(e=L(e,null,t)),JSON.stringify(e,function(e,t){if(t=G(e,t),w(t)){if(n.indexOf(t)>=0)return"...";n.push(t)}return t})}function xe(e,t){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):b(e)?"undefined":"string"!=typeof e?we(e,t):e}function Ce(){return++Ti}function ke(e){return De(e.replace(Mi,"ms-"))}function Se(e,t){return t.toUpperCase()}function De(e){return e.replace(Ai,Se)}function Ee(e){return!Ui.test(e)}function Oe(e){var t=e.nodeType;return t===xi||!t||t===Si}function Te(e){for(var t in Oi[e.ng339])return!0;return!1}function Ae(e,t){var n,r,i,a,s=t.createDocumentFragment(),u=[];if(Ee(e))u.push(t.createTextNode(e));else{for(n=s.appendChild(t.createElement("div")),r=(ji.exec(e)||["",""])[1].toLowerCase(),i=zi[r]||zi._default,n.innerHTML=i[1]+e.replace(Vi,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=B(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(e){s.appendChild(e)}),s}function Me(t,n){n=n||e.document;var r;return(r=Ni.exec(t))?[n.createElement(r[1])]:(r=Ae(t,n))?r.childNodes:[]}function Pe(e,t){var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)}function Ie(e){if(e instanceof Ie)return e;var t;if(C(e)&&(e=fi(e),t=!0),!(this instanceof Ie)){if(t&&"<"!==e.charAt(0))throw Ii("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Ie(e)}t?_e(this,Me(e)):D(e)?Ke(e):_e(this,e)}function Ne(e){return e.cloneNode(!0)}function Ue(e,t){!t&&Oe(e)&&Xr.cleanData([e]),e.querySelectorAll&&Xr.cleanData(e.querySelectorAll("*"))}function je(e,t,n,r){if(y(r))throw Ii("offargs","jqLite#off() does not support the `selector` argument");var i=ze(e),a=i&&i.events,s=i&&i.handle;if(s)if(t){var u=function(t){var r=a[t];y(n)&&F(r||[],n),y(n)&&r&&r.length>0||(e.removeEventListener(t,s),delete a[t])};o(t.split(" "),function(e){u(e),Pi[e]&&u(Pi[e])})}else for(t in a)"$destroy"!==t&&e.removeEventListener(t,s),delete a[t]}function Ve(e,t){var n=e.ng339,r=n&&Oi[n];if(r){if(t)return void delete r.data[t];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),je(e)),delete Oi[n],e.ng339=void 0}}function ze(e,t){var n=e.ng339,r=n&&Oi[n];return t&&!r&&(e.ng339=n=Ce(),r=Oi[n]={events:{},data:{},handle:void 0}),r}function Re(e,t,n){if(Oe(e)){var r,i=y(n),o=!i&&t&&!w(t),a=!t,s=ze(e,!o),u=s&&s.data;if(i)u[De(t)]=n;else{if(a)return u;if(o)return u&&u[De(t)];for(r in t)u[De(r)]=t[r]}}}function qe(e,t){return!!e.getAttribute&&(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1}function Fe(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",fi((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+fi(t)+" "," ")))})}function Le(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=fi(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",fi(n))}}function _e(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;r<n;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function He(e,t){return Be(e,"$"+(t||"ngController")+"Controller")}function Be(e,t,n){e.nodeType===Si&&(e=e.documentElement);for(var r=pi(t)?t:[t];e;){for(var i=0,o=r.length;i<o;i++)if(y(n=Xr.data(e,r[i])))return n;e=e.parentNode||e.nodeType===Di&&e.host}}function We(e){for(Ue(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ye(e,t){t||Ue(e);var n=e.parentNode;n&&n.removeChild(e)}function Ge(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Xr(n).on("load",t)}function Ke(t){function n(){e.document.removeEventListener("DOMContentLoaded",n),e.removeEventListener("load",n),t()}"complete"===e.document.readyState?e.setTimeout(t):(e.document.addEventListener("DOMContentLoaded",n),e.addEventListener("load",n))}function Je(e,t){var n=Fi[t.toLowerCase()];return n&&Li[R(e)]&&n}function Ze(e){return _i[e]}function Qe(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(b(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||Xe;o>1&&(i=ye(i));for(var u=0;u<o;u++)n.isImmediatePropagationStopped()||s(e,n,i[u])}};return n.elem=e,n}function Xe(e,t,n){n.call(e,t)}function et(e,t,n){var r=t.relatedTarget;r&&(r===e||Ri.call(e,r))||n.call(e,t)}function tt(){this.$get=function(){return p(Ie,{hasClass:function(e,t){return e.attr&&(e=e[0]),qe(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Le(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Fe(e,t)}})}}function nt(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"===r||"object"===r&&null!==e?e.$$hashKey=r+":"+(t||u)():r+":"+e}function rt(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}function it(e){return Function.prototype.toString.call(e)}function ot(e){var t=it(e).replace(Zi,"");return t.match(Yi)||t.match(Gi)}function at(e){var t=ot(e);return t?"function("+(t[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function st(e,t,n){var r,i,a;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw C(n)&&n||(n=e.name||at(e)),Qi("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=ot(e),o(i[1].split(Ki),function(e){e.replace(Ji,function(e,t,n){r.push(n)})})}e.$inject=r}}else pi(e)?(a=e.length-1,fe(e[a],"fn"),r=e.slice(0,a)):fe(e,"fn",!0);return r}function ut(e,t){function n(e){return function(t,n){if(!w(t))return e(t,n);o(t,s(e))}}function r(e,t){if(he(e,"service"),(D(t)||pi(t))&&(t=x.instantiate(t)),!t.$get)throw Qi("pget","Provider '{0}' must define $get factory method.",e);return y[e+m]=t}function i(e,t){return function(){var n=E.invoke(t,this);if(b(n))throw Qi("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function a(e,t,n){return r(e,{$get:!1!==n?i(e,t):t})}function u(e,t){return a(e,["$injector",function(e){return e.instantiate(t)}])}function l(e,t){return a(e,$(t),!1)}function c(e,t){he(e,"constant"),y[e]=t,k[e]=t}function p(e,t){var n=x.get(e+m),r=n.$get;n.$get=function(){var e=E.invoke(r,n);return E.invoke(t,null,{$delegate:e})}}function d(e){de(b(e)||pi(e),"modulesToLoad","not an array");var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;t<n;t++){var r=e[t],i=x.get(r[0]);i[r[1]].apply(i,r[2])}}if(!v.get(e)){v.set(e,!0);try{C(e)?(t=ti(e),E.modules[e]=t,n=n.concat(d(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):D(e)?n.push(x.invoke(e)):pi(e)?n.push(x.invoke(e)):fe(e,"module")}catch(t){throw pi(e)&&(e=e[e.length-1]),t.message&&t.stack&&-1===t.stack.indexOf(t.message)&&(t=t.message+"\n"+t.stack),Qi("modulerr","Failed to instantiate module {0} due to:\n{1}",e,t.stack||t.message||t)}}}),n}function f(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===h)throw Qi("cdep","Circular dependency found: {0}",t+" <- "+g.join(" <- "));return e[t]}try{return g.unshift(t),e[t]=h,e[t]=n(t,r),e[t]}catch(n){throw e[t]===h&&delete e[t],n}finally{g.shift()}}function i(e,n,i){for(var o=[],a=ut.$$annotate(e,t,i),s=0,u=a.length;s<u;s++){var l=a[s];if("string"!=typeof l)throw Qi("itkn","Incorrect injection token! Expected service name as string, got {0}",l);o.push(n&&n.hasOwnProperty(l)?n[l]:r(l,i))}return o}function o(e){if(Qr||"function"!=typeof e)return!1;var t=e.$$ngIsClass;return I(t)||(t=e.$$ngIsClass=/^(?:class\b|constructor\()/.test(it(e))),t}function a(e,t,n,r){"string"==typeof n&&(r=n,n=null);var a=i(e,n,r);return pi(e)&&(e=e[e.length-1]),o(e)?(a.unshift(null),new(Function.prototype.bind.apply(e,a))):e.apply(t,a)}function s(e,t,n){var r=pi(e)?e[e.length-1]:e,o=i(e,t,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:ut.$$annotate,has:function(t){return y.hasOwnProperty(t+m)||e.hasOwnProperty(t)}}}t=!0===t;var h={},m="Provider",g=[],v=new Bi,y={$provide:{provider:n(r),factory:n(a),service:n(u),value:n(l),constant:n(c),decorator:p}},x=y.$injector=f(y,function(e,t){throw ui.isString(t)&&g.push(t),Qi("unpr","Unknown provider: {0}",g.join(" <- "))}),k={},S=f(k,function(e,t){var n=x.get(e+m,t);return E.invoke(n.$get,n,void 0,e)}),E=S;y["$injector"+m]={$get:$(S)},E.modules=x.modules=$e();var O=d(e);return E=S.get("$injector"),E.strictDi=t,o(O,function(e){e&&E.invoke(e)}),E}function lt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){if("a"===R(e))return t=e,!0}),t}function o(){var e=s.yOffset;if(D(e))e=e();else if(V(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else k(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=C(e)?e:k(e)?e.toString():n.hash();var t;e?(t=u.getElementById(e))?a(t):(t=i(u.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var u=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||Ge(function(){r.$evalAsync(s)})}),s}]}function ct(e,t){return e||t?e?t?(pi(e)&&(e=e.join(" ")),pi(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function pt(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===eo)return n}}function dt(e){C(e)&&(e=e.split(" "));var t=$e();return o(e,function(e){e.length&&(t[e]=!0)}),t}function ft(e){return w(e)?e:{}}function ht(e,t,n,r){function i(e){try{e.apply(null,W(arguments,1))}finally{if(0===--$)for(;v.length;)try{v.pop()()}catch(e){n.error(e)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){k=null,l()}function u(){y=S(),y=b(y)?null:y,H(y,O)&&(y=O),O=y,w=y}function l(){var e=w;u(),x===c.url()&&e===y||(x=c.url(),w=y,o(D,function(e){e(c.url(),y)}))}var c=this,p=e.location,d=e.history,f=e.setTimeout,h=e.clearTimeout,g={};c.isMock=!1;var $=0,v=[];c.$$completeOutstandingRequest=i,c.$$incOutstandingRequestCount=function(){$++},c.notifyWhenNoOutstandingRequests=function(e){0===$?e():v.push(e)};var y,w,x=p.href,C=t.find("base"),k=null,S=r.history?function(){try{return d.state}catch(e){}}:m;u(),c.url=function(t,n,i){if(b(i)&&(i=null),p!==e.location&&(p=e.location),d!==e.history&&(d=e.history),t){var o=w===i;if(x===t&&(!r.history||o))return c;var s=x&&Kt(x)===Kt(t);return x=t,w=i,!r.history||s&&o?(s||(k=t),n?p.replace(t):s?p.hash=a(t):p.href=t,p.href!==t&&(k=t)):(d[n?"replaceState":"pushState"](i,"",t),u()),k&&(k=t),c}return k||p.href.replace(/%27/g,"'")},c.state=function(){return y};var D=[],E=!1,O=null;c.onUrlChange=function(t){return E||(r.history&&Xr(e).on("popstate",s),Xr(e).on("hashchange",s),E=!0),D.push(t),t},c.$$applicationDestroyed=function(){Xr(e).off("hashchange popstate",s)},c.$$checkUrlChange=l,c.baseHref=function(){var e=C.attr("href");return e?e.replace(/^(https?:)?\/\/[^\/]*/,""):""},c.defer=function(e,t){var n;return $++,n=f(function(){delete g[n],i(e)},t||0),g[n]=!0,n},c.defer.cancel=function(e){return!!g[e]&&(delete g[e],h(e),i(m),!0)}}function mt(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new ht(e,r,t,n)}]}function gt(){this.$get=function(){function e(e,r){function i(e){e!==d&&(f?f===e&&(f=e.n):f=e,o(e.n,e.p),o(e,d),d=e,d.n=null)}function o(e,t){e!==t&&(e&&(e.p=t),t&&(t.n=e))}if(e in n)throw t("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=p({},r,{id:e}),u=$e(),l=r&&r.capacity||Number.MAX_VALUE,c=$e(),d=null,f=null;return n[e]={put:function(e,t){if(!b(t)){if(l<Number.MAX_VALUE){i(c[e]||(c[e]={key:e}))}return e in u||a++,u[e]=t,a>l&&this.remove(f.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=c[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=c[e];if(!t)return;t===d&&(d=t.p),t===f&&(f=t.n),o(t.n,t.p),delete c[e]}e in u&&(delete u[e],a--)},removeAll:function(){u=$e(),a=0,c=$e(),d=f=null},destroy:function(){u=null,s=null,c=null,delete n[e]},info:function(){return p({},s,{size:a})}}}var n={};return e.info=function(){var e={};return o(n,function(t,n){e[n]=t.info()}),e},e.get=function(e){return n[e]},e}}function $t(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function vt(){}function bt(t,n){function r(e,t,n){var r=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/,i=$e();return o(e,function(e,o){if(e in E)return void(i[o]=E[e]);var a=e.match(r);if(!a)throw so("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,o,e,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o},a[4]&&(E[e]=i[o])}),i}function i(e,t){var n={isolateScope:null,bindToController:null};if(w(e.scope)&&(!0===e.bindToController?(n.bindToController=r(e.scope,t,!0),n.isolateScope={}):n.isolateScope=r(e.scope,t,!1)),w(e.bindToController)&&(n.bindToController=r(e.bindToController,t,!0)),n.bindToController&&!e.controller)throw so("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);return n}function a(e){var t=e.charAt(0);if(!t||t!==Gr(t))throw so("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw so("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}function u(e){var t=e.require||e.controller&&e.name;return!pi(t)&&w(t)&&o(t,function(e,n){var r=e.match(k);e.substring(r[0].length)||(t[n]=r[0]+n)}),t}function l(e,t){if(e&&(!C(e)||!/[EACM]/.test(e)))throw so("badrestrict","Restrict property '{0}' of directive '{1}' is invalid",e,t);return e||"EA"}var c={},d="Directive",f=/^\s*directive:\s*([\w-]+)\s+(.*)$/,v=/(([\w-]+)(?::([^;]+))?;?)/,x=z("ngSrc,ngSrcset,src,srcset"),k=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,S=/^(on[a-z]+|formaction)$/,E=$e();this.directive=function e(n,r){return de(n,"name"),he(n,"directive"),C(n)?(a(n),de(r,"directiveFactory"),c.hasOwnProperty(n)||(c[n]=[],t.factory(n+d,["$injector","$exceptionHandler",function(e,t){var r=[];return o(c[n],function(i,o){try{var a=e.invoke(i);D(a)?a={compile:$(a)}:!a.compile&&a.link&&(a.compile=$(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||n,a.require=u(a),a.restrict=l(a.restrict,n),a.$$moduleName=i.$$moduleName,r.push(a)}catch(e){t(e)}}),r}])),c[n].push(r)):o(n,s(e)),this},this.component=function(e,t){function n(e){function n(t){return D(t)||pi(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var i=t.template||t.templateUrl?t.template:"",a={controller:r,controllerAs:kt(t.controller)||t.controllerAs||"$ctrl",template:n(i),templateUrl:n(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return o(t,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}var r=t.controller||function(){};return o(t,function(e,t){"$"===t.charAt(0)&&(n[t]=e,D(r)&&(r[t]=e))}),n.$inject=["$injector"],this.directive(e,n)},this.aHrefSanitizationWhitelist=function(e){return y(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist()};var O=!0;this.debugInfoEnabled=function(e){return y(e)?(O=e,this):O};var A=!1;this.preAssignBindingsEnabled=function(e){return y(e)?(A=e,this):A};var M=10;this.onChangesTtl=function(e){return arguments.length?(M=e,this):M};var P=!0;this.commentDirectivesEnabled=function(e){return arguments.length?(P=e,this):P};var N=!0;this.cssClassDirectivesEnabled=function(e){return arguments.length?(N=e,this):N},
this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,r,a,s,u,l,$,E,U){function j(){try{if(!--Ae)throw ke=void 0,so("infchng","{0} $onChanges() iterations reached. Aborting!\n",M);l.$apply(function(){for(var e=[],t=0,n=ke.length;t<n;++t)try{ke[t]()}catch(t){e.push(t)}if(ke=void 0,e.length)throw e})}finally{Ae++}}function V(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e}function z(e,t,n){De.innerHTML="<span "+t+">";var r=De.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,e.attributes.setNamedItem(i)}function q(e,t){try{e.addClass(t)}catch(e){}}function L(e,t,n,r,i){e instanceof Xr||(e=Xr(e));var o=G(e,t,e,n,r,i);L.$$addScopeClass(e);var a=null;return function(t,n,r){if(!e)throw so("multilink","This element has already been linked.");de(t,"scope"),i&&i.needsNewScope&&(t=t.$parent.$new()),r=r||{};var s=r.parentBoundTranscludeFn,u=r.transcludeControllers,l=r.futureParentElement;s&&s.$$boundTransclude&&(s=s.$$boundTransclude),a||(a=B(l));var c;if(c="html"!==a?Xr(ge(a,Xr("<div>").append(e).html())):n?qi.clone.call(e):e,u)for(var p in u)c.data("$"+p+"Controller",u[p].instance);return L.$$addScopeInfo(c,t),n&&n(c,t),o&&o(t,c,c,s),n||(e=o=null),c}}function B(e){var t=e&&e[0];return t&&"foreignobject"!==R(t)&&oi.call(t).match(/SVG/)?"svg":"html"}function G(e,t,n,r,i,o){function a(e,n,r,i){var o,a,s,u,l,c,p,d,m;if(f){var g=n.length;for(m=new Array(g),l=0;l<h.length;l+=3)p=h[l],m[p]=n[p]}else m=n;for(l=0,c=h.length;l<c;)s=m[h[l++]],o=h[l++],a=h[l++],o?(o.scope?(u=e.$new(),L.$$addScopeInfo(Xr(s),u)):u=e,d=o.transcludeOnThisElement?J(e,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&t?J(e,t):null,o(a,u,s,r,d)):a&&a(e,s.childNodes,void 0,i)}for(var s,u,l,c,p,d,f,h=[],m=pi(e)||e instanceof Xr,g=0;g<e.length;g++)s=new V,11===Qr&&K(e,g,m),u=Z(e[g],[],s,0===g?r:void 0,i),l=u.length?re(u,e[g],s,t,n,null,[],[],o):null,l&&l.scope&&L.$$addScopeClass(s.$$element),p=l&&l.terminal||!(c=e[g].childNodes)||!c.length?null:G(c,l?(l.transcludeOnThisElement||!l.templateOnThisElement)&&l.transclude:t),(l||p)&&(h.push(g,l,p),d=!0,f=f||l),o=null;return d?a:null}function K(e,t,n){var r,i=e[t],o=i.parentNode;if(i.nodeType===Ci)for(;;){if(!(r=o?i.nextSibling:e[t+1])||r.nodeType!==Ci)break;i.nodeValue=i.nodeValue+r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===e[t+1]&&e.splice(t+1,1)}}function J(e,t,n){function r(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=$e();for(var o in t.$$slots)t.$$slots[o]?i[o]=J(e,t.$$slots[o],n):i[o]=null;return r}function Z(e,t,n,r,i){var o,a,s,u=e.nodeType,l=n.$attr;switch(u){case xi:a=R(e),se(t,wt(a),"E",r,i);for(var c,p,d,f,h,m,g=e.attributes,$=0,b=g&&g.length;$<b;$++){var y=!1,x=!1;c=g[$],p=c.name,h=c.value,f=wt(p),m=Ue.test(f),m&&(p=p.replace(lo,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var k=f.match(je);k&&ue(k[1])&&(y=p,x=p.substr(0,p.length-5)+"end",p=p.substr(0,p.length-6)),d=wt(p.toLowerCase()),l[d]=p,!m&&n.hasOwnProperty(d)||(n[d]=h,Je(e,d)&&(n[d]=!0)),be(e,t,h,d,m),se(t,d,"A",r,i,y,x)}if("input"===a&&"hidden"===e.getAttribute("type")&&e.setAttribute("autocomplete","off"),!Te)break;if(s=e.className,w(s)&&(s=s.animVal),C(s)&&""!==s)for(;o=v.exec(s);)d=wt(o[2]),se(t,d,"C",r,i)&&(n[d]=fi(o[3])),s=s.substr(o.index+o[0].length);break;case Ci:me(t,e.nodeValue);break;case ki:if(!Oe)break;Q(e,t,n,r,i)}return t.sort(fe),t}function Q(e,t,n,r,i){try{var o=f.exec(e.nodeValue);if(o){var a=wt(o[1]);se(t,a,"M",r,i)&&(n[a]=fi(o[2]))}}catch(e){}}function X(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t))do{if(!e)throw so("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType===xi&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0);else r.push(e);return Xr(r)}function te(e,t,n){return function(r,i,o,a,s){return i=X(i[0],t,n),e(r,i,o,a,s)}}function ne(e,t,n,r,i,o){var a;return e?L(t,n,r,i,o):function(){return a||(a=L(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function re(e,t,n,i,a,s,u,l,c){function d(e,t,n,r){e&&(n&&(e=te(e,n,r)),e.require=h.require,e.directiveName=m,(k===h||h.$$isolateScope)&&(e=we(e,{isolateScope:!0})),u.push(e)),t&&(n&&(t=te(t,n,r)),t.require=h.require,t.directiveName=m,(k===h||h.$$isolateScope)&&(t=we(t,{isolateScope:!0})),l.push(t))}function f(e,i,a,s,c){function d(e,t,n,r){var i;if(T(e)||(r=n,n=t,t=e,e=void 0),P&&(i=v),n||(n=P?E.parent():E),!r)return c(e,t,i,n,R);var o=c.$$slots[r];if(o)return o(e,t,i,n,R);if(b(o))throw so("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,ee(E))}var f,h,m,g,$,v,y,E,O,M;t===a?(O=n,E=n.$$element):(E=Xr(a),O=new V(E,n)),$=i,k?g=i.$new(!0):x&&($=i.$parent),c&&(y=d,y.$$boundTransclude=c,y.isSlotFilled=function(e){return!!c.$$slots[e]}),C&&(v=oe(E,O,y,C,g,i,k)),k&&(L.$$addScopeInfo(E,g,!0,!(S&&(S===k||S===k.$$originalDirective))),L.$$addScopeClass(E,!0),g.$$isolateBindings=k.$$isolateBindings,M=Ce(i,O,g,g.$$isolateBindings,k),M.removeWatches&&g.$on("$destroy",M.removeWatches));for(var I in v){var N=C[I],U=v[I],j=N.$$bindings.bindToController;if(A){U.bindingInfo=j?Ce($,O,U.instance,j,N):{};var z=U();z!==U.instance&&(U.instance=z,E.data("$"+N.name+"Controller",z),U.bindingInfo.removeWatches&&U.bindingInfo.removeWatches(),U.bindingInfo=Ce($,O,U.instance,j,N))}else U.instance=U(),E.data("$"+N.name+"Controller",U.instance),U.bindingInfo=Ce($,O,U.instance,j,N)}for(o(C,function(e,t){var n=e.require;e.bindToController&&!pi(n)&&w(n)&&p(v[t].instance,ie(t,n,E,v))}),o(v,function(e){var t=e.instance;if(D(t.$onChanges))try{t.$onChanges(e.bindingInfo.initialChanges)}catch(e){r(e)}if(D(t.$onInit))try{t.$onInit()}catch(e){r(e)}D(t.$doCheck)&&($.$watch(function(){t.$doCheck()}),t.$doCheck()),D(t.$onDestroy)&&$.$on("$destroy",function(){t.$onDestroy()})}),f=0,h=u.length;f<h;f++)m=u[f],xe(m,m.isolateScope?g:i,E,O,m.require&&ie(m.directiveName,m.require,E,v),y);var R=i;for(k&&(k.template||null===k.templateUrl)&&(R=g),e&&e(R,a.childNodes,void 0,c),f=l.length-1;f>=0;f--)m=l[f],xe(m,m.isolateScope?g:i,E,O,m.require&&ie(m.directiveName,m.require,E,v),y);o(v,function(e){var t=e.instance;D(t.$postLink)&&t.$postLink()})}c=c||{};for(var h,m,g,$,v,y=-Number.MAX_VALUE,x=c.newScopeDirective,C=c.controllerDirectives,k=c.newIsolateScopeDirective,S=c.templateDirective,E=c.nonTlbTranscludeDirective,O=!1,M=!1,P=c.hasElementTranscludeDirective,I=n.$$element=Xr(t),N=s,U=i,j=!1,z=!1,q=0,F=e.length;q<F;q++){h=e[q];var _=h.$$start,H=h.$$end;if(_&&(I=X(t,_,H)),g=void 0,y>h.priority)break;if(v=h.scope,v&&(h.templateUrl||(w(v)?(he("new/isolated scope",k||x,h,I),k=h):he("new/isolated scope",k,h,I)),x=x||h),m=h.name,!j&&(h.replace&&(h.templateUrl||h.template)||h.transclude&&!h.$$tlb)){for(var B,G=q+1;B=e[G++];)if(B.transclude&&!B.$$tlb||B.replace&&(B.templateUrl||B.template)){z=!0;break}j=!0}if(!h.templateUrl&&h.controller&&(C=C||$e(),he("'"+m+"' controller",C[m],h,I),C[m]=h),v=h.transclude)if(O=!0,h.$$tlb||(he("transclusion",E,h,I),E=h),"element"===v)P=!0,y=h.priority,g=I,I=n.$$element=Xr(L.$$createComment(m,n[m])),t=I[0],ye(a,W(g),t),g[0].$$parentNode=g[0].parentNode,U=ne(z,g,i,y,N&&N.name,{nonTlbTranscludeDirective:E});else{var K=$e();if(w(v)){g=[];var J=$e(),Q=$e();o(v,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,J[e]=t,K[t]=null,Q[t]=n}),o(I.contents(),function(e){var t=J[wt(R(e))];t?(Q[t]=!0,K[t]=K[t]||[],K[t].push(e)):g.push(e)}),o(Q,function(e,t){if(!e)throw so("reqslot","Required transclusion slot `{0}` was not filled.",t)});for(var re in K)K[re]&&(K[re]=ne(z,K[re],i))}else g=Xr(Ne(t)).contents();I.empty(),U=ne(z,g,i,void 0,void 0,{needsNewScope:h.$$isolateScope||h.$$newScope}),U.$$slots=K}if(h.template)if(M=!0,he("template",S,h,I),S=h,v=D(h.template)?h.template(I,n):h.template,v=Ie(v),h.replace){if(N=h,g=Ee(v)?[]:Ct(ge(h.templateNamespace,fi(v))),t=g[0],1!==g.length||t.nodeType!==xi)throw so("tplrt","Template for directive '{0}' must have exactly one root element. {1}",m,"");ye(a,I,t);var se={$attr:{}},ue=Z(t,[],se),pe=e.splice(q+1,e.length-(q+1));(k||x)&&ae(ue,k,x),e=e.concat(ue).concat(pe),le(n,se),F=e.length}else I.html(v);if(h.templateUrl)M=!0,he("template",S,h,I),S=h,h.replace&&(N=h),f=ce(e.splice(q,e.length-q),I,n,a,O&&U,u,l,{controllerDirectives:C,newScopeDirective:x!==h&&x,newIsolateScopeDirective:k,templateDirective:S,nonTlbTranscludeDirective:E}),F=e.length;else if(h.compile)try{$=h.compile(I,n,U);var de=h.$$originalDirective||h;D($)?d(null,Y(de,$),_,H):$&&d(Y(de,$.pre),Y(de,$.post),_,H)}catch(e){r(e,ee(I))}h.terminal&&(f.terminal=!0,y=Math.max(y,h.priority))}return f.scope=x&&!0===x.scope,f.transcludeOnThisElement=O,f.templateOnThisElement=M,f.transclude=U,c.hasElementTranscludeDirective=P,f}function ie(e,t,n,r){var i;if(C(t)){var a=t.match(k),s=t.substring(a[0].length),u=a[1]||a[3],l="?"===a[2];if("^^"===u?n=n.parent():(i=r&&r[s],i=i&&i.instance),!i){var c="$"+s+"Controller";i=u?n.inheritedData(c):n.data(c)}if(!i&&!l)throw so("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,e)}else if(pi(t)){i=[];for(var p=0,d=t.length;p<d;p++)i[p]=ie(e,t[p],n,r)}else w(t)&&(i={},o(t,function(t,o){i[o]=ie(e,t,n,r)}));return i||null}function oe(e,t,n,r,i,o,a){var s=$e();for(var l in r){var c=r[l],p={$scope:c===a||c.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},d=c.controller;"@"===d&&(d=t[c.name]);var f=u(d,p,!0,c.controllerAs);s[c.name]=f,e.data("$"+c.name+"Controller",f.instance)}return s}function ae(e,t,n){for(var r=0,i=e.length;r<i;r++)e[r]=h(e[r],{$$isolateScope:t,$$newScope:n})}function se(e,n,r,o,a,s,u){if(n===a)return null;var l=null;if(c.hasOwnProperty(n))for(var p,f=t.get(n+d),m=0,g=f.length;m<g;m++)if(p=f[m],(b(o)||o>p.priority)&&-1!==p.restrict.indexOf(r)){if(s&&(p=h(p,{$$start:s,$$end:u})),!p.$$bindings){var $=p.$$bindings=i(p,p.name);w($.isolateScope)&&(p.$$isolateBindings=$.isolateScope)}e.push(p),l=p}return l}function ue(e){if(c.hasOwnProperty(e))for(var n,r=t.get(e+d),i=0,o=r.length;i<o;i++)if(n=r[i],n.multiElement)return!0;return!1}function le(e,t){var n=t.$attr,r=e.$attr;o(e,function(r,i){"$"!==i.charAt(0)&&(t[i]&&t[i]!==r&&(r.length?r+=("style"===i?";":" ")+t[i]:r=t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,i){e.hasOwnProperty(i)||"$"===i.charAt(0)||(e[i]=t,"class"!==i&&"style"!==i&&(r[i]=n[i]))})}function ce(e,t,n,i,s,u,l,c){var p,d,f=[],m=t[0],g=e.shift(),$=h(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),v=D(g.templateUrl)?g.templateUrl(t,n):g.templateUrl,b=g.templateNamespace;return t.empty(),a(v).then(function(r){var a,h,y,x;if(r=Ie(r),g.replace){if(y=Ee(r)?[]:Ct(ge(b,fi(r))),a=y[0],1!==y.length||a.nodeType!==xi)throw so("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g.name,v);h={$attr:{}},ye(i,t,a);var C=Z(a,[],h);w(g.scope)&&ae(C,!0),e=C.concat(e),le(n,h)}else a=m,t.html(r);for(e.unshift($),p=re(e,a,n,s,t,g,u,l,c),o(i,function(e,n){e===a&&(i[n]=t[0])}),d=G(t[0].childNodes,s);f.length;){var k=f.shift(),S=f.shift(),D=f.shift(),E=f.shift(),O=t[0];if(!k.$$destroyed){if(S!==m){var T=S.className;c.hasElementTranscludeDirective&&g.replace||(O=Ne(a)),ye(D,Xr(S),O),q(Xr(O),T)}x=p.transcludeOnThisElement?J(k,p.transclude,E):E,p(d,k,O,i,x)}}f=null}).catch(function(e){e instanceof Error&&r(e)}),function(e,t,n,r,i){var o=i;t.$$destroyed||(f?f.push(t,n,r,o):(p.transcludeOnThisElement&&(o=J(t,p.transclude,i)),p(d,t,n,r,o)))}}function fe(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function he(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw so("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,ee(r))}function me(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){var t=e.parent(),n=!!t.length;return n&&L.$$addBindingClass(t),function(e,t){var i=t.parent();n||L.$$addBindingClass(i),L.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){t[0].nodeValue=e})}}})}function ge(t,n){switch(t=Gr(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function ve(e,t){if("srcdoc"===t)return $.HTML;var n=R(e);if("src"===t||"ngSrc"===t){if(-1===["img","video","audio","source","track"].indexOf(n))return $.RESOURCE_URL}else if("xlinkHref"===t||"form"===n&&"action"===t||"link"===n&&"href"===t)return $.RESOURCE_URL}function be(e,t,r,i,o){var a=ve(e,i),s=!o,u=x[i]||o,l=n(r,s,a,u);if(l){if("multiple"===i&&"select"===R(e))throw so("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",ee(e));if(S.test(i))throw so("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");t.push({priority:100,compile:function(){return{pre:function(e,t,o){var s=o.$$observers||(o.$$observers=$e()),c=o[i];c!==r&&(l=c&&n(c,!0,a,u),r=c),l&&(o[i]=l(e),(s[i]||(s[i]=[])).$$inter=!0,(o.$$observers&&o.$$observers[i].$$scope||e).$watch(l,function(e,t){"class"===i&&e!==t?o.$updateClass(e,t):o.$set(i,e)}))}}}})}}function ye(t,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(t)for(i=0,o=t.length;i<o;i++)if(t[i]===a){t[i++]=r;for(var l=i,c=l+s-1,p=t.length;l<p;l++,c++)c<p?t[l]=t[c]:delete t[l];t.length-=s-1,t.context===a&&(t.context=r);break}u&&u.replaceChild(r,a);var d=e.document.createDocumentFragment();for(i=0;i<s;i++)d.appendChild(n[i]);for(Xr.hasData(a)&&(Xr.data(r,Xr.data(a)),Xr(a).off("$destroy")),Xr.cleanData(d.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function we(e,t){return p(function(){return e.apply(null,arguments)},e,t)}function xe(e,t,n,i,o,a){try{e(t,n,i,o,a)}catch(e){r(e,ee(n))}}function Ce(e,t,r,i,a){function u(t,n,i){D(r.$onChanges)&&!_(n,i)&&(ke||(e.$$postDigest(j),ke=[]),c||(c={},ke.push(l)),c[t]&&(i=c[t].previousValue),c[t]=new yt(i,n))}function l(){r.$onChanges(c),c=void 0}var c,p=[],d={};return o(i,function(i,o){var l,c,f,h,g,$=i.attrName,v=i.optional,b=i.mode;switch(b){case"@":v||Wr.call(t,$)||(r[o]=t[$]=void 0),g=t.$observe($,function(e){if(C(e)||I(e)){var t=r[o];u(o,e,t),r[o]=e}}),t.$$observers[$].$$scope=e,l=t[$],C(l)?r[o]=n(l)(e):I(l)&&(r[o]=l),d[o]=new yt(uo,r[o]),p.push(g);break;case"=":if(!Wr.call(t,$)){if(v)break;t[$]=void 0}if(v&&!t[$])break;c=s(t[$]),h=c.literal?H:_,f=c.assign||function(){throw l=r[o]=c(e),so("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",t[$],$,a.name)},l=r[o]=c(e);var y=function(t){return h(t,r[o])||(h(t,l)?f(e,t=r[o]):r[o]=t),l=t};y.$stateful=!0,g=i.collection?e.$watchCollection(t[$],y):e.$watch(s(t[$],y),null,c.literal),p.push(g);break;case"<":if(!Wr.call(t,$)){if(v)break;t[$]=void 0}if(v&&!t[$])break;c=s(t[$]);var w=c.literal,x=r[o]=c(e);d[o]=new yt(uo,r[o]),g=e.$watch(c,function(e,t){if(t===e){if(t===x||w&&H(t,x))return;t=x}u(o,e,t),r[o]=e},w),p.push(g);break;case"&":if((c=t.hasOwnProperty($)?s(t[$]):m)===m&&v)break;r[o]=function(t){return c(e,t)}}}),{initialChanges:d,removeWatches:p.length&&function(){for(var e=0,t=p.length;e<t;++e)p[e]()}}}var ke,Se=/^\w/,De=e.document.createElement("div"),Oe=P,Te=N,Ae=M;V.prototype={$normalize:wt,$addClass:function(e){e&&e.length>0&&E.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&E.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=xt(e,t);n&&n.length&&E.addClass(this.$$element,n);var r=xt(t,e);r&&r.length&&E.removeClass(this.$$element,r)},$set:function(e,t,n,i){var a,s=this.$$element[0],u=Je(s,e),l=Ze(e),c=e;if(u?(this.$$element.prop(e,t),i=u):l&&(this[l]=t,c=l),this[e]=t,i?this.$attr[e]=i:(i=this.$attr[e])||(this.$attr[e]=i=pe(e,"-")),"a"===(a=R(this.$$element))&&("href"===e||"xlinkHref"===e)||"img"===a&&"src"===e)this[e]=t=U(t,"src"===e);else if("img"===a&&"srcset"===e&&y(t)){for(var p="",d=fi(t),f=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,h=/\s/.test(d)?f:/(,)/,m=d.split(h),g=Math.floor(m.length/2),$=0;$<g;$++){var v=2*$;p+=U(fi(m[v]),!0),p+=" "+fi(m[v+1])}var w=fi(m[2*$]).split(/\s/);p+=U(fi(w[0]),!0),2===w.length&&(p+=" "+fi(w[1])),this[e]=t=p}!1!==n&&(null===t||b(t)?this.$$element.removeAttr(i):Se.test(i)?this.$$element.attr(i,t):z(this.$$element[0],i,t));var x=this.$$observers;x&&o(x[c],function(e){try{e(t)}catch(e){r(e)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=$e()),i=r[e]||(r[e]=[]);return i.push(t),l.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||b(n[e])||t(n[e])}),function(){F(i,t)}}};var Me=n.startSymbol(),Pe=n.endSymbol(),Ie="{{"===Me&&"}}"===Pe?g:function(e){return e.replace(/\{\{/g,Me).replace(/}}/g,Pe)},Ue=/^ngAttr[A-Z]/,je=/^(.+)Start$/;return L.$$addBindingInfo=O?function(e,t){var n=e.data("$binding")||[];pi(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:m,L.$$addBindingClass=O?function(e){q(e,"ng-binding")}:m,L.$$addScopeInfo=O?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:m,L.$$addScopeClass=O?function(e,t){q(e,t?"ng-isolate-scope":"ng-scope")}:m,L.$$createComment=function(t,n){var r="";return O&&(r=" "+(t||"")+": ",n&&(r+=n+" ")),e.document.createComment(r)},L}]}function yt(e,t){this.previousValue=e,this.currentValue=t}function wt(e){return e.replace(lo,"").replace(co,Se)}function xt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function Ct(e){e=Xr(e);var t=e.length;if(t<=1)return e;for(;t--;){var n=e[t];(n.nodeType===ki||n.nodeType===Ci&&""===n.nodeValue.trim())&&ri.call(e,t,1)}return e}function kt(e,t){if(t&&C(t))return t;if(C(e)){var n=fo.exec(e);if(n)return n[3]}}function St(){var e={},n=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){he(t,"controller"),w(t)?p(e,t):e[t]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(e,n,r,i){if(!e||!w(e.$scope))throw t("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,n);e.$scope[n]=r}return function(t,a,s,u){var l,c,d,f;if(s=!0===s,u&&C(u)&&(f=u),C(t)){if(!(c=t.match(fo)))throw po("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",t);if(d=c[1],f=f||c[3],!(t=e.hasOwnProperty(d)?e[d]:me(a.$scope,d,!0)||(n?me(i,d,!0):void 0)))throw po("ctrlreg","The controller with the name '{0}' is not registered.",d);fe(t,d,!0)}if(s){var h=(pi(t)?t[t.length-1]:t).prototype;return l=Object.create(h||null),f&&o(a,f,l,d||t.name),p(function(){var e=r.invoke(t,l,a,d);return e!==l&&(w(e)||D(e))&&(l=e,f&&o(a,f,l,d||t.name)),l},{instance:l,identifier:f})}return l=r.instantiate(t,a,d),f&&o(a,f,l,d||t.name),l}}]}function Dt(){this.$get=["$window",function(e){return Xr(e.document)}]}function Et(){this.$get=["$document","$rootScope",function(e,t){function n(){i=r.hidden}var r=e[0],i=r&&r.hidden;return e.on("visibilitychange",n),t.$on("$destroy",function(){e.off("visibilitychange",n)}),function(){return i}}]}function Ot(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function Tt(e){return w(e)?S(e)?e.toISOString():K(e):e}function At(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||b(e)||(pi(e)?o(e,function(e){t.push(oe(n)+"="+oe(Tt(e)))}):t.push(oe(n)+"="+oe(Tt(e))))}),t.join("&")}}}function Mt(){this.$get=function(){return function(e){function t(e,r,i){null===e||b(e)||(pi(e)?o(e,function(e,n){t(e,r+"["+(w(e)?n:"")+"]")}):w(e)&&!S(e)?a(e,function(e,n){t(e,r+(i?"":"[")+n+(i?"":"]"))}):n.push(oe(r)+"="+oe(Tt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function Pt(e,t){if(C(e)){var n=e.replace(bo,"").trim();if(n){var r=t("Content-Type");if(r&&0===r.indexOf(mo)||It(n))try{e=J(n)}catch(t){throw yo("baddata",'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"',e,t)}}}return e}function It(e){var t=e.match($o);return t&&vo[t[0]].test(e)}function Nt(e){function t(e,t){e&&(r[e]=r[e]?r[e]+", "+t:t)}var n,r=$e();return C(e)?o(e.split("\n"),function(e){n=e.indexOf(":"),t(Gr(fi(e.substr(0,n))),fi(e.substr(n+1)))}):w(e)&&o(e,function(e,n){t(Gr(n),fi(e))}),r}function Ut(e){var t;return function(n){if(t||(t=Nt(e)),n){var r=t[Gr(n)];return void 0===r&&(r=null),r}return t}}function jt(e,t,n,r){return D(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function Vt(e){return 200<=e&&e<300}function zt(){var e=this.defaults={transformResponse:[Pt],transformRequest:[function(e){return!w(e)||A(e)||P(e)||M(e)?e:K(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ye(go),put:ye(go),patch:ye(go)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},n=!1;this.useApplyAsync=function(e){return y(e)?(n=!!e,this):n};var r=this.interceptors=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(i,a,s,u,l,c,d,f){function h(n){function r(e,t){for(var n=0,r=t.length;n<r;){var i=t[n++],o=t[n++];e=e.then(i,o)}return t.length=0,e}function a(){i.$$completeOutstandingRequest(m)}function s(e,t){var n,r={};return o(e,function(e,i){D(e)?null!=(n=e(t))&&(r[i]=n):r[i]=e}),r}function u(t){var n=t.headers,r=jt(t.data,Ut(n),void 0,t.transformRequest);return b(r)&&o(n,function(e,t){"content-type"===Gr(t)&&delete n[t]}),b(t.withCredentials)&&!b(e.withCredentials)&&(t.withCredentials=e.withCredentials),g(t,r).then(l,l)}function l(e){var t=p({},e);return t.data=jt(e.data,e.headers,e.status,h.transformResponse),Vt(e.status)?t:c.reject(t)}if(!w(n))throw t("$http")("badreq","Http request configuration must be an object.  Received: {0}",n);if(!C(f.valueOf(n.url)))throw t("$http")("badreq","Http request configuration url must be a string or a $sce trusted object.  Received: {0}",n.url);var h=p({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer,jsonpCallbackParam:e.jsonpCallbackParam},n);h.headers=function(t){var n,r,i,o=e.headers,a=p({},t.headers);o=p({},o.common,o[Gr(t.method)]);e:for(n in o){r=Gr(n);for(i in a)if(Gr(i)===r)continue e;a[n]=o[n]}return s(a,ye(t))}(n),h.method=Kr(h.method),h.paramSerializer=C(h.paramSerializer)?d.get(h.paramSerializer):h.paramSerializer,i.$$incOutstandingRequestCount();var $=[],v=[],y=c.resolve(h);return o(k,function(e){(e.request||e.requestError)&&$.unshift(e.request,e.requestError),(e.response||e.responseError)&&v.push(e.response,e.responseError)}),y=r(y,$),y=y.then(u),y=r(y,v),y=y.finally(a)}function g(t,r){function i(e){if(e){var t={};return o(e,function(e,r){t[r]=function(t){function r(){e(t)}n?l.$applyAsync(r):l.$$phase?r():l.$apply(r)}}),t}}function u(e,t,r,i){function o(){p(t,e,r,i)}g&&(Vt(e)?g.put(T,[e,t,Nt(r),i]):g.remove(T)),n?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function p(e,n,r,i){n=n>=-1?n:0,(Vt(n)?S.resolve:S.reject)({data:e,status:n,headers:Ut(r),config:t,statusText:i})}function d(e){p(e.data,e.status,ye(e.headers()),e.statusText)}function m(){var e=h.pendingRequests.indexOf(t);-1!==e&&h.pendingRequests.splice(e,1)}var g,k,S=c.defer(),D=S.promise,E=t.headers,O="jsonp"===Gr(t.method),T=t.url;if(O?T=f.getTrustedResourceUrl(T):C(T)||(T=f.valueOf(T)),T=$(T,t.paramSerializer(t.params)),O&&(T=v(T,t.jsonpCallbackParam)),h.pendingRequests.push(t),D.then(m,m),!t.cache&&!e.cache||!1===t.cache||"GET"!==t.method&&"JSONP"!==t.method||(g=w(t.cache)?t.cache:w(e.cache)?e.cache:x),g&&(k=g.get(T),y(k)?N(k)?k.then(d,d):pi(k)?p(k[1],k[0],ye(k[2]),k[3]):p(k,200,{},"OK"):g.put(T,D)),b(k)){var A=zn(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0;A&&(E[t.xsrfHeaderName||e.xsrfHeaderName]=A),a(t.method,T,r,u,E,t.timeout,t.withCredentials,t.responseType,i(t.eventHandlers),i(t.uploadEventHandlers))}return D}function $(e,t){return t.length>0&&(e+=(-1===e.indexOf("?")?"?":"&")+t),e}function v(e,t){if(/[&?][^=]+=JSON_CALLBACK/.test(e))throw yo("badjsonp",'Illegal use of JSON_CALLBACK in url, "{0}"',e);if(new RegExp("[&?]"+t+"=").test(e))throw yo("badjsonp",'Illegal use of callback param, "{0}", in url, "{1}"',t,e);return e+=(-1===e.indexOf("?")?"?":"&")+t+"=JSON_CALLBACK"}var x=u("$http");e.paramSerializer=C(e.paramSerializer)?d.get(e.paramSerializer):e.paramSerializer;var k=[];return o(r,function(e){k.unshift(C(e)?d.get(e):d.invoke(e))}),h.pendingRequests=[],function(e){o(arguments,function(e){h[e]=function(t,n){return h(p({},n||{},{method:e,url:t}))}})}("get","delete","head","jsonp"),function(e){o(arguments,function(e){h[e]=function(t,n,r){return h(p({},r||{},{method:e,url:t,data:n}))}})}("post","put","patch"),h.defaults=e,h}]}function Rt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function qt(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(e,t,n,r){return Ft(e,r,e.defer,t,n[0])}]}function Ft(e,t,n,r,i){function a(e,t,n){e=e.replace("JSON_CALLBACK",t);var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){o.removeEventListener("load",a),o.removeEventListener("error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";e&&("load"!==e.type||r.wasCalled(t)||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},o.addEventListener("load",a),o.addEventListener("error",a),i.body.appendChild(o),a}return function(i,s,u,l,c,p,d,f,h,m){function g(){w&&w(),x&&x.abort()}function $(e,t,r,i,o){y(k)&&n.cancel(k),w=x=null,e(t,r,i,o)}if(s=s||e.url(),"jsonp"===Gr(i))var v=r.createCallback(s),w=a(s,v,function(e,t){var n=200===e&&r.getResponse(v);$(l,e,n,"",t),r.removeCallback(v)});else{var x=t(i,s);x.open(i,s,!0),o(c,function(e,t){y(e)&&x.setRequestHeader(t,e)}),x.onload=function(){var e=x.statusText||"",t="response"in x?x.response:x.responseText,n=1223===x.status?204:x.status;0===n&&(n=t?200:"file"===Vn(s).protocol?404:0),$(l,n,t,x.getAllResponseHeaders(),e)};var C=function(){$(l,-1,null,null,"")};if(x.onerror=C,x.onabort=C,x.ontimeout=C,o(h,function(e,t){x.addEventListener(t,e)}),o(m,function(e,t){x.upload.addEventListener(t,e)}),d&&(x.withCredentials=!0),f)try{x.responseType=f}catch(e){if("json"!==f)throw e}x.send(b(u)?null:u)}if(p>0)var k=n(g,p);else N(p)&&p.then(g)}}function Lt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(d,e).replace(f,t)}function s(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function u(o,u,d,f){function h(e){try{return e=A(e),f&&!y(e)?e:ve(e)}catch(e){r(wo.interr(o,e))}}if(!o.length||-1===o.indexOf(e)){var m;if(!u){m=$(a(o)),m.exp=o,m.expressions=[],m.$$watchDelegate=s}return m}f=!!f;for(var g,v,w,x=0,C=[],k=[],S=o.length,E=[],O=[];x<S;){if(-1===(g=o.indexOf(e,x))||-1===(v=o.indexOf(t,g+l))){x!==S&&E.push(a(o.substring(x)));break}x!==g&&E.push(a(o.substring(x,g))),w=o.substring(g+l,v),C.push(w),k.push(n(w,h)),x=v+c,O.push(E.length),E.push("")}if(d&&E.length>1&&wo.throwNoconcat(o),!u||C.length){var T=function(e){for(var t=0,n=C.length;t<n;t++){if(f&&b(e[t]))return;E[O[t]]=e[t]}return E.join("")},A=function(e){return d?i.getTrusted(d,e):i.valueOf(e)};return p(function(e){var t=0,n=C.length,i=new Array(n);try{for(;t<n;t++)i[t]=k[t](e);return T(i)}catch(e){r(wo.interr(o,e))}},{exp:o,expressions:C,$$watchDelegate:function(e,t){var n;return e.$watchGroup(k,function(r,i){var o=T(r);D(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var l=e.length,c=t.length,d=new RegExp(e.replace(/./g,o),"g"),f=new RegExp(t.replace(/./g,o),"g");return u.startSymbol=function(){return e},u.endSymbol=function(){return t},u}]}function _t(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,n,r,i){function o(o,s,u,l){function c(){p?o.apply(null,d):o(m)}var p=arguments.length>4,d=p?W(arguments,4):[],f=t.setInterval,h=t.clearInterval,m=0,g=y(l)&&!l,$=(g?r:n).defer(),v=$.promise;return u=y(u)?u:0,v.$$intervalId=f(function(){g?i.defer(c):e.$evalAsync(c),$.notify(m++),u>0&&m>=u&&($.resolve(m),h(v.$$intervalId),delete a[v.$$intervalId]),g||e.$apply()},s),a[v.$$intervalId]=$,v}var a={};return o.cancel=function(e){return!!(e&&e.$$intervalId in a)&&(a[e.$$intervalId].promise.catch(m),a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0)},o}]}function Ht(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ie(t[n]);return t.join("/")}function Bt(e,t){var n=Vn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||ko[n.protocol]||null}function Wt(e,t){if(Do.test(e))throw So("badpath",'Invalid url "{0}".',e);var n="/"!==e.charAt(0);n&&(e="/"+e);var r=Vn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=ne(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!==t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function Yt(e,t){return e.slice(0,t.length)===t}function Gt(e,t){if(Yt(t,e))return t.substr(e.length)}function Kt(e){var t=e.indexOf("#");return-1===t?e:e.substr(0,t)}function Jt(e){return e.replace(/(#.+)|#$/,"$1")}function Zt(e){return e.substr(0,Kt(e).lastIndexOf("/")+1)}function Qt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Xt(e,t,n){this.$$html5=!0,n=n||"",Bt(e,this),this.$$parse=function(e){var n=Gt(t,e);if(!C(n))throw So("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);Wt(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=re(this.$$search),n=this.$$hash?"#"+ie(this.$$hash):"";this.$$url=Ht(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return y(o=Gt(e,r))?(a=o,s=n&&y(o=Gt(n,o))?t+(Gt("/",o)||o):e+a):y(o=Gt(t,r))?s=t+o:t===r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function en(e,t,n){Bt(e,this),this.$$parse=function(r){var i,o=Gt(e,r)||Gt(t,r);b(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",b(o)&&(e=r,this.replace())):(i=Gt(n,o),b(i)&&(i=o)),Wt(i,this),this.$$path=function(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return Yt(t,n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}(this.$$path,i,e),this.$$compose()},this.$$compose=function(){var t=re(this.$$search),r=this.$$hash?"#"+ie(this.$$hash):"";this.$$url=Ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:""),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(t,n){return Kt(e)===Kt(t)&&(this.$$parse(t),!0)}}function tn(e,t,n){this.$$html5=!0,en.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e===Kt(r)?o=r:(a=Gt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=re(this.$$search),r=this.$$hash?"#"+ie(this.$$hash):"";this.$$url=Ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url,this.$$urlUpdatedByLocation=!0}}function nn(e){return function(){return this[e]}}function rn(e,t){return function(n){return b(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function on(){var e="!",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return y(t)?(e=t,this):e},this.html5Mode=function(e){return I(e)?(t.enabled=e,this):w(e)?(I(e.enabled)&&(t.enabled=e.enabled),I(e.requireBase)&&(t.requireBase=e.requireBase),(I(e.rewriteLinks)||C(e.rewriteLinks))&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=l.url(),o=l.$$state;try{r.url(e,t,n),l.$$state=r.state()}catch(e){throw l.url(i),l.$$state=o,e}}function u(e,t){
n.$broadcast("$locationChangeSuccess",l.absUrl(),e,l.$$state,t)}var l,c,p,d=r.baseHref(),f=r.url();if(t.enabled){if(!d&&t.requireBase)throw So("nobase","$location in HTML5 mode requires a <base> tag to be present!");p=Qt(f)+(d||"/"),c=i.history?Xt:tn}else p=Kt(f),c=en;var h=Zt(p);l=new c(p,h,"#"+e),l.$$parseLinkUrl(f,f),l.$$state=r.state();var m=/^\s*(javascript|mailto):/i;o.on("click",function(e){var i=t.rewriteLinks;if(i&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!==e.which&&2!==e.button){for(var s=Xr(e.target);"a"!==R(s[0]);)if(s[0]===o[0]||!(s=s.parent())[0])return;if(!C(i)||!b(s.attr(i))){var u=s.prop("href"),c=s.attr("href")||s.attr("xlink:href");w(u)&&"[object SVGAnimatedString]"===u.toString()&&(u=Vn(u.animVal).href),m.test(u)||!u||s.attr("target")||e.isDefaultPrevented()||l.$$parseLinkUrl(u,c)&&(e.preventDefault(),l.absUrl()!==r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}}),Jt(l.absUrl())!==Jt(f)&&r.url(l.absUrl(),!0);var g=!0;return r.onUrlChange(function(e,t){if(!Yt(e,h))return void(a.location.href=e);n.$evalAsync(function(){var r,i=l.absUrl(),o=l.$$state;e=Jt(e),l.$$parse(e),l.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,l.absUrl()===e&&(r?(l.$$parse(i),l.$$state=o,s(i,!1,o)):(g=!1,u(i,o)))}),n.$$phase||n.$digest()}),n.$watch(function(){if(g||l.$$urlUpdatedByLocation){l.$$urlUpdatedByLocation=!1;var e=Jt(r.url()),t=Jt(l.absUrl()),o=r.state(),a=l.$$replace,c=e!==t||l.$$html5&&i.history&&o!==l.$$state;(g||c)&&(g=!1,n.$evalAsync(function(){var t=l.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,l.$$state,o).defaultPrevented;l.absUrl()===t&&(r?(l.$$parse(e),l.$$state=o):(c&&s(t,a,o===l.$$state?null:l.$$state),u(e,o)))}))}l.$$replace=!1}),l}]}function an(){var e=!0,t=this;this.debugEnabled=function(t){return y(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack&&a?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||m,a=!1;try{a=!!i.apply}catch(e){}return a?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}var a=Qr||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function sn(e){return e+""}function un(e,t){return void 0!==e?e:t}function ln(e,t){return void 0===e?t:void 0===t?e:e+t}function cn(e,t){return!e(t).$stateful}function pn(e,t){var n,r,i;switch(e.type){case Io.Program:n=!0,o(e.body,function(e){pn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case Io.Literal:e.constant=!0,e.toWatch=[];break;case Io.UnaryExpression:pn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case Io.BinaryExpression:pn(e.left,t),pn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case Io.LogicalExpression:pn(e.left,t),pn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case Io.ConditionalExpression:pn(e.test,t),pn(e.alternate,t),pn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case Io.Identifier:e.constant=!1,e.toWatch=[e];break;case Io.MemberExpression:pn(e.object,t),e.computed&&pn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case Io.CallExpression:i=!!e.filter&&cn(t,e.callee.name),n=i,r=[],o(e.arguments,function(e){pn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=i?r:[e];break;case Io.AssignmentExpression:pn(e.left,t),pn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case Io.ArrayExpression:n=!0,r=[],o(e.elements,function(e){pn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case Io.ObjectExpression:n=!0,r=[],o(e.properties,function(e){pn(e.value,t),n=n&&e.value.constant&&!e.computed,e.value.constant||r.push.apply(r,e.value.toWatch),e.computed&&(pn(e.key,t),e.key.constant||r.push.apply(r,e.key.toWatch))}),e.constant=n,e.toWatch=r;break;case Io.ThisExpression:case Io.LocalsExpression:e.constant=!1,e.toWatch=[]}}function dn(e){if(1===e.length){var t=e[0].expression,n=t.toWatch;return 1!==n.length?n:n[0]!==t?n:void 0}}function fn(e){return e.type===Io.Identifier||e.type===Io.MemberExpression}function hn(e){if(1===e.body.length&&fn(e.body[0].expression))return{type:Io.AssignmentExpression,left:e.body[0].expression,right:{type:Io.NGValueParameter},operator:"="}}function mn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===Io.Literal||e.body[0].expression.type===Io.ArrayExpression||e.body[0].expression.type===Io.ObjectExpression)}function gn(e){return e.constant}function $n(e){this.$filter=e}function vn(e){this.$filter=e}function bn(e,t,n){this.ast=new Io(e,n),this.astCompiler=n.csp?new vn(t):new $n(t)}function yn(e){return D(e.valueOf)?e.valueOf():To.call(e)}function wn(){var e,t,n=$e(),r={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(e,t){r[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(i){function a(e,t){var r,o,a;switch(typeof e){case"string":if(e=e.trim(),a=e,!(r=n[a])){":"===e.charAt(0)&&":"===e.charAt(1)&&(o=!0,e=e.substring(2));r=new bn(new Po(h),i,h).parse(e),r.constant?r.$$watchDelegate=p:o?(r.oneTime=!0,r.$$watchDelegate=l):r.inputs&&(r.$$watchDelegate=u),n[a]=r}return d(r,t);case"function":return d(e,t);default:return d(m,t)}}function s(e,t,n){return null==e||null==t?e===t:!("object"==typeof e&&"object"==typeof(e=yn(e))&&!n)&&(e===t||e!==e&&t!==t)}function u(e,t,n,r,i){var o,a=r.inputs;if(1===a.length){var u=s;return a=a[0],e.$watch(function(e){var t=a(e);return s(t,u,r.literal)||(o=r(e,void 0,void 0,[t]),u=t&&yn(t)),o},t,n,i)}for(var l=[],c=[],p=0,d=a.length;p<d;p++)l[p]=s,c[p]=null;return e.$watch(function(e){for(var t=!1,n=0,i=a.length;n<i;n++){var u=a[n](e);(t||(t=!s(u,l[n],r.literal)))&&(c[n]=u,l[n]=u&&yn(u))}return t&&(o=r(e,void 0,void 0,c)),o},t,n,i)}function l(e,t,n,r,i){function o(e){return r(e)}function a(e,n,r){l=e,D(t)&&t(e,n,r),p(e)&&r.$$postDigest(function(){p(l)&&s()})}var s,l,p=r.literal?c:y;return s=r.inputs?u(e,a,n,r,i):e.$watch(o,a,n)}function c(e){var t=!0;return o(e,function(e){y(e)||(t=!1)}),t}function p(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function d(e,t){function n(n,r,i,a){var s=o&&a?a[0]:e(n,r,i,a);return t(s,n,r)}function r(n,r,i,s){var u=o&&s?s[0]:e(n,r,i,s),l=t(u,n,r);return a(u)?l:u}if(!t)return e;var i=e.$$watchDelegate,o=!1,a=e.literal?c:y,s=e.oneTime?r:n;return s.literal=e.literal,s.oneTime=e.oneTime,o=!e.inputs,i&&i!==u?(s.$$watchDelegate=i,s.inputs=e.inputs):t.$stateful||(s.$$watchDelegate=u,s.inputs=e.inputs?e.inputs:[e]),s}var f=mi().noUnsafeEval,h={csp:f,literals:L(r),isIdentifierStart:D(e)&&e,isIdentifierContinue:D(t)&&t};return a}]}function xn(){var e=!0;this.$get=["$rootScope","$exceptionHandler",function(t,n){return kn(function(e){t.$evalAsync(e)},n,e)}],this.errorOnUnhandledRejections=function(t){return y(t)?(e=t,this):e}}function Cn(){var e=!0;this.$get=["$browser","$exceptionHandler",function(t,n){return kn(function(e){t.defer(e)},n,e)}],this.errorOnUnhandledRejections=function(t){return y(t)?(e=t,this):e}}function kn(e,n,r){function i(){return new a}function a(){var e=this.promise=new s;this.resolve=function(t){d(e,t)},this.reject=function(t){h(e,t)},this.notify=function(t){g(e,t)}}function s(){this.$$state={status:0}}function u(t){var n,i,o;o=t.pending,t.processScheduled=!1,t.pending=void 0;try{for(var a=0,s=o.length;a<s;++a){t.pur=!0,i=o[a][0],n=o[a][t.status];try{D(n)?d(i,n(t.value)):1===t.status?d(i,t.value):h(i,t.value)}catch(e){h(i,e)}}}finally{--E,r&&0===E&&e(l)}}function l(){for(;!E&&O.length;){var e=O.shift();if(!e.pur){e.pur=!0;var t="Possibly unhandled rejection: "+xe(e.value);e.value instanceof Error?n(e.value,t):n(t)}}}function c(t){!r||t.pending||2!==t.status||t.pur||(0===E&&0===O.length&&e(l),O.push(t)),!t.processScheduled&&t.pending&&(t.processScheduled=!0,++E,e(function(){u(t)}))}function d(e,t){e.$$state.status||(t===e?m(e,S("qcycle","Expected promise to be resolved with value other than itself '{0}'",t)):f(e,t))}function f(e,t){function n(t){a||(a=!0,f(e,t))}function r(t){a||(a=!0,m(e,t))}function i(t){g(e,t)}var o,a=!1;try{(w(t)||D(t))&&(o=t.then),D(o)?(e.$$state.status=-1,o.call(t,n,r,i)):(e.$$state.value=t,e.$$state.status=1,c(e.$$state))}catch(e){r(e)}}function h(e,t){e.$$state.status||m(e,t)}function m(e,t){e.$$state.value=t,e.$$state.status=2,c(e.$$state)}function g(t,r){var i=t.$$state.pending;t.$$state.status<=0&&i&&i.length&&e(function(){for(var e,t,o=0,a=i.length;o<a;o++){t=i[o][0],e=i[o][3];try{g(t,D(e)?e(r):r)}catch(e){n(e)}}})}function $(e){var t=new s;return h(t,e),t}function v(e,t,n){var r=null;try{D(n)&&(r=n())}catch(e){return $(e)}return N(r)?r.then(function(){return t(e)},$):t(e)}function y(e,t,n,r){var i=new s;return d(i,e),i.then(t,n,r)}function x(e){var t=new s,n=0,r=pi(e)?[]:{};return o(e,function(e,i){n++,y(e).then(function(e){r[i]=e,--n||d(t,r)},function(e){h(t,e)})}),0===n&&d(t,r),t}function C(e){var t=i();return o(e,function(e){y(e).then(t.resolve,t.reject)}),t.promise}function k(e){function t(e){d(r,e)}function n(e){h(r,e)}if(!D(e))throw S("norslvr","Expected resolverFn, got '{0}'",e);var r=new s;return e(t,n),r}var S=t("$q",TypeError),E=0,O=[];p(s.prototype,{then:function(e,t,n){if(b(e)&&b(t)&&b(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&c(this.$$state),r},catch:function(e){return this.then(null,e)},finally:function(e,t){return this.then(function(t){return v(t,T,e)},function(t){return v(t,$,e)},t)}});var T=y;return k.prototype=s.prototype,k.defer=i,k.reject=$,k.when=y,k.resolve=T,k.all=x,k.race=C,k}function Sn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Dn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return t.prototype=e,t}var n=10,r=t("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(n=e),n},this.$get=["$exceptionHandler","$parse","$browser",function(t,l,c){function p(e){e.currentScope.$$destroyed=!0}function d(e){9===Qr&&(e.$$childHead&&d(e.$$childHead),e.$$nextSibling&&d(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function f(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function h(e){if(k.$$phase)throw r("inprog","{0} already in progress",k.$$phase);k.$$phase=e}function g(){k.$$phase=null}function $(e,t){do{e.$$watchersCount+=t}while(e=e.$parent)}function v(e,t,n){do{e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n]}while(e=e.$parent)}function y(){}function x(){for(;O.length;)try{O.shift()()}catch(e){t(e)}s=null}function C(){null===s&&(s=c.defer(function(){k.$apply(x)}))}f.prototype={constructor:f,$new:function(t,n){var r;return n=n||this,t?(r=new f,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!==this)&&r.$on("$destroy",p),r},$watch:function(e,t,n,r){var i=l(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,u={fn:t,last:y,get:i,exp:r||e,eq:!!n};return a=null,D(t)||(u.fn=m),s||(s=o.$$watchers=[],s.$$digestWatchIndex=-1),s.unshift(u),s.$$digestWatchIndex++,$(this,1),function(){var e=F(s,u);e>=0&&($(o,-1),e<s.$$digestWatchIndex&&s.$$digestWatchIndex--),a=null}},$watchGroup:function(e,t){function n(){u=!1,l?(l=!1,t(i,i,s)):t(i,r,s)}var r=new Array(e.length),i=new Array(e.length),a=[],s=this,u=!1,l=!0;if(!e.length){var c=!0;return s.$evalAsync(function(){c&&t(i,i,s)}),function(){c=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=s.$watch(e,function(e,o){i[t]=e,r[t]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){o=e;var t,n,r,s;if(!b(o)){if(w(o))if(i(o)){a!==f&&(a=f,g=a.length=0,p++),t=o.length,g!==t&&(p++,a.length=g=t);for(var u=0;u<t;u++)s=a[u],r=o[u],s!==s&&r!==r||s===r||(p++,a[u]=r)}else{a!==h&&(a=h={},g=0,p++),t=0;for(n in o)Wr.call(o,n)&&(t++,r=o[n],s=a[n],n in a?s!==s&&r!==r||s===r||(p++,a[n]=r):(g++,a[n]=r,p++));if(g>t){p++;for(n in a)Wr.call(o,n)||(g--,delete a[n])}}else a!==o&&(a=o,p++);return p}}function r(){if(m?(m=!1,t(o,o,u)):t(o,s,u),c)if(w(o))if(i(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var n in o)Wr.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,c=t.length>1,p=0,d=l(e,n),f=[],h={},m=!0,g=0;return this.$watch(d,r)},$digest:function(){var e,i,o,u,l,p,d,f,m,$,v,b=n,w=this,C=[];h("$digest"),c.$$checkUrlChange(),this===k&&null!==s&&(c.defer.cancel(s),x()),a=null;do{d=!1,m=w;for(var O=0;O<S.length;O++){try{v=S[O],u=v.fn,u(v.scope,v.locals)}catch(e){t(e)}a=null}S.length=0;e:do{if(p=m.$$watchers)for(p.$$digestWatchIndex=p.length;p.$$digestWatchIndex--;)try{if(e=p[p.$$digestWatchIndex])if(l=e.get,(i=l(m))===(o=e.last)||(e.eq?H(i,o):ci(i)&&ci(o))){if(e===a){d=!1;break e}}else d=!0,a=e,e.last=e.eq?L(i,null):i,u=e.fn,u(i,o===y?i:o,m),b<5&&($=4-b,C[$]||(C[$]=[]),C[$].push({msg:D(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:i,oldVal:o}))}catch(e){t(e)}if(!(f=m.$$watchersCount&&m.$$childHead||m!==w&&m.$$nextSibling))for(;m!==w&&!(f=m.$$nextSibling);)m=m.$parent}while(m=f);if((d||S.length)&&!b--)throw g(),r("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",n,C)}while(d||S.length);for(g();T<E.length;)try{E[T++]()}catch(e){t(e)}E.length=T=0,c.$$checkUrlChange()},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===k&&c.$$applicationDestroyed(),$(this,-this.$$watchersCount);for(var t in this.$$listenerCount)v(this,this.$$listenerCount[t],t);e&&e.$$childHead===this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail===this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=m,this.$on=this.$watch=this.$watchGroup=function(){return m},this.$$listeners={},this.$$nextSibling=null,d(this)}},$eval:function(e,t){return l(e)(this,t)},$evalAsync:function(e,t){k.$$phase||S.length||c.defer(function(){S.length&&k.$digest()}),S.push({scope:this,fn:l(e),locals:t})},$$postDigest:function(e){E.push(e)},$apply:function(e){try{h("$apply");try{return this.$eval(e)}finally{g()}}catch(e){t(e)}finally{try{k.$digest()}catch(e){throw t(e),e}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&O.push(t),e=l(e),C()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do{r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++}while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,v(i,1,e))}},$emit:function(e,n){var r,i,o,a=[],s=this,u=!1,l={name:e,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){l.defaultPrevented=!0},defaultPrevented:!1},c=B([l],arguments,1);do{for(r=s.$$listeners[e]||a,l.currentScope=s,i=0,o=r.length;i<o;i++)if(r[i])try{r[i].apply(null,c)}catch(e){t(e)}else r.splice(i,1),i--,o--;if(u)return l.currentScope=null,l;s=s.$parent}while(s);return l.currentScope=null,l},$broadcast:function(e,n){var r=this,i=r,o=r,a={name:e,targetScope:r,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!r.$$listenerCount[e])return a;for(var s,u,l,c=B([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[e]||[],u=0,l=s.length;u<l;u++)if(s[u])try{s[u].apply(null,c)}catch(e){t(e)}else s.splice(u,1),u--,l--;if(!(o=i.$$listenerCount[e]&&i.$$childHead||i!==r&&i.$$nextSibling))for(;i!==r&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var k=new f,S=k.$$asyncQueue=[],E=k.$$postDigestQueue=[],O=k.$$applyAsyncQueue=[],T=0;return k}]}function En(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return y(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=Vn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function On(e){return e.replace(jo,Se)}function Tn(e){if("self"===e)return e;if(C(e)){if(e.indexOf("***")>-1)throw No("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=hi(e).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+e+"$")}if(E(e))return new RegExp("^"+e.source+"$");throw No("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function An(e){var t=[];return y(e)&&o(e,function(e){t.push(Tn(e))}),t}function Mn(){this.SCE_CONTEXTS=Uo;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=An(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=An(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?zn(t):!!e.exec(t.href)}function i(n){var i,o,a=Vn(n.toString()),s=!1;for(i=0,o=e.length;i<o;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;i<o;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=p.hasOwnProperty(e)?p[e]:null;if(!n)throw No("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||b(t)||""===t)return t;if("string"!=typeof t)throw No("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof c?e.$$unwrapTrustedValue():e}function u(e,t){if(null===t||b(t)||""===t)return t;var n=p.hasOwnProperty(e)?p[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===Uo.RESOURCE_URL){if(i(t))return t;throw No("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===Uo.HTML)return l(t);throw No("unsafe","Attempting to use an unsafe value in a safe context.")}var l=function(e){throw No("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(l=n.get("$sanitize"));var c=o(),p={};return p[Uo.HTML]=o(c),p[Uo.CSS]=o(c),p[Uo.URL]=o(c),p[Uo.JS]=o(c),p[Uo.RESOURCE_URL]=o(p[Uo.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function Pn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&Qr<8)throw No("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=ye(Uo);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=g),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(Uo,function(e,t){var n=Gr(t);r[On("parse_as_"+n)]=function(t){return i(e,t)},r[On("get_trusted_"+n)]=function(t){return a(e,t)},r[On("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function In(){this.$get=["$window","$document",function(e,t){var n={},r=e.nw&&e.nw.process,i=!r&&e.chrome&&(e.chrome.app&&e.chrome.app.runtime||!e.chrome.app&&e.chrome.runtime&&e.chrome.runtime.id),o=!i&&e.history&&e.history.pushState,a=f((/android (\d+)/.exec(Gr((e.navigator||{}).userAgent))||[])[1]),s=/Boxee/i.test((e.navigator||{}).userAgent),u=t[0]||{},l=u.body&&u.body.style,c=!1,p=!1;return l&&(c=!!("transition"in l||"webkitTransition"in l),p=!!("animation"in l||"webkitAnimation"in l)),{history:!(!o||a<4||s),hasEvent:function(e){if("input"===e&&Qr)return!1;if(b(n[e])){var t=u.createElement("div");n[e]="on"+e in t}return n[e]},csp:mi(),transitions:c,animations:p,android:a}}]}function Nn(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(t,n,r,i,o){function a(s,u){function l(e){return u||(e=Vo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",s,e.status,e.statusText),t(e)),i.reject(e)}a.totalPendingRequests++,C(s)&&!b(n.get(s))||(s=o.getTrustedResourceUrl(s));var c=r.defaults&&r.defaults.transformResponse;return pi(c)?c=c.filter(function(e){return e!==Pt}):c===Pt&&(c=null),r.get(s,p({cache:n,transformResponse:c},e)).finally(function(){a.totalPendingRequests--}).then(function(e){return n.put(s,e.data),e.data},l)}return a.totalPendingRequests=0,a}]}function Un(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return o(r,function(e){var r=ui.element(e).data("$binding");r&&o(r,function(r){if(n){new RegExp("(^|\\s)"+hi(t)+"(\\s|\\||$)").test(r)&&i.push(e)}else-1!==r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function jn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,u){D(o)||(u=s,s=o,o=m);var l,c=W(arguments,3),p=y(u)&&!u,d=(p?r:n).defer(),f=d.promise;return l=t.defer(function(){try{d.resolve(o.apply(null,c))}catch(e){d.reject(e),i(e)}finally{delete a[f.$$timeoutId]}p||e.$apply()},s),f.$$timeoutId=l,a[l]=d,f}var a={};return o.cancel=function(e){return!!(e&&e.$$timeoutId in a)&&(a[e.$$timeoutId].promise.catch(m),a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId))},o}]}function Vn(e){var t=e;return Qr&&(zo.setAttribute("href",t),t=zo.href),zo.setAttribute("href",t),{href:zo.href,protocol:zo.protocol?zo.protocol.replace(/:$/,""):"",host:zo.host,search:zo.search?zo.search.replace(/^\?/,""):"",hash:zo.hash?zo.hash.replace(/^#/,""):"",hostname:zo.hostname,port:zo.port,pathname:"/"===zo.pathname.charAt(0)?zo.pathname:"/"+zo.pathname}}function zn(e){var t=C(e)?Vn(e):e;return t.protocol===Ro.protocol&&t.host===Ro.host}function Rn(){this.$get=$(e)}function qn(e){function t(e){try{return e.cookie||""}catch(e){return""}}function n(e){try{return decodeURIComponent(e)}catch(t){return e}}var r=e[0]||{},i={},o="";return function(){var e,a,s,u,l,c=t(r);if(c!==o)for(o=c,e=o.split("; "),i={},s=0;s<e.length;s++)a=e[s],(u=a.indexOf("="))>0&&(l=n(a.substring(0,u)),b(i[l])&&(i[l]=n(a.substring(u+1))));return i}}function Fn(){this.$get=qn}function Ln(e){function t(r,i){if(w(r)){var a={};return o(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Yn),t("date",ur),t("filter",_n),t("json",lr),t("limitTo",cr),t("lowercase",Wo),t("number",Gn),t("orderBy",dr),t("uppercase",Yo)}function _n(){return function(e,n,r,o){if(!i(e)){if(null==e)return e;throw t("filter")("notarray","Expected array but received: {0}",e)}o=o||"$";var a,s,u=Wn(n);switch(u){case"function":a=n;break;case"boolean":case"null":case"number":case"string":s=!0;case"object":a=Hn(n,r,o,s);break;default:return e}return Array.prototype.filter.call(e,a)}}function Hn(e,t,n,r){var i=w(e)&&n in e;return!0===t?t=H:D(t)||(t=function(e,t){return!b(e)&&(null===e||null===t?e===t:!(w(t)||w(e)&&!v(e))&&(e=Gr(""+e),t=Gr(""+t),-1!==e.indexOf(t)))}),function(o){return i&&!w(o)?Bn(o,e[n],t,n,!1):Bn(o,e,t,n,r)}}function Bn(e,t,n,r,i,o){var a=Wn(e),s=Wn(t);if("string"===s&&"!"===t.charAt(0))return!Bn(e,t.substring(1),n,r,i);if(pi(e))return e.some(function(e){return Bn(e,t,n,r,i)});switch(a){case"object":var u;if(i){for(u in e)if(u.charAt&&"$"!==u.charAt(0)&&Bn(e[u],t,n,r,!0))return!0;return!o&&Bn(e,t,n,r,!1)}if("object"===s){for(u in t){var l=t[u];if(!D(l)&&!b(l)){var c=u===r;if(!Bn(c?e:e[u],l,n,r,c,c))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function Wn(e){return null===e?"null":typeof e}function Yn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return b(n)&&(n=t.CURRENCY_SYM),b(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:Zn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Gn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:Zn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function Kn(e){var t,n,r,i,o,a=0;for((n=e.indexOf(Fo))>-1&&(e=e.replace(Fo,"")),(r=e.search(/e/i))>0?(n<0&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):n<0&&(n=e.length),r=0;e.charAt(r)===Lo;r++);if(r===(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)===Lo;)o--;for(n-=r,t=[],i=0;r<=o;r++,i++)t[i]=+e.charAt(r)}return n>qo&&(t=t.splice(0,qo-1),a=n-1,n=1),{d:t,e:a,i:n}}function Jn(e,t,n,r){var i=e.d,o=i.length-e.i;t=b(t)?Math.min(Math.max(n,o),r):+t;var a=t+e.i,s=i[a];if(a>0){i.splice(Math.max(e.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),e.i=1,i.length=Math.max(1,a=t+1),i[0]=0;for(var l=1;l<a;l++)i[l]=0}if(s>=5)if(a-1<0){for(var c=0;c>a;c--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[a-1]++;for(;o<Math.max(0,t);o++)i.push(0);var p=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0);p&&(i.unshift(p),e.i++)}function Zn(e,t,n,r,i){if(!C(e)&&!k(e)||isNaN(e))return"";var o,a=!isFinite(e),s=!1,u=Math.abs(e)+"",l="";if(a)l="∞";else{o=Kn(u),Jn(o,i,t.minFrac,t.maxFrac);var c=o.d,p=o.i,d=o.e,f=[];for(s=c.reduce(function(e,t){return e&&!t},!0);p<0;)c.unshift(0),p++;p>0?f=c.splice(p,c.length):(f=c,c=[0]);var h=[];for(c.length>=t.lgSize&&h.unshift(c.splice(-t.lgSize,c.length).join(""));c.length>t.gSize;)h.unshift(c.splice(-t.gSize,c.length).join(""));c.length&&h.unshift(c.join("")),l=h.join(n),f.length&&(l+=r+f.join("")),d&&(l+="e+"+d)}return e<0&&!s?t.negPre+l+t.negSuf:t.posPre+l+t.posSuf}function Qn(e,t,n,r){var i="";for((e<0||r&&e<=0)&&(r?e=1-e:(e=-e,i="-")),e=""+e;e.length<t;)e=Lo+e;return n&&(e=e.substr(e.length-t)),i+e}function Xn(e,t,n,r,i){return n=n||0,function(o){var a=o["get"+e]();return(n>0||a>-n)&&(a+=n),0===a&&-12===n&&(a=12),Qn(a,t,r,i)}}function er(e,t,n){return function(r,i){var o=r["get"+e]();return i[Kr((n?"STANDALONE":"")+(t?"SHORT":"")+e)][o]}}function tr(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=Qn(Math[r>0?"floor":"ceil"](r/60),2)+Qn(Math.abs(r%60),2)}function nr(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(t<=4?5:12)-t)}function rr(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function ir(e){return function(t){var n=nr(t.getFullYear()),r=rr(t),i=+r-+n;return Qn(1+Math.round(i/6048e5),e)}}function or(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function ar(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function sr(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function ur(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=f(t[9]+t[10]),o=f(t[9]+t[11])),a.call(r,f(t[1]),f(t[2])-1,f(t[3]));var u=f(t[4]||0)-i,l=f(t[5]||0)-o,c=f(t[6]||0),p=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,u,l,c,p),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",l=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,C(n)&&(n=Bo.test(n)?f(n):t(n)),k(n)&&(n=new Date(n)),!S(n)||!isFinite(n.getTime()))return n;for(;r;)s=Ho.exec(r),s?(l=B(l,s,1),r=l.pop()):(l.push(r),r=null);var c=n.getTimezoneOffset();return i&&(c=Z(i,c),n=X(n,i,!0)),o(l,function(t){a=_o[t],u+=a?a(n,e.DATETIME_FORMATS,c):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function lr(){return function(e,t){return b(t)&&(t=2),K(e,t)}}function cr(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):f(t),ci(t)?e:(k(e)&&(e=e.toString()),i(e)?(n=!n||isNaN(n)?0:f(n),n=n<0?Math.max(0,e.length+n):n,t>=0?pr(e,n,n+t):0===n?pr(e,t,e.length):pr(e,Math.max(0,n+t),n)):e)}}function pr(e,t,n){return C(e)?e.slice(t,n):ni.call(e,t,n)}function dr(e){function n(t){return t.map(function(t){var n=1,r=g;if(D(t))r=t;else if(C(t)&&("+"!==t.charAt(0)&&"-"!==t.charAt(0)||(n="-"===t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(r=e(t),r.constant))){var i=r();r=function(e){return e[i]}}return{get:r,descending:n}})}function r(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e){return D(e.valueOf)&&(e=e.valueOf(),r(e))?e:(v(e)&&(e=e.toString(),r(e)),e)}function a(e,t){var n=typeof e;return null===e?(n="string",e="null"):"object"===n&&(e=o(e)),{value:e,type:n,index:t}}function s(e,t){var n=0,r=e.type,i=t.type;if(r===i){var o=e.value,a=t.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(w(o)&&(o=e.index),w(a)&&(a=t.index)),o!==a&&(n=o<a?-1:1)}else n=r<i?-1:1;return n}return function(e,r,o,u){function l(e,t){return{value:e,tieBreaker:{value:t,type:"number",index:t},predicateValues:p.map(function(n){return a(n.get(e),t)})}}function c(e,t){for(var n=0,r=p.length;n<r;n++){var i=f(e.predicateValues[n],t.predicateValues[n]);if(i)return i*p[n].descending*d}return f(e.tieBreaker,t.tieBreaker)*d}if(null==e)return e;if(!i(e))throw t("orderBy")("notarray","Expected array but received: {0}",e);pi(r)||(r=[r]),0===r.length&&(r=["+"]);var p=n(r),d=o?-1:1,f=D(u)?u:s,h=Array.prototype.map.call(e,l);return h.sort(c),e=h.map(function(e){return e.value})}}function fr(e){return D(e)&&(e={link:e}),e.restrict=e.restrict||"AC",$(e)}function hr(e,t){e.$name=t}function mr(e,t,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(t.name||t.ngForm||"")(n),this.$dirty=!1,this.$pristine=!0,this.$valid=!0,this.$invalid=!1,this.$submitted=!1,this.$$parentForm=Jo,this.$$element=e,this.$$animate=r,gr(this)}function gr(e){e.$$classCache={},e.$$classCache[Ia]=!(e.$$classCache[Pa]=e.$$element.hasClass(Pa))}function $r(e){function t(e,t,n,r){e[t]||(e[t]={}),a(e[t],n,r)}function n(e,t,n,r){e[t]&&s(e[t],n,r),vr(e[t])&&(e[t]=void 0)}function r(e,t,n){n&&!e.$$classCache[t]?(e.$$animate.addClass(e.$$element,t),e.$$classCache[t]=!0):!n&&e.$$classCache[t]&&(e.$$animate.removeClass(e.$$element,t),e.$$classCache[t]=!1)}function i(e,t,n){t=t?"-"+pe(t,"-"):"",r(e,Pa+t,!0===n),r(e,Ia+t,!1===n)}var o=e.clazz,a=e.set,s=e.unset
;o.prototype.$setValidity=function(e,o,u){b(o)?t(this,"$pending",e,u):n(this,"$pending",e,u),I(o)?o?(s(this.$error,e,u),a(this.$$success,e,u)):(a(this.$error,e,u),s(this.$$success,e,u)):(s(this.$error,e,u),s(this.$$success,e,u)),this.$pending?(r(this,Zo,!0),this.$valid=this.$invalid=void 0,i(this,"",null)):(r(this,Zo,!1),this.$valid=vr(this.$error),this.$invalid=!this.$valid,i(this,"",this.$valid));var l;l=this.$pending&&this.$pending[e]?void 0:!this.$error[e]&&(!!this.$$success[e]||null),i(this,e,l),this.$$parentForm.$setValidity(e,l,this)}}function vr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function br(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function yr(e,t,n,r,i,o){wr(e,t,n,r,i,o),br(r)}function wr(e,t,n,r,i,o){var a=Gr(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,l()})}var u,l=function(e){if(u&&(o.defer.cancel(u),u=null),!s){var i=t.val(),l=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=fi(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,l)}};if(i.hasEvent("input"))t.on("input",l);else{var c=function(e,t,n){u||(u=o.defer(function(){u=null,t&&t.value===n||l(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||15<t&&t<19||37<=t&&t<=40||c(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",c)}t.on("change",l),pa[a]&&r.$$hasNativeValidators&&a===n.type&&t.on(ca,function(e){if(!u){var t=this[Br],n=t.badInput,r=t.typeMismatch;u=o.defer(function(){u=null,t.badInput===n&&t.typeMismatch===r||l(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function xr(e,t){if(S(e))return e;if(C(e)){sa.lastIndex=0;var n=sa.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,l=nr(r),c=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),u=t.getMilliseconds()),new Date(r,0,l.getDate()+c,o,a,s,u)}}return NaN}function Cr(e,t){return function(n,r){var i,a;if(S(n))return n;if(C(n)){if('"'===n.charAt(0)&&'"'===n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),ta.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function kr(e,t,n,r){return function(i,o,a,s,u,l,c){function p(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function d(e){return y(e)&&!S(e)?n(e)||void 0:e}Sr(i,o,a,s),wr(i,o,a,s,u,l);var f,h=s&&s.$options.getOption("timezone");if(s.$$parserName=e,s.$parsers.push(function(e){if(s.$isEmpty(e))return null;if(t.test(e)){var r=n(e,f);return h&&(r=X(r,h)),r}}),s.$formatters.push(function(e){if(e&&!S(e))throw ja("datefmt","Expected `{0}` to be a date",e);return p(e)?(f=e,f&&h&&(f=X(f,h,!0)),c("date")(e,r,h)):(f=null,"")}),y(a.min)||a.ngMin){var m;s.$validators.min=function(e){return!p(e)||b(m)||n(e)>=m},a.$observe("min",function(e){m=d(e),s.$validate()})}if(y(a.max)||a.ngMax){var g;s.$validators.max=function(e){return!p(e)||b(g)||n(e)<=g},a.$observe("max",function(e){g=d(e),s.$validate()})}}}function Sr(e,t,n,r){var i=t[0];(r.$$hasNativeValidators=w(i.validity))&&r.$parsers.push(function(e){var n=t.prop(Br)||{};return n.badInput||n.typeMismatch?void 0:e})}function Dr(e){e.$$parserName="number",e.$parsers.push(function(t){return e.$isEmpty(t)?null:ia.test(t)?parseFloat(t):void 0}),e.$formatters.push(function(t){if(!e.$isEmpty(t)){if(!k(t))throw ja("numfmt","Expected `{0}` to be a number",t);t=t.toString()}return t})}function Er(e){return y(e)&&!k(e)&&(e=parseFloat(e)),ci(e)?void 0:e}function Or(e){return(0|e)===e}function Tr(e){var t=e.toString(),n=t.indexOf(".");if(-1===n){if(-1<e&&e<1){var r=/e-(\d+)$/.exec(t);if(r)return Number(r[1])}return 0}return t.length-n-1}function Ar(e,t,n){var r=Number(e),i=!Or(r),o=!Or(t),a=!Or(n);if(i||o||a){var s=i?Tr(r):0,u=o?Tr(t):0,l=a?Tr(n):0,c=Math.max(s,u,l),p=Math.pow(10,c);r*=p,t*=p,n*=p,i&&(r=Math.round(r)),o&&(t=Math.round(t)),a&&(n=Math.round(n))}return(r-t)%n==0}function Mr(e,t,n,r,i,o){Sr(e,t,n,r),Dr(r),wr(e,t,n,r,i,o);var a,s;if((y(n.min)||n.ngMin)&&(r.$validators.min=function(e){return r.$isEmpty(e)||b(a)||e>=a},n.$observe("min",function(e){a=Er(e),r.$validate()})),(y(n.max)||n.ngMax)&&(r.$validators.max=function(e){return r.$isEmpty(e)||b(s)||e<=s},n.$observe("max",function(e){s=Er(e),r.$validate()})),y(n.step)||n.ngStep){var u;r.$validators.step=function(e,t){return r.$isEmpty(t)||b(u)||Ar(t,a||0,u)},n.$observe("step",function(e){u=Er(e),r.$validate()})}}function Pr(e,t,n,r,i,o){function a(e,r){t.attr(e,n[e]),n.$observe(e,r)}function s(e){if(p=Er(e),!ci(r.$modelValue))if(c){var n=t.val();p>n&&(n=p,t.val(n)),r.$setViewValue(n)}else r.$validate()}function u(e){if(d=Er(e),!ci(r.$modelValue))if(c){var n=t.val();d<n&&(t.val(d),n=d<p?p:d),r.$setViewValue(n)}else r.$validate()}function l(e){f=Er(e),ci(r.$modelValue)||(c&&r.$viewValue!==t.val()?r.$setViewValue(t.val()):r.$validate())}Sr(e,t,n,r),Dr(r),wr(e,t,n,r,i,o);var c=r.$$hasNativeValidators&&"range"===t[0].type,p=c?0:void 0,d=c?100:void 0,f=c?1:void 0,h=t[0].validity,m=y(n.min),g=y(n.max),$=y(n.step),v=r.$render;r.$render=c&&y(h.rangeUnderflow)&&y(h.rangeOverflow)?function(){v(),r.$setViewValue(t.val())}:v,m&&(r.$validators.min=c?function(){return!0}:function(e,t){return r.$isEmpty(t)||b(p)||t>=p},a("min",s)),g&&(r.$validators.max=c?function(){return!0}:function(e,t){return r.$isEmpty(t)||b(d)||t<=d},a("max",u)),$&&(r.$validators.step=c?function(){return!h.stepMismatch}:function(e,t){return r.$isEmpty(t)||b(f)||Ar(t,p||0,f)},a("step",l))}function Ir(e,t,n,r,i,o){wr(e,t,n,r,i,o),br(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||na.test(n)}}function Nr(e,t,n,r,i,o){wr(e,t,n,r,i,o),br(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||ra.test(n)}}function Ur(e,t,n,r){var i=!n.ngTrim||"false"!==fi(n.ngTrim);b(n.name)&&t.attr("name",u());var o=function(e){var o;t[0].checked&&(o=n.value,i&&(o=fi(o)),r.$setViewValue(o,e&&e.type))};t.on("click",o),r.$render=function(){var e=n.value;i&&(e=fi(e)),t[0].checked=e===r.$viewValue},n.$observe("value",r.$render)}function jr(e,t,n,r,i){var o;if(y(r)){if(o=e(r),!o.constant)throw ja("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function Vr(e,t,n,r,i,o,a,s){var u=jr(s,e,"ngTrueValue",n.ngTrueValue,!0),l=jr(s,e,"ngFalseValue",n.ngFalseValue,!1),c=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",c),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return!1===e},r.$formatters.push(function(e){return H(e,u)}),r.$parsers.push(function(e){return e?u:l})}function zr(e,t){function n(e,t){if(!e||!e.length)return[];if(!t||!t.length)return e;var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i===t[o])continue e;n.push(i)}return n}function r(e){return e&&e.split(" ")}function i(e){var t=e;return pi(e)?t=e.map(i).join(" "):w(e)&&(t=Object.keys(e).filter(function(t){return e[t]}).join(" ")),t}e="ngClass"+e;var a;return["$parse",function(s){return{restrict:"AC",link:function(u,l,c){function p(e){e=h(r(e),1),c.$addClass(e)}function d(e){e=h(r(e),-1),c.$removeClass(e)}function f(e,t){var i=r(e),o=r(t),a=n(i,o),s=n(o,i),u=h(a,-1),l=h(s,1);c.$addClass(l),c.$removeClass(u)}function h(e,t){var n=[];return o(e,function(e){(t>0||v[e])&&(v[e]=(v[e]||0)+t,v[e]===+(t>0)&&n.push(e))}),n.join(" ")}function m(e){e===t?p($):d($),b=e}function g(e){C(e)||(e=i(e)),b===t&&f($,e),$=e}var $,v=l.data("$classCounts"),b=!0;v||(v=$e(),l.data("$classCounts",v)),"ngClass"!==e&&(a||(a=s("$index",function(e){return 1&e})),u.$watch(a,m)),u.$watch(s(c[e],i),g)}}}]}function Rr(e,t,n,r,i,o,a,s,u){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(n.name||"",!1)(e),this.$$parentForm=Jo,this.$options=Va,this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$currentValidationRunId=0,Object.defineProperty(this,"$$scope",{value:e}),this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=t,gr(this),qr(this)}function qr(e){e.$$scope.$watch(function(t){var n=e.$$ngModelGet(t);if(n!==e.$modelValue&&(e.$modelValue===e.$modelValue||n===n)){e.$modelValue=e.$$rawModelValue=n,e.$$parserValid=void 0;for(var r=e.$formatters,i=r.length,o=n;i--;)o=r[i](o);e.$viewValue!==o&&(e.$$updateEmptyClasses(o),e.$viewValue=e.$$lastCommittedViewValue=o,e.$render(),e.$$runValidators(e.$modelValue,e.$viewValue,m))}return n})}function Fr(e){this.$$options=e}function Lr(e,t){o(t,function(t,n){y(e[n])||(e[n]=t)})}function _r(e,t){e.prop("selected",t),e.attr("selected",t)}var Hr=/^\/(.+)\/([a-z]*)$/,Br="validity",Wr=Object.prototype.hasOwnProperty,Yr={objectMaxDepth:5},Gr=function(e){return C(e)?e.toLowerCase():e},Kr=function(e){return C(e)?e.toUpperCase():e},Jr=function(e){return C(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Zr=function(e){return C(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Gr=Jr,Kr=Zr);var Qr,Xr,ei,ti,ni=[].slice,ri=[].splice,ii=[].push,oi=Object.prototype.toString,ai=Object.getPrototypeOf,si=t("ng"),ui=e.angular||(e.angular={}),li=0;Qr=e.document.documentMode;var ci=Number.isNaN||function(e){return e!==e};m.$inject=[],g.$inject=[];var pi=Array.isArray,di=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,fi=function(e){return C(e)?e.trim():e},hi=function(e){return e.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},mi=function(){if(!y(mi.rules)){var t=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(t){var n=t.getAttribute("ng-csp")||t.getAttribute("data-ng-csp");mi.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else mi.rules={noUnsafeEval:function(){try{return new Function(""),!1}catch(e){return!0}}(),noInlineStyle:!1}}return mi.rules},gi=function(){if(y(gi.name_))return gi.name_;var t,n,r,i,o=vi.length;for(n=0;n<o;++n)if(r=vi[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return gi.name_=i},$i=/:/g,vi=["ng-","data-ng-","ng:","x-ng-"],bi=function(t){var n=t.currentScript;if(!n)return!0;if(!(n instanceof e.HTMLScriptElement||n instanceof e.SVGScriptElement))return!1;var r=n.attributes;return[r.getNamedItem("src"),r.getNamedItem("href"),r.getNamedItem("xlink:href")].every(function(e){if(!e)return!0;if(!e.value)return!1;var n=t.createElement("a");if(n.href=e.value,t.location.origin===n.origin)return!0;switch(n.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})}(e.document),yi=/[A-Z]/g,wi=!1,xi=1,Ci=3,ki=8,Si=9,Di=11,Ei={full:"1.6.4",major:1,minor:6,dot:4,codeName:"phenomenal-footnote"};Ie.expando="ng339";var Oi=Ie.cache={},Ti=1;Ie._data=function(e){return this.cache[e[this.expando]]||{}};var Ai=/-([a-z])/g,Mi=/^-ms-/,Pi={mouseleave:"mouseout",mouseenter:"mouseover"},Ii=t("jqLite"),Ni=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Ui=/<|&#?\w+;/,ji=/<([\w:-]+)/,Vi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,zi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};zi.optgroup=zi.option,zi.tbody=zi.tfoot=zi.colgroup=zi.caption=zi.thead,zi.th=zi.td;var Ri=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},qi=Ie.prototype={ready:Ke,toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Xr(e>=0?this[e]:this[this.length+e])},length:0,push:ii,sort:[].sort,splice:[].splice},Fi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){Fi[Gr(e)]=e});var Li={};o("input,select,option,textarea,button,form,details".split(","),function(e){Li[e]=!0});var _i={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};o({data:Re,removeData:Ve,hasData:Te,cleanData:function(e){for(var t=0,n=e.length;t<n;t++)Ve(e[t])}},function(e,t){Ie[t]=e}),o({data:Re,inheritedData:Be,scope:function(e){return Xr.data(e,"$scope")||Be(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Xr.data(e,"$isolateScope")||Xr.data(e,"$isolateScopeNoTemplate")},controller:He,injector:function(e){return Be(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:qe,css:function(e,t,n){if(t=ke(t),!y(n))return e.style[t];e.style[t]=n},attr:function(e,t,n){var r,i=e.nodeType;if(i!==Ci&&2!==i&&i!==ki&&e.getAttribute){var o=Gr(t),a=Fi[o];if(!y(n))return r=e.getAttribute(t),a&&null!==r&&(r=o),null===r?void 0:r;null===n||!1===n&&a?e.removeAttribute(t):e.setAttribute(t,a?o:n)}},prop:function(e,t,n){if(!y(n))return e[t];e[t]=n},text:function(){function e(e,t){if(b(t)){var n=e.nodeType;return n===xi||n===Ci?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(b(t)){if(e.multiple&&"select"===R(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),n}return e.value}e.value=t},html:function(e,t){if(b(t))return e.innerHTML;Ue(e,!0),e.innerHTML=t},empty:We},function(e,t){Ie.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==We&&b(2===e.length&&e!==qe&&e!==He?t:n)){if(w(t)){for(r=0;r<o;r++)if(e===Re)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=b(a)?Math.min(o,1):o,u=0;u<s;u++){var l=e(this[u],t,n);a=a?a+l:l}return a}for(r=0;r<o;r++)e(this[r],t,n);return this}}),o({removeData:Ve,on:function(e,t,n,r){if(y(r))throw Ii("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Oe(e)){var i=ze(e,!0),o=i.events,a=i.handle;a||(a=i.handle=Qe(e,o));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],u=s.length,l=function(t,r,i){var s=o[t];s||(s=o[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||i||e.addEventListener(t,a)),s.push(n)};u--;)t=s[u],Pi[t]?(l(Pi[t],et),l(t,void 0,!0)):l(t)}},off:je,one:function(e,t,n){e=Xr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;Ue(e),o(new Ie(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){e.nodeType===xi&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===xi||n===Di){t=new Ie(t);for(var r=0,i=t.length;r<i;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===xi){var n=e.firstChild;o(new Ie(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){Pe(e,Xr(t).eq(0).clone()[0])},remove:Ye,detach:function(e){Ye(e,!0)},after:function(e,t){var n=e,r=e.parentNode;if(r){t=new Ie(t);for(var i=0,o=t.length;i<o;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}}},addClass:Le,removeClass:Fe,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;b(r)&&(r=!qe(e,t)),(r?Le:Fe)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==Di?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Ne,triggerHandler:function(e,t,n){var r,i,a,s=t.type||t,u=ze(e),l=u&&u.events,c=l&&l[s];c&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:m,type:s,target:e},t.type&&(r=p(r,t)),i=ye(c),a=n?[r].concat(n):[r],o(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){Ie.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;o<a;o++)b(i)?(i=e(this[o],t,n,r),y(i)&&(i=Xr(i))):_e(i,e(this[o],t,n,r));return y(i)?i:this}}),Ie.prototype.bind=Ie.prototype.on,Ie.prototype.unbind=Ie.prototype.off;var Hi=Object.create(null);rt.prototype={_idx:function(e){return e===this._lastKey?this._lastIndex:(this._lastKey=e,this._lastIndex=this._keys.indexOf(e),this._lastIndex)},_transformKey:function(e){return ci(e)?Hi:e},get:function(e){e=this._transformKey(e);var t=this._idx(e);if(-1!==t)return this._values[t]},set:function(e,t){e=this._transformKey(e);var n=this._idx(e);-1===n&&(n=this._lastIndex=this._keys.length),this._keys[n]=e,this._values[n]=t},delete:function(e){e=this._transformKey(e);var t=this._idx(e);return-1!==t&&(this._keys.splice(t,1),this._values.splice(t,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var Bi=rt,Wi=[function(){this.$get=[function(){return Bi}]}],Yi=/^([^(]+?)=>/,Gi=/^[^(]*\(\s*([^)]*)\)/m,Ki=/,/,Ji=/^\s*(_?)(\S+?)\1\s*$/,Zi=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Qi=t("$injector");ut.$$annotate=st;var Xi=t("$animate"),eo=1,to=function(){this.$get=m},no=function(){var e=new Bi,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(e,t,n){var r=!1;return t&&(t=C(t)?t.split(" "):pi(t)?t:[],o(t,function(t){t&&(r=!0,e[t]=n)})),r}function a(){o(t,function(t){var n=e.get(t);if(n){var r=dt(t.attr("class")),i="",a="";o(n,function(e,t){e!==!!r[t]&&(e?i+=(i.length?" ":"")+t:a+=(a.length?" ":"")+t)}),o(t,function(e){i&&Le(e,i),a&&Fe(e,a)}),e.delete(t)}}),t.length=0}function s(n,o,s){var u=e.get(n)||{},l=i(u,o,!0),c=i(u,s,!1);(l||c)&&(e.set(n,u),t.push(n),1===t.length&&r.$$postDigest(a))}return{enabled:m,on:m,off:m,pin:m,push:function(e,t,r,i){i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},ro=["$provide",function(e){var t=this,n=null;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Xi("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(n=e instanceof RegExp?e:null)){if(new RegExp("[(\\s|\\/)]ng-animate[(\\s|\\/)]").test(n.toString()))throw n=null,Xi("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',"ng-animate")}return n},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=pt(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Xr(r),i=i&&Xr(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",ft(o))},move:function(n,r,i,o){return r=r&&Xr(r),i=i&&Xr(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",ft(o))},leave:function(t,n){return e.push(t,"leave",ft(n),function(){t.remove()})},addClass:function(t,n,r){return r=ft(r),r.addClass=ct(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=ft(r),r.removeClass=ct(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=ft(i),i.addClass=ct(i.addClass,n),i.removeClass=ct(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=ft(o),o.from=o.from?p(o.from,n):n,o.to=o.to?p(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=ct(o.tempClasses,i),e.push(t,"animate",o)}}}]}],io=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),n.length>1||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},oo=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(e,t,n,r,i){function a(e){this.setHost(e);var t=n(),o=function(e){i(e,0,!1)};this._doneCallbacks=[],this._tick=function(e){r()?o(e):t(e)},this._state=0}return a.chain=function(e,t){function n(){if(r===e.length)return void t(!0);e[r](function(e){if(!1===e)return void t(!1);r++,n()})}var r=0;n()},a.all=function(e,t){function n(n){i=i&&n,++r===e.length&&t(i)}var r=0,i=!0;o(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:m,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){!1===t?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},catch:function(e){return this.getPromise().catch(e)},finally:function(e){return this.getPromise().finally(e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(e){2!==this._state&&(o(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=2)}},a}]},ao=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(t.addClass(a.addClass),a.addClass=null),a.removeClass&&(t.removeClass(a.removeClass),a.removeClass=null),a.to&&(t.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=L(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(t.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},so=t("$compile"),uo=new vt;bt.$inject=["$provide","$$sanitizeUriProvider"],yt.prototype.isFirstChange=function(){return this.previousValue===uo};var lo=/^((?:x|data)[:\-_])/i,co=/[:\-_]+(.)/g,po=t("$controller"),fo=/^(\S+)(\s+as\s+([\w$]+))?$/,ho=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Xr&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},mo="application/json",go={"Content-Type":mo+";charset=utf-8"},$o=/^\[|^\{(?!\{)/,vo={"[":/]$/,"{":/}$/},bo=/^\)]\}',?\n/,yo=t("$http"),wo=ui.$interpolateMinErr=t("$interpolate");wo.throwNoconcat=function(e){throw wo("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},wo.interr=function(e,t){return wo("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var xo=function(){this.$get=function(){function e(e){var t=function(e){t.data=e,t.called=!0};return t.id=e,t}var t=ui.callbacks,n={};return{createCallback:function(r){var i="_"+(t.$$counter++).toString(36),o="angular.callbacks."+i,a=e(i);return n[o]=t[i]=a,o},wasCalled:function(e){return n[e].called},getResponse:function(e){return n[e].data},removeCallback:function(e){var r=n[e];delete t[r.id],delete n[e]}}}},Co=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,ko={http:80,https:443,ftp:21},So=t("$location"),Do=/^\s*[\\\/]{2,}/,Eo={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:nn("$$absUrl"),url:function(e){if(b(e))return this.$$url;var t=Co.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:nn("$$protocol"),host:nn("$$host"),port:nn("$$port"),path:rn("$$path",function(e){return e=null!==e?e.toString():"","/"===e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(C(e)||k(e))e=e.toString(),this.$$search=ne(e);else{if(!w(e))throw So("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=L(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:b(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:rn("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([tn,en,Xt],function(e){e.prototype=Object.create(Eo),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Xt||!this.$$html5)throw So("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=b(t)?null:t,this.$$urlUpdatedByLocation=!0,this}});var Oo=t("$parse"),To={}.constructor.prototype.valueOf,Ao=$e();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){Ao[e]=!0});var Mo={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},Po=function(e){this.options=e};Po.prototype={constructor:Po,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=Ao[t],o=Ao[n],a=Ao[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length&&this.text.charAt(this.index+t)},isNumber:function(e){return"0"<=e&&e<="9"&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"\t"===e||"\n"===e||"\v"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return"a"<=e&&e<="z"||"A"<=e&&e<="Z"||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=y(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw Oo("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Gr(this.text.charAt(this.index));if("."===n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{n+=Mo[o]||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var Io=function(e,t){this.lexer=e,this.options=t};Io.Program="Program",Io.ExpressionStatement="ExpressionStatement",Io.AssignmentExpression="AssignmentExpression",Io.ConditionalExpression="ConditionalExpression",Io.LogicalExpression="LogicalExpression",Io.BinaryExpression="BinaryExpression",Io.UnaryExpression="UnaryExpression",Io.CallExpression="CallExpression",Io.MemberExpression="MemberExpression",Io.Identifier="Identifier",Io.Literal="Literal",Io.ArrayExpression="ArrayExpression",Io.Property="Property",Io.ObjectExpression="ObjectExpression",Io.ThisExpression="ThisExpression",Io.LocalsExpression="LocalsExpression",Io.NGValueParameter="NGValueParameter",Io.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:Io.Program,body:e}},expressionStatement:function(){return{type:Io.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();if(this.expect("=")){if(!fn(e))throw Oo("lval","Trying to assign a value to a non l-value");e={type:Io.AssignmentExpression,left:e,right:this.assignment(),operator:"="}}return e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:Io.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:Io.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:Io.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:Io.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:Io.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:Io.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:Io.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:Io.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=L(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:Io.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek())
;for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:Io.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:Io.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:Io.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:Io.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do{e.push(this.filterChain())}while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:Io.Identifier,name:e.text}},constant:function(){return{type:Io.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Io.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:Io.Property,kind:"init"},this.peek().constant?(e.key=this.constant(),e.computed=!1,this.consume(":"),e.value=this.expression()):this.peek().identifier?(e.key=this.identifier(),e.computed=!1,this.peek(":")?(this.consume(":"),e.value=this.expression()):e.value=e.key):this.peek("[")?(this.consume("["),e.key=this.expression(),this.consume("]"),e.computed=!0,this.consume(":"),e.value=this.expression()):this.throwError("invalid key",this.peek()),t.push(e)}while(this.expect(","));return this.consume("}"),{type:Io.ObjectExpression,properties:t}},throwError:function(e,t){throw Oo("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw Oo("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw Oo("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{this:{type:Io.ThisExpression},$locals:{type:Io.LocalsExpression}}},$n.prototype={compile:function(e){var t=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},pn(e,t.$filter);var n,r="";if(this.stage="assign",n=hn(e)){this.state.computing="assign";var i=this.nextId();this.recurse(n,i),this.return_(i),r="fn.assign="+this.generateFunction("assign","s,v,l")}var a=dn(e.body);t.stage="inputs",o(a,function(e,n){var r="fn"+n;t.state[r]={vars:[],body:[],own:{}},t.state.computing=r;var i=t.nextId();t.recurse(e,i),t.return_(i),t.state.inputs.push(r),e.watchId=n}),this.state.computing="fn",this.stage="main",this.recurse(e);var s='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+r+this.watchFns()+"return fn;",u=new Function("$filter","getStringValue","ifDefined","plus",s)(this.$filter,sn,un,ln);return this.state=this.stage=void 0,u},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return o(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return o(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,r,i,a){var s,u,l,c,p,d=this;if(r=r||m,!a&&y(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,r,i,!0));switch(e.type){case Io.Program:o(e.body,function(t,n){d.recurse(t.expression,void 0,void 0,function(e){u=e}),n!==e.body.length-1?d.current().body.push(u,";"):d.return_(u)});break;case Io.Literal:c=this.escape(e.value),this.assign(t,c),r(t||c);break;case Io.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){u=e}),c=e.operator+"("+this.ifDefined(u,0)+")",this.assign(t,c),r(c);break;case Io.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){u=e}),c="+"===e.operator?this.plus(s,u):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(u,0):"("+s+")"+e.operator+"("+u+")",this.assign(t,c),r(c);break;case Io.LogicalExpression:t=t||this.nextId(),d.recurse(e.left,t),d.if_("&&"===e.operator?t:d.not(t),d.lazyRecurse(e.right,t)),r(t);break;case Io.ConditionalExpression:t=t||this.nextId(),d.recurse(e.test,t),d.if_(t,d.lazyRecurse(e.alternate,t),d.lazyRecurse(e.consequent,t)),r(t);break;case Io.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===d.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),d.if_("inputs"===d.stage||d.not(d.getHasOwnProperty("l",e.name)),function(){d.if_("inputs"===d.stage||"s",function(){i&&1!==i&&d.if_(d.isNull(d.nonComputedMember("s",e.name)),d.lazyAssign(d.nonComputedMember("s",e.name),"{}")),d.assign(t,d.nonComputedMember("s",e.name))})},t&&d.lazyAssign(t,d.nonComputedMember("l",e.name))),r(t);break;case Io.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),d.recurse(e.object,s,void 0,function(){d.if_(d.notNull(s),function(){e.computed?(u=d.nextId(),d.recurse(e.property,u),d.getStringValue(u),i&&1!==i&&d.if_(d.not(d.computedMember(s,u)),d.lazyAssign(d.computedMember(s,u),"{}")),c=d.computedMember(s,u),d.assign(t,c),n&&(n.computed=!0,n.name=u)):(i&&1!==i&&d.if_(d.isNull(d.nonComputedMember(s,e.property.name)),d.lazyAssign(d.nonComputedMember(s,e.property.name),"{}")),c=d.nonComputedMember(s,e.property.name),d.assign(t,c),n&&(n.computed=!1,n.name=e.property.name))},function(){d.assign(t,"undefined")}),r(t)},!!i);break;case Io.CallExpression:t=t||this.nextId(),e.filter?(u=d.filter(e.callee.name),l=[],o(e.arguments,function(e){var t=d.nextId();d.recurse(e,t),l.push(t)}),c=u+"("+l.join(",")+")",d.assign(t,c),r(t)):(u=d.nextId(),s={},l=[],d.recurse(e.callee,u,s,function(){d.if_(d.notNull(u),function(){o(e.arguments,function(t){d.recurse(t,e.constant?void 0:d.nextId(),void 0,function(e){l.push(e)})}),c=s.name?d.member(s.context,s.name,s.computed)+"("+l.join(",")+")":u+"("+l.join(",")+")",d.assign(t,c)},function(){d.assign(t,"undefined")}),r(t)}));break;case Io.AssignmentExpression:u=this.nextId(),s={},this.recurse(e.left,void 0,s,function(){d.if_(d.notNull(s.context),function(){d.recurse(e.right,u),c=d.member(s.context,s.name,s.computed)+e.operator+u,d.assign(t,c),r(t||c)})},1);break;case Io.ArrayExpression:l=[],o(e.elements,function(t){d.recurse(t,e.constant?void 0:d.nextId(),void 0,function(e){l.push(e)})}),c="["+l.join(",")+"]",this.assign(t,c),r(t||c);break;case Io.ObjectExpression:l=[],p=!1,o(e.properties,function(e){e.computed&&(p=!0)}),p?(t=t||this.nextId(),this.assign(t,"{}"),o(e.properties,function(e){e.computed?(s=d.nextId(),d.recurse(e.key,s)):s=e.key.type===Io.Identifier?e.key.name:""+e.key.value,u=d.nextId(),d.recurse(e.value,u),d.assign(d.member(t,s,e.computed),u)})):(o(e.properties,function(t){d.recurse(t.value,e.constant?void 0:d.nextId(),void 0,function(e){l.push(d.escape(t.key.type===Io.Identifier?t.key.name:""+t.key.value)+":"+e)})}),c="{"+l.join(",")+"}",this.assign(t,c)),r(t||c);break;case Io.ThisExpression:this.assign(t,"s"),r(t||"s");break;case Io.LocalsExpression:this.assign(t,"l"),r(t||"l");break;case Io.NGValueParameter:this.assign(t,"v"),r(t||"v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){if(e)return this.current().body.push(e,"=",t,";"),e},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(!0===e)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},isNull:function(e){return e+"==null"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var n=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/,r=/[^$_a-zA-Z0-9]/g;return n.test(t)?e+"."+t:e+'["'+t.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(C(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(k(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if(void 0===e)return"undefined";throw Oo("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},vn.prototype={compile:function(e){var t=this;pn(e,t.$filter);var n,r;(n=hn(e))&&(r=this.recurse(n));var i,a=dn(e.body);a&&(i=[],o(a,function(e,n){var r=t.recurse(e);e.input=r,i.push(r),e.watchId=n}));var s=[];o(e.body,function(e){s.push(t.recurse(e.expression))});var u=0===e.body.length?m:1===e.body.length?s[0]:function(e,t){var n;return o(s,function(r){n=r(e,t)}),n};return r&&(u.assign=function(e,t,n){return r(e,n,t)}),i&&(u.inputs=i),u},recurse:function(e,t,n){var r,i,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case Io.Literal:return this.value(e.value,t);case Io.UnaryExpression:return i=this.recurse(e.argument),this["unary"+e.operator](i,t);case Io.BinaryExpression:case Io.LogicalExpression:return r=this.recurse(e.left),i=this.recurse(e.right),this["binary"+e.operator](r,i,t);case Io.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case Io.Identifier:return s.identifier(e.name,t,n);case Io.MemberExpression:return r=this.recurse(e.object,!1,!!n),e.computed||(i=e.property.name),e.computed&&(i=this.recurse(e.property)),e.computed?this.computedMember(r,i,t,n):this.nonComputedMember(r,i,t,n);case Io.CallExpression:return a=[],o(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(i=this.$filter(e.callee.name)),e.filter||(i=this.recurse(e.callee,!0)),e.filter?function(e,n,r,o){for(var s=[],u=0;u<a.length;++u)s.push(a[u](e,n,r,o));var l=i.apply(void 0,s,o);return t?{context:void 0,name:void 0,value:l}:l}:function(e,n,r,o){var s,u=i(e,n,r,o);if(null!=u.value){for(var l=[],c=0;c<a.length;++c)l.push(a[c](e,n,r,o));s=u.value.apply(u.context,l)}return t?{value:s}:s};case Io.AssignmentExpression:return r=this.recurse(e.left,!0,1),i=this.recurse(e.right),function(e,n,o,a){var s=r(e,n,o,a),u=i(e,n,o,a);return s.context[s.name]=u,t?{value:u}:u};case Io.ArrayExpression:return a=[],o(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case Io.ObjectExpression:return a=[],o(e.properties,function(e){e.computed?a.push({key:s.recurse(e.key),computed:!0,value:s.recurse(e.value)}):a.push({key:e.key.type===Io.Identifier?e.key.name:""+e.key.value,computed:!1,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(e,n,r,i)]=a[s].value(e,n,r,i):o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case Io.ThisExpression:return function(e){return t?{value:e}:e};case Io.LocalsExpression:return function(e,n){return t?{value:n}:n};case Io.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=y(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=y(a)?-a:-0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),l=ln(s,u);return n?{value:l}:l}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),l=(y(s)?s:0)-(y(u)?u:0);return n?{value:l}:l}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var u=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,n){return function(r,i,o,a){var s=i&&e in i?i:r;n&&1!==n&&s&&null==s[e]&&(s[e]={});var u=s?s[e]:void 0;return t?{context:s,name:e,value:u}:u}},computedMember:function(e,t,n,r){return function(i,o,a,s){var u,l,c=e(i,o,a,s);return null!=c&&(u=t(i,o,a,s),u=sn(u),r&&1!==r&&c&&!c[u]&&(c[u]={}),l=c[u]),n?{context:c,name:u,value:l}:l}},nonComputedMember:function(e,t,n,r){return function(i,o,a,s){var u=e(i,o,a,s);r&&1!==r&&u&&null==u[t]&&(u[t]={});var l=null!=u?u[t]:void 0;return n?{context:u,name:t,value:l}:l}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}},bn.prototype={constructor:bn,parse:function(e){var t=this.ast.ast(e),n=this.astCompiler.compile(t);return n.literal=mn(t),n.constant=gn(t),n}};var No=t("$sce"),Uo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},jo=/_([a-z])/g,Vo=t("$compile"),zo=e.document.createElement("a"),Ro=Vn(e.location.href);qn.$inject=["$document"],Ln.$inject=["$provide"];var qo=22,Fo=".",Lo="0";Yn.$inject=["$locale"],Gn.$inject=["$locale"];var _o={yyyy:Xn("FullYear",4,0,!1,!0),yy:Xn("FullYear",2,0,!0,!0),y:Xn("FullYear",1,0,!1,!0),MMMM:er("Month"),MMM:er("Month",!0),MM:Xn("Month",2,1),M:Xn("Month",1,1),LLLL:er("Month",!1,!0),dd:Xn("Date",2),d:Xn("Date",1),HH:Xn("Hours",2),H:Xn("Hours",1),hh:Xn("Hours",2,-12),h:Xn("Hours",1,-12),mm:Xn("Minutes",2),m:Xn("Minutes",1),ss:Xn("Seconds",2),s:Xn("Seconds",1),sss:Xn("Milliseconds",3),EEEE:er("Day"),EEE:er("Day",!0),a:or,Z:tr,ww:ir(2),w:ir(1),G:ar,GG:ar,GGG:ar,GGGG:sr},Ho=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,Bo=/^-?\d+$/;ur.$inject=["$locale"];var Wo=$(Gr),Yo=$(Kr);dr.$inject=["$parse"];var Go=$({restrict:"E",compile:function(e,t){if(!t.href&&!t.xlinkHref)return function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===oi.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Ko={};o(Fi,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!==e){var r=wt("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),Ko[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(_i,function(e,t){Ko[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"===r.ngPattern.charAt(0)){var i=r.ngPattern.match(Hr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=wt("ng-"+e);Ko[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===oi.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){if(!t)return void("href"===e&&i.$set(a,null));i.$set(a,t),Qr&&o&&r.prop(o,i[a])})}}}});var Jo={$addControl:m,$$renameControl:hr,$removeControl:m,$setValidity:m,$setDirty:m,$setPristine:m,$setSubmitted:m},Zo="ng-pending";mr.$inject=["$element","$attrs","$scope","$animate","$interpolate"],mr.prototype={$rollbackViewValue:function(){o(this.$$controls,function(e){e.$rollbackViewValue()})},$commitViewValue:function(){o(this.$$controls,function(e){e.$commitViewValue()})},$addControl:function(e){he(e.$name,"input"),this.$$controls.push(e),e.$name&&(this[e.$name]=e),e.$$parentForm=this},$$renameControl:function(e,t){var n=e.$name;this[n]===e&&delete this[n],this[t]=e,e.$name=t},$removeControl:function(e){e.$name&&this[e.$name]===e&&delete this[e.$name],o(this.$pending,function(t,n){this.$setValidity(n,null,e)},this),o(this.$error,function(t,n){this.$setValidity(n,null,e)},this),o(this.$$success,function(t,n){this.$setValidity(n,null,e)},this),F(this.$$controls,e),e.$$parentForm=Jo},$setDirty:function(){this.$$animate.removeClass(this.$$element,Na),this.$$animate.addClass(this.$$element,Ua),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Na,Ua+" ng-submitted"),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,o(this.$$controls,function(e){e.$setPristine()})},$setUntouched:function(){o(this.$$controls,function(e){e.$setUntouched()})},$setSubmitted:function(){this.$$animate.addClass(this.$$element,"ng-submitted"),this.$submitted=!0,this.$$parentForm.$setSubmitted()}},$r({clazz:mr,set:function(e,t,n){var r=e[t];if(r){-1===r.indexOf(n)&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(F(r,n),0===r.length&&delete e[t])}});var Qo=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||m}return{name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:mr,compile:function(n,i){n.addClass(Na).addClass(Pa);var o=i.name?"name":!(!e||!i.ngForm)&&"ngForm";return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var u=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};n[0].addEventListener("submit",u),n.on("$destroy",function(){t(function(){n[0].removeEventListener("submit",u)},0,!1)})}(a[1]||s.$$parentForm).$addControl(s);var l=o?r(s.$name):m;o&&(l(e,s),i.$observe(o,function(t){s.$name!==t&&(l(e,void 0),s.$$parentForm.$$renameControl(s,t),(l=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),l(e,void 0),p(s,Jo)})}}}}}]},Xo=Qo(),ea=Qo(!0),ta=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,na=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,ra=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,ia=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,oa=/^(\d{4,})-(\d{2})-(\d{2})$/,aa=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,sa=/^(\d{4,})-W(\d\d)$/,ua=/^(\d{4,})-(\d\d)$/,la=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ca="keydown wheel mousedown",pa=$e();o("date,datetime-local,month,time,week".split(","),function(e){pa[e]=!0});var da={text:yr,date:kr("date",oa,Cr(oa,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":kr("datetimelocal",aa,Cr(aa,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:kr("time",la,Cr(la,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:kr("week",sa,xr,"yyyy-Www"),month:kr("month",ua,Cr(ua,["yyyy","MM"]),"yyyy-MM"),number:Mr,url:Ir,email:Nr,radio:Ur,range:Pr,checkbox:Vr,hidden:m,button:m,submit:m,reset:m,file:m},fa=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(da[Gr(a.type)]||da.text)(i,o,a,s[0],t,e,n,r)}}}}],ha=/^(true|false|\d+)$/,ma=function(){function e(e,t,n){var r=y(n)?n:9===Qr?"":null;e.prop("value",r),t.$set("value",n)}return{restrict:"A",priority:100,compile:function(t,n){return ha.test(n.ngValue)?function(t,n,r){e(n,r,t.$eval(r.ngValue))}:function(t,n,r){t.$watch(r.ngValue,function(t){e(n,r,t)})}}}},ga=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=ve(e)})}}}}],$a=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=b(e)?"":e})}}}}],va=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(t){return e.valueOf(t)});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){var n=o(t);r.html(e.getTrustedHtml(n)||"")})}}}}],ba=$({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),ya=zr("",!0),wa=zr("Odd",0),xa=zr("Even",1),Ca=fr({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),ka=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Sa={},Da={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=wt("ng-"+e);Sa[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t]);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};Da[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var Ea=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,l;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(l&&(l.remove(),l=null),u&&(u.$destroy(),u=null),s&&(l=ge(s.clone),e.leave(l).done(function(e){!1!==e&&(l=null)}),s=null))})}}}],Oa=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:ui.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,l,c){var p,d,f,h=0,m=function(){d&&(d.remove(),d=null),p&&(p.$destroy(),p=null),f&&(n.leave(f).done(function(e){!1!==e&&(d=null)}),d=f,f=null)};r.$watch(o,function(o){var u=function(e){!1===e||!y(s)||s&&!r.$eval(s)||t()},d=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&d===h){var t=r.$new();l.template=e;var s=c(t,function(e){m(),n.enter(e,null,i).done(u)});p=t,f=s,p.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||d===h&&(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),l.template=null)})}}}}],Ta=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){if(oi.call(r[0]).match(/SVG/))return r.empty(),void t(Ae(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r});r.html(o.template),t(r.contents())(n)}}}],Aa=fr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),Ma=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,r){var i=n.ngList||", ",a="false"!==n.ngTrim,s=a?fi(i):i,u=function(e){if(!b(e)){var t=[];return e&&o(e.split(s),function(e){e&&t.push(a?fi(e):e)}),t}};r.$parsers.push(u),r.$formatters.push(function(e){if(pi(e))return e.join(i)}),r.$isEmpty=function(e){return!e||!e.length}}}},Pa="ng-valid",Ia="ng-invalid",Na="ng-pristine",Ua="ng-dirty",ja=t("ngModel");Rr.$inject=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$q","$interpolate"],Rr.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var e=this.$$parse(this.$$attr.ngModel+"()"),t=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(t){var n=this.$$parsedNgModel(t);return D(n)&&(n=e(t)),n},this.$$ngModelSet=function(e,n){D(this.$$parsedNgModel(e))?t(e,{$$$p:n}):this.$$parsedNgModelAssign(e,n)}}else if(!this.$$parsedNgModel.assign)throw ja("nonassign","Expression '{0}' is non-assignable. Element: {1}",this.$$attr.ngModel,ee(this.$$element))},$render:m,$isEmpty:function(e){return b(e)||""===e||null===e||e!==e},$$updateEmptyClasses:function(e){this.$isEmpty(e)?(this.$$animate.removeClass(this.$$element,"ng-not-empty"),this.$$animate.addClass(this.$$element,"ng-empty")):(this.$$animate.removeClass(this.$$element,"ng-empty"),this.$$animate.addClass(this.$$element,"ng-not-empty"))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,Ua),this.$$animate.addClass(this.$$element,Na)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,Na),this.$$animate.addClass(this.$$element,Ua),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,"ng-untouched","ng-touched")},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,"ng-touched","ng-untouched")},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!ci(this.$modelValue)){var e=this.$$lastCommittedViewValue,t=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(t,e,function(e){i||n===e||(o.$modelValue=e?t:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(e,t,n){function r(e,t){a===s.$$currentValidationRunId&&s.$setValidity(e,t)}function i(e){a===s.$$currentValidationRunId&&n(e)}this.$$currentValidationRunId++;var a=this.$$currentValidationRunId,s=this;return function(){var e=s.$$parserName||"parse";return b(s.$$parserValid)?(r(e,null),!0):(s.$$parserValid||(o(s.$validators,function(e,t){r(t,null)}),o(s.$asyncValidators,function(e,t){r(t,null)})),r(e,s.$$parserValid),s.$$parserValid)}()&&function(){var n=!0;return o(s.$validators,function(i,o){var a=Boolean(i(e,t));n=n&&a,r(o,a)}),!!n||(o(s.$asyncValidators,function(e,t){r(t,null)}),!1)}()?void function(){var n=[],a=!0;o(s.$asyncValidators,function(i,o){var s=i(e,t);if(!N(s))throw ja("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",s);r(o,void 0),n.push(s.then(function(){r(o,!0)},function(){a=!1,r(o,!1)}))}),n.length?s.$$q.all(n).then(function(){i(a)},m):i(!0)}():void i(!1)},$commitViewValue:function(){var e=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==e||""===e&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(e),this.$$lastCommittedViewValue=e,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){function e(){r.$modelValue!==o&&r.$$writeModelToScope()}var t=this.$$lastCommittedViewValue,n=t,r=this;if(this.$$parserValid=!b(n)||void 0,this.$$parserValid)for(var i=0;i<this.$parsers.length;i++)if(n=this.$parsers[i](n),b(n)){this.$$parserValid=!1;break}ci(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var o=this.$modelValue,a=this.$options.getOption("allowInvalid");this.$$rawModelValue=n,a&&(this.$modelValue=n,e()),this.$$runValidators(n,this.$$lastCommittedViewValue,function(t){a||(r.$modelValue=t?n:void 0,e())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),o(this.$viewChangeListeners,function(e){try{e()}catch(e){this.$$exceptionHandler(e)}},this)},$setViewValue:function(e,t){this.$viewValue=e,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(t)},$$debounceViewValueCommit:function(e){var t=this.$options.getOption("debounce");k(t[e])?t=t[e]:k(t.default)&&(t=t.default),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;t>0?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},t):this.$$scope.$root.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(e){this.$options=this.$options.createChild(e)}},$r({clazz:Rr,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]}});var Va,za=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Rr,priority:1,compile:function(t){return t.addClass(Na).addClass("ng-untouched").addClass(Pa),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm,a=r[2];a&&(i.$options=a.$options),i.$$initGetterSetters(),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){function o(){a.$setTouched()}var a=i[0];a.$options.getOption("updateOn")&&n.on(a.$options.getOption("updateOn"),function(e){a.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){a.$touched||(e.$$phase?t.$evalAsync(o):t.$apply(o))})}}}}}],Ra=/(\s+|^)default(\s+|$)/;Fr.prototype={getOption:function(e){return this.$$options[e]},createChild:function(e){var t=!1;return e=p({},e),o(e,function(n,r){"$inherit"===n?"*"===r?t=!0:(e[r]=this.$$options[r],"updateOn"===r&&(e.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===r&&(e.updateOnDefault=!1,e[r]=fi(n.replace(Ra,function(){return e.updateOnDefault=!0," "})))},this),t&&(delete e["*"],Lr(e,this.$$options)),Lr(e,Va.$$options),new Fr(e)}},Va=new Fr({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var qa=function(){function e(e,t){this.$$attrs=e,this.$$scope=t}return e.$inject=["$attrs","$scope"],e.prototype={$onInit:function(){var e=this.parentCtrl?this.parentCtrl.$options:Va,t=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=e.createChild(t)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:e}},Fa=fr({terminal:!0,priority:1e3
}),La=t("ngOptions"),_a=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Ha=["$compile","$document","$parse",function(t,n,r){function a(e,t,n){function o(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!l&&i(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(_a);if(!s)throw La("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,ee(t));var u=s[5]||s[7],l=s[6],c=/ as /.test(s[0])&&s[1],p=s[9],d=r(s[2]?s[1]:u),f=c&&r(c),h=f||d,m=p&&r(p),g=p?function(e,t){return m(n,t)}:function(e){return nt(e)},$=function(e,t){return g(e,C(e,t))},v=r(s[2]||s[1]),b=r(s[3]||""),y=r(s[4]||""),w=r(s[8]),x={},C=l?function(e,t){return x[l]=t,x[u]=e,x}:function(e){return x[u]=e,x};return{trackBy:p,getTrackByValue:$,getWatchables:r(w,function(e){var t=[];e=e||[];for(var r=a(e),i=r.length,o=0;o<i;o++){var u=e===r?o:r[o],l=e[u],c=C(l,u),p=g(l,c);if(t.push(p),s[2]||s[1]){var d=v(n,c);t.push(d)}if(s[4]){var f=y(n,c);t.push(f)}}return t}),getOptions:function(){for(var e=[],t={},r=w(n)||[],i=a(r),s=i.length,u=0;u<s;u++){var l=r===i?u:i[u],c=r[l],d=C(c,l),f=h(n,d),m=g(f,d),x=v(n,d),k=b(n,d),S=y(n,d),D=new o(m,f,x,k,S);e.push(D),t[m]=D}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[$(e)]},getViewValueFromOption:function(e){return p?L(e.viewValue):e.viewValue}}}}}function s(e,r,i,s){function c(e,t){var n=u.cloneNode(!1);t.appendChild(n),d(e,n)}function p(e){var t=x.getOptionFromViewValue(e),n=t&&t.element;return n&&!n.selected&&(n.selected=!0),t}function d(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),t.value=e.selectValue}function f(){var e=x&&h.readValue();if(x)for(var t=x.items.length-1;t>=0;t--){var n=x.items[t];Ye(y(n.group)?n.element.parentNode:n.element)}x=C.getOptions();var i={};if(w&&r.prepend(h.emptyOption),x.items.forEach(function(e){var t;y(e.group)?(t=i[e.group],t||(t=l.cloneNode(!1),k.appendChild(t),t.label=null===e.group?"null":e.group,i[e.group]=t),c(e,t)):c(e,k)}),r[0].appendChild(k),m.$render(),!m.$isEmpty(e)){var o=h.readValue();(C.trackBy||g?H(e,o):e===o)||(m.$setViewValue(o),m.$render())}}for(var h=s[0],m=s[1],g=i.multiple,$=0,v=r.children(),b=v.length;$<b;$++)if(""===v[$].value){h.hasEmptyOption=!0,h.emptyOption=v.eq($);break}var w=!!h.emptyOption;Xr(u.cloneNode(!1)).val("?");var x,C=a(i.ngOptions,r,e),k=n[0].createDocumentFragment();h.generateUnknownOptionValue=function(e){return"?"},g?(h.writeValue=function(e){var t=e&&e.map(p)||[];x.items.forEach(function(e){e.element.selected&&!q(t,e)&&(e.element.selected=!1)})},h.readValue=function(){var e=r.val()||[],t=[];return o(e,function(e){var n=x.selectValueMap[e];n&&!n.disabled&&t.push(x.getViewValueFromOption(n))}),t},C.trackBy&&e.$watchCollection(function(){if(pi(m.$viewValue))return m.$viewValue.map(function(e){return C.getTrackByValue(e)})},function(){m.$render()})):(h.writeValue=function(e){var t=x.selectValueMap[r.val()],n=x.getOptionFromViewValue(e);t&&t.element.removeAttribute("selected"),n?(r[0].value!==n.selectValue&&(h.removeUnknownOption(),h.unselectEmptyOption(),r[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):w?h.selectEmptyOption():h.unknownOption.parent().length?h.updateUnknownOption(e):h.renderUnknownOption(e)},h.readValue=function(){var e=x.selectValueMap[r.val()];return e&&!e.disabled?(h.unselectEmptyOption(),h.removeUnknownOption(),x.getViewValueFromOption(e)):null},C.trackBy&&e.$watch(function(){return C.getTrackByValue(m.$viewValue)},function(){m.$render()})),w&&(h.emptyOption.remove(),t(h.emptyOption)(e),h.emptyOption[0].nodeType===ki?(h.hasEmptyOption=!1,h.registerOption=function(e,t){""===t.val()&&(h.hasEmptyOption=!0,h.emptyOption=t,h.emptyOption.removeClass("ng-scope"),m.$render(),t.on("$destroy",function(){h.hasEmptyOption=!1,h.emptyOption=void 0}))}):h.emptyOption.removeClass("ng-scope")),r.empty(),f(),e.$watchCollection(C.getWatchables,f)}var u=e.document.createElement("option"),l=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=m},post:s}}}],Ba=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function l(e){s.text(e||"")}var c,p=u.count,d=u.$attr.when&&s.attr(u.$attr.when),f=u.offset||0,h=a.$eval(d)||{},g={},$=t.startSymbol(),v=t.endSymbol(),y=$+p+"-"+f+v,w=ui.noop;o(u,function(e,t){var n=i.exec(t);if(n){var r=(n[1]?"-":"")+Gr(n[2]);h[r]=s.attr(u.$attr[t])}}),o(h,function(e,n){g[n]=t(e.replace(r,y))}),a.$watch(p,function(t){var r=parseFloat(t),i=ci(r);if(i||r in h||(r=e.pluralCat(r-f)),!(r===c||i&&ci(c))){w();var o=g[r];b(o)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+d),w=m,l()):w=a.$watch(o,l),c=r}})}}}],Wa=["$parse","$animate","$compile",function(e,n,r){var a=t("ngRepeat"),s=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0==(1&t))},u=function(e){return e.clone[0]},l=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,c){var p=c.ngRepeat,d=r.$$createComment("end ngRepeat",p),f=p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!f)throw a("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",p);var h=f[1],m=f[2],g=f[3],$=f[4];if(!(f=h.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/)))throw a("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",h);var v=f[3]||f[1],b=f[2];if(g&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(g)))throw a("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",g);var y,w,x,C,k={$id:nt};return $?y=e($):(x=function(e,t){return nt(t)},C=function(e){return e}),function(e,t,r,c,f){y&&(w=function(t,n,r){return b&&(k[b]=t),k[v]=n,k.$index=r,y(e,k)});var h=$e();e.$watchCollection(m,function(r){var c,m,$,y,k,S,D,E,O,T,A,M,P=t[0],I=$e();if(g&&(e[g]=r),i(r))O=r,E=w||x;else{E=w||C,O=[];for(var N in r)Wr.call(r,N)&&"$"!==N.charAt(0)&&O.push(N)}for(y=O.length,A=new Array(y),c=0;c<y;c++)if(k=r===O?c:O[c],S=r[k],D=E(k,S,c),h[D])T=h[D],delete h[D],I[D]=T,A[c]=T;else{if(I[D])throw o(A,function(e){e&&e.scope&&(h[e.id]=e)}),a("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",p,D,S);A[c]={id:D,scope:void 0,clone:void 0},I[D]=!0}for(var U in h){if(T=h[U],M=ge(T.clone),n.leave(M),M[0].parentNode)for(c=0,m=M.length;c<m;c++)M[c].$$NG_REMOVED=!0;T.scope.$destroy()}for(c=0;c<y;c++)if(k=r===O?c:O[c],S=r[k],T=A[c],T.scope){$=P;do{$=$.nextSibling}while($&&$.$$NG_REMOVED);u(T)!==$&&n.move(ge(T.clone),null,P),P=l(T),s(T.scope,c,v,S,b,k,y)}else f(function(e,t){T.scope=t;var r=d.cloneNode(!1);e[e.length++]=r,n.enter(e,null,P),P=r,T.clone=e,I[T.id]=T,s(T.scope,c,v,S,b,k,y)});h=I})}}}}],Ya=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ga=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ka=fr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Ja=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],l=[],c=[],p=[],d=function(e,t){return function(n){!1!==n&&e.splice(t,1)}};n.$watch(s,function(n){for(var r,i;c.length;)e.cancel(c.pop());for(r=0,i=p.length;r<i;++r){var s=ge(l[r].clone);p[r].$destroy();(c[r]=e.leave(s)).done(d(c,r))}l.length=0,p.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){p.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen");var a={clone:r};l.push(a),e.enter(r,o.parent(),o)})})})}}}],Za=fr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){o(n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(e,t,n){return n[t-1]!==e}),function(e){r.cases["!"+e]=r.cases["!"+e]||[],r.cases["!"+e].push({transclude:i,element:t})})}}),Qa=fr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Xa=t("ngTransclude"),es=["$compile",function(e){return{restrict:"EAC",terminal:!0,compile:function(t){var n=e(t.contents());return t.empty(),function(e,t,r,i,o){function a(e,n){e.length&&u(e)?t.append(e):(s(),n.$destroy())}function s(){n(e,function(e){t.append(e)})}function u(e){for(var t=0,n=e.length;t<n;t++){var r=e[t];if(r.nodeType!==Ci||r.nodeValue.trim())return!0}}if(!o)throw Xa("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",ee(t));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude="");var l=r.ngTransclude||r.ngTranscludeSlot;o(a,null,l),l&&!o.isSlotFilled(l)&&s()}}}}],ts=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"===n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],ns={$setViewValue:m,$render:m},rs=["$element","$scope",function(t,n){function r(){s||(s=!0,n.$$postDigest(function(){s=!1,o.ngModelCtrl.$render()}))}function i(e){u||(u=!0,n.$$postDigest(function(){n.$$destroyed||(u=!1,o.ngModelCtrl.$setViewValue(o.readValue()),e&&o.ngModelCtrl.$render())}))}var o=this,a=new Bi;o.selectValueMap={},o.ngModelCtrl=ns,o.multiple=!1,o.unknownOption=Xr(e.document.createElement("option")),o.hasEmptyOption=!1,o.emptyOption=void 0,o.renderUnknownOption=function(e){var n=o.generateUnknownOptionValue(e);o.unknownOption.val(n),t.prepend(o.unknownOption),_r(o.unknownOption,!0),t.val(n)},o.updateUnknownOption=function(e){var n=o.generateUnknownOptionValue(e);o.unknownOption.val(n),_r(o.unknownOption,!0),t.val(n)},o.generateUnknownOptionValue=function(e){return"? "+nt(e)+" ?"},o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.selectEmptyOption=function(){o.emptyOption&&(t.val(""),_r(o.emptyOption,!0))},o.unselectEmptyOption=function(){o.hasEmptyOption&&o.emptyOption.removeAttr("selected")},n.$on("$destroy",function(){o.renderUnknownOption=m}),o.readValue=function(){var e=t.val(),n=e in o.selectValueMap?o.selectValueMap[e]:e;return o.hasOption(n)?n:null},o.writeValue=function(e){var n=t[0].options[t[0].selectedIndex];if(n&&_r(Xr(n),!1),o.hasOption(e)){o.removeUnknownOption();var r=nt(e);t.val(r in o.selectValueMap?r:e);var i=t[0].options[t[0].selectedIndex];_r(Xr(i),!0)}else null==e&&o.emptyOption?(o.removeUnknownOption(),o.selectEmptyOption()):o.unknownOption.parent().length?o.updateUnknownOption(e):o.renderUnknownOption(e)},o.addOption=function(e,t){if(t[0].nodeType!==ki){he(e,'"option value"'),""===e&&(o.hasEmptyOption=!0,o.emptyOption=t);var n=a.get(e)||0;a.set(e,n+1),r()}},o.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.delete(e),""===e&&(o.hasEmptyOption=!1,o.emptyOption=void 0)):a.set(e,t-1))},o.hasOption=function(e){return!!a.get(e)};var s=!1,u=!1;o.registerOption=function(e,t,n,a,s){if(n.$attr.ngValue){var u,l=NaN;n.$observe("value",function(e){var n,r=t.prop("selected");y(l)&&(o.removeOption(u),delete o.selectValueMap[l],n=!0),l=nt(e),u=e,o.selectValueMap[l]=e,o.addOption(e,t),t.attr("value",l),n&&r&&i()})}else a?n.$observe("value",function(e){o.readValue();var n,r=t.prop("selected");y(u)&&(o.removeOption(u),n=!0),u=e,o.addOption(e,t),n&&r&&i()}):s?e.$watch(s,function(e,r){n.$set("value",e);var a=t.prop("selected");r!==e&&o.removeOption(r),o.addOption(e,t),r&&a&&i()}):o.addOption(n.value,t);n.$observe("disabled",function(e){("true"===e||e&&t.prop("selected"))&&(o.multiple?i(!0):(o.ngModelCtrl.$setViewValue(null),o.ngModelCtrl.$render()))}),t.on("$destroy",function(){var e=o.readValue(),t=n.value;o.removeOption(t),r(),(o.multiple&&e&&-1!==e.indexOf(t)||e===t)&&i(!0)})}}],is=function(){function e(e,t,n,r){var i=r[0],a=r[1];if(!a)return void(i.registerOption=m);if(i.ngModelCtrl=a,t.on("change",function(){i.removeUnknownOption(),e.$apply(function(){a.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var e=[];return o(t.find("option"),function(t){if(t.selected&&!t.disabled){var n=t.value;e.push(n in i.selectValueMap?i.selectValueMap[n]:n)}}),e},i.writeValue=function(e){o(t.find("option"),function(t){var n=!!e&&(q(e,t.value)||q(e,i.selectValueMap[t.value]));n!==t.selected&&_r(Xr(t),n)})};var s,u=NaN;e.$watch(function(){u!==a.$viewValue||H(s,a.$viewValue)||(s=ye(a.$viewValue),a.$render()),u=a.$viewValue}),a.$isEmpty=function(e){return!e||0===e.length}}}function t(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:rs,priority:1,link:{pre:e,post:t}}},os=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){var r,i;return y(n.ngValue)||(y(n.value)?r=e(n.value,!0):(i=e(t.text(),!0))||n.$set("value",t.text())),function(e,t,n){var o=t.parent(),a=o.data("$selectController")||o.parent().data("$selectController");a&&a.registerOption(e,t,n,r,i)}}}}],as=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},ss=function(){return{restrict:"A",require:"?ngModel",link:function(e,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(e){if(C(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,e,ee(n));o=e||void 0,i.$validate()}),i.$validators.pattern=function(e,t){return i.$isEmpty(t)||b(o)||o.test(t)}}}}},us=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=f(e);i=ci(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return i<0||r.$isEmpty(t)||t.length<=i}}}}},ls=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=f(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};if(e.angular.bootstrap)return void(e.console&&console.log("WARNING: Tried to load angular more than once."));!function(){var t;if(!wi){var n=gi();ei=b(n)?e.jQuery:n?e[n]:void 0,ei&&ei.fn.on?(Xr=ei,p(ei.fn,{scope:qi.scope,isolateScope:qi.isolateScope,controller:qi.controller,injector:qi.injector,inheritedData:qi.inheritedData}),t=ei.cleanData,ei.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)(n=ei._data(r,"events"))&&n.$destroy&&ei(r).triggerHandler("$destroy");t(e)}):Xr=Ie,ui.element=Xr,wi=!0}}(),function(r){p(r,{errorHandlingConfig:n,bootstrap:ue,copy:L,extend:p,merge:d,equals:H,element:Xr,forEach:o,injector:ut,noop:m,bind:Y,toJson:K,fromJson:J,identity:g,isUndefined:b,isDefined:y,isString:C,isFunction:D,isObject:w,isNumber:k,isElement:V,isArray:pi,version:Ei,isDate:S,lowercase:Gr,uppercase:Kr,callbacks:{$$counter:0},getTestability:ce,reloadWithDebugInfo:le,$$minErr:t,$$csp:mi,$$encodeUriSegment:ie,$$encodeUriQuery:oe,$$stringify:ve}),ti=be(e),ti("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:En}),e.provider("$compile",bt).directive({a:Go,input:fa,textarea:fa,form:Xo,script:ts,select:is,option:os,ngBind:ga,ngBindHtml:va,ngBindTemplate:$a,ngClass:ya,ngClassEven:xa,ngClassOdd:wa,ngCloak:Ca,ngController:ka,ngForm:ea,ngHide:Ga,ngIf:Ea,ngInclude:Oa,ngInit:Aa,ngNonBindable:Fa,ngPluralize:Ba,ngRepeat:Wa,ngShow:Ya,ngStyle:Ka,ngSwitch:Ja,ngSwitchWhen:Za,ngSwitchDefault:Qa,ngOptions:Ha,ngTransclude:es,ngModel:za,ngList:Ma,ngChange:ba,pattern:ss,ngPattern:ss,required:as,ngRequired:as,minlength:ls,ngMinlength:ls,maxlength:us,ngMaxlength:us,ngValue:ma,ngModelOptions:qa}).directive({ngInclude:Ta}).directive(Ko).directive(Sa),e.provider({$anchorScroll:lt,$animate:ro,$animateCss:ao,$$animateJs:to,$$animateQueue:no,$$AnimateRunner:oo,$$animateAsyncRun:io,$browser:mt,$cacheFactory:gt,$controller:St,$document:Dt,$$isDocumentHidden:Et,$exceptionHandler:Ot,$filter:Ln,$$forceReflow:ho,$interpolate:Lt,$interval:_t,$http:zt,$httpParamSerializer:At,$httpParamSerializerJQLike:Mt,$httpBackend:qt,$xhrFactory:Rt,$jsonpCallbacks:xo,$location:on,$log:an,$parse:wn,$rootScope:Dn,$q:xn,$$q:Cn,$sce:Pn,$sceDelegate:Mn,$sniffer:In,$templateCache:$t,$templateRequest:Nn,$$testability:Un,$timeout:jn,$window:Rn,$$rAF:Sn,$$jqLite:tt,$$Map:Wi,$$cookieReader:Fn})}]).info({angularVersion:"1.6.4"})}(ui),ui.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}function n(e,n){var r=n;void 0===r&&(r=Math.min(t(e),3));var i=Math.pow(10,r);return{v:r,f:(e*i|0)%i}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,t){var i=0|e,o=n(e,t);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),Xr(function(){se(e.document,ue)})}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(e,t,n){"use strict";function r(e,t){return B(new(B(function(){},{prototype:e})),t)}function i(e){return H(arguments,function(t){t!==e&&H(t,function(t,n){e.hasOwnProperty(n)||(e[n]=t)})}),e}function o(e,t){var n=[];for(var r in e.path){if(e.path[r]!==t.path[r])break;n.push(e.path[r])}return n}function a(e){if(Object.keys)return Object.keys(e);var t=[];return H(e,function(e,n){t.push(n)}),t}function s(e,t){if(Array.prototype.indexOf)return e.indexOf(t,Number(arguments[2])||0);var n=e.length>>>0,r=Number(arguments[2])||0;for(r=r<0?Math.ceil(r):Math.floor(r),r<0&&(r+=n);r<n;r++)if(r in e&&e[r]===t)return r;return-1}function u(e,t,n,r){var i,u=o(n,r),l={},c=[];for(var p in u)if(u[p]&&u[p].params&&(i=a(u[p].params),i.length))for(var d in i)s(c,i[d])>=0||(c.push(i[d]),l[i[d]]=e[i[d]]);return B({},l,t)}function l(e,t,n){if(!n){n=[];for(var r in e)n.push(r)}for(var i=0;i<n.length;i++){var o=n[i];if(e[o]!=t[o])return!1}return!0}function c(e,t){var n={};return H(e,function(e){n[e]=t[e]}),n}function p(e){var t={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));return H(n,function(n){n in e&&(t[n]=e[n])}),t}function d(e){var t={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var r in e)-1==s(n,r)&&(t[r]=e[r]);return t}function f(e,t){var n=_(e),r=n?[]:{};return H(e,function(e,i){t(e,i)&&(r[n?r.length:i]=e)}),r}function h(e,t){var n=_(e)?[]:{};return H(e,function(e,r){n[r]=t(e,r)}),n}function m(e){return e.then(n,function(){})&&e}function g(e,t){var r=1,o=2,u={},l=[],c=u,p=B(e.when(u),{$$promises:u,$$values:u});this.study=function(u){function f(e,n){if(b[n]!==o){if(v.push(n),b[n]===r)throw v.splice(0,s(v,n)),new Error("Cyclic dependency: "+v.join(" -> "));if(b[n]=r,F(e))$.push(n,[function(){return t.get(e)}],l);else{var i=t.annotate(e);H(i,function(e){e!==n&&u.hasOwnProperty(e)&&f(u[e],e)}),$.push(n,e,i)}v.pop(),b[n]=o}}function h(e){return L(e)&&e.then&&e.$$promises}if(!L(u))throw new Error("'invocables' must be an object");var g=a(u||{}),$=[],v=[],b={};return H(u,f),u=v=b=null,function(r,o,a){function s(){--y||(w||i(b,o.$$values),f.$$values=b,f.$$promises=f.$$promises||!0,delete f.$$inheritedValues,l.resolve(b))}function u(e){f.$$failure=e,l.reject(e)}if(h(r)&&a===n&&(a=o,o=r,r=null),r){if(!L(r))throw new Error("'locals' must be an object")}else r=c;if(o){if(!h(o))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else o=p;var l=e.defer(),f=m(l.promise),v=f.$$promises={},b=B({},r),y=1+$.length/3,w=!1;if(m(f),R(o.$$failure))return u(o.$$failure),f;o.$$inheritedValues&&i(b,d(o.$$inheritedValues,g)),B(v,o.$$promises),o.$$values?(w=i(b,d(o.$$values,g)),f.$$inheritedValues=d(o.$$values,g),s()):(o.$$inheritedValues&&(f.$$inheritedValues=d(o.$$inheritedValues,g)),o.then(s,u));for(var x=0,C=$.length;x<C;x+=3)r.hasOwnProperty($[x])?s():function(n,i,o){function l(e){p.reject(e),u(e)}function c(){if(!R(f.$$failure))try{p.resolve(t.invoke(i,a,b)),p.promise.then(function(e){b[n]=e,s()},l)}catch(e){l(e)}}var p=e.defer(),d=0;H(o,function(e){v.hasOwnProperty(e)&&!r.hasOwnProperty(e)&&(d++,v[e].then(function(t){b[e]=t,--d||c()},l))}),d||c(),v[n]=m(p.promise)}($[x],$[x+1],$[x+2]);return f}},this.resolve=function(e,t,n,r){return this.study(e)(t,n,r)}}function $(){var e=t.version.minor<3;this.shouldUnsafelyUseHttp=function(t){e=!!t},this.$get=["$http","$templateCache","$injector",function(t,n,r){return new v(t,n,r,e)}]}function v(e,t,n,r){this.fromConfig=function(e,t,n){return R(e.template)?this.fromString(e.template,t):R(e.templateUrl)?this.fromUrl(e.templateUrl,t):R(e.templateProvider)?this.fromProvider(e.templateProvider,t,n):null},this.fromString=function(e,t){return q(e)?e(t):e},this.fromUrl=function(i,o){return q(i)&&(i=i(o)),null==i?null:r?e.get(i,{cache:t,headers:{Accept:"text/html"}}).then(function(e){return e.data}):n.get("$templateRequest")(i)},this.fromProvider=function(e,t,r){return n.invoke(e,null,r||{params:t})}}function b(e,t,i){function o(t,n,r,i){if(g.push(t),h[t])return h[t];if(!/^\w+([-.]+\w+)*(?:\[\])?$/.test(t))throw new Error("Invalid parameter name '"+t+"' in pattern '"+e+"'");if(m[t])throw new Error("Duplicate parameter name '"+t+"' in pattern '"+e+"'");return m[t]=new G.Param(t,n,r,i),m[t]}function a(e,t,n,r){var i=["",""],o=e.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!t)return o;switch(n){case!1:i=["(",")"+(r?"?":"")];break;case!0:o=o.replace(/\/$/,""),i=["(?:/(",")|/)?"];break;default:i=["("+n+"|",")?"]}return o+i[0]+t+i[1]}function s(i,o){var a,s,u,l,c;return a=i[2]||i[3],c=t.params[a],u=e.substring(d,i.index),s=o?i[4]:i[4]||("*"==i[1]?".*":null),s&&(l=G.type(s)||r(G.type("string"),{pattern:new RegExp(s,t.caseInsensitive?"i":n)})),{id:a,regexp:s,segment:u,type:l,cfg:c}}t=B({params:{}},L(t)?t:{});var u,l=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,c=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,p="^",d=0,f=this.segments=[],h=i?i.params:{},m=this.params=i?i.params.$$new():new G.ParamSet,g=[];this.source=e;for(var $,v,b;(u=l.exec(e))&&($=s(u,!1),!($.segment.indexOf("?")>=0));)v=o($.id,$.type,$.cfg,"path"),p+=a($.segment,v.type.pattern.source,v.squash,v.isOptional),f.push($.segment),d=l.lastIndex;b=e.substring(d);var y=b.indexOf("?");if(y>=0){var w=this.sourceSearch=b.substring(y);if(b=b.substring(0,y),this.sourcePath=e.substring(0,d+y),w.length>0)for(d=0;u=c.exec(w);)$=s(u,!0),v=o($.id,$.type,$.cfg,"search"),d=l.lastIndex}else this.sourcePath=e,this.sourceSearch="";p+=a(b)+(!1===t.strict?"/?":"")+"$",f.push(b),this.regexp=new RegExp(p,t.caseInsensitive?"i":n),this.prefix=f[0],this.$$paramNames=g}function y(e){B(this,e)}function w(){function e(e){return null!=e?e.toString().replace(/(~|\/)/g,function(e){return{"~":"~~","/":"~2F"}[e]}):e}function i(e){return null!=e?e.toString().replace(/(~~|~2F)/g,function(e){return{"~~":"~","~2F":"/"}[e]}):e}function o(){return{strict:m,caseInsensitive:d}}function u(e){return q(e)||_(e)&&q(e[e.length-1])}function l(){for(;x.length;){var e=x.shift();if(e.pattern)throw new Error("You cannot override a type's .pattern at runtime.");t.extend($[e.name],p.invoke(e.def))}}function c(e){B(this,e||{})}G=this;var p,d=!1,m=!0,g=!1,$={},v=!0,x=[],C={string:{encode:e,decode:i,is:function(e){return null==e||!R(e)||"string"==typeof e},pattern:/[^\/]*/},int:{encode:e,decode:function(e){return parseInt(e,10)},is:function(e){return e!==n&&null!==e&&this.decode(e.toString())===e},pattern:/\d+/},bool:{encode:function(e){return e?1:0},decode:function(e){return 0!==parseInt(e,10)},is:function(e){return!0===e||!1===e},pattern:/0|1/},date:{encode:function(e){return this.is(e)?[e.getFullYear(),("0"+(e.getMonth()+1)).slice(-2),("0"+e.getDate()).slice(-2)].join("-"):n},decode:function(e){if(this.is(e))return e;var t=this.capture.exec(e);return t?new Date(t[1],t[2]-1,t[3]):n},is:function(e){return e instanceof Date&&!isNaN(e.valueOf())},equals:function(e,t){return this.is(e)&&this.is(t)&&e.toISOString()===t.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:t.toJson,decode:t.fromJson,is:t.isObject,equals:t.equals,pattern:/[^\/]*/},any:{encode:t.identity,decode:t.identity,equals:t.equals,pattern:/.*/}};w.$$getDefaultValue=function(e){if(!u(e.value))return e.value;if(!p)throw new Error("Injectable functions cannot be called at configuration time");return p.invoke(e.value)},this.caseInsensitive=function(e){return R(e)&&(d=e),d},this.strictMode=function(e){return R(e)&&(m=e),m},this.defaultSquashPolicy=function(e){if(!R(e))return g;if(!0!==e&&!1!==e&&!F(e))throw new Error("Invalid squash policy: "+e+". Valid policies: false, true, arbitrary-string");return g=e,e},this.compile=function(e,t){return new b(e,B(o(),t))},this.isMatcher=function(e){if(!L(e))return!1;var t=!0;return H(b.prototype,function(n,r){q(n)&&(t=t&&R(e[r])&&q(e[r]))}),t},this.type=function(e,t,n){if(!R(t))return $[e];if($.hasOwnProperty(e))throw new Error("A type named '"+e+"' has already been defined.");return $[e]=new y(B({name:e},t)),n&&(x.push({name:e,def:n}),v||l()),this},H(C,function(e,t){$[t]=new y(B({name:t},e))}),$=r($,{}),this.$get=["$injector",function(e){return p=e,v=!1,l(),H(C,function(e,t){$[t]||($[t]=new y(e))}),this}],this.Param=function(e,r,i,o){function l(){if(!p)throw new Error("Injectable functions cannot be called at configuration time");var e=p.invoke(i.$$fn);if(null!==e&&e!==n&&!m.type.is(e))throw new Error("Default value ("+e+") for parameter '"+m.id+"' is not an instance of Type ("+m.type.name+")");return e}function c(e){function t(e){return function(t){return t.from===e}}return e=function(e){var n=h(f(m.replace,t(e)),function(e){return e.to});return n.length?n[0]:e}(e),R(e)?m.type.$normalize(e):l()}function d(){return"{Param:"+e+" "+r+" squash: '"+w+"' optional: "+b+"}"}var m=this;i=function(e){var t=L(e)?a(e):[];return-1===s(t,"value")&&-1===s(t,"type")&&-1===s(t,"squash")&&-1===s(t,"array")&&(e={value:e}),e.$$fn=u(e.value)?e.value:function(){return e.value},e}(i),r=function(n,r,i){if(n.type&&r)throw new Error("Param '"+e+"' has two type configurations.");return r||(n.type?t.isString(n.type)?$[n.type]:n.type instanceof y?n.type:new y(n.type):"config"===i?$.any:$.string)}(i,r,o);var v=function(){var t={array:"search"===o&&"auto"},n=e.match(/\[\]$/)?{array:!0}:{};return B(t,n,i).array}();r=v?r.$asArray(v,"search"===o):r,"string"!==r.name||v||"path"!==o||i.value!==n||(i.value="");var b=i.value!==n,w=function(e,t){var n=e.squash;if(!t||!1===n)return!1;if(!R(n)||null==n)return g;if(!0===n||F(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}(i,b),x=function(e,t,r,i){var o,a,u=[{from:"",to:r||t?n:""},{from:null,to:r||t?n:""}];return o=_(e.replace)?e.replace:[],F(i)&&o.push({from:i,to:n}),a=h(o,function(e){return e.from}),f(u,function(e){return-1===s(a,e.from)}).concat(o)}(i,v,b,w);B(this,{id:e,type:r,location:o,array:v,squash:w,replace:x,isOptional:b,value:c,dynamic:n,config:i,toString:d})},c.prototype={$$new:function(){return r(this,B(new c,{$$parent:this}))},$$keys:function(){for(var e=[],t=[],n=this,r=a(c.prototype);n;)t.push(n),n=n.$$parent;return t.reverse(),H(t,function(t){H(a(t),function(t){-1===s(e,t)&&-1===s(r,t)&&e.push(t)})}),e},$$values:function(e){var t={},n=this;return H(n.$$keys(),function(r){t[r]=n[r].value(e&&e[r])}),t},$$equals:function(e,t){var n=!0,r=this;return H(r.$$keys(),function(i){var o=e&&e[i],a=t&&t[i];r[i].type.equals(o,a)||(n=!1)}),n},$$validates:function(e){var r,i,o,a,s,u=this.$$keys();for(r=0;r<u.length&&(i=this[u[r]],(o=e[u[r]])!==n&&null!==o||!i.isOptional);r++){if(a=i.type.$normalize(o),!i.type.is(a))return!1;if(s=i.type.encode(a),t.isString(s)&&!i.type.pattern.exec(s))return!1}return!0},$$parent:n},this.ParamSet=c}function x(e,r){function i(e){var t=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(e.source);return null!=t?t[1].replace(/\\(.)/g,"$1"):""}function o(e,t){return e.replace(/\$(\$|\d{1,2})/,function(e,n){return t["$"===n?0:Number(n)]})}function a(e,t,n){if(!n)return!1;var r=e.invoke(t,t,{$match:n});return!R(r)||r}function s(r,i,o,a,s){function d(e,t,n){return"/"===g?e:t?g.slice(0,-1)+e:n?g.slice(1)+e:e}function f(e){function t(e){var t=e(o,r);return!!t&&(F(t)&&r.replace().url(t),!0)}if(!e||!e.defaultPrevented){m&&r.url();m=n;var i,a=l.length;for(i=0;i<a;i++)if(t(l[i]))return;c&&t(c)}}function h(){return u=u||i.$on("$locationChangeSuccess",f)}var m,g=a.baseHref(),$=r.url();return p||h(),{sync:function(){f()},listen:function(){return h()},update:function(e){if(e)return void($=r.url());r.url()!==$&&(r.url($),r.replace())},push:function(e,t,i){var o=e.format(t||{});null!==o&&t&&t["#"]&&(o+="#"+t["#"]),r.url(o),m=i&&i.$$avoidResync?r.url():n,i&&i.replace&&r.replace()},href:function(n,i,o){if(!n.validates(i))return null;var a=e.html5Mode();t.isObject(a)&&(a=a.enabled),a=a&&s.history;var u=n.format(i);if(o=o||{},a||null===u||(u="#"+e.hashPrefix()+u),null!==u&&i&&i["#"]&&(u+="#"+i["#"]),u=d(u,a,o.absolute),!o.absolute||!u)return u;var l=!a&&u?"/":"",c=r.port();return c=80===c||443===c?"":":"+c,[r.protocol(),"://",r.host(),c,l,u].join("")}}}var u,l=[],c=null,p=!1;this.rule=function(e){if(!q(e))throw new Error("'rule' must be a function");return l.push(e),this},this.otherwise=function(e){if(F(e)){var t=e;e=function(){return t}}else if(!q(e))throw new Error("'rule' must be a function");return c=e,this},
this.when=function(e,t){var n,s=F(t);if(F(e)&&(e=r.compile(e)),!s&&!q(t)&&!_(t))throw new Error("invalid 'handler' in when()");var u={matcher:function(e,t){return s&&(n=r.compile(t),t=["$match",function(e){return n.format(e)}]),B(function(n,r){return a(n,t,e.exec(r.path(),r.search()))},{prefix:F(e.prefix)?e.prefix:""})},regex:function(e,t){if(e.global||e.sticky)throw new Error("when() RegExp must not be global or sticky");return s&&(n=t,t=["$match",function(e){return o(n,e)}]),B(function(n,r){return a(n,t,e.exec(r.path()))},{prefix:i(e)})}},l={matcher:r.isMatcher(e),regex:e instanceof RegExp};for(var c in l)if(l[c])return this.rule(u[c](e,t));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(e){e===n&&(e=!0),p=e},this.$get=s,s.$inject=["$location","$rootScope","$injector","$browser","$sniffer"]}function C(e,i){function o(e){return 0===e.indexOf(".")||0===e.indexOf("^")}function d(e,t){if(!e)return n;var r=F(e),i=r?e:e.name;if(o(i)){if(!t)throw new Error("No reference point given for path '"+i+"'");t=d(t);for(var a=i.split("."),s=0,u=a.length,l=t;s<u;s++)if(""!==a[s]||0!==s){if("^"!==a[s])break;if(!l.parent)throw new Error("Path '"+i+"' not valid for state '"+t.name+"'");l=l.parent}else l=t;a=a.slice(s).join("."),i=l.name+(l.name&&a?".":"")+a}var c=D[i];return!c||!r&&(r||c!==e&&c.self!==e)?n:c}function f(e,t){E[e]||(E[e]=[]),E[e].push(t)}function g(e){for(var t=E[e]||[];t.length;)$(t.shift())}function $(t){t=r(t,{self:t,resolve:t.resolve||{},toString:function(){return this.name}});var n=t.name;if(!F(n)||n.indexOf("@")>=0)throw new Error("State must have a valid name");if(D.hasOwnProperty(n))throw new Error("State '"+n+"' is already defined");var i=-1!==n.indexOf(".")?n.substring(0,n.lastIndexOf(".")):F(t.parent)?t.parent:L(t.parent)&&F(t.parent.name)?t.parent.name:"";if(i&&!D[i])return f(i,t.self);for(var o in T)q(T[o])&&(t[o]=T[o](t,T.$delegates[o]));return D[n]=t,!t[O]&&t.url&&e.when(t.url,["$match","$stateParams",function(e,n){S.$current.navigable==t&&l(e,n)||S.transitionTo(t,e,{inherit:!0,location:!1})}]),g(n),t}function v(e){return e.indexOf("*")>-1}function b(e){for(var t=e.split("."),n=S.$current.name.split("."),r=0,i=t.length;r<i;r++)"*"===t[r]&&(n[r]="*");return"**"===t[0]&&(n=n.slice(s(n,t[1])),n.unshift("**")),"**"===t[t.length-1]&&(n.splice(s(n,t[t.length-2])+1,Number.MAX_VALUE),n.push("**")),t.length==n.length&&n.join("")===t.join("")}function y(e,t){return F(e)&&!R(t)?T[e]:q(t)&&F(e)?(T[e]&&!T.$delegates[e]&&(T.$delegates[e]=T[e]),T[e]=t,this):this}function w(e,t){return L(e)?t=e:t.name=e,$(t),this}function x(e,i,o,s,l,p,f,g,$){function y(t,n,r,o){var a=e.$broadcast("$stateNotFound",t,n,r);if(a.defaultPrevented)return f.update(),A;if(!a.retry)return null;if(o.$retry)return f.update(),M;var s=S.transition=i.when(a.retry);return s.then(function(){return s!==S.transition?(e.$broadcast("$stateChangeCancel",t.to,t.toParams,n,r),E):(t.options.$retry=!0,S.transitionTo(t.to,t.toParams,t.options))},function(){return A}),f.update(),s}function w(e,n,r,a,u,p){function d(){var n=[];return H(e.views,function(r,i){var a=r.resolve&&r.resolve!==e.resolve?r.resolve:{};a.$template=[function(){return o.load(i,{view:r,locals:u.globals,params:f,notify:p.notify})||""}],n.push(l.resolve(a,u.globals,u.resolve,e).then(function(n){if(q(r.controllerProvider)||_(r.controllerProvider)){var o=t.extend({},a,u.globals);n.$$controller=s.invoke(r.controllerProvider,null,o)}else n.$$controller=r.controller;n.$$state=e,n.$$controllerAs=r.controllerAs,n.$$resolveAs=r.resolveAs,u[i]=n}))}),i.all(n).then(function(){return u.globals})}var f=r?n:c(e.params.$$keys(),n),h={$stateParams:f};u.resolve=l.resolve(e.resolve,h,u.resolve,e);var m=[u.resolve.then(function(e){u.globals=e})];return a&&m.push(a),i.all(m).then(d).then(function(e){return u})}var x=new Error("transition superseded"),E=m(i.reject(x)),T=m(i.reject(new Error("transition prevented"))),A=m(i.reject(new Error("transition aborted"))),M=m(i.reject(new Error("transition failed")));return k.locals={resolve:null,globals:{$stateParams:{}}},S={params:{},current:k.self,$current:k,transition:null},S.reload=function(e){return S.transitionTo(S.current,p,{reload:e||!0,inherit:!1,notify:!0})},S.go=function(e,t,n){return S.transitionTo(e,t,B({inherit:!0,relative:S.$current},n))},S.transitionTo=function(t,n,o){n=n||{},o=B({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},o||{});var a,l=S.$current,h=S.params,g=l.path,$=d(t,o.relative),v=n["#"];if(!R($)){var b={to:t,toParams:n,options:o},D=y(b,l.self,h,o);if(D)return D;if(t=b.to,n=b.toParams,o=b.options,$=d(t,o.relative),!R($)){if(!o.relative)throw new Error("No such state '"+t+"'");throw new Error("Could not resolve '"+t+"' from state '"+o.relative+"'")}}if($[O])throw new Error("Cannot transition to abstract state '"+t+"'");if(o.inherit&&(n=u(p,n||{},S.$current,$)),!$.params.$$validates(n))return M;n=$.params.$$values(n),t=$;var A=t.path,P=0,I=A[P],N=k.locals,U=[];if(o.reload){if(F(o.reload)||L(o.reload)){if(L(o.reload)&&!o.reload.name)throw new Error("Invalid reload state object");var j=!0===o.reload?g[0]:d(o.reload);if(o.reload&&!j)throw new Error("No such reload state '"+(F(o.reload)?o.reload:o.reload.name)+"'");for(;I&&I===g[P]&&I!==j;)N=U[P]=I.locals,P++,I=A[P]}}else for(;I&&I===g[P]&&I.ownParams.$$equals(n,h);)N=U[P]=I.locals,P++,I=A[P];if(C(t,n,l,h,N,o))return v&&(n["#"]=v),S.params=n,W(S.params,p),W(c(t.params.$$keys(),p),t.locals.globals.$stateParams),o.location&&t.navigable&&t.navigable.url&&(f.push(t.navigable.url,n,{$$avoidResync:!0,replace:"replace"===o.location}),f.update(!0)),S.transition=null,i.when(S.current);if(n=c(t.params.$$keys(),n||{}),v&&(n["#"]=v),o.notify&&e.$broadcast("$stateChangeStart",t.self,n,l.self,h,o).defaultPrevented)return e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),null==S.transition&&f.update(),T;for(var V=i.when(N),z=P;z<A.length;z++,I=A[z])N=U[z]=r(N),V=w(I,n,I===t,V,N,o);var q=S.transition=V.then(function(){var r,i,a;if(S.transition!==q)return e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),E;for(r=g.length-1;r>=P;r--)a=g[r],a.self.onExit&&s.invoke(a.self.onExit,a.self,a.locals.globals),a.locals=null;for(r=P;r<A.length;r++)i=A[r],i.locals=U[r],i.self.onEnter&&s.invoke(i.self.onEnter,i.self,i.locals.globals);return S.transition!==q?(e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),E):(S.$current=t,S.current=t.self,S.params=n,W(S.params,p),S.transition=null,o.location&&t.navigable&&f.push(t.navigable.url,t.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===o.location}),o.notify&&e.$broadcast("$stateChangeSuccess",t.self,n,l.self,h),f.update(!0),S.current)}).then(null,function(r){return r===x?E:S.transition!==q?(e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),E):(S.transition=null,a=e.$broadcast("$stateChangeError",t.self,n,l.self,h,r),a.defaultPrevented||f.update(),i.reject(r))});return m(q),q},S.is=function(e,t,r){r=B({relative:S.$current},r||{});var i=d(e,r.relative);return R(i)?S.$current===i&&(!t||a(t).reduce(function(e,n){var r=i.params[n];return e&&!r||r.type.equals(p[n],t[n])},!0)):n},S.includes=function(e,t,r){if(r=B({relative:S.$current},r||{}),F(e)&&v(e)){if(!b(e))return!1;e=S.$current.name}var i=d(e,r.relative);if(!R(i))return n;if(!R(S.$current.includes[i.name]))return!1;if(!t)return!0;for(var o=a(t),s=0;s<o.length;s++){var u=o[s],l=i.params[u];if(l&&!l.type.equals(p[u],t[u]))return!1}return a(t).reduce(function(e,n){var r=i.params[n];return e&&!r||r.type.equals(p[n],t[n])},!0)},S.href=function(e,t,r){r=B({lossy:!0,inherit:!0,absolute:!1,relative:S.$current},r||{});var i=d(e,r.relative);if(!R(i))return null;r.inherit&&(t=u(p,t||{},S.$current,i));var o=i&&r.lossy?i.navigable:i;return o&&o.url!==n&&null!==o.url?f.href(o.url,c(i.params.$$keys().concat("#"),t||{}),{absolute:r.absolute}):null},S.get=function(e,t){if(0===arguments.length)return h(a(D),function(e){return D[e].self});var n=d(e,t||S.$current);return n&&n.self?n.self:null},S}function C(e,t,n,r,i,o){if(!o.reload&&e===n&&(i===n.locals||!1===e.self.reloadOnSearch&&function(e,t,n){function r(t){return"search"!=e.params[t].location}var i=e.params.$$keys().filter(r),o=p.apply({},[e.params].concat(i));return new G.ParamSet(o).$$equals(t,n)}(n,r,t)))return!0}var k,S,D={},E={},O="abstract",T={parent:function(e){if(R(e.parent)&&e.parent)return d(e.parent);var t=/^(.+)\.[^.]+$/.exec(e.name);return t?d(t[1]):k},data:function(e){return e.parent&&e.parent.data&&(e.data=e.self.data=r(e.parent.data,e.data)),e.data},url:function(e){var t=e.url,n={params:e.params||{}};if(F(t))return"^"==t.charAt(0)?i.compile(t.substring(1),n):(e.parent.navigable||k).url.concat(t,n);if(!t||i.isMatcher(t))return t;throw new Error("Invalid url '"+t+"' in state '"+e+"'")},navigable:function(e){return e.url?e:e.parent?e.parent.navigable:null},ownParams:function(e){var t=e.url&&e.url.params||new G.ParamSet;return H(e.params||{},function(e,n){t[n]||(t[n]=new G.Param(n,null,e,"config"))}),t},params:function(e){var t=p(e.ownParams,e.ownParams.$$keys());return e.parent&&e.parent.params?B(e.parent.params.$$new(),t):new G.ParamSet},views:function(e){var t={};return H(R(e.views)?e.views:{"":e},function(n,r){r.indexOf("@")<0&&(r+="@"+e.parent.name),n.resolveAs=n.resolveAs||e.resolveAs||"$resolve",t[r]=n}),t},path:function(e){return e.parent?e.parent.path.concat(e):[]},includes:function(e){var t=e.parent?B({},e.parent.includes):{};return t[e.name]=!0,t},$delegates:{}};k=$({name:"",url:"^",views:null,abstract:!0}),k.navigable=null,this.decorator=y,this.state=w,this.$get=x,x.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function k(){function e(e,t){return{load:function(e,n){var r;return n=B({template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}},n),n.view&&(r=t.fromConfig(n.view,n.params,n.locals)),r}}}this.$get=e,e.$inject=["$rootScope","$templateFactory"]}function S(){var e=!1;this.useAnchorScroll=function(){e=!0},this.$get=["$anchorScroll","$timeout",function(t,n){return e?t:function(e){return n(function(){e[0].scrollIntoView()},0,!1)}}]}function D(e,n,r,i,o){function a(e,n){if(l)return{enter:function(e,n,r){t.version.minor>2?l.enter(e,null,n).then(r):l.enter(e,null,n,r)},leave:function(e,n){t.version.minor>2?l.leave(e).then(n):l.leave(e,n)}};if(u){var r=u&&u(n,e);return{enter:function(e,t,n){r.enter(e,null,t),n()},leave:function(e,t){r.leave(e),t()}}}return function(){return{enter:function(e,t,n){t.after(e),n()},leave:function(e,t){e.remove(),t()}}}()}var s=function(){return n.has?function(e){return n.has(e)?n.get(e):null}:function(e){try{return n.get(e)}catch(e){return null}}}(),u=s("$animator"),l=s("$animate");return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(n,s,u){return function(n,s,l){function c(){if(d&&(d.remove(),d=null),h&&(h.$destroy(),h=null),f){var e=f.data("$uiViewAnim");v.leave(f,function(){e.$$animLeave.resolve(),d=null}),d=f,f=null}}function p(a){var p,d=O(n,l,s,i),b=d&&e.$current&&e.$current.locals[d];if(a||b!==m){p=n.$new(),m=e.$current.locals[d],p.$emit("$viewContentLoading",d);var y=u(p,function(e){var i=o.defer(),a=o.defer(),u={$animEnter:i.promise,$animLeave:a.promise,$$animLeave:a};e.data("$uiViewAnim",u),v.enter(e,s,function(){i.resolve(),h&&h.$emit("$viewContentAnimationEnded"),(t.isDefined($)&&!$||n.$eval($))&&r(e)}),c()});f=y,h=p,h.$emit("$viewContentLoaded",d),h.$eval(g)}}var d,f,h,m,g=l.onload||"",$=l.autoscroll,v=a(l,n);s.inheritedData("$uiView");n.$on("$stateChangeSuccess",function(){p(!1)}),p(!0)}}}}function E(e,n,r,i){return{restrict:"ECA",priority:-400,compile:function(o){var a=o.html();return o.empty?o.empty():o[0].innerHTML=null,function(o,s,u){var l=r.$current,c=O(o,u,s,i),p=l&&l.locals[c];if(!p)return s.html(a),void e(s.contents())(o);s.data("$uiView",{name:c,state:p.$$state}),s.html(p.$template?p.$template:a);var d=t.extend({},p);o[p.$$resolveAs]=d;var f=e(s.contents());if(p.$$controller){p.$scope=o,p.$element=s;var h=n(p.$$controller,p);p.$$controllerAs&&(o[p.$$controllerAs]=h,o[p.$$controllerAs][p.$$resolveAs]=d),q(h.$onInit)&&h.$onInit(),s.data("$ngControllerController",h),s.children().data("$ngControllerController",h)}f(o)}}}}function O(e,t,n,r){var i=r(t.uiView||t.name||"")(e),o=n.inheritedData("$uiView");return i.indexOf("@")>=0?i:i+"@"+(o?o.state.name:"")}function T(e,t){var n,r=e.match(/^\s*({[^}]*})\s*$/);if(r&&(e=t+"("+r[1]+")"),!(n=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/))||4!==n.length)throw new Error("Invalid state ref '"+e+"'");return{state:n[1],paramExpr:n[3]||null}}function A(e){var t=e.parent().inheritedData("$uiView");if(t&&t.state&&t.state.name)return t.state}function M(e){var t="[object SVGAnimatedString]"===Object.prototype.toString.call(e.prop("href")),n="FORM"===e[0].nodeName;return{attr:n?"action":t?"xlink:href":"href",isAnchor:"A"===e.prop("tagName").toUpperCase(),clickable:!n}}function P(e,t,n,r,i){return function(o){var a=o.which||o.button,s=i();if(!(a>1||o.ctrlKey||o.metaKey||o.shiftKey||e.attr("target"))){var u=n(function(){t.go(s.state,s.params,s.options)});o.preventDefault();var l=r.isAnchor&&!s.href?1:0;o.preventDefault=function(){l--<=0&&n.cancel(u)}}}}function I(e,t){return{relative:A(e)||t.$current,inherit:!0}}function N(e,n){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(r,i,o,a){var s,u=T(o.uiSref,e.current.name),l={state:u.state,href:null,params:null},c=M(i),p=a[1]||a[0],d=null;l.options=B(I(i,e),o.uiSrefOpts?r.$eval(o.uiSrefOpts):{});var f=function(n){n&&(l.params=t.copy(n)),l.href=e.href(u.state,l.params,l.options),d&&d(),p&&(d=p.$$addStateInfo(u.state,l.params)),null!==l.href&&o.$set(c.attr,l.href)};u.paramExpr&&(r.$watch(u.paramExpr,function(e){e!==l.params&&f(e)},!0),l.params=t.copy(r.$eval(u.paramExpr))),f(),c.clickable&&(s=P(i,e,n,c,function(){return l}),i[i.on?"on":"bind"]("click",s),r.$on("$destroy",function(){i[i.off?"off":"unbind"]("click",s)}))}}}function U(e,t){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,r,i,o){function a(t){d.state=t[0],d.params=t[1],d.options=t[2],d.href=e.href(d.state,d.params,d.options),f&&f(),l&&(f=l.$$addStateInfo(d.state,d.params)),d.href&&i.$set(u.attr,d.href)}var s,u=M(r),l=o[1]||o[0],c=[i.uiState,i.uiStateParams||null,i.uiStateOpts||null],p="["+c.map(function(e){return e||"null"}).join(", ")+"]",d={state:null,params:null,options:null,href:null},f=null;n.$watch(p,a,!0),a(n.$eval(p)),u.clickable&&(s=P(r,e,t,u,function(){return d}),r[r.on?"on":"bind"]("click",s),n.$on("$destroy",function(){r[r.off?"off":"unbind"]("click",s)}))}}}function j(e,t,n){return{restrict:"A",controller:["$scope","$element","$attrs","$timeout",function(t,r,i,o){function a(t,n,i){var o=e.get(t,A(r)),a=s(t,n),u={state:o||{name:t},params:n,hash:a};return m.push(u),g[a]=i,function(){var e=m.indexOf(u);-1!==e&&m.splice(e,1)}}function s(e,n){if(!F(e))throw new Error("state should be a string");return L(n)?e+Y(n):(n=t.$eval(n),L(n)?e+Y(n):e)}function u(){for(var e=0;e<m.length;e++)p(m[e].state,m[e].params)?l(r,g[m[e].hash]):c(r,g[m[e].hash]),d(m[e].state,m[e].params)?l(r,f):c(r,f)}function l(e,t){o(function(){e.addClass(t)})}function c(e,t){e.removeClass(t)}function p(t,n){return e.includes(t.name,n)}function d(t,n){return e.is(t.name,n)}var f,h,m=[],g={};f=n(i.uiSrefActiveEq||"",!1)(t);try{h=t.$eval(i.uiSrefActive)}catch(e){}h=h||n(i.uiSrefActive||"",!1)(t),L(h)&&H(h,function(n,r){if(F(n)){var i=T(n,e.current.name);a(i.state,t.$eval(i.paramExpr),r)}}),this.$$addStateInfo=function(e,t){if(!(L(h)&&m.length>0)){var n=a(e,t,h);return u(),n}},t.$on("$stateChangeSuccess",u),u()}]}}function V(e){var t=function(t,n){return e.is(t,n)};return t.$stateful=!0,t}function z(e){var t=function(t,n,r){return e.includes(t,n,r)};return t.$stateful=!0,t}var R=t.isDefined,q=t.isFunction,F=t.isString,L=t.isObject,_=t.isArray,H=t.forEach,B=t.extend,W=t.copy,Y=t.toJson;t.module("ui.router.util",["ng"]),t.module("ui.router.router",["ui.router.util"]),t.module("ui.router.state",["ui.router.router","ui.router.util"]),t.module("ui.router",["ui.router.state"]),t.module("ui.router.compat",["ui.router"]),g.$inject=["$q","$injector"],t.module("ui.router.util").service("$resolve",g),t.module("ui.router.util").provider("$templateFactory",$);var G;b.prototype.concat=function(e,t){var n={caseInsensitive:G.caseInsensitive(),strict:G.strictMode(),squash:G.defaultSquashPolicy()};return new b(this.sourcePath+e+this.sourceSearch,B(n,t),this)},b.prototype.toString=function(){return this.source},b.prototype.exec=function(e,t){var n=this.regexp.exec(e);if(!n)return null;t=t||{};var r,i,o,a=this.parameters(),s=a.length,u=this.segments.length-1,l={};if(u!==n.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");var c,p;for(r=0;r<u;r++){for(o=a[r],c=this.params[o],p=n[r+1],i=0;i<c.replace.length;i++)c.replace[i].from===p&&(p=c.replace[i].to);p&&!0===c.array&&(p=function(e){function t(e){return e.split("").reverse().join("")}function n(e){return e.replace(/\\-/g,"-")}return h(h(t(e).split(/-(?!\\)/),t),n).reverse()}(p)),R(p)&&(p=c.type.decode(p)),l[o]=c.value(p)}for(;r<s;r++){for(o=a[r],l[o]=this.params[o].value(t[o]),c=this.params[o],p=t[o],i=0;i<c.replace.length;i++)c.replace[i].from===p&&(p=c.replace[i].to);R(p)&&(p=c.type.decode(p)),l[o]=c.value(p)}return l},b.prototype.parameters=function(e){return R(e)?this.params[e]||null:this.$$paramNames},b.prototype.validates=function(e){return this.params.$$validates(e)},b.prototype.format=function(e){function t(e){return encodeURIComponent(e).replace(/-/g,function(e){return"%5C%"+e.charCodeAt(0).toString(16).toUpperCase()})}e=e||{};var n=this.segments,r=this.parameters(),i=this.params;if(!this.validates(e))return null;var o,a=!1,s=n.length-1,u=r.length,l=n[0];for(o=0;o<u;o++){var c=o<s,p=r[o],d=i[p],f=d.value(e[p]),m=d.isOptional&&d.type.equals(d.value(),f),g=!!m&&d.squash,$=d.type.encode(f);if(c){var v=n[o+1],b=o+1===s;if(!1===g)null!=$&&(_($)?l+=h($,t).join("-"):l+=encodeURIComponent($)),l+=v;else if(!0===g){var y=l.match(/\/$/)?/\/?(.*)/:/(.*)/;l+=v.match(y)[1]}else F(g)&&(l+=g+v);b&&!0===d.squash&&"/"===l.slice(-1)&&(l=l.slice(0,-1))}else{if(null==$||m&&!1!==g)continue;if(_($)||($=[$]),0===$.length)continue;$=h($,encodeURIComponent).join("&"+p+"="),l+=(a?"&":"?")+p+"="+$,a=!0}}return l},y.prototype.is=function(e,t){return!0},y.prototype.encode=function(e,t){return e},y.prototype.decode=function(e,t){return e},y.prototype.equals=function(e,t){return e==t},y.prototype.$subPattern=function(){var e=this.pattern.toString();return e.substr(1,e.length-2)},y.prototype.pattern=/.*/,y.prototype.toString=function(){return"{Type:"+this.name+"}"},y.prototype.$normalize=function(e){return this.is(e)?e:this.decode(e)},y.prototype.$asArray=function(e,t){function r(e,t){function r(e,t){return function(){return e[t].apply(e,arguments)}}function i(e){return _(e)?e:R(e)?[e]:[]}function o(e){switch(e.length){case 0:return n;case 1:return"auto"===t?e[0]:e;default:return e}}function a(e){return!e}function s(e,t){return function(n){if(_(n)&&0===n.length)return n;n=i(n);var r=h(n,e);return!0===t?0===f(r,a).length:o(r)}}this.encode=s(r(e,"encode")),this.decode=s(r(e,"decode")),this.is=s(r(e,"is"),!0),this.equals=function(e){return function(t,n){var r=i(t),o=i(n);if(r.length!==o.length)return!1;for(var a=0;a<r.length;a++)if(!e(r[a],o[a]))return!1;return!0}}(r(e,"equals")),this.pattern=e.pattern,this.$normalize=s(r(e,"$normalize")),this.name=e.name,this.$arrayMode=t}if(!e)return this;if("auto"===e&&!t)throw new Error("'auto' array mode is for query parameters only");return new r(this,e)},t.module("ui.router.util").provider("$urlMatcherFactory",w),t.module("ui.router.util").run(["$urlMatcherFactory",function(e){}]),x.$inject=["$locationProvider","$urlMatcherFactoryProvider"],t.module("ui.router.router").provider("$urlRouter",x),C.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],t.module("ui.router.state").factory("$stateParams",function(){return{}}).constant("$state.runtime",{autoinject:!0}).provider("$state",C).run(["$injector",function(e){e.get("$state.runtime").autoinject&&e.get("$state")}]),k.$inject=[],t.module("ui.router.state").provider("$view",k),t.module("ui.router.state").provider("$uiViewScroll",S),D.$inject=["$state","$injector","$uiViewScroll","$interpolate","$q"],E.$inject=["$compile","$controller","$state","$interpolate"],t.module("ui.router.state").directive("uiView",D),t.module("ui.router.state").directive("uiView",E),N.$inject=["$state","$timeout"],U.$inject=["$state","$timeout"],j.$inject=["$state","$stateParams","$interpolate"],t.module("ui.router.state").directive("uiSref",N).directive("uiSrefActive",j).directive("uiSrefActiveEq",j).directive("uiState",U),V.$inject=["$state"],z.$inject=["$state"],t.module("ui.router.state").filter("isState",V).filter("includedByState",z)}(window,window.angular),function(e,t){"use strict";function n(e){return null!=e&&""!==e&&"hasOwnProperty"!==e&&a.test("."+e)}function r(e,r){if(!n(r))throw o("badmember",'Dotted member path "@{0}" is invalid.',r);for(var i=r.split("."),a=0,s=i.length;a<s&&t.isDefined(e);a++){var u=i[a];e=null!==e?e[u]:void 0}return e}function i(e,n){n=n||{},t.forEach(n,function(e,t){delete n[t]});for(var r in e)!e.hasOwnProperty(r)||"$"===r.charAt(0)&&"$"===r.charAt(1)||(n[r]=e[r]);return n}var o=t.$$minErr("$resource"),a=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;t.module("ngResource",["ng"]).info({angularVersion:"1.6.4"}).provider("$resource",function(){var e=/^https?:\/\/\[[^\]]*][^\/]*/,n=this;this.defaults={stripTrailingSlashes:!0,cancellable:!1,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},delete:{method:"DELETE"}}},this.$get=["$http","$log","$q","$timeout",function(a,s,u,l){function c(e,t){this.template=e,this.defaults=h({},n.defaults,t),this.urlParams={}}function p(e,t,y,w){function x(e,n){var i={};return n=h({},t,n),f(n,function(t,n){v(t)&&(t=t(e)),i[n]=t&&t.charAt&&"@"===t.charAt(0)?r(e,t.substr(1)):t}),i}function C(e){return e.resource}function k(e){i(e||{},this)}var S=new c(e,w);return y=h({},n.defaults.actions,y),k.prototype.toJSON=function(){var e=h({},this);return delete e.$promise,delete e.$resolved,delete e.$cancelRequest,e},f(y,function(e,t){var n=!0===e.hasBody||!1!==e.hasBody&&/^(POST|PUT|PATCH)$/i.test(e.method),r=e.timeout,c=$(e.cancellable)?e.cancellable:S.defaults.cancellable;r&&!b(r)&&(s.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),delete e.timeout,r=null),k[t]=function(s,p,$,b){function y(e){z.catch(d),T.resolve(e)}var w,D,E,O={};switch(arguments.length){case 4:E=b,D=$;case 3:case 2:if(!v(p)){O=s,w=p,D=$;break}if(v(s)){D=s,E=p;break}D=p,E=$;case 1:v(s)?D=s:n?w=s:O=s;break;case 0:break;default:throw o("badargs","Expected up to 4 arguments [params, data, success, error], got {0} arguments",arguments.length)}var T,A,M=this instanceof k,P=M?w:e.isArray?[]:new k(w),I={},N=e.interceptor&&e.interceptor.response||C,U=e.interceptor&&e.interceptor.responseError||void 0,j=!!E,V=!!U;f(e,function(e,t){switch(t){default:I[t]=m(e);break;case"params":case"isArray":case"interceptor":case"cancellable":}}),!M&&c&&(T=u.defer(),I.timeout=T.promise,r&&(A=l(T.resolve,r))),n&&(I.data=w),S.setUrlParams(I,h({},x(w,e.params||{}),O),e.url);var z=a(I).then(function(n){var r=n.data;if(r){if(g(r)!==!!e.isArray)throw o("badcfg","Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2} (Request: {3} {4})",t,e.isArray?"array":"object",g(r)?"array":"object",I.method,I.url);if(e.isArray)P.length=0,f(r,function(e){"object"==typeof e?P.push(new k(e)):P.push(e)});else{var a=P.$promise;i(r,P),P.$promise=a}}return n.resource=P,n});return z=z.finally(function(){P.$resolved=!0,!M&&c&&(P.$cancelRequest=d,l.cancel(A),T=A=I.timeout=null)}),z=z.then(function(e){var t=N(e);return(D||d)(t,e.headers,e.status,e.statusText),t},j||V?function(e){return j&&!V&&z.catch(d),j&&E(e),V?U(e):u.reject(e)}:void 0),M?z:(P.$promise=z,P.$resolved=!1,c&&(P.$cancelRequest=y),P)},k.prototype["$"+t]=function(e,n,r){v(e)&&(r=n,n=e,e={});var i=k[t].call(this,e,this,n,r);return i.$promise||i}}),k.bind=function(n){var r=h({},t,n);return p(e,r,y,w)},k}var d=t.noop,f=t.forEach,h=t.extend,m=t.copy,g=t.isArray,$=t.isDefined,v=t.isFunction,b=t.isNumber,y=t.$$encodeUriQuery,w=t.$$encodeUriSegment;return c.prototype={setUrlParams:function(t,n,r){var i,a,s=this,u=r||s.template,l="",c=s.urlParams=Object.create(null);f(u.split(/\W/),function(e){if("hasOwnProperty"===e)throw o("badname","hasOwnProperty is not a valid parameter name.");!new RegExp("^\\d+$").test(e)&&e&&new RegExp("(^|[^\\\\]):"+e+"(\\W|$)").test(u)&&(c[e]={isQueryParamValue:new RegExp("\\?.*=:"+e+"(?:\\W|$)").test(u)})}),u=u.replace(/\\:/g,":"),u=u.replace(e,function(e){return l=e,""}),n=n||{},f(s.urlParams,function(e,t){i=n.hasOwnProperty(t)?n[t]:s.defaults[t],$(i)&&null!==i?(a=e.isQueryParamValue?y(i,!0):w(i),u=u.replace(new RegExp(":"+t+"(\\W|$)","g"),function(e,t){return a+t})):u=u.replace(new RegExp("(/?):"+t+"(\\W|$)","g"),function(e,t,n){return"/"===n.charAt(0)?n:t+n})}),s.defaults.stripTrailingSlashes&&(u=u.replace(/\/+$/,"")||"/"),u=u.replace(/\/\.(?=\w+($|\?))/,"."),t.url=l+u.replace(/\/(\\|%5C)\./,"/."),f(n,function(e,n){s.urlParams[n]||(t.params=t.params||{},t.params[n]=e)})}},p}]})}(window,window.angular),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="checklist-model"),angular.module("checklist-model",[]).directive("checklistModel",["$parse","$compile",function(e,t){function n(e,t,n){if(angular.isArray(e))for(var r=e.length;r--;)if(n(e[r],t))return!0;return!1}function r(e,t,r){return e=angular.isArray(e)?e:[],n(e,t,r)||e.push(t),e}function i(e,t,n){if(angular.isArray(e))for(var r=e.length;r--;)if(n(e[r],t)){e.splice(r,1);break}return e}function o(o,a,s){function u(){b(),y(),w()}function l(){return s.checklistValue?e(s.checklistValue)(o.$parent):s.value}function c(e,t){var n=f(o.$parent);angular.isFunction(f.assign)&&(!0===t?f.assign(o.$parent,r(n,e,$)):f.assign(o.$parent,i(n,e,$)))}function p(e,t){if(m&&!1===m(o))return void c(l(),g(o));g.assign(o,n(e,l(),$))}var d=s.checklistModel;s.$set("checklistModel",null),t(a)(o),s.$set("checklistModel",d);var f=e(d),h=e(s.checklistChange),m=e(s.checklistBeforeChange),g=e(s.ngModel),$=function(e,t){return isNaN(e)||isNaN(t)?angular.equals(e,t):String(e)===String(t)};if(s.hasOwnProperty("checklistComparator"))if("."==s.checklistComparator[0]){var v=s.checklistComparator.substring(1);$=function(e,t){return e[v]===t[v]}}else $=e(s.checklistComparator)(o.$parent);var b=o.$watch(s.ngModel,function(e,t){if(e!==t){if(m&&!1===m(o))return void g.assign(o,n(f(o.$parent),l(),$));c(l(),e),h&&h(o)}}),y=o.$watch(l,function(e,t){if(e!=t&&angular.isDefined(t)&&!0===o[s.ngModel]){var n=f(o.$parent);f.assign(o.$parent,i(n,t,$)),f.assign(o.$parent,r(n,e,$))}},!0),w=o.$on("$destroy",u);angular.isFunction(o.$parent.$watchCollection)?o.$parent.$watchCollection(d,p):o.$parent.$watch(d,p,!0)}return{restrict:"A",priority:1e3,terminal:!0,scope:!0,compile:function(e,t){if(!t.checklistValue&&!t.value)throw"You should provide `value` or `checklist-value`.";return t.ngModel||t.$set("ngModel","checked"),o}}}]),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.satellizer=t()}(this,function(){"use strict";function e(e,t){if(/^(?:[a-z]+:)?\/\//i.test(t))return t;var n=[e,t].join("/");return function(e){return e.replace(/[\/]+/g,"/").replace(/\/\?/g,"?").replace(/\/\#/g,"#").replace(/\:\//g,"://")}(n)}function t(e){var t="https:"===e.protocol;return e.protocol+"//"+e.hostname+":"+(e.port||(t?"443":"80"))+(/^\//.test(e.pathname)?e.pathname:"/"+e.pathname)}function n(e){var t,n,r={};return angular.forEach((e||"").split("&"),function(e){e&&(n=e.split("="),t=decodeURIComponent(n[0]),r[t]=!angular.isDefined(n[1])||decodeURIComponent(n[1]))}),r}function r(e){var t;if("undefined"!=typeof module&&module.exports)try{t=require("buffer").Buffer}catch(e){}var n=String.fromCharCode,r=new RegExp(["[À-ß][-¿]","[à-ï][-¿]{2}","[ð-÷][-¿]{3}"].join("|"),"g"),i=function(e){switch(e.length){case 4:var t=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),r=t-65536;return n(55296+(r>>>10))+n(56320+(1023&r));case 3:return n((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return n((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},o=function(e){return e.replace(r,i)};return(t?function(e){return(e.constructor===t.constructor?e:new t(e,"base64")).toString()}:function(e){return o(atob(e))})(String(e).replace(/[-_]/g,function(e){return"-"===e?"+":"/"}).replace(/[^A-Za-z0-9\+\/]/g,""))}var i=function(){function e(){this.baseUrl="/",this.loginUrl="/auth/login",this.signupUrl="/auth/signup",this.unlinkUrl="/auth/unlink/",this.tokenName="token",this.tokenPrefix="satellizer",this.tokenHeader="Authorization",this.tokenType="Bearer",this.storageType="localStorage",this.tokenRoot=null,this.withCredentials=!1,this.providers={facebook:{name:"facebook",url:"/auth/facebook",authorizationEndpoint:"https://www.facebook.com/v2.5/dialog/oauth",redirectUri:window.location.origin+"/",requiredUrlParams:["display","scope"],scope:["email"],scopeDelimiter:",",display:"popup",oauthType:"2.0",popupOptions:{width:580,height:400}},google:{name:"google",url:"/auth/google",authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",redirectUri:window.location.origin,requiredUrlParams:["scope"],optionalUrlParams:["display","state"],scope:["profile","email"],scopePrefix:"openid",scopeDelimiter:" ",display:"popup",oauthType:"2.0",popupOptions:{width:452,height:633},state:function(){return encodeURIComponent(Math.random().toString(36).substr(2))}},github:{name:"github",url:"/auth/github",authorizationEndpoint:"https://github.com/login/oauth/authorize",redirectUri:window.location.origin,optionalUrlParams:["scope"],scope:["user:email"],scopeDelimiter:" ",oauthType:"2.0",popupOptions:{width:1020,height:618}},instagram:{name:"instagram",url:"/auth/instagram",authorizationEndpoint:"https://api.instagram.com/oauth/authorize",redirectUri:window.location.origin,requiredUrlParams:["scope"],scope:["basic"],scopeDelimiter:"+",oauthType:"2.0"},linkedin:{name:"linkedin",url:"/auth/linkedin",authorizationEndpoint:"https://www.linkedin.com/uas/oauth2/authorization",redirectUri:window.location.origin,requiredUrlParams:["state"],scope:["r_emailaddress"],scopeDelimiter:" ",state:"STATE",oauthType:"2.0",popupOptions:{width:527,height:582}},twitter:{name:"twitter",url:"/auth/twitter",authorizationEndpoint:"https://api.twitter.com/oauth/authenticate",redirectUri:window.location.origin,oauthType:"1.0",popupOptions:{width:495,height:645}},twitch:{name:"twitch",url:"/auth/twitch",authorizationEndpoint:"https://api.twitch.tv/kraken/oauth2/authorize",redirectUri:window.location.origin,requiredUrlParams:["scope"],scope:["user_read"],scopeDelimiter:" ",display:"popup",oauthType:"2.0",popupOptions:{width:500,height:560}},live:{name:"live",url:"/auth/live",authorizationEndpoint:"https://login.live.com/oauth20_authorize.srf",redirectUri:window.location.origin,requiredUrlParams:["display","scope"],scope:["wl.emails"],scopeDelimiter:" ",display:"popup",oauthType:"2.0",popupOptions:{width:500,height:560}},yahoo:{name:"yahoo",url:"/auth/yahoo",authorizationEndpoint:"https://api.login.yahoo.com/oauth2/request_auth",redirectUri:window.location.origin,scope:[],scopeDelimiter:",",oauthType:"2.0",popupOptions:{width:559,height:519}},bitbucket:{name:"bitbucket",url:"/auth/bitbucket",
authorizationEndpoint:"https://bitbucket.org/site/oauth2/authorize",redirectUri:window.location.origin+"/",requiredUrlParams:["scope"],scope:["email"],scopeDelimiter:" ",oauthType:"2.0",popupOptions:{width:1028,height:529}},spotify:{name:"spotify",url:"/auth/spotify",authorizationEndpoint:"https://accounts.spotify.com/authorize",redirectUri:window.location.origin,optionalUrlParams:["state"],requiredUrlParams:["scope"],scope:["user-read-email"],scopePrefix:"",scopeDelimiter:",",oauthType:"2.0",popupOptions:{width:500,height:530},state:function(){return encodeURIComponent(Math.random().toString(36).substr(2))}}},this.httpInterceptor=function(){return!0}}return Object.defineProperty(e,"getConstant",{get:function(){return new e},enumerable:!0,configurable:!0}),e}(),o=function(){function e(e){this.SatellizerConfig=e}return Object.defineProperty(e.prototype,"baseUrl",{get:function(){return this.SatellizerConfig.baseUrl},set:function(e){this.SatellizerConfig.baseUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loginUrl",{get:function(){return this.SatellizerConfig.loginUrl},set:function(e){this.SatellizerConfig.loginUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"signupUrl",{get:function(){return this.SatellizerConfig.signupUrl},set:function(e){this.SatellizerConfig.signupUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"unlinkUrl",{get:function(){return this.SatellizerConfig.unlinkUrl},set:function(e){this.SatellizerConfig.unlinkUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenRoot",{get:function(){return this.SatellizerConfig.tokenRoot},set:function(e){this.SatellizerConfig.tokenRoot=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenName",{get:function(){return this.SatellizerConfig.tokenName},set:function(e){this.SatellizerConfig.tokenName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenPrefix",{get:function(){return this.SatellizerConfig.tokenPrefix},set:function(e){this.SatellizerConfig.tokenPrefix=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenHeader",{get:function(){return this.SatellizerConfig.tokenHeader},set:function(e){this.SatellizerConfig.tokenHeader=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenType",{get:function(){return this.SatellizerConfig.tokenType},set:function(e){this.SatellizerConfig.tokenType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"withCredentials",{get:function(){return this.SatellizerConfig.withCredentials},set:function(e){this.SatellizerConfig.withCredentials=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"storageType",{get:function(){return this.SatellizerConfig.storageType},set:function(e){this.SatellizerConfig.storageType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"httpInterceptor",{get:function(){return this.SatellizerConfig.httpInterceptor},set:function(e){this.SatellizerConfig.httpInterceptor="function"==typeof e?e:function(){return e}},enumerable:!0,configurable:!0}),e.prototype.facebook=function(e){angular.extend(this.SatellizerConfig.providers.facebook,e)},e.prototype.google=function(e){angular.extend(this.SatellizerConfig.providers.google,e)},e.prototype.github=function(e){angular.extend(this.SatellizerConfig.providers.github,e)},e.prototype.instagram=function(e){angular.extend(this.SatellizerConfig.providers.instagram,e)},e.prototype.linkedin=function(e){angular.extend(this.SatellizerConfig.providers.linkedin,e)},e.prototype.twitter=function(e){angular.extend(this.SatellizerConfig.providers.twitter,e)},e.prototype.twitch=function(e){angular.extend(this.SatellizerConfig.providers.twitch,e)},e.prototype.live=function(e){angular.extend(this.SatellizerConfig.providers.live,e)},e.prototype.yahoo=function(e){angular.extend(this.SatellizerConfig.providers.yahoo,e)},e.prototype.bitbucket=function(e){angular.extend(this.SatellizerConfig.providers.bitbucket,e)},e.prototype.spotify=function(e){angular.extend(this.SatellizerConfig.providers.spotify,e)},e.prototype.oauth1=function(e){this.SatellizerConfig.providers[e.name]=angular.extend(e,{oauthType:"1.0"})},e.prototype.oauth2=function(e){this.SatellizerConfig.providers[e.name]=angular.extend(e,{oauthType:"2.0"})},e.prototype.$get=function(e,t,n){return{login:function(e,n){return t.login(e,n)},signup:function(e,n){return t.signup(e,n)},logout:function(){return e.logout()},authenticate:function(e,t){return n.authenticate(e,t)},link:function(e,t){return n.authenticate(e,t)},unlink:function(e,t){return n.unlink(e,t)},isAuthenticated:function(){return e.isAuthenticated()},getPayload:function(){return e.getPayload()},getToken:function(){return e.getToken()},setToken:function(t){return e.setToken({access_token:t})},removeToken:function(){return e.removeToken()},setStorageType:function(t){return e.setStorageType(t)}}},e.$inject=["SatellizerConfig"],e}();o.prototype.$get.$inject=["SatellizerShared","SatellizerLocal","SatellizerOAuth"];var a=function(){function e(e,t,n,r){this.$q=e,this.$window=t,this.SatellizerConfig=n,this.SatellizerStorage=r;var i=this.SatellizerConfig,o=i.tokenName,a=i.tokenPrefix;this.prefixedTokenName=a?[a,o].join("_"):o}return e.prototype.getToken=function(){return this.SatellizerStorage.get(this.prefixedTokenName)},e.prototype.getPayload=function(){var e=this.SatellizerStorage.get(this.prefixedTokenName);if(e&&3===e.split(".").length)try{var t=e.split(".")[1],n=t.replace("-","+").replace("_","/");return JSON.parse(r(n))}catch(e){}},e.prototype.setToken=function(e){var t,n=this.SatellizerConfig.tokenRoot,r=this.SatellizerConfig.tokenName,i=e&&e.access_token;if(i&&(angular.isObject(i)&&angular.isObject(i.data)?e=i:angular.isString(i)&&(t=i)),!t&&e){var o=n&&n.split(".").reduce(function(e,t){return e[t]},e.data);t=o?o[r]:e.data&&e.data[r]}t&&this.SatellizerStorage.set(this.prefixedTokenName,t)},e.prototype.removeToken=function(){this.SatellizerStorage.remove(this.prefixedTokenName)},e.prototype.isAuthenticated=function(){var e=this.SatellizerStorage.get(this.prefixedTokenName);if(e){if(3===e.split(".").length)try{var t=e.split(".")[1],n=t.replace("-","+").replace("_","/"),r=JSON.parse(this.$window.atob(n)).exp;if("number"==typeof r)return Math.round((new Date).getTime()/1e3)<r}catch(e){return!0}return!0}return!1},e.prototype.logout=function(){return this.SatellizerStorage.remove(this.prefixedTokenName),this.$q.when()},e.prototype.setStorageType=function(e){this.SatellizerConfig.storageType=e},e.$inject=["$q","$window","SatellizerConfig","SatellizerStorage"],e}(),s=function(){function t(e,t,n){this.$http=e,this.SatellizerConfig=t,this.SatellizerShared=n}return t.prototype.login=function(t,n){var r=this;return void 0===n&&(n={}),n.url=n.url?n.url:e(this.SatellizerConfig.baseUrl,this.SatellizerConfig.loginUrl),n.data=t||n.data,n.method=n.method||"POST",n.withCredentials=n.withCredentials||this.SatellizerConfig.withCredentials,this.$http(n).then(function(e){return r.SatellizerShared.setToken(e),e})},t.prototype.signup=function(t,n){return void 0===n&&(n={}),n.url=n.url?n.url:e(this.SatellizerConfig.baseUrl,this.SatellizerConfig.signupUrl),n.data=t||n.data,n.method=n.method||"POST",n.withCredentials=n.withCredentials||this.SatellizerConfig.withCredentials,this.$http(n)},t.$inject=["$http","SatellizerConfig","SatellizerShared"],t}(),u=function(){function e(e,t,n){this.$interval=e,this.$window=t,this.$q=n,this.popup=null,this.defaults={redirectUri:null}}return e.prototype.stringifyOptions=function(e){var t=[];return angular.forEach(e,function(e,n){t.push(n+"="+e)}),t.join(",")},e.prototype.open=function(e,t,n,r,i){var o=n.width||500,a=n.height||500,s=this.stringifyOptions({width:o,height:a,top:this.$window.screenY+(this.$window.outerHeight-a)/2.5,left:this.$window.screenX+(this.$window.outerWidth-o)/2}),u=this.$window.cordova||this.$window.navigator.userAgent.indexOf("CriOS")>-1?"_blank":t;if(this.popup=this.$window.open(e,u,s),this.popup&&this.popup.focus&&this.popup.focus(),!i)return this.$window.cordova?this.eventListener(r):("about:blank"===e&&(this.popup.location=e),this.polling(r))},e.prototype.polling=function(e){var r=this;return this.$q(function(i,o){var a=document.createElement("a");a.href=e;var s=t(a),u=r.$interval(function(){r.popup&&!r.popup.closed&&void 0!==r.popup.closed||(r.$interval.cancel(u),o(new Error("The popup window was closed")));try{if(t(r.popup.location)===s){if(r.popup.location.search||r.popup.location.hash){var e=n(r.popup.location.search.substring(1).replace(/\/$/,"")),a=n(r.popup.location.hash.substring(1).replace(/[\/$]/,"")),l=angular.extend({},e,a);l.error?o(new Error(l.error)):i(l)}else o(new Error("OAuth redirect has occurred but no query or hash parameters were found. They were either not set during the redirect, or were removed—typically by a routing library—before Satellizer could read it."));r.$interval.cancel(u),r.popup.close()}}catch(e){}},500)})},e.prototype.eventListener=function(e){var t=this;return this.$q(function(r,i){t.popup.addEventListener("loadstart",function(o){if(0===o.url.indexOf(e)){var a=document.createElement("a");if(a.href=o.url,a.search||a.hash){var s=n(a.search.substring(1).replace(/\/$/,"")),u=n(a.hash.substring(1).replace(/[\/$]/,"")),l=angular.extend({},s,u);l.error?i(new Error(l.error)):r(l),t.popup.close()}}}),t.popup.addEventListener("loaderror",function(){i(new Error("Authorization failed"))}),t.popup.addEventListener("exit",function(){i(new Error("The popup window was closed"))})})},e.$inject=["$interval","$window","$q"],e}(),l=function(){function t(e,t,n,r){this.$http=e,this.$window=t,this.SatellizerConfig=n,this.SatellizerPopup=r,this.defaults={name:null,url:null,authorizationEndpoint:null,scope:null,scopePrefix:null,scopeDelimiter:null,redirectUri:null,requiredUrlParams:null,defaultUrlParams:null,oauthType:"1.0",popupOptions:{width:null,height:null}}}return t.prototype.init=function(e,t){var n=this;angular.extend(this.defaults,e);var r=e.name,i=e.popupOptions,o=this.defaults.redirectUri;return this.$window.cordova||this.SatellizerPopup.open("about:blank",r,i,o,!0),this.getRequestToken().then(function(r){return n.openPopup(e,r).then(function(e){return n.exchangeForToken(e,t)})})},t.prototype.openPopup=function(e,t){var n=[e.authorizationEndpoint,this.buildQueryString(t.data)].join("?"),r=this.defaults.redirectUri;return this.$window.cordova?this.SatellizerPopup.open(n,e.name,e.popupOptions,r):(this.SatellizerPopup.popup.location=n,this.SatellizerPopup.polling(r))},t.prototype.getRequestToken=function(){var t=this.SatellizerConfig.baseUrl?e(this.SatellizerConfig.baseUrl,this.defaults.url):this.defaults.url;return this.$http.post(t,this.defaults)},t.prototype.exchangeForToken=function(t,n){var r=angular.extend({},n,t),i=this.SatellizerConfig.baseUrl?e(this.SatellizerConfig.baseUrl,this.defaults.url):this.defaults.url;return this.$http.post(i,r,{withCredentials:this.SatellizerConfig.withCredentials})},t.prototype.buildQueryString=function(e){var t=[];return angular.forEach(e,function(e,n){t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))}),t.join("&")},t.$inject=["$http","$window","SatellizerConfig","SatellizerPopup"],t}(),c=function(){function t(e,t,n,r,i,o,a){this.$http=e,this.$window=t,this.$timeout=n,this.$q=r,this.SatellizerConfig=i,this.SatellizerPopup=o,this.SatellizerStorage=a,this.defaults={name:null,url:null,clientId:null,authorizationEndpoint:null,redirectUri:null,scope:null,scopePrefix:null,scopeDelimiter:null,state:null,requiredUrlParams:null,defaultUrlParams:["response_type","client_id","redirect_uri"],responseType:"code",responseParams:{code:"code",clientId:"clientId",redirectUri:"redirectUri"},oauthType:"2.0",popupOptions:{width:null,height:null}}}return t.camelCase=function(e){return e.replace(/([\:\-\_]+(.))/g,function(e,t,n,r){return r?n.toUpperCase():n})},t.prototype.init=function(e,t){var n=this;return this.$q(function(r,i){angular.extend(n.defaults,e);var o=n.defaults.name+"_state",a=n.defaults,s=a.name,u=a.state,l=a.popupOptions,c=a.redirectUri,p=a.responseType;"function"==typeof u?n.SatellizerStorage.set(o,u()):"string"==typeof u&&n.SatellizerStorage.set(o,u);var d=[n.defaults.authorizationEndpoint,n.buildQueryString()].join("?");n.SatellizerPopup.open(d,s,l,c).then(function(e){return"token"!==p&&d?e.state&&e.state!==n.SatellizerStorage.get(o)?i(new Error("The value returned in the state parameter does not match the state value from your original authorization code request.")):void r(n.exchangeForToken(e,t)):r(e)}).catch(function(e){return i(e)})})},t.prototype.exchangeForToken=function(t,n){var r=this,i=angular.extend({},n);angular.forEach(this.defaults.responseParams,function(e,n){switch(n){case"code":i[e]=t.code;break;case"clientId":i[e]=r.defaults.clientId;break;case"redirectUri":i[e]=r.defaults.redirectUri;break;default:i[e]=t[n]}}),t.state&&(i.state=t.state);var o=this.SatellizerConfig.baseUrl?e(this.SatellizerConfig.baseUrl,this.defaults.url):this.defaults.url;return this.$http.post(o,i,{withCredentials:this.SatellizerConfig.withCredentials})},t.prototype.buildQueryString=function(){var e=this,n=[],r=["defaultUrlParams","requiredUrlParams","optionalUrlParams"];return angular.forEach(r,function(r){angular.forEach(e.defaults[r],function(r){var i=t.camelCase(r),o=angular.isFunction(e.defaults[r])?e.defaults[r]():e.defaults[i];if("redirect_uri"!==r||o){if("state"===r){var a=e.defaults.name+"_state";o=encodeURIComponent(e.SatellizerStorage.get(a))}"scope"===r&&Array.isArray(o)&&(o=o.join(e.defaults.scopeDelimiter),e.defaults.scopePrefix&&(o=[e.defaults.scopePrefix,o].join(e.defaults.scopeDelimiter))),n.push([r,o])}})}),n.map(function(e){return e.join("=")}).join("&")},t.$inject=["$http","$window","$timeout","$q","SatellizerConfig","SatellizerPopup","SatellizerStorage"],t}(),p=function(){function t(e,t,n,r,i,o,a,s,u,l){this.$http=e,this.$window=t,this.$timeout=n,this.$q=r,this.SatellizerConfig=i,this.SatellizerPopup=o,this.SatellizerStorage=a,this.SatellizerShared=s,this.SatellizerOAuth1=u,this.SatellizerOAuth2=l}return t.prototype.authenticate=function(e,t){var n=this;return this.$q(function(r,i){var o=n.SatellizerConfig.providers[e],a=null;switch(o.oauthType){case"1.0":a=new l(n.$http,n.$window,n.SatellizerConfig,n.SatellizerPopup);break;case"2.0":a=new c(n.$http,n.$window,n.$timeout,n.$q,n.SatellizerConfig,n.SatellizerPopup,n.SatellizerStorage);break;default:return i(new Error("Invalid OAuth Type"))}return a.init(o,t).then(function(e){o.url&&n.SatellizerShared.setToken(e),r(e)}).catch(function(e){i(e)})})},t.prototype.unlink=function(t,n){return void 0===n&&(n={}),n.url=n.url?n.url:e(this.SatellizerConfig.baseUrl,this.SatellizerConfig.unlinkUrl),n.data={provider:t}||n.data,n.method=n.method||"POST",n.withCredentials=n.withCredentials||this.SatellizerConfig.withCredentials,this.$http(n)},t.$inject=["$http","$window","$timeout","$q","SatellizerConfig","SatellizerPopup","SatellizerStorage","SatellizerShared","SatellizerOAuth1","SatellizerOAuth2"],t}(),d=function(){function e(e,t){this.$window=e,this.SatellizerConfig=t,this.memoryStore={}}return e.prototype.get=function(e){try{return this.$window[this.SatellizerConfig.storageType].getItem(e)}catch(t){return this.memoryStore[e]}},e.prototype.set=function(e,t){try{this.$window[this.SatellizerConfig.storageType].setItem(e,t)}catch(n){this.memoryStore[e]=t}},e.prototype.remove=function(e){try{this.$window[this.SatellizerConfig.storageType].removeItem(e)}catch(t){delete this.memoryStore[e]}},e.$inject=["$window","SatellizerConfig"],e}(),f=function(){function e(e,t,n){var r=this;this.SatellizerConfig=e,this.SatellizerShared=t,this.SatellizerStorage=n,this.request=function(e){if(e.skipAuthorization)return e;if(r.SatellizerShared.isAuthenticated()&&r.SatellizerConfig.httpInterceptor()){var t=r.SatellizerConfig.tokenPrefix?[r.SatellizerConfig.tokenPrefix,r.SatellizerConfig.tokenName].join("_"):r.SatellizerConfig.tokenName,n=r.SatellizerStorage.get(t);r.SatellizerConfig.tokenHeader&&r.SatellizerConfig.tokenType&&(n=r.SatellizerConfig.tokenType+" "+n),e.headers[r.SatellizerConfig.tokenHeader]=n}return e}}return e.Factory=function(t,n,r){return new e(t,n,r)},e.$inject=["SatellizerConfig","SatellizerShared","SatellizerStorage"],e}();f.Factory.$inject=["SatellizerConfig","SatellizerShared","SatellizerStorage"];var h=function(){function e(e){this.$httpProvider=e,e.interceptors.push(f.Factory)}return e.$inject=["$httpProvider"],e}();angular.module("satellizer",[]).provider("$auth",["SatellizerConfig",function(e){return new o(e)}]).constant("SatellizerConfig",i.getConstant).service("SatellizerShared",a).service("SatellizerLocal",s).service("SatellizerPopup",u).service("SatellizerOAuth",p).service("SatellizerOAuth2",c).service("SatellizerOAuth1",l).service("SatellizerStorage",d).service("SatellizerInterceptor",f).config(["$httpProvider",function(e){return new h(e)}]);return"satellizer"}),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.multiMap","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(e,t,n,r){var i=r.has("$animateCss")?r.get("$animateCss"):null;return{link:function(r,o,a){function s(e){return g?{width:e.scrollWidth+"px"}:{height:e.scrollHeight+"px"}}function u(){o.hasClass("collapse")&&o.hasClass("in")||t.resolve(d(r)).then(function(){o.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),i?i(o,{addClass:"in",easing:"ease",css:{overflow:"hidden"},to:s(o[0])}).start().finally(l):e.addClass(o,"in",{css:{overflow:"hidden"},to:s(o[0])}).then(l)},angular.noop)}function l(){o.removeClass("collapsing").addClass("collapse").css($),f(r)}function c(){if(!o.hasClass("collapse")&&!o.hasClass("in"))return p();t.resolve(h(r)).then(function(){o.css(s(o[0])).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),i?i(o,{removeClass:"in",to:v}).start().finally(p):e.removeClass(o,"in",{to:v}).then(p)},angular.noop)}function p(){o.css(v),o.removeClass("collapsing").addClass("collapse"),m(r)}var d=n(a.expanding),f=n(a.expanded),h=n(a.collapsing),m=n(a.collapsed),g=!1,$={},v={};!function(){g=!!("horizontal"in a),g?($={width:""},v={width:"0"}):($={height:""},v={height:"0"}),r.$eval(a.uibCollapse)||o.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css($)}(),r.$watch(a.uibCollapse,function(e){e?c():u()})}}}]),angular.module("ui.bootstrap.tabindex",[]).directive("uibTabindexToggle",function(){return{restrict:"A",link:function(e,t,n){n.$observe("disabled",function(e){n.$set("tabindex",e?-1:null)})}}}),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse","ui.bootstrap.tabindex"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(r){(angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers)&&angular.forEach(this.groups,function(e){e!==r&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(n){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,r){t.addClass("panel"),r.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass||"panel-default",e.$watch("isOpen",function(n){t.toggleClass(e.openClass,!!n),n&&r.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)};var i="accordiongroup-"+e.$id+"-"+Math.floor(1e4*Math.random());e.headingId=i+"-tab",e.panelId=i+"-panel"}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(e,t,n,r,i){r.setHeading(i(e,angular.noop))}}}).directive("uibAccordionTransclude",function(){return{require:"^uibAccordionGroup",link:function(e,t,n,r){e.$watch(function(){return r[n.uibAccordionTransclude]},function(e){if(e){var n=angular.element(t[0].querySelector("uib-accordion-header,data-uib-accordion-header,x-uib-accordion-header,uib\\:accordion-header,[uib-accordion-header],[data-uib-accordion-header],[x-uib-accordion-header]"));n.html(""),n.append(e)}})}}}),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$element","$attrs","$interpolate","$timeout",function(e,t,n,r,i){e.closeable=!!n.close,t.addClass("alert"),n.$set("role","alert"),e.closeable&&t.addClass("alert-dismissible");var o=angular.isDefined(n.dismissOnTimeout)?r(n.dismissOnTimeout)(e.$parent):null;o&&i(function(){e.close()},parseInt(o,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/alert/alert.html"},transclude:!0,scope:{close:"&"}}}),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(e){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(t,n,r,i){var o=i[0],a=i[1],s=e(r.uibUncheckable);n.find("input").css({display:"none"}),a.$render=function(){n.toggleClass(o.activeClass,angular.equals(a.$modelValue,t.$eval(r.uibBtnRadio)))},n.on(o.toggleEvent,function(){if(!r.disabled){var e=n.hasClass(o.activeClass);e&&!angular.isDefined(r.uncheckable)||t.$apply(function(){a.$setViewValue(e?null:t.$eval(r.uibBtnRadio)),a.$render()})}}),r.uibUncheckable&&t.$watch(s,function(e){r.$set("uncheckable",e?"":void 0)})}}}]).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(e,t,n,r){function i(){return a(n.btnCheckboxTrue,!0)}function o(){return a(n.btnCheckboxFalse,!1)}function a(t,n){return angular.isDefined(t)?e.$eval(t):n}var s=r[0],u=r[1];t.find("input").css({display:"none"}),u.$render=function(){t.toggleClass(s.activeClass,angular.equals(u.$modelValue,i()))},t.on(s.toggleEvent,function(){n.disabled||e.$apply(function(){u.$setViewValue(t.hasClass(s.activeClass)?o():i()),u.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(e,t,n,r,i){function o(e){for(var t=0;t<m.length;t++)m[t].slide.active=t===e}function a(n,r,a){if(!v){if(angular.extend(n,{direction:a}),angular.extend(m[$].slide||{},{direction:a}),i.enabled(t)&&!e.$currentTransition&&m[r].element&&h.slides.length>1){m[r].element.data(g,n.direction);var s=h.getCurrentIndex();angular.isNumber(s)&&m[s].element&&m[s].element.data(g,n.direction),e.$currentTransition=!0,i.on("addClass",m[r].element,function(t,n){"close"===n&&(e.$currentTransition=null,i.off("addClass",t))})}e.active=n.index,$=n.index,o(r),c()}}function s(e){for(var t=0;t<m.length;t++)if(m[t].slide===e)return t}function u(){d&&(n.cancel(d),d=null)}function l(t){t.length||(e.$currentTransition=null)}function c(){u();var t=+e.interval;!isNaN(t)&&t>0&&(d=n(p,t))}function p(){var t=+e.interval;f&&!isNaN(t)&&t>0&&m.length?e.next():e.pause()}var d,f,h=this,m=h.slides=e.slides=[],g="uib-slideDirection",$=e.active,v=!1;t.addClass("carousel"),h.addSlide=function(t,n){m.push({slide:t,element:n}),m.sort(function(e,t){return+e.slide.index-+t.slide.index}),(t.index===e.active||1===m.length&&!angular.isNumber(e.active))&&(e.$currentTransition&&(e.$currentTransition=null),$=t.index,e.active=t.index,o($),h.select(m[s(t)]),1===m.length&&e.play())},h.getCurrentIndex=function(){for(var e=0;e<m.length;e++)if(m[e].slide.index===$)return e},h.next=e.next=function(){var t=(h.getCurrentIndex()+1)%m.length;return 0===t&&e.noWrap()?void e.pause():h.select(m[t],"next")},h.prev=e.prev=function(){var t=h.getCurrentIndex()-1<0?m.length-1:h.getCurrentIndex()-1;return e.noWrap()&&t===m.length-1?void e.pause():h.select(m[t],"prev")},h.removeSlide=function(t){var n=s(t);m.splice(n,1),m.length>0&&$===n?n>=m.length?($=m.length-1,e.active=$,o($),h.select(m[m.length-1])):($=n,e.active=$,o($),h.select(m[n])):$>n&&($--,e.active=$),0===m.length&&($=null,e.active=null)},h.select=e.select=function(t,n){var r=s(t.slide);void 0===n&&(n=r>h.getCurrentIndex()?"next":"prev"),t.slide.index===$||e.$currentTransition||a(t.slide,r,n)},e.indexOfSlide=function(e){return+e.slide.index},e.isActive=function(t){return e.active===t.slide.index},e.isPrevDisabled=function(){return 0===e.active&&e.noWrap()},e.isNextDisabled=function(){return e.active===m.length-1&&e.noWrap()},e.pause=function(){e.noPause||(f=!1,u())},e.play=function(){f||(f=!0,c())},t.on("mouseenter",e.pause),t.on("mouseleave",e.play),e.$on("$destroy",function(){v=!0,u()}),e.$watch("noTransition",function(e){i.enabled(t,!e)}),e.$watch("interval",c),e.$watchCollection("slides",l),e.$watch("active",function(e){if(angular.isNumber(e)&&$!==e){for(var t=0;t<m.length;t++)if(m[t].slide.index===e){e=t;break}m[e]&&(o(e),h.select(m[e]),$=e)}})}]).directive("uibCarousel",function(){return{transclude:!0,controller:"UibCarouselController",controllerAs:"carousel",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}).directive("uibSlide",["$animate",function(e){return{require:"^uibCarousel",restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(t,n,r,i){n.addClass("item"),i.addSlide(t,n),t.$on("$destroy",function(){i.removeSlide(t)}),t.$watch("active",function(t){e[t?"addClass":"removeClass"](n,"active")})}}}]).animation(".item",["$animateCss",function(e){function t(e,t,n){e.removeClass(t),n&&n()}return{beforeAddClass:function(n,r,i){if("active"===r){var o=!1,a=n.data("uib-slideDirection"),s="next"===a?"left":"right",u=t.bind(this,n,s+" "+a,i);return n.addClass(a),e(n,{addClass:s}).start().done(u),function(){o=!0}}i()},beforeRemoveClass:function(n,r,i){if("active"===r){var o=!1,a=n.data("uib-slideDirection"),s="next"===a?"left":"right",u=t.bind(this,n,s,i);return e(n,{addClass:s}).start().done(u),function(){o=!0}}i()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter","filterFilter",function(e,t,n,r,i){function o(e){return i(v,{key:e},!0)[0]}function a(e){var t=[],n=e.split(""),i=e.indexOf("'");if(i>-1){var o=!1;e=e.split("");for(var a=i;a<e.length;a++)o?("'"===e[a]&&(a+1<e.length&&"'"===e[a+1]?(e[a+1]="$",n[a+1]=""):(n[a]="",o=!1)),e[a]="$"):"'"===e[a]&&(e[a]="$",n[a]="",o=!0);e=e.join("")}return angular.forEach(v,function(r){var i=e.indexOf(r.key);if(i>-1){e=e.split(""),n[i]="("+r.regex+")",e[i]="$";for(var o=i+1,a=i+r.key.length;o<a;o++)n[o]="",e[o]="$";e=e.join(""),t.push({index:i,key:r.key,apply:r.apply,matcher:r.regex})}}),{regex:new RegExp("^"+n.join("")+"$"),map:r(t,"index")}}function s(e){for(var t,n,r=[],i=0;i<e.length;)if(angular.isNumber(n)){if("'"===e.charAt(i))(i+1>=e.length||"'"!==e.charAt(i+1))&&(r.push(u(e,n,i)),n=null);else if(i===e.length)for(;n<e.length;)t=l(e,n),r.push(t),n=t.endIdx;i++}else"'"!==e.charAt(i)?(t=l(e,i),r.push(t.parser),i=t.endIdx):(n=i,i++);return r}function u(e,t,n){return function(){return e.substr(t+1,n-t-1)}}function l(e,t){for(var n=e.substr(t),r=0;r<v.length;r++)if(new RegExp("^"+v[r].key).test(n)){var i=v[r];return{endIdx:t+i.key.length,parser:i.formatter}}return{endIdx:t+1,parser:function(){return n.charAt(0)}}}function c(e,t,n){return!(n<1)&&(1===t&&n>28?29===n&&(e%4==0&&e%100!=0||e%400==0):3!==t&&5!==t&&8!==t&&10!==t||n<31)}function p(e){return parseInt(e,10)}function d(e,t){return e&&t?g(e,t):e}function f(e,t){return e&&t?g(e,t,!0):e}function h(e,t){e=e.replace(/:/g,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function m(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function g(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return m(e,n*(h(t,r)-r))}var $,v,b=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.init=function(){$=t.id,this.parsers={},this.formatters={},v=[{key:"yyyy",regex:"\\d{4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(e){e=+e,this.year=e<69?e+2e3:e+1900},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return/^[0-9]$/.test(e.getMonth())?n(e,"MM"):n(e,"M")}},{key:"MMMM",regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)},formatter:function(e){return n(e,"MMMM")}},{key:"MMM",regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)},formatter:function(e){return n(e,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){
return/^[1-9]$/.test(e.getDate())?n(e,"dd"):n(e,"d")}},{key:"dd",regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"d")}},{key:"EEEE",regex:t.DATETIME_FORMATS.DAY.join("|"),formatter:function(e){return n(e,"EEEE")}},{key:"EEE",regex:t.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(e){return n(e,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e},formatter:function(e){return n(e,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"s")}},{key:"a",regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)},formatter:function(e){return n(e,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(e){var t=e.match(/([+-])(\d{2})(\d{2})/),n=t[1],r=t[2],i=t[3];this.hours+=p(n+r),this.minutes+=p(n+i)},formatter:function(e){return n(e,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(e){return n(e,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(e){return n(e,"w")}},{key:"GGGG",regex:t.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(e){return n(e,"GGGG")}},{key:"GGG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GGG")}},{key:"GG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GG")}},{key:"G",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"G")}}],angular.version.major>=1&&angular.version.minor>4&&v.push({key:"LLLL",regex:t.DATETIME_FORMATS.STANDALONEMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.STANDALONEMONTH.indexOf(e)},formatter:function(e){return n(e,"LLLL")}})},this.init(),this.getParser=function(e){var t=o(e);return t&&t.apply||null},this.overrideParser=function(e,t){var n=o(e);n&&angular.isFunction(t)&&(this.parsers={},n.apply=t)}.bind(this),this.filter=function(e,n){return angular.isDate(e)&&!isNaN(e)&&n?(n=t.DATETIME_FORMATS[n]||n,t.id!==$&&this.init(),this.formatters[n]||(this.formatters[n]=s(n)),this.formatters[n].reduce(function(t,n){return t+n(e)},"")):""},this.parse=function(n,r,i){if(!angular.isString(n)||!r)return n;r=t.DATETIME_FORMATS[r]||r,r=r.replace(b,"\\$&"),t.id!==$&&this.init(),this.parsers[r]||(this.parsers[r]=a(r));var o=this.parsers[r],s=o.regex,u=o.map,l=n.match(s),p=!1;if(l&&l.length){var d,f;angular.isDate(i)&&!isNaN(i.getTime())?d={year:i.getFullYear(),month:i.getMonth(),date:i.getDate(),hours:i.getHours(),minutes:i.getMinutes(),seconds:i.getSeconds(),milliseconds:i.getMilliseconds()}:(i&&e.warn("dateparser:","baseDate is not a valid date"),d={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var h=1,m=l.length;h<m;h++){var g=u[h-1];"Z"===g.matcher&&(p=!0),g.apply&&g.apply.call(d,l[h])}var v=p?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,y=p?Date.prototype.setUTCHours:Date.prototype.setHours;return c(d.year,d.month,d.date)&&(!angular.isDate(i)||isNaN(i.getTime())||p?(f=new Date(0),v.call(f,d.year,d.month,d.date),y.call(f,d.hours||0,d.minutes||0,d.seconds||0,d.milliseconds||0)):(f=new Date(i),v.call(f,d.year,d.month,d.date),y.call(f,d.hours,d.minutes,d.seconds,d.milliseconds))),f}},this.toTimezone=d,this.fromTimezone=f,this.timezoneToOffset=h,this.addDateMinutes=m,this.convertTimezoneToLocal=g}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(e){var t=/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,n=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(r,i){function o(e,t,n){u.push(e),l.push({scope:e,element:t}),h.forEach(function(t,n){a(t,e)}),e.$on("$destroy",s)}function a(t,r){var i=t.match(n),o=r.$eval(i[1]),a=i[2],s=c[t];if(!s){var u=function(t){var n=null;l.some(function(e){if(e.scope.$eval(d)===t)return n=e,!0}),s.lastActivated!==n&&(s.lastActivated&&e.removeClass(s.lastActivated.element,o),n&&e.addClass(n.element,o),s.lastActivated=n)};c[t]=s={lastActivated:null,scope:r,watchFn:u,compareWithExp:a,watcher:r.$watch(a,u)}}s.watchFn(r.$eval(a))}function s(e){var t=e.targetScope,n=u.indexOf(t);if(u.splice(n,1),l.splice(n,1),u.length){var r=u[0];angular.forEach(c,function(e){e.scope===t&&(e.watcher=r.$watch(e.compareWithExp,e.watchFn),e.scope=r)})}else c={}}var u=[],l=[],c={},p=i.uibIsClass.match(t),d=p[2],f=p[1],h=f.split(",");return o}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass"]).value("$datepickerSuppressError",!1).value("$datepickerLiteralWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",monthColumns:3,ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$element","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerLiteralWarning","$datepickerSuppressError","uibDateParser",function(e,t,n,r,i,o,a,s,u,l,c,p){function d(t){e.datepickerMode=t,e.datepickerOptions.datepickerMode=t}function f(t){var n;if(angular.version.minor<6)n=t.$options||e.datepickerOptions.ngModelOptions||u.ngModelOptions||{},n.getOption=function(e){return n[e]};else{var r=t.$options.getOption("timezone")||(e.datepickerOptions.ngModelOptions?e.datepickerOptions.ngModelOptions.timezone:null)||(u.ngModelOptions?u.ngModelOptions.timezone:null);n=t.$options.createChild(u.ngModelOptions).createChild(e.datepickerOptions.ngModelOptions).createChild(t.$options).createChild({timezone:r})}return n}var h=this,m={$setViewValue:angular.noop},g={},$=[];t.addClass("uib-datepicker"),n.$set("role","application"),e.datepickerOptions||(e.datepickerOptions={}),this.modes=["day","month","year"],["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","maxDate","maxMode","minDate","minMode","monthColumns","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach(function(t){switch(t){case"customClass":case"dateDisabled":e[t]=e.datepickerOptions[t]||angular.noop;break;case"datepickerMode":e.datepickerMode=angular.isDefined(e.datepickerOptions.datepickerMode)?e.datepickerOptions.datepickerMode:u.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":h[t]=angular.isDefined(e.datepickerOptions[t])?i(e.datepickerOptions[t])(e.$parent):u[t];break;case"monthColumns":case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":h[t]=angular.isDefined(e.datepickerOptions[t])?e.datepickerOptions[t]:u[t];break;case"startingDay":angular.isDefined(e.datepickerOptions.startingDay)?h.startingDay=e.datepickerOptions.startingDay:angular.isNumber(u.startingDay)?h.startingDay=u.startingDay:h.startingDay=(o.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":e.$watch("datepickerOptions."+t,function(e){e?angular.isDate(e)?h[t]=p.fromTimezone(new Date(e),g.getOption("timezone")):(l&&a.warn("Literal date support has been deprecated, please switch to date object usage"),h[t]=new Date(s(e,"medium"))):h[t]=u[t]?p.fromTimezone(new Date(u[t]),g.getOption("timezone")):null,h.refreshView()});break;case"maxMode":case"minMode":e.datepickerOptions[t]?e.$watch(function(){return e.datepickerOptions[t]},function(n){h[t]=e[t]=angular.isDefined(n)?n:e.datepickerOptions[t],("minMode"===t&&h.modes.indexOf(e.datepickerOptions.datepickerMode)<h.modes.indexOf(h[t])||"maxMode"===t&&h.modes.indexOf(e.datepickerOptions.datepickerMode)>h.modes.indexOf(h[t]))&&(e.datepickerMode=h[t],e.datepickerOptions.datepickerMode=h[t])}):h[t]=e[t]=u[t]||null}}),e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),e.disabled=angular.isDefined(n.disabled)||!1,angular.isDefined(n.ngDisabled)&&$.push(e.$parent.$watch(n.ngDisabled,function(t){e.disabled=t,h.refreshView()})),e.isActive=function(t){return 0===h.compare(t.date,h.activeDate)&&(e.activeDateId=t.uid,!0)},this.init=function(t){m=t,g=f(m),e.datepickerOptions.initDate?(h.activeDate=p.fromTimezone(e.datepickerOptions.initDate,g.getOption("timezone"))||new Date,e.$watch("datepickerOptions.initDate",function(e){e&&(m.$isEmpty(m.$modelValue)||m.$invalid)&&(h.activeDate=p.fromTimezone(e,g.getOption("timezone")),h.refreshView())})):h.activeDate=new Date;var n=m.$modelValue?new Date(m.$modelValue):new Date;this.activeDate=isNaN(n)?p.fromTimezone(new Date,g.getOption("timezone")):p.fromTimezone(n,g.getOption("timezone")),m.$render=function(){h.render()}},this.render=function(){if(m.$viewValue){var e=new Date(m.$viewValue);!isNaN(e)?this.activeDate=p.fromTimezone(e,g.getOption("timezone")):c||a.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){e.selectedDt=null,this._refreshView(),e.activeDt&&(e.activeDateId=e.activeDt.uid);var t=m.$viewValue?new Date(m.$viewValue):null;t=p.fromTimezone(t,g.getOption("timezone")),m.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,n){var r=m.$viewValue?new Date(m.$viewValue):null;r=p.fromTimezone(r,g.getOption("timezone"));var i=new Date;i=p.fromTimezone(i,g.getOption("timezone"));var o=this.compare(t,i),a={date:t,label:p.filter(t,n),selected:r&&0===this.compare(t,r),disabled:this.isDisabled(t),past:o<0,current:0===o,future:o>0,customClass:this.customClass(t)||null};return r&&0===this.compare(t,r)&&(e.selectedDt=a),h.activeDate&&0===this.compare(a.date,h.activeDate)&&(e.activeDt=a),a},this.isDisabled=function(t){return e.disabled||this.minDate&&this.compare(t,this.minDate)<0||this.maxDate&&this.compare(t,this.maxDate)>0||e.dateDisabled&&e.dateDisabled({date:t,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===h.minMode){var n=m.$viewValue?p.fromTimezone(new Date(m.$viewValue),g.getOption("timezone")):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n=p.toTimezone(n,g.getOption("timezone")),m.$setViewValue(n),m.$render()}else h.activeDate=t,d(h.modes[h.modes.indexOf(e.datepickerMode)-1]),e.$emit("uib:datepicker.mode");e.$broadcast("uib:datepicker.focus")},e.move=function(e){var t=h.activeDate.getFullYear()+e*(h.step.years||0),n=h.activeDate.getMonth()+e*(h.step.months||0);h.activeDate.setFullYear(t,n,1),h.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===h.maxMode&&1===t||e.datepickerMode===h.minMode&&-1===t||(d(h.modes[h.modes.indexOf(e.datepickerMode)+t]),e.$emit("uib:datepicker.mode"))},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var v=function(){h.element[0].focus()};e.$on("uib:datepicker.focus",v),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey&&!e.disabled)if(t.preventDefault(),h.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(h.isDisabled(h.activeDate))return;e.select(h.activeDate)}else!t.ctrlKey||"up"!==n&&"down"!==n?(h.handleKeyDown(n,t),h.refreshView()):e.toggleMode("up"===n?1:-1)},t.on("keydown",function(t){e.$apply(function(){e.keydown(t)})}),e.$on("$destroy",function(){for(;$.length;)$.shift()()})}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(e,t,n){function r(e,t){return 1!==t||e%4!=0||e%100==0&&e%400!=0?o[t]:29}function i(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}var o=[31,28,31,30,31,30,31,31,30,31,30,31];this.step={months:1},this.element=t,this.init=function(t){angular.extend(t,this),e.showWeeks=t.showWeeks,t.refreshView()},this.getDates=function(e,t){for(var n,r=new Array(t),i=new Date(e),o=0;o<t;)n=new Date(i),r[o++]=n,i.setDate(i.getDate()+1);return r},this._refreshView=function(){var t=this.activeDate.getFullYear(),r=this.activeDate.getMonth(),o=new Date(this.activeDate);o.setFullYear(t,r,1);var a=this.startingDay-o.getDay(),s=a>0?7-a:-a,u=new Date(o);s>0&&u.setDate(1-s);for(var l=this.getDates(u,42),c=0;c<42;c++)l[c]=angular.extend(this.createDateObject(l[c],this.formatDay),{secondary:l[c].getMonth()!==r,uid:e.uniqueId+"-"+c});e.labels=new Array(7);for(var p=0;p<7;p++)e.labels[p]={abbr:n(l[p].date,this.formatDayHeader),full:n(l[p].date,"EEEE")};if(e.title=n(this.activeDate,this.formatDayTitle),e.rows=this.split(l,7),e.showWeeks){e.weekNumbers=[];for(var d=(11-this.startingDay)%7,f=e.rows.length,h=0;h<f;h++)e.weekNumbers.push(i(e.rows[h][d].date))}},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth(),e.getDate()),r=new Date(t.getFullYear(),t.getMonth(),t.getDate());return n.setFullYear(e.getFullYear()),r.setFullYear(t.getFullYear()),n-r},this.handleKeyDown=function(e,t){var n=this.activeDate.getDate();if("left"===e)n-=1;else if("up"===e)n-=7;else if("right"===e)n+=1;else if("down"===e)n+=7;else if("pageup"===e||"pagedown"===e){var i=this.activeDate.getMonth()+("pageup"===e?-1:1);this.activeDate.setMonth(i,1),n=Math.min(r(this.activeDate.getFullYear(),this.activeDate.getMonth()),n)}else"home"===e?n=1:"end"===e&&(n=r(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(n)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(e,t,n){this.step={years:1},this.element=t,this.init=function(e){angular.extend(e,this),e.refreshView()},this._refreshView=function(){for(var t,r=new Array(12),i=this.activeDate.getFullYear(),o=0;o<12;o++)t=new Date(this.activeDate),t.setFullYear(i,o,1),r[o]=angular.extend(this.createDateObject(t,this.formatMonth),{uid:e.uniqueId+"-"+o});e.title=n(this.activeDate,this.formatMonthTitle),e.rows=this.split(r,this.monthColumns),e.yearHeaderColspan=this.monthColumns>3?this.monthColumns-2:1},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth()),r=new Date(t.getFullYear(),t.getMonth());return n.setFullYear(e.getFullYear()),r.setFullYear(t.getFullYear()),n-r},this.handleKeyDown=function(e,t){var n=this.activeDate.getMonth();if("left"===e)n-=1;else if("up"===e)n-=this.monthColumns;else if("right"===e)n+=1;else if("down"===e)n+=this.monthColumns;else if("pageup"===e||"pagedown"===e){var r=this.activeDate.getFullYear()+("pageup"===e?-1:1);this.activeDate.setFullYear(r)}else"home"===e?n=0:"end"===e&&(n=11);this.activeDate.setMonth(n)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(e,t,n){function r(e){return parseInt((e-1)/o,10)*o+1}var i,o;this.element=t,this.yearpickerInit=function(){i=this.yearColumns,o=this.yearRows*i,this.step={years:o}},this._refreshView=function(){for(var t,n=new Array(o),a=0,s=r(this.activeDate.getFullYear());a<o;a++)t=new Date(this.activeDate),t.setFullYear(s+a,0,1),n[a]=angular.extend(this.createDateObject(t,this.formatYear),{uid:e.uniqueId+"-"+a});e.title=[n[0].label,n[o-1].label].join(" - "),e.rows=this.split(n,i),e.columns=i},this.compare=function(e,t){return e.getFullYear()-t.getFullYear()},this.handleKeyDown=function(e,t){var n=this.activeDate.getFullYear();"left"===e?n-=1:"up"===e?n-=i:"right"===e?n+=1:"down"===e?n+=i:"pageup"===e||"pagedown"===e?n+=("pageup"===e?-1:1)*o:"home"===e?n=r(this.activeDate.getFullYear()):"end"===e&&(n=r(this.activeDate.getFullYear())+o-1),this.activeDate.setFullYear(n)}}]).directive("uibDatepicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerOptions:"=?"},require:["uibDatepicker","^ngModel"],restrict:"A",controller:"UibDatepickerController",controllerAs:"datepicker",link:function(e,t,n,r){var i=r[0],o=r[1];i.init(o)}}}).directive("uibDaypicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],restrict:"A",controller:"UibDaypickerController",link:function(e,t,n,r){var i=r[0];r[1].init(i)}}}).directive("uibMonthpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],restrict:"A",controller:"UibMonthpickerController",link:function(e,t,n,r){var i=r[0];r[1].init(i)}}}).directive("uibYearpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],restrict:"A",controller:"UibYearpickerController",link:function(e,t,n,r){var i=r[0];angular.extend(i,r[1]),i.yearpickerInit(),i.refreshView()}}}),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(e,t){var n,r,i={normal:/(auto|scroll)/,hidden:/(auto|scroll|hidden)/},o={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/},a=/(HTML|BODY)/;return{getRawNode:function(e){return e.nodeName?e:e[0]||e},parseStyle:function(e){return e=parseFloat(e),isFinite(e)?e:0},offsetParent:function(n){n=this.getRawNode(n);for(var r=n.offsetParent||e[0].documentElement;r&&r!==e[0].documentElement&&function(e){return"static"===(t.getComputedStyle(e).position||"static")}(r);)r=r.offsetParent;return r||e[0].documentElement},scrollbarWidth:function(i){if(i){if(angular.isUndefined(r)){var o=e.find("body");o.addClass("uib-position-body-scrollbar-measure"),r=t.innerWidth-o[0].clientWidth,r=isFinite(r)?r:0,o.removeClass("uib-position-body-scrollbar-measure")}return r}if(angular.isUndefined(n)){var a=angular.element('<div class="uib-position-scrollbar-measure"></div>');e.find("body").append(a),n=a[0].offsetWidth-a[0].clientWidth,n=isFinite(n)?n:0,a.remove()}return n},scrollbarPadding:function(e){e=this.getRawNode(e);var n=t.getComputedStyle(e),r=this.parseStyle(n.paddingRight),i=this.parseStyle(n.paddingBottom),o=this.scrollParent(e,!1,!0),s=this.scrollbarWidth(a.test(o.tagName));return{scrollbarWidth:s,widthOverflow:o.scrollWidth>o.clientWidth,right:r+s,originalRight:r,heightOverflow:o.scrollHeight>o.clientHeight,bottom:i+s,originalBottom:i}},isScrollable:function(e,n){e=this.getRawNode(e);var r=n?i.hidden:i.normal,o=t.getComputedStyle(e);return r.test(o.overflow+o.overflowY+o.overflowX)},scrollParent:function(n,r,o){n=this.getRawNode(n);var a=r?i.hidden:i.normal,s=e[0].documentElement,u=t.getComputedStyle(n);if(o&&a.test(u.overflow+u.overflowY+u.overflowX))return n;var l="absolute"===u.position,c=n.parentElement||s;if(c===s||"fixed"===u.position)return s;for(;c.parentElement&&c!==s;){var p=t.getComputedStyle(c);if(l&&"static"!==p.position&&(l=!1),!l&&a.test(p.overflow+p.overflowY+p.overflowX))break;c=c.parentElement}return c},position:function(n,r){n=this.getRawNode(n);var i=this.offset(n);if(r){var o=t.getComputedStyle(n);i.top-=this.parseStyle(o.marginTop),i.left-=this.parseStyle(o.marginLeft)}var a=this.offsetParent(n),s={top:0,left:0};return a!==e[0].documentElement&&(s=this.offset(a),s.top+=a.clientTop-a.scrollTop,s.left+=a.clientLeft-a.scrollLeft),{width:Math.round(angular.isNumber(i.width)?i.width:n.offsetWidth),height:Math.round(angular.isNumber(i.height)?i.height:n.offsetHeight),top:Math.round(i.top-s.top),left:Math.round(i.left-s.left)}},offset:function(n){n=this.getRawNode(n);var r=n.getBoundingClientRect();return{width:Math.round(angular.isNumber(r.width)?r.width:n.offsetWidth),height:Math.round(angular.isNumber(r.height)?r.height:n.offsetHeight),top:Math.round(r.top+(t.pageYOffset||e[0].documentElement.scrollTop)),left:Math.round(r.left+(t.pageXOffset||e[0].documentElement.scrollLeft))}},viewportOffset:function(n,r,i){n=this.getRawNode(n),i=!1!==i;var o=n.getBoundingClientRect(),a={top:0,left:0,bottom:0,right:0},s=r?e[0].documentElement:this.scrollParent(n),u=s.getBoundingClientRect();if(a.top=u.top+s.clientTop,a.left=u.left+s.clientLeft,s===e[0].documentElement&&(a.top+=t.pageYOffset,a.left+=t.pageXOffset),a.bottom=a.top+s.clientHeight,a.right=a.left+s.clientWidth,i){var l=t.getComputedStyle(s);a.top+=this.parseStyle(l.paddingTop),a.bottom-=this.parseStyle(l.paddingBottom),a.left+=this.parseStyle(l.paddingLeft),a.right-=this.parseStyle(l.paddingRight)}return{top:Math.round(o.top-a.top),bottom:Math.round(a.bottom-o.bottom),left:Math.round(o.left-a.left),right:Math.round(a.right-o.right)}},parsePlacement:function(e){var t=o.auto.test(e);return t&&(e=e.replace(o.auto,"")),e=e.split("-"),e[0]=e[0]||"top",o.primary.test(e[0])||(e[0]="top"),e[1]=e[1]||"center",o.secondary.test(e[1])||(e[1]="center"),e[2]=!!t,e},positionElements:function(e,n,r,i){e=this.getRawNode(e),n=this.getRawNode(n);var a=angular.isDefined(n.offsetWidth)?n.offsetWidth:n.prop("offsetWidth"),s=angular.isDefined(n.offsetHeight)?n.offsetHeight:n.prop("offsetHeight");r=this.parsePlacement(r);var u=i?this.offset(e):this.position(e),l={top:0,left:0,placement:""};if(r[2]){var c=this.viewportOffset(e,i),p=t.getComputedStyle(n),d={width:a+Math.round(Math.abs(this.parseStyle(p.marginLeft)+this.parseStyle(p.marginRight))),height:s+Math.round(Math.abs(this.parseStyle(p.marginTop)+this.parseStyle(p.marginBottom)))};if(r[0]="top"===r[0]&&d.height>c.top&&d.height<=c.bottom?"bottom":"bottom"===r[0]&&d.height>c.bottom&&d.height<=c.top?"top":"left"===r[0]&&d.width>c.left&&d.width<=c.right?"right":"right"===r[0]&&d.width>c.right&&d.width<=c.left?"left":r[0],r[1]="top"===r[1]&&d.height-u.height>c.bottom&&d.height-u.height<=c.top?"bottom":"bottom"===r[1]&&d.height-u.height>c.top&&d.height-u.height<=c.bottom?"top":"left"===r[1]&&d.width-u.width>c.right&&d.width-u.width<=c.left?"right":"right"===r[1]&&d.width-u.width>c.left&&d.width-u.width<=c.right?"left":r[1],"center"===r[1])if(o.vertical.test(r[0])){var f=u.width/2-a/2;c.left+f<0&&d.width-u.width<=c.right?r[1]="left":c.right+f<0&&d.width-u.width<=c.left&&(r[1]="right")}else{var h=u.height/2-d.height/2;c.top+h<0&&d.height-u.height<=c.bottom?r[1]="top":c.bottom+h<0&&d.height-u.height<=c.top&&(r[1]="bottom")}}switch(r[0]){case"top":l.top=u.top-s;break;case"bottom":l.top=u.top+u.height;break;case"left":l.left=u.left-a;break;case"right":l.left=u.left+u.width}switch(r[1]){case"top":l.top=u.top;break;case"bottom":l.top=u.top+u.height-s;break;case"left":l.left=u.left;break;case"right":l.left=u.left+u.width-a;break;case"center":o.vertical.test(r[0])?l.left=u.left+u.width/2-a/2:l.top=u.top+u.height/2-s/2}return l.top=Math.round(l.top),l.left=Math.round(l.left),l.placement="center"===r[1]?r[0]:r[0]+"-"+r[1],l},adjustTop:function(e,t,n,r){if(-1!==e.indexOf("top")&&n!==r)return{top:t.top-r+"px"}},positionArrow:function(e,n){e=this.getRawNode(e);var r=e.querySelector(".tooltip-inner, .popover-inner");if(r){var i=angular.element(r).hasClass("tooltip-inner"),a=i?e.querySelector(".tooltip-arrow"):e.querySelector(".arrow");if(a){var s={top:"",bottom:"",left:"",right:""};if(n=this.parsePlacement(n),"center"===n[1])return void angular.element(a).css(s);var u="border-"+n[0]+"-width",l=t.getComputedStyle(a)[u],c="border-";o.vertical.test(n[0])?c+=n[0]+"-"+n[1]:c+=n[1]+"-"+n[0],c+="-radius";var p=t.getComputedStyle(i?r:e)[c];switch(n[0]){case"top":s.bottom=i?"0":"-"+l;break;case"bottom":s.top=i?"0":"-"+l;break;case"left":s.right=i?"0":"-"+l;break;case"right":s.left=i?"0":"-"+l}s[n[1]]=p,angular.element(a).css(s)}}}}}]),angular.module("ui.bootstrap.datepickerPopup",["ui.bootstrap.datepicker","ui.bootstrap.position"]).value("$datepickerPopupLiteralWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepickerPopup/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","$datepickerPopupLiteralWarning",function(e,t,n,r,i,o,a,s,u,l,c,p,d,f,h,m){function g(t){var n=p.parse(t,C,e.date);if(isNaN(n))for(var r=0;r<U.length;r++)if(n=p.parse(t,U[r],e.date),!isNaN(n))return n;return n}function $(e){if(angular.isNumber(e)&&(e=new Date(e)),!e)return null;if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=g(e);if(!isNaN(t))return p.toTimezone(t,I.getOption("timezone"))}return I.getOption("allowInvalid")?e:void 0}function v(e,t){var r=e||t;return!n.ngRequired&&!r||(angular.isNumber(r)&&(r=new Date(r)),!r||(!(!angular.isDate(r)||isNaN(r))||!!angular.isString(r)&&!isNaN(g(r))))}function b(n){if(e.isOpen||!e.disabled){var r=N[0],i=t[0].contains(n.target),o=void 0!==r.contains&&r.contains(n.target);!e.isOpen||i||o||e.$apply(function(){e.isOpen=!1})}}function y(n){27===n.which&&e.isOpen?(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!1}),t[0].focus()):40!==n.which||e.isOpen||(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!0}))}function w(){if(e.isOpen){var r=angular.element(N[0].querySelector(".uib-datepicker-popup")),i=n.popupPlacement?n.popupPlacement:d.placement,o=l.positionElements(t,r,i,S);r.css({top:o.top+"px",left:o.left+"px"}),r.hasClass("uib-position-measure")&&r.removeClass("uib-position-measure")}}function x(e){var t;return angular.version.minor<6?(t=angular.isObject(e.$options)?e.$options:{timezone:null},t.getOption=function(e){return t[e]}):t=e.$options,t}var C,k,S,D,E,O,T,A,M,P,I,N,U,j=!1,V=[];this.init=function(i){if(P=i,I=x(P),k=angular.isDefined(n.closeOnDateSelection)?e.$parent.$eval(n.closeOnDateSelection):d.closeOnDateSelection,S=angular.isDefined(n.datepickerAppendToBody)?e.$parent.$eval(n.datepickerAppendToBody):d.appendToBody,D=angular.isDefined(n.onOpenFocus)?e.$parent.$eval(n.onOpenFocus):d.onOpenFocus,E=angular.isDefined(n.datepickerPopupTemplateUrl)?n.datepickerPopupTemplateUrl:d.datepickerPopupTemplateUrl,O=angular.isDefined(n.datepickerTemplateUrl)?n.datepickerTemplateUrl:d.datepickerTemplateUrl,U=angular.isDefined(n.altInputFormats)?e.$parent.$eval(n.altInputFormats):d.altInputFormats,e.showButtonBar=angular.isDefined(n.showButtonBar)?e.$parent.$eval(n.showButtonBar):d.showButtonBar,d.html5Types[n.type]?(C=d.html5Types[n.type],j=!0):(C=n.uibDatepickerPopup||d.datepickerPopup,n.$observe("uibDatepickerPopup",function(e,t){var n=e||d.datepickerPopup;if(n!==C&&(C=n,P.$modelValue=null,!C))throw new Error("uibDatepickerPopup must have a date format specified.")})),!C)throw new Error("uibDatepickerPopup must have a date format specified.");if(j&&n.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");T=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"),T.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":E}),A=angular.element(T.children()[0]),A.attr("template-url",O),e.datepickerOptions||(e.datepickerOptions={}),j&&"month"===n.type&&(e.datepickerOptions.datepickerMode="month",e.datepickerOptions.minMode="month"),A.attr("datepicker-options","datepickerOptions"),j?P.$formatters.push(function(t){return e.date=p.fromTimezone(t,I.getOption("timezone")),t}):(P.$$parserName="date",P.$validators.date=v,P.$parsers.unshift($),P.$formatters.push(function(t){return P.$isEmpty(t)?(e.date=t,t):(angular.isNumber(t)&&(t=new Date(t)),e.date=p.fromTimezone(t,I.getOption("timezone")),p.filter(e.date,C))})),P.$viewChangeListeners.push(function(){e.date=g(P.$viewValue)}),t.on("keydown",y),N=r(T)(e),T.remove(),S?s.find("body").append(N):t.after(N),e.$on("$destroy",function(){for(!0===e.isOpen&&(u.$$phase||e.$apply(function(){e.isOpen=!1})),N.remove(),t.off("keydown",y),s.off("click",b),M&&M.off("scroll",w),angular.element(a).off("resize",w);V.length;)V.shift()()})},e.getText=function(t){return e[t+"Text"]||d[t+"Text"]},e.isDisabled=function(t){"today"===t&&(t=p.fromTimezone(new Date,I.getOption("timezone")));var n={};return angular.forEach(["minDate","maxDate"],function(t){e.datepickerOptions[t]?angular.isDate(e.datepickerOptions[t])?n[t]=new Date(e.datepickerOptions[t]):(m&&i.warn("Literal date support has been deprecated, please switch to date object usage"),n[t]=new Date(c(e.datepickerOptions[t],"medium"))):n[t]=null}),e.datepickerOptions&&n.minDate&&e.compare(t,n.minDate)<0||n.maxDate&&e.compare(t,n.maxDate)>0},e.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},e.dateSelection=function(n){e.date=n;var r=e.date?p.filter(e.date,C):null;t.val(r),P.$setViewValue(r),k&&(e.isOpen=!1,t[0].focus())},e.keydown=function(n){27===n.which&&(n.stopPropagation(),e.isOpen=!1,t[0].focus())},e.select=function(t,n){if(n.stopPropagation(),"today"===t){var r=new Date;angular.isDate(e.date)?(t=new Date(e.date),t.setFullYear(r.getFullYear(),r.getMonth(),r.getDate())):(t=p.fromTimezone(r,I.getOption("timezone")),t.setHours(0,0,0,0))}e.dateSelection(t)},e.close=function(n){n.stopPropagation(),e.isOpen=!1,t[0].focus()},e.disabled=angular.isDefined(n.disabled)||!1,n.ngDisabled&&V.push(e.$parent.$watch(o(n.ngDisabled),function(t){e.disabled=t})),e.$watch("isOpen",function(r){r?e.disabled?e.isOpen=!1:f(function(){w(),D&&e.$broadcast("uib:datepicker.focus"),s.on("click",b);var r=n.popupPlacement?n.popupPlacement:d.placement;S||l.parsePlacement(r)[2]?(M=M||angular.element(l.scrollParent(t)))&&M.on("scroll",w):M=null,angular.element(a).on("resize",w)},0,!1):(s.off("click",b),M&&M.off("scroll",w),angular.element(a).off("resize",w))}),e.$on("uib:datepicker.mode",function(){f(w,0,!1)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@"},link:function(e,t,n,r){var i=r[0];r[1].init(i)}}}).directive("uibDatepickerPopupWrap",function(){return{restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepickerPopup/popup.html"}}}),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(e){return function(t,n){var r;return function(){var i=this,o=Array.prototype.slice.call(arguments);r&&e.cancel(r),r=e(function(){t.apply(i,o)},n)}}}]),angular.module("ui.bootstrap.multiMap",[]).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var r=e[t];if(r){var i=r.indexOf(n);-1!==i&&r.splice(i,1),r.length||delete e[t]}}}}}}),
angular.module("ui.bootstrap.dropdown",["ui.bootstrap.multiMap","ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope","$$multiMap",function(e,t,n){var r=null,i=n.createNew();this.isOnlyOpen=function(e,t){var n=i.get(t);if(n){if(n.reduce(function(t,n){return n.scope===e?n:t},{}))return 1===n.length}return!1},this.open=function(t,n,a){if(r||e.on("click",o),r&&r!==t&&(r.isOpen=!1),r=t,a){var s=i.get(a);if(s){-1===s.map(function(e){return e.scope}).indexOf(t)&&i.put(a,{scope:t})}else i.put(a,{scope:t})}},this.close=function(t,n,a){if(r===t&&(e.off("click",o),e.off("keydown",this.keybindFilter),r=null),a){var s=i.get(a);if(s){var u=s.reduce(function(e,n){return n.scope===t?n:e},{});u&&i.remove(a,u)}}};var o=function(e){if(r&&r.isOpen&&!(e&&"disabled"===r.getAutoClose()||e&&3===e.which)){var n=r.getToggleElement();if(!(e&&n&&n[0].contains(e.target))){var i=r.getDropdownElement();e&&"outsideClick"===r.getAutoClose()&&i&&i[0].contains(e.target)||(r.focusToggleElement(),r.isOpen=!1,t.$$phase||r.$apply())}}};this.keybindFilter=function(e){if(r){var t=r.getDropdownElement(),n=r.getToggleElement(),i=t&&t[0].contains(e.target),a=n&&n[0].contains(e.target);27===e.which?(e.stopPropagation(),r.focusToggleElement(),o()):r.isKeynavEnabled()&&-1!==[38,40].indexOf(e.which)&&r.isOpen&&(i||a)&&(e.preventDefault(),e.stopPropagation(),r.focusDropdownEntry(e.which))}}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(e,t,n,r,i,o,a,s,u,l,c){function p(){t.append(h.dropdownMenu)}var d,f,h=this,m=e.$new(),g=i.appendToOpenClass,$=i.openClass,v=angular.noop,b=n.onToggle?r(n.onToggle):angular.noop,y=!1,w=u.find("body");t.addClass("dropdown"),this.init=function(){n.isOpen&&(f=r(n.isOpen),v=f.assign,e.$watch(f,function(e){m.isOpen=!!e})),y=angular.isDefined(n.keyboardNav)},this.toggle=function(e){return m.isOpen=arguments.length?!!e:!m.isOpen,angular.isFunction(v)&&v(m,m.isOpen),m.isOpen},this.isOpen=function(){return m.isOpen},m.getToggleElement=function(){return h.toggleElement},m.getAutoClose=function(){return n.autoClose||"always"},m.getElement=function(){return t},m.isKeynavEnabled=function(){return y},m.focusDropdownEntry=function(e){var n=h.dropdownMenu?angular.element(h.dropdownMenu).find("a"):t.find("ul").eq(0).find("a");switch(e){case 40:angular.isNumber(h.selectedOption)?h.selectedOption=h.selectedOption===n.length-1?h.selectedOption:h.selectedOption+1:h.selectedOption=0;break;case 38:angular.isNumber(h.selectedOption)?h.selectedOption=0===h.selectedOption?0:h.selectedOption-1:h.selectedOption=n.length-1}n[h.selectedOption].focus()},m.getDropdownElement=function(){return h.dropdownMenu},m.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},m.$watch("isOpen",function(i,f){var y=null,x=!1;if(angular.isDefined(n.dropdownAppendTo)){var C=r(n.dropdownAppendTo)(m);C&&(y=angular.element(C))}if(angular.isDefined(n.dropdownAppendToBody)){!1!==r(n.dropdownAppendToBody)(m)&&(x=!0)}if(x&&!y&&(y=w),y&&h.dropdownMenu&&(i?(y.append(h.dropdownMenu),t.on("$destroy",p)):(t.off("$destroy",p),p())),y&&h.dropdownMenu){var k,S,D,E=s.positionElements(t,h.dropdownMenu,"bottom-left",!0),O=0;if(k={top:E.top+"px",display:i?"block":"none"},S=h.dropdownMenu.hasClass("dropdown-menu-right"),S?(k.left="auto",D=s.scrollbarPadding(y),D.heightOverflow&&D.scrollbarWidth&&(O=D.scrollbarWidth),k.right=window.innerWidth-O-(E.left+t.prop("offsetWidth"))+"px"):(k.left=E.left+"px",k.right="auto"),!x){var T=s.offset(y);k.top=E.top-T.top+"px",S?k.right=window.innerWidth-(E.left-T.left+t.prop("offsetWidth"))+"px":k.left=E.left-T.left+"px"}h.dropdownMenu.css(k)}var A=y||t,M=y?g:$,P=A.hasClass(M),I=o.isOnlyOpen(e,y);if(P===!i){var N;N=y?I?"removeClass":"addClass":i?"addClass":"removeClass",a[N](A,M).then(function(){angular.isDefined(i)&&i!==f&&b(e,{open:!!i})})}if(i)h.dropdownMenuTemplateUrl?c(h.dropdownMenuTemplateUrl).then(function(e){d=m.$new(),l(e.trim())(d,function(e){var t=e;h.dropdownMenu.replaceWith(t),h.dropdownMenu=t,u.on("keydown",o.keybindFilter)})}):u.on("keydown",o.keybindFilter),m.focusToggleElement(),o.open(m,t,y);else{if(o.close(m,t,y),h.dropdownMenuTemplateUrl){d&&d.$destroy();var U=angular.element('<ul class="dropdown-menu"></ul>');h.dropdownMenu.replaceWith(U),h.dropdownMenu=U}h.selectedOption=null}angular.isFunction(v)&&v(e,i)})}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(e,t,n,r){r.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"A",require:"?^uibDropdown",link:function(e,t,n,r){if(r&&!angular.isDefined(n.dropdownNested)){t.addClass("dropdown-menu");var i=n.templateUrl;i&&(r.dropdownMenuTemplateUrl=i),r.dropdownMenu||(r.dropdownMenu=t)}}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(e,t,n,r){if(r){t.addClass("dropdown-toggle"),r.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){r.toggle()})};t.on("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(r.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.off("click",i)})}}}}),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t===e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,r=0;r<e.length;r++)if(t===e[r].key){n=r;break}return e.splice(n,1)[0]},removeTop:function(){return e.pop()},length:function(){return e.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.multiMap","ui.bootstrap.stackedMap","ui.bootstrap.position"]).provider("$uibResolve",function(){var e=this;this.resolver=null,this.setResolver=function(e){this.resolver=e},this.$get=["$injector","$q",function(t,n){var r=e.resolver?t.get(e.resolver):null;return{resolve:function(e,i,o,a){if(r)return r.resolve(e,i,o,a);var s=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?s.push(n.resolve(t.invoke(e))):angular.isString(e)?s.push(n.resolve(t.get(e))):s.push(n.resolve(e))}),n.all(s).then(function(t){var n={},r=0;return angular.forEach(e,function(e,i){n[i]=t[r++]}),n})}}}]}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(e,t,n){function r(t,r,i){i.modalInClass&&(e.addClass(r,i.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(n,o){var a=o();t.modalOptions.animation?e.removeClass(r,i.modalInClass).then(a):a()}))}return{restrict:"A",compile:function(e,t){return e.addClass(t.backdropClass),r}}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(e,t,n,r){return{scope:{index:"@"},restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/modal/window.html"},link:function(i,o,a){o.addClass(a.windowTopClass||""),i.size=a.size,i.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},o.on("click",i.close),i.$isRendered=!0;var s=t.defer();i.$$postDigest(function(){s.resolve()}),s.promise.then(function(){var s=null;a.modalInClass&&(s=n(o,{addClass:a.modalInClass}).start(),i.$on(e.NOW_CLOSING_EVENT,function(e,t){var r=t();n(o,{removeClass:a.modalInClass}).start().then(r)})),t.when(s).then(function(){var t=e.getTop();if(t&&e.modalRendered(t.key),!r[0].activeElement||!o[0].contains(r[0].activeElement)){var n=o[0].querySelector("[autofocus]");n?n.focus():o[0].focus()}})})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.uibModalAnimationClass)}}}).directive("uibModalTransclude",["$animate",function(e){return{link:function(t,n,r,i,o){o(t.$parent,function(t){n.empty(),e.enter(t,n)})}}}]).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap","$uibPosition",function(e,t,n,r,i,o,a,s,u){function l(e){return e.replace(T,function(e,t){return(t?"-":"")+e.toLowerCase()})}function c(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}function p(){for(var e=-1,t=C.keys(),n=0;n<t.length;n++)C.get(t[n]).value.backdrop&&(e=n);return e>-1&&e<D&&(e=D),e}function d(e,t){var n=C.get(e).value,r=n.appendTo;C.remove(e),E=C.top(),E&&(D=parseInt(E.value.modalDomEl.attr("index"),10)),m(n.modalDomEl,n.modalScope,function(){var t=n.openedClass||x;k.remove(t,e);var i=k.hasKey(t);r.toggleClass(t,i),!i&&w&&w.heightOverflow&&w.scrollbarWidth&&(w.originalRight?r.css({paddingRight:w.originalRight+"px"}):r.css({paddingRight:""}),w=null),f(!0)},n.closedDeferred),h(),t&&t.focus?t.focus():r.focus&&r.focus()}function f(e){var t;C.length()>0&&(t=C.top().value,t.modalDomEl.toggleClass(t.windowTopClass||"",e))}function h(){if(b&&-1===p()){var e=y;m(b,y,function(){e=null}),b=void 0,y=void 0}}function m(t,n,r,i){function a(){a.done||(a.done=!0,e.leave(t).then(function(){r&&r(),t.remove(),i&&i.resolve()}),n.$destroy())}var s,u=null,l=function(){return s||(s=o.defer(),u=s.promise),function(){s.resolve()}};return n.$broadcast(S.NOW_CLOSING_EVENT,l),o.when(u).then(a)}function g(e){if(e.isDefaultPrevented())return e;var t=C.top();if(t)switch(e.which){case 27:t.value.keyboard&&(e.preventDefault(),i.$apply(function(){S.dismiss(t.key,"escape key press")}));break;case 9:var n=S.loadFocusElementList(t),r=!1;e.shiftKey?(S.isFocusInFirstItem(e,n)||S.isModalFocused(e,t))&&(r=S.focusLastFocusableElement(n)):S.isFocusInLastItem(e,n)&&(r=S.focusFirstFocusableElement(n)),r&&(e.preventDefault(),e.stopPropagation())}}function $(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}function v(){Array.prototype.forEach.call(document.querySelectorAll("["+O+"]"),function(e){var t=parseInt(e.getAttribute(O),10),n=t-1;e.setAttribute(O,n),n||(e.removeAttribute(O),e.removeAttribute("aria-hidden"))})}var b,y,w,x="modal-open",C=s.createNew(),k=a.createNew(),S={NOW_CLOSING_EVENT:"modal.stack.now-closing"},D=0,E=null,O="data-bootstrap-modal-aria-hidden-count",T=/[A-Z]/g;return i.$watch(p,function(e){y&&(y.index=e)}),n.on("keydown",g),i.$on("$destroy",function(){n.off("keydown",g)}),S.open=function(t,o){function a(e){if(e&&"BODY"!==e[0].tagName)return function(e){var t=e.parent()?e.parent().children():[];return Array.prototype.filter.call(t,function(t){return t!==e[0]})}(e).forEach(function(e){var t="true"===e.getAttribute("aria-hidden"),n=parseInt(e.getAttribute(O),10);n||(n=t?1:0),e.setAttribute(O,n+1),e.setAttribute("aria-hidden","true")}),a(e.parent())}var s=n[0].activeElement,c=o.openedClass||x;f(!1),E=C.top(),C.add(t,{deferred:o.deferred,renderDeferred:o.renderDeferred,closedDeferred:o.closedDeferred,modalScope:o.scope,backdrop:o.backdrop,keyboard:o.keyboard,openedClass:o.openedClass,windowTopClass:o.windowTopClass,animation:o.animation,appendTo:o.appendTo}),k.put(c,t);var d=o.appendTo,h=p();h>=0&&!b&&(y=i.$new(!0),y.modalOptions=o,y.index=h,b=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>'),b.attr({class:"modal-backdrop","ng-style":"{'z-index': 1040 + (index && 1 || 0) + index*10}","uib-modal-animation-class":"fade","modal-in-class":"in"}),o.backdropClass&&b.addClass(o.backdropClass),o.animation&&b.attr("modal-animation","true"),r(b)(y),e.enter(b,d),u.isScrollable(d)&&(w=u.scrollbarPadding(d),w.heightOverflow&&w.scrollbarWidth&&d.css({paddingRight:w.right+"px"})));var m;o.component?(m=document.createElement(l(o.component.name)),m=angular.element(m),m.attr({resolve:"$resolve","modal-instance":"$uibModalInstance",close:"$close($value)",dismiss:"$dismiss($value)"})):m=o.content,D=E?parseInt(E.value.modalDomEl.attr("index"),10)+1:0;var g=angular.element('<div uib-modal-window="modal-window"></div>');g.attr({class:"modal","template-url":o.windowTemplateUrl,"window-top-class":o.windowTopClass,role:"dialog","aria-labelledby":o.ariaLabelledBy,"aria-describedby":o.ariaDescribedBy,size:o.size,index:D,animate:"animate","ng-style":"{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",tabindex:-1,"uib-modal-animation-class":"fade","modal-in-class":"in"}).append(m),o.windowClass&&g.addClass(o.windowClass),o.animation&&g.attr("modal-animation","true"),d.addClass(c),o.scope&&(o.scope.$$topModalIndex=D),e.enter(r(g)(o.scope),d),C.top().value.modalDomEl=g,C.top().value.modalOpener=s,a(g)},S.close=function(e,t){var n=C.get(e);return v(),n&&$(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),d(e,n.value.modalOpener),!0):!n},S.dismiss=function(e,t){var n=C.get(e);return v(),n&&$(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),d(e,n.value.modalOpener),!0):!n},S.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},S.getTop=function(){return C.top()},S.modalRendered=function(e){var t=C.get(e);t&&t.value.renderDeferred.resolve()},S.focusFirstFocusableElement=function(e){return e.length>0&&(e[0].focus(),!0)},S.focusLastFocusableElement=function(e){return e.length>0&&(e[e.length-1].focus(),!0)},S.isModalFocused=function(e,t){if(e&&t){var n=t.value.modalDomEl;if(n&&n.length)return(e.target||e.srcElement)===n[0]}return!1},S.isFocusInFirstItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[0]},S.isFocusInLastItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[t.length-1]},S.loadFocusElementList=function(e){if(e){var t=e.value.modalDomEl;if(t&&t.length){var n=t[0].querySelectorAll("a[href], area[href], input:not([disabled]):not([tabindex='-1']), button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]");return n?Array.prototype.filter.call(n,function(e){return c(e)}):n}}},S}]).provider("$uibModal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(t,n,r,i,o,a,s){function u(e){return e.template?n.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}var l={},c=null;return l.getPromiseChain=function(){return c},l.open=function(i){function l(){return g}var p=n.defer(),d=n.defer(),f=n.defer(),h=n.defer(),m={result:p.promise,opened:d.promise,closed:f.promise,rendered:h.promise,close:function(e){return s.close(m,e)},dismiss:function(e){return s.dismiss(m,e)}};if(i=angular.extend({},e.options,i),i.resolve=i.resolve||{},i.appendTo=i.appendTo||r.find("body").eq(0),!i.appendTo.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");if(!i.component&&!i.template&&!i.templateUrl)throw new Error("One of component or template or templateUrl options is required.");var g;g=i.component?n.when(a.resolve(i.resolve,{},null,null)):n.all([u(i),a.resolve(i.resolve,{},null,null)]);var $;return $=c=n.all([c]).then(l,l).then(function(e){function n(t,n,r,i){t.$scope=a,t.$scope.$resolve={},r?t.$scope.$uibModalInstance=m:t.$uibModalInstance=m;var o=n?e[1]:e;angular.forEach(o,function(e,n){i&&(t[n]=e),t.$scope.$resolve[n]=e})}var r=i.scope||t,a=r.$new();a.$close=m.close,a.$dismiss=m.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var u,l,c={scope:a,deferred:p,renderDeferred:h,closedDeferred:f,animation:i.animation,backdrop:i.backdrop,keyboard:i.keyboard,backdropClass:i.backdropClass,windowTopClass:i.windowTopClass,windowClass:i.windowClass,windowTemplateUrl:i.windowTemplateUrl,ariaLabelledBy:i.ariaLabelledBy,ariaDescribedBy:i.ariaDescribedBy,size:i.size,openedClass:i.openedClass,appendTo:i.appendTo},g={},$={};i.component?(n(g,!1,!0,!1),g.name=i.component,c.component=g):i.controller&&(n($,!0,!1,!0),l=o(i.controller,$,!0,i.controllerAs),i.controllerAs&&i.bindToController&&(u=l.instance,u.$close=a.$close,u.$dismiss=a.$dismiss,angular.extend(u,{$resolve:$.$scope.$resolve},r)),u=l(),angular.isFunction(u.$onInit)&&u.$onInit()),i.component||(c.content=e[0]),s.open(m,c),d.resolve(!0)},function(e){d.reject(e),p.reject(e)}).finally(function(){c===$&&(c=null)}),m},l}]};return e}),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(e){return{create:function(t,n,r){t.setNumPages=r.numPages?e(r.numPages).assign:angular.noop,t.ngModelCtrl={$setViewValue:angular.noop},t._watchers=[],t.init=function(e,i){t.ngModelCtrl=e,t.config=i,e.$render=function(){t.render()},r.itemsPerPage?t._watchers.push(n.$parent.$watch(r.itemsPerPage,function(e){t.itemsPerPage=parseInt(e,10),n.totalPages=t.calculateTotalPages(),t.updatePage()})):t.itemsPerPage=i.itemsPerPage,n.$watch("totalItems",function(e,r){(angular.isDefined(e)||e!==r)&&(n.totalPages=t.calculateTotalPages(),t.updatePage())})},t.calculateTotalPages=function(){var e=t.itemsPerPage<1?1:Math.ceil(n.totalItems/t.itemsPerPage);return Math.max(e||0,1)},t.render=function(){n.page=parseInt(t.ngModelCtrl.$viewValue,10)||1},n.selectPage=function(e,r){r&&r.preventDefault(),(!n.ngDisabled||!r)&&n.page!==e&&e>0&&e<=n.totalPages&&(r&&r.target&&r.target.blur(),t.ngModelCtrl.$setViewValue(e),t.ngModelCtrl.$render())},n.getText=function(e){return n[e+"Text"]||t.config[e+"Text"]},n.noPrevious=function(){return 1===n.page},n.noNext=function(){return n.page===n.totalPages},t.updatePage=function(){t.setNumPages(n.$parent,n.totalPages),n.page>n.totalPages?n.selectPage(n.totalPages):t.ngModelCtrl.$render()},n.$on("$destroy",function(){for(;t._watchers.length;)t._watchers.shift()()})}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(e,t,n,r){e.align=angular.isDefined(t.align)?e.$parent.$eval(t.align):r.align,n.create(this,e,t)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(e){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],restrict:"A",controller:"UibPagerController",controllerAs:"pager",templateUrl:function(e,t){return t.templateUrl||"uib/template/pager/pager.html"},link:function(t,n,r,i){n.addClass("pager");var o=i[0],a=i[1];a&&o.init(a,e)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(e,t,n,r,i){function o(e,t,n){return{number:e,text:t,active:n}}function a(e,t){var n=[],r=1,i=t,a=angular.isDefined(u)&&u<t;a&&(l?(r=Math.max(e-Math.floor(u/2),1),(i=r+u-1)>t&&(i=t,r=i-u+1)):(r=(Math.ceil(e/u)-1)*u+1,i=Math.min(r+u-1,t)));for(var s=r;s<=i;s++){var f=o(s,d(s),s===e);n.push(f)}if(a&&u>0&&(!l||c||p)){if(r>1){if(!p||r>3){var h=o(r-1,"...",!1);n.unshift(h)}if(p){if(3===r){var m=o(2,"2",!1);n.unshift(m)}var g=o(1,"1",!1);n.unshift(g)}}if(i<t){if(!p||i<t-2){var $=o(i+1,"...",!1);n.push($)}if(p){if(i===t-2){var v=o(t-1,t-1,!1);n.push(v)}var b=o(t,t,!1);n.push(b)}}}return n}var s=this,u=angular.isDefined(t.maxSize)?e.$parent.$eval(t.maxSize):i.maxSize,l=angular.isDefined(t.rotate)?e.$parent.$eval(t.rotate):i.rotate,c=angular.isDefined(t.forceEllipses)?e.$parent.$eval(t.forceEllipses):i.forceEllipses,p=angular.isDefined(t.boundaryLinkNumbers)?e.$parent.$eval(t.boundaryLinkNumbers):i.boundaryLinkNumbers,d=angular.isDefined(t.pageLabel)?function(n){return e.$parent.$eval(t.pageLabel,{$page:n})}:angular.identity;e.boundaryLinks=angular.isDefined(t.boundaryLinks)?e.$parent.$eval(t.boundaryLinks):i.boundaryLinks,e.directionLinks=angular.isDefined(t.directionLinks)?e.$parent.$eval(t.directionLinks):i.directionLinks,t.$set("role","menu"),r.create(this,e,t),t.maxSize&&s._watchers.push(e.$parent.$watch(n(t.maxSize),function(e){u=parseInt(e,10),s.render()}));var f=this.render;this.render=function(){f(),e.page>0&&e.page<=e.totalPages&&(e.pages=a(e.page,e.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(e,t){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],restrict:"A",controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"uib/template/pagination/pagination.html"},link:function(e,n,r,i){n.addClass("pagination");var o=i[0],a=i[1];a&&o.init(a,t)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){function e(e){var t=/[A-Z]/g;return e.replace(t,function(e,t){return(t?"-":"")+e.toLowerCase()})}var t={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},r={};this.options=function(e){angular.extend(r,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(i,o,a,s,u,l,c,p,d){function f(e){if(27===e.which){var t=h.top();t&&(t.value.close(),t=null)}}var h=d.createNew();return s.on("keyup",f),c.$on("$destroy",function(){s.off("keyup",f)}),function(i,c,d,f){function m(e){var t=(e||f.trigger||d).split(" ");return{show:t,hide:t.map(function(e){return n[e]||e})}}f=angular.extend({},t,r,f);var g=e(i),$=l.startSymbol(),v=l.endSymbol(),b="<div "+g+'-popup uib-title="'+$+"title"+v+'" '+(f.useContentExp?'content-exp="contentExp()" ':'content="'+$+"content"+v+'" ')+'origin-scope="origScope" class="uib-position-measure '+c+'" tooltip-animation-class="fade"uib-tooltip-classes ng-class="{ in: isOpen }" ></div>';return{compile:function(e,t){var n=o(b);return function(e,t,r,o){function l(){q.isOpen?g():d()}function d(){R&&!e.$eval(r[c+"Enable"])||(y(),C(),q.popupDelay?P||(P=a($,q.popupDelay,!1)):$())}function g(){v(),q.popupCloseDelay?I||(I=a(b,q.popupCloseDelay,!1)):b()}function $(){if(v(),y(),!q.content)return angular.noop;w(),q.$evalAsync(function(){q.isOpen=!0,k(!0),B()})}function v(){P&&(a.cancel(P),P=null),N&&(a.cancel(N),N=null)}function b(){q&&q.$evalAsync(function(){q&&(q.isOpen=!1,k(!1),q.animation?M||(M=a(x,150,!1)):x())})}function y(){I&&(a.cancel(I),I=null),M&&(a.cancel(M),M=null)}function w(){T||(A=q.$new(),T=n(A,function(e){V?s.find("body").append(e):t.after(e)}),h.add(q,{close:b}),S())}function x(){v(),y(),D(),T&&(T.remove(),T=null,U&&a.cancel(U)),h.remove(q),A&&(A.$destroy(),A=null)}function C(){q.title=r[c+"Title"],q.content=_?_(e):r[i],q.popupClass=r[c+"Class"],q.placement=angular.isDefined(r[c+"Placement"])?r[c+"Placement"]:f.placement;var t=u.parsePlacement(q.placement);j=t[1]?t[0]+"-"+t[1]:t[0];var n=parseInt(r[c+"PopupDelay"],10),o=parseInt(r[c+"PopupCloseDelay"],10);q.popupDelay=isNaN(n)?f.popupDelay:n,q.popupCloseDelay=isNaN(o)?f.popupCloseDelay:o}function k(t){L&&angular.isFunction(L.assign)&&L.assign(e,t)}function S(){H.length=0,_?(H.push(e.$watch(_,function(e){q.content=e,!e&&q.isOpen&&b()})),H.push(A.$watch(function(){F||(F=!0,A.$$postDigest(function(){F=!1,q&&q.isOpen&&B()}))}))):H.push(r.$observe(i,function(e){q.content=e,!e&&q.isOpen?b():B()})),H.push(r.$observe(c+"Title",function(e){q.title=e,q.isOpen&&B()})),H.push(r.$observe(c+"Placement",function(e){q.placement=e||f.placement,q.isOpen&&B()}))}function D(){H.length&&(angular.forEach(H,function(e){e()}),H.length=0)}function E(e){q&&q.isOpen&&T&&(t[0].contains(e.target)||T[0].contains(e.target)||g())}function O(e){27===e.which&&g()}var T,A,M,P,I,N,U,j,V=!!angular.isDefined(f.appendToBody)&&f.appendToBody,z=m(void 0),R=angular.isDefined(r[c+"Enable"]),q=e.$new(!0),F=!1,L=!!angular.isDefined(r[c+"IsOpen"])&&p(r[c+"IsOpen"]),_=!!f.useContentExp&&p(r[i]),H=[],B=function(){T&&T.html()&&(N||(N=a(function(){var e=u.positionElements(t,T,q.placement,V),n=angular.isDefined(T.offsetHeight)?T.offsetHeight:T.prop("offsetHeight"),r=V?u.offset(t):u.position(t);T.css({top:e.top+"px",left:e.left+"px"});var i=e.placement.split("-");T.hasClass(i[0])||(T.removeClass(j.split("-")[0]),T.addClass(i[0])),T.hasClass(f.placementClassPrefix+e.placement)||(T.removeClass(f.placementClassPrefix+j),T.addClass(f.placementClassPrefix+e.placement)),U=a(function(){var e=angular.isDefined(T.offsetHeight)?T.offsetHeight:T.prop("offsetHeight"),t=u.adjustTop(i,r,n,e);t&&T.css(t),U=null},0,!1),T.hasClass("uib-position-measure")?(u.positionArrow(T,e.placement),T.removeClass("uib-position-measure")):j!==e.placement&&u.positionArrow(T,e.placement),j=e.placement,N=null},0,!1)))};q.origScope=e,q.isOpen=!1,q.contentExp=function(){return q.content},r.$observe("disabled",function(e){e&&v(),e&&q.isOpen&&b()}),L&&e.$watch(L,function(e){q&&!e===q.isOpen&&l()});var W=function(){z.show.forEach(function(e){"outsideClick"===e?t.off("click",l):(t.off(e,d),t.off(e,l)),t.off("keypress",O)}),z.hide.forEach(function(e){"outsideClick"===e?s.off("click",E):t.off(e,g)})};!function(){var n=[],i=[],o=e.$eval(r[c+"Trigger"]);W(),angular.isObject(o)?(Object.keys(o).forEach(function(e){n.push(e),i.push(o[e])}),z={show:n,hide:i}):z=m(o),"none"!==z.show&&z.show.forEach(function(e,n){"outsideClick"===e?(t.on("click",l),s.on("click",E)):e===z.hide[n]?t.on(e,l):e&&(t.on(e,d),t.on(z.hide[n],g)),t.on("keypress",O)})}();var Y=e.$eval(r[c+"Animation"]);q.animation=angular.isDefined(Y)?!!Y:f.animation;var G,K=c+"AppendToBody";G=K in r&&void 0===r[K]||e.$eval(r[K]),V=angular.isDefined(G)?G:V,e.$on("$destroy",function(){W(),x(),q=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,r){return{link:function(i,o,a){var s,u,l,c=i.$eval(a.tooltipTemplateTranscludeScope),p=0,d=function(){u&&(u.remove(),u=null),s&&(s.$destroy(),s=null),l&&(e.leave(l).then(function(){u=null}),u=l,l=null)};i.$watch(t.parseAsResourceUrl(a.uibTooltipTemplateTransclude),function(t){var a=++p;t?(r(t,!0).then(function(r){if(a===p){var i=c.$new(),u=r,f=n(u)(i,function(t){d(),e.enter(t,o)});s=i,l=f,s.$emit("$includeContentLoaded",t)}},function(){a===p&&(d(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):d()}),i.$on("$destroy",d)}}}]).directive("uibTooltipClasses",["$uibPosition",function(e){return{restrict:"A",link:function(t,n,r){if(t.placement){var i=e.parsePlacement(t.placement);n.addClass(i[0])}t.popupClass&&n.addClass(t.popupClass),t.animation&&n.addClass(r.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",function(){return{restrict:"A",scope:{content:"@"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}}).directive("uibTooltip",["$uibTooltip",function(e){return e("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{restrict:"A",scope:{contentExp:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}}).directive("uibTooltipTemplate",["$uibTooltip",function(e){return e("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}}).directive("uibTooltipHtml",["$uibTooltip",function(e){return e("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{restrict:"A",scope:{uibTitle:"@",contentExp:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}}).directive("uibPopoverTemplate",["$uibTooltip",function(e){return e("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&",uibTitle:"@"},templateUrl:"uib/template/popover/popover-html.html"}}).directive("uibPopoverHtml",["$uibTooltip",function(e){return e("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{restrict:"A",scope:{uibTitle:"@",content:"@"},templateUrl:"uib/template/popover/popover.html"}}).directive("uibPopover",["$uibTooltip",function(e){return e("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(e,t,n){function r(){return angular.isDefined(e.maxParam)?e.maxParam:n.max}var i=this,o=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=r(),this.addBar=function(e,t,n){o||t.css({transition:"none"}),this.bars.push(e),e.max=r(),e.title=n&&angular.isDefined(n.title)?n.title:"progressbar",e.$watch("value",function(t){e.recalculatePercentage()}),e.recalculatePercentage=function(){var t=i.bars.reduce(function(e,t){return t.percent=+(100*t.value/t.max).toFixed(2),e+t.percent},0);t>100&&(e.percent-=t-100)},e.$on("$destroy",function(){t=null,i.removeBar(e)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1),this.bars.forEach(function(e){e.recalculatePercentage()})},e.$watch("maxParam",function(e){i.bars.forEach(function(e){e.max=r(),e.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(e,t,n,r){r.addBar(e,t,n)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(e,t,n,r){r.addBar(e,angular.element(t.children()[0]),{title:n.title})}}}),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(e,t,n){var r={$setViewValue:angular.noop},i=this;this.init=function(i){r=i,r.$render=this.render,r.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff,this.enableReset=angular.isDefined(t.enableReset)?e.$parent.$eval(t.enableReset):n.enableReset;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var a=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(a)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;t<n;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){if(!e.readonly&&t>=0&&t<=e.range.length){var n=i.enableReset&&r.$viewValue===t?0:t;r.$setViewValue(n),r.$render()}},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=r.$viewValue,
e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=r.$viewValue,e.title=i.getTitle(e.value-1)}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],restrict:"A",scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",link:function(e,t,n,r){var i=r[0],o=r[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(e){function t(e){for(var t=0;t<r.tabs.length;t++)if(r.tabs[t].index===e)return t}var n,r=this;r.tabs=[],r.select=function(e,o){if(!i){var a=t(n),s=r.tabs[a];if(s){if(s.tab.onDeselect({$event:o,$selectedIndex:e}),o&&o.isDefaultPrevented())return;s.tab.active=!1}var u=r.tabs[e];u?(u.tab.onSelect({$event:o}),u.tab.active=!0,r.active=u.index,n=u.index):!u&&angular.isDefined(n)&&(r.active=null,n=null)}},r.addTab=function(e){if(r.tabs.push({tab:e,index:e.index}),r.tabs.sort(function(e,t){return e.index>t.index?1:e.index<t.index?-1:0}),e.index===r.active||!angular.isDefined(r.active)&&1===r.tabs.length){var n=t(e.index);r.select(n)}},r.removeTab=function(e){for(var t,n=0;n<r.tabs.length;n++)if(r.tabs[n].tab===e){t=n;break}if(r.tabs[t].index===r.active){var i=t===r.tabs.length-1?t-1:t+1%r.tabs.length;r.select(i)}r.tabs.splice(t,1)},e.$watch("tabset.active",function(e){angular.isDefined(e)&&e!==n&&r.select(t(e))});var i;e.$on("$destroy",function(){i=!0})}]).directive("uibTabset",function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tabset.html"},link:function(e,t,n){e.vertical=!!angular.isDefined(n.vertical)&&e.$parent.$eval(n.vertical),e.justified=!!angular.isDefined(n.justified)&&e.$parent.$eval(n.justified)}}}).directive("uibTab",["$parse",function(e){return{require:"^uibTabset",replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(t,n,r,i,o){t.disabled=!1,r.disable&&t.$parent.$watch(e(r.disable),function(e){t.disabled=!!e}),angular.isUndefined(r.index)&&(i.tabs&&i.tabs.length?t.index=Math.max.apply(null,i.tabs.map(function(e){return e.index}))+1:t.index=0),angular.isUndefined(r.classes)&&(t.classes=""),t.select=function(e){if(!t.disabled){for(var n,r=0;r<i.tabs.length;r++)if(i.tabs[r].tab===t){n=r;break}i.select(n,e)}},i.addTab(t),t.$on("$destroy",function(){i.removeTab(t)}),t.$transcludeFn=o}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:"^uibTab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("uibTabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("uib-tab-heading")||e.hasAttribute("data-uib-tab-heading")||e.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===e.tagName.toLowerCase()||"data-uib-tab-heading"===e.tagName.toLowerCase()||"x-uib-tab-heading"===e.tagName.toLowerCase()||"uib:tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^uibTabset",link:function(t,n,r){var i=t.$eval(r.uibTabContentTransclude).tab;i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(e,t,n,r,i,o,a){function s(){var t=+e.hours;if((e.showMeridian?t>0&&t<13:t>=0&&t<24)&&""!==e.hours)return e.showMeridian&&(12===t&&(t=0),e.meridian===k[1]&&(t+=12)),t}function u(){var t=+e.minutes;if(t>=0&&t<60&&""!==e.minutes)return t}function l(){var t=+e.seconds;return t>=0&&t<60?t:void 0}function c(e,t){return null===e?"":angular.isDefined(e)&&e.toString().length<2&&!t?"0"+e:e.toString()}function p(e){d(),C.$setViewValue(new Date(w)),f(e)}function d(){v&&v.$setValidity("hours",!0),b&&b.$setValidity("minutes",!0),y&&y.$setValidity("seconds",!0),C.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1,e.invalidSeconds=!1}function f(t){if(C.$modelValue){var n=w.getHours(),r=w.getMinutes(),i=w.getSeconds();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:c(n,!S),"m"!==t&&(e.minutes=c(r)),e.meridian=w.getHours()<12?k[0]:k[1],"s"!==t&&(e.seconds=c(i)),e.meridian=w.getHours()<12?k[0]:k[1]}else e.hours=null,e.minutes=null,e.seconds=null,e.meridian=k[0]}function h(e){w=g(w,e),p()}function m(e,t){return g(e,60*t)}function g(e,t){var n=new Date(e.getTime()+1e3*t),r=new Date(e);return r.setHours(n.getHours(),n.getMinutes(),n.getSeconds()),r}function $(){return(null===e.hours||""===e.hours)&&(null===e.minutes||""===e.minutes)&&(!e.showSeconds||e.showSeconds&&(null===e.seconds||""===e.seconds))}var v,b,y,w=new Date,x=[],C={$setViewValue:angular.noop},k=angular.isDefined(n.meridians)?e.$parent.$eval(n.meridians):a.meridians||o.DATETIME_FORMATS.AMPMS,S=!angular.isDefined(n.padHours)||e.$parent.$eval(n.padHours);e.tabindex=angular.isDefined(n.tabindex)?n.tabindex:0,t.removeAttr("tabindex"),this.init=function(t,r){C=t,C.$render=this.render,C.$formatters.unshift(function(e){return e?new Date(e):null});var i=r.eq(0),o=r.eq(1),s=r.eq(2);v=i.controller("ngModel"),b=o.controller("ngModel"),y=s.controller("ngModel"),(angular.isDefined(n.mousewheel)?e.$parent.$eval(n.mousewheel):a.mousewheel)&&this.setupMousewheelEvents(i,o,s),(angular.isDefined(n.arrowkeys)?e.$parent.$eval(n.arrowkeys):a.arrowkeys)&&this.setupArrowkeyEvents(i,o,s),e.readonlyInput=angular.isDefined(n.readonlyInput)?e.$parent.$eval(n.readonlyInput):a.readonlyInput,this.setupInputEvents(i,o,s)};var D=a.hourStep;n.hourStep&&x.push(e.$parent.$watch(r(n.hourStep),function(e){D=+e}));var E=a.minuteStep;n.minuteStep&&x.push(e.$parent.$watch(r(n.minuteStep),function(e){E=+e}));var O;x.push(e.$parent.$watch(r(n.min),function(e){var t=new Date(e);O=isNaN(t)?void 0:t}));var T;x.push(e.$parent.$watch(r(n.max),function(e){var t=new Date(e);T=isNaN(t)?void 0:t}));var A=!1;n.ngDisabled&&x.push(e.$parent.$watch(r(n.ngDisabled),function(e){A=e})),e.noIncrementHours=function(){var e=m(w,60*D);return A||e>T||e<w&&e<O},e.noDecrementHours=function(){var e=m(w,60*-D);return A||e<O||e>w&&e>T},e.noIncrementMinutes=function(){var e=m(w,E);return A||e>T||e<w&&e<O},e.noDecrementMinutes=function(){var e=m(w,-E);return A||e<O||e>w&&e>T},e.noIncrementSeconds=function(){var e=g(w,M);return A||e>T||e<w&&e<O},e.noDecrementSeconds=function(){var e=g(w,-M);return A||e<O||e>w&&e>T},e.noToggleMeridian=function(){return w.getHours()<12?A||m(w,720)>T:A||m(w,-720)<O};var M=a.secondStep;n.secondStep&&x.push(e.$parent.$watch(r(n.secondStep),function(e){M=+e})),e.showSeconds=a.showSeconds,n.showSeconds&&x.push(e.$parent.$watch(r(n.showSeconds),function(t){e.showSeconds=!!t})),e.showMeridian=a.showMeridian,n.showMeridian&&x.push(e.$parent.$watch(r(n.showMeridian),function(t){if(e.showMeridian=!!t,C.$error.time){var n=s(),r=u();angular.isDefined(n)&&angular.isDefined(r)&&(w.setHours(n),p())}else f()})),this.setupMousewheelEvents=function(t,n,r){var i=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.on("mousewheel wheel",function(t){A||e.$apply(i(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.on("mousewheel wheel",function(t){A||e.$apply(i(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()}),r.on("mousewheel wheel",function(t){A||e.$apply(i(t)?e.incrementSeconds():e.decrementSeconds()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n,r){t.on("keydown",function(t){A||(38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply()))}),n.on("keydown",function(t){A||(38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply()))}),r.on("keydown",function(t){A||(38===t.which?(t.preventDefault(),e.incrementSeconds(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementSeconds(),e.$apply()))})},this.setupInputEvents=function(t,n,r){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void(e.updateSeconds=angular.noop);var i=function(t,n,r){C.$setViewValue(null),C.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t,v&&v.$setValidity("hours",!1)),angular.isDefined(n)&&(e.invalidMinutes=n,b&&b.$setValidity("minutes",!1)),angular.isDefined(r)&&(e.invalidSeconds=r,y&&y.$setValidity("seconds",!1))};e.updateHours=function(){var e=s(),t=u();C.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(w.setHours(e),w.setMinutes(t),w<O||w>T?i(!0):p("h")):i(!0)},t.on("blur",function(t){C.$setTouched(),$()?d():null===e.hours||""===e.hours?i(!0):!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=c(e.hours,!S)})}),e.updateMinutes=function(){var e=u(),t=s();C.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(w.setHours(t),w.setMinutes(e),w<O||w>T?i(void 0,!0):p("m")):i(void 0,!0)},n.on("blur",function(t){C.$setTouched(),$()?d():null===e.minutes?i(void 0,!0):!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=c(e.minutes)})}),e.updateSeconds=function(){var e=l();C.$setDirty(),angular.isDefined(e)?(w.setSeconds(e),p("s")):i(void 0,void 0,!0)},r.on("blur",function(t){$()?d():!e.invalidSeconds&&e.seconds<10&&e.$apply(function(){e.seconds=c(e.seconds)})})},this.render=function(){var t=C.$viewValue;isNaN(t)?(C.$setValidity("time",!1),i.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(w=t),w<O||w>T?(C.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):d(),f())},e.showSpinners=angular.isDefined(n.showSpinners)?e.$parent.$eval(n.showSpinners):a.showSpinners,e.incrementHours=function(){e.noIncrementHours()||h(60*D*60)},e.decrementHours=function(){e.noDecrementHours()||h(60*-D*60)},e.incrementMinutes=function(){e.noIncrementMinutes()||h(60*E)},e.decrementMinutes=function(){e.noDecrementMinutes()||h(60*-E)},e.incrementSeconds=function(){e.noIncrementSeconds()||h(M)},e.decrementSeconds=function(){e.noDecrementSeconds()||h(-M)},e.toggleMeridian=function(){var t=u(),n=s();e.noToggleMeridian()||(angular.isDefined(t)&&angular.isDefined(n)?h(720*(w.getHours()<12?60:-60)):e.meridian=e.meridian===k[0]?k[1]:k[0])},e.blur=function(){C.$setTouched()},e.$on("$destroy",function(){for(;x.length;)x.shift()()})}]).directive("uibTimepicker",["uibTimepickerConfig",function(e){return{require:["uibTimepicker","?^ngModel"],restrict:"A",controller:"UibTimepickerController",controllerAs:"timepicker",scope:{},templateUrl:function(t,n){return n.templateUrl||e.templateUrl},link:function(e,t,n,r){var i=r[0],o=r[1];o&&i.init(o,t.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var r=n.match(t);if(!r)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:r[3],source:e(r[4]),viewMapper:e(r[2]||r[1]),modelMapper:e(r[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(e,t,n,r,i,o,a,s,u,l,c,p,d){function f(){q.moveInProgress||(q.moveInProgress=!0,q.$digest()),Z()}function h(){q.position=A?p.offset(t):p.position(t),q.position.top+=t.prop("offsetHeight")}function m(e){var t;return angular.version.minor<6?(t=e.$options||{},t.getOption=function(e){return t[e]}):t=e.$options,t}var g,$,v=[9,13,27,38,40],b=e.$eval(n.typeaheadMinLength);b||0===b||(b=1),e.$watch(n.typeaheadMinLength,function(e){b=e||0===e?e:1});var y=e.$eval(n.typeaheadWaitMs)||0,w=!1!==e.$eval(n.typeaheadEditable);e.$watch(n.typeaheadEditable,function(e){w=!1!==e});var x,C,k=i(n.typeaheadLoading).assign||angular.noop,S=n.typeaheadShouldSelect?i(n.typeaheadShouldSelect):function(e,t){var n=t.$event;return 13===n.which||9===n.which},D=i(n.typeaheadOnSelect),E=!!angular.isDefined(n.typeaheadSelectOnBlur)&&e.$eval(n.typeaheadSelectOnBlur),O=i(n.typeaheadNoResults).assign||angular.noop,T=n.typeaheadInputFormatter?i(n.typeaheadInputFormatter):void 0,A=!!n.typeaheadAppendToBody&&e.$eval(n.typeaheadAppendToBody),M=n.typeaheadAppendTo?e.$eval(n.typeaheadAppendTo):null,P=!1!==e.$eval(n.typeaheadFocusFirst),I=!!n.typeaheadSelectOnExact&&e.$eval(n.typeaheadSelectOnExact),N=i(n.typeaheadIsOpen).assign||angular.noop,U=e.$eval(n.typeaheadShowHint)||!1,j=i(n.ngModel),V=i(n.ngModel+"($$$p)"),z=function(t,n){return angular.isFunction(j(e))&&$.getOption("getterSetter")?V(t,{$$$p:n}):j.assign(t,n)},R=d.parse(n.uibTypeahead),q=e.$new(),F=e.$on("$destroy",function(){q.$destroy()});q.$on("$destroy",F);var L="typeahead-"+q.$id+"-"+Math.floor(1e4*Math.random());t.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":L});var _,H;U&&(_=angular.element("<div></div>"),_.css("position","relative"),t.after(_),H=t.clone(),H.attr("placeholder",""),H.attr("tabindex","-1"),H.val(""),H.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),t.css({position:"relative","vertical-align":"top","background-color":"transparent"}),H.attr("id")&&H.removeAttr("id"),_.append(H),H.after(t));var B=angular.element("<div uib-typeahead-popup></div>");B.attr({id:L,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(n.typeaheadTemplateUrl)&&B.attr("template-url",n.typeaheadTemplateUrl),angular.isDefined(n.typeaheadPopupTemplateUrl)&&B.attr("popup-template-url",n.typeaheadPopupTemplateUrl);var W=function(){U&&H.val("")},Y=function(){q.matches=[],q.activeIdx=-1,t.attr("aria-expanded",!1),W()},G=function(e){return L+"-option-"+e};q.$watch("activeIdx",function(e){e<0?t.removeAttr("aria-activedescendant"):t.attr("aria-activedescendant",G(e))});var K=function(e,t){return!!(q.matches.length>t&&e)&&e.toUpperCase()===q.matches[t].label.toUpperCase()},J=function(n,r){var i={$viewValue:n};k(e,!0),O(e,!1),o.when(R.source(e,i)).then(function(o){var a=n===g.$viewValue;if(a&&x)if(o&&o.length>0){q.activeIdx=P?0:-1,O(e,!1),q.matches.length=0;for(var s=0;s<o.length;s++)i[R.itemName]=o[s],q.matches.push({id:G(s),label:R.viewMapper(q,i),model:o[s]});if(q.query=n,h(),t.attr("aria-expanded",!0),I&&1===q.matches.length&&K(n,0)&&(angular.isNumber(q.debounceUpdate)||angular.isObject(q.debounceUpdate)?c(function(){q.select(0,r)},angular.isNumber(q.debounceUpdate)?q.debounceUpdate:q.debounceUpdate.default):q.select(0,r)),U){var u=q.matches[0].label;angular.isString(n)&&n.length>0&&u.slice(0,n.length).toUpperCase()===n.toUpperCase()?H.val(n+u.slice(n.length)):H.val("")}}else Y(),O(e,!0);a&&k(e,!1)},function(){Y(),k(e,!1),O(e,!0)})};A&&(angular.element(u).on("resize",f),s.find("body").on("scroll",f));var Z=c(function(){q.matches.length&&h(),q.moveInProgress=!1},200);q.moveInProgress=!1,q.query=void 0;var Q,X=function(e){Q=a(function(){J(e)},y)},ee=function(){Q&&a.cancel(Q)};Y(),q.assignIsOpen=function(t){N(e,t)},q.select=function(r,i){var o,s,u={};C=!0,u[R.itemName]=s=q.matches[r].model,o=R.modelMapper(e,u),z(e,o),g.$setValidity("editable",!0),g.$setValidity("parse",!0),D(e,{$item:s,$model:o,$label:R.viewMapper(e,u),$event:i}),Y(),!1!==q.$eval(n.typeaheadFocusOnSelect)&&a(function(){t[0].focus()},0,!1)},t.on("keydown",function(t){if(0!==q.matches.length&&-1!==v.indexOf(t.which)){var n=S(e,{$event:t});if(-1===q.activeIdx&&n||9===t.which&&t.shiftKey)return Y(),void q.$digest();t.preventDefault();var r;switch(t.which){case 27:t.stopPropagation(),Y(),e.$digest();break;case 38:q.activeIdx=(q.activeIdx>0?q.activeIdx:q.matches.length)-1,q.$digest(),r=B[0].querySelectorAll(".uib-typeahead-match")[q.activeIdx],r.parentNode.scrollTop=r.offsetTop;break;case 40:q.activeIdx=(q.activeIdx+1)%q.matches.length,q.$digest(),r=B[0].querySelectorAll(".uib-typeahead-match")[q.activeIdx],r.parentNode.scrollTop=r.offsetTop;break;default:n&&q.$apply(function(){angular.isNumber(q.debounceUpdate)||angular.isObject(q.debounceUpdate)?c(function(){q.select(q.activeIdx,t)},angular.isNumber(q.debounceUpdate)?q.debounceUpdate:q.debounceUpdate.default):q.select(q.activeIdx,t)})}}}),t.on("focus",function(e){x=!0,0!==b||g.$viewValue||a(function(){J(g.$viewValue,e)},0)}),t.on("blur",function(e){E&&q.matches.length&&-1!==q.activeIdx&&!C&&(C=!0,q.$apply(function(){angular.isObject(q.debounceUpdate)&&angular.isNumber(q.debounceUpdate.blur)?c(function(){q.select(q.activeIdx,e)},q.debounceUpdate.blur):q.select(q.activeIdx,e)})),!w&&g.$error.editable&&(g.$setViewValue(),q.$apply(function(){g.$setValidity("editable",!0),g.$setValidity("parse",!0)}),t.val("")),x=!1,C=!1});var te=function(n){t[0]!==n.target&&3!==n.which&&0!==q.matches.length&&(Y(),l.$$phase||e.$digest())};s.on("click",te),e.$on("$destroy",function(){s.off("click",te),(A||M)&&ne.remove(),A&&(angular.element(u).off("resize",f),s.find("body").off("scroll",f)),B.remove(),U&&_.remove()});var ne=r(B)(q);A?s.find("body").append(ne):M?angular.element(M).eq(0).append(ne):t.after(ne),this.init=function(t){g=t,$=m(g),q.debounceUpdate=i($.getOption("debounce"))(e),g.$parsers.unshift(function(t){return x=!0,0===b||t&&t.length>=b?y>0?(ee(),X(t)):J(t):(k(e,!1),ee(),Y()),w?t:t?void g.$setValidity("editable",!1):(g.$setValidity("editable",!0),null)}),g.$formatters.push(function(t){var n,r,i={};return w||g.$setValidity("editable",!0),T?(i.$model=t,T(e,i)):(i[R.itemName]=t,n=R.viewMapper(e,i),i[R.itemName]=void 0,r=R.viewMapper(e,i),n!==r?n:t)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","uibTypeahead"],link:function(e,t,n,r){r[1].init(r[0])}}}).directive("uibTypeaheadPopup",["$$debounce",function(e){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(t,n,r){t.templateUrl=r.templateUrl,t.isOpen=function(){var e=t.matches.length>0;return t.assignIsOpen({isOpen:e}),e},t.isActive=function(e){return t.active===e},t.selectActive=function(e){t.active=e},t.selectMatch=function(n,r){var i=t.debounce();angular.isNumber(i)||angular.isObject(i)?e(function(){t.select({activeIdx:n,evt:r})},angular.isNumber(i)?i:i.default):t.select({activeIdx:n,evt:r})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{scope:{index:"=",match:"=",query:"="},link:function(r,i,o){var a=n(o.templateUrl)(r.$parent)||"uib/template/typeahead/typeahead-match.html";e(a).then(function(e){var n=angular.element(e.trim());i.replaceWith(n),t(n)(r)})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function r(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var o;return o=t.has("$sanitize"),function(t,a){return!o&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=a?(""+t).replace(new RegExp(r(a),"gi"),"<strong>$&</strong>"):t,o||(t=e.trustAsHtml(t)),t}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion-group.html",'<div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n  <h4 class="panel-title">\n    <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading" ng-disabled="isDisabled" uib-tabindex-toggle><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n  </h4>\n</div>\n<div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n  <div class="panel-body" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("uib/template/alert/alert.html",'<button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n  <span aria-hidden="true">&times;</span>\n  <span class="sr-only">Close</span>\n</button>\n<div ng-transclude></div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/carousel.html",'<div class="carousel-inner" ng-transclude></div>\n<a role="button" href class="left carousel-control" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n  <span class="sr-only">previous</span>\n</a>\n<a role="button" href class="right carousel-control" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n  <span class="sr-only">next</span>\n</a>\n<ol class="carousel-indicators" ng-show="slides.length > 1">\n  <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n    <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n  </li>\n</ol>\n')}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/slide.html",'<div class="text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/datepicker.html",'<div ng-switch="datepickerMode">\n  <div uib-daypicker ng-switch-when="day" tabindex="0" class="uib-daypicker"></div>\n  <div uib-monthpicker ng-switch-when="month" tabindex="0" class="uib-monthpicker"></div>\n  <div uib-yearpicker ng-switch-when="year" tabindex="0" class="uib-yearpicker"></div>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index" role="row">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::yearHeaderColspan}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepickerPopup/popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepickerPopup/popup.html",'<ul role="presentation" class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n  <li ng-transclude></li>\n  <li ng-if="showButtonBar" class="uib-button-bar">\n    <span class="btn-group pull-left">\n      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n    </span>\n    <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n  </li>\n</ul>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/window.html","<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n")}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pager/pager.html",'<li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pagination.html",'<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'first\')}}</a></li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li role="menuitem" ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle>{{page.text}}</a></li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'last\')}}</a></li>\n')}]),
angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind="content"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner"\n  uib-tooltip-template-transclude="contentExp()"\n  tooltip-template-transclude-scope="originScope()"></div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-html.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-template.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content"\n      uib-tooltip-template-transclude="contentExp()"\n      tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li class="uib-typeahead-match" ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0}),angular.module("ui.bootstrap.datepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0}),angular.module("ui.bootstrap.position").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'),angular.$$uibPositionCss=!0}),angular.module("ui.bootstrap.datepickerPopup").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerpopupCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'),angular.$$uibDatepickerpopupCss=!0}),angular.module("ui.bootstrap.tooltip").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0}),angular.module("ui.bootstrap.timepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0}),angular.module("ui.bootstrap.typeahead").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0}),function(e,t){"use strict";function n(e,t,n){if(!e)throw ue("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function r(e,t){return e||t?e?t?(W(e)&&(e=e.join(" ")),W(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function i(e){var t={};return e&&(e.to||e.from)&&(t.to=e.to,t.from=e.from),t}function o(e,t,n){var r="";return e=W(e)?e:e&&Z(e)&&e.length?e.split(/\s+/):[],B(e,function(e,i){e&&e.length>0&&(r+=i>0?" ":"",r+=n?t+e:e+t)}),r}function a(e,t){var n=e.indexOf(t);t>=0&&e.splice(n,1)}function s(e){if(e instanceof X)switch(e.length){case 0:return e;case 1:if(e[0].nodeType===V)return e;break;default:return X(u(e))}if(e.nodeType===V)return X(e)}function u(e){if(!e[0])return e;for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===V)return n}}function l(e,t,n){B(t,function(t){e.addClass(t,n)})}function c(e,t,n){B(t,function(t){e.removeClass(t,n)})}function p(e){return function(t,n){n.addClass&&(l(e,t,n.addClass),n.addClass=null),n.removeClass&&(c(e,t,n.removeClass),n.removeClass=null)}}function d(e){if(e=e||{},!e.$$prepared){var t=e.domOperation||ee;e.domOperation=function(){e.$$domOperationFired=!0,t(),t=ee},e.$$prepared=!0}return e}function f(e,t){h(e,t),m(e,t)}function h(e,t){t.from&&(e.css(t.from),t.from=null)}function m(e,t){t.to&&(e.css(t.to),t.to=null)}function g(e,t,n){var r=t.options||{},i=n.options||{},o=(r.addClass||"")+" "+(i.addClass||""),a=(r.removeClass||"")+" "+(i.removeClass||""),s=$(e.attr("class"),o,a);i.preparationClasses&&(r.preparationClasses=k(i.preparationClasses,r.preparationClasses),delete i.preparationClasses);var u=r.domOperation!==ee?r.domOperation:null;return H(r,i),u&&(r.domOperation=u),s.addClass?r.addClass=s.addClass:r.addClass=null,s.removeClass?r.removeClass=s.removeClass:r.removeClass=null,t.addClass=r.addClass,t.removeClass=r.removeClass,r}function $(e,t,n){function r(e){Z(e)&&(e=e.split(" "));var t={};return B(e,function(e){e.length&&(t[e]=!0)}),t}var i={};e=r(e),t=r(t),B(t,function(e,t){i[t]=1}),n=r(n),B(n,function(e,t){i[t]=1===i[t]?null:-1});var o={addClass:"",removeClass:""};return B(i,function(t,n){var r,i;1===t?(r="addClass",i=!e[n]||e[n+R]):-1===t&&(r="removeClass",i=e[n]||e[n+z]),i&&(o[r].length&&(o[r]+=" "),o[r]+=n)}),o}function v(e){return e instanceof X?e[0]:e}function b(e,t,n){var r="";t&&(r=o(t,q,!0)),n.addClass&&(r=k(r,o(n.addClass,z))),n.removeClass&&(r=k(r,o(n.removeClass,R))),r.length&&(n.preparationClasses=r,e.addClass(r))}function y(e,t){t.preparationClasses&&(e.removeClass(t.preparationClasses),t.preparationClasses=null),t.activeClasses&&(e.removeClass(t.activeClasses),t.activeClasses=null)}function w(e,t){var n=t?"-"+t+"s":"";return C(e,[ae,n]),[ae,n]}function x(e,t){var n=t?"paused":"",r=U+re;return C(e,[r,n]),[r,n]}function C(e,t){var n=t[0],r=t[1];e.style[n]=r}function k(e,t){return e?t?e+" "+t:e:t}function S(e){return[oe,e+"s"]}function D(e,t){return[t?ie:ae,e+"s"]}function E(e,t,n){var r=Object.create(null),i=e.getComputedStyle(t)||{};return B(n,function(e,t){var n=i[e];if(n){var o=n.charAt(0);("-"===o||"+"===o||o>=0)&&(n=O(n)),0===n&&(n=null),r[t]=n}}),r}function O(e){var t=0,n=e.split(/\s*,\s*/);return B(n,function(e){"s"===e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),e=parseFloat(e)||0,t=t?Math.max(e,t):e}),t}function T(e){return 0===e||null!=e}function A(e,t){var n=I,r=e+"s";return t?n+=te:r+=" linear all",[n,r]}function M(){var e=Object.create(null);return{flush:function(){e=Object.create(null)},count:function(t){var n=e[t];return n?n.total:0},get:function(t){var n=e[t];return n&&n.value},put:function(t,n){e[t]?e[t].total++:e[t]={total:1,value:n}}}}function P(e,t,n){B(n,function(n){e[n]=Y(e[n])?e[n]:t.style.getPropertyValue(n)})}var I,N,U,j,V=1,z="-add",R="-remove",q="ng-",F="ng-animate",L="$$ngAnimateChildren";void 0===e.ontransitionend&&void 0!==e.onwebkittransitionend?("-webkit-",I="WebkitTransition",N="webkitTransitionEnd transitionend"):(I="transition",N="transitionend"),void 0===e.onanimationend&&void 0!==e.onwebkitanimationend?("-webkit-",U="WebkitAnimation",j="webkitAnimationEnd animationend"):(U="animation",j="animationend");var _,H,B,W,Y,G,K,J,Z,Q,X,ee,te="Duration",ne="TimingFunction",re="PlayState",ie=U+"Delay",oe=U+te,ae=I+"Delay",se=I+te,ue=t.$$minErr("ng"),le=["$$rAF",function(e){function t(e){r=r.concat(e),n()}function n(){if(r.length){for(var t=r.shift(),o=0;o<t.length;o++)t[o]();i||e(function(){i||n()})}}var r,i;return r=t.queue=[],t.waitUntilQuiet=function(t){i&&i(),i=e(function(){i=null,t(),n()})},t}],ce=["$interpolate",function(e){return{link:function(t,n,r){function i(e){e="on"===e||"true"===e,n.data(L,e)}var o=r.ngAnimateChildren;Z(o)&&0===o.length?n.data(L,!0):(i(e(o)(t)),r.$observe("ngAnimateChildren",i))}}}],pe="$$animateCss",de=1e3,fe=3,he=1.5,me={transitionDuration:se,transitionDelay:ae,transitionProperty:I+"Property",animationDuration:oe,animationDelay:ie,animationIterationCount:U+"IterationCount"},ge={transitionDuration:se,transitionDelay:ae,animationDuration:oe,animationDelay:ie},$e=["$animateProvider",function(e){var t=M(),n=M();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(e,r,s,u,l,c,g,$){function b(e,t){var n="$$ngAnimateParentKey",r=e.parentNode;return(r[n]||(r[n]=++F))+"-"+e.getAttribute("class")+"-"+t}function y(n,r,i,o){var a=t.get(i);return a||(a=E(e,n,o),"infinite"===a.animationIterationCount&&(a.animationIterationCount=1)),t.put(i,a),a}function k(i,a,s,u){var l;if(t.count(s)>0&&!(l=n.get(s))){var c=o(a,"-stagger");r.addClass(i,c),l=E(e,i,u),l.animationDuration=Math.max(l.animationDuration,0),l.transitionDuration=Math.max(l.transitionDuration,0),r.removeClass(i,c),n.put(s,l)}return l||{}}function O(e){L.push(e),g.waitUntilQuiet(function(){t.flush(),n.flush();for(var e=l(),r=0;r<L.length;r++)L[r](e);L.length=0})}function M(e,t,n){var r=y(e,t,n,me),i=r.animationDelay,o=r.transitionDelay;return r.maxDelay=i&&o?Math.max(i,o):i||o,r.maxDuration=Math.max(r.animationDuration*r.animationIterationCount,r.transitionDuration),r}var V=p(r),F=0,L=[];return function(e,n){function l(){g()}function p(){g(!0)}function g(t){if(!(K||Z&&J)){K=!0,J=!1,H.$$skipPreparationClasses||r.removeClass(e,ye),r.removeClass(e,xe),x(G,!1),w(G,!1),B(se,function(e){G.style[e[0]]=""}),V(e,H),f(e,H),Object.keys(Y).length&&B(Y,function(e,t){e?G.style.setProperty(t,e):G.style.removeProperty(t)}),H.onDone&&H.onDone(),ce&&ce.length&&e.off(ce.join(" "),F);var n=e.data(pe);n&&(u.cancel(n[0].timer),e.removeData(pe)),Q&&Q.complete(!t)}}function y(e){Ue.blockTransition&&w(G,e),Ue.blockKeyframeAnimation&&x(G,!!e)}function E(){return Q=new s({end:l,cancel:p}),O(ee),g(),{$$willAnimate:!1,start:function(){return Q},end:l}}function F(e){e.stopPropagation();var t=e.originalEvent||e,n=t.$manualTimeStamp||Date.now(),r=parseFloat(t.elapsedTime.toFixed(fe));Math.max(n-ae,0)>=re&&r>=ie&&(Z=!0,g())}function L(){function t(){if(!K){if(y(!1),B(se,function(e){var t=e[0],n=e[1];G.style[t]=n}),V(e,H),r.addClass(e,xe),Ue.recalculateTimingStyles){if(we=G.getAttribute("class")+" "+ye,ke=b(G,we),Ie=M(G,we,ke),Ne=Ie.maxDelay,te=Math.max(Ne,0),0===(ie=Ie.maxDuration))return void g();Ue.hasTransitions=Ie.transitionDuration>0,Ue.hasAnimations=Ie.animationDuration>0}if(Ue.applyAnimationDelay&&(Ne="boolean"!=typeof H.delay&&T(H.delay)?parseFloat(H.delay):Ne,te=Math.max(Ne,0),Ie.animationDelay=Ne,je=D(Ne,!0),se.push(je),G.style[je[0]]=je[1]),re=te*de,oe=ie*de,H.easing){var t,i=H.easing;Ue.hasTransitions&&(t=I+ne,se.push([t,i]),G.style[t]=i),Ue.hasAnimations&&(t=U+ne,se.push([t,i]),G.style[t]=i)}Ie.transitionDuration&&ce.push(N),Ie.animationDuration&&ce.push(j),ae=Date.now();var o=re+he*oe,a=ae+o,s=e.data(pe)||[],l=!0;if(s.length){var c=s[0];l=a>c.expectedEndTime,l?u.cancel(c.timer):s.push(g)}if(l){var p=u(n,o,!1);s[0]={timer:p,expectedEndTime:a},s.push(g),e.data(pe,s)}ce.length&&e.on(ce.join(" "),F),H.to&&(H.cleanupStyles&&P(Y,G,Object.keys(H.to)),m(e,H))}}function n(){var t=e.data(pe);if(t){for(var n=1;n<t.length;n++)t[n]();e.removeData(pe)}}if(!K){if(!G.parentNode)return void g();var i=function(e){if(Z)J&&e&&(J=!1,g());else if(J=!e,Ie.animationDuration){var t=x(G,J);J?se.push(t):a(se,t)}},o=Me>0&&(Ie.transitionDuration&&0===Se.transitionDuration||Ie.animationDuration&&0===Se.animationDuration)&&Math.max(Se.animationDelay,Se.transitionDelay);o?u(t,Math.floor(o*Me*de),!1):t(),X.resume=function(){i(!0)},X.pause=function(){i(!1)}}}var H=n||{};H.$$prepared||(H=d(_(H)));var Y={},G=v(e);if(!G||!G.parentNode||!$.enabled())return E();var K,J,Z,Q,X,te,re,ie,oe,ae,se=[],ue=e.attr("class"),le=i(H),ce=[];if(0===H.duration||!c.animations&&!c.transitions)return E();var me=H.event&&W(H.event)?H.event.join(" "):H.event,$e=me&&H.structural,ve="",be="";$e?ve=o(me,q,!0):me&&(ve=me),H.addClass&&(be+=o(H.addClass,z)),H.removeClass&&(be.length&&(be+=" "),be+=o(H.removeClass,R)),H.applyClassesEarly&&be.length&&V(e,H);var ye=[ve,be].join(" ").trim(),we=ue+" "+ye,xe=o(ye,"-active"),Ce=le.to&&Object.keys(le.to).length>0;if(!((H.keyframeStyle||"").length>0||Ce||ye))return E();var ke,Se;if(H.stagger>0){var De=parseFloat(H.stagger);Se={transitionDelay:De,animationDelay:De,transitionDuration:0,animationDuration:0}}else ke=b(G,we),Se=k(G,ye,ke,ge);H.$$skipPreparationClasses||r.addClass(e,ye);var Ee;if(H.transitionStyle){var Oe=[I,H.transitionStyle];C(G,Oe),se.push(Oe)}if(H.duration>=0){Ee=G.style[I].length>0;var Te=A(H.duration,Ee);C(G,Te),se.push(Te)}if(H.keyframeStyle){var Ae=[U,H.keyframeStyle];C(G,Ae),se.push(Ae)}var Me=Se?H.staggerIndex>=0?H.staggerIndex:t.count(ke):0,Pe=0===Me;Pe&&!H.skipBlocking&&w(G,9999);var Ie=M(G,we,ke),Ne=Ie.maxDelay;te=Math.max(Ne,0),ie=Ie.maxDuration;var Ue={};if(Ue.hasTransitions=Ie.transitionDuration>0,Ue.hasAnimations=Ie.animationDuration>0,Ue.hasTransitionAll=Ue.hasTransitions&&"all"===Ie.transitionProperty,Ue.applyTransitionDuration=Ce&&(Ue.hasTransitions&&!Ue.hasTransitionAll||Ue.hasAnimations&&!Ue.hasTransitions),Ue.applyAnimationDuration=H.duration&&Ue.hasAnimations,Ue.applyTransitionDelay=T(H.delay)&&(Ue.applyTransitionDuration||Ue.hasTransitions),Ue.applyAnimationDelay=T(H.delay)&&Ue.hasAnimations,Ue.recalculateTimingStyles=be.length>0,(Ue.applyTransitionDuration||Ue.applyAnimationDuration)&&(ie=H.duration?parseFloat(H.duration):ie,Ue.applyTransitionDuration&&(Ue.hasTransitions=!0,Ie.transitionDuration=ie,Ee=G.style[I+"Property"].length>0,se.push(A(ie,Ee))),Ue.applyAnimationDuration&&(Ue.hasAnimations=!0,Ie.animationDuration=ie,se.push(S(ie)))),0===ie&&!Ue.recalculateTimingStyles)return E();if(null!=H.delay){var je;"boolean"!=typeof H.delay&&(je=parseFloat(H.delay),te=Math.max(je,0)),Ue.applyTransitionDelay&&se.push(D(je)),Ue.applyAnimationDelay&&se.push(D(je,!0))}return null==H.duration&&Ie.transitionDuration>0&&(Ue.recalculateTimingStyles=Ue.recalculateTimingStyles||Pe),re=te*de,oe=ie*de,H.skipBlocking||(Ue.blockTransition=Ie.transitionDuration>0,Ue.blockKeyframeAnimation=Ie.animationDuration>0&&Se.animationDelay>0&&0===Se.animationDuration),H.from&&(H.cleanupStyles&&P(Y,G,Object.keys(H.from)),h(e,H)),Ue.blockTransition||Ue.blockKeyframeAnimation?y(ie):H.skipBlocking||w(G,!1),{$$willAnimate:!0,end:l,start:function(){if(!K)return X={end:l,cancel:p,resume:null,pause:null},Q=new s(X),O(L),Q}}}}]}],ve=["$$animationProvider",function(e){function t(e){return e.parentNode&&11===e.parentNode.nodeType}e.drivers.push("$$animateCssDriver");var n="ng-animate-shim",r="ng-anchor-out";this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(e,i,o,a,s,u,l){function c(e){return e.replace(/\bng-\S+\b/g,"")}function p(e,t){return Z(e)&&(e=e.split(" ")),Z(t)&&(t=t.split(" ")),e.filter(function(e){return-1===t.indexOf(e)}).join(" ")}function d(t,i,a){function s(e){var t={},n=v(e).getBoundingClientRect();return B(["width","height","top","left"],function(e){var r=n[e];switch(e){case"top":r+=m.scrollTop;break;case"left":r+=m.scrollLeft}t[e]=Math.floor(r)+"px"}),t}function u(e){return e.attr("class")||""}function l(){var t=c(u(a)),n=p(t,h),i=p(h,t),o=e(f,{to:s(a),addClass:"ng-anchor-in "+n,removeClass:r+" "+i,delay:!0});return o.$$willAnimate?o:null}function d(){f.remove(),i.removeClass(n),a.removeClass(n)}var f=X(v(i).cloneNode(!0)),h=c(u(f));i.addClass(n),a.addClass(n),f.addClass("ng-anchor"),$.append(f);var g,b=function(){var t=e(f,{addClass:r,delay:!0,from:s(i)});return t.$$willAnimate?t:null}();if(!b&&!(g=l()))return d();var y=b||g;return{start:function(){function e(){n&&n.end()}var t,n=y.start();return n.done(function(){if(n=null,!g&&(g=l()))return n=g.start(),n.done(function(){n=null,d(),t.complete()}),n;d(),t.complete()}),t=new o({end:e,cancel:e})}}}function f(e,t,n,r){var i=h(e),a=h(t),s=[];if(B(r,function(e){var t=e.out,r=e.in,i=d(n,t,r);i&&s.push(i)}),i||a||0!==s.length)return{start:function(){function e(){B(t,function(e){e.end()})}var t=[];i&&t.push(i.start()),a&&t.push(a.start()),B(s,function(e){t.push(e.start())});var n=new o({end:e,cancel:e});return o.all(t,function(e){n.complete(e)}),n}}}function h(t){var n=t.element,r=t.options||{};t.structural&&(r.event=t.event,r.structural=!0,r.applyClassesEarly=!0,"leave"===t.event&&(r.onDone=r.domOperation)),r.preparationClasses&&(r.event=k(r.event,r.preparationClasses));var i=e(n,r);return i.$$willAnimate?i:null}if(!s.animations&&!s.transitions)return ee;var m=l[0].body,g=v(a),$=X(t(g)||m.contains(g)?g:m);return function(e){return e.from&&e.to?f(e.from,e.to,e.classes,e.anchors):h(e)}}]}],be=["$animateProvider",function(e){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(t,n,r){function i(n){n=W(n)?n:n.split(" ");for(var r=[],i={},o=0;o<n.length;o++){var a=n[o],s=e.$$registeredAnimations[a];s&&!i[a]&&(r.push(t.get(s)),i[a]=!0)}return r}var o=p(r);return function(e,t,r,a){function s(){a.domOperation(),o(e,a)}function u(){h=!0,s(),f(e,a)}function l(e,t,r,i,o){var a;switch(r){case"animate":a=[t,i.from,i.to,o];break;case"setClass":a=[t,$,v,o];break;case"addClass":a=[t,$,o];break;case"removeClass":a=[t,v,o];break;default:a=[t,o]}a.push(i);var s=e.apply(e,a);if(s)if(K(s.start)&&(s=s.start()),s instanceof n)s.done(o);else if(K(s))return s;return ee}function c(e,t,r,i,o){var a=[];return B(i,function(i){var s=i[o];s&&a.push(function(){var i,o,a=!1,u=function(e){a||(a=!0,(o||ee)(e),i.complete(!e))};return i=new n({end:function(){u()},cancel:function(){u(!0)}}),o=l(s,e,t,r,function(e){u(!1===e)}),i})}),a}function p(e,t,r,i,o){var a=c(e,t,r,i,o);if(0===a.length){var s,u;"beforeSetClass"===o?(s=c(e,"removeClass",r,i,"beforeRemoveClass"),u=c(e,"addClass",r,i,"beforeAddClass")):"setClass"===o&&(s=c(e,"removeClass",r,i,"removeClass"),u=c(e,"addClass",r,i,"addClass")),s&&(a=a.concat(s)),u&&(a=a.concat(u))}if(0!==a.length)return function(e){var t=[];return a.length&&B(a,function(e){t.push(e())}),t.length?n.all(t,e):e(),function(e){B(t,function(t){e?t.cancel():t.end()})}}}var h=!1;3===arguments.length&&J(r)&&(a=r,r=null),a=d(a),r||(r=e.attr("class")||"",a.addClass&&(r+=" "+a.addClass),a.removeClass&&(r+=" "+a.removeClass));var m,g,$=a.addClass,v=a.removeClass,b=i(r);if(b.length){var y,w;"leave"===t?(w="leave",y="afterLeave"):(w="before"+t.charAt(0).toUpperCase()+t.substr(1),y=t),"enter"!==t&&"move"!==t&&(m=p(e,t,a,b,w)),g=p(e,t,a,b,y)}if(m||g){var x;return{$$willAnimate:!0,end:function(){return x?x.end():(u(),x=new n,x.complete(!0)),x},start:function(){function e(e){u(e),x.complete(e)}function t(t){h||((r||ee)(t),e(t))}if(x)return x;x=new n;var r,i=[];return m&&i.push(function(e){r=m(e)}),i.length?i.push(function(e){s(),e(!0)}):s(),g&&i.push(function(e){r=g(e)}),x.setHost({end:function(){t()},cancel:function(){t(!0)}}),n.chain(i,e),x}}}}}]}],ye=["$$animationProvider",function(e){e.drivers.push("$$animateJsDriver"),this.$get=["$$animateJs","$$AnimateRunner",function(e,t){function n(t){var n=t.element,r=t.event,i=t.options,o=t.classes;return e(n,r,o,i)}return function(e){if(e.from&&e.to){var r=n(e.from),i=n(e.to);if(!r&&!i)return;return{start:function(){function e(){return function(){B(o,function(e){e.end()})}}function n(e){a.complete(e)}var o=[];r&&o.push(r.start()),i&&o.push(i.start()),t.all(o,n);var a=new t({end:e(),cancel:e()});return a}}}return n(e)}}]}],we="data-ng-animate",xe="$ngAnimatePin",Ce=["$animateProvider",function(t){function r(e){if(!e)return null;var t=e.split(h),n=Object.create(null);return B(t,function(e){n[e]=!0}),n}function i(e,t){if(e&&t){var n=r(t);return e.split(h).some(function(e){return n[e]})}}function o(e,t,n){return m[e].some(function(e){return e(t,n)})}function a(e,t){var n=(e.addClass||"").length>0,r=(e.removeClass||"").length>0;return t?n&&r:n||r}var l=1,c=2,h=" ",m=this.rules={skip:[],cancel:[],join:[]};m.join.push(function(e,t){return!e.structural&&a(e)}),m.skip.push(function(e,t){return!e.structural&&!a(e)}),m.skip.push(function(e,t){return"leave"===t.event&&e.structural}),m.skip.push(function(e,t){return t.structural&&t.state===c&&!e.structural}),m.cancel.push(function(e,t){return t.structural&&e.structural}),m.cancel.push(function(e,t){return t.state===c&&e.structural}),m.cancel.push(function(e,t){if(t.structural)return!1;var n=e.addClass,r=e.removeClass,o=t.addClass,a=t.removeClass;return!(Q(n)&&Q(r)||Q(o)&&Q(a))&&(i(n,a)||i(r,o))}),this.$get=["$$rAF","$rootScope","$rootElement","$document","$$Map","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow","$$isDocumentHidden",function(r,i,h,m,$,w,x,C,k,S,D){function E(){var e=!1;return function(t){
e?t():i.$$postDigest(function(){e=!0,t()})}}function O(e,t){return g(e,t,{})}function T(e,t,n){var r=[],i=K[n];return i&&B(i,function(i){re.call(i.node,t)?r.push(i.callback):"leave"===n&&re.call(i.node,e)&&r.push(i.callback)}),r}function A(e,t,n){var r=u(t);return e.filter(function(e){return!(e.node===r&&(!n||e.callback===n))})}function M(e,t){"close"!==e||t.parentNode||ie.off(t)}function P(e,t,n){function u(e,t,n,i){S(function(){var e=T(C,$,t);e.length?r(function(){B(e,function(e){e(m,n,i)}),M(n,$)}):M(n,$)}),e.progress(t,n,i)}function p(e){y(m,h),ne(m,h),f(m,h),h.domOperation(),k.complete(!e)}var h=_(n),m=s(e),$=v(m),C=$&&$.parentNode;h=d(h);var k=new x,S=E();if(W(h.addClass)&&(h.addClass=h.addClass.join(" ")),h.addClass&&!Z(h.addClass)&&(h.addClass=null),W(h.removeClass)&&(h.removeClass=h.removeClass.join(" ")),h.removeClass&&!Z(h.removeClass)&&(h.removeClass=null),h.from&&!J(h.from)&&(h.from=null),h.to&&!J(h.to)&&(h.to=null),!$)return p(),k;var A=[$.getAttribute("class"),h.addClass,h.removeClass].join(" ");if(!te(A))return p(),k;var P=["enter","move","leave"].indexOf(t)>=0,V=D(),F=!q||V||R.get($),L=!F&&z.get($)||{},H=!!L.state;if(F||H&&L.state===l||(F=!U($,C,t)),F)return V&&u(k,t,"start"),p(),V&&u(k,t,"close"),k;P&&I($);var Y={structural:P,element:m,event:t,addClass:h.addClass,removeClass:h.removeClass,close:p,options:h,runner:k};if(H){if(o("skip",Y,L))return L.state===c?(p(),k):(g(m,L,Y),L.runner);if(o("cancel",Y,L))if(L.state===c)L.runner.end();else{if(!L.structural)return g(m,L,Y),L.runner;L.close()}else{if(o("join",Y,L)){if(L.state!==c)return b(m,P?t:null,h),t=Y.event=L.event,h=g(m,L,Y),L.runner;O(m,Y)}}}else O(m,Y);var G=Y.structural;if(G||(G="animate"===Y.event&&Object.keys(Y.options.to||{}).length>0||a(Y)),!G)return p(),N($),k;var K=(L.counter||0)+1;return Y.counter=K,j($,l,Y),i.$$postDigest(function(){m=s(e);var n=z.get($),r=!n;n=n||{};var i=m.parent()||[],o=i.length>0&&("animate"===n.event||n.structural||a(n));if(r||n.counter!==K||!o)return r&&(ne(m,h),f(m,h)),(r||P&&n.event!==t)&&(h.domOperation(),k.end()),void(o||N($));t=!n.structural&&a(n,!0)?"setClass":n.event,j($,c);var l=w(m,t,n.options);k.setHost(l),u(k,t,"start",{}),l.done(function(e){p(!e);var n=z.get($);n&&n.counter===K&&N($),u(k,t,"close",{})})}),k}function I(e){var t=e.querySelectorAll("["+we+"]");B(t,function(e){var t=parseInt(e.getAttribute(we),10),n=z.get(e);if(n)switch(t){case c:n.runner.end();case l:z.delete(e)}})}function N(e){e.removeAttribute(we),z.delete(e)}function U(e,t,n){var r,i=m[0].body,o=v(h),a=e===i||"HTML"===e.nodeName,s=e===o,u=!1,l=R.get(e),c=X.data(e,xe);for(c&&(t=v(c));t&&(s||(s=t===o),t.nodeType===V);){var p=z.get(t)||{};if(!u){var d=R.get(t);if(!0===d&&!1!==l){l=!0;break}!1===d&&(l=!1),u=p.structural}if(Q(r)||!0===r){var f=X.data(t,L);Y(f)&&(r=f)}if(u&&!1===r)break;if(a||(a=t===i),a&&s)break;t=s||!(c=X.data(t,xe))?t.parentNode:v(c)}return(!u||r)&&!0!==l&&s&&a}function j(e,t,n){n=n||{},n.state=t,e.setAttribute(we,t);var r=z.get(e),i=r?H(r,n):n;z.set(e,i)}var z=new $,R=new $,q=null,F=i.$watch(function(){return 0===C.totalPendingRequests},function(e){e&&(F(),i.$$postDigest(function(){i.$$postDigest(function(){null===q&&(q=!0)})}))}),K=Object.create(null),ee=t.classNameFilter(),te=ee?function(e){return ee.test(e)}:function(){return!0},ne=p(k),re=e.Node.prototype.contains||function(e){return this===e||!!(16&this.compareDocumentPosition(e))},ie={on:function(e,t,n){var r=u(t);K[e]=K[e]||[],K[e].push({node:r,callback:n}),X(t).on("$destroy",function(){z.get(r)||ie.off(e,t,n)})},off:function(e,t,n){if(1!==arguments.length||Z(arguments[0])){var r=K[e];r&&(K[e]=1===arguments.length?null:A(r,t,n))}else{t=arguments[0];for(var i in K)K[i]=A(K[i],t)}},pin:function(e,t){n(G(e),"element","not an element"),n(G(t),"parentElement","not an element"),e.data(xe,t)},push:function(e,t,n,r){return n=n||{},n.domOperation=r,P(e,t,n)},enabled:function(e,t){var n=arguments.length;if(0===n)t=!!q;else{if(G(e)){var r=v(e);1===n?t=!R.get(r):R.set(r,!t)}else t=q=!!e}return t}};return ie}]}],ke=["$animateProvider",function(e){function t(e,t){e.data(s,t)}function n(e){e.removeData(s)}function i(e){return e.data(s)}var o="ng-animate-ref",a=this.drivers=[],s="$$animationRunner";this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$Map","$$rAFScheduler",function(e,s,u,l,c,h){function m(e){function t(e){if(e.processed)return e;e.processed=!0;var n=e.domNode,o=n.parentNode;i.set(n,e);for(var a;o;){if(a=i.get(o)){a.processed||(a=t(a));break}o=o.parentNode}return(a||r).children.push(e),e}var n,r={children:[]},i=new c;for(n=0;n<e.length;n++){var o=e[n];i.set(o.domNode,e[n]={domNode:o.domNode,fn:o.fn,children:[]})}for(n=0;n<e.length;n++)t(e[n]);return function(e){var t,n=[],r=[];for(t=0;t<e.children.length;t++)r.push(e.children[t]);var i=r.length,o=0,a=[];for(t=0;t<r.length;t++){var s=r[t];i<=0&&(i=o,o=0,n.push(a),a=[]),a.push(s.fn),s.children.forEach(function(e){o++,r.push(e)}),i--}return a.length&&n.push(a),n}(r)}var g=[],$=p(e);return function(c,p,b){function y(e){var t="["+o+"]",n=e.hasAttribute(o)?[e]:e.querySelectorAll(t),r=[];return B(n,function(e){var t=e.getAttribute(o);t&&t.length&&r.push(e)}),r}function w(e){var t=[],n={};B(e,function(e,r){var i=e.element,a=v(i),s=e.event,u=["enter","move"].indexOf(s)>=0,l=e.structural?y(a):[];if(l.length){var c=u?"to":"from";B(l,function(e){var t=e.getAttribute(o);n[t]=n[t]||{},n[t][c]={animationID:r,element:X(e)}})}else t.push(e)});var r={},i={};return B(n,function(n,o){var a=n.from,s=n.to;if(!a||!s){var u=a?a.animationID:s.animationID,l=u.toString();return void(r[l]||(r[l]=!0,t.push(e[u])))}var c=e[a.animationID],p=e[s.animationID],d=a.animationID.toString();if(!i[d]){var f=i[d]={structural:!0,beforeStart:function(){c.beforeStart(),p.beforeStart()},close:function(){c.close(),p.close()},classes:x(c.classes,p.classes),from:c,to:p,anchors:[]};f.classes.length?t.push(f):(t.push(c),t.push(p))}i[d].anchors.push({out:a.element,in:s.element})}),t}function x(e,t){e=e.split(" "),t=t.split(" ");for(var n=[],r=0;r<e.length;r++){var i=e[r];if("ng-"!==i.substring(0,3))for(var o=0;o<t.length;o++)if(i===t[o]){n.push(i);break}}return n.join(" ")}function C(e){for(var t=a.length-1;t>=0;t--){var n=a[t],r=u.get(n),i=r(e);if(i)return i}}function k(){c.addClass(F),M&&e.addClass(c,M),P&&(e.removeClass(c,P),P=null)}function S(e,t){function n(e){var n=i(e);n&&n.setHost(t)}e.from&&e.to?(n(e.from.element),n(e.to.element)):n(e.element)}function D(){var e=i(c);!e||"leave"===p&&b.$$domOperationFired||e.end()}function E(t){c.off("$destroy",D),n(c),$(c,b),f(c,b),b.domOperation(),M&&e.removeClass(c,M),c.removeClass(F),T.complete(!t)}b=d(b);var O=["enter","move","leave"].indexOf(p)>=0,T=new l({end:function(){E()},cancel:function(){E(!0)}});if(!a.length)return E(),T;t(c,T);var A=r(c.attr("class"),r(b.addClass,b.removeClass)),M=b.tempClasses;M&&(A+=" "+M,b.tempClasses=null);var P;return O&&(P="ng-"+p+"-prepare",e.addClass(c,P)),g.push({element:c,classes:A,event:p,structural:O,options:b,beforeStart:k,close:E}),c.on("$destroy",D),g.length>1?T:(s.$$postDigest(function(){var e=[];B(g,function(t){i(t.element)?e.push(t):t.close()}),g.length=0;var t=w(e),n=[];B(t,function(e){n.push({domNode:v(e.from?e.from.element:e.element),fn:function(){e.beforeStart();var t,n=e.close;if(i(e.anchors?e.from.element||e.to.element:e.element)){var r=C(e);r&&(t=r.start)}if(t){var o=t();o.done(function(e){n(!e)}),S(e,o)}else n()}})}),h(m(n))}),T)}}]}],Se=["$animate","$rootScope",function(e,t){return{restrict:"A",transclude:"element",terminal:!0,priority:600,link:function(t,n,r,i,o){var a,s;t.$watchCollection(r.ngAnimateSwap||r.for,function(r){a&&e.leave(a),s&&(s.$destroy(),s=null),(r||0===r)&&(s=t.$new(),o(s,function(t){a=t,e.enter(t,null,n)}))})}}}];t.module("ngAnimate",[],function(){ee=t.noop,_=t.copy,H=t.extend,X=t.element,B=t.forEach,W=t.isArray,Z=t.isString,J=t.isObject,Q=t.isUndefined,Y=t.isDefined,K=t.isFunction,G=t.isElement}).info({angularVersion:"1.6.4"}).directive("ngAnimateSwap",Se).directive("ngAnimateChildren",ce).factory("$$rAFScheduler",le).provider("$$animateQueue",Ce).provider("$$animation",ke).provider("$animateCss",$e).provider("$$animateCssDriver",ve).provider("$$animateJs",be).provider("$$animateJsDriver",ye)}(window,window.angular),function(e,t){"use strict";function n(){function e(e,t){if(e)return i(e)?e.indexOf(t)>=0:e.hasOwnProperty(t)}return["$animate",function(t){return{restrict:"AE",transclude:"element",priority:1,terminal:!0,require:"^^ngMessages",link:function(n,r,o,a,s){var u,l=r[0],c=o.ngMessage||o.when,p=o.ngMessageExp||o.whenExp,d=function(e){u=e?i(e)?e:e.split(/[\s,]+/):null,a.reRender()};p?(d(n.$eval(p)),n.$watchCollection(p,d)):d(c);var f,h;a.register(l,h={test:function(t){return e(u,t)},attach:function(){f||s(function(e,n){t.enter(e,null,r),f=e;var i=f.$$attachId=a.getAttachId();f.on("$destroy",function(){f&&f.$$attachId===i&&(a.deregister(l),h.detach()),n.$destroy()})})},detach:function(){if(f){var e=f;f=null,t.leave(e)}}})}}}]}var r,i,o,a;t.module("ngMessages",[],function(){r=t.forEach,i=t.isArray,o=t.isString,a=t.element}).info({angularVersion:"1.6.4"}).directive("ngMessages",["$animate",function(e){function t(e,t){return o(t)&&0===t.length||n(e.$eval(t))}function n(e){return o(e)?e.length:!!e}return{require:"ngMessages",restrict:"AE",controller:["$element","$scope","$attrs",function(i,o,a){function s(e,t){for(var n=t,r=[];n&&n!==e;){var i=n.$$ngMessageNode;if(i&&i.length)return m[i];n.childNodes.length&&-1===r.indexOf(n)?(r.push(n),n=n.childNodes[n.childNodes.length-1]):n.previousSibling?n=n.previousSibling:(n=n.parentNode,r.push(n))}}function u(e,t,n){var r=m[n];if(c.head){var i=s(e,t);i?(r.next=i.next,i.next=r):(r.next=c.head,c.head=r)}else c.head=r}function l(e,t,n){var r=m[n],i=s(e,t);i?i.next=r.next:c.head=r.next}var c=this,p=0,d=0;this.getAttachId=function(){return d++};var f,h,m=this.messages={};this.render=function(s){s=s||{},f=!1,h=s;for(var u=t(o,a.ngMessagesMultiple)||t(o,a.multiple),l=[],p={},d=c.head,m=!1,g=0;null!=d;){g++;var $=d.message,v=!1;m||r(s,function(e,t){if(!v&&n(e)&&$.test(t)){if(p[t])return;p[t]=!0,v=!0,$.attach()}}),v?m=!u:l.push($),d=d.next}r(l,function(e){e.detach()}),l.length!==g?e.setClass(i,"ng-active","ng-inactive"):e.setClass(i,"ng-inactive","ng-active")},o.$watchCollection(a.ngMessages||a.for,c.render),i.on("$destroy",function(){r(m,function(e){e.message.detach()})}),this.reRender=function(){f||(f=!0,o.$evalAsync(function(){f&&h&&c.render(h)}))},this.register=function(e,t){var n=p.toString();m[n]={message:t},u(i[0],e,n),e.$$ngMessageNode=n,p++,c.reRender()},this.deregister=function(e){var t=e.$$ngMessageNode;delete e.$$ngMessageNode,l(i[0],e,t),delete m[t],c.reRender()}}]}}]).directive("ngMessagesInclude",["$templateRequest","$document","$compile",function(e,t,n){function r(e,r){var i=n.$$createComment?n.$$createComment("ngMessagesInclude",r):t[0].createComment(" ngMessagesInclude: "+r+" "),o=a(i);e.after(o),e.remove()}return{restrict:"AE",require:"^^ngMessages",link:function(t,i,a){var s=a.ngMessagesInclude||a.src;e(s).then(function(e){t.$$destroyed||(o(e)&&!e.trim()?r(i,s):n(e)(t,function(e){i.after(e),r(i,s)}))})}}}]).directive("ngMessage",n()).directive("ngMessageExp",n())}(window,window.angular),angular.module("property-app",["ui.router","ngResource","satellizer","checklist-model","ui.bootstrap","ngAnimate","ngMessages"]).constant("API_URL","https://thawing-scrubland-24337.herokuapp.com").filter("startFrom",function(){return function(e,t){return e.slice(t)}}),angular.module("property-app").config(Auth),Auth.$inject=["$authProvider","API_URL"],angular.module("property-app").config(Router),Router.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("property-app").controller("AuthCtrl",AuthCtrl),AuthCtrl.$inject=["$auth","$state"],angular.module("property-app").controller("MainCtrl",MainCtrl),MainCtrl.$inject=["$rootScope","$state","$auth"],angular.module("property-app").controller("PaymentController",PaymentController),PaymentController.$inject=["$http","API_URL"],angular.module("property-app").controller("PostsIndexCtrl",PostsIndexCtrl).controller("PostsNewCtrl",PostsNewCtrl).controller("PostsShowCtrl",PostsShowCtrl).controller("PostsEditCtrl",PostsEditCtrl),PostsIndexCtrl.$inject=["Post","filterFilter","$scope"],PostsNewCtrl.$inject=["Post","User","$state"],PostsShowCtrl.$inject=["Post","User","Comment","$stateParams","$state","$auth"],PostsEditCtrl.$inject=["Post","User","$stateParams","$state"],angular.module("property-app").controller("UsersIndexCtrl",UsersIndexCtrl).controller("UsersShowCtrl",UsersShowCtrl),UsersIndexCtrl.$inject=["User"],UsersShowCtrl.$inject=["User","$stateParams","$state","$auth"],angular.module("property-app").directive("base64",base64),angular.module("property-app").factory("Comment",Comment),Comment.$inject=["$resource","API_URL"],angular.module("property-app").factory("Post",Post),Post.$inject=["$resource","API_URL"],angular.module("property-app").factory("User",User),User.$inject=["$resource","API_URL"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJBdXRoIiwiJGF1dGhQcm92aWRlciIsIkFQSV9VUkwiLCJzaWdudXBVcmwiLCJsb2dpblVybCIsIlJvdXRlciIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIm90aGVyd2lzZSIsIkF1dGhDdHJsIiwiJGF1dGgiLCIkc3RhdGUiLCJyZWdpc3RlciIsInNpZ251cCIsInZtIiwidXNlciIsInRoZW4iLCJnbyIsImxvZ2luIiwiY3JlZGVudGlhbHMiLCJ0aGlzIiwiTWFpbkN0cmwiLCIkcm9vdFNjb3BlIiwibG9nb3V0IiwiJG9uIiwic3RhdGVIYXNDaGFuZ2VkIiwibWVzc2FnZSIsImlzTmF2Q29sbGFwc2VkIiwiaXNBdXRoZW50aWNhdGVkIiwiZSIsImVyciIsImRhdGEiLCJnZXRQYXlsb2FkIiwiY3VycmVudFVzZXIiLCJwcm90ZWN0ZWRTdGF0ZXMiLCJ0b1N0YXRlIiwiaW5jbHVkZXMiLCJuYW1lIiwicHJldmVudERlZmF1bHQiLCJwYWdlTmFtZSIsIlBheW1lbnRDb250cm9sbGVyIiwiJGh0dHAiLCJzZWxmIiwiY2FyZCIsInBheWVlIiwiYW1vdW50IiwiY3VycmVuY3kiLCJwYXltZW50U3VjY2Vzc2Z1bCIsInBheSIsIlN0cmlwZSIsImNyZWF0ZVRva2VuIiwic3RhdHVzIiwicmVzcG9uc2UiLCJ0b2tlbiIsImlkIiwicG9zdCIsInJlcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJyZXNldCIsIkZvcm0iLCIkc2V0UHJpc3RpbmUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIlBvc3RzSW5kZXhDdHJsIiwiUG9zdCIsImZpbHRlckZpbHRlciIsIiRzY29wZSIsImFsbCIsInF1ZXJ5IiwicGFnZVNpemUiLCJjdXJyZW50UGFnZSIsIlBvc3RzTmV3Q3RybCIsIlVzZXIiLCJwb3N0c0NyZWF0ZSIsInNhdmUiLCIkcHJvbWlzZSIsImltYWdlIiwidXNlcnMiLCJjcmVhdGUiLCJQb3N0c1Nob3dDdHJsIiwiQ29tbWVudCIsIiRzdGF0ZVBhcmFtcyIsInBvc3RzRGVsZXRlIiwiJHJlbW92ZSIsImdldCIsImNvbW1lbnQiLCJkZWxldGUiLCJQb3N0c0VkaXRDdHJsIiwicG9zdHNVcGRhdGUiLCJ1cGRhdGUiLCJVc2Vyc0luZGV4Q3RybCIsIlVzZXJzU2hvd0N0cmwiLCJ1c2Vyc0RlbGV0ZSIsImJhc2U2NCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVzdHJpY3QiLCJyZXF1aXJlIiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsIm5nTW9kZWwiLCJvbmxvYWQiLCIkc2V0Vmlld1ZhbHVlIiwicmVzdWx0Iiwib24iLCJmaWxlIiwidGFyZ2V0IiwiZmlsZXMiLCJkYXRhVHJhbnNmZXIiLCJyZWFkQXNEYXRhVVJMIiwiJHJlc291cmNlIiwibWV0aG9kIiwid2luZG93IiwibWluRXJyIiwibW9kdWxlIiwiRXJyb3JDb25zdHJ1Y3RvciIsIkVycm9yIiwicGFyYW1QcmVmaXgiLCJpIiwiY29kZSIsImFyZ3VtZW50cyIsInRlbXBsYXRlIiwidGVtcGxhdGVBcmdzIiwic2xpY2VBcmdzIiwibWFwIiwiYXJnIiwidG9EZWJ1Z1N0cmluZyIsIm1pbkVyckNvbmZpZyIsIm9iamVjdE1heERlcHRoIiwicmVwbGFjZSIsIm1hdGNoIiwiaW5kZXgiLCJzbGljZSIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImVycm9ySGFuZGxpbmdDb25maWciLCJjb25maWciLCJpc09iamVjdCIsImlzRGVmaW5lZCIsImlzVmFsaWRPYmplY3RNYXhEZXB0aCIsIk5hTiIsIm1heERlcHRoIiwiaXNOdW1iZXIiLCJpc0FycmF5TGlrZSIsIm9iaiIsImlzV2luZG93IiwiaXNBcnJheSIsImlzU3RyaW5nIiwianFMaXRlIiwiT2JqZWN0IiwiQXJyYXkiLCJpdGVtIiwiZm9yRWFjaCIsIml0ZXJhdG9yIiwiY29udGV4dCIsImtleSIsImlzRnVuY3Rpb24iLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc1ByaW1pdGl2ZSIsImlzQmxhbmtPYmplY3QiLCJmb3JFYWNoU29ydGVkIiwia2V5cyIsInNvcnQiLCJyZXZlcnNlUGFyYW1zIiwiaXRlcmF0b3JGbiIsInZhbHVlIiwibmV4dFVpZCIsInVpZCIsInNldEhhc2hLZXkiLCJoIiwiJCRoYXNoS2V5IiwiYmFzZUV4dGVuZCIsImRzdCIsIm9ianMiLCJkZWVwIiwiaWkiLCJqIiwiamoiLCJzcmMiLCJpc0RhdGUiLCJEYXRlIiwidmFsdWVPZiIsImlzUmVnRXhwIiwiUmVnRXhwIiwibm9kZU5hbWUiLCJjbG9uZU5vZGUiLCJpc0VsZW1lbnQiLCJjbG9uZSIsImV4dGVuZCIsIm1lcmdlIiwidG9JbnQiLCJzdHIiLCJwYXJzZUludCIsImluaGVyaXQiLCJwYXJlbnQiLCJleHRyYSIsIm5vb3AiLCJpZGVudGl0eSIsIiQiLCJ2YWx1ZUZuIiwiaGFzQ3VzdG9tVG9TdHJpbmciLCJ0b1N0cmluZyIsImlzVW5kZWZpbmVkIiwiZ2V0UHJvdG90eXBlT2YiLCJpc1Njb3BlIiwiJGV2YWxBc3luYyIsIiR3YXRjaCIsImlzRmlsZSIsImlzRm9ybURhdGEiLCJpc0Jsb2IiLCJpc0Jvb2xlYW4iLCJpc1Byb21pc2VMaWtlIiwiaXNUeXBlZEFycmF5IiwiVFlQRURfQVJSQVlfUkVHRVhQIiwidGVzdCIsImlzQXJyYXlCdWZmZXIiLCJub2RlIiwicHJvcCIsImF0dHIiLCJmaW5kIiwibWFrZU1hcCIsIml0ZW1zIiwic3BsaXQiLCJub2RlTmFtZV8iLCJsb3dlcmNhc2UiLCJhcnJheSIsInByb3RvdHlwZSIsImluZGV4T2YiLCJhcnJheVJlbW92ZSIsInNwbGljZSIsImNvcHkiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsImNvcHlSZWN1cnNlIiwicHVzaCIsImNvcHlFbGVtZW50Iiwic3RhY2tTb3VyY2UiLCJzdGFja0Rlc3QiLCJuZ01pbkVyciIsIm5lZWRzUmVjdXJzZSIsImNvcHlUeXBlIiwidW5kZWZpbmVkIiwiY29uc3RydWN0b3IiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiY29waWVkIiwiQXJyYXlCdWZmZXIiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsInNldCIsInJlIiwibGFzdEluZGV4IiwidHlwZSIsInNpbXBsZUNvbXBhcmUiLCJhIiwiYiIsImVxdWFscyIsIm8xIiwibzIiLCJrZXlTZXQiLCJ0MSIsInQyIiwiZ2V0VGltZSIsImNyZWF0ZU1hcCIsImNoYXJBdCIsImNvbmNhdCIsImFycmF5MSIsImFycmF5MiIsImFyZ3MiLCJzdGFydEluZGV4IiwiYmluZCIsImZuIiwiY3VycnlBcmdzIiwiYXBwbHkiLCJ0b0pzb25SZXBsYWNlciIsInZhbCIsInRvSnNvbiIsInByZXR0eSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tSnNvbiIsImpzb24iLCJwYXJzZSIsInRpbWV6b25lVG9PZmZzZXQiLCJ0aW1lem9uZSIsImZhbGxiYWNrIiwiQUxMX0NPTE9OUyIsInJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0IiwiaXNOdW1iZXJOYU4iLCJhZGREYXRlTWludXRlcyIsImRhdGUiLCJtaW51dGVzIiwic2V0TWludXRlcyIsImdldE1pbnV0ZXMiLCJjb252ZXJ0VGltZXpvbmVUb0xvY2FsIiwicmV2ZXJzZSIsImRhdGVUaW1lem9uZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0Iiwic3RhcnRpbmdUYWciLCJlbXB0eSIsImVsZW1IdG1sIiwiYXBwZW5kIiwiaHRtbCIsIm5vZGVUeXBlIiwiTk9ERV9UWVBFX1RFWFQiLCJ0cnlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUtleVZhbHVlIiwia2V5VmFsdWUiLCJzcGxpdFBvaW50Iiwic3Vic3RyaW5nIiwidG9LZXlWYWx1ZSIsInBhcnRzIiwiYXJyYXlWYWx1ZSIsImVuY29kZVVyaVF1ZXJ5Iiwiam9pbiIsImVuY29kZVVyaVNlZ21lbnQiLCJwY3RFbmNvZGVTcGFjZXMiLCJnZXROZ0F0dHJpYnV0ZSIsIm5nQXR0ciIsIm5nQXR0clByZWZpeGVzIiwiZ2V0QXR0cmlidXRlIiwiYW5ndWxhckluaXQiLCJib290c3RyYXAiLCJhcHBFbGVtZW50IiwicHJlZml4IiwiaGFzQXR0cmlidXRlIiwiY2FuZGlkYXRlIiwicXVlcnlTZWxlY3RvciIsImlzQXV0b0Jvb3RzdHJhcEFsbG93ZWQiLCJjb25zb2xlIiwiZXJyb3IiLCJzdHJpY3REaSIsIm1vZHVsZXMiLCJkb0Jvb3RzdHJhcCIsImluamVjdG9yIiwidGFnIiwidW5zaGlmdCIsIiRwcm92aWRlIiwiZGVidWdJbmZvRW5hYmxlZCIsIiRjb21waWxlUHJvdmlkZXIiLCJjcmVhdGVJbmplY3RvciIsImludm9rZSIsInNjb3BlIiwiY29tcGlsZSIsIiRhcHBseSIsIk5HX0VOQUJMRV9ERUJVR19JTkZPIiwiTkdfREVGRVJfQk9PVFNUUkFQIiwiYW5ndWxhciIsInJlc3VtZUJvb3RzdHJhcCIsImV4dHJhTW9kdWxlcyIsInJlc3VtZURlZmVycmVkQm9vdHN0cmFwIiwicmVsb2FkV2l0aERlYnVnSW5mbyIsImxvY2F0aW9uIiwicmVsb2FkIiwiZ2V0VGVzdGFiaWxpdHkiLCJyb290RWxlbWVudCIsInNuYWtlX2Nhc2UiLCJzZXBhcmF0b3IiLCJTTkFLRV9DQVNFX1JFR0VYUCIsImxldHRlciIsInBvcyIsInRvTG93ZXJDYXNlIiwiYXNzZXJ0QXJnIiwicmVhc29uIiwiYXNzZXJ0QXJnRm4iLCJhY2NlcHRBcnJheUFubm90YXRpb24iLCJhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSIsImdldHRlciIsInBhdGgiLCJiaW5kRm5Ub1Njb3BlIiwibGFzdEluc3RhbmNlIiwibGVuIiwiZ2V0QmxvY2tOb2RlcyIsIm5vZGVzIiwiYmxvY2tOb2RlcyIsImVuZE5vZGUiLCJuZXh0U2libGluZyIsInNldHVwTW9kdWxlTG9hZGVyIiwiZW5zdXJlIiwiZmFjdG9yeSIsIiRpbmplY3Rvck1pbkVyciIsIiQkbWluRXJyIiwicmVxdWlyZXMiLCJjb25maWdGbiIsImluZm8iLCJpbnZva2VMYXRlciIsInByb3ZpZGVyIiwiaW5zZXJ0TWV0aG9kIiwicXVldWUiLCJpbnZva2VRdWV1ZSIsIm1vZHVsZUluc3RhbmNlIiwiaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lIiwicmVjaXBlTmFtZSIsImZhY3RvcnlGdW5jdGlvbiIsIiQkbW9kdWxlTmFtZSIsImNvbmZpZ0Jsb2NrcyIsInJ1bkJsb2NrcyIsIl9pbnZva2VRdWV1ZSIsIl9jb25maWdCbG9ja3MiLCJfcnVuQmxvY2tzIiwic2VydmljZSIsImNvbnN0YW50IiwiZGVjb3JhdG9yIiwiYW5pbWF0aW9uIiwiZmlsdGVyIiwiZGlyZWN0aXZlIiwiY29tcG9uZW50IiwicnVuIiwiYmxvY2siLCJzaGFsbG93Q29weSIsInNlcmlhbGl6ZU9iamVjdCIsInNlZW4iLCJqcU5leHRJZCIsImpxSWQiLCJjc3NLZWJhYlRvQ2FtZWwiLCJrZWJhYlRvQ2FtZWwiLCJNU19IQUNLX1JFR0VYUCIsImZuQ2FtZWxDYXNlUmVwbGFjZSIsInRvVXBwZXJDYXNlIiwiREFTSF9MT1dFUkNBU0VfUkVHRVhQIiwianFMaXRlSXNUZXh0Tm9kZSIsIkhUTUxfUkVHRVhQIiwianFMaXRlQWNjZXB0c0RhdGEiLCJOT0RFX1RZUEVfRUxFTUVOVCIsIk5PREVfVFlQRV9ET0NVTUVOVCIsImpxTGl0ZUhhc0RhdGEiLCJqcUNhY2hlIiwibmczMzkiLCJqcUxpdGVCdWlsZEZyYWdtZW50IiwidG1wIiwid3JhcCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNyZWF0ZVRleHROb2RlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwiVEFHX05BTUVfUkVHRVhQIiwiZXhlYyIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsIlhIVE1MX1RBR19SRUdFWFAiLCJsYXN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50IiwianFMaXRlUGFyc2VIVE1MIiwicGFyc2VkIiwiU0lOR0xFX1RBR19SRUdFWFAiLCJqcUxpdGVXcmFwTm9kZSIsIndyYXBwZXIiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiSlFMaXRlIiwiYXJnSXNTdHJpbmciLCJ0cmltIiwianFMaXRlTWluRXJyIiwianFMaXRlQWRkTm9kZXMiLCJqcUxpdGVSZWFkeSIsImpxTGl0ZUNsb25lIiwianFMaXRlRGVhbG9jIiwib25seURlc2NlbmRhbnRzIiwiY2xlYW5EYXRhIiwicXVlcnlTZWxlY3RvckFsbCIsImpxTGl0ZU9mZiIsInVuc3VwcG9ydGVkIiwiZXhwYW5kb1N0b3JlIiwianFMaXRlRXhwYW5kb1N0b3JlIiwiZXZlbnRzIiwiaGFuZGxlIiwicmVtb3ZlSGFuZGxlciIsImxpc3RlbmVyRm5zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk1PVVNFX0VWRU5UX01BUCIsImpxTGl0ZVJlbW92ZURhdGEiLCJleHBhbmRvSWQiLCIkZGVzdHJveSIsImNyZWF0ZUlmTmVjZXNzYXJ5IiwianFMaXRlRGF0YSIsImlzU2ltcGxlU2V0dGVyIiwiaXNTaW1wbGVHZXR0ZXIiLCJtYXNzR2V0dGVyIiwianFMaXRlSGFzQ2xhc3MiLCJzZWxlY3RvciIsImpxTGl0ZVJlbW92ZUNsYXNzIiwiY3NzQ2xhc3NlcyIsInNldEF0dHJpYnV0ZSIsImNzc0NsYXNzIiwianFMaXRlQWRkQ2xhc3MiLCJleGlzdGluZ0NsYXNzZXMiLCJyb290IiwiZWxlbWVudHMiLCJqcUxpdGVDb250cm9sbGVyIiwianFMaXRlSW5oZXJpdGVkRGF0YSIsImRvY3VtZW50RWxlbWVudCIsIm5hbWVzIiwiTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UIiwiaG9zdCIsImpxTGl0ZUVtcHR5IiwicmVtb3ZlQ2hpbGQiLCJqcUxpdGVSZW1vdmUiLCJrZWVwRGF0YSIsImpxTGl0ZURvY3VtZW50TG9hZGVkIiwiYWN0aW9uIiwid2luIiwicmVhZHlTdGF0ZSIsInNldFRpbWVvdXQiLCJ0cmlnZ2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEJvb2xlYW5BdHRyTmFtZSIsImJvb2xlYW5BdHRyIiwiQk9PTEVBTl9BVFRSIiwiQk9PTEVBTl9FTEVNRU5UUyIsImdldEFsaWFzZWRBdHRyTmFtZSIsIkFMSUFTRURfQVRUUiIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlciIsImV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsImV2ZW50Rm5zIiwiZXZlbnRGbnNMZW5ndGgiLCJpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiaGFuZGxlcldyYXBwZXIiLCJzcGVjaWFsSGFuZGxlcldyYXBwZXIiLCJkZWZhdWx0SGFuZGxlcldyYXBwZXIiLCJlbGVtIiwiaGFuZGxlciIsInNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJqcUxpdGVDb250YWlucyIsIiQkanFMaXRlUHJvdmlkZXIiLCIkZ2V0IiwiaGFzQ2xhc3MiLCJjbGFzc2VzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImhhc2hLZXkiLCJuZXh0VWlkRm4iLCJvYmpUeXBlIiwiTmdNYXBTaGltIiwiX2tleXMiLCJfdmFsdWVzIiwiX2xhc3RLZXkiLCJfbGFzdEluZGV4Iiwic3RyaW5naWZ5Rm4iLCJGdW5jdGlvbiIsImV4dHJhY3RBcmdzIiwiZm5UZXh0IiwiU1RSSVBfQ09NTUVOVFMiLCJBUlJPV19BUkciLCJGTl9BUkdTIiwiYW5vbkZuIiwiYW5ub3RhdGUiLCIkaW5qZWN0IiwiYXJnRGVjbCIsImxhc3QiLCJGTl9BUkdfU1BMSVQiLCJGTl9BUkciLCJ1bmRlcnNjb3JlIiwibW9kdWxlc1RvTG9hZCIsInN1cHBvcnRPYmplY3QiLCJkZWxlZ2F0ZSIsInByb3ZpZGVyXyIsInByb3ZpZGVySW5qZWN0b3IiLCJpbnN0YW50aWF0ZSIsInByb3ZpZGVyQ2FjaGUiLCJwcm92aWRlclN1ZmZpeCIsImVuZm9yY2VSZXR1cm5WYWx1ZSIsImluc3RhbmNlSW5qZWN0b3IiLCJmYWN0b3J5Rm4iLCJlbmZvcmNlIiwiJGluamVjdG9yIiwiaW5zdGFuY2VDYWNoZSIsInNlcnZpY2VOYW1lIiwiZGVjb3JGbiIsIm9yaWdQcm92aWRlciIsIm9yaWckZ2V0Iiwib3JpZ0luc3RhbmNlIiwiJGRlbGVnYXRlIiwibG9hZE1vZHVsZXMiLCJtb2R1bGVGbiIsInJ1bkludm9rZVF1ZXVlIiwiaW52b2tlQXJncyIsImxvYWRlZE1vZHVsZXMiLCJhbmd1bGFyTW9kdWxlIiwic3RhY2siLCJjcmVhdGVJbnRlcm5hbEluamVjdG9yIiwiY2FjaGUiLCJnZXRTZXJ2aWNlIiwiY2FsbGVyIiwiSU5TVEFOVElBVElORyIsInNoaWZ0IiwiaW5qZWN0aW9uQXJncyIsImxvY2FscyIsIiQkYW5ub3RhdGUiLCJpc0NsYXNzIiwiZnVuYyIsIm1zaWUiLCIkJG5nSXNDbGFzcyIsIlR5cGUiLCJjdG9yIiwiaGFzIiwiTmdNYXAiLCJwcm90b0luc3RhbmNlSW5qZWN0b3IiLCIkQW5jaG9yU2Nyb2xsUHJvdmlkZXIiLCJhdXRvU2Nyb2xsaW5nRW5hYmxlZCIsImRpc2FibGVBdXRvU2Nyb2xsaW5nIiwiJHdpbmRvdyIsIiRsb2NhdGlvbiIsImdldEZpcnN0QW5jaG9yIiwibGlzdCIsInNvbWUiLCJnZXRZT2Zmc2V0Iiwib2Zmc2V0Iiwic2Nyb2xsIiwieU9mZnNldCIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvdHRvbSIsInNjcm9sbFRvIiwic2Nyb2xsSW50b1ZpZXciLCJlbGVtVG9wIiwidG9wIiwic2Nyb2xsQnkiLCJoYXNoIiwiZWxtIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJuZXdWYWwiLCJvbGRWYWwiLCJtZXJnZUNsYXNzZXMiLCJleHRyYWN0RWxlbWVudE5vZGUiLCJFTEVNRU5UX05PREUiLCJzcGxpdENsYXNzZXMiLCJrbGFzcyIsInByZXBhcmVBbmltYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJCcm93c2VyIiwiJGxvZyIsIiRzbmlmZmVyIiwiY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCJvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCIsIm91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyIsInBvcCIsImdldEhhc2giLCJzdWJzdHIiLCJjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSIsInBlbmRpbmdMb2NhdGlvbiIsImZpcmVTdGF0ZU9yVXJsQ2hhbmdlIiwiY2FjaGVTdGF0ZSIsImNhY2hlZFN0YXRlIiwiZ2V0Q3VycmVudFN0YXRlIiwibGFzdENhY2hlZFN0YXRlIiwibGFzdEhpc3RvcnlTdGF0ZSIsInByZXZMYXN0SGlzdG9yeVN0YXRlIiwibGFzdEJyb3dzZXJVcmwiLCJ1cmxDaGFuZ2VMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImhpc3RvcnkiLCJjbGVhclRpbWVvdXQiLCJwZW5kaW5nRGVmZXJJZHMiLCJpc01vY2siLCIkJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0IiwiJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCIsIm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMiLCJjYWxsYmFjayIsImhyZWYiLCJiYXNlRWxlbWVudCIsInNhbWVTdGF0ZSIsInNhbWVCYXNlIiwic3RyaXBIYXNoIiwidXJsQ2hhbmdlSW5pdCIsIm9uVXJsQ2hhbmdlIiwiJCRhcHBsaWNhdGlvbkRlc3Ryb3llZCIsIm9mZiIsIiQkY2hlY2tVcmxDaGFuZ2UiLCJiYXNlSHJlZiIsImRlZmVyIiwiZGVsYXkiLCJ0aW1lb3V0SWQiLCJjYW5jZWwiLCJkZWZlcklkIiwiJEJyb3dzZXJQcm92aWRlciIsIiRkb2N1bWVudCIsIiRDYWNoZUZhY3RvcnlQcm92aWRlciIsImNhY2hlRmFjdG9yeSIsImNhY2hlSWQiLCJyZWZyZXNoIiwiZW50cnkiLCJmcmVzaEVuZCIsInN0YWxlRW5kIiwibiIsInAiLCJuZXh0RW50cnkiLCJwcmV2RW50cnkiLCJjYWNoZXMiLCJzaXplIiwic3RhdHMiLCJjYXBhY2l0eSIsIk51bWJlciIsIk1BWF9WQUxVRSIsImxydUhhc2giLCJwdXQiLCJyZW1vdmUiLCJscnVFbnRyeSIsInJlbW92ZUFsbCIsImRlc3Ryb3kiLCIkVGVtcGxhdGVDYWNoZVByb3ZpZGVyIiwiJGNhY2hlRmFjdG9yeSIsIlVOSU5JVElBTElaRURfVkFMVUUiLCIkQ29tcGlsZVByb3ZpZGVyIiwiJCRzYW5pdGl6ZVVyaVByb3ZpZGVyIiwicGFyc2VJc29sYXRlQmluZGluZ3MiLCJkaXJlY3RpdmVOYW1lIiwiaXNDb250cm9sbGVyIiwiTE9DQUxfUkVHRVhQIiwiYmluZGluZ3MiLCJkZWZpbml0aW9uIiwic2NvcGVOYW1lIiwiYmluZGluZ0NhY2hlIiwiJGNvbXBpbGVNaW5FcnIiLCJtb2RlIiwiY29sbGVjdGlvbiIsIm9wdGlvbmFsIiwiYXR0ck5hbWUiLCJwYXJzZURpcmVjdGl2ZUJpbmRpbmdzIiwiaXNvbGF0ZVNjb3BlIiwiYmluZFRvQ29udHJvbGxlciIsImFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZSIsImdldERpcmVjdGl2ZVJlcXVpcmUiLCJSRVFVSVJFX1BSRUZJWF9SRUdFWFAiLCJnZXREaXJlY3RpdmVSZXN0cmljdCIsImhhc0RpcmVjdGl2ZXMiLCJTdWZmaXgiLCJDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAiLCJDTEFTU19ESVJFQ1RJVkVfUkVHRVhQIiwiQUxMX09SX05PVEhJTkdfQVRUUlMiLCJFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQIiwicmVnaXN0ZXJEaXJlY3RpdmUiLCJkaXJlY3RpdmVGYWN0b3J5IiwiJGV4Y2VwdGlvbkhhbmRsZXIiLCJkaXJlY3RpdmVzIiwicHJpb3JpdHkiLCJtYWtlSW5qZWN0YWJsZSIsInRFbGVtZW50IiwidEF0dHJzIiwiJGVsZW1lbnQiLCIkYXR0cnMiLCJkZG8iLCJjb250cm9sbGVyQXMiLCJpZGVudGlmaWVyRm9yQ29udHJvbGxlciIsInRyYW5zY2x1ZGUiLCJhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCIsInJlZ2V4cCIsImltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCIsImVuYWJsZWQiLCJwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQiLCJUVEwiLCJvbkNoYW5nZXNUdGwiLCJjb21tZW50RGlyZWN0aXZlc0VuYWJsZWRDb25maWciLCJjb21tZW50RGlyZWN0aXZlc0VuYWJsZWQiLCJjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnIiwiY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZCIsIiRpbnRlcnBvbGF0ZSIsIiR0ZW1wbGF0ZVJlcXVlc3QiLCIkcGFyc2UiLCIkY29udHJvbGxlciIsIiRzY2UiLCIkYW5pbWF0ZSIsIiQkc2FuaXRpemVVcmkiLCJmbHVzaE9uQ2hhbmdlc1F1ZXVlIiwib25DaGFuZ2VzUXVldWUiLCJlcnJvcnMiLCJBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc1RvQ29weSIsImwiLCIkYXR0ciIsIiQkZWxlbWVudCIsInNldFNwZWNpYWxBdHRyIiwic3BlY2lhbEF0dHJIb2xkZXIiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwicmVtb3ZlTmFtZWRJdGVtIiwic2V0TmFtZWRJdGVtIiwic2FmZUFkZENsYXNzIiwiY2xhc3NOYW1lIiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsIm5hbWVzcGFjZSIsImNsb25lQ29ubmVjdEZuIiwibmVlZHNOZXdTY29wZSIsIiRwYXJlbnQiLCIkbmV3IiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlQ29udHJvbGxlcnMiLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJCRib3VuZFRyYW5zY2x1ZGUiLCJkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzIiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiSlFMaXRlUHJvdG90eXBlIiwiY29udHJvbGxlck5hbWUiLCJpbnN0YW5jZSIsIiQkYWRkU2NvcGVJbmZvIiwicGFyZW50RWxlbWVudCIsIm5vZGVMaXN0IiwiJHJvb3RFbGVtZW50Iiwibm9kZUxpbmtGbiIsImNoaWxkTGlua0ZuIiwiY2hpbGRTY29wZSIsImlkeCIsImNoaWxkQm91bmRUcmFuc2NsdWRlRm4iLCJzdGFibGVOb2RlTGlzdCIsIm5vZGVMaW5rRm5Gb3VuZCIsIm5vZGVMaXN0TGVuZ3RoIiwibGlua0ZucyIsInRyYW5zY2x1ZGVPblRoaXNFbGVtZW50IiwiY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4iLCJ0ZW1wbGF0ZU9uVGhpc0VsZW1lbnQiLCJsaW5rRm5Gb3VuZCIsIm5vdExpdmVMaXN0IiwibWVyZ2VDb25zZWN1dGl2ZVRleHROb2RlcyIsImNvbGxlY3REaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzVG9Ob2RlIiwidGVybWluYWwiLCJzaWJsaW5nIiwibm9kZVZhbHVlIiwicHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbiIsImJvdW5kVHJhbnNjbHVkZUZuIiwidHJhbnNjbHVkZWRTY29wZSIsImNsb25lRm4iLCJjb250cm9sbGVycyIsImNvbnRhaW5pbmdTY29wZSIsIiQkdHJhbnNjbHVkZWQiLCJib3VuZFNsb3RzIiwiJCRzbG90cyIsInNsb3ROYW1lIiwiYXR0cnNNYXAiLCJhZGREaXJlY3RpdmUiLCJkaXJlY3RpdmVOb3JtYWxpemUiLCJuTmFtZSIsIm5nQXR0ck5hbWUiLCJpc05nQXR0ciIsIm5BdHRycyIsImF0dHJTdGFydE5hbWUiLCJhdHRyRW5kTmFtZSIsIk5HX0FUVFJfQklORElORyIsIlBSRUZJWF9SRUdFWFAiLCJtdWx0aUVsZW1lbnRNYXRjaCIsIk1VTFRJX0VMRU1FTlRfRElSX1JFIiwiZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQiLCJhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJhbmltVmFsIiwiYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlIiwiTk9ERV9UWVBFX0NPTU1FTlQiLCJjb2xsZWN0Q29tbWVudERpcmVjdGl2ZXMiLCJieVByaW9yaXR5IiwiZ3JvdXBTY2FuIiwiYXR0clN0YXJ0IiwiYXR0ckVuZCIsImRlcHRoIiwiZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIiLCJsaW5rRm4iLCJjb21waWxhdGlvbkdlbmVyYXRvciIsImVhZ2VyIiwiY29tcGlsZWQiLCJjb21waWxlTm9kZSIsInRlbXBsYXRlQXR0cnMiLCJqcUNvbGxlY3Rpb24iLCJvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUiLCJwcmVMaW5rRm5zIiwicG9zdExpbmtGbnMiLCJhZGRMaW5rRm5zIiwicHJlIiwibmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIiwiJCRpc29sYXRlU2NvcGUiLCJjbG9uZUFuZEFubm90YXRlRm4iLCJsaW5rTm9kZSIsImNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlIiwiY2xvbmVBdHRhY2hGbiIsImhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlIiwiZWxlbWVudENvbnRyb2xsZXJzIiwic2NvcGVUb0NoaWxkIiwic2xvdFRyYW5zY2x1ZGVGbiIsImNvbnRyb2xsZXJTY29wZSIsInNjb3BlQmluZGluZ0luZm8iLCJuZXdTY29wZURpcmVjdGl2ZSIsImlzU2xvdEZpbGxlZCIsImNvbnRyb2xsZXJEaXJlY3RpdmVzIiwic2V0dXBDb250cm9sbGVycyIsInRlbXBsYXRlRGlyZWN0aXZlIiwiJCRvcmlnaW5hbERpcmVjdGl2ZSIsIiQkaXNvbGF0ZUJpbmRpbmdzIiwiaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzIiwicmVtb3ZlV2F0Y2hlcyIsImNvbnRyb2xsZXJEaXJlY3RpdmUiLCIkJGJpbmRpbmdzIiwiYmluZGluZ0luZm8iLCJjb250cm9sbGVyUmVzdWx0IiwiZ2V0Q29udHJvbGxlcnMiLCJjb250cm9sbGVySW5zdGFuY2UiLCIkb25DaGFuZ2VzIiwiaW5pdGlhbENoYW5nZXMiLCIkb25Jbml0IiwiJGRvQ2hlY2siLCIkb25EZXN0cm95IiwiaW52b2tlTGlua0ZuIiwiJHBvc3RMaW5rIiwiJHRlbXBsYXRlIiwiZGlyZWN0aXZlVmFsdWUiLCJ0ZXJtaW5hbFByaW9yaXR5Iiwibm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSIsImhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUZW1wbGF0ZSIsIiRjb21waWxlTm9kZSIsInJlcGxhY2VEaXJlY3RpdmUiLCJjaGlsZFRyYW5zY2x1ZGVGbiIsImRpZFNjYW5Gb3JNdWx0aXBsZVRyYW5zY2x1c2lvbiIsIm1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IiLCIkJHN0YXJ0IiwiJCRlbmQiLCJhc3NlcnROb0R1cGxpY2F0ZSIsIiQkdGxiIiwiY2FuZGlkYXRlRGlyZWN0aXZlIiwic2Nhbm5pbmdJbmRleCIsIiQkY3JlYXRlQ29tbWVudCIsInJlcGxhY2VXaXRoIiwiJCRwYXJlbnROb2RlIiwic2xvdHMiLCJzbG90TWFwIiwiZmlsbGVkU2xvdHMiLCJlbGVtZW50U2VsZWN0b3IiLCJjb250ZW50cyIsImZpbGxlZCIsIiQkbmV3U2NvcGUiLCJkZW5vcm1hbGl6ZVRlbXBsYXRlIiwicmVtb3ZlQ29tbWVudHMiLCJ0ZW1wbGF0ZU5hbWVzcGFjZSIsIm5ld1RlbXBsYXRlQXR0cnMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZXMiLCJ1bnByb2Nlc3NlZERpcmVjdGl2ZXMiLCJtYXJrRGlyZWN0aXZlU2NvcGUiLCJtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyIsImNvbXBpbGVUZW1wbGF0ZVVybCIsIk1hdGgiLCJtYXgiLCJpbmhlcml0VHlwZSIsImRhdGFOYW1lIiwiaW5oZXJpdGVkRGF0YSIsInByb3BlcnR5IiwiY29udHJvbGxlcktleSIsIiR0cmFuc2NsdWRlIiwibmV3U2NvcGUiLCJ0RGlyZWN0aXZlcyIsInN0YXJ0QXR0ck5hbWUiLCJlbmRBdHRyTmFtZSIsIm11bHRpRWxlbWVudCIsInNyY0F0dHIiLCJkc3RBdHRyIiwiJHNldCIsImFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuIiwiYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuIiwibGlua1F1ZXVlIiwiYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSIsIm9yaWdBc3luY0RpcmVjdGl2ZSIsImRlcml2ZWRTeW5jRGlyZWN0aXZlIiwiY29udGVudCIsInRlbXBUZW1wbGF0ZUF0dHJzIiwiYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSIsImxpbmtSb290RWxlbWVudCIsIiQkZGVzdHJveWVkIiwib2xkQ2xhc3NlcyIsImNhdGNoIiwiaWdub3JlQ2hpbGRMaW5rRm4iLCJkaWZmIiwid2hhdCIsInByZXZpb3VzRGlyZWN0aXZlIiwid3JhcE1vZHVsZU5hbWVJZkRlZmluZWQiLCJtb2R1bGVOYW1lIiwidGV4dCIsImludGVycG9sYXRlRm4iLCJ0ZW1wbGF0ZU5vZGUiLCJ0ZW1wbGF0ZU5vZGVQYXJlbnQiLCJoYXNDb21waWxlUGFyZW50IiwiJCRhZGRCaW5kaW5nQ2xhc3MiLCIkJGFkZEJpbmRpbmdJbmZvIiwiZXhwcmVzc2lvbnMiLCJnZXRUcnVzdGVkQ29udGV4dCIsImF0dHJOb3JtYWxpemVkTmFtZSIsIkhUTUwiLCJSRVNPVVJDRV9VUkwiLCJ0cnVzdGVkQ29udGV4dCIsIm11c3RIYXZlRXhwcmVzc2lvbiIsImFsbE9yTm90aGluZyIsIiQkb2JzZXJ2ZXJzIiwibmV3VmFsdWUiLCIkJGludGVyIiwiJCRzY29wZSIsIm9sZFZhbHVlIiwiJHVwZGF0ZUNsYXNzIiwiZWxlbWVudHNUb1JlbW92ZSIsIm5ld05vZGUiLCJmaXJzdEVsZW1lbnRUb1JlbW92ZSIsInJlbW92ZUNvdW50IiwiajIiLCJoYXNEYXRhIiwiYW5ub3RhdGlvbiIsInJlY29yZENoYW5nZXMiLCJjdXJyZW50VmFsdWUiLCJwcmV2aW91c1ZhbHVlIiwiJCRwb3N0RGlnZXN0IiwiY2hhbmdlcyIsInRyaWdnZXJPbkNoYW5nZXNIb29rIiwiU2ltcGxlQ2hhbmdlIiwicmVtb3ZlV2F0Y2hDb2xsZWN0aW9uIiwibGFzdFZhbHVlIiwicGFyZW50R2V0IiwicGFyZW50U2V0IiwiY29tcGFyZSIsInJlbW92ZVdhdGNoIiwiJG9ic2VydmUiLCJfVU5JTklUSUFMSVpFRF9WQUxVRSIsImxpdGVyYWwiLCJhc3NpZ24iLCJwYXJlbnRWYWx1ZVdhdGNoIiwicGFyZW50VmFsdWUiLCIkc3RhdGVmdWwiLCIkd2F0Y2hDb2xsZWN0aW9uIiwiZGVlcFdhdGNoIiwiaW5pdGlhbFZhbHVlIiwiU0lNUExFX0FUVFJfTkFNRSIsIiRub3JtYWxpemUiLCIkYWRkQ2xhc3MiLCJjbGFzc1ZhbCIsIiRyZW1vdmVDbGFzcyIsIm5ld0NsYXNzZXMiLCJ0b0FkZCIsInRva2VuRGlmZmVyZW5jZSIsInRvUmVtb3ZlIiwid3JpdGVBdHRyIiwiYm9vbGVhbktleSIsImFsaWFzZWRLZXkiLCJvYnNlcnZlciIsInRyaW1tZWRTcmNzZXQiLCJzcmNQYXR0ZXJuIiwicGF0dGVybiIsInJhd1VyaXMiLCJuYnJVcmlzV2l0aDJwYXJ0cyIsImZsb29yIiwiaW5uZXJJZHgiLCJsYXN0VHVwbGUiLCJyZW1vdmVBdHRyIiwibGlzdGVuZXJzIiwic3RhcnRTeW1ib2wiLCJlbmRTeW1ib2wiLCJiaW5kaW5nIiwiaXNvbGF0ZWQiLCJub1RlbXBsYXRlIiwiY3JlYXRlQ29tbWVudCIsInByZXZpb3VzIiwiY3VycmVudCIsIlNQRUNJQUxfQ0hBUlNfUkVHRVhQIiwic3RyMSIsInN0cjIiLCJ2YWx1ZXMiLCJ0b2tlbnMxIiwidG9rZW5zMiIsIm91dGVyIiwianFOb2RlcyIsImlkZW50IiwiQ05UUkxfUkVHIiwiJENvbnRyb2xsZXJQcm92aWRlciIsImdsb2JhbHMiLCJhbGxvd0dsb2JhbHMiLCJhZGRJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsImV4cHJlc3Npb24iLCJsYXRlciIsIiRjb250cm9sbGVyTWluRXJyIiwiY29udHJvbGxlclByb3RvdHlwZSIsIiREb2N1bWVudFByb3ZpZGVyIiwiJCRJc0RvY3VtZW50SGlkZGVuUHJvdmlkZXIiLCJjaGFuZ2VMaXN0ZW5lciIsImhpZGRlbiIsImRvYyIsIiRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIiLCJleGNlcHRpb24iLCJjYXVzZSIsInNlcmlhbGl6ZVZhbHVlIiwidiIsInRvSVNPU3RyaW5nIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlciIsInBhcmFtcyIsIiRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIiLCJzZXJpYWxpemUiLCJ0b1NlcmlhbGl6ZSIsInRvcExldmVsIiwiZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSIsImhlYWRlcnMiLCJ0ZW1wRGF0YSIsIkpTT05fUFJPVEVDVElPTl9QUkVGSVgiLCJjb250ZW50VHlwZSIsIkFQUExJQ0FUSU9OX0pTT04iLCJpc0pzb25MaWtlIiwiJGh0dHBNaW5FcnIiLCJqc29uU3RhcnQiLCJKU09OX1NUQVJUIiwiSlNPTl9FTkRTIiwicGFyc2VIZWFkZXJzIiwiZmlsbEluUGFyc2VkIiwibGluZSIsImhlYWRlclZhbCIsImhlYWRlcktleSIsImhlYWRlcnNHZXR0ZXIiLCJoZWFkZXJzT2JqIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImlzU3VjY2VzcyIsIiRIdHRwUHJvdmlkZXIiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlc3BvbnNlIiwidHJhbnNmb3JtUmVxdWVzdCIsImQiLCJjb21tb24iLCJBY2NlcHQiLCJDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiIsInBhdGNoIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInBhcmFtU2VyaWFsaXplciIsImpzb25wQ2FsbGJhY2tQYXJhbSIsInVzZUFwcGx5QXN5bmMiLCJpbnRlcmNlcHRvckZhY3RvcmllcyIsImludGVyY2VwdG9ycyIsIiRicm93c2VyIiwiJGh0dHBCYWNrZW5kIiwiJCRjb29raWVSZWFkZXIiLCIkcSIsInJlcXVlc3RDb25maWciLCJjaGFpbkludGVyY2VwdG9ycyIsInByb21pc2UiLCJ0aGVuRm4iLCJyZWplY3RGbiIsImV4ZWN1dGVIZWFkZXJGbnMiLCJoZWFkZXJDb250ZW50IiwicHJvY2Vzc2VkSGVhZGVycyIsImhlYWRlckZuIiwiaGVhZGVyIiwic2VydmVyUmVxdWVzdCIsInJlcURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZW5kUmVxIiwicmVzcCIsInJlamVjdCIsImRlZkhlYWRlck5hbWUiLCJsb3dlcmNhc2VEZWZIZWFkZXJOYW1lIiwicmVxSGVhZGVyTmFtZSIsImRlZkhlYWRlcnMiLCJyZXFIZWFkZXJzIiwiZGVmYXVsdEhlYWRlcnNJdGVyYXRpb24iLCJ1cHBlcmNhc2UiLCJyZXF1ZXN0SW50ZXJjZXB0b3JzIiwicmVzcG9uc2VJbnRlcmNlcHRvcnMiLCJyZXNvbHZlIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwiZmluYWxseSIsImNyZWF0ZUFwcGx5SGFuZGxlcnMiLCJldmVudEhhbmRsZXJzIiwiYXBwbHlIYW5kbGVycyIsImNhbGxFdmVudEhhbmRsZXIiLCIkYXBwbHlBc3luYyIsIiQkcGhhc2UiLCJkb25lIiwiaGVhZGVyc1N0cmluZyIsInN0YXR1c1RleHQiLCJyZXNvbHZlSHR0cFByb21pc2UiLCJyZXNvbHZlUHJvbWlzZSIsImRlZmVycmVkIiwicmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0IiwicmVtb3ZlUGVuZGluZ1JlcSIsInBlbmRpbmdSZXF1ZXN0cyIsImNhY2hlZFJlc3AiLCJpc0pzb25wIiwiZ2V0VHJ1c3RlZFJlc291cmNlVXJsIiwiYnVpbGRVcmwiLCJzYW5pdGl6ZUpzb25wQ2FsbGJhY2tQYXJhbSIsImRlZmF1bHRDYWNoZSIsInhzcmZWYWx1ZSIsInVybElzU2FtZU9yaWdpbiIsInRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJ1cGxvYWRFdmVudEhhbmRsZXJzIiwic2VyaWFsaXplZFBhcmFtcyIsImludGVyY2VwdG9yRmFjdG9yeSIsIiR4aHJGYWN0b3J5UHJvdmlkZXIiLCJYTUxIdHRwUmVxdWVzdCIsIiRIdHRwQmFja2VuZFByb3ZpZGVyIiwiJGpzb25wQ2FsbGJhY2tzIiwiJHhockZhY3RvcnkiLCJjcmVhdGVIdHRwQmFja2VuZCIsImNyZWF0ZVhociIsIiRicm93c2VyRGVmZXIiLCJjYWxsYmFja3MiLCJyYXdEb2N1bWVudCIsImpzb25wUmVxIiwiY2FsbGJhY2tQYXRoIiwic2NyaXB0IiwiYXN5bmMiLCJib2R5Iiwid2FzQ2FsbGVkIiwidGltZW91dFJlcXVlc3QiLCJqc29ucERvbmUiLCJ4aHIiLCJhYm9ydCIsImNvbXBsZXRlUmVxdWVzdCIsImNyZWF0ZUNhbGxiYWNrIiwiZ2V0UmVzcG9uc2UiLCJyZW1vdmVDYWxsYmFjayIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwicmVzcG9uc2VUZXh0IiwidXJsUmVzb2x2ZSIsInByb3RvY29sIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJ1cGxvYWQiLCJzZW5kIiwiJEludGVycG9sYXRlUHJvdmlkZXIiLCJlc2NhcGUiLCJjaCIsInVuZXNjYXBlVGV4dCIsImVzY2FwZWRTdGFydFJlZ2V4cCIsImVzY2FwZWRFbmRSZWdleHAiLCJjb25zdGFudFdhdGNoRGVsZWdhdGUiLCJvYmplY3RFcXVhbGl0eSIsImNvbnN0YW50SW50ZXJwIiwidW53YXRjaCIsInBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IiLCJnZXRWYWx1ZSIsIiRpbnRlcnBvbGF0ZU1pbkVyciIsImludGVyciIsImV4cCIsIiQkd2F0Y2hEZWxlZ2F0ZSIsImVuZEluZGV4IiwicGFyc2VGbnMiLCJ0ZXh0TGVuZ3RoIiwiZXhwcmVzc2lvblBvc2l0aW9ucyIsInN0YXJ0U3ltYm9sTGVuZ3RoIiwiZW5kU3ltYm9sTGVuZ3RoIiwidGhyb3dOb2NvbmNhdCIsImNvbXB1dGUiLCJnZXRUcnVzdGVkIiwiJHdhdGNoR3JvdXAiLCJvbGRWYWx1ZXMiLCJjdXJyVmFsdWUiLCIkSW50ZXJ2YWxQcm92aWRlciIsIiQkcSIsImludGVydmFsIiwiY291bnQiLCJpbnZva2VBcHBseSIsImhhc1BhcmFtcyIsIml0ZXJhdGlvbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNraXBBcHBseSIsIiQkaW50ZXJ2YWxJZCIsIm5vdGlmeSIsImludGVydmFscyIsImVuY29kZVBhdGgiLCJzZWdtZW50cyIsInBhcnNlQWJzb2x1dGVVcmwiLCJhYnNvbHV0ZVVybCIsImxvY2F0aW9uT2JqIiwicGFyc2VkVXJsIiwiJCRwcm90b2NvbCIsIiQkaG9zdCIsImhvc3RuYW1lIiwiJCRwb3J0IiwicG9ydCIsIkRFRkFVTFRfUE9SVFMiLCJwYXJzZUFwcFVybCIsIkRPVUJMRV9TTEFTSF9SRUdFWCIsIiRsb2NhdGlvbk1pbkVyciIsInByZWZpeGVkIiwiJCRwYXRoIiwicGF0aG5hbWUiLCIkJHNlYXJjaCIsInNlYXJjaCIsIiQkaGFzaCIsInN0YXJ0c1dpdGgiLCJzdHJpcEJhc2VVcmwiLCJiYXNlIiwidHJpbUVtcHR5SGFzaCIsInN0cmlwRmlsZSIsImxhc3RJbmRleE9mIiwic2VydmVyQmFzZSIsIkxvY2F0aW9uSHRtbDVVcmwiLCJhcHBCYXNlIiwiYXBwQmFzZU5vRmlsZSIsImJhc2VQcmVmaXgiLCIkJGh0bWw1IiwiJCRwYXJzZSIsInBhdGhVcmwiLCIkJGNvbXBvc2UiLCIkJHVybCIsIiQkYWJzVXJsIiwiJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiIsIiQkcGFyc2VMaW5rVXJsIiwicmVsSHJlZiIsImFwcFVybCIsInByZXZBcHBVcmwiLCJyZXdyaXR0ZW5VcmwiLCJMb2NhdGlvbkhhc2hiYW5nVXJsIiwiaGFzaFByZWZpeCIsIndpdGhvdXRIYXNoVXJsIiwid2l0aG91dEJhc2VVcmwiLCJmaXJzdFBhdGhTZWdtZW50TWF0Y2giLCJ3aW5kb3dzRmlsZVBhdGhFeHAiLCJMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCIsImxvY2F0aW9uR2V0dGVyIiwibG9jYXRpb25HZXR0ZXJTZXR0ZXIiLCJwcmVwcm9jZXNzIiwiJExvY2F0aW9uUHJvdmlkZXIiLCJyZXF1aXJlQmFzZSIsInJld3JpdGVMaW5rcyIsInNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2siLCJvbGRVcmwiLCJvbGRTdGF0ZSIsIiQkc3RhdGUiLCJhZnRlckxvY2F0aW9uQ2hhbmdlIiwiJGJyb2FkY2FzdCIsImFic1VybCIsIkxvY2F0aW9uTW9kZSIsImluaXRpYWxVcmwiLCJJR05PUkVfVVJJX1JFR0VYUCIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJ3aGljaCIsImJ1dHRvbiIsImFic0hyZWYiLCJpbml0aWFsaXppbmciLCJuZXdVcmwiLCJuZXdTdGF0ZSIsIiRkaWdlc3QiLCJjdXJyZW50UmVwbGFjZSIsIiQkcmVwbGFjZSIsInVybE9yU3RhdGVDaGFuZ2VkIiwiJExvZ1Byb3ZpZGVyIiwiZGVidWciLCJkZWJ1Z0VuYWJsZWQiLCJmbGFnIiwiZm9ybWF0RXJyb3IiLCJmb3JtYXRTdGFja1RyYWNlIiwic291cmNlVVJMIiwiY29uc29sZUxvZyIsImxvZ0ZuIiwibG9nIiwiaGFzQXBwbHkiLCJhcmcxIiwiYXJnMiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIndhcm4iLCJnZXRTdHJpbmdWYWx1ZSIsImlmRGVmaW5lZCIsInBsdXNGbiIsInIiLCJpc1N0YXRlbGVzcyIsIiRmaWx0ZXIiLCJmaWx0ZXJOYW1lIiwiZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyIsImFzdCIsImFsbENvbnN0YW50cyIsImFyZ3NUb1dhdGNoIiwiaXNTdGF0ZWxlc3NGaWx0ZXIiLCJBU1QiLCJQcm9ncmFtIiwiZXhwciIsIkxpdGVyYWwiLCJ0b1dhdGNoIiwiVW5hcnlFeHByZXNzaW9uIiwiYXJndW1lbnQiLCJCaW5hcnlFeHByZXNzaW9uIiwibGVmdCIsInJpZ2h0IiwiTG9naWNhbEV4cHJlc3Npb24iLCJDb25kaXRpb25hbEV4cHJlc3Npb24iLCJhbHRlcm5hdGUiLCJjb25zZXF1ZW50IiwiSWRlbnRpZmllciIsIk1lbWJlckV4cHJlc3Npb24iLCJvYmplY3QiLCJjb21wdXRlZCIsIkNhbGxFeHByZXNzaW9uIiwiY2FsbGVlIiwiQXNzaWdubWVudEV4cHJlc3Npb24iLCJBcnJheUV4cHJlc3Npb24iLCJPYmplY3RFeHByZXNzaW9uIiwicHJvcGVydGllcyIsIlRoaXNFeHByZXNzaW9uIiwiTG9jYWxzRXhwcmVzc2lvbiIsImdldElucHV0cyIsImxhc3RFeHByZXNzaW9uIiwiaXNBc3NpZ25hYmxlIiwiYXNzaWduYWJsZUFTVCIsIk5HVmFsdWVQYXJhbWV0ZXIiLCJvcGVyYXRvciIsImlzTGl0ZXJhbCIsImlzQ29uc3RhbnQiLCJBU1RDb21waWxlciIsIkFTVEludGVycHJldGVyIiwiUGFyc2VyIiwibGV4ZXIiLCJhc3RDb21waWxlciIsImNzcCIsImdldFZhbHVlT2YiLCJvYmplY3RWYWx1ZU9mIiwiJFBhcnNlUHJvdmlkZXIiLCJpZGVudFN0YXJ0IiwiaWRlbnRDb250aW51ZSIsImxpdGVyYWxzIiwidHJ1ZSIsImZhbHNlIiwibnVsbCIsImFkZExpdGVyYWwiLCJsaXRlcmFsTmFtZSIsImxpdGVyYWxWYWx1ZSIsInNldElkZW50aWZpZXJGbnMiLCJpZGVudGlmaWVyU3RhcnQiLCJpZGVudGlmaWVyQ29udGludWUiLCJpbnRlcmNlcHRvckZuIiwicGFyc2VkRXhwcmVzc2lvbiIsIm9uZVRpbWUiLCJjYWNoZUtleSIsIkxleGVyIiwiJHBhcnNlT3B0aW9ucyIsIm9uZVRpbWVXYXRjaERlbGVnYXRlIiwiaW5wdXRzIiwiaW5wdXRzV2F0Y2hEZWxlZ2F0ZSIsImFkZEludGVyY2VwdG9yIiwiZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayIsIm9sZFZhbHVlT2ZWYWx1ZSIsImNvbXBhcmVPYmplY3RJZGVudGl0eSIsInByZXR0eVByaW50RXhwcmVzc2lvbiIsImxhc3RSZXN1bHQiLCJpbnB1dEV4cHJlc3Npb25zIiwib2xkSW5wdXRWYWx1ZU9mIiwibmV3SW5wdXRWYWx1ZSIsIm9sZElucHV0VmFsdWVPZlZhbHVlcyIsIm9sZElucHV0VmFsdWVzIiwiY2hhbmdlZCIsIm9uZVRpbWVXYXRjaCIsIm9uZVRpbWVMaXN0ZW5lciIsIm9sZCIsImlzRG9uZSIsImlzQWxsRGVmaW5lZCIsImFsbERlZmluZWQiLCJyZWd1bGFySW50ZXJjZXB0ZWRFeHByZXNzaW9uIiwidXNlSW5wdXRzIiwib25lVGltZUludGVyY2VwdGVkRXhwcmVzc2lvbiIsIndhdGNoRGVsZWdhdGUiLCJub1Vuc2FmZUV2YWwiLCJpc0lkZW50aWZpZXJTdGFydCIsImlzSWRlbnRpZmllckNvbnRpbnVlIiwiJFFQcm92aWRlciIsImVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zIiwicUZhY3RvcnkiLCIkJFFQcm92aWRlciIsIm5leHRUaWNrIiwiZXhjZXB0aW9uSGFuZGxlciIsIkRlZmVycmVkIiwiUHJvbWlzZSIsInJlamVjdFByb21pc2UiLCJwcm9ncmVzcyIsIm5vdGlmeVByb21pc2UiLCJwcm9jZXNzUXVldWUiLCJwZW5kaW5nIiwicHJvY2Vzc1NjaGVkdWxlZCIsInB1ciIsInF1ZXVlU2l6ZSIsInByb2Nlc3NDaGVja3MiLCJjaGVja1F1ZXVlIiwidG9DaGVjayIsImVycm9yTWVzc2FnZSIsInNjaGVkdWxlUHJvY2Vzc1F1ZXVlIiwiJCRyZWplY3QiLCIkcU1pbkVyciIsIiQkcmVzb2x2ZSIsImRvUmVzb2x2ZSIsImRvUmVqZWN0IiwiZG9Ob3RpZnkiLCJoYW5kbGVDYWxsYmFjayIsInJlc29sdmVyIiwiY2FsbGJhY2tPdXRwdXQiLCJ3aGVuIiwiZXJyYmFjayIsInByb2dyZXNzQmFjayIsInByb21pc2VzIiwiY291bnRlciIsInJlc3VsdHMiLCJyYWNlIiwiJFEiLCJyZXNvbHZlRm4iLCJUeXBlRXJyb3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCIkJFJBRlByb3ZpZGVyIiwiJHRpbWVvdXQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmFmU3VwcG9ydGVkIiwicmFmIiwidGltZXIiLCJzdXBwb3J0ZWQiLCIkUm9vdFNjb3BlUHJvdmlkZXIiLCJjcmVhdGVDaGlsZFNjb3BlQ2xhc3MiLCJDaGlsZFNjb3BlIiwiJCR3YXRjaGVycyIsIiQkbmV4dFNpYmxpbmciLCIkJGNoaWxkSGVhZCIsIiQkY2hpbGRUYWlsIiwiJCRsaXN0ZW5lcnMiLCIkJGxpc3RlbmVyQ291bnQiLCIkJHdhdGNoZXJzQ291bnQiLCIkaWQiLCIkJENoaWxkU2NvcGUiLCIkcm9vdFNjb3BlTWluRXJyIiwibGFzdERpcnR5V2F0Y2giLCJhcHBseUFzeW5jSWQiLCJkaWdlc3RUdGwiLCJkZXN0cm95Q2hpbGRTY29wZSIsIiRldmVudCIsImN1cnJlbnRTY29wZSIsImNsZWFuVXBTY29wZSIsIiQkcHJldlNpYmxpbmciLCIkcm9vdCIsIlNjb3BlIiwiYmVnaW5QaGFzZSIsInBoYXNlIiwiY2xlYXJQaGFzZSIsImluY3JlbWVudFdhdGNoZXJzQ291bnQiLCJkZWNyZW1lbnRMaXN0ZW5lckNvdW50IiwiaW5pdFdhdGNoVmFsIiwiZmx1c2hBcHBseUFzeW5jIiwiYXBwbHlBc3luY1F1ZXVlIiwic2NoZWR1bGVBcHBseUFzeW5jIiwiaXNvbGF0ZSIsImNoaWxkIiwid2F0Y2hFeHAiLCJ3YXRjaGVyIiwiZXEiLCIkJGRpZ2VzdFdhdGNoSW5kZXgiLCJ3YXRjaEV4cHJlc3Npb25zIiwid2F0Y2hHcm91cEFjdGlvbiIsImNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkIiwiZmlyc3RSdW4iLCJuZXdWYWx1ZXMiLCJkZXJlZ2lzdGVyRm5zIiwic2hvdWxkQ2FsbCIsInVud2F0Y2hGbiIsIiR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvciIsIl92YWx1ZSIsIm5ld0xlbmd0aCIsIm5ld0l0ZW0iLCJvbGRJdGVtIiwiaW50ZXJuYWxBcnJheSIsIm9sZExlbmd0aCIsImNoYW5nZURldGVjdGVkIiwiaW50ZXJuYWxPYmplY3QiLCIkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uIiwiaW5pdFJ1biIsInZlcnlPbGRWYWx1ZSIsInRyYWNrVmVyeU9sZFZhbHVlIiwiY2hhbmdlRGV0ZWN0b3IiLCJ3YXRjaCIsIndhdGNoZXJzIiwiZGlydHkiLCJuZXh0IiwibG9nSWR4IiwiYXN5bmNUYXNrIiwidHRsIiwid2F0Y2hMb2ciLCJhc3luY1F1ZXVlUG9zaXRpb24iLCJhc3luY1F1ZXVlIiwidHJhdmVyc2VTY29wZXNMb29wIiwibXNnIiwicG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24iLCJwb3N0RGlnZXN0UXVldWUiLCJldmVudE5hbWUiLCIkZXZhbCIsIiRhcHBseUFzeW5jRXhwcmVzc2lvbiIsIm5hbWVkTGlzdGVuZXJzIiwiaW5kZXhPZkxpc3RlbmVyIiwiJGVtaXQiLCJ0YXJnZXRTY29wZSIsImxpc3RlbmVyQXJncyIsIiQkYXN5bmNRdWV1ZSIsIiQkcG9zdERpZ2VzdFF1ZXVlIiwiJCRhcHBseUFzeW5jUXVldWUiLCIkJFNhbml0aXplVXJpUHJvdmlkZXIiLCJ1cmkiLCJpc0ltYWdlIiwibm9ybWFsaXplZFZhbCIsInJlZ2V4Iiwic25ha2VUb0NhbWVsIiwiVU5ERVJTQ09SRV9MT1dFUkNBU0VfUkVHRVhQIiwiYWRqdXN0TWF0Y2hlciIsIm1hdGNoZXIiLCIkc2NlTWluRXJyIiwiZXNjYXBlRm9yUmVnZXhwIiwiYWRqdXN0TWF0Y2hlcnMiLCJtYXRjaGVycyIsImFkanVzdGVkTWF0Y2hlcnMiLCIkU2NlRGVsZWdhdGVQcm92aWRlciIsIlNDRV9DT05URVhUUyIsInJlc291cmNlVXJsV2hpdGVsaXN0IiwicmVzb3VyY2VVcmxCbGFja2xpc3QiLCJtYXRjaFVybCIsImlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kiLCJhbGxvd2VkIiwiZ2VuZXJhdGVIb2xkZXJUeXBlIiwiQmFzZSIsImhvbGRlclR5cGUiLCJ0cnVzdGVkVmFsdWUiLCIkJHVud3JhcFRydXN0ZWRWYWx1ZSIsInRydXN0QXMiLCJDb25zdHJ1Y3RvciIsImJ5VHlwZSIsIm1heWJlVHJ1c3RlZCIsInRydXN0ZWRWYWx1ZUhvbGRlckJhc2UiLCJodG1sU2FuaXRpemVyIiwiQ1NTIiwiVVJMIiwiSlMiLCIkU2NlUHJvdmlkZXIiLCIkc2NlRGVsZWdhdGUiLCJzY2UiLCJpc0VuYWJsZWQiLCJwYXJzZUFzIiwiZW51bVZhbHVlIiwibE5hbWUiLCIkU25pZmZlclByb3ZpZGVyIiwiZXZlbnRTdXBwb3J0IiwiaXNOdyIsIm53IiwicHJvY2VzcyIsImlzQ2hyb21lUGFja2FnZWRBcHAiLCJjaHJvbWUiLCJhcHAiLCJydW50aW1lIiwiaGFzSGlzdG9yeVB1c2hTdGF0ZSIsInB1c2hTdGF0ZSIsImFuZHJvaWQiLCJib3hlZSIsImJvZHlTdHlsZSIsInRyYW5zaXRpb25zIiwiYW5pbWF0aW9ucyIsImhhc0V2ZW50IiwiZGl2RWxtIiwiJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyIiwiaHR0cE9wdGlvbnMiLCIkdGVtcGxhdGVDYWNoZSIsImhhbmRsZVJlcXVlc3RGbiIsInRwbCIsImlnbm9yZVJlcXVlc3RFcnJvciIsImhhbmRsZUVycm9yIiwiJHRlbXBsYXRlUmVxdWVzdE1pbkVyciIsInRvdGFsUGVuZGluZ1JlcXVlc3RzIiwidHJhbnNmb3JtZXIiLCIkJFRlc3RhYmlsaXR5UHJvdmlkZXIiLCJ0ZXN0YWJpbGl0eSIsImZpbmRCaW5kaW5ncyIsIm9wdF9leGFjdE1hdGNoIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm1hdGNoZXMiLCJkYXRhQmluZGluZyIsImJpbmRpbmdOYW1lIiwiZmluZE1vZGVscyIsInByZWZpeGVzIiwiYXR0cmlidXRlRXF1YWxzIiwiZ2V0TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsIndoZW5TdGFibGUiLCIkVGltZW91dFByb3ZpZGVyIiwiZGVmZXJyZWRzIiwiJCR0aW1lb3V0SWQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlcXVlc3RVcmwiLCJvcmlnaW5VcmwiLCIkV2luZG93UHJvdmlkZXIiLCIkJENvb2tpZVJlYWRlciIsInNhZmVHZXRDb29raWUiLCJjb29raWUiLCJzYWZlRGVjb2RlVVJJQ29tcG9uZW50IiwibGFzdENvb2tpZXMiLCJsYXN0Q29va2llU3RyaW5nIiwiY29va2llQXJyYXkiLCJjdXJyZW50Q29va2llU3RyaW5nIiwiJCRDb29raWVSZWFkZXJQcm92aWRlciIsIiRGaWx0ZXJQcm92aWRlciIsImZpbHRlcnMiLCJzdWZmaXgiLCJjdXJyZW5jeUZpbHRlciIsImRhdGVGaWx0ZXIiLCJqc29uRmlsdGVyIiwibGltaXRUb0ZpbHRlciIsImxvd2VyY2FzZUZpbHRlciIsIm51bWJlckZpbHRlciIsIm9yZGVyQnlGaWx0ZXIiLCJ1cHBlcmNhc2VGaWx0ZXIiLCJjb21wYXJhdG9yIiwiYW55UHJvcGVydHlLZXkiLCJwcmVkaWNhdGVGbiIsIm1hdGNoQWdhaW5zdEFueVByb3AiLCJleHByZXNzaW9uVHlwZSIsImdldFR5cGVGb3JGaWx0ZXIiLCJjcmVhdGVQcmVkaWNhdGVGbiIsInNob3VsZE1hdGNoUHJpbWl0aXZlcyIsImFjdHVhbCIsImV4cGVjdGVkIiwiZGVlcENvbXBhcmUiLCJkb250TWF0Y2hXaG9sZU9iamVjdCIsImFjdHVhbFR5cGUiLCJleHBlY3RlZFR5cGUiLCJleHBlY3RlZFZhbCIsIm1hdGNoQW55UHJvcGVydHkiLCIkbG9jYWxlIiwiZm9ybWF0cyIsIk5VTUJFUl9GT1JNQVRTIiwiY3VycmVuY3lTeW1ib2wiLCJmcmFjdGlvblNpemUiLCJDVVJSRU5DWV9TWU0iLCJQQVRURVJOUyIsIm1heEZyYWMiLCJmb3JtYXROdW1iZXIiLCJHUk9VUF9TRVAiLCJERUNJTUFMX1NFUCIsIm51bWJlciIsIm51bVN0ciIsImRpZ2l0cyIsIm51bWJlck9mSW50ZWdlckRpZ2l0cyIsInplcm9zIiwiZXhwb25lbnQiLCJaRVJPX0NIQVIiLCJNQVhfRElHSVRTIiwicm91bmROdW1iZXIiLCJwYXJzZWROdW1iZXIiLCJtaW5GcmFjIiwiZnJhY3Rpb25MZW4iLCJtaW4iLCJyb3VuZEF0IiwiZGlnaXQiLCJrIiwiY2FycnkiLCJyZWR1Y2VSaWdodCIsImdyb3VwU2VwIiwiZGVjaW1hbFNlcCIsImlzTmFOIiwiaXNJbmZpbml0eSIsImlzRmluaXRlIiwiaXNaZXJvIiwiYWJzIiwiZm9ybWF0dGVkVGV4dCIsImludGVnZXJMZW4iLCJkZWNpbWFscyIsInJlZHVjZSIsImdyb3VwcyIsImxnU2l6ZSIsImdTaXplIiwibmVnUHJlIiwibmVnU3VmIiwicG9zUHJlIiwicG9zU3VmIiwicGFkTnVtYmVyIiwibnVtIiwibmVnV3JhcCIsIm5lZyIsImRhdGVHZXR0ZXIiLCJkYXRlU3RyR2V0dGVyIiwic2hvcnRGb3JtIiwic3RhbmRBbG9uZSIsInRpbWVab25lR2V0dGVyIiwiem9uZSIsInBhZGRlZFpvbmUiLCJnZXRGaXJzdFRodXJzZGF5T2ZZZWFyIiwieWVhciIsImRheU9mV2Vla09uRmlyc3QiLCJnZXREYXkiLCJnZXRUaHVyc2RheVRoaXNXZWVrIiwiZGF0ZXRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsIndlZWtHZXR0ZXIiLCJmaXJzdFRodXJzIiwidGhpc1RodXJzIiwicm91bmQiLCJhbXBtR2V0dGVyIiwiZ2V0SG91cnMiLCJBTVBNUyIsImVyYUdldHRlciIsIkVSQVMiLCJsb25nRXJhR2V0dGVyIiwiRVJBTkFNRVMiLCJqc29uU3RyaW5nVG9EYXRlIiwic3RyaW5nIiwiUl9JU084NjAxX1NUUiIsInR6SG91ciIsInR6TWluIiwiZGF0ZVNldHRlciIsInNldFVUQ0Z1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJ0aW1lU2V0dGVyIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsIm0iLCJzIiwibXMiLCJwYXJzZUZsb2F0IiwiZm9ybWF0IiwiREFURVRJTUVfRk9STUFUUyIsIk5VTUJFUl9TVFJJTkciLCJEQVRFX0ZPUk1BVFNfU1BMSVQiLCJEQVRFX0ZPUk1BVFMiLCJzcGFjaW5nIiwiaW5wdXQiLCJsaW1pdCIsImJlZ2luIiwiSW5maW5pdHkiLCJzbGljZUZuIiwiZW5kIiwicHJvY2Vzc1ByZWRpY2F0ZXMiLCJzb3J0UHJlZGljYXRlcyIsInByZWRpY2F0ZSIsImRlc2NlbmRpbmciLCJvYmplY3RWYWx1ZSIsImdldFByZWRpY2F0ZVZhbHVlIiwiZGVmYXVsdENvbXBhcmUiLCJ2MSIsInYyIiwidHlwZTEiLCJ0eXBlMiIsInZhbHVlMSIsInZhbHVlMiIsInNvcnRQcmVkaWNhdGUiLCJyZXZlcnNlT3JkZXIiLCJjb21wYXJlRm4iLCJnZXRDb21wYXJpc29uT2JqZWN0IiwidGllQnJlYWtlciIsInByZWRpY2F0ZVZhbHVlcyIsInByZWRpY2F0ZXMiLCJkb0NvbXBhcmlzb24iLCJjb21wYXJlVmFsdWVzIiwibmdEaXJlY3RpdmUiLCJudWxsRm9ybVJlbmFtZUNvbnRyb2wiLCJjb250cm9sIiwiJG5hbWUiLCJGb3JtQ29udHJvbGxlciIsIiQkY29udHJvbHMiLCIkZXJyb3IiLCIkJHN1Y2Nlc3MiLCIkcGVuZGluZyIsIm5nRm9ybSIsIiRkaXJ0eSIsIiRwcmlzdGluZSIsIiR2YWxpZCIsIiRpbnZhbGlkIiwiJHN1Ym1pdHRlZCIsIiQkcGFyZW50Rm9ybSIsIm51bGxGb3JtQ3RybCIsIiQkYW5pbWF0ZSIsInNldHVwVmFsaWRpdHkiLCIkJGNsYXNzQ2FjaGUiLCJJTlZBTElEX0NMQVNTIiwiVkFMSURfQ0xBU1MiLCJhZGRTZXRWYWxpZGl0eU1ldGhvZCIsImNyZWF0ZUFuZFNldCIsImN0cmwiLCJ1bnNldEFuZENsZWFudXAiLCJ1bnNldCIsImlzT2JqZWN0RW1wdHkiLCJjYWNoZWRUb2dnbGVDbGFzcyIsInN3aXRjaFZhbHVlIiwidG9nZ2xlVmFsaWRhdGlvbkNzcyIsInZhbGlkYXRpb25FcnJvcktleSIsImlzVmFsaWQiLCJjbGF6eiIsIiRzZXRWYWxpZGl0eSIsIlBFTkRJTkdfQ0xBU1MiLCJjb21iaW5lZFN0YXRlIiwic3RyaW5nQmFzZWRJbnB1dFR5cGUiLCIkZm9ybWF0dGVycyIsIiRpc0VtcHR5IiwidGV4dElucHV0VHlwZSIsImJhc2VJbnB1dFR5cGUiLCJjb21wb3NpbmciLCJldiIsIm5nVHJpbSIsIiR2aWV3VmFsdWUiLCIkJGhhc05hdGl2ZVZhbGlkYXRvcnMiLCJkZWZlckxpc3RlbmVyIiwib3JpZ1ZhbHVlIiwia2V5Q29kZSIsIlBBUlRJQUxfVkFMSURBVElPTl9UWVBFUyIsIlBBUlRJQUxfVkFMSURBVElPTl9FVkVOVFMiLCJ2YWxpZGl0eSIsIlZBTElESVRZX1NUQVRFX1BST1BFUlRZIiwib3JpZ0JhZElucHV0IiwiYmFkSW5wdXQiLCJvcmlnVHlwZU1pc21hdGNoIiwidHlwZU1pc21hdGNoIiwiJHJlbmRlciIsIndlZWtQYXJzZXIiLCJpc29XZWVrIiwiZXhpc3RpbmdEYXRlIiwiV0VFS19SRUdFWFAiLCJ3ZWVrIiwiaG91cnMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiYWRkRGF5cyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJjcmVhdGVEYXRlUGFyc2VyIiwibWFwcGluZyIsImlzbyIsIklTT19EQVRFX1JFR0VYUCIsInl5eXkiLCJNTSIsImRkIiwiSEgiLCJtbSIsInNzIiwic3NzIiwicGFydCIsImNyZWF0ZURhdGVJbnB1dFR5cGUiLCJwYXJzZURhdGUiLCJpc1ZhbGlkRGF0ZSIsInBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUiLCJiYWRJbnB1dENoZWNrZXIiLCJwcmV2aW91c0RhdGUiLCIkb3B0aW9ucyIsImdldE9wdGlvbiIsIiQkcGFyc2VyTmFtZSIsIiRwYXJzZXJzIiwicGFyc2VkRGF0ZSIsIm5nTW9kZWxNaW5FcnIiLCJuZ01pbiIsIm1pblZhbCIsIiR2YWxpZGF0b3JzIiwiJHZhbGlkYXRlIiwibmdNYXgiLCJtYXhWYWwiLCJudW1iZXJGb3JtYXR0ZXJQYXJzZXIiLCJOVU1CRVJfUkVHRVhQIiwicGFyc2VOdW1iZXJBdHRyVmFsIiwiaXNOdW1iZXJJbnRlZ2VyIiwiY291bnREZWNpbWFscyIsIm51bVN0cmluZyIsImRlY2ltYWxTeW1ib2xJbmRleCIsImlzVmFsaWRGb3JTdGVwIiwidmlld1ZhbHVlIiwic3RlcEJhc2UiLCJzdGVwIiwiaXNOb25JbnRlZ2VyVmFsdWUiLCJpc05vbkludGVnZXJTdGVwQmFzZSIsImlzTm9uSW50ZWdlclN0ZXAiLCJ2YWx1ZURlY2ltYWxzIiwic3RlcEJhc2VEZWNpbWFscyIsInN0ZXBEZWNpbWFscyIsImRlY2ltYWxDb3VudCIsIm11bHRpcGxpZXIiLCJwb3ciLCJudW1iZXJJbnB1dFR5cGUiLCJuZ1N0ZXAiLCJzdGVwVmFsIiwibW9kZWxWYWx1ZSIsInJhbmdlSW5wdXRUeXBlIiwic2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIiLCJodG1sQXR0ck5hbWUiLCJjaGFuZ2VGbiIsIm1pbkNoYW5nZSIsIiRtb2RlbFZhbHVlIiwic3VwcG9ydHNSYW5nZSIsImVsVmFsIiwibWF4Q2hhbmdlIiwic3RlcENoYW5nZSIsImhhc01pbkF0dHIiLCJoYXNNYXhBdHRyIiwiaGFzU3RlcEF0dHIiLCJvcmlnaW5hbFJlbmRlciIsInJhbmdlVW5kZXJmbG93IiwicmFuZ2VPdmVyZmxvdyIsInN0ZXBNaXNtYXRjaCIsInVybElucHV0VHlwZSIsIlVSTF9SRUdFWFAiLCJlbWFpbElucHV0VHlwZSIsImVtYWlsIiwiRU1BSUxfUkVHRVhQIiwicmFkaW9JbnB1dFR5cGUiLCJkb1RyaW0iLCJjaGVja2VkIiwicGFyc2VDb25zdGFudEV4cHIiLCJwYXJzZUZuIiwiY2hlY2tib3hJbnB1dFR5cGUiLCJ0cnVlVmFsdWUiLCJuZ1RydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJuZ0ZhbHNlVmFsdWUiLCJjbGFzc0RpcmVjdGl2ZSIsImFycmF5RGlmZmVyZW5jZSIsImNsYXNzU3RyaW5nIiwidG9DbGFzc1N0cmluZyIsImNsYXNzVmFsdWUiLCJpbmRleFdhdGNoRXhwcmVzc2lvbiIsImFkZENsYXNzZXMiLCJkaWdlc3RDbGFzc0NvdW50cyIsInJlbW92ZUNsYXNzZXMiLCJ1cGRhdGVDbGFzc2VzIiwib2xkQ2xhc3NTdHJpbmciLCJuZXdDbGFzc1N0cmluZyIsIm9sZENsYXNzQXJyYXkiLCJuZXdDbGFzc0FycmF5IiwidG9SZW1vdmVBcnJheSIsInRvQWRkQXJyYXkiLCJ0b1JlbW92ZVN0cmluZyIsInRvQWRkU3RyaW5nIiwiY2xhc3NBcnJheSIsImNsYXNzZXNUb1VwZGF0ZSIsImNsYXNzQ291bnRzIiwibmdDbGFzc0luZGV4V2F0Y2hBY3Rpb24iLCJuZXdNb2R1bG8iLCJvbGRNb2R1bG8iLCJuZ0NsYXNzV2F0Y2hBY3Rpb24iLCIkaW5kZXgiLCJOZ01vZGVsQ29udHJvbGxlciIsIiQkcmF3TW9kZWxWYWx1ZSIsIiRhc3luY1ZhbGlkYXRvcnMiLCIkdmlld0NoYW5nZUxpc3RlbmVycyIsIiR1bnRvdWNoZWQiLCIkdG91Y2hlZCIsImRlZmF1bHRNb2RlbE9wdGlvbnMiLCIkJHBhcnNlZE5nTW9kZWwiLCIkJHBhcnNlZE5nTW9kZWxBc3NpZ24iLCIkJG5nTW9kZWxHZXQiLCIkJG5nTW9kZWxTZXQiLCIkJHBlbmRpbmdEZWJvdW5jZSIsIiQkcGFyc2VyVmFsaWQiLCIkJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQiLCJkZWZpbmVQcm9wZXJ0eSIsIiQkYXR0ciIsIiQkdGltZW91dCIsIiQkZXhjZXB0aW9uSGFuZGxlciIsInNldHVwTW9kZWxXYXRjaGVyIiwiZm9ybWF0dGVycyIsIiQkdXBkYXRlRW1wdHlDbGFzc2VzIiwiJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlIiwiJCRydW5WYWxpZGF0b3JzIiwiTW9kZWxPcHRpb25zIiwiJCRvcHRpb25zIiwic2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMiLCJvcHRpb25FbCIsIlJFR0VYX1NUUklOR19SRUdFWFAiLCJtYW51YWxMb3dlcmNhc2UiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZUF0IiwibWFudWFsVXBwZXJjYXNlIiwialF1ZXJ5IiwiZG9jdW1lbnRNb2RlIiwicnVsZXMiLCJuZ0NzcEVsZW1lbnQiLCJuZ0NzcEF0dHJpYnV0ZSIsIm5vSW5saW5lU3R5bGUiLCJqcSIsIm5hbWVfIiwiZWwiLCJjdXJyZW50U2NyaXB0IiwiSFRNTFNjcmlwdEVsZW1lbnQiLCJTVkdTY3JpcHRFbGVtZW50IiwiZ2V0TmFtZWRJdGVtIiwiZXZlcnkiLCJvcmlnaW4iLCJiaW5kSlF1ZXJ5RmlyZWQiLCJ2ZXJzaW9uIiwiZnVsbCIsIm1ham9yIiwibWlub3IiLCJkb3QiLCJjb2RlTmFtZSIsImV4cGFuZG8iLCJfZGF0YSIsIm1vdXNlbGVhdmUiLCJtb3VzZWVudGVyIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInJlYWR5IiwibmdNaW5sZW5ndGgiLCJuZ01heGxlbmd0aCIsIm5nUGF0dGVybiIsInJlbW92ZURhdGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjc3MiLCJyZXQiLCJsb3dlcmNhc2VkTmFtZSIsImlzQm9vbGVhbkF0dHIiLCJnZXRUZXh0IiwiJGR2IiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsIm5vZGVDb3VudCIsInR5cGVzIiwiYWRkSGFuZGxlciIsIm5vRXZlbnRMaXN0ZW5lciIsIm9uZSIsIm9uRm4iLCJyZXBsYWNlTm9kZSIsImluc2VydEJlZm9yZSIsImNoaWxkcmVuIiwiY29udGVudERvY3VtZW50IiwicHJlcGVuZCIsIndyYXBOb2RlIiwiZGV0YWNoIiwiYWZ0ZXIiLCJuZXdFbGVtZW50IiwidG9nZ2xlQ2xhc3MiLCJjb25kaXRpb24iLCJjbGFzc0NvbmRpdGlvbiIsIm5leHRFbGVtZW50U2libGluZyIsInRyaWdnZXJIYW5kbGVyIiwiZXh0cmFQYXJhbWV0ZXJzIiwiZHVtbXlFdmVudCIsImV2ZW50Rm5zQ29weSIsImhhbmRsZXJBcmdzIiwiYXJnMyIsInVuYmluZCIsIm5hbktleSIsIl9pZHgiLCJfdHJhbnNmb3JtS2V5IiwiJCRNYXBQcm92aWRlciIsIiRhbmltYXRlTWluRXJyIiwiJCRDb3JlQW5pbWF0ZUpzUHJvdmlkZXIiLCIkJENvcmVBbmltYXRlUXVldWVQcm92aWRlciIsInBvc3REaWdlc3RFbGVtZW50cyIsIiQkQW5pbWF0ZVJ1bm5lciIsInVwZGF0ZURhdGEiLCJoYW5kbGVDU1NDbGFzc0NoYW5nZXMiLCJleGlzdGluZyIsImFkZFJlbW92ZUNsYXNzZXNQb3N0RGlnZXN0IiwiYWRkIiwiY2xhc3Nlc0FkZGVkIiwiY2xhc3Nlc1JlbW92ZWQiLCJwaW4iLCJkb21PcGVyYXRpb24iLCJmcm9tIiwidG8iLCJydW5uZXIiLCJjb21wbGV0ZSIsIiRBbmltYXRlUHJvdmlkZXIiLCJjbGFzc05hbWVGaWx0ZXIiLCIkJHJlZ2lzdGVyZWRBbmltYXRpb25zIiwiJCRhbmltYXRlUXVldWUiLCJkb21JbnNlcnQiLCJhZnRlckVsZW1lbnQiLCJhZnRlck5vZGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZW50ZXIiLCJtb3ZlIiwibGVhdmUiLCJhZGRjbGFzcyIsInNldENsYXNzIiwiYW5pbWF0ZSIsInRlbXBDbGFzc2VzIiwiJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIiLCIkJHJBRiIsIndhaXRGb3JUaWNrIiwid2FpdFF1ZXVlIiwicGFzc2VkIiwiJCRBbmltYXRlUnVubmVyRmFjdG9yeVByb3ZpZGVyIiwiJCRhbmltYXRlQXN5bmNSdW4iLCIkJGlzRG9jdW1lbnRIaWRkZW4iLCJBbmltYXRlUnVubmVyIiwic2V0SG9zdCIsInJhZlRpY2siLCJ0aW1lb3V0VGljayIsIl9kb25lQ2FsbGJhY2tzIiwiX3RpY2siLCJfc3RhdGUiLCJjaGFpbiIsInJ1bm5lcnMiLCJvblByb2dyZXNzIiwiZ2V0UHJvbWlzZSIsInJlc29sdmVIYW5kbGVyIiwicmVqZWN0SGFuZGxlciIsInBhdXNlIiwicmVzdW1lIiwiX3Jlc29sdmUiLCIkQ29yZUFuaW1hdGVDc3NQcm92aWRlciIsImluaXRpYWxPcHRpb25zIiwiYXBwbHlBbmltYXRpb25Db250ZW50cyIsImNsb3NlZCIsIiQkcHJlcGFyZWQiLCJjbGVhbnVwU3R5bGVzIiwic3RhcnQiLCJpc0ZpcnN0Q2hhbmdlIiwiJCRGb3JjZVJlZmxvd1Byb3ZpZGVyIiwiZG9tTm9kZSIsIm9mZnNldFdpZHRoIiwiQ29udGVudC1UeXBlIiwiWyIsInsiLCIkanNvbnBDYWxsYmFja3NQcm92aWRlciIsImNhbGxiYWNrSWQiLCJjYWxsZWQiLCJjYWxsYmFja01hcCIsIiQkY291bnRlciIsIlBBVEhfTUFUQ0giLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJsb2NhdGlvblByb3RvdHlwZSIsInBhcmFtVmFsdWUiLCJMb2NhdGlvbiIsIiRwYXJzZU1pbkVyciIsIk9QRVJBVE9SUyIsIkVTQ0FQRSIsImYiLCJ0IiwiJyIsIlwiIiwibGV4IiwidG9rZW5zIiwicmVhZFN0cmluZyIsInBlZWsiLCJyZWFkTnVtYmVyIiwicGVla011bHRpY2hhciIsInJlYWRJZGVudCIsImlzIiwiaXNXaGl0ZXNwYWNlIiwiY2gyIiwiY2gzIiwib3AxIiwib3AyIiwib3AzIiwidGhyb3dFcnJvciIsImNoYXJzIiwiY29kZVBvaW50QXQiLCJpc1ZhbGlkSWRlbnRpZmllclN0YXJ0IiwiaXNWYWxpZElkZW50aWZpZXJDb250aW51ZSIsImNwIiwiY3AxIiwiY3AyIiwiaXNFeHBPcGVyYXRvciIsImNvbFN0ciIsInBlZWtDaCIsInF1b3RlIiwicmF3U3RyaW5nIiwiaGV4IiwiRXhwcmVzc2lvblN0YXRlbWVudCIsIlByb3BlcnR5IiwicHJvZ3JhbSIsImV4cHJlc3Npb25TdGF0ZW1lbnQiLCJleHBlY3QiLCJmaWx0ZXJDaGFpbiIsImFzc2lnbm1lbnQiLCJ0ZXJuYXJ5IiwibG9naWNhbE9SIiwiY29uc3VtZSIsImxvZ2ljYWxBTkQiLCJlcXVhbGl0eSIsInJlbGF0aW9uYWwiLCJhZGRpdGl2ZSIsIm11bHRpcGxpY2F0aXZlIiwidW5hcnkiLCJwcmltYXJ5IiwiYXJyYXlEZWNsYXJhdGlvbiIsInNlbGZSZWZlcmVudGlhbCIsInBhcnNlQXJndW1lbnRzIiwiYmFzZUV4cHJlc3Npb24iLCJwZWVrVG9rZW4iLCJraW5kIiwiZTEiLCJlMiIsImUzIiwiZTQiLCJwZWVrQWhlYWQiLCIkbG9jYWxzIiwibmV4dElkIiwidmFycyIsIm93biIsImFzc2lnbmFibGUiLCJzdGFnZSIsImNvbXB1dGluZyIsInJlY3Vyc2UiLCJyZXR1cm5fIiwiZ2VuZXJhdGVGdW5jdGlvbiIsImZuS2V5IiwiaW50b0lkIiwid2F0Y2hJZCIsImZuU3RyaW5nIiwiVVNFIiwiU1RSSUNUIiwiZmlsdGVyUHJlZml4Iiwid2F0Y2hGbnMiLCJ2YXJzUHJlZml4Iiwic2VjdGlvbiIsIm5hbWVJZCIsInJlY3Vyc2lvbkZuIiwic2tpcFdhdGNoSWRDaGVjayIsImlmXyIsImxhenlBc3NpZ24iLCJjb21wdXRlZE1lbWJlciIsImxhenlSZWN1cnNlIiwicGx1cyIsIm5vdCIsImdldEhhc093blByb3BlcnR5IiwiaXNOdWxsIiwibm9uQ29tcHV0ZWRNZW1iZXIiLCJub3ROdWxsIiwibWVtYmVyIiwiZGVmYXVsdFZhbHVlIiwiU0FGRV9JREVOVElGSUVSIiwiVU5TQUZFX0NIQVJBQ1RFUlMiLCJzdHJpbmdFc2NhcGVGbiIsInN0cmluZ0VzY2FwZVJlZ2V4IiwiYyIsInNraXAiLCJpbml0IiwicmhzIiwibGhzIiwidW5hcnkrIiwidW5hcnktIiwidW5hcnkhIiwiYmluYXJ5KyIsImJpbmFyeS0iLCJiaW5hcnkqIiwiYmluYXJ5LyIsImJpbmFyeSUiLCJiaW5hcnk9PT0iLCJiaW5hcnkhPT0iLCJiaW5hcnk9PSIsImJpbmFyeSE9IiwiYmluYXJ5PCIsImJpbmFyeT4iLCJiaW5hcnk8PSIsImJpbmFyeT49IiwiYmluYXJ5JiYiLCJiaW5hcnl8fCIsInRlcm5hcnk/OiIsInl5IiwieSIsIk1NTU0iLCJNTU0iLCJNIiwiTExMTCIsIkgiLCJoaCIsIkVFRUUiLCJFRUUiLCJaIiwid3ciLCJ3IiwiRyIsIkdHIiwiR0dHIiwiR0dHRyIsImh0bWxBbmNob3JEaXJlY3RpdmUiLCJ4bGlua0hyZWYiLCJuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyIsInByb3BOYW1lIiwiZGVmYXVsdExpbmtGbiIsIm5vcm1hbGl6ZWQiLCJodG1sQXR0ciIsIiRhZGRDb250cm9sIiwiJCRyZW5hbWVDb250cm9sIiwiJHJlbW92ZUNvbnRyb2wiLCIkc2V0RGlydHkiLCIkc2V0U3VibWl0dGVkIiwiJHJvbGxiYWNrVmlld1ZhbHVlIiwiJGNvbW1pdFZpZXdWYWx1ZSIsIm5ld05hbWUiLCJvbGROYW1lIiwiUFJJU1RJTkVfQ0xBU1MiLCJESVJUWV9DTEFTUyIsIiRzZXRVbnRvdWNoZWQiLCJmb3JtRGlyZWN0aXZlRmFjdG9yeSIsImlzTmdGb3JtIiwiZ2V0U2V0dGVyIiwiZm9ybUVsZW1lbnQiLCJuYW1lQXR0ciIsImN0cmxzIiwiaGFuZGxlRm9ybVN1Ym1pc3Npb24iLCJzZXR0ZXIiLCJmb3JtRGlyZWN0aXZlIiwibmdGb3JtRGlyZWN0aXZlIiwiREFURV9SRUdFWFAiLCJEQVRFVElNRUxPQ0FMX1JFR0VYUCIsIk1PTlRIX1JFR0VYUCIsIlRJTUVfUkVHRVhQIiwiaW5wdXRUeXBlIiwiZGF0ZXRpbWUtbG9jYWwiLCJ0aW1lIiwibW9udGgiLCJyYWRpbyIsInJhbmdlIiwiY2hlY2tib3giLCJzdWJtaXQiLCJpbnB1dERpcmVjdGl2ZSIsIkNPTlNUQU5UX1ZBTFVFX1JFR0VYUCIsIm5nVmFsdWVEaXJlY3RpdmUiLCJ1cGRhdGVFbGVtZW50VmFsdWUiLCJwcm9wVmFsdWUiLCJ0cGxBdHRyIiwibmdWYWx1ZSIsIm5nQmluZERpcmVjdGl2ZSIsIiRjb21waWxlIiwidGVtcGxhdGVFbGVtZW50IiwibmdCaW5kIiwibmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUiLCJuZ0JpbmRUZW1wbGF0ZSIsIm5nQmluZEh0bWxEaXJlY3RpdmUiLCJuZ0JpbmRIdG1sR2V0dGVyIiwibmdCaW5kSHRtbCIsIm5nQmluZEh0bWxXYXRjaCIsImdldFRydXN0ZWRIdG1sIiwibmdDaGFuZ2VEaXJlY3RpdmUiLCJuZ0NoYW5nZSIsIm5nQ2xhc3NEaXJlY3RpdmUiLCJuZ0NsYXNzT2RkRGlyZWN0aXZlIiwibmdDbGFzc0V2ZW5EaXJlY3RpdmUiLCJuZ0Nsb2FrRGlyZWN0aXZlIiwibmdDb250cm9sbGVyRGlyZWN0aXZlIiwibmdFdmVudERpcmVjdGl2ZXMiLCJmb3JjZUFzeW5jRXZlbnRzIiwiYmx1ciIsImZvY3VzIiwibmdJZkRpcmVjdGl2ZSIsInByZXZpb3VzRWxlbWVudHMiLCJuZ0lmIiwibmdJbmNsdWRlRGlyZWN0aXZlIiwiJGFuY2hvclNjcm9sbCIsInNyY0V4cCIsIm5nSW5jbHVkZSIsIm9ubG9hZEV4cCIsImF1dG9TY3JvbGxFeHAiLCJhdXRvc2Nyb2xsIiwicHJldmlvdXNFbGVtZW50IiwiY3VycmVudEVsZW1lbnQiLCJjaGFuZ2VDb3VudGVyIiwiY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCIsImFmdGVyQW5pbWF0aW9uIiwidGhpc0NoYW5nZUlkIiwibmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUiLCJuZ0luaXREaXJlY3RpdmUiLCJuZ0luaXQiLCJuZ0xpc3REaXJlY3RpdmUiLCJuZ0xpc3QiLCJ0cmltVmFsdWVzIiwiJCRpbml0R2V0dGVyU2V0dGVycyIsImludm9rZU1vZGVsR2V0dGVyIiwiaW52b2tlTW9kZWxTZXR0ZXIiLCIkJCRwIiwiJHNldFRvdWNoZWQiLCJwcmV2VmFsaWQiLCJwcmV2TW9kZWxWYWx1ZSIsImFsbG93SW52YWxpZCIsInRoYXQiLCJhbGxWYWxpZCIsIiQkd3JpdGVNb2RlbFRvU2NvcGUiLCJkb25lQ2FsbGJhY2siLCJzZXRWYWxpZGl0eSIsImxvY2FsVmFsaWRhdGlvblJ1bklkIiwidmFsaWRhdGlvbkRvbmUiLCJlcnJvcktleSIsInN5bmNWYWxpZGF0b3JzVmFsaWQiLCJ2YWxpZGF0b3IiLCJCb29sZWFuIiwidmFsaWRhdG9yUHJvbWlzZXMiLCIkJHBhcnNlQW5kVmFsaWRhdGUiLCJ3cml0ZVRvTW9kZWxJZk5lZWRlZCIsIiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQiLCJkZWJvdW5jZURlbGF5IiwiJG92ZXJyaWRlTW9kZWxPcHRpb25zIiwiY3JlYXRlQ2hpbGQiLCJuZ01vZGVsRGlyZWN0aXZlIiwibW9kZWxDdHJsIiwiZm9ybUN0cmwiLCJvcHRpb25zQ3RybCIsInNldFRvdWNoZWQiLCJERUZBVUxUX1JFR0VYUCIsImluaGVyaXRBbGwiLCJ1cGRhdGVPbkRlZmF1bHQiLCJ1cGRhdGVPbiIsImRlYm91bmNlIiwiZ2V0dGVyU2V0dGVyIiwibmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUiLCJOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXIiLCIkJGF0dHJzIiwicGFyZW50T3B0aW9ucyIsInBhcmVudEN0cmwiLCJtb2RlbE9wdGlvbnNEZWZpbml0aW9uIiwibmdNb2RlbE9wdGlvbnMiLCJuZ05vbkJpbmRhYmxlRGlyZWN0aXZlIiwibmdPcHRpb25zTWluRXJyIiwiTkdfT1BUSU9OU19SRUdFWFAiLCJuZ09wdGlvbnNEaXJlY3RpdmUiLCJwYXJzZU9wdGlvbnNFeHByZXNzaW9uIiwib3B0aW9uc0V4cCIsInNlbGVjdEVsZW1lbnQiLCJPcHRpb24iLCJzZWxlY3RWYWx1ZSIsImxhYmVsIiwiZ3JvdXAiLCJkaXNhYmxlZCIsImdldE9wdGlvblZhbHVlc0tleXMiLCJvcHRpb25WYWx1ZXMiLCJvcHRpb25WYWx1ZXNLZXlzIiwia2V5TmFtZSIsIml0ZW1LZXkiLCJ2YWx1ZU5hbWUiLCJzZWxlY3RBcyIsInRyYWNrQnkiLCJzZWxlY3RBc0ZuIiwidmlld1ZhbHVlRm4iLCJ0cmFja0J5Rm4iLCJnZXRUcmFja0J5VmFsdWVGbiIsImdldFRyYWNrQnlWYWx1ZSIsImdldExvY2FscyIsImRpc3BsYXlGbiIsImdyb3VwQnlGbiIsImRpc2FibGVXaGVuRm4iLCJ2YWx1ZXNGbiIsImdldFdhdGNoYWJsZXMiLCJ3YXRjaGVkQXJyYXkiLCJvcHRpb25WYWx1ZXNMZW5ndGgiLCJkaXNhYmxlV2hlbiIsImdldE9wdGlvbnMiLCJvcHRpb25JdGVtcyIsInNlbGVjdFZhbHVlTWFwIiwib3B0aW9uSXRlbSIsImdldE9wdGlvbkZyb21WaWV3VmFsdWUiLCJnZXRWaWV3VmFsdWVGcm9tT3B0aW9uIiwibmdPcHRpb25zUG9zdExpbmsiLCJhZGRPcHRpb25FbGVtZW50Iiwib3B0aW9uRWxlbWVudCIsIm9wdGlvblRlbXBsYXRlIiwidXBkYXRlT3B0aW9uRWxlbWVudCIsImdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uIiwidXBkYXRlT3B0aW9ucyIsInNlbGVjdEN0cmwiLCJyZWFkVmFsdWUiLCJuZ09wdGlvbnMiLCJncm91cEVsZW1lbnRNYXAiLCJwcm92aWRlZEVtcHR5T3B0aW9uIiwiZW1wdHlPcHRpb24iLCJncm91cEVsZW1lbnQiLCJvcHRHcm91cFRlbXBsYXRlIiwibGlzdEZyYWdtZW50IiwibmdNb2RlbEN0cmwiLCJuZXh0VmFsdWUiLCJoYXNFbXB0eU9wdGlvbiIsImdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlIiwid3JpdGVWYWx1ZSIsInNlbGVjdGVkT3B0aW9ucyIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0aW9ucyIsInNlbGVjdGVkT3B0aW9uIiwicmVtb3ZlVW5rbm93bk9wdGlvbiIsInVuc2VsZWN0RW1wdHlPcHRpb24iLCJzZWxlY3RFbXB0eU9wdGlvbiIsInVua25vd25PcHRpb24iLCJ1cGRhdGVVbmtub3duT3B0aW9uIiwicmVuZGVyVW5rbm93bk9wdGlvbiIsInJlZ2lzdGVyT3B0aW9uIiwib3B0aW9uU2NvcGUiLCJuZ1BsdXJhbGl6ZURpcmVjdGl2ZSIsIkJSQUNFIiwiSVNfV0hFTiIsInVwZGF0ZUVsZW1lbnRUZXh0IiwibmV3VGV4dCIsImxhc3RDb3VudCIsIm51bWJlckV4cCIsIndoZW5FeHAiLCJ3aGVucyIsIndoZW5zRXhwRm5zIiwiYnJhY2VSZXBsYWNlbWVudCIsIndhdGNoUmVtb3ZlciIsImF0dHJpYnV0ZU5hbWUiLCJ0bXBNYXRjaCIsIndoZW5LZXkiLCJjb3VudElzTmFOIiwicGx1cmFsQ2F0Iiwid2hlbkV4cEZuIiwibmdSZXBlYXREaXJlY3RpdmUiLCJuZ1JlcGVhdE1pbkVyciIsInVwZGF0ZVNjb3BlIiwidmFsdWVJZGVudGlmaWVyIiwia2V5SWRlbnRpZmllciIsImFycmF5TGVuZ3RoIiwiJGZpcnN0IiwiJGxhc3QiLCIkbWlkZGxlIiwiJG9kZCIsIiRldmVuIiwiZ2V0QmxvY2tTdGFydCIsImdldEJsb2NrRW5kIiwibmdSZXBlYXQiLCJuZ1JlcGVhdEVuZENvbW1lbnQiLCJhbGlhc0FzIiwidHJhY2tCeUV4cCIsInRyYWNrQnlFeHBHZXR0ZXIiLCJ0cmFja0J5SWRFeHBGbiIsInRyYWNrQnlJZEFycmF5Rm4iLCJ0cmFja0J5SWRPYmpGbiIsImhhc2hGbkxvY2FscyIsImxhc3RCbG9ja01hcCIsIm5leHROb2RlIiwiY29sbGVjdGlvbkxlbmd0aCIsInRyYWNrQnlJZCIsInRyYWNrQnlJZEZuIiwiY29sbGVjdGlvbktleXMiLCJuZXh0QmxvY2tPcmRlciIsInByZXZpb3VzTm9kZSIsIm5leHRCbG9ja01hcCIsImJsb2NrS2V5IiwibmdTaG93RGlyZWN0aXZlIiwibmdTaG93IiwibmdIaWRlRGlyZWN0aXZlIiwibmdIaWRlIiwibmdTdHlsZURpcmVjdGl2ZSIsIm5nU3R5bGUiLCJuZXdTdHlsZXMiLCJvbGRTdHlsZXMiLCJuZ1N3aXRjaERpcmVjdGl2ZSIsImNhc2VzIiwibmdTd2l0Y2hDb250cm9sbGVyIiwid2F0Y2hFeHByIiwibmdTd2l0Y2giLCJzZWxlY3RlZFRyYW5zY2x1ZGVzIiwic2VsZWN0ZWRFbGVtZW50cyIsInByZXZpb3VzTGVhdmVBbmltYXRpb25zIiwic2VsZWN0ZWRTY29wZXMiLCJzcGxpY2VGYWN0b3J5Iiwic2VsZWN0ZWRUcmFuc2NsdWRlIiwiY2FzZUVsZW1lbnQiLCJzZWxlY3RlZFNjb3BlIiwiYW5jaG9yIiwibmdTd2l0Y2hXaGVuRGlyZWN0aXZlIiwibmdTd2l0Y2hXaGVuIiwibmdTd2l0Y2hXaGVuU2VwYXJhdG9yIiwid2hlbkNhc2UiLCJuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUiLCJuZ1RyYW5zY2x1ZGVNaW5FcnIiLCJuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJmYWxsYmFja0xpbmtGbiIsIm5nVHJhbnNjbHVkZUNsb25lQXR0YWNoRm4iLCJub3RXaGl0ZXNwYWNlIiwidXNlRmFsbGJhY2tDb250ZW50IiwibmdUcmFuc2NsdWRlIiwibmdUcmFuc2NsdWRlU2xvdCIsInNjcmlwdERpcmVjdGl2ZSIsIm5vb3BOZ01vZGVsQ29udHJvbGxlciIsIlNlbGVjdENvbnRyb2xsZXIiLCJzY2hlZHVsZVJlbmRlciIsInJlbmRlclNjaGVkdWxlZCIsInNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlIiwicmVuZGVyQWZ0ZXIiLCJ1cGRhdGVTY2hlZHVsZWQiLCJvcHRpb25zTWFwIiwidW5rbm93blZhbCIsInJlYWxWYWwiLCJoYXNPcHRpb24iLCJjdXJyZW50bHlTZWxlY3RlZE9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJoYXNoZWRWYWwiLCJhZGRPcHRpb24iLCJyZW1vdmVPcHRpb24iLCJvcHRpb25BdHRycyIsImludGVycG9sYXRlVmFsdWVGbiIsImludGVycG9sYXRlVGV4dEZuIiwicmVtb3ZhbCIsInByZXZpb3VzbHlTZWxlY3RlZCIsInJlbW92ZVZhbHVlIiwic2VsZWN0RGlyZWN0aXZlIiwic2VsZWN0UHJlTGluayIsInNob3VsZEJlU2VsZWN0ZWQiLCJsYXN0VmlldyIsImxhc3RWaWV3UmVmIiwic2VsZWN0UG9zdExpbmsiLCJvcHRpb25EaXJlY3RpdmUiLCJyZXF1aXJlZERpcmVjdGl2ZSIsInJlcXVpcmVkIiwicGF0dGVybkRpcmVjdGl2ZSIsInBhdHRlcm5FeHAiLCJtYXhsZW5ndGhEaXJlY3RpdmUiLCJtYXhsZW5ndGgiLCJpbnRWYWwiLCJtaW5sZW5ndGhEaXJlY3RpdmUiLCJtaW5sZW5ndGgiLCJvcmlnaW5hbENsZWFuRGF0YSIsImpxTmFtZSIsImVsZW1zIiwiJCRjc3AiLCIkJGVuY29kZVVyaVNlZ21lbnQiLCIkJGVuY29kZVVyaVF1ZXJ5IiwiJCRzdHJpbmdpZnkiLCJ0ZXh0YXJlYSIsImZvcm0iLCJzZWxlY3QiLCJuZ0NsYXNzIiwibmdDbGFzc0V2ZW4iLCJuZ0NsYXNzT2RkIiwibmdDbG9hayIsIm5nQ29udHJvbGxlciIsIm5nTm9uQmluZGFibGUiLCJuZ1BsdXJhbGl6ZSIsIm5nU3dpdGNoRGVmYXVsdCIsIm5nUmVxdWlyZWQiLCIkYW5pbWF0ZUNzcyIsIiQkYW5pbWF0ZUpzIiwiJCRmb3JjZVJlZmxvdyIsIiRpbnRlcnZhbCIsIiRodHRwUGFyYW1TZXJpYWxpemVyIiwiJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UiLCIkJHRlc3RhYmlsaXR5IiwiJCRqcUxpdGUiLCIkJE1hcCIsImFuZ3VsYXJWZXJzaW9uIiwiZ2V0RGVjaW1hbHMiLCJnZXRWRiIsIm9wdF9wcmVjaXNpb24iLCJQTFVSQUxfQ0FURUdPUlkiLCJaRVJPIiwiT05FIiwiVFdPIiwiRkVXIiwiTUFOWSIsIk9USEVSIiwiREFZIiwiRklSU1REQVlPRldFRUsiLCJNT05USCIsIlNIT1JUREFZIiwiU0hPUlRNT05USCIsIlNUQU5EQUxPTkVNT05USCIsIldFRUtFTkRSQU5HRSIsImZ1bGxEYXRlIiwibG9uZ0RhdGUiLCJtZWRpdW0iLCJtZWRpdW1EYXRlIiwibWVkaXVtVGltZSIsInNob3J0Iiwic2hvcnREYXRlIiwic2hvcnRUaW1lIiwibWluSW50IiwibG9jYWxlSUQiLCJ2ZiIsImhlYWQiLCJleHBvcnRzIiwiYW5jZXN0b3JzIiwiZmlyc3QiLCJzZWNvbmQiLCJvYmplY3RLZXlzIiwiY2VpbCIsImluaGVyaXRQYXJhbXMiLCJjdXJyZW50UGFyYW1zIiwibmV3UGFyYW1zIiwiJGN1cnJlbnQiLCIkdG8iLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRzIiwiaW5oZXJpdGVkIiwiaW5oZXJpdExpc3QiLCJlcXVhbEZvcktleXMiLCJmaWx0ZXJCeUtleXMiLCJmaWx0ZXJlZCIsInBpY2siLCJvbWl0Iiwic2lsZW5jZVVuY2F1Z2h0SW5Qcm9taXNlIiwiJFJlc29sdmUiLCJWSVNJVF9JTl9QUk9HUkVTUyIsIlZJU0lUX0RPTkUiLCJOT1RISU5HIiwiTk9fREVQRU5ERU5DSUVTIiwiTk9fTE9DQUxTIiwiTk9fUEFSRU5UIiwiJCRwcm9taXNlcyIsIiQkdmFsdWVzIiwic3R1ZHkiLCJpbnZvY2FibGVzIiwidmlzaXQiLCJ2aXNpdGVkIiwiY3ljbGUiLCJwbGFuIiwicGFyYW0iLCJpc1Jlc29sdmUiLCJpbnZvY2FibGVLZXlzIiwid2FpdCIsIm1lcmdlZCIsIiQkaW5oZXJpdGVkVmFsdWVzIiwicmVzb2x1dGlvbiIsImZhaWwiLCIkJGZhaWx1cmUiLCJpbnZvY2FibGUiLCJvbmZhaWx1cmUiLCJpbnZvY2F0aW9uIiwicHJvY2VlZCIsIndhaXRQYXJhbXMiLCJkZXAiLCJUZW1wbGF0ZUZhY3RvcnlQcm92aWRlciIsInNob3VsZFVuc2FmZWx5VXNlSHR0cCIsIlRlbXBsYXRlRmFjdG9yeSIsImZyb21Db25maWciLCJmcm9tU3RyaW5nIiwiZnJvbVVybCIsInRlbXBsYXRlUHJvdmlkZXIiLCJmcm9tUHJvdmlkZXIiLCJVcmxNYXRjaGVyIiwicGFyZW50TWF0Y2hlciIsImFkZFBhcmFtZXRlciIsInBhcmFtTmFtZXMiLCIkJFVNRlAiLCJQYXJhbSIsInF1b3RlUmVnRXhwIiwic3F1YXNoIiwic3Vycm91bmRQYXR0ZXJuIiwibWF0Y2hEZXRhaWxzIiwiaXNTZWFyY2giLCJzZWdtZW50IiwiY2ZnIiwiY2FzZUluc2Vuc2l0aXZlIiwicGxhY2Vob2xkZXIiLCJzZWFyY2hQbGFjZWhvbGRlciIsIiQkbmV3IiwiUGFyYW1TZXQiLCJpc09wdGlvbmFsIiwic291cmNlU2VhcmNoIiwic291cmNlUGF0aCIsInN0cmljdCIsIiQkcGFyYW1OYW1lcyIsIiRVcmxNYXRjaGVyRmFjdG9yeSIsInZhbFRvU3RyaW5nIiwifiIsIi8iLCJ2YWxGcm9tU3RyaW5nIiwifn4iLCJ+MkYiLCJnZXREZWZhdWx0Q29uZmlnIiwiaXNTdHJpY3RNb2RlIiwiaXNDYXNlSW5zZW5zaXRpdmUiLCJpc0luamVjdGFibGUiLCJmbHVzaFR5cGVRdWV1ZSIsInR5cGVRdWV1ZSIsIiR0eXBlcyIsImRlZiIsImRlZmF1bHRTcXVhc2hQb2xpY3kiLCJlbnF1ZXVlIiwiZGVmYXVsdFR5cGVzIiwiZW5jb2RlIiwiZGVjb2RlIiwiaW50IiwiYm9vbCIsImNhcHR1cmUiLCJhbnkiLCIkJGdldERlZmF1bHRWYWx1ZSIsInN0cmljdE1vZGUiLCJpc01hdGNoZXIiLCJvIiwiZGVmaW5pdGlvbkZuIiwiJCRmbiIsIiR2YWx1ZSIsImhhc1JlcGxhY2VWYWwiLCJyZXBsYWNlbWVudCIsInVybFR5cGUiLCJhcnJheU1vZGUiLCJhcnJheURlZmF1bHRzIiwiYXJyYXlQYXJhbU5vbWVuY2xhdHVyZSIsIiRhc0FycmF5IiwiY29uZmlndXJlZEtleXMiLCJkZWZhdWx0UG9saWN5IiwiZHluYW1pYyIsIiQkcGFyZW50IiwiJCRrZXlzIiwiaWdub3JlIiwicGFyYW1zZXQiLCJwYXJhbVZhbHVlcyIsIiQkZXF1YWxzIiwicGFyYW1WYWx1ZXMxIiwicGFyYW1WYWx1ZXMyIiwiZXF1YWwiLCIkJHZhbGlkYXRlcyIsInJhd1ZhbCIsImVuY29kZWQiLCIkVXJsUm91dGVyUHJvdmlkZXIiLCIkdXJsTWF0Y2hlckZhY3RvcnkiLCJyZWdFeHBQcmVmaXgiLCJpbnRlcnBvbGF0ZSIsImhhbmRsZUlmTWF0Y2giLCIkbWF0Y2giLCJhcHBlbmRCYXNlUGF0aCIsImlzSHRtbDUiLCJhYnNvbHV0ZSIsImV2dCIsImNoZWNrIiwicnVsZSIsImhhbmRsZWQiLCJsYXN0UHVzaGVkVXJsIiwibGlzdGVuIiwiaW50ZXJjZXB0RGVmZXJyZWQiLCJzeW5jIiwicmVhZCIsInVybE1hdGNoZXIiLCIkJGF2b2lkUmVzeW5jIiwidmFsaWRhdGVzIiwic2xhc2giLCJyZWRpcmVjdCIsImhhbmRsZXJJc1N0cmluZyIsInN0cmF0ZWdpZXMiLCJnbG9iYWwiLCJzdGlja3kiLCJkZWZlckludGVyY2VwdCIsIiRTdGF0ZVByb3ZpZGVyIiwiaXNSZWxhdGl2ZSIsInN0YXRlTmFtZSIsImZpbmRTdGF0ZSIsInN0YXRlT3JOYW1lIiwiaXNTdHIiLCJyZWwiLCJwYXRoTGVuZ3RoIiwic3RhdGVzIiwicXVldWVTdGF0ZSIsInBhcmVudE5hbWUiLCJmbHVzaFF1ZXVlZENoaWxkcmVuIiwicXVldWVkIiwicmVnaXN0ZXJTdGF0ZSIsInN0YXRlQnVpbGRlciIsIiRkZWxlZ2F0ZXMiLCJhYnN0cmFjdEtleSIsIm5hdmlnYWJsZSIsInRyYW5zaXRpb25UbyIsImlzR2xvYiIsImRvZXNTdGF0ZU1hdGNoR2xvYiIsImdsb2IiLCJnbG9iU2VnbWVudHMiLCIkdmlldyIsIiRyZXNvbHZlIiwiJHVybFJvdXRlciIsImhhbmRsZVJlZGlyZWN0IiwiVHJhbnNpdGlvbkFib3J0ZWQiLCJyZXRyeSIsIiRyZXRyeSIsIlRyYW5zaXRpb25GYWlsZWQiLCJyZXRyeVRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwidG9QYXJhbXMiLCJUcmFuc2l0aW9uU3VwZXJzZWRlZCIsInJlc29sdmVTdGF0ZSIsInBhcmFtc0FyZUZpbHRlcmVkIiwicmVzb2x2ZVZpZXdzIiwidmlld3NQcm9taXNlcyIsInZpZXdzIiwidmlldyIsImluamVjdGFibGVzIiwibG9hZCIsImNvbnRyb2xsZXJQcm92aWRlciIsImluamVjdExvY2FscyIsIiQkY29udHJvbGxlciIsIiQkY29udHJvbGxlckFzIiwiJCRyZXNvbHZlQXMiLCJyZXNvbHZlQXMiLCJUcmFuc2l0aW9uU3VwZXJzZWRlZEVycm9yIiwiVHJhbnNpdGlvblByZXZlbnRlZCIsInJlbGF0aXZlIiwiZnJvbVBhcmFtcyIsImZyb21QYXRoIiwicmVkaXJlY3RSZXN1bHQiLCJ0b1BhdGgiLCJrZWVwIiwidG9Mb2NhbHMiLCJyZWxvYWRTdGF0ZSIsIm93blBhcmFtcyIsInNob3VsZFNraXBSZWxvYWQiLCJyZXNvbHZlZCIsImVudGVyaW5nIiwiZXhpdGluZyIsIm9uRXhpdCIsIm9uRW50ZXIiLCJhY2MiLCJwYXJhbURlZiIsImxvc3N5IiwibmF2IiwicmVsb2FkT25TZWFyY2giLCJmcm9tQW5kVG9TdGF0ZSIsIm5vdFNlYXJjaFBhcmFtIiwibm9uUXVlcnlQYXJhbUtleXMiLCJub25RdWVyeVBhcmFtcyIsImNvbXBvc2l0ZU5hbWUiLCIiLCJhYnN0cmFjdCIsIiRWaWV3UHJvdmlkZXIiLCIkdGVtcGxhdGVGYWN0b3J5IiwiJFZpZXdTY3JvbGxQcm92aWRlciIsInVzZUFuY2hvclNjcm9sbCIsIiRWaWV3RGlyZWN0aXZlIiwiJHVpVmlld1Njcm9sbCIsImdldFJlbmRlcmVyIiwiY2IiLCIkYW5pbWF0b3IiLCJjbGVhbnVwTGFzdFZpZXciLCJwcmV2aW91c0VsIiwiY3VycmVudEVsIiwiJHVpVmlld0RhdGEiLCJyZW5kZXJlciIsIiQkYW5pbUxlYXZlIiwidXBkYXRlVmlldyIsImZpcnN0VGltZSIsImdldFVpVmlld05hbWUiLCJwcmV2aW91c0xvY2FscyIsImxhdGVzdExvY2FscyIsImFuaW1FbnRlciIsImFuaW1MZWF2ZSIsInZpZXdBbmltRGF0YSIsIiRhbmltRW50ZXIiLCIkYW5pbUxlYXZlIiwiJFZpZXdEaXJlY3RpdmVGaWxsIiwiaW5pdGlhbCIsInJlc29sdmVEYXRhIiwidWlWaWV3IiwidWlWaWV3Q3JlYXRlZEJ5IiwicGFyc2VTdGF0ZVJlZiIsInJlZiIsInByZXBhcnNlZCIsInBhcmFtRXhwciIsInN0YXRlQ29udGV4dCIsInN0YXRlRGF0YSIsImdldFR5cGVJbmZvIiwiaXNTdmciLCJpc0Zvcm0iLCJpc0FuY2hvciIsImNsaWNrYWJsZSIsImNsaWNrSG9vayIsImlnbm9yZVByZXZlbnREZWZhdWx0Q291bnQiLCJkZWZhdWx0T3B0cyIsIiRTdGF0ZVJlZkRpcmVjdGl2ZSIsInVpU3JlZkFjdGl2ZSIsImhvb2tGbiIsInVpU3JlZiIsImFjdGl2ZSIsInVubGlua0luZm9GbiIsInVpU3JlZk9wdHMiLCIkJGFkZFN0YXRlSW5mbyIsIiRTdGF0ZVJlZkR5bmFtaWNEaXJlY3RpdmUiLCJydW5TdGF0ZVJlZkxpbmsiLCJ1aVN0YXRlIiwidWlTdGF0ZVBhcmFtcyIsInVpU3RhdGVPcHRzIiwiJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlIiwiYWRkU3RhdGUiLCJzdGF0ZVBhcmFtcyIsImFjdGl2ZUNsYXNzIiwic3RhdGVIYXNoIiwiY3JlYXRlU3RhdGVIYXNoIiwic3RhdGVJbmZvIiwiYWN0aXZlQ2xhc3NlcyIsImFueU1hdGNoIiwiZXhhY3RNYXRjaCIsImFjdGl2ZUVxQ2xhc3MiLCJ1aVNyZWZBY3RpdmVFcSIsImRlcmVnaXN0ZXIiLCIkSXNTdGF0ZUZpbHRlciIsImlzRmlsdGVyIiwiJEluY2x1ZGVkQnlTdGF0ZUZpbHRlciIsImluY2x1ZGVzRmlsdGVyIiwiZGVmYXVsdENvbmZpZyIsInNlYXJjaFBhcmFtcyIsInBhcmFtTmFtZSIsInBhcmFtZXRlcnMiLCJuVG90YWwiLCJuUGF0aCIsInBhcmFtVmFsIiwicmV2ZXJzZVN0cmluZyIsInVucXVvdGVEYXNoZXMiLCJlbmNvZGVEYXNoZXMiLCJpc1BhdGhQYXJhbSIsImlzRGVmYXVsdFZhbHVlIiwibmV4dFNlZ21lbnQiLCJpc0ZpbmFsUGF0aFBhcmFtIiwiJHN1YlBhdHRlcm4iLCJzdWIiLCJBcnJheVR5cGUiLCJiaW5kVG8iLCJjYWxsYmFja05hbWUiLCJhcnJheVdyYXAiLCJhcnJheVVud3JhcCIsImZhbHNleSIsImFycmF5SGFuZGxlciIsImFsbFRydXRoeU1vZGUiLCJ2YWwxIiwidmFsMiIsIiRhcnJheU1vZGUiLCJhdXRvaW5qZWN0IiwiaXNWYWxpZERvdHRlZFBhdGgiLCJNRU1CRVJfTkFNRV9SRUdFWCIsImxvb2t1cERvdHRlZFBhdGgiLCIkcmVzb3VyY2VNaW5FcnIiLCJzaGFsbG93Q2xlYXJBbmRDb3B5IiwiUFJPVE9DT0xfQU5EX0lQVjZfUkVHRVgiLCJzdHJpcFRyYWlsaW5nU2xhc2hlcyIsImNhbmNlbGxhYmxlIiwiYWN0aW9ucyIsIlJvdXRlIiwidXJsUGFyYW1zIiwicmVzb3VyY2VGYWN0b3J5IiwicGFyYW1EZWZhdWx0cyIsImV4dHJhY3RQYXJhbXMiLCJhY3Rpb25QYXJhbXMiLCJpZHMiLCJkZWZhdWx0UmVzcG9uc2VJbnRlcmNlcHRvciIsInJlc291cmNlIiwiUmVzb3VyY2UiLCJyb3V0ZSIsInRvSlNPTiIsIiRyZXNvbHZlZCIsIiRjYW5jZWxSZXF1ZXN0IiwiaGFzQm9keSIsIm51bWVyaWNUaW1lb3V0IiwiYTEiLCJhMiIsImEzIiwiYTQiLCJjYW5jZWxSZXF1ZXN0IiwidGltZW91dERlZmVycmVkIiwic3VjY2VzcyIsIm51bWVyaWNUaW1lb3V0UHJvbWlzZSIsImlzSW5zdGFuY2VDYWxsIiwiaHR0cENvbmZpZyIsInJlc3BvbnNlSW50ZXJjZXB0b3IiLCJyZXNwb25zZUVycm9ySW50ZXJjZXB0b3IiLCJoYXNFcnJvciIsImhhc1Jlc3BvbnNlRXJyb3JJbnRlcmNlcHRvciIsInNldFVybFBhcmFtcyIsImFkZGl0aW9uYWxQYXJhbURlZmF1bHRzIiwiZXh0ZW5kZWRQYXJhbURlZmF1bHRzIiwiYWN0aW9uVXJsIiwiZW5jb2RlZFZhbCIsInByb3RvY29sQW5kSXB2NiIsImlzUXVlcnlQYXJhbVZhbHVlIiwicGFyYW1JbmZvIiwidXJsUGFyYW0iLCJwMSIsImxlYWRpbmdTbGFzaGVzIiwidGFpbCIsImFyciIsInBvc3RMaW5rRm4iLCJ1bmJpbmRNb2RlbCIsInVuYmluZENoZWNrTGlzdFZhbHVlIiwidW5iaW5kRGVzdHJveSIsImdldENoZWNrbGlzdFZhbHVlIiwiY2hlY2tsaXN0VmFsdWUiLCJzZXRWYWx1ZUluQ2hlY2tsaXN0TW9kZWwiLCJjaGVja2xpc3RNb2RlbEdldHRlciIsInNldENoZWNrZWQiLCJuZXdBcnIiLCJvbGRBcnIiLCJjaGVja2xpc3RCZWZvcmVDaGFuZ2UiLCJuZ01vZGVsR2V0dGVyIiwiY2hlY2tsaXN0TW9kZWwiLCJjaGVja2xpc3RDaGFuZ2UiLCJjaGVja2xpc3RDb21wYXJhdG9yIiwiY29tcGFyYXRvckV4cHJlc3Npb24iLCJkZWZpbmUiLCJhbWQiLCJzYXRlbGxpemVyIiwiam9pblVybCIsImJhc2VVcmwiLCJqb2luZWQiLCJnZXRGdWxsVXJsUGF0aCIsImlzSHR0cHMiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwiZGVjb2RlQmFzZTY0IiwiQnVmZmVyIiwicmVfYnRvdSIsImNiX2J0b3UiLCJjY2NjIiwiYnRvdSIsImF0b2IiLCJtMCIsIkNvbmZpZyIsInVubGlua1VybCIsInRva2VuTmFtZSIsInRva2VuUHJlZml4IiwidG9rZW5IZWFkZXIiLCJ0b2tlblR5cGUiLCJzdG9yYWdlVHlwZSIsInRva2VuUm9vdCIsInByb3ZpZGVycyIsImZhY2Vib29rIiwiYXV0aG9yaXphdGlvbkVuZHBvaW50IiwicmVkaXJlY3RVcmkiLCJyZXF1aXJlZFVybFBhcmFtcyIsInNjb3BlRGVsaW1pdGVyIiwiZGlzcGxheSIsIm9hdXRoVHlwZSIsInBvcHVwT3B0aW9ucyIsIndpZHRoIiwiaGVpZ2h0IiwiZ29vZ2xlIiwib3B0aW9uYWxVcmxQYXJhbXMiLCJzY29wZVByZWZpeCIsInJhbmRvbSIsImdpdGh1YiIsImluc3RhZ3JhbSIsImxpbmtlZGluIiwidHdpdHRlciIsInR3aXRjaCIsImxpdmUiLCJ5YWhvbyIsImJpdGJ1Y2tldCIsInNwb3RpZnkiLCJodHRwSW50ZXJjZXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiQXV0aFByb3ZpZGVyIiwiU2F0ZWxsaXplckNvbmZpZyIsIm9hdXRoMSIsIm9hdXRoMiIsIlNhdGVsbGl6ZXJTaGFyZWQiLCJTYXRlbGxpemVyTG9jYWwiLCJTYXRlbGxpemVyT0F1dGgiLCJhdXRoZW50aWNhdGUiLCJ1bmxpbmsiLCJnZXRUb2tlbiIsInNldFRva2VuIiwiYWNjZXNzX3Rva2VuIiwicmVtb3ZlVG9rZW4iLCJzZXRTdG9yYWdlVHlwZSIsIlNoYXJlZCIsIlNhdGVsbGl6ZXJTdG9yYWdlIiwiX2EiLCJwcmVmaXhlZFRva2VuTmFtZSIsImJhc2U2NFVybCIsImFjY2Vzc1Rva2VuIiwidG9rZW5Sb290RGF0YSIsIngiLCJMb2NhbCIsIl90aGlzIiwiUG9wdXAiLCJwb3B1cCIsInN0cmluZ2lmeU9wdGlvbnMiLCJkb250UG9sbCIsInNjcmVlblkiLCJvdXRlckhlaWdodCIsInNjcmVlblgiLCJvdXRlcldpZHRoIiwicG9wdXBOYW1lIiwiZXZlbnRMaXN0ZW5lciIsInBvbGxpbmciLCJyZWRpcmVjdFVyaVBhcnNlciIsInJlZGlyZWN0VXJpUGF0aCIsImNsb3NlIiwicGFyc2VyIiwiT0F1dGgxIiwiU2F0ZWxsaXplclBvcHVwIiwiZGVmYXVsdFVybFBhcmFtcyIsInVzZXJEYXRhIiwiZ2V0UmVxdWVzdFRva2VuIiwib3BlblBvcHVwIiwicG9wdXBSZXNwb25zZSIsImV4Y2hhbmdlRm9yVG9rZW4iLCJidWlsZFF1ZXJ5U3RyaW5nIiwib2F1dGhEYXRhIiwicGF5bG9hZCIsImV4Y2hhbmdlRm9yVG9rZW5VcmwiLCJPQXV0aDIiLCJjbGllbnRJZCIsInJlc3BvbnNlUGFyYW1zIiwiY2FtZWxDYXNlIiwiXyIsIm9hdXRoIiwia2V5VmFsdWVQYWlycyIsInVybFBhcmFtc0NhdGVnb3JpZXMiLCJwYXJhbXNDYXRlZ29yeSIsImNhbWVsaXplZE5hbWUiLCJwYWlyIiwiT0F1dGgiLCJTYXRlbGxpemVyT0F1dGgxIiwiU2F0ZWxsaXplck9BdXRoMiIsIlN0b3JhZ2UiLCJtZW1vcnlTdG9yZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsIkludGVyY2VwdG9yIiwiRmFjdG9yeSIsIkh0dHBQcm92aWRlckNvbmZpZyIsIiRodHRwUHJvdmlkZXIiLCJnZXRDb25zdGFudCIsImdldFNjcm9sbEZyb21FbGVtZW50IiwiaG9yaXpvbnRhbCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiZXhwYW5kIiwiZXhwYW5kaW5nRXhwciIsImVhc2luZyIsIm92ZXJmbG93IiwiZXhwYW5kRG9uZSIsImV4cGFuZGVkRXhwciIsImNvbGxhcHNlIiwiY29sbGFwc2VEb25lIiwiY29sbGFwc2luZ0V4cHIiLCJjc3NUbyIsImNvbGxhcHNlZEV4cHIiLCJleHBhbmRpbmciLCJleHBhbmRlZCIsImNvbGxhcHNpbmciLCJjb2xsYXBzZWQiLCJ1aWJDb2xsYXBzZSIsInNob3VsZENvbGxhcHNlIiwiY2xvc2VPdGhlcnMiLCJhY2NvcmRpb25Db25maWciLCJvcGVuR3JvdXAiLCJpc09wZW4iLCJhZGRHcm91cCIsImdyb3VwU2NvcGUiLCJyZW1vdmVHcm91cCIsImhlYWRpbmciLCJwYW5lbENsYXNzIiwiaXNEaXNhYmxlZCIsInNldEhlYWRpbmciLCJhY2NvcmRpb25DdHJsIiwib3BlbkNsYXNzIiwidG9nZ2xlT3BlbiIsImhlYWRpbmdJZCIsInBhbmVsSWQiLCJhY2NvcmRpb25Hcm91cEN0cmwiLCJ1aWJBY2NvcmRpb25UcmFuc2NsdWRlIiwiY2xvc2VhYmxlIiwiZGlzbWlzc09uVGltZW91dCIsInRvZ2dsZUV2ZW50IiwiYnV0dG9uQ29uZmlnIiwiYnV0dG9uc0N0cmwiLCJ1bmNoZWNrYWJsZUV4cHIiLCJ1aWJVbmNoZWNrYWJsZSIsInVpYkJ0blJhZGlvIiwiaXNBY3RpdmUiLCJ1bmNoZWNrYWJsZSIsImdldFRydWVWYWx1ZSIsImdldENoZWNrYm94VmFsdWUiLCJidG5DaGVja2JveFRydWUiLCJnZXRGYWxzZVZhbHVlIiwiYnRuQ2hlY2tib3hGYWxzZSIsInNldEFjdGl2ZSIsInNsaWRlcyIsInNsaWRlIiwiZ29OZXh0IiwiZGlyZWN0aW9uIiwiZGVzdHJveWVkIiwiY3VycmVudEluZGV4IiwiJGN1cnJlbnRUcmFuc2l0aW9uIiwiU0xJREVfRElSRUNUSU9OIiwiY3VycmVudElkeCIsImdldEN1cnJlbnRJbmRleCIsInJlc3RhcnRUaW1lciIsImZpbmRTbGlkZUluZGV4IiwicmVzZXRUaW1lciIsImN1cnJlbnRJbnRlcnZhbCIsInJlc2V0VHJhbnNpdGlvbiIsInRpbWVyRm4iLCJpc1BsYXlpbmciLCJhZGRTbGlkZSIsInBsYXkiLCJuZXdJbmRleCIsIm5vV3JhcCIsInByZXYiLCJyZW1vdmVTbGlkZSIsIm5leHRTbGlkZSIsIm5leHRJbmRleCIsImluZGV4T2ZTbGlkZSIsImlzUHJldkRpc2FibGVkIiwiaXNOZXh0RGlzYWJsZWQiLCJub1BhdXNlIiwibm9UcmFuc2l0aW9uIiwiY2Fyb3VzZWxDdHJsIiwiYmVmb3JlQWRkQ2xhc3MiLCJzdG9wcGVkIiwiZGlyZWN0aW9uQ2xhc3MiLCJyZW1vdmVDbGFzc0ZuIiwiYmVmb3JlUmVtb3ZlQ2xhc3MiLCJnZXRGb3JtYXRDb2RlVG9SZWdleCIsImZvcm1hdENvZGVUb1JlZ2V4IiwiY3JlYXRlUGFyc2VyIiwicXVvdGVJbmRleCIsImluTGl0ZXJhbCIsImNyZWF0ZUZvcm1hdHRlciIsImZvcm1hdHRlciIsImxpdGVyYWxJZHgiLCJjb25zdHJ1Y3RMaXRlcmFsRm9ybWF0dGVyIiwiY29uc3RydWN0Rm9ybWF0dGVyRnJvbUlkeCIsImVuZElkeCIsImN1cnJlbnRQb3NTdHIiLCJ0b1RpbWV6b25lIiwiZnJvbVRpbWV6b25lIiwibG9jYWxlSWQiLCJTUEVDSUFMX0NIQVJBQ1RFUlNfUkVHRVhQIiwicGFyc2VycyIsIl9kYXRlIiwic2lnbiIsImdldFBhcnNlciIsIm92ZXJyaWRlUGFyc2VyIiwiYmFzZURhdGUiLCJ0ek9mZnNldCIsImZpZWxkcyIsImR0IiwibWFwcGVyIiwiZGF0ZXNldHRlciIsInRpbWVzZXR0ZXIiLCJPTl9SRUdFWFAiLCJJU19SRUdFWFAiLCJsaW5rZWRTY29wZXMiLCJpbnN0YW5jZXMiLCJleHBzIiwiYWRkRm9yRXhwIiwicmVtb3ZlU2NvcGUiLCJjb21wYXJlV2l0aEV4cCIsImV4cFRvRGF0YSIsIndhdGNoRm4iLCJjb21wYXJlV2l0aFZhbCIsIm5ld0FjdGl2YXRlZCIsIm9uRXhwIiwibGFzdEFjdGl2YXRlZCIsInJlbW92ZWRTY29wZSIsIm5ld1dhdGNoU2NvcGUiLCJvbkV4cE1hdGNoZXMiLCJ1aWJJc0NsYXNzIiwiZXhwc1N0ciIsImRhdGVwaWNrZXJNb2RlIiwiZm9ybWF0RGF5IiwiZm9ybWF0TW9udGgiLCJmb3JtYXRZZWFyIiwiZm9ybWF0RGF5SGVhZGVyIiwiZm9ybWF0RGF5VGl0bGUiLCJmb3JtYXRNb250aFRpdGxlIiwibWF4RGF0ZSIsIm1heE1vZGUiLCJtaW5EYXRlIiwibWluTW9kZSIsIm1vbnRoQ29sdW1ucyIsInNob3J0Y3V0UHJvcGFnYXRpb24iLCJzaG93V2Vla3MiLCJ5ZWFyQ29sdW1ucyIsInllYXJSb3dzIiwiZGF0ZXBpY2tlckNvbmZpZyIsIiRkYXRlcGlja2VyTGl0ZXJhbFdhcm5pbmciLCIkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3IiLCJkYXRlUGFyc2VyIiwic2V0TW9kZSIsImRhdGVwaWNrZXJPcHRpb25zIiwiZXh0cmFjdE9wdGlvbnMiLCJ3YXRjaExpc3RlbmVycyIsIm1vZGVzIiwic3RhcnRpbmdEYXkiLCJyZWZyZXNoVmlldyIsInVuaXF1ZUlkIiwibmdEaXNhYmxlZCIsImRhdGVPYmplY3QiLCJhY3RpdmVEYXRlIiwiYWN0aXZlRGF0ZUlkIiwibmdNb2RlbEN0cmxfIiwiaW5pdERhdGUiLCJyZW5kZXIiLCJzZWxlY3RlZER0IiwiX3JlZnJlc2hWaWV3IiwiYWN0aXZlRHQiLCJjcmVhdGVEYXRlT2JqZWN0IiwibW9kZWwiLCJ0b2RheSIsInBhc3QiLCJmdXR1cmUiLCJjdXN0b21DbGFzcyIsImRhdGVEaXNhYmxlZCIsImFycmF5cyIsInllYXJzIiwibW9udGhzIiwidG9nZ2xlTW9kZSIsIjEzIiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiZm9jdXNFbGVtZW50Iiwia2V5ZG93biIsImFsdEtleSIsImhhbmRsZUtleURvd24iLCJnZXREYXlzSW5Nb250aCIsIkRBWVNfSU5fTU9OVEgiLCJnZXRJU084NjAxV2Vla051bWJlciIsImNoZWNrRGF0ZSIsInNldERhdGUiLCJzZXRNb250aCIsImdldERhdGVzIiwic3RhcnREYXRlIiwiZGF0ZXMiLCJmaXJzdERheU9mTW9udGgiLCJkaWZmZXJlbmNlIiwibnVtRGlzcGxheWVkRnJvbVByZXZpb3VzTW9udGgiLCJmaXJzdERhdGUiLCJkYXlzIiwic2Vjb25kYXJ5IiwibGFiZWxzIiwiYWJiciIsInRpdGxlIiwicm93cyIsIndlZWtOdW1iZXJzIiwidGh1cnNkYXlJbmRleCIsIm51bVdlZWtzIiwiY3VyV2VlayIsImRhdGUxIiwiZGF0ZTIiLCJfZGF0ZTEiLCJfZGF0ZTIiLCJ5ZWFySGVhZGVyQ29sc3BhbiIsImdldFN0YXJ0aW5nWWVhciIsImNvbHVtbnMiLCJ5ZWFycGlja2VySW5pdCIsImRhdGVwaWNrZXJDdHJsIiwiU0NST0xMQkFSX1dJRFRIIiwiQk9EWV9TQ1JPTExCQVJfV0lEVEgiLCJPVkVSRkxPV19SRUdFWCIsIm5vcm1hbCIsIlBMQUNFTUVOVF9SRUdFWCIsImF1dG8iLCJ2ZXJ0aWNhbCIsIkJPRFlfUkVHRVgiLCJnZXRSYXdOb2RlIiwicGFyc2VTdHlsZSIsIm9mZnNldFBhcmVudCIsInNjcm9sbGJhcldpZHRoIiwiaXNCb2R5IiwiYm9keUVsZW0iLCJpbm5lcldpZHRoIiwiY2xpZW50V2lkdGgiLCJzY3JvbGxFbGVtIiwic2Nyb2xsYmFyUGFkZGluZyIsImVsZW1TdHlsZSIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJzY3JvbGxQYXJlbnQiLCJ0YWdOYW1lIiwid2lkdGhPdmVyZmxvdyIsIm9yaWdpbmFsUmlnaHQiLCJoZWlnaHRPdmVyZmxvdyIsImNsaWVudEhlaWdodCIsIm9yaWdpbmFsQm90dG9tIiwiaXNTY3JvbGxhYmxlIiwiaW5jbHVkZUhpZGRlbiIsIm92ZXJmbG93UmVnZXgiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJpbmNsdWRlU2VsZiIsImRvY3VtZW50RWwiLCJleGNsdWRlU3RhdGljIiwic3BTdHlsZSIsImluY2x1ZGVNYWdpbnMiLCJlbGVtT2Zmc2V0IiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInBhcmVudE9mZnNldCIsImNsaWVudFRvcCIsInNjcm9sbFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxMZWZ0Iiwib2Zmc2V0SGVpZ2h0IiwiZWxlbUJDUiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJ2aWV3cG9ydE9mZnNldCIsInVzZURvY3VtZW50IiwiaW5jbHVkZVBhZGRpbmciLCJvZmZzZXRCQ1IiLCJvZmZzZXRQYXJlbnRCQ1IiLCJvZmZzZXRQYXJlbnRTdHlsZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nTGVmdCIsInBhcnNlUGxhY2VtZW50IiwicGxhY2VtZW50IiwiYXV0b1BsYWNlIiwicG9zaXRpb25FbGVtZW50cyIsImhvc3RFbGVtIiwidGFyZ2V0RWxlbSIsImFwcGVuZFRvQm9keSIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiaG9zdEVsZW1Qb3MiLCJ0YXJnZXRFbGVtUG9zIiwidGFyZ2V0RWxlbVN0eWxlIiwiYWRqdXN0ZWRTaXplIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJ4T3ZlcmZsb3ciLCJ5T3ZlcmZsb3ciLCJhZGp1c3RUb3AiLCJwbGFjZW1lbnRDbGFzc2VzIiwiY29udGFpbmVyUG9zaXRpb24iLCJpbml0aWFsSGVpZ2h0IiwiY3VycmVudEhlaWdodCIsInBvc2l0aW9uQXJyb3ciLCJpbm5lckVsZW0iLCJpc1Rvb2x0aXAiLCJhcnJvd0VsZW0iLCJhcnJvd0NzcyIsImJvcmRlclByb3AiLCJib3JkZXJXaWR0aCIsImJvcmRlclJhZGl1c1Byb3AiLCJib3JkZXJSYWRpdXMiLCJhbHRJbnB1dEZvcm1hdHMiLCJjbGVhclRleHQiLCJjbG9zZU9uRGF0ZVNlbGVjdGlvbiIsImNsb3NlVGV4dCIsImN1cnJlbnRUZXh0IiwiZGF0ZXBpY2tlclBvcHVwIiwiZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwiLCJkYXRlcGlja2VyVGVtcGxhdGVVcmwiLCJodG1sNVR5cGVzIiwib25PcGVuRm9jdXMiLCJzaG93QnV0dG9uQmFyIiwiJHBvc2l0aW9uIiwiZGF0ZXBpY2tlclBvcHVwQ29uZmlnIiwiJGRhdGVwaWNrZXJQb3B1cExpdGVyYWxXYXJuaW5nIiwicGFyc2VEYXRlU3RyaW5nIiwiZGF0ZUZvcm1hdCIsImRvY3VtZW50Q2xpY2tCaW5kIiwiJHBvcHVwIiwiZHBDb250YWluc1RhcmdldCIsInBvcHVwQ29udGFpbnNUYXJnZXQiLCJpbnB1dEtleWRvd25CaW5kIiwicG9zaXRpb25Qb3B1cCIsImRwRWxlbWVudCIsInBvcHVwUGxhY2VtZW50IiwicG9wdXBFbCIsImRhdGVwaWNrZXJFbCIsInNjcm9sbFBhcmVudEVsIiwiaXNIdG1sNURhdGVJbnB1dCIsIl9uZ01vZGVsXyIsImRhdGVwaWNrZXJBcHBlbmRUb0JvZHkiLCJ1aWJEYXRlcGlja2VyUG9wdXAiLCJuZXdEYXRlRm9ybWF0IiwibmctbW9kZWwiLCJuZy1jaGFuZ2UiLCJ0ZW1wbGF0ZS11cmwiLCJkYXRlU2VsZWN0aW9uIiwiZGVib3VuY2VUaW1lIiwidGltZW91dFByb21pc2UiLCJjcmVhdGVOZXciLCJlbnRyaWVzIiwiaGFzS2V5IiwiYXBwZW5kVG9PcGVuQ2xhc3MiLCIkJG11bHRpTWFwIiwib3BlblNjb3BlIiwib3BlbmVkQ29udGFpbmVycyIsImlzT25seU9wZW4iLCJkcm9wZG93blNjb3BlIiwiYXBwZW5kVG8iLCJvcGVuZWREcm9wZG93bnMiLCJ0b0Nsb3NlIiwiZHJvcGRvd24iLCJjbG9zZURyb3Bkb3duIiwia2V5YmluZEZpbHRlciIsImRyb3Bkb3duVG9DbG9zZSIsImdldEF1dG9DbG9zZSIsInRvZ2dsZUVsZW1lbnQiLCJnZXRUb2dnbGVFbGVtZW50IiwiZHJvcGRvd25FbGVtZW50IiwiZ2V0RHJvcGRvd25FbGVtZW50IiwiZm9jdXNUb2dnbGVFbGVtZW50IiwiZHJvcGRvd25FbGVtZW50VGFyZ2V0ZWQiLCJ0b2dnbGVFbGVtZW50VGFyZ2V0ZWQiLCJpc0tleW5hdkVuYWJsZWQiLCJmb2N1c0Ryb3Bkb3duRW50cnkiLCJkcm9wZG93bkNvbmZpZyIsInVpYkRyb3Bkb3duU2VydmljZSIsInJlbW92ZURyb3Bkb3duTWVudSIsImRyb3Bkb3duTWVudSIsInRlbXBsYXRlU2NvcGUiLCJnZXRJc09wZW4iLCJzZXRJc09wZW4iLCJ0b2dnbGVJbnZva2VyIiwib25Ub2dnbGUiLCJrZXluYXZFbmFibGVkIiwia2V5Ym9hcmROYXYiLCJ0b2dnbGUiLCJhdXRvQ2xvc2UiLCJnZXRFbGVtZW50Iiwid2FzT3BlbiIsImRyb3Bkb3duQXBwZW5kVG8iLCJhcHBlbmRUb0VsIiwiZHJvcGRvd25BcHBlbmRUb0JvZHkiLCJyaWdodGFsaWduIiwiYXBwZW5kT2Zmc2V0Iiwib3BlbkNvbnRhaW5lciIsImRyb3Bkb3duT3BlbkNsYXNzIiwiaGFzT3BlbkNsYXNzIiwiZHJvcGRvd25NZW51VGVtcGxhdGVVcmwiLCJ0cGxDb250ZW50IiwibmV3RWwiLCJkcm9wZG93bkN0cmwiLCJkcm9wZG93bk5lc3RlZCIsInRwbFVybCIsInRvZ2dsZURyb3Bkb3duIiwiYXJpYS1oYXNwb3B1cCIsImFyaWEtZXhwYW5kZWQiLCJyZW1vdmVUb3AiLCJzZXRSZXNvbHZlciIsInJlc29sdmVzIiwicmVzb2x2ZU9iaiIsInJlc29sdmVJdGVyIiwiJG1vZGFsU3RhY2siLCJtb2RhbEluQ2xhc3MiLCJOT1dfQ0xPU0lOR19FVkVOVCIsInNldElzQXN5bmMiLCJtb2RhbE9wdGlvbnMiLCJiYWNrZHJvcENsYXNzIiwid2luZG93VG9wQ2xhc3MiLCJtb2RhbCIsImdldFRvcCIsImJhY2tkcm9wIiwiY3VycmVudFRhcmdldCIsImRpc21pc3MiLCIkaXNSZW5kZXJlZCIsIm1vZGFsUmVuZGVyRGVmZXJPYmoiLCJhbmltYXRpb25Qcm9taXNlIiwibW9kYWxSZW5kZXJlZCIsImFjdGl2ZUVsZW1lbnQiLCJpbnB1dFdpdGhBdXRvZm9jdXMiLCJtb2RhbEFuaW1hdGlvbiIsInVpYk1vZGFsQW5pbWF0aW9uQ2xhc3MiLCIkJHN0YWNrZWRNYXAiLCIkdWliUG9zaXRpb24iLCJpc1Zpc2libGUiLCJnZXRDbGllbnRSZWN0cyIsImJhY2tkcm9wSW5kZXgiLCJ0b3BCYWNrZHJvcEluZGV4Iiwib3BlbmVkIiwib3BlbmVkV2luZG93cyIsInRvcE1vZGFsSW5kZXgiLCJyZW1vdmVNb2RhbFdpbmRvdyIsIm1vZGFsSW5zdGFuY2UiLCJlbGVtZW50VG9SZWNlaXZlRm9jdXMiLCJtb2RhbFdpbmRvdyIsImFwcGVuZFRvRWxlbWVudCIsInByZXZpb3VzVG9wT3BlbmVkTW9kYWwiLCJtb2RhbERvbUVsIiwicmVtb3ZlQWZ0ZXJBbmltYXRlIiwibW9kYWxTY29wZSIsIm1vZGFsQm9keUNsYXNzIiwib3BlbmVkQ2xhc3MiLCJPUEVORURfTU9EQUxfQ0xBU1MiLCJvcGVuZWRDbGFzc2VzIiwiYXJlQW55T3BlbiIsInRvZ2dsZVRvcFdpbmRvd0NsYXNzIiwiY2xvc2VkRGVmZXJyZWQiLCJjaGVja1JlbW92ZUJhY2tkcm9wIiwidG9nZ2xlU3dpdGNoIiwiYmFja2Ryb3BEb21FbCIsImJhY2tkcm9wU2NvcGVSZWYiLCJiYWNrZHJvcFNjb3BlIiwiZG9tRWwiLCJhZnRlckFuaW1hdGluZyIsImFzeW5jRGVmZXJyZWQiLCJhc3luY1Byb21pc2UiLCJrZXlkb3duTGlzdGVuZXIiLCJrZXlib2FyZCIsImxvYWRGb2N1c0VsZW1lbnRMaXN0IiwiZm9jdXNDaGFuZ2VkIiwiaXNGb2N1c0luRmlyc3RJdGVtIiwiaXNNb2RhbEZvY3VzZWQiLCJmb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50IiwiaXNGb2N1c0luTGFzdEl0ZW0iLCJmb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudCIsImJyb2FkY2FzdENsb3NpbmciLCJyZXN1bHRPclJlYXNvbiIsImNsb3NpbmciLCJ1bmhpZGVCYWNrZ3JvdW5kRWxlbWVudHMiLCJBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSIsImhpZGRlbkVsIiwiYXJpYUhpZGRlbkNvdW50IiwibmV3SGlkZGVuQ291bnQiLCJuZXdCYWNrZHJvcEluZGV4IiwiYXBwbHlBcmlhSGlkZGVuIiwiZWxlbUlzQWxyZWFkeUhpZGRlbiIsIm1vZGFsT3BlbmVyIiwicmVuZGVyRGVmZXJyZWQiLCJjdXJyQmFja2Ryb3BJbmRleCIsImNsYXNzIiwibmctc3R5bGUiLCJ1aWItbW9kYWwtYW5pbWF0aW9uLWNsYXNzIiwibW9kYWwtaW4tY2xhc3MiLCJtb2RhbC1pbnN0YW5jZSIsImFuZ3VsYXJEb21FbCIsIndpbmRvd1RlbXBsYXRlVXJsIiwid2luZG93LXRvcC1jbGFzcyIsInJvbGUiLCJhcmlhLWxhYmVsbGVkYnkiLCJhcmlhTGFiZWxsZWRCeSIsImFyaWEtZGVzY3JpYmVkYnkiLCJhcmlhRGVzY3JpYmVkQnkiLCJ0YWJpbmRleCIsIndpbmRvd0NsYXNzIiwiJCR0b3BNb2RhbEluZGV4IiwiJCR1aWJEZXN0cnVjdGlvblNjaGVkdWxlZCIsImRpc21pc3NBbGwiLCJ0b3BNb2RhbCIsInNyY0VsZW1lbnQiLCJtb2RhbERvbUUxIiwiJG1vZGFsUHJvdmlkZXIiLCIkdWliUmVzb2x2ZSIsImdldFRlbXBsYXRlUHJvbWlzZSIsIiRtb2RhbCIsInByb21pc2VDaGFpbiIsImdldFByb21pc2VDaGFpbiIsInJlc29sdmVXaXRoVGVtcGxhdGUiLCJ0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlIiwibW9kYWxSZXN1bHREZWZlcnJlZCIsIm1vZGFsT3BlbmVkRGVmZXJyZWQiLCJtb2RhbENsb3NlZERlZmVycmVkIiwibW9kYWxSZW5kZXJEZWZlcnJlZCIsInJlbmRlcmVkIiwic2FtZVByb21pc2UiLCJ0cGxBbmRWYXJzIiwiY29uc3RydWN0TG9jYWxzIiwiaW5zdGFuY2VPblNjb3BlIiwiaW5qZWN0YWJsZSIsIiR1aWJNb2RhbEluc3RhbmNlIiwicHJvdmlkZWRTY29wZSIsIiRjbG9zZSIsIiRkaXNtaXNzIiwiY3RybEluc3RhbmNlIiwiY3RybEluc3RhbnRpYXRlIiwiY3RybExvY2FscyIsInNldE51bVBhZ2VzIiwibnVtUGFnZXMiLCJfd2F0Y2hlcnMiLCJpdGVtc1BlclBhZ2UiLCJ0b3RhbFBhZ2VzIiwiY2FsY3VsYXRlVG90YWxQYWdlcyIsInVwZGF0ZVBhZ2UiLCJuZXdUb3RhbCIsIm9sZFRvdGFsIiwidG90YWxJdGVtcyIsInBhZ2UiLCJzZWxlY3RQYWdlIiwibm9QcmV2aW91cyIsIm5vTmV4dCIsInVpYlBhZ2luZyIsInVpYlBhZ2VyQ29uZmlnIiwiYWxpZ24iLCJwcmV2aW91c1RleHQiLCJuZXh0VGV4dCIsInBhZ2luYXRpb25DdHJsIiwidWliUGFnaW5hdGlvbkNvbmZpZyIsIm1ha2VQYWdlIiwiZ2V0UGFnZXMiLCJwYWdlcyIsInN0YXJ0UGFnZSIsImVuZFBhZ2UiLCJpc01heFNpemVkIiwibWF4U2l6ZSIsInJvdGF0ZSIsInBhZ2VMYWJlbCIsImZvcmNlRWxsaXBzZXMiLCJib3VuZGFyeUxpbmtOdW1iZXJzIiwicHJldmlvdXNQYWdlU2V0Iiwic2Vjb25kUGFnZUxpbmsiLCJmaXJzdFBhZ2VMaW5rIiwibmV4dFBhZ2VTZXQiLCJzZWNvbmRUb0xhc3RQYWdlTGluayIsImxhc3RQYWdlTGluayIsIiRwYWdlIiwiYm91bmRhcnlMaW5rcyIsImRpcmVjdGlvbkxpbmtzIiwiZmlyc3RUZXh0IiwibGFzdFRleHQiLCJkZWZhdWx0T3B0aW9ucyIsInBsYWNlbWVudENsYXNzUHJlZml4IiwicG9wdXBEZWxheSIsInBvcHVwQ2xvc2VEZWxheSIsInVzZUNvbnRlbnRFeHAiLCJ0cmlnZ2VyTWFwIiwiY2xpY2siLCJvdXRzaWRlQ2xpY2siLCJub25lIiwiZ2xvYmFsT3B0aW9ucyIsInNldFRyaWdnZXJzIiwidHJpZ2dlcnMiLCJrZXlwcmVzc0xpc3RlbmVyIiwib3BlbmVkVG9vbHRpcHMiLCJ0dFR5cGUiLCJkZWZhdWx0VHJpZ2dlclNob3ciLCJnZXRUcmlnZ2VycyIsInNob3ciLCJoaWRlIiwic3RhcnRTeW0iLCJlbmRTeW0iLCJ0RWxlbSIsInRvb2x0aXBMaW5rZXIiLCJ0b29sdGlwQ3RybCIsInRvZ2dsZVRvb2x0aXBCaW5kIiwidHRTY29wZSIsImhpZGVUb29sdGlwQmluZCIsInNob3dUb29sdGlwQmluZCIsImhhc0VuYWJsZUV4cCIsImNhbmNlbEhpZGUiLCJwcmVwYXJlVG9vbHRpcCIsInNob3dUaW1lb3V0IiwiY2FuY2VsU2hvdyIsImhpZGVUaW1lb3V0IiwiY3JlYXRlVG9vbHRpcCIsImFzc2lnbklzT3BlbiIsInBvc2l0aW9uVG9vbHRpcCIsInBvc2l0aW9uVGltZW91dCIsInRyYW5zaXRpb25UaW1lb3V0IiwicmVtb3ZlVG9vbHRpcCIsInRvb2x0aXAiLCJ0b29sdGlwTGlua2VkU2NvcGUiLCJwcmVwT2JzZXJ2ZXJzIiwidW5yZWdpc3Rlck9ic2VydmVycyIsImFkanVzdG1lbnRUaW1lb3V0IiwiY29udGVudFBhcnNlIiwicG9wdXBDbGFzcyIsImxhc3RQbGFjZW1lbnQiLCJjbG9zZURlbGF5IiwiaXNPcGVuUGFyc2UiLCJvYnNlcnZlcnMiLCJyZXBvc2l0aW9uU2NoZWR1bGVkIiwiYm9keUhpZGVUb29sdGlwQmluZCIsImhpZGVPbkVzY2FwZUtleSIsInR0UG9zaXRpb24iLCJlbGVtZW50UG9zIiwiYWRqdXN0bWVudCIsIm9yaWdTY29wZSIsImNvbnRlbnRFeHAiLCJ1bnJlZ2lzdGVyVHJpZ2dlcnMiLCJzaG93VHJpZ2dlcnMiLCJoaWRlVHJpZ2dlcnMiLCJhcHBlbmRUb0JvZHlWYWwiLCJhcHBlbmRLZXkiLCJ0b29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlU2NvcGUiLCJwYXJzZUFzUmVzb3VyY2VVcmwiLCJ1aWJUb29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlIiwidG9vbHRpcEFuaW1hdGlvbkNsYXNzIiwiJHVpYlRvb2x0aXAiLCJvcmlnaW5TY29wZSIsInVpYlRpdGxlIiwicHJvZ3Jlc3NDb25maWciLCJnZXRNYXhPckRlZmF1bHQiLCJtYXhQYXJhbSIsImJhcnMiLCJhZGRCYXIiLCJiYXIiLCJyZWNhbGN1bGF0ZVBlcmNlbnRhZ2UiLCJ0b3RhbFBlcmNlbnRhZ2UiLCJ0b3RhbCIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwicmVtb3ZlQmFyIiwicHJvZ3Jlc3NDdHJsIiwic3RhdGVPbiIsInN0YXRlT2ZmIiwiZW5hYmxlUmVzZXQiLCJ0aXRsZXMiLCJyYXRpbmdDb25maWciLCJ0bXBUaXRsZXMiLCJyYXRpbmdTdGF0ZXMiLCJidWlsZFRlbXBsYXRlT2JqZWN0cyIsImdldFRpdGxlIiwicmF0ZSIsInJlYWRvbmx5IiwibmV3Vmlld1ZhbHVlIiwib25Ib3ZlciIsIm9uTGVhdmUiLCJvbktleWRvd24iLCJyYXRpbmdDdHJsIiwiZmluZFRhYkluZGV4IiwidGFicyIsIm9sZEluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzU2VsZWN0ZWQiLCJ0YWIiLCJvbkRlc2VsZWN0IiwiJHNlbGVjdGVkSW5kZXgiLCJvblNlbGVjdCIsImFkZFRhYiIsIm5ld0FjdGl2ZUluZGV4IiwicmVtb3ZlVGFiIiwibmV3QWN0aXZlVGFiSW5kZXgiLCJqdXN0aWZpZWQiLCJ0YWJzZXRDdHJsIiwiZGlzYWJsZSIsIiR0cmFuc2NsdWRlRm4iLCJpc1RhYkhlYWRpbmciLCJ1aWJUYWJDb250ZW50VHJhbnNjbHVkZSIsImhlYWRpbmdFbGVtZW50IiwiaG91clN0ZXAiLCJtaW51dGVTdGVwIiwic2Vjb25kU3RlcCIsInNob3dNZXJpZGlhbiIsInNob3dTZWNvbmRzIiwibWVyaWRpYW5zIiwicmVhZG9ubHlJbnB1dCIsIm1vdXNld2hlZWwiLCJhcnJvd2tleXMiLCJzaG93U3Bpbm5lcnMiLCJ0aW1lcGlja2VyQ29uZmlnIiwiZ2V0SG91cnNGcm9tVGVtcGxhdGUiLCJtZXJpZGlhbiIsImdldE1pbnV0ZXNGcm9tVGVtcGxhdGUiLCJnZXRTZWNvbmRzRnJvbVRlbXBsYXRlIiwicGFkIiwibm9QYWQiLCJrZXlib2FyZENoYW5nZSIsIm1ha2VWYWxpZCIsInVwZGF0ZVRlbXBsYXRlIiwiaG91cnNNb2RlbEN0cmwiLCJtaW51dGVzTW9kZWxDdHJsIiwic2Vjb25kc01vZGVsQ3RybCIsImludmFsaWRIb3VycyIsImludmFsaWRNaW51dGVzIiwiaW52YWxpZFNlY29uZHMiLCJwYWRIb3VycyIsImFkZFNlY29uZHNUb1NlbGVjdGVkIiwiYWRkU2Vjb25kcyIsImFkZE1pbnV0ZXMiLCJuZXdEYXRlIiwibW9kZWxJc0VtcHR5IiwiaG91cnNJbnB1dEVsIiwibWludXRlc0lucHV0RWwiLCJzZWNvbmRzSW5wdXRFbCIsInNldHVwTW91c2V3aGVlbEV2ZW50cyIsInNldHVwQXJyb3drZXlFdmVudHMiLCJzZXR1cElucHV0RXZlbnRzIiwibm9JbmNyZW1lbnRIb3VycyIsImluY3JlbWVudGVkU2VsZWN0ZWQiLCJub0RlY3JlbWVudEhvdXJzIiwiZGVjcmVtZW50ZWRTZWxlY3RlZCIsIm5vSW5jcmVtZW50TWludXRlcyIsIm5vRGVjcmVtZW50TWludXRlcyIsIm5vSW5jcmVtZW50U2Vjb25kcyIsIm5vRGVjcmVtZW50U2Vjb25kcyIsIm5vVG9nZ2xlTWVyaWRpYW4iLCJpc1Njcm9sbGluZ1VwIiwib3JpZ2luYWxFdmVudCIsImRlbHRhIiwid2hlZWxEZWx0YSIsImRlbHRhWSIsImRldGFpbCIsImluY3JlbWVudEhvdXJzIiwiZGVjcmVtZW50SG91cnMiLCJpbmNyZW1lbnRNaW51dGVzIiwiZGVjcmVtZW50TWludXRlcyIsImluY3JlbWVudFNlY29uZHMiLCJkZWNyZW1lbnRTZWNvbmRzIiwidXBkYXRlSG91cnMiLCJ1cGRhdGVNaW51dGVzIiwidXBkYXRlU2Vjb25kcyIsImludmFsaWRhdGUiLCJzZXRTZWNvbmRzIiwidG9nZ2xlTWVyaWRpYW4iLCJ1aWJUaW1lcGlja2VyQ29uZmlnIiwidGltZXBpY2tlckN0cmwiLCJUWVBFQUhFQURfUkVHRVhQIiwiaXRlbU5hbWUiLCJ2aWV3TWFwcGVyIiwibW9kZWxNYXBwZXIiLCJvcmlnaW5hbFNjb3BlIiwiJCRkZWJvdW5jZSIsInR5cGVhaGVhZFBhcnNlciIsImZpcmVSZWNhbGN1bGF0aW5nIiwibW92ZUluUHJvZ3Jlc3MiLCJkZWJvdW5jZWRSZWNhbGN1bGF0ZSIsInJlY2FsY3VsYXRlUG9zaXRpb24iLCJIT1RfS0VZUyIsIm1pbkxlbmd0aCIsInR5cGVhaGVhZE1pbkxlbmd0aCIsIndhaXRUaW1lIiwidHlwZWFoZWFkV2FpdE1zIiwiaXNFZGl0YWJsZSIsInR5cGVhaGVhZEVkaXRhYmxlIiwiaGFzRm9jdXMiLCJpc0xvYWRpbmdTZXR0ZXIiLCJ0eXBlYWhlYWRMb2FkaW5nIiwiaXNTZWxlY3RFdmVudCIsInR5cGVhaGVhZFNob3VsZFNlbGVjdCIsInZhbHMiLCJvblNlbGVjdENhbGxiYWNrIiwidHlwZWFoZWFkT25TZWxlY3QiLCJpc1NlbGVjdE9uQmx1ciIsInR5cGVhaGVhZFNlbGVjdE9uQmx1ciIsImlzTm9SZXN1bHRzU2V0dGVyIiwidHlwZWFoZWFkTm9SZXN1bHRzIiwiaW5wdXRGb3JtYXR0ZXIiLCJ0eXBlYWhlYWRJbnB1dEZvcm1hdHRlciIsInR5cGVhaGVhZEFwcGVuZFRvQm9keSIsInR5cGVhaGVhZEFwcGVuZFRvIiwiZm9jdXNGaXJzdCIsInR5cGVhaGVhZEZvY3VzRmlyc3QiLCJzZWxlY3RPbkV4YWN0IiwidHlwZWFoZWFkU2VsZWN0T25FeGFjdCIsImlzT3BlblNldHRlciIsInR5cGVhaGVhZElzT3BlbiIsInNob3dIaW50IiwidHlwZWFoZWFkU2hvd0hpbnQiLCJwYXJzZWRNb2RlbCIsIiRzZXRNb2RlbFZhbHVlIiwicGFyc2VyUmVzdWx0IiwidWliVHlwZWFoZWFkIiwib2ZmRGVzdHJveSIsInBvcHVwSWQiLCJhcmlhLWF1dG9jb21wbGV0ZSIsImFyaWEtb3ducyIsImlucHV0c0NvbnRhaW5lciIsImhpbnRJbnB1dEVsZW0iLCJib3JkZXItY29sb3IiLCJib3gtc2hhZG93Iiwib3BhY2l0eSIsImJhY2tncm91bmQiLCJjb2xvciIsInZlcnRpY2FsLWFsaWduIiwiYmFja2dyb3VuZC1jb2xvciIsInBvcFVwRWwiLCJtb3ZlLWluLXByb2dyZXNzIiwiYXNzaWduLWlzLW9wZW4iLCJ0eXBlYWhlYWRUZW1wbGF0ZVVybCIsInR5cGVhaGVhZFBvcHVwVGVtcGxhdGVVcmwiLCJyZXNldEhpbnQiLCJyZXNldE1hdGNoZXMiLCJhY3RpdmVJZHgiLCJnZXRNYXRjaElkIiwiaW5wdXRJc0V4YWN0TWF0Y2giLCJpbnB1dFZhbHVlIiwiZ2V0TWF0Y2hlc0FzeW5jIiwib25DdXJyZW50UmVxdWVzdCIsImRlYm91bmNlVXBkYXRlIiwiZmlyc3RMYWJlbCIsInNjaGVkdWxlU2VhcmNoV2l0aFRpbWVvdXQiLCJjYW5jZWxQcmV2aW91c1RpbWVvdXQiLCIkaXRlbSIsIiRtb2RlbCIsIiRsYWJlbCIsInR5cGVhaGVhZEZvY3VzT25TZWxlY3QiLCJzaG91bGRTZWxlY3QiLCJvZmZzZXRUb3AiLCJlZGl0YWJsZSIsImRpc21pc3NDbGlja0hhbmRsZXIiLCJfbW9kZWxDdHJsIiwiY2FuZGlkYXRlVmlld1ZhbHVlIiwiZW1wdHlWaWV3VmFsdWUiLCJwb3B1cFRlbXBsYXRlVXJsIiwiaXNEcm9wZG93bk9wZW4iLCJtYXRjaElkeCIsInNlbGVjdEFjdGl2ZSIsInNlbGVjdE1hdGNoIiwidHBsRWwiLCJlc2NhcGVSZWdleHAiLCJxdWVyeVRvRXNjYXBlIiwiY29udGFpbnNIdG1sIiwibWF0Y2hJdGVtIiwiaXNTYW5pdGl6ZVByZXNlbnQiLCJ0cnVzdEFzSHRtbCIsIiQkdWliQ2Fyb3VzZWxDc3MiLCIkJHVpYkRhdGVwaWNrZXJDc3MiLCIkJHVpYlBvc2l0aW9uQ3NzIiwiJCR1aWJEYXRlcGlja2VycG9wdXBDc3MiLCIkJHVpYlRvb2x0aXBDc3MiLCIkJHVpYlRpbWVwaWNrZXJDc3MiLCIkJHVpYlR5cGVhaGVhZENzcyIsInBhY2thZ2VTdHlsZXMiLCJzdHlsZXMiLCJwZW5kQ2xhc3NlcyIsImZpeCIsImlzUHJlZml4IiwicmVtb3ZlRnJvbUFycmF5Iiwic3RyaXBDb21tZW50c0Zyb21FbGVtZW50IiwiJCRhZGRDbGFzcyIsIiQkcmVtb3ZlQ2xhc3MiLCJhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5IiwicHJlcGFyZUFuaW1hdGlvbk9wdGlvbnMiLCIkJGRvbU9wZXJhdGlvbkZpcmVkIiwiYXBwbHlBbmltYXRpb25TdHlsZXMiLCJhcHBseUFuaW1hdGlvbkZyb21TdHlsZXMiLCJhcHBseUFuaW1hdGlvblRvU3R5bGVzIiwibWVyZ2VBbmltYXRpb25EZXRhaWxzIiwib2xkQW5pbWF0aW9uIiwibmV3QW5pbWF0aW9uIiwibmV3T3B0aW9ucyIsInJlc29sdmVFbGVtZW50Q2xhc3NlcyIsInByZXBhcmF0aW9uQ2xhc3NlcyIsImNvbmNhdFdpdGhTcGFjZSIsInJlYWxEb21PcGVyYXRpb24iLCJzcGxpdENsYXNzZXNUb0xvb2t1cCIsImZsYWdzIiwiYWxsb3ciLCJSRU1PVkVfQ0xBU1NfU1VGRklYIiwiQUREX0NMQVNTX1NVRkZJWCIsImdldERvbU5vZGUiLCJhcHBseUdlbmVyYXRlZFByZXBhcmF0aW9uQ2xhc3NlcyIsIkVWRU5UX0NMQVNTX1BSRUZJWCIsImNsZWFyR2VuZXJhdGVkQ2xhc3NlcyIsImJsb2NrVHJhbnNpdGlvbnMiLCJkdXJhdGlvbiIsImFwcGx5SW5saW5lU3R5bGUiLCJUUkFOU0lUSU9OX0RFTEFZX1BST1AiLCJibG9ja0tleWZyYW1lQW5pbWF0aW9ucyIsImFwcGx5QmxvY2siLCJBTklNQVRJT05fUFJPUCIsIkFOSU1BVElPTl9QTEFZU1RBVEVfS0VZIiwic3R5bGVUdXBsZSIsImdldENzc0tleWZyYW1lRHVyYXRpb25TdHlsZSIsIkFOSU1BVElPTl9EVVJBVElPTl9QUk9QIiwiZ2V0Q3NzRGVsYXlTdHlsZSIsImlzS2V5ZnJhbWVBbmltYXRpb24iLCJBTklNQVRJT05fREVMQVlfUFJPUCIsImNvbXB1dGVDc3NTdHlsZXMiLCJkZXRlY3RlZFN0eWxlcyIsImZvcm1hbFN0eWxlTmFtZSIsImFjdHVhbFN0eWxlTmFtZSIsInBhcnNlTWF4VGltZSIsIm1heFZhbHVlIiwidHJ1dGh5VGltaW5nVmFsdWUiLCJnZXRDc3NUcmFuc2l0aW9uRHVyYXRpb25TdHlsZSIsImFwcGx5T25seUR1cmF0aW9uIiwiVFJBTlNJVElPTl9QUk9QIiwiRFVSQVRJT05fS0VZIiwiY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCIsImZsdXNoIiwicmVnaXN0ZXJSZXN0b3JhYmxlU3R5bGVzIiwiYmFja3VwIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIlRSQU5TSVRJT05FTkRfRVZFTlQiLCJBTklNQVRJT05FTkRfRVZFTlQiLCJOR19BTklNQVRFX0NMQVNTTkFNRSIsIk5HX0FOSU1BVEVfQ0hJTERSRU5fREFUQSIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJUSU1JTkdfS0VZIiwiVFJBTlNJVElPTl9EVVJBVElPTl9QUk9QIiwiJCRyQUZTY2hlZHVsZXJGYWN0b3J5Iiwic2NoZWR1bGVyIiwidGFza3MiLCJjYW5jZWxGbiIsIndhaXRVbnRpbFF1aWV0IiwiJCRBbmltYXRlQ2hpbGRyZW5EaXJlY3RpdmUiLCJzZXREYXRhIiwibmdBbmltYXRlQ2hpbGRyZW4iLCJBTklNQVRFX1RJTUVSX0tFWSIsIk9ORV9TRUNPTkQiLCJFTEFQU0VEX1RJTUVfTUFYX0RFQ0lNQUxfUExBQ0VTIiwiQ0xPU0lOR19USU1FX0JVRkZFUiIsIkRFVEVDVF9DU1NfUFJPUEVSVElFUyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRGVsYXkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsIkRFVEVDVF9TVEFHR0VSX0NTU19QUk9QRVJUSUVTIiwiJEFuaW1hdGVDc3NQcm92aWRlciIsIiRhbmltYXRlUHJvdmlkZXIiLCJnY3NMb29rdXAiLCJnY3NTdGFnZ2VyTG9va3VwIiwiJCRyQUZTY2hlZHVsZXIiLCJnY3NIYXNoRm4iLCJleHRyYUNsYXNzZXMiLCJLRVkiLCJwYXJlbnRDb3VudGVyIiwiY29tcHV0ZUNhY2hlZENzc1N0eWxlcyIsInRpbWluZ3MiLCJjb21wdXRlQ2FjaGVkQ3NzU3RhZ2dlclN0eWxlcyIsInN0YWdnZXIiLCJzdGFnZ2VyQ2xhc3NOYW1lIiwicmFmV2FpdFF1ZXVlIiwicGFnZVdpZHRoIiwiY29tcHV0ZVRpbWluZ3MiLCJhRCIsInREIiwibWF4RGVsYXkiLCJtYXhEdXJhdGlvbiIsImFwcGx5QW5pbWF0aW9uQ2xhc3NlcyIsImVuZEZuIiwicmVqZWN0ZWQiLCJhbmltYXRpb25DbG9zZWQiLCJhbmltYXRpb25Db21wbGV0ZWQiLCJhbmltYXRpb25QYXVzZWQiLCIkJHNraXBQcmVwYXJhdGlvbkNsYXNzZXMiLCJ0ZW1wb3JhcnlTdHlsZXMiLCJyZXN0b3JlU3R5bGVzIiwic2V0UHJvcGVydHkiLCJyZW1vdmVQcm9wZXJ0eSIsIm9uRG9uZSIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJhbmltYXRpb25UaW1lckRhdGEiLCJhcHBseUJsb2NraW5nIiwiYmxvY2tUcmFuc2l0aW9uIiwiYmxvY2tLZXlmcmFtZUFuaW1hdGlvbiIsImNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yIiwiJCR3aWxsQW5pbWF0ZSIsInRpbWVTdGFtcCIsIiRtYW51YWxUaW1lU3RhbXAiLCJub3ciLCJlbGFwc2VkVGltZSIsInN0YXJ0VGltZSIsIm1heERlbGF5VGltZSIsInRyaWdnZXJBbmltYXRpb25TdGFydCIsInJlY2FsY3VsYXRlVGltaW5nU3R5bGVzIiwiZnVsbENsYXNzTmFtZSIsInJlbGF0aXZlRGVsYXkiLCJoYXNUcmFuc2l0aW9ucyIsImhhc0FuaW1hdGlvbnMiLCJhcHBseUFuaW1hdGlvbkRlbGF5IiwiZGVsYXlTdHlsZSIsIm1heER1cmF0aW9uVGltZSIsImVhc2VQcm9wIiwiZWFzZVZhbCIsInRpbWVyVGltZSIsImVuZFRpbWUiLCJhbmltYXRpb25zRGF0YSIsInNldHVwRmFsbGJhY2tUaW1lciIsImN1cnJlbnRUaW1lckRhdGEiLCJleHBlY3RlZEVuZFRpbWUiLCJvbkFuaW1hdGlvbkV4cGlyZWQiLCJwbGF5UGF1c2UiLCJwbGF5QW5pbWF0aW9uIiwibWF4U3RhZ2dlciIsIml0ZW1JbmRleCIsInJ1bm5lckhvc3QiLCJpc1N0cnVjdHVyYWwiLCJzdHJ1Y3R1cmFsIiwic3RydWN0dXJhbENsYXNzTmFtZSIsImFkZFJlbW92ZUNsYXNzTmFtZSIsImFwcGx5Q2xhc3Nlc0Vhcmx5IiwiaGFzVG9TdHlsZXMiLCJrZXlmcmFtZVN0eWxlIiwic3RhZ2dlclZhbCIsInRyYW5zaXRpb25TdHlsZSIsImR1cmF0aW9uU3R5bGUiLCJzdGFnZ2VySW5kZXgiLCJpc0ZpcnN0Iiwic2tpcEJsb2NraW5nIiwiaGFzVHJhbnNpdGlvbkFsbCIsImFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIiwiYXBwbHlBbmltYXRpb25EdXJhdGlvbiIsImFwcGx5VHJhbnNpdGlvbkRlbGF5IiwiJCRBbmltYXRlQ3NzRHJpdmVyUHJvdmlkZXIiLCIkJGFuaW1hdGlvblByb3ZpZGVyIiwiaXNEb2N1bWVudEZyYWdtZW50IiwiZHJpdmVycyIsIk5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FIiwiTkdfT1VUX0FOQ0hPUl9DTEFTU19OQU1FIiwiZmlsdGVyQ3NzQ2xhc3NlcyIsImdldFVuaXF1ZVZhbHVlcyIsInByZXBhcmVBbmNob3JlZEFuaW1hdGlvbiIsIm91dEFuY2hvciIsImluQW5jaG9yIiwiY2FsY3VsYXRlQW5jaG9yU3R5bGVzIiwiY29vcmRzIiwiYm9keU5vZGUiLCJnZXRDbGFzc1ZhbCIsInByZXBhcmVJbkFuaW1hdGlvbiIsImVuZGluZ0NsYXNzZXMiLCJzdGFydGluZ0NsYXNzZXMiLCJhbmltYXRvciIsIk5HX0lOX0FOQ0hPUl9DTEFTU19OQU1FIiwicm9vdEJvZHlFbGVtZW50IiwiYW5pbWF0b3JJbiIsImFuaW1hdG9yT3V0Iiwic3RhcnRpbmdBbmltYXRvciIsImN1cnJlbnRBbmltYXRpb24iLCJwcmVwYXJlRnJvbVRvQW5jaG9yQW5pbWF0aW9uIiwiYW5jaG9ycyIsImZyb21BbmltYXRpb24iLCJwcmVwYXJlUmVndWxhckFuaW1hdGlvbiIsInRvQW5pbWF0aW9uIiwiYW5jaG9yQW5pbWF0aW9ucyIsIm91dEVsZW1lbnQiLCJpbkVsZW1lbnQiLCJhbmltYXRpb25SdW5uZXJzIiwiYW5pbWF0aW9uRGV0YWlscyIsInJvb3ROb2RlIiwiJCRBbmltYXRlSnNQcm92aWRlciIsImxvb2t1cEFuaW1hdGlvbnMiLCJmbGFnTWFwIiwiYW5pbWF0aW9uRmFjdG9yeSIsImFwcGx5T3B0aW9ucyIsImV4ZWN1dGVBbmltYXRpb25GbiIsImNsYXNzZXNUb0FkZCIsImNsYXNzZXNUb1JlbW92ZSIsImdyb3VwRXZlbnRlZEFuaW1hdGlvbnMiLCJmbk5hbWUiLCJvcGVyYXRpb25zIiwiYW5pIiwiZW5kUHJvZ3Jlc3NDYiIsIm9uQW5pbWF0aW9uQ29tcGxldGUiLCJwYWNrYWdlQW5pbWF0aW9ucyIsImFuaW1hdGVGbiIsImJlZm9yZSIsImFmdGVyRm4iLCJiZWZvcmVGbiIsIm9uQ29tcGxldGUiLCJlbmRBbmltYXRpb25zIiwiY2FuY2VsbGVkIiwiY2xvc2VBY3RpdmVBbmltYXRpb25zIiwiJCRBbmltYXRlSnNEcml2ZXJQcm92aWRlciIsInByZXBhcmVBbmltYXRpb24iLCJlbmRGbkZhY3RvcnkiLCJOR19BTklNQVRFX0FUVFJfTkFNRSIsIk5HX0FOSU1BVEVfUElOX0RBVEEiLCIkJEFuaW1hdGVRdWV1ZVByb3ZpZGVyIiwibWFrZVRydXRoeUNzc0NsYXNzTWFwIiwiT05FX1NQQUNFIiwiaGFzTWF0Y2hpbmdDbGFzc2VzIiwiY3VycmVudENsYXNzU3RyaW5nIiwiY3VycmVudENsYXNzTWFwIiwiaXNBbGxvd2VkIiwicnVsZVR5cGUiLCJwcmV2aW91c0FuaW1hdGlvbiIsImhhc0FuaW1hdGlvbkNsYXNzZXMiLCJhbmQiLCJQUkVfRElHRVNUX1NUQVRFIiwiUlVOTklOR19TVEFURSIsIm5BIiwiblIiLCJjQSIsImNSIiwiJCRhbmltYXRpb24iLCJwb3N0RGlnZXN0VGFza0ZhY3RvcnkiLCJwb3N0RGlnZXN0Q2FsbGVkIiwibm9ybWFsaXplQW5pbWF0aW9uRGV0YWlscyIsImZpbmRDYWxsYmFja3MiLCJ0YXJnZXRQYXJlbnROb2RlIiwidGFyZ2V0Tm9kZSIsImNhbGxiYWNrUmVnaXN0cnkiLCJmaWx0ZXJGcm9tUmVnaXN0cnkiLCJtYXRjaENvbnRhaW5lciIsIm1hdGNoQ2FsbGJhY2siLCJjb250YWluZXJOb2RlIiwiY2xlYW51cEV2ZW50TGlzdGVuZXJzIiwicXVldWVBbmltYXRpb24iLCJvcmlnaW5hbEVsZW1lbnQiLCJub3RpZnlQcm9ncmVzcyIsInJ1bkluTmV4dFBvc3REaWdlc3RPck5vdyIsImlzQW5pbWF0YWJsZUNsYXNzTmFtZSIsImRvY3VtZW50SGlkZGVuIiwic2tpcEFuaW1hdGlvbnMiLCJhbmltYXRpb25zRW5hYmxlZCIsImRpc2FibGVkRWxlbWVudHNMb29rdXAiLCJleGlzdGluZ0FuaW1hdGlvbiIsImFjdGl2ZUFuaW1hdGlvbnNMb29rdXAiLCJoYXNFeGlzdGluZ0FuaW1hdGlvbiIsImFyZUFuaW1hdGlvbnNBbGxvd2VkIiwiY2xvc2VDaGlsZEFuaW1hdGlvbnMiLCJpc1ZhbGlkQW5pbWF0aW9uIiwiY2xlYXJFbGVtZW50QW5pbWF0aW9uU3RhdGUiLCJtYXJrRWxlbWVudEFuaW1hdGlvblN0YXRlIiwiYW5pbWF0aW9uQ2FuY2VsbGVkIiwicmVhbFJ1bm5lciIsImFuaW1hdGVDaGlsZHJlbiIsImJvZHlOb2RlRGV0ZWN0ZWQiLCJyb290Tm9kZURldGVjdGVkIiwicGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQiLCJlbGVtZW50RGlzYWJsZWQiLCJwYXJlbnRIb3N0IiwiZGV0YWlscyIsInBhcmVudE5vZGVEaXNhYmxlZCIsImRlcmVnaXN0ZXJXYXRjaCIsImlzRW1wdHkiLCJjb250YWluZXIiLCJldmVudFR5cGUiLCJhcmdDb3VudCIsIiQkQW5pbWF0aW9uUHJvdmlkZXIiLCJzZXRSdW5uZXIiLCJSVU5ORVJfU1RPUkFHRV9LRVkiLCJyZW1vdmVSdW5uZXIiLCJnZXRSdW5uZXIiLCJOR19BTklNQVRFX1JFRl9BVFRSIiwic29ydEFuaW1hdGlvbnMiLCJwcm9jZXNzTm9kZSIsInByb2Nlc3NlZCIsImVsZW1lbnROb2RlIiwibG9va3VwIiwicGFyZW50RW50cnkiLCJ0cmVlIiwicmVtYWluaW5nTGV2ZWxFbnRyaWVzIiwibmV4dExldmVsRW50cmllcyIsInJvdyIsImNoaWxkRW50cnkiLCJhbmltYXRpb25RdWV1ZSIsImdldEFuY2hvck5vZGVzIiwiU0VMRUNUT1IiLCJncm91cEFuaW1hdGlvbnMiLCJwcmVwYXJlZEFuaW1hdGlvbnMiLCJyZWZMb29rdXAiLCJlbnRlck9yTW92ZSIsImFuY2hvck5vZGVzIiwiYW5pbWF0aW9uSUQiLCJ1c2VkSW5kaWNlc0xvb2t1cCIsImFuY2hvckdyb3VwcyIsImluZGV4S2V5IiwibG9va3VwS2V5IiwiYmVmb3JlU3RhcnQiLCJjc3NDbGFzc2VzSW50ZXJzZWN0aW9uIiwib3V0IiwiaW4iLCJhYSIsImludm9rZUZpcnN0RHJpdmVyIiwiZHJpdmVyTmFtZSIsImRyaXZlciIsInByZXBhcmVDbGFzc05hbWUiLCJ1cGRhdGVBbmltYXRpb25SdW5uZXJzIiwibmV3UnVubmVyIiwiaGFuZGxlRGVzdHJveWVkRWxlbWVudCIsImdyb3VwZWRBbmltYXRpb25zIiwidG9CZVNvcnRlZEFuaW1hdGlvbnMiLCJhbmltYXRpb25FbnRyeSIsInN0YXJ0QW5pbWF0aW9uRm4iLCJjbG9zZUZuIiwib3BlcmF0aW9uIiwiYW5pbWF0aW9uUnVubmVyIiwibmdBbmltYXRlU3dhcERpcmVjdGl2ZSIsInByZXZpb3VzU2NvcGUiLCJuZ0FuaW1hdGVTd2FwIiwibmdNZXNzYWdlRGlyZWN0aXZlRmFjdG9yeSIsIm5nTWVzc2FnZXNDdHJsIiwicmVjb3JkcyIsImNvbW1lbnROb2RlIiwic3RhdGljRXhwIiwibmdNZXNzYWdlIiwiZHluYW1pY0V4cCIsIm5nTWVzc2FnZUV4cCIsImFzc2lnblJlY29yZHMiLCJyZVJlbmRlciIsIm1lc3NhZ2VDdHJsIiwiYXR0YWNoIiwiJCRhdHRhY2hJZCIsImdldEF0dGFjaElkIiwiaXNBdHRyVHJ1dGh5IiwidHJ1dGh5IiwiZmluZFByZXZpb3VzTWVzc2FnZSIsInByZXZOb2RlIiwicGFyZW50TG9va3VwIiwicHJldktleSIsIiQkbmdNZXNzYWdlTm9kZSIsIm1lc3NhZ2VzIiwicHJldmlvdXNTaWJsaW5nIiwiaW5zZXJ0TWVzc2FnZU5vZGUiLCJtZXNzYWdlTm9kZSIsInJlbW92ZU1lc3NhZ2VOb2RlIiwibGF0ZXN0S2V5IiwibmV4dEF0dGFjaElkIiwicmVuZGVyTGF0ZXIiLCJjYWNoZWRDb2xsZWN0aW9uIiwibmdNZXNzYWdlc011bHRpcGxlIiwidW5tYXRjaGVkTWVzc2FnZXMiLCJtYXRjaGVkS2V5cyIsIm1lc3NhZ2VJdGVtIiwibWVzc2FnZUZvdW5kIiwidG90YWxNZXNzYWdlcyIsIm1lc3NhZ2VVc2VkIiwibmdNZXNzYWdlcyIsIm5leHRLZXkiLCJyZXBsYWNlRWxlbWVudFdpdGhNYXJrZXIiLCJtYXJrZXIiLCJuZ01lc3NhZ2VzSW5jbHVkZSJdLCJtYXBwaW5ncyI6IkFBZ2duREEsUUFBU0EsTUFBS0MsRUFBZUMsR0FDM0JELEVBQWNFLFVBQVlELEVBQVUsWUFDcENELEVBQWNHLFNBQVdGLEVBQVUsU0FPckMsUUFBU0csUUFBT0MsRUFBZ0JDLEVBQW9CQyxHQUNsREEsRUFBa0JDLFdBQVUsR0FFNUJILEVBQWVJLE1BQU0sUUFDbkJDLElBQUssSUFDTEMsWUFBYSw4QkFDWkYsTUFB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QUFXLE9BQVEsT0FBUSxlQUFnQixVQW9CekRwTixRQUFRM08sT0FBTyxnQkFBZ0I5RyxXQUFXLGlCQUFrQnFGLGdCQUFnQnJGLFdBQVcsZ0JBQWlCc0YsZUFFeEdELGVBQWV3ZCxTQUFXLFFBTzFCdmQsY0FBY3VkLFNBQVcsT0FBUSxlQUFnQixTQUFVLFNBZ0IzRHBOLFFBQVEzTyxPQUFPLGdCQUFnQnFTLFVBQVUsU0FBVTNULFFBc0JuRGlRLFFBQVEzTyxPQUFPLGdCQUFnQjJRLFFBQVEsVUFBVzlTLFNBRWxEQSxRQUFRa2UsU0FBVyxZQUFhLFdBUWhDcE4sUUFBUTNPLE9BQU8sZ0JBQWdCMlEsUUFBUSxPQUFROVQsTUFFL0NBLEtBQUtrZixTQUFXLFlBQWEsV0FRN0JwTixRQUFRM08sT0FBTyxnQkFBZ0IyUSxRQUFRLE9BQVF0VCxNQUUvQ0EsS0FBSzBlLFNBQVcsWUFBYSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNi40XG4gKiAoYykgMjAxMC0yMDE3IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3cpIHsndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cbiAqIEFuZ3VsYXIuIEl0IGNhbiBiZSBjYWxsZWQgYXMgZm9sbG93czpcbiAqXG4gKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xuICogdGhyb3cgZXhhbXBsZU1pbkVycignb25lJywgJ1RoaXMgezB9IGlzIHsxfScsIGZvbywgYmFyKTtcbiAqXG4gKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIGhhdmUgYSBuYW1lc3BhY2VkIGVycm9yIGNvZGUgb2YgZXhhbXBsZS5vbmUuICBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIHJlcGxhY2UgezB9IHdpdGggdGhlIHZhbHVlIG9mIGZvbywgYW5kIHsxfSB3aXRoIHRoZVxuICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxuICogdGFrZS5cbiAqXG4gKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXG4gKiBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIGZpbmFsIHN0cmluZy5cbiAqXG4gKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcbiAqIGFyZSBhcHBsaWVkIHdpdGggcmVzcGVjdCB0byBob3cgbWluRXJyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhbmQgY2FsbGVkLlxuICogSW5zdGFuY2VzIHNob3VsZCBoYXZlIG5hbWVzIG9mIHRoZSBmb3JtIG5hbWVzcGFjZU1pbkVyciBmb3IgYSBtaW5FcnIgY3JlYXRlZFxuICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXG4gKiBzaG91bGQgYWxsIGJlIHN0YXRpYyBzdHJpbmdzLCBub3QgdmFyaWFibGVzIG9yIGdlbmVyYWwgZXhwcmVzc2lvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBFcnJvckNvbnN0cnVjdG9yIEN1c3RvbSBlcnJvciBjb25zdHJ1Y3RvciB0byBiZSBpbnN0YW50aWF0ZWQgd2hlbiByZXR1cm5pbmdcbiAqICAgZXJyb3IgZnJvbSByZXR1cm5lZCBmdW5jdGlvbiwgZm9yIGNhc2VzIHdoZW4gYSBwYXJ0aWN1bGFyIHR5cGUgb2YgZXJyb3IgaXMgdXNlZnVsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBtaW5FcnIobW9kdWxlLCBFcnJvckNvbnN0cnVjdG9yKSB7XG4gIEVycm9yQ29uc3RydWN0b3IgPSBFcnJvckNvbnN0cnVjdG9yIHx8IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvZGUgPSBhcmd1bWVudHNbMF0sXG4gICAgICB0ZW1wbGF0ZSA9IGFyZ3VtZW50c1sxXSxcbiAgICAgIG1lc3NhZ2UgPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsXG4gICAgICB0ZW1wbGF0ZUFyZ3MgPSBzbGljZUFyZ3MoYXJndW1lbnRzLCAyKS5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0b0RlYnVnU3RyaW5nKGFyZywgbWluRXJyQ29uZmlnLm9iamVjdE1heERlcHRoKTtcbiAgICAgIH0pLFxuICAgICAgcGFyYW1QcmVmaXgsIGk7XG5cbiAgICBtZXNzYWdlICs9IHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcZCtcXH0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBpbmRleCA9ICttYXRjaC5zbGljZSgxLCAtMSk7XG5cbiAgICAgIGlmIChpbmRleCA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlQXJnc1tpbmRleF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIG1lc3NhZ2UgKz0gJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjYuNC8nICtcbiAgICAgIChtb2R1bGUgPyBtb2R1bGUgKyAnLycgOiAnJykgKyBjb2RlO1xuXG4gICAgZm9yIChpID0gMCwgcGFyYW1QcmVmaXggPSAnPyc7IGkgPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoOyBpKyssIHBhcmFtUHJlZml4ID0gJyYnKSB7XG4gICAgICBtZXNzYWdlICs9IHBhcmFtUHJlZml4ICsgJ3AnICsgaSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh0ZW1wbGF0ZUFyZ3NbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRXJyb3JDb25zdHJ1Y3RvcihtZXNzYWdlKTtcbiAgfTtcbn1cblxuLyogV2UgbmVlZCB0byB0ZWxsIEVTTGludCB3aGF0IHZhcmlhYmxlcyBhcmUgYmVpbmcgZXhwb3J0ZWQgKi9cbi8qIGV4cG9ydGVkXG4gIGFuZ3VsYXIsXG4gIG1zaWUsXG4gIGpxTGl0ZSxcbiAgalF1ZXJ5LFxuICBzbGljZSxcbiAgc3BsaWNlLFxuICBwdXNoLFxuICB0b1N0cmluZyxcbiAgbWluRXJyQ29uZmlnLFxuICBlcnJvckhhbmRsaW5nQ29uZmlnLFxuICBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgsXG4gIG5nTWluRXJyLFxuICBhbmd1bGFyTW9kdWxlLFxuICB1aWQsXG4gIFJFR0VYX1NUUklOR19SRUdFWFAsXG4gIFZBTElESVRZX1NUQVRFX1BST1BFUlRZLFxuXG4gIGxvd2VyY2FzZSxcbiAgdXBwZXJjYXNlLFxuICBtYW51YWxMb3dlcmNhc2UsXG4gIG1hbnVhbFVwcGVyY2FzZSxcbiAgbm9kZU5hbWVfLFxuICBpc0FycmF5TGlrZSxcbiAgZm9yRWFjaCxcbiAgZm9yRWFjaFNvcnRlZCxcbiAgcmV2ZXJzZVBhcmFtcyxcbiAgbmV4dFVpZCxcbiAgc2V0SGFzaEtleSxcbiAgZXh0ZW5kLFxuICB0b0ludCxcbiAgaW5oZXJpdCxcbiAgbWVyZ2UsXG4gIG5vb3AsXG4gIGlkZW50aXR5LFxuICB2YWx1ZUZuLFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEZWZpbmVkLFxuICBpc09iamVjdCxcbiAgaXNCbGFua09iamVjdCxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc051bWJlck5hTixcbiAgaXNEYXRlLFxuICBpc0FycmF5LFxuICBpc0Z1bmN0aW9uLFxuICBpc1JlZ0V4cCxcbiAgaXNXaW5kb3csXG4gIGlzU2NvcGUsXG4gIGlzRmlsZSxcbiAgaXNGb3JtRGF0YSxcbiAgaXNCbG9iLFxuICBpc0Jvb2xlYW4sXG4gIGlzUHJvbWlzZUxpa2UsXG4gIHRyaW0sXG4gIGVzY2FwZUZvclJlZ2V4cCxcbiAgaXNFbGVtZW50LFxuICBtYWtlTWFwLFxuICBpbmNsdWRlcyxcbiAgYXJyYXlSZW1vdmUsXG4gIGNvcHksXG4gIHNpbXBsZUNvbXBhcmUsXG4gIGVxdWFscyxcbiAgY3NwLFxuICBqcSxcbiAgY29uY2F0LFxuICBzbGljZUFyZ3MsXG4gIGJpbmQsXG4gIHRvSnNvblJlcGxhY2VyLFxuICB0b0pzb24sXG4gIGZyb21Kc29uLFxuICBjb252ZXJ0VGltZXpvbmVUb0xvY2FsLFxuICB0aW1lem9uZVRvT2Zmc2V0LFxuICBzdGFydGluZ1RhZyxcbiAgdHJ5RGVjb2RlVVJJQ29tcG9uZW50LFxuICBwYXJzZUtleVZhbHVlLFxuICB0b0tleVZhbHVlLFxuICBlbmNvZGVVcmlTZWdtZW50LFxuICBlbmNvZGVVcmlRdWVyeSxcbiAgYW5ndWxhckluaXQsXG4gIGJvb3RzdHJhcCxcbiAgZ2V0VGVzdGFiaWxpdHksXG4gIHNuYWtlX2Nhc2UsXG4gIGJpbmRKUXVlcnksXG4gIGFzc2VydEFyZyxcbiAgYXNzZXJ0QXJnRm4sXG4gIGFzc2VydE5vdEhhc093blByb3BlcnR5LFxuICBnZXR0ZXIsXG4gIGdldEJsb2NrTm9kZXMsXG4gIGhhc093blByb3BlcnR5LFxuICBjcmVhdGVNYXAsXG4gIHN0cmluZ2lmeSxcblxuICBOT0RFX1RZUEVfRUxFTUVOVCxcbiAgTk9ERV9UWVBFX0FUVFJJQlVURSxcbiAgTk9ERV9UWVBFX1RFWFQsXG4gIE5PREVfVFlQRV9DT01NRU5ULFxuICBOT0RFX1RZUEVfRE9DVU1FTlQsXG4gIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVFxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBpbnN0YWxsYXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICMgbmcgKGNvcmUgbW9kdWxlKVxuICogVGhlIG5nIG1vZHVsZSBpcyBsb2FkZWQgYnkgZGVmYXVsdCB3aGVuIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBpcyBzdGFydGVkLiBUaGUgbW9kdWxlIGl0c2VsZlxuICogY29udGFpbnMgdGhlIGVzc2VudGlhbCBjb21wb25lbnRzIGZvciBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gdG8gZnVuY3Rpb24uIFRoZSB0YWJsZSBiZWxvd1xuICogbGlzdHMgYSBoaWdoIGxldmVsIGJyZWFrZG93biBvZiBlYWNoIG9mIHRoZSBzZXJ2aWNlcy9mYWN0b3JpZXMsIGZpbHRlcnMsIGRpcmVjdGl2ZXMgYW5kIHRlc3RpbmdcbiAqIGNvbXBvbmVudHMgYXZhaWxhYmxlIHdpdGhpbiB0aGlzIGNvcmUgbW9kdWxlLlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdcIj48L2Rpdj5cbiAqL1xuXG52YXIgUkVHRVhfU1RSSU5HX1JFR0VYUCA9IC9eXFwvKC4rKVxcLyhbYS16XSopJC87XG5cbi8vIFRoZSBuYW1lIG9mIGEgZm9ybSBjb250cm9sJ3MgVmFsaWRpdHlTdGF0ZSBwcm9wZXJ0eS5cbi8vIFRoaXMgaXMgdXNlZCBzbyB0aGF0IGl0J3MgcG9zc2libGUgZm9yIGludGVybmFsIHRlc3RzIHRvIGNyZWF0ZSBtb2NrIFZhbGlkaXR5U3RhdGVzLlxudmFyIFZBTElESVRZX1NUQVRFX1BST1BFUlRZID0gJ3ZhbGlkaXR5JztcblxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgbWluRXJyQ29uZmlnID0ge1xuICBvYmplY3RNYXhEZXB0aDogNVxufTtcblxuIC8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmVycm9ySGFuZGxpbmdDb25maWdcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb25maWd1cmUgc2V2ZXJhbCBhc3BlY3RzIG9mIGVycm9yIGhhbmRsaW5nIGluIEFuZ3VsYXJKUyBpZiB1c2VkIGFzIGEgc2V0dGVyIG9yIHJldHVybiB0aGVcbiAqIGN1cnJlbnQgY29uZmlndXJhdGlvbiBpZiB1c2VkIGFzIGEgZ2V0dGVyLiBUaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiAtICoqb2JqZWN0TWF4RGVwdGgqKjogVGhlIG1heGltdW0gZGVwdGggdG8gd2hpY2ggb2JqZWN0cyBhcmUgdHJhdmVyc2VkIHdoZW4gc3RyaW5naWZpZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICpcbiAqIE9taXR0ZWQgb3IgdW5kZWZpbmVkIG9wdGlvbnMgd2lsbCBsZWF2ZSB0aGUgY29ycmVzcG9uZGluZyBjb25maWd1cmF0aW9uIHZhbHVlcyB1bmNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuIE1heSBvbmx5IGNvbnRhaW4gdGhlIG9wdGlvbnMgdGhhdCBuZWVkIHRvIGJlXG4gKiAgICAgdXBkYXRlZC4gU3VwcG9ydGVkIGtleXM6XG4gKlxuICogKiBgb2JqZWN0TWF4RGVwdGhgICAqKntOdW1iZXJ9KiogLSBUaGUgbWF4IGRlcHRoIGZvciBzdHJpbmdpZnlpbmcgb2JqZWN0cy4gU2V0dGluZyB0byBhXG4gKiAgIG5vbi1wb3NpdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgcmVtb3ZlcyB0aGUgbWF4IGRlcHRoIGxpbWl0LlxuICogICBEZWZhdWx0OiA1XG4gKi9cbmZ1bmN0aW9uIGVycm9ySGFuZGxpbmdDb25maWcoY29uZmlnKSB7XG4gIGlmIChpc09iamVjdChjb25maWcpKSB7XG4gICAgaWYgKGlzRGVmaW5lZChjb25maWcub2JqZWN0TWF4RGVwdGgpKSB7XG4gICAgICBtaW5FcnJDb25maWcub2JqZWN0TWF4RGVwdGggPSBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgoY29uZmlnLm9iamVjdE1heERlcHRoKSA/IGNvbmZpZy5vYmplY3RNYXhEZXB0aCA6IE5hTjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1pbkVyckNvbmZpZztcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4RGVwdGhcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRPYmplY3RNYXhEZXB0aChtYXhEZXB0aCkge1xuICByZXR1cm4gaXNOdW1iZXIobWF4RGVwdGgpICYmIG1heERlcHRoID4gMDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubG93ZXJjYXNlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBzaW5jZVZlcnNpb249XCIxLjUuMFwiXG4gKiByZW1vdmVWZXJzaW9uPVwiMS43LjBcIlxuICogVXNlIFtTdHJpbmcucHJvdG90eXBlLnRvTG93ZXJDYXNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvdG9Mb3dlckNhc2UpIGluc3RlYWQuXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIGxvd2VyY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBMb3dlcmNhc2VkIHN0cmluZy5cbiAqL1xudmFyIGxvd2VyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZykge3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvTG93ZXJDYXNlKCkgOiBzdHJpbmc7fTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIudXBwZXJjYXNlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBzaW5jZVZlcnNpb249XCIxLjUuMFwiXG4gKiByZW1vdmVWZXJzaW9uPVwiMS43LjBcIlxuICogVXNlIFtTdHJpbmcucHJvdG90eXBlLnRvVXBwZXJDYXNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvdG9VcHBlckNhc2UpIGluc3RlYWQuXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIHVwcGVyY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byB1cHBlcmNhc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZy5cbiAqL1xudmFyIHVwcGVyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZykge3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvVXBwZXJDYXNlKCkgOiBzdHJpbmc7fTtcblxuXG52YXIgbWFudWFsTG93ZXJjYXNlID0gZnVuY3Rpb24ocykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG4gIHJldHVybiBpc1N0cmluZyhzKVxuICAgICAgPyBzLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSB8IDMyKTt9KVxuICAgICAgOiBzO1xuICAvKiBlc2xpbnQtZW5hYmxlICovXG59O1xudmFyIG1hbnVhbFVwcGVyY2FzZSA9IGZ1bmN0aW9uKHMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuICByZXR1cm4gaXNTdHJpbmcocylcbiAgICAgID8gcy5yZXBsYWNlKC9bYS16XS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgJiB+MzIpO30pXG4gICAgICA6IHM7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cbn07XG5cblxuLy8gU3RyaW5nI3RvTG93ZXJDYXNlIGFuZCBTdHJpbmcjdG9VcHBlckNhc2UgZG9uJ3QgcHJvZHVjZSBjb3JyZWN0IHJlc3VsdHMgaW4gYnJvd3NlcnMgd2l0aCBUdXJraXNoXG4vLyBsb2NhbGUsIGZvciB0aGlzIHJlYXNvbiB3ZSBuZWVkIHRvIGRldGVjdCB0aGlzIGNhc2UgYW5kIHJlZGVmaW5lIGxvd2VyY2FzZS91cHBlcmNhc2UgbWV0aG9kc1xuLy8gd2l0aCBjb3JyZWN0IGJ1dCBzbG93ZXIgYWx0ZXJuYXRpdmVzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTEzODdcbmlmICgnaScgIT09ICdJJy50b0xvd2VyQ2FzZSgpKSB7XG4gIGxvd2VyY2FzZSA9IG1hbnVhbExvd2VyY2FzZTtcbiAgdXBwZXJjYXNlID0gbWFudWFsVXBwZXJjYXNlO1xufVxuXG5cbnZhclxuICAgIG1zaWUsICAgICAgICAgICAgIC8vIGhvbGRzIG1ham9yIHZlcnNpb24gbnVtYmVyIGZvciBJRSwgb3IgTmFOIGlmIFVBIGlzIG5vdCBJRS5cbiAgICBqcUxpdGUsICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nIHNpbmNlIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgYWZ0ZXIgdXMuXG4gICAgalF1ZXJ5LCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZ1xuICAgIHNsaWNlICAgICAgICAgICAgID0gW10uc2xpY2UsXG4gICAgc3BsaWNlICAgICAgICAgICAgPSBbXS5zcGxpY2UsXG4gICAgcHVzaCAgICAgICAgICAgICAgPSBbXS5wdXNoLFxuICAgIHRvU3RyaW5nICAgICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICBnZXRQcm90b3R5cGVPZiAgICA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBuZ01pbkVyciAgICAgICAgICA9IG1pbkVycignbmcnKSxcblxuICAgIC8qKiBAbmFtZSBhbmd1bGFyICovXG4gICAgYW5ndWxhciAgICAgICAgICAgPSB3aW5kb3cuYW5ndWxhciB8fCAod2luZG93LmFuZ3VsYXIgPSB7fSksXG4gICAgYW5ndWxhck1vZHVsZSxcbiAgICB1aWQgICAgICAgICAgICAgICA9IDA7XG5cbi8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuLyoqXG4gKiBkb2N1bWVudE1vZGUgaXMgYW4gSUUtb25seSBwcm9wZXJ0eVxuICogaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2NjMTk2OTg4KHY9dnMuODUpLmFzcHhcbiAqL1xubXNpZSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudE1vZGU7XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBgb2JqYCBpcyBhbiBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdCAoTm9kZUxpc3QsIEFyZ3VtZW50cyxcbiAqICAgICAgICAgICAgICAgICAgIFN0cmluZyAuLi4pXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikge1xuXG4gIC8vIGBudWxsYCwgYHVuZGVmaW5lZGAgYW5kIGB3aW5kb3dgIGFyZSBub3QgYXJyYXktbGlrZVxuICBpZiAob2JqID09IG51bGwgfHwgaXNXaW5kb3cob2JqKSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIGFycmF5cywgc3RyaW5ncyBhbmQgalF1ZXJ5L2pxTGl0ZSBvYmplY3RzIGFyZSBhcnJheSBsaWtlXG4gIC8vICoganFMaXRlIGlzIGVpdGhlciB0aGUgalF1ZXJ5IG9yIGpxTGl0ZSBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICAvLyAqIHdlIGhhdmUgdG8gY2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBqcUxpdGUgZmlyc3QgYXMgdGhpcyBtZXRob2QgaXMgY2FsbGVkXG4gIC8vICAgdmlhIHRoZSBmb3JFYWNoIG1ldGhvZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUganFMaXRlIG9iamVjdCBpbiB0aGUgZmlyc3QgcGxhY2VcbiAgaWYgKGlzQXJyYXkob2JqKSB8fCBpc1N0cmluZyhvYmopIHx8IChqcUxpdGUgJiYgb2JqIGluc3RhbmNlb2YganFMaXRlKSkgcmV0dXJuIHRydWU7XG5cbiAgLy8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG4gIC8vIFwibGVuZ3RoXCIgaW4gb2JqIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTExNTA4KVxuICB2YXIgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gT2JqZWN0KG9iaikgJiYgb2JqLmxlbmd0aDtcblxuICAvLyBOb2RlTGlzdCBvYmplY3RzICh3aXRoIGBpdGVtYCBtZXRob2QpIGFuZFxuICAvLyBvdGhlciBvYmplY3RzIHdpdGggc3VpdGFibGUgbGVuZ3RoIGNoYXJhY3RlcmlzdGljcyBhcmUgYXJyYXktbGlrZVxuICByZXR1cm4gaXNOdW1iZXIobGVuZ3RoKSAmJlxuICAgIChsZW5ndGggPj0gMCAmJiAoKGxlbmd0aCAtIDEpIGluIG9iaiB8fCBvYmogaW5zdGFuY2VvZiBBcnJheSkgfHwgdHlwZW9mIG9iai5pdGVtID09PSAnZnVuY3Rpb24nKTtcblxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mb3JFYWNoXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhblxuICogb2JqZWN0IG9yIGFuIGFycmF5LiBUaGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggYGl0ZXJhdG9yKHZhbHVlLCBrZXksIG9iailgLCB3aGVyZSBgdmFsdWVgXG4gKiBpcyB0aGUgdmFsdWUgb2YgYW4gb2JqZWN0IHByb3BlcnR5IG9yIGFuIGFycmF5IGVsZW1lbnQsIGBrZXlgIGlzIHRoZSBvYmplY3QgcHJvcGVydHkga2V5IG9yXG4gKiBhcnJheSBlbGVtZW50IGluZGV4IGFuZCBvYmogaXMgdGhlIGBvYmpgIGl0c2VsZi4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IGAuZm9yRWFjaGAgZG9lcyBub3QgaXRlcmF0ZSBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlY2F1c2UgaXQgZmlsdGVyc1xuICogdXNpbmcgdGhlIGBoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLlxuICpcbiAqIFVubGlrZSBFUzI2MidzXG4gKiBbQXJyYXkucHJvdG90eXBlLmZvckVhY2hdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS40LjQuMTgpLFxuICogcHJvdmlkaW5nICd1bmRlZmluZWQnIG9yICdudWxsJyB2YWx1ZXMgZm9yIGBvYmpgIHdpbGwgbm90IHRocm93IGEgVHlwZUVycm9yLCBidXQgcmF0aGVyIGp1c3RcbiAqIHJldHVybiB0aGUgdmFsdWUgcHJvdmlkZWQuXG4gKlxuICAgYGBganNcbiAgICAgdmFyIHZhbHVlcyA9IHtuYW1lOiAnbWlza28nLCBnZW5kZXI6ICdtYWxlJ307XG4gICAgIHZhciBsb2cgPSBbXTtcbiAgICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgIHRoaXMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpO1xuICAgICB9LCBsb2cpO1xuICAgICBleHBlY3QobG9nKS50b0VxdWFsKFsnbmFtZTogbWlza28nLCAnZ2VuZGVyOiBtYWxlJ10pO1xuICAgYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3IgSXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgT2JqZWN0IHRvIGJlY29tZSBjb250ZXh0IChgdGhpc2ApIGZvciB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fSBSZWZlcmVuY2UgdG8gYG9iamAuXG4gKi9cblxuZnVuY3Rpb24gZm9yRWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXksIGxlbmd0aDtcbiAgaWYgKG9iaikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpZiAoa2V5ICE9PSAncHJvdG90eXBlJyAmJiBrZXkgIT09ICdsZW5ndGgnICYmIGtleSAhPT0gJ25hbWUnICYmIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikgfHwgaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgdmFyIGlzUHJpbWl0aXZlID0gdHlwZW9mIG9iaiAhPT0gJ29iamVjdCc7XG4gICAgICBmb3IgKGtleSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGtleSA8IGxlbmd0aDsga2V5KyspIHtcbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlIHx8IGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9iai5mb3JFYWNoICYmIG9iai5mb3JFYWNoICE9PSBmb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0LCBvYmopO1xuICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChvYmopKSB7XG4gICAgICAvLyBjcmVhdGVNYXAoKSBmYXN0IHBhdGggLS0tIFNhZmUgdG8gYXZvaWQgaGFzT3duUHJvcGVydHkgY2hlY2sgYmVjYXVzZSBwcm90b3R5cGUgY2hhaW4gaXMgZW1wdHlcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLmhhc093blByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBTbG93IHBhdGggZm9yIG9iamVjdHMgaW5oZXJpdGluZyBPYmplY3QucHJvdG90eXBlLCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBuZWVkZWRcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2xvdyBwYXRoIGZvciBvYmplY3RzIHdoaWNoIGRvIG5vdCBoYXZlIGEgbWV0aG9kIGBoYXNPd25Qcm9wZXJ0eWBcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNvcnRlZChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKS5zb3J0KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cblxuXG4vKipcbiAqIHdoZW4gdXNpbmcgZm9yRWFjaCB0aGUgcGFyYW1zIGFyZSB2YWx1ZSwga2V5LCBidXQgaXQgaXMgb2Z0ZW4gdXNlZnVsIHRvIGhhdmUga2V5LCB2YWx1ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAqKX0gaXRlcmF0b3JGblxuICogQHJldHVybnMge2Z1bmN0aW9uKCosIHN0cmluZyl9XG4gKi9cbmZ1bmN0aW9uIHJldmVyc2VQYXJhbXMoaXRlcmF0b3JGbikge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGtleSkge2l0ZXJhdG9yRm4oa2V5LCB2YWx1ZSk7fTtcbn1cblxuLyoqXG4gKiBBIGNvbnNpc3RlbnQgd2F5IG9mIGNyZWF0aW5nIHVuaXF1ZSBJRHMgaW4gYW5ndWxhci5cbiAqXG4gKiBVc2luZyBzaW1wbGUgbnVtYmVycyBhbGxvd3MgdXMgdG8gZ2VuZXJhdGUgMjguNiBtaWxsaW9uIHVuaXF1ZSBpZHMgcGVyIHNlY29uZCBmb3IgMTAgeWVhcnMgYmVmb3JlXG4gKiB3ZSBoaXQgbnVtYmVyIHByZWNpc2lvbiBpc3N1ZXMgaW4gSmF2YVNjcmlwdC5cbiAqXG4gKiBNYXRoLnBvdygyLDUzKSAvIDYwIC8gNjAgLyAyNCAvIDM2NSAvIDEwID0gMjguNk1cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gbmV4dFVpZCgpIHtcbiAgcmV0dXJuICsrdWlkO1xufVxuXG5cbi8qKlxuICogU2V0IG9yIGNsZWFyIHRoZSBoYXNoa2V5IGZvciBhbiBvYmplY3QuXG4gKiBAcGFyYW0gb2JqIG9iamVjdFxuICogQHBhcmFtIGggdGhlIGhhc2hrZXkgKCF0cnV0aHkgdG8gZGVsZXRlIHRoZSBoYXNoa2V5KVxuICovXG5mdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkge1xuICBpZiAoaCkge1xuICAgIG9iai4kJGhhc2hLZXkgPSBoO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBvYmouJCRoYXNoS2V5O1xuICB9XG59XG5cblxuZnVuY3Rpb24gYmFzZUV4dGVuZChkc3QsIG9ianMsIGRlZXApIHtcbiAgdmFyIGggPSBkc3QuJCRoYXNoS2V5O1xuXG4gIGZvciAodmFyIGkgPSAwLCBpaSA9IG9ianMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgIHZhciBvYmogPSBvYmpzW2ldO1xuICAgIGlmICghaXNPYmplY3Qob2JqKSAmJiAhaXNGdW5jdGlvbihvYmopKSBjb250aW51ZTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaiA9IDAsIGpqID0ga2V5cy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgIHZhciBzcmMgPSBvYmpba2V5XTtcblxuICAgICAgaWYgKGRlZXAgJiYgaXNPYmplY3Qoc3JjKSkge1xuICAgICAgICBpZiAoaXNEYXRlKHNyYykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IG5ldyBEYXRlKHNyYy52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKHNyYykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IG5ldyBSZWdFeHAoc3JjKTtcbiAgICAgICAgfSBlbHNlIGlmIChzcmMubm9kZU5hbWUpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHNyYy5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50KHNyYykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHNyYy5jbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghaXNPYmplY3QoZHN0W2tleV0pKSBkc3Rba2V5XSA9IGlzQXJyYXkoc3JjKSA/IFtdIDoge307XG4gICAgICAgICAgYmFzZUV4dGVuZChkc3Rba2V5XSwgW3NyY10sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkc3Rba2V5XSA9IHNyYztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRIYXNoS2V5KGRzdCwgaCk7XG4gIHJldHVybiBkc3Q7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmV4dGVuZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4gKiB0byBgZHN0YC4gWW91IGNhbiBzcGVjaWZ5IG11bHRpcGxlIGBzcmNgIG9iamVjdHMuIElmIHlvdSB3YW50IHRvIHByZXNlcnZlIG9yaWdpbmFsIG9iamVjdHMsIHlvdSBjYW4gZG8gc29cbiAqIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5leHRlbmQoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbiAqXG4gKiAqKk5vdGU6KiogS2VlcCBpbiBtaW5kIHRoYXQgYGFuZ3VsYXIuZXh0ZW5kYCBkb2VzIG5vdCBzdXBwb3J0IHJlY3Vyc2l2ZSBtZXJnZSAoZGVlcCBjb3B5KS4gVXNlXG4gKiB7QGxpbmsgYW5ndWxhci5tZXJnZX0gZm9yIHRoaXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChkc3QpIHtcbiAgcmV0dXJuIGJhc2VFeHRlbmQoZHN0LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZhbHNlKTtcbn1cblxuXG4vKipcbiogQG5nZG9jIGZ1bmN0aW9uXG4qIEBuYW1lIGFuZ3VsYXIubWVyZ2VcbiogQG1vZHVsZSBuZ1xuKiBAa2luZCBmdW5jdGlvblxuKlxuKiBAZGVzY3JpcHRpb25cbiogRGVlcGx5IGV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4qIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4gSWYgeW91IHdhbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgb2JqZWN0cywgeW91IGNhbiBkbyBzb1xuKiBieSBwYXNzaW5nIGFuIGVtcHR5IG9iamVjdCBhcyB0aGUgdGFyZ2V0OiBgdmFyIG9iamVjdCA9IGFuZ3VsYXIubWVyZ2Uoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbipcbiogVW5saWtlIHtAbGluayBhbmd1bGFyLmV4dGVuZCBleHRlbmQoKX0sIGBtZXJnZSgpYCByZWN1cnNpdmVseSBkZXNjZW5kcyBpbnRvIG9iamVjdCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuKiBvYmplY3RzLCBwZXJmb3JtaW5nIGEgZGVlcCBjb3B5LlxuKlxuKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cbiogQHBhcmFtIHsuLi5PYmplY3R9IHNyYyBTb3VyY2Ugb2JqZWN0KHMpLlxuKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4qL1xuZnVuY3Rpb24gbWVyZ2UoZHN0KSB7XG4gIHJldHVybiBiYXNlRXh0ZW5kKGRzdCwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB0cnVlKTtcbn1cblxuXG5cbmZ1bmN0aW9uIHRvSW50KHN0cikge1xuICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7XG59XG5cbnZhciBpc051bWJlck5hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBpc051bWJlck5hTihudW0pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gbnVtICE9PSBudW07XG59O1xuXG5cbmZ1bmN0aW9uIGluaGVyaXQocGFyZW50LCBleHRyYSkge1xuICByZXR1cm4gZXh0ZW5kKE9iamVjdC5jcmVhdGUocGFyZW50KSwgZXh0cmEpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5ub29wXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIG5vIG9wZXJhdGlvbnMuIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGVcbiAqIGZ1bmN0aW9uYWwgc3R5bGUuXG4gICBgYGBqc1xuICAgICBmdW5jdGlvbiBmb28oY2FsbGJhY2spIHtcbiAgICAgICB2YXIgcmVzdWx0ID0gY2FsY3VsYXRlUmVzdWx0KCk7XG4gICAgICAgKGNhbGxiYWNrIHx8IGFuZ3VsYXIubm9vcCkocmVzdWx0KTtcbiAgICAgfVxuICAgYGBgXG4gKi9cbmZ1bmN0aW9uIG5vb3AoKSB7fVxubm9vcC4kaW5qZWN0ID0gW107XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaWRlbnRpdHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpdHMgZmlyc3QgYXJndW1lbnQuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZVxuICogZnVuY3Rpb25hbCBzdHlsZS5cbiAqXG4gICBgYGBqc1xuICAgZnVuY3Rpb24gdHJhbnNmb3JtZXIodHJhbnNmb3JtYXRpb25GbiwgdmFsdWUpIHtcbiAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTtcbiAgIH07XG5cbiAgIC8vIEUuZy5cbiAgIGZ1bmN0aW9uIGdldFJlc3VsdChmbiwgaW5wdXQpIHtcbiAgICAgcmV0dXJuIChmbiB8fCBhbmd1bGFyLmlkZW50aXR5KShpbnB1dCk7XG4gICB9O1xuXG4gICBnZXRSZXN1bHQoZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIDI7IH0sIDIxKTsgICAvLyByZXR1cm5zIDQyXG4gICBnZXRSZXN1bHQobnVsbCwgMjEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIDIxXG4gICBnZXRSZXN1bHQodW5kZWZpbmVkLCAyMSk7ICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIDIxXG4gICBgYGBcbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIHRvIGJlIHJldHVybmVkLlxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBwYXNzZWQgaW4uXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KCQpIHtyZXR1cm4gJDt9XG5pZGVudGl0eS4kaW5qZWN0ID0gW107XG5cblxuZnVuY3Rpb24gdmFsdWVGbih2YWx1ZSkge3JldHVybiBmdW5jdGlvbiB2YWx1ZVJlZigpIHtyZXR1cm4gdmFsdWU7fTt9XG5cbmZ1bmN0aW9uIGhhc0N1c3RvbVRvU3RyaW5nKG9iaikge1xuICByZXR1cm4gaXNGdW5jdGlvbihvYmoudG9TdHJpbmcpICYmIG9iai50b1N0cmluZyAhPT0gdG9TdHJpbmc7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNVbmRlZmluZWRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIHVuZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLlxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0RlZmluZWRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc09iamVjdFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYE9iamVjdGAuIFVubGlrZSBgdHlwZW9mYCBpbiBKYXZhU2NyaXB0LCBgbnVsbGBzIGFyZSBub3RcbiAqIGNvbnNpZGVyZWQgdG8gYmUgb2JqZWN0cy4gTm90ZSB0aGF0IEphdmFTY3JpcHQgYXJyYXlzIGFyZSBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCBidXQgbm90IGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vaXNvYmplY3Q0XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYSBudWxsIHByb3RvdHlwZVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYE9iamVjdGAgd2l0aCBhIG51bGwgcHJvdG90eXBlXG4gKi9cbmZ1bmN0aW9uIGlzQmxhbmtPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIWdldFByb3RvdHlwZU9mKHZhbHVlKTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc1N0cmluZ1xuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgU3RyaW5nYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgU3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNOdW1iZXJcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYE51bWJlcmAuXG4gKlxuICogVGhpcyBpbmNsdWRlcyB0aGUgXCJzcGVjaWFsXCIgbnVtYmVycyBgTmFOYCwgYCtJbmZpbml0eWAgYW5kIGAtSW5maW5pdHlgLlxuICpcbiAqIElmIHlvdSB3aXNoIHRvIGV4Y2x1ZGUgdGhlc2UgdGhlbiB5b3UgY2FuIHVzZSB0aGUgbmF0aXZlXG4gKiBbYGlzRmluaXRlJ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvaXNGaW5pdGUpXG4gKiBtZXRob2QuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYE51bWJlcmAuXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGF0ZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIGRhdGUuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYERhdGVgLlxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNBcnJheVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEFycmF5YC4gQWxpYXMgb2YgQXJyYXkuaXNBcnJheS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYEFycmF5YC5cbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0Z1bmN0aW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBGdW5jdGlvbmAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYEZ1bmN0aW9uYC5cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7fVxuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFJlZ0V4cGAuXG4gKi9cbmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGBvYmpgIGlzIGEgd2luZG93IG9iai5cbiAqL1xuZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLndpbmRvdyA9PT0gb2JqO1xufVxuXG5cbmZ1bmN0aW9uIGlzU2NvcGUob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDtcbn1cblxuXG5mdW5jdGlvbiBpc0ZpbGUob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGb3JtRGF0YV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzQmxvYihvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG59XG5cblxuZnVuY3Rpb24gaXNQcm9taXNlTGlrZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBpc0Z1bmN0aW9uKG9iai50aGVuKTtcbn1cblxuXG52YXIgVFlQRURfQVJSQVlfUkVHRVhQID0gL15cXFtvYmplY3QgKD86VWludDh8VWludDhDbGFtcGVkfFVpbnQxNnxVaW50MzJ8SW50OHxJbnQxNnxJbnQzMnxGbG9hdDMyfEZsb2F0NjQpQXJyYXldJC87XG5mdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIGlzTnVtYmVyKHZhbHVlLmxlbmd0aCkgJiYgVFlQRURfQVJSQVlfUkVHRVhQLnRlc3QodG9TdHJpbmcuY2FsbCh2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG5cbnZhciB0cmltID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufTtcblxuLy8gQ29waWVkIGZyb206XG4vLyBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2xvY2FsX2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmUxMDIxXG4vLyBQcmVyZXE6IHMgaXMgYSBzdHJpbmcuXG52YXIgZXNjYXBlRm9yUmVnZXhwID0gZnVuY3Rpb24ocykge1xuICByZXR1cm4gc1xuICAgIC5yZXBsYWNlKC8oWy0oKVtcXF17fSs/Ki4kXnwsOiM8IVxcXFxdKS9nLCAnXFxcXCQxJylcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIC5yZXBsYWNlKC9cXHgwOC9nLCAnXFxcXHgwOCcpO1xufTtcblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0VsZW1lbnRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cbiAqL1xuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuICEhKG5vZGUgJiZcbiAgICAobm9kZS5ub2RlTmFtZSAgLy8gV2UgYXJlIGEgZGlyZWN0IGVsZW1lbnQuXG4gICAgfHwgKG5vZGUucHJvcCAmJiBub2RlLmF0dHIgJiYgbm9kZS5maW5kKSkpOyAgLy8gV2UgaGF2ZSBhbiBvbiBhbmQgZmluZCBtZXRob2QgcGFydCBvZiBqUXVlcnkgQVBJLlxufVxuXG4vKipcbiAqIEBwYXJhbSBzdHIgJ2tleTEsa2V5MiwuLi4nXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBpbiB0aGUgZm9ybSBvZiB7a2V5MTp0cnVlLCBrZXkyOnRydWUsIC4uLn1cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcChzdHIpIHtcbiAgdmFyIG9iaiA9IHt9LCBpdGVtcyA9IHN0ci5zcGxpdCgnLCcpLCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICBvYmpbaXRlbXNbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lXyhlbGVtZW50KSB7XG4gIHJldHVybiBsb3dlcmNhc2UoZWxlbWVudC5ub2RlTmFtZSB8fCAoZWxlbWVudFswXSAmJiBlbGVtZW50WzBdLm5vZGVOYW1lKSk7XG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBvYmopIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJyYXksIG9iaikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBhcnJheVJlbW92ZShhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZih2YWx1ZSk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmNvcHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgLCB3aGljaCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGFuIGFycmF5LlxuICpcbiAqICogSWYgbm8gZGVzdGluYXRpb24gaXMgc3VwcGxpZWQsIGEgY29weSBvZiB0aGUgb2JqZWN0IG9yIGFycmF5IGlzIGNyZWF0ZWQuXG4gKiAqIElmIGEgZGVzdGluYXRpb24gaXMgcHJvdmlkZWQsIGFsbCBvZiBpdHMgZWxlbWVudHMgKGZvciBhcnJheXMpIG9yIHByb3BlcnRpZXMgKGZvciBvYmplY3RzKVxuICogICBhcmUgZGVsZXRlZCBhbmQgdGhlbiBhbGwgZWxlbWVudHMvcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgYXJlIGNvcGllZCB0byBpdC5cbiAqICogSWYgYHNvdXJjZWAgaXMgbm90IGFuIG9iamVjdCBvciBhcnJheSAoaW5jLiBgbnVsbGAgYW5kIGB1bmRlZmluZWRgKSwgYHNvdXJjZWAgaXMgcmV0dXJuZWQuXG4gKiAqIElmIGBzb3VyY2VgIGlzIGlkZW50aWNhbCB0byBgZGVzdGluYXRpb25gIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cbiAqXG4gKiA8YnIgLz5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAgIE9ubHkgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZSB0YWtlbiBpbnRvIGFjY291bnQuIE5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgKGJvdGggb24gYHNvdXJjZWBcbiAqICAgYW5kIG9uIGBkZXN0aW5hdGlvbmApIHdpbGwgYmUgaWdub3JlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7Kn0gc291cmNlIFRoZSBzb3VyY2UgdGhhdCB3aWxsIGJlIHVzZWQgdG8gbWFrZSBhIGNvcHkuXG4gKiAgICAgICAgICAgICAgICAgICBDYW4gYmUgYW55IHR5cGUsIGluY2x1ZGluZyBwcmltaXRpdmVzLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYC5cbiAqIEBwYXJhbSB7KE9iamVjdHxBcnJheSk9fSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbiBpbnRvIHdoaWNoIHRoZSBzb3VyY2UgaXMgY29waWVkLiBJZlxuICogICAgIHByb3ZpZGVkLCBtdXN0IGJlIG9mIHRoZSBzYW1lIHR5cGUgYXMgYHNvdXJjZWAuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIGNvcHkgb3IgdXBkYXRlZCBgZGVzdGluYXRpb25gLCBpZiBgZGVzdGluYXRpb25gIHdhcyBzcGVjaWZpZWQuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwiY29weUV4YW1wbGVcIiBuYW1lPVwiYW5ndWxhci1jb3B5XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5vdmFsaWRhdGUgY2xhc3M9XCJzaW1wbGUtZm9ybVwiPlxuICAgICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiIC8+PC9sYWJlbD48YnIgLz5cbiAgICAgICAgICA8bGFiZWw+QWdlOiAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInVzZXIuYWdlXCIgLz48L2xhYmVsPjxiciAvPlxuICAgICAgICAgIEdlbmRlcjogPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJtYWxlXCIgLz5tYWxlPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJ1c2VyLmdlbmRlclwiIHZhbHVlPVwiZmVtYWxlXCIgLz5mZW1hbGU8L2xhYmVsPjxiciAvPlxuICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJyZXNldCgpXCI+UkVTRVQ8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXBkYXRlKHVzZXIpXCI+U0FWRTwvYnV0dG9uPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+Zm9ybSA9IHt7dXNlciB8IGpzb259fTwvcHJlPlxuICAgICAgICA8cHJlPm1hc3RlciA9IHt7bWFzdGVyIHwganNvbn19PC9wcmU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgLy8gTW9kdWxlOiBjb3B5RXhhbXBsZVxuICAgICAgYW5ndWxhci5cbiAgICAgICAgbW9kdWxlKCdjb3B5RXhhbXBsZScsIFtdKS5cbiAgICAgICAgY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5tYXN0ZXIgPSB7fTtcblxuICAgICAgICAgICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gRXhhbXBsZSB3aXRoIDEgYXJndW1lbnRcbiAgICAgICAgICAgICRzY29wZS51c2VyID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgLy8gRXhhbXBsZSB3aXRoIDIgYXJndW1lbnRzXG4gICAgICAgICAgICBhbmd1bGFyLmNvcHkodXNlciwgJHNjb3BlLm1hc3Rlcik7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgICRzY29wZS5yZXNldCgpO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGNvcHkoc291cmNlLCBkZXN0aW5hdGlvbiwgbWF4RGVwdGgpIHtcbiAgdmFyIHN0YWNrU291cmNlID0gW107XG4gIHZhciBzdGFja0Rlc3QgPSBbXTtcbiAgbWF4RGVwdGggPSBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgobWF4RGVwdGgpID8gbWF4RGVwdGggOiBOYU47XG5cbiAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgaWYgKGlzVHlwZWRBcnJheShkZXN0aW5hdGlvbikgfHwgaXNBcnJheUJ1ZmZlcihkZXN0aW5hdGlvbikpIHtcbiAgICAgIHRocm93IG5nTWluRXJyKCdjcHRhJywgJ0NhblxcJ3QgY29weSEgVHlwZWRBcnJheSBkZXN0aW5hdGlvbiBjYW5ub3QgYmUgbXV0YXRlZC4nKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZSA9PT0gZGVzdGluYXRpb24pIHtcbiAgICAgIHRocm93IG5nTWluRXJyKCdjcGknLCAnQ2FuXFwndCBjb3B5ISBTb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGFyZSBpZGVudGljYWwuJyk7XG4gICAgfVxuXG4gICAgLy8gRW1wdHkgdGhlIGRlc3RpbmF0aW9uIG9iamVjdFxuICAgIGlmIChpc0FycmF5KGRlc3RpbmF0aW9uKSkge1xuICAgICAgZGVzdGluYXRpb24ubGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaChkZXN0aW5hdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoa2V5ICE9PSAnJCRoYXNoS2V5Jykge1xuICAgICAgICAgIGRlbGV0ZSBkZXN0aW5hdGlvbltrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgc3RhY2tEZXN0LnB1c2goZGVzdGluYXRpb24pO1xuICAgIHJldHVybiBjb3B5UmVjdXJzZShzb3VyY2UsIGRlc3RpbmF0aW9uLCBtYXhEZXB0aCk7XG4gIH1cblxuICByZXR1cm4gY29weUVsZW1lbnQoc291cmNlLCBtYXhEZXB0aCk7XG5cbiAgZnVuY3Rpb24gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbiwgbWF4RGVwdGgpIHtcbiAgICBtYXhEZXB0aC0tO1xuICAgIGlmIChtYXhEZXB0aCA8IDApIHtcbiAgICAgIHJldHVybiAnLi4uJztcbiAgICB9XG4gICAgdmFyIGggPSBkZXN0aW5hdGlvbi4kJGhhc2hLZXk7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzb3VyY2UubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGNvcHlFbGVtZW50KHNvdXJjZVtpXSwgbWF4RGVwdGgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQmxhbmtPYmplY3Qoc291cmNlKSkge1xuICAgICAgLy8gY3JlYXRlTWFwKCkgZmFzdCBwYXRoIC0tLSBTYWZlIHRvIGF2b2lkIGhhc093blByb3BlcnR5IGNoZWNrIGJlY2F1c2UgcHJvdG90eXBlIGNoYWluIGlzIGVtcHR5XG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHlFbGVtZW50KHNvdXJjZVtrZXldLCBtYXhEZXB0aCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzb3VyY2UgJiYgdHlwZW9mIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gU2xvdyBwYXRoLCB3aGljaCBtdXN0IHJlbHkgb24gaGFzT3duUHJvcGVydHlcbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0sIG1heERlcHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTbG93ZXN0IHBhdGggLS0tIGhhc093blByb3BlcnR5IGNhbid0IGJlIGNhbGxlZCBhcyBhIG1ldGhvZFxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSwgbWF4RGVwdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNldEhhc2hLZXkoZGVzdGluYXRpb24sIGgpO1xuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHlFbGVtZW50KHNvdXJjZSwgbWF4RGVwdGgpIHtcbiAgICAvLyBTaW1wbGUgdmFsdWVzXG4gICAgaWYgKCFpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cblxuICAgIC8vIEFscmVhZHkgY29waWVkIHZhbHVlc1xuICAgIHZhciBpbmRleCA9IHN0YWNrU291cmNlLmluZGV4T2Yoc291cmNlKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gc3RhY2tEZXN0W2luZGV4XTtcbiAgICB9XG5cbiAgICBpZiAoaXNXaW5kb3coc291cmNlKSB8fCBpc1Njb3BlKHNvdXJjZSkpIHtcbiAgICAgIHRocm93IG5nTWluRXJyKCdjcHdzJyxcbiAgICAgICAgJ0NhblxcJ3QgY29weSEgTWFraW5nIGNvcGllcyBvZiBXaW5kb3cgb3IgU2NvcGUgaW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIG5lZWRzUmVjdXJzZSA9IGZhbHNlO1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IGNvcHlUeXBlKHNvdXJjZSk7XG5cbiAgICBpZiAoZGVzdGluYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVzdGluYXRpb24gPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IE9iamVjdC5jcmVhdGUoZ2V0UHJvdG90eXBlT2Yoc291cmNlKSk7XG4gICAgICBuZWVkc1JlY3Vyc2UgPSB0cnVlO1xuICAgIH1cblxuICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTtcbiAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG5cbiAgICByZXR1cm4gbmVlZHNSZWN1cnNlXG4gICAgICA/IGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24sIG1heERlcHRoKVxuICAgICAgOiBkZXN0aW5hdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHlUeXBlKHNvdXJjZSkge1xuICAgIHN3aXRjaCAodG9TdHJpbmcuY2FsbChzb3VyY2UpKSB7XG4gICAgICBjYXNlICdbb2JqZWN0IEludDhBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBJbnQxNkFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEludDMyQXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgRmxvYXQzMkFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBVaW50OEFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFVpbnQxNkFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFVpbnQzMkFycmF5XSc6XG4gICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKGNvcHlFbGVtZW50KHNvdXJjZS5idWZmZXIpLCBzb3VyY2UuYnl0ZU9mZnNldCwgc291cmNlLmxlbmd0aCk7XG5cbiAgICAgIGNhc2UgJ1tvYmplY3QgQXJyYXlCdWZmZXJdJzpcbiAgICAgICAgLy8gU3VwcG9ydDogSUUxMFxuICAgICAgICBpZiAoIXNvdXJjZS5zbGljZSkge1xuICAgICAgICAgIC8vIElmIHdlJ3JlIGluIHRoaXMgY2FzZSB3ZSBrbm93IHRoZSBlbnZpcm9ubWVudCBzdXBwb3J0cyBBcnJheUJ1ZmZlclxuICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4gICAgICAgICAgdmFyIGNvcGllZCA9IG5ldyBBcnJheUJ1ZmZlcihzb3VyY2UuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoY29waWVkKS5zZXQobmV3IFVpbnQ4QXJyYXkoc291cmNlKSk7XG4gICAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgICAgICAgIHJldHVybiBjb3BpZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgwKTtcblxuICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgICByZXR1cm4gbmV3IHNvdXJjZS5jb25zdHJ1Y3Rvcihzb3VyY2UudmFsdWVPZigpKTtcblxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChzb3VyY2Uuc291cmNlLCBzb3VyY2UudG9TdHJpbmcoKS5tYXRjaCgvW14vXSokLylbMF0pO1xuICAgICAgICByZS5sYXN0SW5kZXggPSBzb3VyY2UubGFzdEluZGV4O1xuICAgICAgICByZXR1cm4gcmU7XG5cbiAgICAgIGNhc2UgJ1tvYmplY3QgQmxvYl0nOlxuICAgICAgICByZXR1cm4gbmV3IHNvdXJjZS5jb25zdHJ1Y3Rvcihbc291cmNlXSwge3R5cGU6IHNvdXJjZS50eXBlfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oc291cmNlLmNsb25lTm9kZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2UuY2xvbmVOb2RlKHRydWUpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbmZ1bmN0aW9uIHNpbXBsZUNvbXBhcmUoYSwgYikgeyByZXR1cm4gYSA9PT0gYiB8fCAoYSAhPT0gYSAmJiBiICE9PSBiKTsgfVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmVxdWFsc1xuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgdHdvIG9iamVjdHMgb3IgdHdvIHZhbHVlcyBhcmUgZXF1aXZhbGVudC4gU3VwcG9ydHMgdmFsdWUgdHlwZXMsIHJlZ3VsYXJcbiAqIGV4cHJlc3Npb25zLCBhcnJheXMgYW5kIG9iamVjdHMuXG4gKlxuICogVHdvIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZTpcbiAqXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgcGFzcyBgPT09YCBjb21wYXJpc29uLlxuICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBvZiB0aGUgc2FtZSB0eXBlIGFuZCBhbGwgb2YgdGhlaXIgcHJvcGVydGllcyBhcmUgZXF1YWwgYnlcbiAqICAgY29tcGFyaW5nIHRoZW0gd2l0aCBgYW5ndWxhci5lcXVhbHNgLlxuICogKiBCb3RoIHZhbHVlcyBhcmUgTmFOLiAoSW4gSmF2YVNjcmlwdCwgTmFOID09IE5hTiA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byBOYU4gYXMgZXF1YWwpXG4gKiAqIEJvdGggdmFsdWVzIHJlcHJlc2VudCB0aGUgc2FtZSByZWd1bGFyIGV4cHJlc3Npb24gKEluIEphdmFTY3JpcHQsXG4gKiAgIC9hYmMvID09IC9hYmMvID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXMgZXF1YWwgd2hlbiB0aGVpciB0ZXh0dWFsXG4gKiAgIHJlcHJlc2VudGF0aW9uIG1hdGNoZXMpLlxuICpcbiAqIER1cmluZyBhIHByb3BlcnR5IGNvbXBhcmlzb24sIHByb3BlcnRpZXMgb2YgYGZ1bmN0aW9uYCB0eXBlIGFuZCBwcm9wZXJ0aWVzIHdpdGggbmFtZXNcbiAqIHRoYXQgYmVnaW4gd2l0aCBgJGAgYXJlIGlnbm9yZWQuXG4gKlxuICogU2NvcGUgYW5kIERPTVdpbmRvdyBvYmplY3RzIGFyZSBiZWluZyBjb21wYXJlZCBvbmx5IGJ5IGlkZW50aWZ5IChgPT09YCkuXG4gKlxuICogQHBhcmFtIHsqfSBvMSBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gbzIgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhcmd1bWVudHMgYXJlIGVxdWFsLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJlcXVhbHNFeGFtcGxlXCIgbmFtZT1cImVxdWFsc0V4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5vdmFsaWRhdGU+XG4gICAgICAgICAgPGgzPlVzZXIgMTwvaDM+XG4gICAgICAgICAgTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyMS5uYW1lXCI+XG4gICAgICAgICAgQWdlOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwidXNlcjEuYWdlXCI+XG5cbiAgICAgICAgICA8aDM+VXNlciAyPC9oMz5cbiAgICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIyLm5hbWVcIj5cbiAgICAgICAgICBBZ2U6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ1c2VyMi5hZ2VcIj5cblxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIkNvbXBhcmVcIiBuZy1jbGljaz1cImNvbXBhcmUoKVwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFVzZXIgMTogPHByZT57e3VzZXIxIHwganNvbn19PC9wcmU+XG4gICAgICAgICAgVXNlciAyOiA8cHJlPnt7dXNlcjIgfCBqc29ufX08L3ByZT5cbiAgICAgICAgICBFcXVhbDogPHByZT57e3Jlc3VsdH19PC9wcmU+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdlcXVhbHNFeGFtcGxlJywgW10pLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudXNlcjEgPSB7fTtcbiAgICAgICAgICAkc2NvcGUudXNlcjIgPSB7fTtcbiAgICAgICAgICAkc2NvcGUuY29tcGFyZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnJlc3VsdCA9IGFuZ3VsYXIuZXF1YWxzKCRzY29wZS51c2VyMSwgJHNjb3BlLnVzZXIyKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGVxdWFscyhvMSwgbzIpIHtcbiAgaWYgKG8xID09PSBvMikgcmV0dXJuIHRydWU7XG4gIGlmIChvMSA9PT0gbnVsbCB8fCBvMiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChvMSAhPT0gbzEgJiYgbzIgIT09IG8yKSByZXR1cm4gdHJ1ZTsgLy8gTmFOID09PSBOYU5cbiAgdmFyIHQxID0gdHlwZW9mIG8xLCB0MiA9IHR5cGVvZiBvMiwgbGVuZ3RoLCBrZXksIGtleVNldDtcbiAgaWYgKHQxID09PSB0MiAmJiB0MSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoaXNBcnJheShvMSkpIHtcbiAgICAgIGlmICghaXNBcnJheShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICgobGVuZ3RoID0gbzEubGVuZ3RoKSA9PT0gbzIubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoa2V5ID0gMDsga2V5IDwgbGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RhdGUobzEpKSB7XG4gICAgICBpZiAoIWlzRGF0ZShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBzaW1wbGVDb21wYXJlKG8xLmdldFRpbWUoKSwgbzIuZ2V0VGltZSgpKTtcbiAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKG8xKSkge1xuICAgICAgaWYgKCFpc1JlZ0V4cChvMikpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBvMS50b1N0cmluZygpID09PSBvMi50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNTY29wZShvMSkgfHwgaXNTY29wZShvMikgfHwgaXNXaW5kb3cobzEpIHx8IGlzV2luZG93KG8yKSB8fFxuICAgICAgICBpc0FycmF5KG8yKSB8fCBpc0RhdGUobzIpIHx8IGlzUmVnRXhwKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAga2V5U2V0ID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3IgKGtleSBpbiBvMSkge1xuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnIHx8IGlzRnVuY3Rpb24obzFba2V5XSkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBrZXlTZXRba2V5XSA9IHRydWU7XG4gICAgICB9XG4gICAgICBmb3IgKGtleSBpbiBvMikge1xuICAgICAgICBpZiAoIShrZXkgaW4ga2V5U2V0KSAmJlxuICAgICAgICAgICAga2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmXG4gICAgICAgICAgICBpc0RlZmluZWQobzJba2V5XSkgJiZcbiAgICAgICAgICAgICFpc0Z1bmN0aW9uKG8yW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgY3NwID0gZnVuY3Rpb24oKSB7XG4gIGlmICghaXNEZWZpbmVkKGNzcC5ydWxlcykpIHtcblxuXG4gICAgdmFyIG5nQ3NwRWxlbWVudCA9ICh3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW25nLWNzcF0nKSB8fFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbmctY3NwXScpKTtcblxuICAgIGlmIChuZ0NzcEVsZW1lbnQpIHtcbiAgICAgIHZhciBuZ0NzcEF0dHJpYnV0ZSA9IG5nQ3NwRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ25nLWNzcCcpIHx8XG4gICAgICAgICAgICAgICAgICAgIG5nQ3NwRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmctY3NwJyk7XG4gICAgICBjc3AucnVsZXMgPSB7XG4gICAgICAgIG5vVW5zYWZlRXZhbDogIW5nQ3NwQXR0cmlidXRlIHx8IChuZ0NzcEF0dHJpYnV0ZS5pbmRleE9mKCduby11bnNhZmUtZXZhbCcpICE9PSAtMSksXG4gICAgICAgIG5vSW5saW5lU3R5bGU6ICFuZ0NzcEF0dHJpYnV0ZSB8fCAobmdDc3BBdHRyaWJ1dGUuaW5kZXhPZignbm8taW5saW5lLXN0eWxlJykgIT09IC0xKVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NwLnJ1bGVzID0ge1xuICAgICAgICBub1Vuc2FmZUV2YWw6IG5vVW5zYWZlRXZhbCgpLFxuICAgICAgICBub0lubGluZVN0eWxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3NwLnJ1bGVzO1xuXG4gIGZ1bmN0aW9uIG5vVW5zYWZlRXZhbCgpIHtcbiAgICB0cnkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldywgbm8tbmV3LWZ1bmNcbiAgICAgIG5ldyBGdW5jdGlvbignJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBtb2R1bGUgbmdcbiAqIEBuYW1lIG5nSnFcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdKcSB0aGUgbmFtZSBvZiB0aGUgbGlicmFyeSBhdmFpbGFibGUgdW5kZXIgYHdpbmRvd2BcbiAqIHRvIGJlIHVzZWQgZm9yIGFuZ3VsYXIuZWxlbWVudFxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gZm9yY2UgdGhlIGFuZ3VsYXIuZWxlbWVudCBsaWJyYXJ5LiAgVGhpcyBzaG91bGQgYmVcbiAqIHVzZWQgdG8gZm9yY2UgZWl0aGVyIGpxTGl0ZSBieSBsZWF2aW5nIG5nLWpxIGJsYW5rIG9yIHNldHRpbmcgdGhlIG5hbWUgb2ZcbiAqIHRoZSBqcXVlcnkgdmFyaWFibGUgdW5kZXIgd2luZG93IChlZy4galF1ZXJ5KS5cbiAqXG4gKiBTaW5jZSBhbmd1bGFyIGxvb2tzIGZvciB0aGlzIGRpcmVjdGl2ZSB3aGVuIGl0IGlzIGxvYWRlZCAoZG9lc24ndCB3YWl0IGZvciB0aGVcbiAqIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQpLCBpdCBtdXN0IGJlIHBsYWNlZCBvbiBhbiBlbGVtZW50IHRoYXQgY29tZXMgYmVmb3JlIHRoZSBzY3JpcHRcbiAqIHdoaWNoIGxvYWRzIGFuZ3VsYXIuIEFsc28sIG9ubHkgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGBuZy1qcWAgd2lsbCBiZSB1c2VkIGFuZCBhbGxcbiAqIG90aGVycyBpZ25vcmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIGZvcmNlIGpxTGl0ZSB1c2luZyB0aGUgYG5nSnFgIGRpcmVjdGl2ZSB0byB0aGUgYGh0bWxgIHRhZy5cbiBgYGBodG1sXG4gPCFkb2N0eXBlIGh0bWw+XG4gPGh0bWwgbmctYXBwIG5nLWpxPlxuIC4uLlxuIC4uLlxuIDwvaHRtbD5cbiBgYGBcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBhIGpRdWVyeSBiYXNlZCBsaWJyYXJ5IG9mIGEgZGlmZmVyZW50IG5hbWUuXG4gKiBUaGUgbGlicmFyeSBuYW1lIG11c3QgYmUgYXZhaWxhYmxlIGF0IHRoZSB0b3AgbW9zdCAnd2luZG93Jy5cbiBgYGBodG1sXG4gPCFkb2N0eXBlIGh0bWw+XG4gPGh0bWwgbmctYXBwIG5nLWpxPVwialF1ZXJ5TGliXCI+XG4gLi4uXG4gLi4uXG4gPC9odG1sPlxuIGBgYFxuICovXG52YXIganEgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGlzRGVmaW5lZChqcS5uYW1lXykpIHJldHVybiBqcS5uYW1lXztcbiAgdmFyIGVsO1xuICB2YXIgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGgsIHByZWZpeCwgbmFtZTtcbiAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICBwcmVmaXggPSBuZ0F0dHJQcmVmaXhlc1tpXTtcbiAgICBlbCA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIHByZWZpeC5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnanFdJyk7XG4gICAgaWYgKGVsKSB7XG4gICAgICBuYW1lID0gZWwuZ2V0QXR0cmlidXRlKHByZWZpeCArICdqcScpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChqcS5uYW1lXyA9IG5hbWUpO1xufTtcblxuZnVuY3Rpb24gY29uY2F0KGFycmF5MSwgYXJyYXkyLCBpbmRleCkge1xuICByZXR1cm4gYXJyYXkxLmNvbmNhdChzbGljZS5jYWxsKGFycmF5MiwgaW5kZXgpKTtcbn1cblxuZnVuY3Rpb24gc2xpY2VBcmdzKGFyZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgcmV0dXJuIHNsaWNlLmNhbGwoYXJncywgc3RhcnRJbmRleCB8fCAwKTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5iaW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGZ1bmN0aW9uIGBmbmAgYm91bmQgdG8gYHNlbGZgIChgc2VsZmAgYmVjb21lcyB0aGUgYHRoaXNgIGZvclxuICogYGZuYCkuIFlvdSBjYW4gc3VwcGx5IG9wdGlvbmFsIGBhcmdzYCB0aGF0IGFyZSBwcmVib3VuZCB0byB0aGUgZnVuY3Rpb24uIFRoaXMgZmVhdHVyZSBpcyBhbHNvXG4gKiBrbm93biBhcyBbcGFydGlhbCBhcHBsaWNhdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXJ0aWFsX2FwcGxpY2F0aW9uKSwgYXNcbiAqIGRpc3Rpbmd1aXNoZWQgZnJvbSBbZnVuY3Rpb24gY3VycnlpbmddKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VycnlpbmcjQ29udHJhc3Rfd2l0aF9wYXJ0aWFsX2Z1bmN0aW9uX2FwcGxpY2F0aW9uKS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2VsZiBDb250ZXh0IHdoaWNoIGBmbmAgc2hvdWxkIGJlIGV2YWx1YXRlZCBpbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRnVuY3Rpb24gdG8gYmUgYm91bmQuXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHByZWJvdW5kIHRvIHRoZSBgZm5gIGZ1bmN0aW9uIGNhbGwuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gRnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgYGZuYCB3aXRoIGFsbCB0aGUgc3BlY2lmaWVkIGJpbmRpbmdzLlxuICovXG5mdW5jdGlvbiBiaW5kKHNlbGYsIGZuKSB7XG4gIHZhciBjdXJyeUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDIpIDogW107XG4gIGlmIChpc0Z1bmN0aW9uKGZuKSAmJiAhKGZuIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgIHJldHVybiBjdXJyeUFyZ3MubGVuZ3RoXG4gICAgICA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGNvbmNhdChjdXJyeUFyZ3MsIGFyZ3VtZW50cywgMCkpXG4gICAgICAgICAgICA6IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncyk7XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxuICAgICAgICAgICAgOiBmbi5jYWxsKHNlbGYpO1xuICAgICAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIEluIElFLCBuYXRpdmUgbWV0aG9kcyBhcmUgbm90IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbm5vdCBiZSBib3VuZCAobm90ZTogdGhleSBkb24ndCBuZWVkIHRvIGJlKS5cbiAgICByZXR1cm4gZm47XG4gIH1cbn1cblxuXG5mdW5jdGlvbiB0b0pzb25SZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gIHZhciB2YWwgPSB2YWx1ZTtcblxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykge1xuICAgIHZhbCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChpc1dpbmRvdyh2YWx1ZSkpIHtcbiAgICB2YWwgPSAnJFdJTkRPVyc7XG4gIH0gZWxzZSBpZiAodmFsdWUgJiYgIHdpbmRvdy5kb2N1bWVudCA9PT0gdmFsdWUpIHtcbiAgICB2YWwgPSAnJERPQ1VNRU5UJztcbiAgfSBlbHNlIGlmIChpc1Njb3BlKHZhbHVlKSkge1xuICAgIHZhbCA9ICckU0NPUEUnO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci50b0pzb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuIFByb3BlcnRpZXMgd2l0aCBsZWFkaW5nICQkIGNoYXJhY3RlcnMgd2lsbCBiZVxuICogc3RyaXBwZWQgc2luY2UgYW5ndWxhciB1c2VzIHRoaXMgbm90YXRpb24gaW50ZXJuYWxseS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gb2JqIElucHV0IHRvIGJlIHNlcmlhbGl6ZWQgaW50byBKU09OLlxuICogQHBhcmFtIHtib29sZWFufG51bWJlcn0gW3ByZXR0eT0yXSBJZiBzZXQgdG8gdHJ1ZSwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiBuZXdsaW5lcyBhbmQgd2hpdGVzcGFjZS5cbiAqICAgIElmIHNldCB0byBhbiBpbnRlZ2VyLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIHRoYXQgbWFueSBzcGFjZXMgcGVyIGluZGVudGF0aW9uLlxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IEpTT04taWZpZWQgc3RyaW5nIHJlcHJlc2VudGluZyBgb2JqYC5cbiAqIEBrbm93bklzc3VlXG4gKlxuICogVGhlIFNhZmFyaSBicm93c2VyIHRocm93cyBhIGBSYW5nZUVycm9yYCBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAgd2hlbiBpdCB0cmllcyB0byBzdHJpbmdpZnkgYSBgRGF0ZWBcbiAqIG9iamVjdCB3aXRoIGFuIGludmFsaWQgZGF0ZSB2YWx1ZS4gVGhlIG9ubHkgcmVsaWFibGUgd2F5IHRvIHByZXZlbnQgdGhpcyBpcyB0byBtb25rZXlwYXRjaCB0aGVcbiAqIGBEYXRlLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZCBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYFxuICogdmFyIF9EYXRldG9KU09OID0gRGF0ZS5wcm90b3R5cGUudG9KU09OO1xuICogRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gKiAgIHRyeSB7XG4gKiAgICAgcmV0dXJuIF9EYXRldG9KU09OLmNhbGwodGhpcyk7XG4gKiAgIH0gY2F0Y2goZSkge1xuICogICAgIGlmIChlIGluc3RhbmNlb2YgUmFuZ2VFcnJvcikge1xuICogICAgICAgcmV0dXJuIG51bGw7XG4gKiAgICAgfVxuICogICAgIHRocm93IGU7XG4gKiAgIH1cbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE0MjIxIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICovXG5mdW5jdGlvbiB0b0pzb24ob2JqLCBwcmV0dHkpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKG9iaikpIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmICghaXNOdW1iZXIocHJldHR5KSkge1xuICAgIHByZXR0eSA9IHByZXR0eSA/IDIgOiBudWxsO1xuICB9XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIHRvSnNvblJlcGxhY2VyLCBwcmV0dHkpO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmZyb21Kc29uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGVzZXJpYWxpemVzIGEgSlNPTiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGpzb24gSlNPTiBzdHJpbmcgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fHN0cmluZ3xudW1iZXJ9IERlc2VyaWFsaXplZCBKU09OIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZnJvbUpzb24oanNvbikge1xuICByZXR1cm4gaXNTdHJpbmcoanNvbilcbiAgICAgID8gSlNPTi5wYXJzZShqc29uKVxuICAgICAgOiBqc29uO1xufVxuXG5cbnZhciBBTExfQ09MT05TID0gLzovZztcbmZ1bmN0aW9uIHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGZhbGxiYWNrKSB7XG4gIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seSwgRWRnZSAxMy0xNCtcbiAgLy8gSUUvRWRnZSBkbyBub3QgXCJ1bmRlcnN0YW5kXCIgY29sb24gKGA6YCkgaW4gdGltZXpvbmVcbiAgdGltZXpvbmUgPSB0aW1lem9uZS5yZXBsYWNlKEFMTF9DT0xPTlMsICcnKTtcbiAgdmFyIHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0ID0gRGF0ZS5wYXJzZSgnSmFuIDAxLCAxOTcwIDAwOjAwOjAwICcgKyB0aW1lem9uZSkgLyA2MDAwMDtcbiAgcmV0dXJuIGlzTnVtYmVyTmFOKHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0KSA/IGZhbGxiYWNrIDogcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgbWludXRlcykge1xuICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgKyBtaW51dGVzKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cblxuZnVuY3Rpb24gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgcmV2ZXJzZSkge1xuICByZXZlcnNlID0gcmV2ZXJzZSA/IC0xIDogMTtcbiAgdmFyIGRhdGVUaW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZVRpbWV6b25lT2Zmc2V0KTtcbiAgcmV0dXJuIGFkZERhdGVNaW51dGVzKGRhdGUsIHJldmVyc2UgKiAodGltZXpvbmVPZmZzZXQgLSBkYXRlVGltZXpvbmVPZmZzZXQpKTtcbn1cblxuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gc3RhcnRpbmdUYWcoZWxlbWVudCkge1xuICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpLmNsb25lKCk7XG4gIHRyeSB7XG4gICAgLy8gdHVybnMgb3V0IElFIGRvZXMgbm90IGxldCB5b3Ugc2V0IC5odG1sKCkgb24gZWxlbWVudHMgd2hpY2hcbiAgICAvLyBhcmUgbm90IGFsbG93ZWQgdG8gaGF2ZSBjaGlsZHJlbi4gU28gd2UganVzdCBpZ25vcmUgaXQuXG4gICAgZWxlbWVudC5lbXB0eSgpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgdmFyIGVsZW1IdG1sID0ganFMaXRlKCc8ZGl2PicpLmFwcGVuZChlbGVtZW50KS5odG1sKCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVsZW1lbnRbMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUID8gbG93ZXJjYXNlKGVsZW1IdG1sKSA6XG4gICAgICAgIGVsZW1IdG1sLlxuICAgICAgICAgIG1hdGNoKC9eKDxbXj5dKz4pLylbMV0uXG4gICAgICAgICAgcmVwbGFjZSgvXjwoW1xcdy1dKykvLCBmdW5jdGlvbihtYXRjaCwgbm9kZU5hbWUpIHtyZXR1cm4gJzwnICsgbG93ZXJjYXNlKG5vZGVOYW1lKTt9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbUh0bWwpO1xuICB9XG5cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogVHJpZXMgdG8gZGVjb2RlIHRoZSBVUkkgY29tcG9uZW50IHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gc3RyIHZhbHVlIHBvdGVudGlhbCBVUkkgY29tcG9uZW50IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBjYW4gYmUgZGVjb2RlZFxuICogd2l0aCB0aGUgZGVjb2RlVVJJQ29tcG9uZW50IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZSBhbnkgaW52YWxpZCB1cmkgY29tcG9uZW50LlxuICB9XG59XG5cblxuLyoqXG4gKiBQYXJzZXMgYW4gZXNjYXBlZCB1cmwgcXVlcnkgc3RyaW5nIGludG8ga2V5LXZhbHVlIHBhaXJzLlxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLGJvb2xlYW58QXJyYXk+fVxuICovXG5mdW5jdGlvbiBwYXJzZUtleVZhbHVlKC8qKnN0cmluZyova2V5VmFsdWUpIHtcbiAgdmFyIG9iaiA9IHt9O1xuICBmb3JFYWNoKChrZXlWYWx1ZSB8fCAnJykuc3BsaXQoJyYnKSwgZnVuY3Rpb24oa2V5VmFsdWUpIHtcbiAgICB2YXIgc3BsaXRQb2ludCwga2V5LCB2YWw7XG4gICAgaWYgKGtleVZhbHVlKSB7XG4gICAgICBrZXkgPSBrZXlWYWx1ZSA9IGtleVZhbHVlLnJlcGxhY2UoL1xcKy9nLCclMjAnKTtcbiAgICAgIHNwbGl0UG9pbnQgPSBrZXlWYWx1ZS5pbmRleE9mKCc9Jyk7XG4gICAgICBpZiAoc3BsaXRQb2ludCAhPT0gLTEpIHtcbiAgICAgICAga2V5ID0ga2V5VmFsdWUuc3Vic3RyaW5nKDAsIHNwbGl0UG9pbnQpO1xuICAgICAgICB2YWwgPSBrZXlWYWx1ZS5zdWJzdHJpbmcoc3BsaXRQb2ludCArIDEpO1xuICAgICAgfVxuICAgICAga2V5ID0gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGtleSkpIHtcbiAgICAgICAgdmFsID0gaXNEZWZpbmVkKHZhbCkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsKSA6IHRydWU7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrZXldKSkge1xuICAgICAgICAgIG9ialtrZXldLnB1c2godmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XSx2YWxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHtcbiAgdmFyIHBhcnRzID0gW107XG4gIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhcnJheVZhbHVlKSB7XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAgICAgKGFycmF5VmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KGFycmF5VmFsdWUsIHRydWUpKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAodmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KHZhbHVlLCB0cnVlKSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwYXJ0cy5sZW5ndGggPyBwYXJ0cy5qb2luKCcmJykgOiAnJztcbn1cblxuXG4vKipcbiAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93XG4gKiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCB3aXRoIHJlZ2FyZHMgdG8gdGhlIGNoYXJhY3RlciBzZXQgKHBjaGFyKSBhbGxvd2VkIGluIHBhdGhcbiAqIHNlZ21lbnRzOlxuICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhclxuICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyBcIjpcIiAvIFwiQFwiXG4gKiAgICBwY3QtZW5jb2RlZCAgID0gXCIlXCIgSEVYRElHIEhFWERJR1xuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgc3ViLWRlbGltcyAgICA9IFwiIVwiIC8gXCIkXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIoXCIgLyBcIilcIlxuICogICAgICAgICAgICAgICAgICAgICAvIFwiKlwiIC8gXCIrXCIgLyBcIixcIiAvIFwiO1wiIC8gXCI9XCJcbiAqL1xuZnVuY3Rpb24gZW5jb2RlVXJpU2VnbWVudCh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVyaVF1ZXJ5KHZhbCwgdHJ1ZSkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzRC9naSwgJz0nKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkIvZ2ksICcrJyk7XG59XG5cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZW5jb2RpbmcgKmtleSogb3IgKnZhbHVlKiBwYXJ0cyBvZiBxdWVyeSBjb21wb25lbnQuIFdlIG5lZWQgYSBjdXN0b21cbiAqIG1ldGhvZCBiZWNhdXNlIGVuY29kZVVSSUNvbXBvbmVudCBpcyB0b28gYWdncmVzc2l2ZSBhbmQgZW5jb2RlcyBzdHVmZiB0aGF0IGRvZXNuJ3QgaGF2ZSB0byBiZVxuICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjpcbiAqICAgIHF1ZXJ5ICAgICAgICAgPSAqKCBwY2hhciAvIFwiL1wiIC8gXCI/XCIgKVxuICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyBcIjpcIiAvIFwiQFwiXG4gKiAgICB1bnJlc2VydmVkICAgID0gQUxQSEEgLyBESUdJVCAvIFwiLVwiIC8gXCIuXCIgLyBcIl9cIiAvIFwiflwiXG4gKiAgICBwY3QtZW5jb2RlZCAgID0gXCIlXCIgSEVYRElHIEhFWERJR1xuICogICAgc3ViLWRlbGltcyAgICA9IFwiIVwiIC8gXCIkXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIoXCIgLyBcIilcIlxuICogICAgICAgICAgICAgICAgICAgICAvIFwiKlwiIC8gXCIrXCIgLyBcIixcIiAvIFwiO1wiIC8gXCI9XCJcbiAqL1xuZnVuY3Rpb24gZW5jb2RlVXJpUXVlcnkodmFsLCBwY3RFbmNvZGVTcGFjZXMpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzQi9naSwgJzsnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjAvZywgKHBjdEVuY29kZVNwYWNlcyA/ICclMjAnIDogJysnKSk7XG59XG5cbnZhciBuZ0F0dHJQcmVmaXhlcyA9IFsnbmctJywgJ2RhdGEtbmctJywgJ25nOicsICd4LW5nLSddO1xuXG5mdW5jdGlvbiBnZXROZ0F0dHJpYnV0ZShlbGVtZW50LCBuZ0F0dHIpIHtcbiAgdmFyIGF0dHIsIGksIGlpID0gbmdBdHRyUHJlZml4ZXMubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xuICAgIGF0dHIgPSBuZ0F0dHJQcmVmaXhlc1tpXSArIG5nQXR0cjtcbiAgICBpZiAoaXNTdHJpbmcoYXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHIpKSkge1xuICAgICAgcmV0dXJuIGF0dHI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBhbGxvd0F1dG9Cb290c3RyYXAoZG9jdW1lbnQpIHtcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQ7XG5cbiAgaWYgKCFzY3JpcHQpIHtcbiAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YFxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSWYgdGhlIGBjdXJyZW50U2NyaXB0YCBwcm9wZXJ0eSBoYXMgYmVlbiBjbG9iYmVyZWQganVzdCByZXR1cm4gZmFsc2UsIHNpbmNlIHRoaXMgaW5kaWNhdGVzIGEgcHJvYmFibGUgYXR0YWNrXG4gIGlmICghKHNjcmlwdCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MU2NyaXB0RWxlbWVudCB8fCBzY3JpcHQgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHU2NyaXB0RWxlbWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYXR0cmlidXRlcyA9IHNjcmlwdC5hdHRyaWJ1dGVzO1xuICB2YXIgc3JjcyA9IFthdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnc3JjJyksIGF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdocmVmJyksIGF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCd4bGluazpocmVmJyldO1xuXG4gIHJldHVybiBzcmNzLmV2ZXJ5KGZ1bmN0aW9uKHNyYykge1xuICAgIGlmICghc3JjKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFzcmMudmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsaW5rLmhyZWYgPSBzcmMudmFsdWU7XG5cbiAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24ub3JpZ2luID09PSBsaW5rLm9yaWdpbikge1xuICAgICAgLy8gU2FtZS1vcmlnaW4gcmVzb3VyY2VzIGFyZSBhbHdheXMgYWxsb3dlZCwgZXZlbiBmb3Igbm9uLXdoaXRlbGlzdGVkIHNjaGVtZXMuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRGlzYWJsZWQgYm9vdHN0cmFwcGluZyB1bmxlc3MgYW5ndWxhci5qcyB3YXMgbG9hZGVkIGZyb20gYSBrbm93biBzY2hlbWUgdXNlZCBvbiB0aGUgd2ViLlxuICAgIC8vIFRoaXMgaXMgdG8gcHJldmVudCBhbmd1bGFyLmpzIGJ1bmRsZWQgd2l0aCBicm93c2VyIGV4dGVuc2lvbnMgZnJvbSBiZWluZyB1c2VkIHRvIGJ5cGFzcyB0aGVcbiAgICAvLyBjb250ZW50IHNlY3VyaXR5IHBvbGljeSBpbiB3ZWIgcGFnZXMgYW5kIG90aGVyIGJyb3dzZXIgZXh0ZW5zaW9ucy5cbiAgICBzd2l0Y2ggKGxpbmsucHJvdG9jb2wpIHtcbiAgICAgIGNhc2UgJ2h0dHA6JzpcbiAgICAgIGNhc2UgJ2h0dHBzOic6XG4gICAgICBjYXNlICdmdHA6JzpcbiAgICAgIGNhc2UgJ2Jsb2I6JzpcbiAgICAgIGNhc2UgJ2ZpbGU6JzpcbiAgICAgIGNhc2UgJ2RhdGE6JzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gQ2FjaGVkIGFzIGl0IGhhcyB0byBydW4gZHVyaW5nIGxvYWRpbmcgc28gdGhhdCBkb2N1bWVudC5jdXJyZW50U2NyaXB0IGlzIGF2YWlsYWJsZS5cbnZhciBpc0F1dG9Cb290c3RyYXBBbGxvd2VkID0gYWxsb3dBdXRvQm9vdHN0cmFwKHdpbmRvdy5kb2N1bWVudCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdBcHBcbiAqIEBtb2R1bGUgbmdcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7YW5ndWxhci5Nb2R1bGV9IG5nQXBwIGFuIG9wdGlvbmFsIGFwcGxpY2F0aW9uXG4gKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlXG4gKiAgIGNyZWF0ZWQgaW4gXCJzdHJpY3QtZGlcIiBtb2RlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGFwcGxpY2F0aW9uIHdpbGwgZmFpbCB0byBpbnZva2UgZnVuY3Rpb25zIHdoaWNoXG4gKiAgIGRvIG5vdCB1c2UgZXhwbGljaXQgZnVuY3Rpb24gYW5ub3RhdGlvbiAoYW5kIGFyZSB0aHVzIHVuc3VpdGFibGUgZm9yIG1pbmlmaWNhdGlvbiksIGFzIGRlc2NyaWJlZFxuICogICBpbiB7QGxpbmsgZ3VpZGUvZGkgdGhlIERlcGVuZGVuY3kgSW5qZWN0aW9uIGd1aWRlfSwgYW5kIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mbyB3aWxsIGFzc2lzdCBpblxuICogICB0cmFja2luZyBkb3duIHRoZSByb290IG9mIHRoZXNlIGJ1Z3MuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlIHRoaXMgZGlyZWN0aXZlIHRvICoqYXV0by1ib290c3RyYXAqKiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24uIFRoZSBgbmdBcHBgIGRpcmVjdGl2ZVxuICogZGVzaWduYXRlcyB0aGUgKipyb290IGVsZW1lbnQqKiBvZiB0aGUgYXBwbGljYXRpb24gYW5kIGlzIHR5cGljYWxseSBwbGFjZWQgbmVhciB0aGUgcm9vdCBlbGVtZW50XG4gKiBvZiB0aGUgcGFnZSAtIGUuZy4gb24gdGhlIGA8Ym9keT5gIG9yIGA8aHRtbD5gIHRhZ3MuXG4gKlxuICogVGhlcmUgYXJlIGEgZmV3IHRoaW5ncyB0byBrZWVwIGluIG1pbmQgd2hlbiB1c2luZyBgbmdBcHBgOlxuICogLSBvbmx5IG9uZSBBbmd1bGFySlMgYXBwbGljYXRpb24gY2FuIGJlIGF1dG8tYm9vdHN0cmFwcGVkIHBlciBIVE1MIGRvY3VtZW50LiBUaGUgZmlyc3QgYG5nQXBwYFxuICogICBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgd2lsbCBiZSB1c2VkIHRvIGRlZmluZSB0aGUgcm9vdCBlbGVtZW50IHRvIGF1dG8tYm9vdHN0cmFwIGFzIGFuXG4gKiAgIGFwcGxpY2F0aW9uLiBUbyBydW4gbXVsdGlwbGUgYXBwbGljYXRpb25zIGluIGFuIEhUTUwgZG9jdW1lbnQgeW91IG11c3QgbWFudWFsbHkgYm9vdHN0cmFwIHRoZW0gdXNpbmdcbiAqICAge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSBpbnN0ZWFkLlxuICogLSBBbmd1bGFySlMgYXBwbGljYXRpb25zIGNhbm5vdCBiZSBuZXN0ZWQgd2l0aGluIGVhY2ggb3RoZXIuXG4gKiAtIERvIG5vdCB1c2UgYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHtAbGluayBuZy4kY29tcGlsZSN0cmFuc2NsdXNpb24gdHJhbnNjbHVzaW9ufSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIGBuZ0FwcGAuXG4gKiAgIFRoaXMgaW5jbHVkZXMgZGlyZWN0aXZlcyBzdWNoIGFzIHtAbGluayBuZy5uZ0lmIGBuZ0lmYH0sIHtAbGluayBuZy5uZ0luY2x1ZGUgYG5nSW5jbHVkZWB9IGFuZFxuICogICB7QGxpbmsgbmdSb3V0ZS5uZ1ZpZXcgYG5nVmlld2B9LlxuICogICBEb2luZyB0aGlzIG1pc3BsYWNlcyB0aGUgYXBwIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgYCRyb290RWxlbWVudGB9IGFuZCB0aGUgYXBwJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yIGluamVjdG9yfSxcbiAqICAgY2F1c2luZyBhbmltYXRpb25zIHRvIHN0b3Agd29ya2luZyBhbmQgbWFraW5nIHRoZSBpbmplY3RvciBpbmFjY2Vzc2libGUgZnJvbSBvdXRzaWRlIHRoZSBhcHAuXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IGFuICoqQW5ndWxhckpTIG1vZHVsZSoqIHRvIGJlIHVzZWQgYXMgdGhlIHJvb3QgbW9kdWxlIGZvciB0aGUgYXBwbGljYXRpb24uICBUaGlzXG4gKiBtb2R1bGUgd2lsbCBiZSBsb2FkZWQgaW50byB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yfSB3aGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBib290c3RyYXBwZWQuIEl0XG4gKiBzaG91bGQgY29udGFpbiB0aGUgYXBwbGljYXRpb24gY29kZSBuZWVkZWQgb3IgaGF2ZSBkZXBlbmRlbmNpZXMgb24gb3RoZXIgbW9kdWxlcyB0aGF0IHdpbGxcbiAqIGNvbnRhaW4gdGhlIGNvZGUuIFNlZSB7QGxpbmsgYW5ndWxhci5tb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEluIHRoZSBleGFtcGxlIGJlbG93IGlmIHRoZSBgbmdBcHBgIGRpcmVjdGl2ZSB3ZXJlIG5vdCBwbGFjZWQgb24gdGhlIGBodG1sYCBlbGVtZW50IHRoZW4gdGhlXG4gKiBkb2N1bWVudCB3b3VsZCBub3QgYmUgY29tcGlsZWQsIHRoZSBgQXBwQ29udHJvbGxlcmAgd291bGQgbm90IGJlIGluc3RhbnRpYXRlZCBhbmQgdGhlIGB7eyBhK2IgfX1gXG4gKiB3b3VsZCBub3QgYmUgcmVzb2x2ZWQgdG8gYDNgLlxuICpcbiAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3QsIGFuZCBtb3N0IGNvbW1vbiB3YXkgdG8gYm9vdHN0cmFwIGFuIGFwcGxpY2F0aW9uLlxuICpcbiA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FwcERlbW9cIiBuYW1lPVwibmctYXBwXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPGRpdiBuZy1jb250cm9sbGVyPVwibmdBcHBEZW1vQ29udHJvbGxlclwiPlxuICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG4gICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcERlbW8nLCBbXSkuY29udHJvbGxlcignbmdBcHBEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICRzY29wZS5iID0gMjtcbiAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqXG4gKiBVc2luZyBgbmdTdHJpY3REaWAsIHlvdSB3b3VsZCBzZWUgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAqXG4gPGV4YW1wbGUgbmctYXBwLWluY2x1ZGVkPVwidHJ1ZVwiIG5hbWU9XCJzdHJpY3QtZGlcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8ZGl2IG5nLWFwcD1cIm5nQXBwU3RyaWN0RGVtb1wiIG5nLXN0cmljdC1kaT5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHb29kQ29udHJvbGxlcjFcIj5cbiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuXG4gICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGUgKHNlZVxuICAgICAgICAgICAgICBzY3JpcHQuanMgZm9yIGRldGFpbHMpXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cblxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMlwiPlxuICAgICAgICAgICBOYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+PGJyIC8+XG4gICAgICAgICAgIEhlbGxvLCB7e25hbWV9fSFcblxuICAgICAgICAgICA8cD5UaGlzIHJlbmRlcnMgYmVjYXVzZSB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBmYWlsIHRvXG4gICAgICAgICAgICAgIGluc3RhbnRpYXRlLCBieSB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9uIHN0eWxlXG4gICAgICAgICAgICAgIChzZWUgc2NyaXB0LmpzIGZvciBkZXRhaWxzKVxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJCYWRDb250cm9sbGVyXCI+XG4gICAgICAgICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cblxuICAgICAgICAgICA8cD5UaGUgY29udHJvbGxlciBjb3VsZCBub3QgYmUgaW5zdGFudGlhdGVkLCBkdWUgdG8gcmVseWluZ1xuICAgICAgICAgICAgICBvbiBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbnMgKHdoaWNoIGFyZSBkaXNhYmxlZCBpblxuICAgICAgICAgICAgICBzdHJpY3QgbW9kZSkuIEFzIHN1Y2gsIHRoZSBjb250ZW50IG9mIHRoaXMgc2VjdGlvbiBpcyBub3RcbiAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkLCBhbmQgdGhlcmUgc2hvdWxkIGJlIGFuIGVycm9yIGluIHlvdXIgd2ViIGNvbnNvbGUuXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cbiAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgYW5ndWxhci5tb2R1bGUoJ25nQXBwU3RyaWN0RGVtbycsIFtdKVxuICAgICAvLyBCYWRDb250cm9sbGVyIHdpbGwgZmFpbCB0byBpbnN0YW50aWF0ZSwgZHVlIHRvIHJlbHlpbmcgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24sXG4gICAgIC8vIHJhdGhlciB0aGFuIGFuIGV4cGxpY2l0IGFubm90YXRpb25cbiAgICAgLmNvbnRyb2xsZXIoJ0JhZENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICB9KVxuICAgICAvLyBVbmxpa2UgQmFkQ29udHJvbGxlciwgR29vZENvbnRyb2xsZXIxIGFuZCBHb29kQ29udHJvbGxlcjIgd2lsbCBub3QgZmFpbCB0byBiZSBpbnN0YW50aWF0ZWQsXG4gICAgIC8vIGR1ZSB0byB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9ucyB1c2luZyB0aGUgYXJyYXkgc3R5bGUgYW5kICRpbmplY3QgcHJvcGVydHksIHJlc3BlY3RpdmVseS5cbiAgICAgLmNvbnRyb2xsZXIoJ0dvb2RDb250cm9sbGVyMScsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAgICRzY29wZS5iID0gMjtcbiAgICAgfV0pXG4gICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjInLCBHb29kQ29udHJvbGxlcjIpO1xuICAgICBmdW5jdGlvbiBHb29kQ29udHJvbGxlcjIoJHNjb3BlKSB7XG4gICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnO1xuICAgICB9XG4gICAgIEdvb2RDb250cm9sbGVyMi4kaW5qZWN0ID0gWyckc2NvcGUnXTtcbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgIGRpdltuZy1jb250cm9sbGVyXSB7XG4gICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICBib3JkZXI6IDFweCBzb2xpZDtcbiAgICAgICBwYWRkaW5nOiAuNWVtO1xuICAgfVxuICAgZGl2W25nLWNvbnRyb2xsZXJePUdvb2RdIHtcbiAgICAgICBib3JkZXItY29sb3I6ICNkNmU5YzY7XG4gICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RmZjBkODtcbiAgICAgICBjb2xvcjogIzNjNzYzZDtcbiAgIH1cbiAgIGRpdltuZy1jb250cm9sbGVyXj1CYWRdIHtcbiAgICAgICBib3JkZXItY29sb3I6ICNlYmNjZDE7XG4gICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZGVkZTtcbiAgICAgICBjb2xvcjogI2E5NDQ0MjtcbiAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgfVxuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7XG4gIHZhciBhcHBFbGVtZW50LFxuICAgICAgbW9kdWxlLFxuICAgICAgY29uZmlnID0ge307XG5cbiAgLy8gVGhlIGVsZW1lbnQgYGVsZW1lbnRgIGhhcyBwcmlvcml0eSBvdmVyIGFueSBvdGhlciBlbGVtZW50LlxuICBmb3JFYWNoKG5nQXR0clByZWZpeGVzLCBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeCArICdhcHAnO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBhcHBFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIG1vZHVsZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG4gICAgdmFyIGNhbmRpZGF0ZTtcblxuICAgIGlmICghYXBwRWxlbWVudCAmJiAoY2FuZGlkYXRlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIG5hbWUucmVwbGFjZSgnOicsICdcXFxcOicpICsgJ10nKSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBjYW5kaWRhdGU7XG4gICAgICBtb2R1bGUgPSBjYW5kaWRhdGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGlmIChhcHBFbGVtZW50KSB7XG4gICAgaWYgKCFpc0F1dG9Cb290c3RyYXBBbGxvd2VkKSB7XG4gICAgICB3aW5kb3cuY29uc29sZS5lcnJvcignQW5ndWxhcjogZGlzYWJsaW5nIGF1dG9tYXRpYyBib290c3RyYXAuIDxzY3JpcHQ+IHByb3RvY29sIGluZGljYXRlcyAnICtcbiAgICAgICAgICAnYW4gZXh0ZW5zaW9uLCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmIGRvZXMgbm90IG1hdGNoLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25maWcuc3RyaWN0RGkgPSBnZXROZ0F0dHJpYnV0ZShhcHBFbGVtZW50LCAnc3RyaWN0LWRpJykgIT09IG51bGw7XG4gICAgYm9vdHN0cmFwKGFwcEVsZW1lbnQsIG1vZHVsZSA/IFttb2R1bGVdIDogW10sIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuYm9vdHN0cmFwXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUge0BsaW5rIGd1aWRlL2Jvb3RzdHJhcCBCb290c3RyYXAgZ3VpZGV9LlxuICpcbiAqIEFuZ3VsYXIgd2lsbCBkZXRlY3QgaWYgaXQgaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIGJyb3dzZXIgbW9yZSB0aGFuIG9uY2UgYW5kIG9ubHkgYWxsb3cgdGhlXG4gKiBmaXJzdCBsb2FkZWQgc2NyaXB0IHRvIGJlIGJvb3RzdHJhcHBlZCBhbmQgd2lsbCByZXBvcnQgYSB3YXJuaW5nIHRvIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yXG4gKiBlYWNoIG9mIHRoZSBzdWJzZXF1ZW50IHNjcmlwdHMuIFRoaXMgcHJldmVudHMgc3RyYW5nZSByZXN1bHRzIGluIGFwcGxpY2F0aW9ucywgd2hlcmUgb3RoZXJ3aXNlXG4gKiBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgQW5ndWxhciB0cnkgdG8gd29yayBvbiB0aGUgRE9NLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogUHJvdHJhY3RvciBiYXNlZCBlbmQtdG8tZW5kIHRlc3RzIGNhbm5vdCB1c2UgdGhpcyBmdW5jdGlvbiB0byBib290c3RyYXAgbWFudWFsbHkuXG4gKiBUaGV5IG11c3QgdXNlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9LlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBEbyBub3QgYm9vdHN0cmFwIHRoZSBhcHAgb24gYW4gZWxlbWVudCB3aXRoIGEgZGlyZWN0aXZlIHRoYXQgdXNlcyB7QGxpbmsgbmcuJGNvbXBpbGUjdHJhbnNjbHVzaW9uIHRyYW5zY2x1c2lvbn0sXG4gKiBzdWNoIGFzIHtAbGluayBuZy5uZ0lmIGBuZ0lmYH0sIHtAbGluayBuZy5uZ0luY2x1ZGUgYG5nSW5jbHVkZWB9IGFuZCB7QGxpbmsgbmdSb3V0ZS5uZ1ZpZXcgYG5nVmlld2B9LlxuICogRG9pbmcgdGhpcyBtaXNwbGFjZXMgdGhlIGFwcCB7QGxpbmsgbmcuJHJvb3RFbGVtZW50IGAkcm9vdEVsZW1lbnRgfSBhbmQgdGhlIGFwcCdzIHtAbGluayBhdXRvLiRpbmplY3RvciBpbmplY3Rvcn0sXG4gKiBjYXVzaW5nIGFuaW1hdGlvbnMgdG8gc3RvcCB3b3JraW5nIGFuZCBtYWtpbmcgdGhlIGluamVjdG9yIGluYWNjZXNzaWJsZSBmcm9tIG91dHNpZGUgdGhlIGFwcC5cbiAqIDwvZGl2PlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhZG9jdHlwZSBodG1sPlxuICogPGh0bWw+XG4gKiA8Ym9keT5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIldlbGNvbWVDb250cm9sbGVyXCI+XG4gKiAgIHt7Z3JlZXRpbmd9fVxuICogPC9kaXY+XG4gKlxuICogPHNjcmlwdCBzcmM9XCJhbmd1bGFyLmpzXCI+PC9zY3JpcHQ+XG4gKiA8c2NyaXB0PlxuICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2RlbW8nLCBbXSlcbiAqICAgLmNvbnRyb2xsZXIoJ1dlbGNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnV2VsY29tZSEnO1xuICogICB9KTtcbiAqICAgYW5ndWxhci5ib290c3RyYXAoZG9jdW1lbnQsIFsnZGVtbyddKTtcbiAqIDwvc2NyaXB0PlxuICogPC9ib2R5PlxuICogPC9odG1sPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xGdW5jdGlvbnxBcnJheT49fSBtb2R1bGVzIGFuIGFycmF5IG9mIG1vZHVsZXMgdG8gbG9hZCBpbnRvIHRoZSBhcHBsaWNhdGlvbi5cbiAqICAgICBFYWNoIGl0ZW0gaW4gdGhlIGFycmF5IHNob3VsZCBiZSB0aGUgbmFtZSBvZiBhIHByZWRlZmluZWQgbW9kdWxlIG9yIGEgKERJIGFubm90YXRlZClcbiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBgY29uZmlnYCBibG9jay5cbiAqICAgICBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfVxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgYW4gb2JqZWN0IGZvciBkZWZpbmluZyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhlXG4gKiAgICAgZm9sbG93aW5nIGtleXMgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiAqIGBzdHJpY3REaWAgLSBkaXNhYmxlIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24uIFRoaXMgaXMgbWVhbnQgdG9cbiAqICAgYXNzaXN0IGluIGZpbmRpbmcgYnVncyB3aGljaCBicmVhayBtaW5pZmllZCBjb2RlLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICpcbiAqIEByZXR1cm5zIHthdXRvLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuXG4gKi9cbmZ1bmN0aW9uIGJvb3RzdHJhcChlbGVtZW50LCBtb2R1bGVzLCBjb25maWcpIHtcbiAgaWYgKCFpc09iamVjdChjb25maWcpKSBjb25maWcgPSB7fTtcbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgc3RyaWN0RGk6IGZhbHNlXG4gIH07XG4gIGNvbmZpZyA9IGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xuICB2YXIgZG9Cb290c3RyYXAgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnQuaW5qZWN0b3IoKSkge1xuICAgICAgdmFyIHRhZyA9IChlbGVtZW50WzBdID09PSB3aW5kb3cuZG9jdW1lbnQpID8gJ2RvY3VtZW50JyA6IHN0YXJ0aW5nVGFnKGVsZW1lbnQpO1xuICAgICAgLy8gRW5jb2RlIGFuZ2xlIGJyYWNrZXRzIHRvIHByZXZlbnQgaW5wdXQgZnJvbSBiZWluZyBzYW5pdGl6ZWQgdG8gZW1wdHkgc3RyaW5nICM4NjgzLlxuICAgICAgdGhyb3cgbmdNaW5FcnIoXG4gICAgICAgICAgJ2J0c3RycGQnLFxuICAgICAgICAgICdBcHAgYWxyZWFkeSBib290c3RyYXBwZWQgd2l0aCB0aGlzIGVsZW1lbnQgXFwnezB9XFwnJyxcbiAgICAgICAgICB0YWcucmVwbGFjZSgvPC8sJyZsdDsnKS5yZXBsYWNlKC8+LywnJmd0OycpKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzID0gbW9kdWxlcyB8fCBbXTtcbiAgICBtb2R1bGVzLnVuc2hpZnQoWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICAgICAkcHJvdmlkZS52YWx1ZSgnJHJvb3RFbGVtZW50JywgZWxlbWVudCk7XG4gICAgfV0pO1xuXG4gICAgaWYgKGNvbmZpZy5kZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAvLyBQdXNoaW5nIHNvIHRoYXQgdGhpcyBvdmVycmlkZXMgYGRlYnVnSW5mb0VuYWJsZWRgIHNldHRpbmcgZGVmaW5lZCBpbiB1c2VyJ3MgYG1vZHVsZXNgLlxuICAgICAgbW9kdWxlcy5wdXNoKFsnJGNvbXBpbGVQcm92aWRlcicsIGZ1bmN0aW9uKCRjb21waWxlUHJvdmlkZXIpIHtcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKHRydWUpO1xuICAgICAgfV0pO1xuICAgIH1cblxuICAgIG1vZHVsZXMudW5zaGlmdCgnbmcnKTtcbiAgICB2YXIgaW5qZWN0b3IgPSBjcmVhdGVJbmplY3Rvcihtb2R1bGVzLCBjb25maWcuc3RyaWN0RGkpO1xuICAgIGluamVjdG9yLmludm9rZShbJyRyb290U2NvcGUnLCAnJHJvb3RFbGVtZW50JywgJyRjb21waWxlJywgJyRpbmplY3RvcicsXG4gICAgICAgZnVuY3Rpb24gYm9vdHN0cmFwQXBwbHkoc2NvcGUsIGVsZW1lbnQsIGNvbXBpbGUsIGluamVjdG9yKSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRpbmplY3RvcicsIGluamVjdG9yKTtcbiAgICAgICAgICBjb21waWxlKGVsZW1lbnQpKHNjb3BlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XVxuICAgICk7XG4gICAgcmV0dXJuIGluamVjdG9yO1xuICB9O1xuXG4gIHZhciBOR19FTkFCTEVfREVCVUdfSU5GTyA9IC9eTkdfRU5BQkxFX0RFQlVHX0lORk8hLztcbiAgdmFyIE5HX0RFRkVSX0JPT1RTVFJBUCA9IC9eTkdfREVGRVJfQk9PVFNUUkFQIS87XG5cbiAgaWYgKHdpbmRvdyAmJiBOR19FTkFCTEVfREVCVUdfSU5GTy50ZXN0KHdpbmRvdy5uYW1lKSkge1xuICAgIGNvbmZpZy5kZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfRU5BQkxFX0RFQlVHX0lORk8sICcnKTtcbiAgfVxuXG4gIGlmICh3aW5kb3cgJiYgIU5HX0RFRkVSX0JPT1RTVFJBUC50ZXN0KHdpbmRvdy5uYW1lKSkge1xuICAgIHJldHVybiBkb0Jvb3RzdHJhcCgpO1xuICB9XG5cbiAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0RFRkVSX0JPT1RTVFJBUCwgJycpO1xuICBhbmd1bGFyLnJlc3VtZUJvb3RzdHJhcCA9IGZ1bmN0aW9uKGV4dHJhTW9kdWxlcykge1xuICAgIGZvckVhY2goZXh0cmFNb2R1bGVzLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2R1bGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBkb0Jvb3RzdHJhcCgpO1xuICB9O1xuXG4gIGlmIChpc0Z1bmN0aW9uKGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXApKSB7XG4gICAgYW5ndWxhci5yZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCgpO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnJlbG9hZFdpdGhEZWJ1Z0luZm9cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gcmVsb2FkIHRoZSBjdXJyZW50IGFwcGxpY2F0aW9uIHdpdGggZGVidWcgaW5mb3JtYXRpb24gdHVybmVkIG9uLlxuICogVGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYSBjYWxsIHRvIGAkY29tcGlsZVByb3ZpZGVyLmRlYnVnSW5mb0VuYWJsZWQoZmFsc2UpYC5cbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZH0gZm9yIG1vcmUuXG4gKi9cbmZ1bmN0aW9uIHJlbG9hZFdpdGhEZWJ1Z0luZm8oKSB7XG4gIHdpbmRvdy5uYW1lID0gJ05HX0VOQUJMRV9ERUJVR19JTkZPIScgKyB3aW5kb3cubmFtZTtcbiAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xufVxuXG4vKipcbiAqIEBuYW1lIGFuZ3VsYXIuZ2V0VGVzdGFiaWxpdHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSB0ZXN0YWJpbGl0eSBzZXJ2aWNlIGZvciB0aGUgaW5zdGFuY2Ugb2YgQW5ndWxhciBvbiB0aGUgZ2l2ZW5cbiAqIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0VGVzdGFiaWxpdHkocm9vdEVsZW1lbnQpIHtcbiAgdmFyIGluamVjdG9yID0gYW5ndWxhci5lbGVtZW50KHJvb3RFbGVtZW50KS5pbmplY3RvcigpO1xuICBpZiAoIWluamVjdG9yKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ3Rlc3QnLFxuICAgICAgJ25vIGluamVjdG9yIGZvdW5kIGZvciBlbGVtZW50IGFyZ3VtZW50IHRvIGdldFRlc3RhYmlsaXR5Jyk7XG4gIH1cbiAgcmV0dXJuIGluamVjdG9yLmdldCgnJCR0ZXN0YWJpbGl0eScpO1xufVxuXG52YXIgU05BS0VfQ0FTRV9SRUdFWFAgPSAvW0EtWl0vZztcbmZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSwgc2VwYXJhdG9yKSB7XG4gIHNlcGFyYXRvciA9IHNlcGFyYXRvciB8fCAnXyc7XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7XG4gICAgcmV0dXJuIChwb3MgPyBzZXBhcmF0b3IgOiAnJykgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59XG5cbnZhciBiaW5kSlF1ZXJ5RmlyZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGJpbmRKUXVlcnkoKSB7XG4gIHZhciBvcmlnaW5hbENsZWFuRGF0YTtcblxuICBpZiAoYmluZEpRdWVyeUZpcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gYmluZCB0byBqUXVlcnkgaWYgcHJlc2VudDtcbiAgdmFyIGpxTmFtZSA9IGpxKCk7XG4gIGpRdWVyeSA9IGlzVW5kZWZpbmVkKGpxTmFtZSkgPyB3aW5kb3cualF1ZXJ5IDogICAvLyB1c2UgalF1ZXJ5IChpZiBwcmVzZW50KVxuICAgICAgICAgICAhanFOYW1lICAgICAgICAgICAgID8gdW5kZWZpbmVkICAgICA6ICAgLy8gdXNlIGpxTGl0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93W2pxTmFtZV07ICAgLy8gdXNlIGpRdWVyeSBzcGVjaWZpZWQgYnkgYG5nSnFgXG5cbiAgLy8gVXNlIGpRdWVyeSBpZiBpdCBleGlzdHMgd2l0aCBwcm9wZXIgZnVuY3Rpb25hbGl0eSwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gdXMuXG4gIC8vIEFuZ3VsYXIgMS4yKyByZXF1aXJlcyBqUXVlcnkgMS43KyBmb3Igb24oKS9vZmYoKSBzdXBwb3J0LlxuICAvLyBBbmd1bGFyIDEuMysgdGVjaG5pY2FsbHkgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IDIuMSsgYnV0IGl0IG1heSB3b3JrIHdpdGggb2xkZXJcbiAgLy8gdmVyc2lvbnMuIEl0IHdpbGwgbm90IHdvcmsgZm9yIHN1cmUgd2l0aCBqUXVlcnkgPDEuNywgdGhvdWdoLlxuICBpZiAoalF1ZXJ5ICYmIGpRdWVyeS5mbi5vbikge1xuICAgIGpxTGl0ZSA9IGpRdWVyeTtcbiAgICBleHRlbmQoalF1ZXJ5LmZuLCB7XG4gICAgICBzY29wZTogSlFMaXRlUHJvdG90eXBlLnNjb3BlLFxuICAgICAgaXNvbGF0ZVNjb3BlOiBKUUxpdGVQcm90b3R5cGUuaXNvbGF0ZVNjb3BlLFxuICAgICAgY29udHJvbGxlcjogLyoqIEB0eXBlIHs/fSAqLyAoSlFMaXRlUHJvdG90eXBlKS5jb250cm9sbGVyLFxuICAgICAgaW5qZWN0b3I6IEpRTGl0ZVByb3RvdHlwZS5pbmplY3RvcixcbiAgICAgIGluaGVyaXRlZERhdGE6IEpRTGl0ZVByb3RvdHlwZS5pbmhlcml0ZWREYXRhXG4gICAgfSk7XG5cbiAgICAvLyBBbGwgbm9kZXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdmlhIHZhcmlvdXMgalF1ZXJ5IEFQSXMgbGlrZSAucmVtb3ZlKClcbiAgICAvLyBhcmUgcGFzc2VkIHRocm91Z2ggalF1ZXJ5LmNsZWFuRGF0YS4gTW9ua2V5LXBhdGNoIHRoaXMgbWV0aG9kIHRvIGZpcmVcbiAgICAvLyB0aGUgJGRlc3Ryb3kgZXZlbnQgb24gYWxsIHJlbW92ZWQgbm9kZXMuXG4gICAgb3JpZ2luYWxDbGVhbkRhdGEgPSBqUXVlcnkuY2xlYW5EYXRhO1xuICAgIGpRdWVyeS5jbGVhbkRhdGEgPSBmdW5jdGlvbihlbGVtcykge1xuICAgICAgdmFyIGV2ZW50cztcbiAgICAgIGZvciAodmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKyspIHtcbiAgICAgICAgZXZlbnRzID0galF1ZXJ5Ll9kYXRhKGVsZW0sICdldmVudHMnKTtcbiAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgICBqUXVlcnkoZWxlbSkudHJpZ2dlckhhbmRsZXIoJyRkZXN0cm95Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9yaWdpbmFsQ2xlYW5EYXRhKGVsZW1zKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGpxTGl0ZSA9IEpRTGl0ZTtcbiAgfVxuXG4gIGFuZ3VsYXIuZWxlbWVudCA9IGpxTGl0ZTtcblxuICAvLyBQcmV2ZW50IGRvdWJsZS1wcm94eWluZy5cbiAgYmluZEpRdWVyeUZpcmVkID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiB0aHJvdyBlcnJvciBpZiB0aGUgYXJndW1lbnQgaXMgZmFsc3kuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydEFyZyhhcmcsIG5hbWUsIHJlYXNvbikge1xuICBpZiAoIWFyZykge1xuICAgIHRocm93IG5nTWluRXJyKCdhcmVxJywgJ0FyZ3VtZW50IFxcJ3swfVxcJyBpcyB7MX0nLCAobmFtZSB8fCAnPycpLCAocmVhc29uIHx8ICdyZXF1aXJlZCcpKTtcbiAgfVxuICByZXR1cm4gYXJnO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRBcmdGbihhcmcsIG5hbWUsIGFjY2VwdEFycmF5QW5ub3RhdGlvbikge1xuICBpZiAoYWNjZXB0QXJyYXlBbm5vdGF0aW9uICYmIGlzQXJyYXkoYXJnKSkge1xuICAgICAgYXJnID0gYXJnW2FyZy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGFzc2VydEFyZyhpc0Z1bmN0aW9uKGFyZyksIG5hbWUsICdub3QgYSBmdW5jdGlvbiwgZ290ICcgK1xuICAgICAgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyA/IGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnIDogdHlwZW9mIGFyZykpO1xuICByZXR1cm4gYXJnO1xufVxuXG4vKipcbiAqIHRocm93IGVycm9yIGlmIHRoZSBuYW1lIGdpdmVuIGlzIGhhc093blByb3BlcnR5XG4gKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgICAgdGhlIG5hbWUgdG8gdGVzdFxuICogQHBhcmFtICB7U3RyaW5nfSBjb250ZXh0IHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBuYW1lIGlzIHVzZWQsIHN1Y2ggYXMgbW9kdWxlIG9yIGRpcmVjdGl2ZVxuICovXG5mdW5jdGlvbiBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCBjb250ZXh0KSB7XG4gIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCAnaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWUnLCBjb250ZXh0KTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgdmFsdWUgYWNjZXNzaWJsZSBmcm9tIHRoZSBvYmplY3QgYnkgcGF0aC4gQW55IHVuZGVmaW5lZCB0cmF2ZXJzYWxzIGFyZSBpZ25vcmVkXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIHN0YXJ0aW5nIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGggcGF0aCB0byB0cmF2ZXJzZVxuICogQHBhcmFtIHtib29sZWFufSBbYmluZEZuVG9TY29wZT10cnVlXVxuICogQHJldHVybnMge09iamVjdH0gdmFsdWUgYXMgYWNjZXNzaWJsZSBieSBwYXRoXG4gKi9cbi8vVE9ETyhtaXNrbyk6IHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmVtb3ZlZFxuZnVuY3Rpb24gZ2V0dGVyKG9iaiwgcGF0aCwgYmluZEZuVG9TY29wZSkge1xuICBpZiAoIXBhdGgpIHJldHVybiBvYmo7XG4gIHZhciBrZXlzID0gcGF0aC5zcGxpdCgnLicpO1xuICB2YXIga2V5O1xuICB2YXIgbGFzdEluc3RhbmNlID0gb2JqO1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgaWYgKG9iaikge1xuICAgICAgb2JqID0gKGxhc3RJbnN0YW5jZSA9IG9iailba2V5XTtcbiAgICB9XG4gIH1cbiAgaWYgKCFiaW5kRm5Ub1Njb3BlICYmIGlzRnVuY3Rpb24ob2JqKSkge1xuICAgIHJldHVybiBiaW5kKGxhc3RJbnN0YW5jZSwgb2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgRE9NIHNpYmxpbmdzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IG5vZGUgaW4gdGhlIGdpdmVuIGFycmF5LlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgbGlrZSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX0gdGhlIGlucHV0dGVkIG9iamVjdCBvciBhIGpxTGl0ZSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgdGhlIG5vZGVzXG4gKi9cbmZ1bmN0aW9uIGdldEJsb2NrTm9kZXMobm9kZXMpIHtcbiAgLy8gVE9ETyhwZXJmKTogdXBkYXRlIGBub2Rlc2AgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvYmplY3Q/XG4gIHZhciBub2RlID0gbm9kZXNbMF07XG4gIHZhciBlbmROb2RlID0gbm9kZXNbbm9kZXMubGVuZ3RoIC0gMV07XG4gIHZhciBibG9ja05vZGVzO1xuXG4gIGZvciAodmFyIGkgPSAxOyBub2RlICE9PSBlbmROb2RlICYmIChub2RlID0gbm9kZS5uZXh0U2libGluZyk7IGkrKykge1xuICAgIGlmIChibG9ja05vZGVzIHx8IG5vZGVzW2ldICE9PSBub2RlKSB7XG4gICAgICBpZiAoIWJsb2NrTm9kZXMpIHtcbiAgICAgICAgYmxvY2tOb2RlcyA9IGpxTGl0ZShzbGljZS5jYWxsKG5vZGVzLCAwLCBpKSk7XG4gICAgICB9XG4gICAgICBibG9ja05vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJsb2NrTm9kZXMgfHwgbm9kZXM7XG59XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRob3V0IGEgcHJvdG90eXBlLiBUaGlzIG9iamVjdCBpcyB1c2VmdWwgZm9yIGxvb2t1cCB3aXRob3V0IGhhdmluZyB0b1xuICogZ3VhcmQgYWdhaW5zdCBwcm90b3R5cGljYWxseSBpbmhlcml0ZWQgcHJvcGVydGllcyB2aWEgaGFzT3duUHJvcGVydHkuXG4gKlxuICogUmVsYXRlZCBtaWNyby1iZW5jaG1hcmtzOlxuICogLSBodHRwOi8vanNwZXJmLmNvbS9vYmplY3QtY3JlYXRlMlxuICogLSBodHRwOi8vanNwZXJmLmNvbS9wcm90by1tYXAtbG9va3VwLzJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vZm9yLWluLXZzLW9iamVjdC1rZXlzMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgeyAvLyBudWxsIHx8IHVuZGVmaW5lZFxuICAgIHJldHVybiAnJztcbiAgfVxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBicmVhaztcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgdmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChoYXNDdXN0b21Ub1N0cmluZyh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTtcbiAgICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIE5PREVfVFlQRV9FTEVNRU5UID0gMTtcbnZhciBOT0RFX1RZUEVfQVRUUklCVVRFID0gMjtcbnZhciBOT0RFX1RZUEVfVEVYVCA9IDM7XG52YXIgTk9ERV9UWVBFX0NPTU1FTlQgPSA4O1xudmFyIE5PREVfVFlQRV9ET0NVTUVOVCA9IDk7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UID0gMTE7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBJbnRlcmZhY2UgZm9yIGNvbmZpZ3VyaW5nIGFuZ3VsYXIge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9LlxuICovXG5cbmZ1bmN0aW9uIHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdykge1xuXG4gIHZhciAkaW5qZWN0b3JNaW5FcnIgPSBtaW5FcnIoJyRpbmplY3RvcicpO1xuICB2YXIgbmdNaW5FcnIgPSBtaW5FcnIoJ25nJyk7XG5cbiAgZnVuY3Rpb24gZW5zdXJlKG9iaiwgbmFtZSwgZmFjdG9yeSkge1xuICAgIHJldHVybiBvYmpbbmFtZV0gfHwgKG9ialtuYW1lXSA9IGZhY3RvcnkoKSk7XG4gIH1cblxuICB2YXIgYW5ndWxhciA9IGVuc3VyZSh3aW5kb3csICdhbmd1bGFyJywgT2JqZWN0KTtcblxuICAvLyBXZSBuZWVkIHRvIGV4cG9zZSBgYW5ndWxhci4kJG1pbkVycmAgdG8gbW9kdWxlcyBzdWNoIGFzIGBuZ1Jlc291cmNlYCB0aGF0IHJlZmVyZW5jZSBpdCBkdXJpbmcgYm9vdHN0cmFwXG4gIGFuZ3VsYXIuJCRtaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyIHx8IG1pbkVycjtcblxuICByZXR1cm4gZW5zdXJlKGFuZ3VsYXIsICdtb2R1bGUnLCBmdW5jdGlvbigpIHtcbiAgICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCBhbmd1bGFyLk1vZHVsZT59ICovXG4gICAgdmFyIG1vZHVsZXMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIGFuZ3VsYXIubW9kdWxlXG4gICAgICogQG1vZHVsZSBuZ1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVGhlIGBhbmd1bGFyLm1vZHVsZWAgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyXG4gICAgICogbW9kdWxlcy5cbiAgICAgKiBBbGwgbW9kdWxlcyAoYW5ndWxhciBjb3JlIG9yIDNyZCBwYXJ0eSkgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFuIGFwcGxpY2F0aW9uIG11c3QgYmVcbiAgICAgKiByZWdpc3RlcmVkIHVzaW5nIHRoaXMgbWVjaGFuaXNtLlxuICAgICAqXG4gICAgICogUGFzc2luZyBvbmUgYXJndW1lbnQgcmV0cmlldmVzIGFuIGV4aXN0aW5nIHtAbGluayBhbmd1bGFyLk1vZHVsZX0sXG4gICAgICogd2hlcmVhcyBwYXNzaW5nIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgY3JlYXRlcyBhIG5ldyB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMgTW9kdWxlXG4gICAgICpcbiAgICAgKiBBIG1vZHVsZSBpcyBhIGNvbGxlY3Rpb24gb2Ygc2VydmljZXMsIGRpcmVjdGl2ZXMsIGNvbnRyb2xsZXJzLCBmaWx0ZXJzLCBhbmQgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgKiBgYW5ndWxhci5tb2R1bGVgIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZVxuICAgICAqIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKTtcbiAgICAgKlxuICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2VcbiAgICAgKiBteU1vZHVsZS52YWx1ZSgnYXBwTmFtZScsICdNeUNvb2xBcHAnKTtcbiAgICAgKlxuICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLlxuICAgICAqIG15TW9kdWxlLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnNcbiAgICAgKiAgICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTtcbiAgICAgKiB9XSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdteU1vZHVsZSddKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0gb3JcbiAgICAgKiB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IHRvIHNpbXBsaWZ5IHRoaXMgcHJvY2VzcyBmb3IgeW91LlxuICAgICAqXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gY3JlYXRlIG9yIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZlxuICAgICAqICAgICAgICB1bnNwZWNpZmllZCB0aGVuIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNvbmZpZ0ZuIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gZm9yIHRoZSBtb2R1bGUuIFNhbWUgYXNcbiAgICAgKiAgICAgICAge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LlxuICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX0gbmV3IG1vZHVsZSB3aXRoIHRoZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9IGFwaS5cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gbW9kdWxlKG5hbWUsIHJlcXVpcmVzLCBjb25maWdGbikge1xuXG4gICAgICB2YXIgaW5mbyA9IHt9O1xuXG4gICAgICB2YXIgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkgPSBmdW5jdGlvbihuYW1lLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgICAgICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCAnaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWUnLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ21vZHVsZScpO1xuICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXJlcXVpcmVzKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdub21vZCcsICdNb2R1bGUgXFwnezB9XFwnIGlzIG5vdCBhdmFpbGFibGUhIFlvdSBlaXRoZXIgbWlzc3BlbGxlZCAnICtcbiAgICAgICAgICAgICAndGhlIG1vZHVsZSBuYW1lIG9yIGZvcmdvdCB0byBsb2FkIGl0LiBJZiByZWdpc3RlcmluZyBhIG1vZHVsZSBlbnN1cmUgdGhhdCB5b3UgJyArXG4gICAgICAgICAgICAgJ3NwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LicsIG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEFycmF5LjwqPj59ICovXG4gICAgICAgIHZhciBpbnZva2VRdWV1ZSA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBjb25maWdCbG9ja3MgPSBbXTtcblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xuICAgICAgICB2YXIgcnVuQmxvY2tzID0gW107XG5cbiAgICAgICAgdmFyIGNvbmZpZyA9IGludm9rZUxhdGVyKCckaW5qZWN0b3InLCAnaW52b2tlJywgJ3B1c2gnLCBjb25maWdCbG9ja3MpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7YW5ndWxhci5Nb2R1bGV9ICovXG4gICAgICAgIHZhciBtb2R1bGVJbnN0YW5jZSA9IHtcbiAgICAgICAgICAvLyBQcml2YXRlIHN0YXRlXG4gICAgICAgICAgX2ludm9rZVF1ZXVlOiBpbnZva2VRdWV1ZSxcbiAgICAgICAgICBfY29uZmlnQmxvY2tzOiBjb25maWdCbG9ja3MsXG4gICAgICAgICAgX3J1bkJsb2NrczogcnVuQmxvY2tzLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2luZm9cbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdD19IGluZm8gSW5mb3JtYXRpb24gYWJvdXQgdGhlIG1vZHVsZVxuICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R8TW9kdWxlfSBUaGUgY3VycmVudCBpbmZvIG9iamVjdCBmb3IgdGhpcyBtb2R1bGUgaWYgY2FsbGVkIGFzIGEgZ2V0dGVyLFxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBvciBgdGhpc2AgaWYgY2FsbGVkIGFzIGEgc2V0dGVyLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogUmVhZCBhbmQgd3JpdGUgY3VzdG9tIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgbW9kdWxlLlxuICAgICAgICAgICAqIEZvciBleGFtcGxlIHlvdSBjb3VsZCBwdXQgdGhlIHZlcnNpb24gb2YgdGhlIG1vZHVsZSBpbiBoZXJlLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogYGBganNcbiAgICAgICAgICAgKiBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnLCBbXSkuaW5mbyh7IHZlcnNpb246ICcxLjAuMCcgfSk7XG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUaGUgdmVyc2lvbiBjb3VsZCB0aGVuIGJlIHJlYWQgYmFjayBvdXQgYnkgYWNjZXNzaW5nIHRoZSBtb2R1bGUgZWxzZXdoZXJlOlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICogdmFyIHZlcnNpb24gPSBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnKS5pbmZvKCkudmVyc2lvbjtcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFlvdSBjYW4gYWxzbyByZXRyaWV2ZSB0aGlzIGluZm9ybWF0aW9uIGR1cmluZyBydW50aW1lIHZpYSB0aGVcbiAgICAgICAgICAgKiB7QGxpbmsgJGluamVjdG9yI21vZHVsZXMgYCRpbmplY3Rvci5tb2R1bGVzYH0gcHJvcGVydHk6XG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAqIHZhciB2ZXJzaW9uID0gJGluamVjdG9yLm1vZHVsZXNbJ215TW9kdWxlJ10uaW5mbygpLnZlcnNpb247XG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICovXG4gICAgICAgICAgaW5mbzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB0aHJvdyBuZ01pbkVycignYW9iaicsICdBcmd1bWVudCBcXCd7MH1cXCcgbXVzdCBiZSBhbiBvYmplY3QnLCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgaW5mbyA9IHZhbHVlO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNyZXF1aXJlc1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEhvbGRzIHRoZSBsaXN0IG9mIG1vZHVsZXMgd2hpY2ggdGhlIGluamVjdG9yIHdpbGwgbG9hZCBiZWZvcmUgdGhlIGN1cnJlbnQgbW9kdWxlIGlzXG4gICAgICAgICAgICogbG9hZGVkLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJlcXVpcmVzOiByZXF1aXJlcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI25hbWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBOYW1lIG9mIHRoZSBtb2R1bGUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbmFtZTogbmFtZSxcblxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3Byb3ZpZGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyVHlwZSBDb25zdHJ1Y3Rpb24gZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGVcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgcHJvdmlkZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAncHJvdmlkZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmYWN0b3J5XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyRnVuY3Rpb24gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZhY3Rvcnk6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnZmFjdG9yeScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3NlcnZpY2VcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdzZXJ2aWNlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjdmFsdWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgU2VydmljZSBpbnN0YW5jZSBvYmplY3QuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlICRwcm92aWRlLnZhbHVlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHZhbHVlOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAndmFsdWUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25zdGFudFxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBjb25zdGFudCBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogQmVjYXVzZSB0aGUgY29uc3RhbnRzIGFyZSBmaXhlZCwgdGhleSBnZXQgYXBwbGllZCBiZWZvcmUgb3RoZXIgcHJvdmlkZSBtZXRob2RzLlxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCAkcHJvdmlkZS5jb25zdGFudCgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdGFudDogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2NvbnN0YW50JywgJ3Vuc2hpZnQnKSxcblxuICAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGVjb3JhdG9yXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRlY29yRm4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudGlhdGVkIGFuZCBzaG91bGQgcmV0dXJuIHRoZSBkZWNvcmF0ZWQgc2VydmljZSBpbnN0YW5jZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yICRwcm92aWRlLmRlY29yYXRvcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkZWNvcmF0b3I6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnZGVjb3JhdG9yJywgY29uZmlnQmxvY2tzKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNhbmltYXRpb25cbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgYW5pbWF0aW9uIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhbmltYXRpb25GYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBhblxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqXG4gICAgICAgICAgICogKipOT1RFKio6IGFuaW1hdGlvbnMgdGFrZSBlZmZlY3Qgb25seSBpZiB0aGUgKipuZ0FuaW1hdGUqKiBtb2R1bGUgaXMgbG9hZGVkLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBEZWZpbmVzIGFuIGFuaW1hdGlvbiBob29rIHRoYXQgY2FuIGJlIGxhdGVyIHVzZWQgd2l0aFxuICAgICAgICAgICAqIHtAbGluayAkYW5pbWF0ZSAkYW5pbWF0ZX0gc2VydmljZSBhbmQgZGlyZWN0aXZlcyB0aGF0IHVzZSB0aGlzIHNlcnZpY2UuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAqIG1vZHVsZS5hbmltYXRpb24oJy5hbmltYXRpb24tbmFtZScsIGZ1bmN0aW9uKCRpbmplY3QxLCAkaW5qZWN0Mikge1xuICAgICAgICAgICAqICAgcmV0dXJuIHtcbiAgICAgICAgICAgKiAgICAgZXZlbnROYW1lIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkge1xuICAgICAgICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAqICAgICAgIC8vb25jZSBjb21wbGV0ZSwgdGhlbiBydW4gZG9uZSgpXG4gICAgICAgICAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhbmNlbGxhdGlvbkZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAqICAgICAgIH1cbiAgICAgICAgICAgKiAgICAgfVxuICAgICAgICAgICAqICAgfVxuICAgICAgICAgICAqIH0pXG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXIgJGFuaW1hdGVQcm92aWRlci5yZWdpc3RlcigpfSBhbmRcbiAgICAgICAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGFuaW1hdGlvbjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckYW5pbWF0ZVByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmlsdGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEZpbHRlciBuYW1lIC0gdGhpcyBtdXN0IGJlIGEgdmFsaWQgYW5ndWxhciBleHByZXNzaW9uIGlkZW50aWZpZXJcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXJGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBmaWx0ZXIuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgICAgICAgKiAqKk5vdGU6KiogRmlsdGVyIG5hbWVzIG11c3QgYmUgdmFsaWQgYW5ndWxhciB7QGxpbmsgZXhwcmVzc2lvbn0gaWRlbnRpZmllcnMsIHN1Y2ggYXMgYHVwcGVyY2FzZWAgb3IgYG9yZGVyQnlgLlxuICAgICAgICAgICAqIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gICAgICAgICAgICogeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gICAgICAgICAgICogKGBteWFwcF9zdWJzZWN0aW9uX2ZpbHRlcnhgKS5cbiAgICAgICAgICAgKiA8L2Rpdj5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmaWx0ZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGZpbHRlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29udHJvbGxlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZVxuICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciAkY29udHJvbGxlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnRyb2xsZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RpcmVjdGl2ZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgRGlyZWN0aXZlIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGVcbiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGlyZWN0aXZlRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2ZcbiAgICAgICAgICAgKiBkaXJlY3RpdmVzLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb21waWxlUHJvdmlkZXInLCAnZGlyZWN0aXZlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29tcG9uZW50XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBpbiBjYW1lbC1jYXNlIChpLmUuIG15Q29tcCB3aGljaCB3aWxsIG1hdGNoIGFzIG15LWNvbXApXG4gICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29tcG9uZW50IGRlZmluaXRpb24gb2JqZWN0IChhIHNpbXBsaWZpZWRcbiAgICAgICAgICAgKiAgICB7QGxpbmsgbmcuJGNvbXBpbGUjZGlyZWN0aXZlLWRlZmluaXRpb24tb2JqZWN0IGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdH0pXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjY29tcG9uZW50ICRjb21waWxlUHJvdmlkZXIuY29tcG9uZW50KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbXBvbmVudDogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29tcGlsZVByb3ZpZGVyJywgJ2NvbXBvbmVudCcpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gb24gbW9kdWxlIGxvYWQuIFVzZWZ1bCBmb3Igc2VydmljZVxuICAgICAgICAgICAqICAgIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgcGVyZm9ybWVkIG9uIG1vZHVsZSBsb2FkaW5nLlxuICAgICAgICAgICAqIEZvciBtb3JlIGFib3V0IGhvdyB0byBjb25maWd1cmUgc2VydmljZXMsIHNlZVxuICAgICAgICAgICAqIHtAbGluayBwcm92aWRlcnMjcHJvdmlkZXItcmVjaXBlIFByb3ZpZGVyIFJlY2lwZX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcnVuXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRpYWxpemF0aW9uRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIGFmdGVyIGluamVjdG9yIGNyZWF0aW9uLlxuICAgICAgICAgICAqICAgIFVzZWZ1bCBmb3IgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggc2hvdWxkIGJlIHBlcmZvcm1lZCB3aGVuIHRoZSBpbmplY3RvciBpcyBkb25lXG4gICAgICAgICAgICogbG9hZGluZyBhbGwgbW9kdWxlcy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBydW46IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChibG9jayk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7XG4gICAgICAgICAgY29uZmlnKGNvbmZpZ0ZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmc9fSBpbnNlcnRNZXRob2RcbiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaW52b2tlTGF0ZXIocHJvdmlkZXIsIG1ldGhvZCwgaW5zZXJ0TWV0aG9kLCBxdWV1ZSkge1xuICAgICAgICAgIGlmICghcXVldWUpIHF1ZXVlID0gaW52b2tlUXVldWU7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcXVldWVbaW5zZXJ0TWV0aG9kIHx8ICdwdXNoJ10oW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKHByb3ZpZGVyLCBtZXRob2QsIHF1ZXVlKSB7XG4gICAgICAgICAgaWYgKCFxdWV1ZSkgcXVldWUgPSBpbnZva2VRdWV1ZTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVjaXBlTmFtZSwgZmFjdG9yeUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZmFjdG9yeUZ1bmN0aW9uICYmIGlzRnVuY3Rpb24oZmFjdG9yeUZ1bmN0aW9uKSkgZmFjdG9yeUZ1bmN0aW9uLiQkbW9kdWxlTmFtZSA9IG5hbWU7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxufVxuXG4vKiBnbG9iYWwgc2hhbGxvd0NvcHk6IHRydWUgKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdCwgYW4gYXJyYXkgb3IgYSBwcmltaXRpdmUuXG4gKlxuICogQXNzdW1lcyB0aGF0IHRoZXJlIGFyZSBubyBwcm90byBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBzaGFsbG93Q29weShzcmMsIGRzdCkge1xuICBpZiAoaXNBcnJheShzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGRzdFtpXSA9IHNyY1tpXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc3JjKSkge1xuICAgIGRzdCA9IGRzdCB8fCB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmICghKGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdCB8fCBzcmM7XG59XG5cbi8qIGdsb2JhbCB0b0RlYnVnU3RyaW5nOiB0cnVlICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZU9iamVjdChvYmosIG1heERlcHRoKSB7XG4gIHZhciBzZWVuID0gW107XG5cbiAgLy8gVGhlcmUgaXMgbm8gZGlyZWN0IHdheSB0byBzdHJpbmdpZnkgb2JqZWN0IHVudGlsIHJlYWNoaW5nIGEgc3BlY2lmaWMgZGVwdGhcbiAgLy8gYW5kIGEgdmVyeSBkZWVwIG9iamVjdCBjYW4gY2F1c2UgYSBwZXJmb3JtYW5jZSBpc3N1ZSwgc28gd2UgY29weSB0aGUgb2JqZWN0XG4gIC8vIGJhc2VkIG9uIHRoaXMgc3BlY2lmaWMgZGVwdGggYW5kIHRoZW4gc3RyaW5naWZ5IGl0LlxuICBpZiAoaXNWYWxpZE9iamVjdE1heERlcHRoKG1heERlcHRoKSkge1xuICAgIG9iaiA9IGNvcHkob2JqLCBudWxsLCBtYXhEZXB0aCk7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICB2YWwgPSB0b0pzb25SZXBsYWNlcihrZXksIHZhbCk7XG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcblxuICAgICAgaWYgKHNlZW4uaW5kZXhPZih2YWwpID49IDApIHJldHVybiAnLi4uJztcblxuICAgICAgc2Vlbi5wdXNoKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b0RlYnVnU3RyaW5nKG9iaiwgbWF4RGVwdGgpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCkucmVwbGFjZSgvIFxce1tcXHNcXFNdKiQvLCAnJyk7XG4gIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQob2JqKSkge1xuICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzZXJpYWxpemVPYmplY3Qob2JqLCBtYXhEZXB0aCk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyogZ2xvYmFsIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHZlcnNpb246IHRydWUsXG5cbiAgJENvbXBpbGVQcm92aWRlcixcblxuICBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICBpbnB1dERpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGZvcm1EaXJlY3RpdmUsXG4gIHNjcmlwdERpcmVjdGl2ZSxcbiAgc2VsZWN0RGlyZWN0aXZlLFxuICBvcHRpb25EaXJlY3RpdmUsXG4gIG5nQmluZERpcmVjdGl2ZSxcbiAgbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICBuZ0Nsb2FrRGlyZWN0aXZlLFxuICBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXG4gIG5nRm9ybURpcmVjdGl2ZSxcbiAgbmdIaWRlRGlyZWN0aXZlLFxuICBuZ0lmRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlLFxuICBuZ0luaXREaXJlY3RpdmUsXG4gIG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gIG5nUGx1cmFsaXplRGlyZWN0aXZlLFxuICBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgbmdTaG93RGlyZWN0aXZlLFxuICBuZ1N0eWxlRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gIG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICBuZ01vZGVsRGlyZWN0aXZlLFxuICBuZ0xpc3REaXJlY3RpdmUsXG4gIG5nQ2hhbmdlRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICByZXF1aXJlZERpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgbmdWYWx1ZURpcmVjdGl2ZSxcbiAgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUsXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzLFxuICBuZ0V2ZW50RGlyZWN0aXZlcyxcblxuICAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICRBbmltYXRlUHJvdmlkZXIsXG4gICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAkJENvcmVBbmltYXRlSnNQcm92aWRlcixcbiAgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIsXG4gICQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlcixcbiAgJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIsXG4gICRCcm93c2VyUHJvdmlkZXIsXG4gICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgJENvbnRyb2xsZXJQcm92aWRlcixcbiAgJERhdGVQcm92aWRlcixcbiAgJERvY3VtZW50UHJvdmlkZXIsXG4gICQkSXNEb2N1bWVudEhpZGRlblByb3ZpZGVyLFxuICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAkRmlsdGVyUHJvdmlkZXIsXG4gICQkRm9yY2VSZWZsb3dQcm92aWRlcixcbiAgJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICRJbnRlcnZhbFByb3ZpZGVyLFxuICAkSHR0cFByb3ZpZGVyLFxuICAkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyLFxuICAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAkSHR0cEJhY2tlbmRQcm92aWRlcixcbiAgJHhockZhY3RvcnlQcm92aWRlcixcbiAgJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIsXG4gICRMb2NhdGlvblByb3ZpZGVyLFxuICAkTG9nUHJvdmlkZXIsXG4gICQkTWFwUHJvdmlkZXIsXG4gICRQYXJzZVByb3ZpZGVyLFxuICAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICRRUHJvdmlkZXIsXG4gICQkUVByb3ZpZGVyLFxuICAkJFNhbml0aXplVXJpUHJvdmlkZXIsXG4gICRTY2VQcm92aWRlcixcbiAgJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICRTbmlmZmVyUHJvdmlkZXIsXG4gICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAkVGltZW91dFByb3ZpZGVyLFxuICAkJFJBRlByb3ZpZGVyLFxuICAkV2luZG93UHJvdmlkZXIsXG4gICQkanFMaXRlUHJvdmlkZXIsXG4gICQkQ29va2llUmVhZGVyUHJvdmlkZXJcbiovXG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSBhbmd1bGFyLnZlcnNpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uXG4gKlxuICogVGhpcyBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtIGBmdWxsYCDigJMgYHtzdHJpbmd9YCDigJMgRnVsbCB2ZXJzaW9uIHN0cmluZywgc3VjaCBhcyBcIjAuOS4xOFwiLlxuICogLSBgbWFqb3JgIOKAkyBge251bWJlcn1gIOKAkyBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjBcIi5cbiAqIC0gYG1pbm9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWlub3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCI5XCIuXG4gKiAtIGBkb3RgIOKAkyBge251bWJlcn1gIOKAkyBEb3QgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIxOFwiLlxuICogLSBgY29kZU5hbWVgIOKAkyBge3N0cmluZ31gIOKAkyBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgXCJqaWdnbGluZy1hcm1mYXRcIi5cbiAqL1xudmFyIHZlcnNpb24gPSB7XG4gIC8vIFRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSBncnVudCdzIGBidWlsZGAgdGFzay5cbiAgLy8gVGhleSBuZWVkIHRvIGJlIGRvdWJsZS0gb3Igc2luZ2xlLXF1b3RlZC5cbiAgZnVsbDogJzEuNi40JyxcbiAgbWFqb3I6IDEsXG4gIG1pbm9yOiA2LFxuICBkb3Q6IDQsXG4gIGNvZGVOYW1lOiAncGhlbm9tZW5hbC1mb290bm90ZSdcbn07XG5cblxuZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpIHtcbiAgZXh0ZW5kKGFuZ3VsYXIsIHtcbiAgICAnZXJyb3JIYW5kbGluZ0NvbmZpZyc6IGVycm9ySGFuZGxpbmdDb25maWcsXG4gICAgJ2Jvb3RzdHJhcCc6IGJvb3RzdHJhcCxcbiAgICAnY29weSc6IGNvcHksXG4gICAgJ2V4dGVuZCc6IGV4dGVuZCxcbiAgICAnbWVyZ2UnOiBtZXJnZSxcbiAgICAnZXF1YWxzJzogZXF1YWxzLFxuICAgICdlbGVtZW50JzoganFMaXRlLFxuICAgICdmb3JFYWNoJzogZm9yRWFjaCxcbiAgICAnaW5qZWN0b3InOiBjcmVhdGVJbmplY3RvcixcbiAgICAnbm9vcCc6IG5vb3AsXG4gICAgJ2JpbmQnOiBiaW5kLFxuICAgICd0b0pzb24nOiB0b0pzb24sXG4gICAgJ2Zyb21Kc29uJzogZnJvbUpzb24sXG4gICAgJ2lkZW50aXR5JzogaWRlbnRpdHksXG4gICAgJ2lzVW5kZWZpbmVkJzogaXNVbmRlZmluZWQsXG4gICAgJ2lzRGVmaW5lZCc6IGlzRGVmaW5lZCxcbiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZyxcbiAgICAnaXNGdW5jdGlvbic6IGlzRnVuY3Rpb24sXG4gICAgJ2lzT2JqZWN0JzogaXNPYmplY3QsXG4gICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsXG4gICAgJ2lzRWxlbWVudCc6IGlzRWxlbWVudCxcbiAgICAnaXNBcnJheSc6IGlzQXJyYXksXG4gICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLFxuICAgICdpc0RhdGUnOiBpc0RhdGUsXG4gICAgJ2xvd2VyY2FzZSc6IGxvd2VyY2FzZSxcbiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLFxuICAgICdjYWxsYmFja3MnOiB7JCRjb3VudGVyOiAwfSxcbiAgICAnZ2V0VGVzdGFiaWxpdHknOiBnZXRUZXN0YWJpbGl0eSxcbiAgICAncmVsb2FkV2l0aERlYnVnSW5mbyc6IHJlbG9hZFdpdGhEZWJ1Z0luZm8sXG4gICAgJyQkbWluRXJyJzogbWluRXJyLFxuICAgICckJGNzcCc6IGNzcCxcbiAgICAnJCRlbmNvZGVVcmlTZWdtZW50JzogZW5jb2RlVXJpU2VnbWVudCxcbiAgICAnJCRlbmNvZGVVcmlRdWVyeSc6IGVuY29kZVVyaVF1ZXJ5LFxuICAgICckJHN0cmluZ2lmeSc6IHN0cmluZ2lmeVxuICB9KTtcblxuICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcblxuICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsXG4gICAgZnVuY3Rpb24gbmdNb2R1bGUoJHByb3ZpZGUpIHtcbiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LlxuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkJHNhbml0aXplVXJpOiAkJFNhbml0aXplVXJpUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJyRjb21waWxlJywgJENvbXBpbGVQcm92aWRlcikuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICAgICAgICAgICAgaW5wdXQ6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgdGV4dGFyZWE6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNjcmlwdDogc2NyaXB0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc2VsZWN0OiBzZWxlY3REaXJlY3RpdmUsXG4gICAgICAgICAgICBvcHRpb246IG9wdGlvbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZDogbmdCaW5kRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZFRlbXBsYXRlOiBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xhc3M6IG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzT2RkOiBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ29udHJvbGxlcjogbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdGb3JtOiBuZ0Zvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSWY6IG5nSWZEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdOb25CaW5kYWJsZTogbmdOb25CaW5kYWJsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGx1cmFsaXplOiBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU2hvdzogbmdTaG93RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTdHlsZTogbmdTdHlsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoV2hlbjogbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTd2l0Y2hEZWZhdWx0OiBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVHJhbnNjbHVkZTogbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNb2RlbDogbmdNb2RlbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDaGFuZ2U6IG5nQ2hhbmdlRGlyZWN0aXZlLFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWF4bGVuZ3RoOiBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdWYWx1ZTogbmdWYWx1ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWxPcHRpb25zOiBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKHtcbiAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlXG4gICAgICAgIH0pLlxuICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLlxuICAgICAgICBkaXJlY3RpdmUobmdFdmVudERpcmVjdGl2ZXMpO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICAgICAgICRhbmltYXRlOiAkQW5pbWF0ZVByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZUNzczogJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZUpzOiAkJENvcmVBbmltYXRlSnNQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlUXVldWU6ICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyLFxuICAgICAgICAkJEFuaW1hdGVSdW5uZXI6ICQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlQXN5bmNSdW46ICQkQW5pbWF0ZUFzeW5jUnVuRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkYnJvd3NlcjogJEJyb3dzZXJQcm92aWRlcixcbiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkY29udHJvbGxlcjogJENvbnRyb2xsZXJQcm92aWRlcixcbiAgICAgICAgJGRvY3VtZW50OiAkRG9jdW1lbnRQcm92aWRlcixcbiAgICAgICAgJCRpc0RvY3VtZW50SGlkZGVuOiAkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlcixcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsXG4gICAgICAgICRmaWx0ZXI6ICRGaWx0ZXJQcm92aWRlcixcbiAgICAgICAgJCRmb3JjZVJlZmxvdzogJCRGb3JjZVJlZmxvd1Byb3ZpZGVyLFxuICAgICAgICAkaW50ZXJwb2xhdGU6ICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAgICAgICAkaW50ZXJ2YWw6ICRJbnRlcnZhbFByb3ZpZGVyLFxuICAgICAgICAkaHR0cDogJEh0dHBQcm92aWRlcixcbiAgICAgICAgJGh0dHBQYXJhbVNlcmlhbGl6ZXI6ICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIsXG4gICAgICAgICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlOiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAgICAgICAkaHR0cEJhY2tlbmQ6ICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAgICAgICAkeGhyRmFjdG9yeTogJHhockZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGpzb25wQ2FsbGJhY2tzOiAkanNvbnBDYWxsYmFja3NQcm92aWRlcixcbiAgICAgICAgJGxvY2F0aW9uOiAkTG9jYXRpb25Qcm92aWRlcixcbiAgICAgICAgJGxvZzogJExvZ1Byb3ZpZGVyLFxuICAgICAgICAkcGFyc2U6ICRQYXJzZVByb3ZpZGVyLFxuICAgICAgICAkcm9vdFNjb3BlOiAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICAgICAgICRxOiAkUVByb3ZpZGVyLFxuICAgICAgICAkJHE6ICQkUVByb3ZpZGVyLFxuICAgICAgICAkc2NlOiAkU2NlUHJvdmlkZXIsXG4gICAgICAgICRzY2VEZWxlZ2F0ZTogJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICAgICAgICRzbmlmZmVyOiAkU25pZmZlclByb3ZpZGVyLFxuICAgICAgICAkdGVtcGxhdGVDYWNoZTogJFRlbXBsYXRlQ2FjaGVQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdDogJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyLFxuICAgICAgICAkJHRlc3RhYmlsaXR5OiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIsXG4gICAgICAgICR0aW1lb3V0OiAkVGltZW91dFByb3ZpZGVyLFxuICAgICAgICAkd2luZG93OiAkV2luZG93UHJvdmlkZXIsXG4gICAgICAgICQkckFGOiAkJFJBRlByb3ZpZGVyLFxuICAgICAgICAkJGpxTGl0ZTogJCRqcUxpdGVQcm92aWRlcixcbiAgICAgICAgJCRNYXA6ICQkTWFwUHJvdmlkZXIsXG4gICAgICAgICQkY29va2llUmVhZGVyOiAkJENvb2tpZVJlYWRlclByb3ZpZGVyXG4gICAgICB9KTtcbiAgICB9XG4gIF0pXG4gIC5pbmZvKHsgYW5ndWxhclZlcnNpb246ICcxLjYuNCcgfSk7XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qIGdsb2JhbFxuICBKUUxpdGVQcm90b3R5cGU6IHRydWUsXG4gIEJPT0xFQU5fQVRUUjogdHJ1ZSxcbiAgQUxJQVNFRF9BVFRSOiB0cnVlXG4qL1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL0pRTGl0ZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogV3JhcHMgYSByYXcgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgYXMgYSBbalF1ZXJ5XShodHRwOi8vanF1ZXJ5LmNvbSkgZWxlbWVudC5cbiAqXG4gKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlXG4gKiBbalF1ZXJ5XShodHRwOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5LykgZnVuY3Rpb24uIElmIGpRdWVyeSBpcyBub3QgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YFxuICogZGVsZWdhdGVzIHRvIEFuZ3VsYXIncyBidWlsdC1pbiBzdWJzZXQgb2YgalF1ZXJ5LCBjYWxsZWQgXCJqUXVlcnkgbGl0ZVwiIG9yICoqanFMaXRlKiouXG4gKlxuICoganFMaXRlIGlzIGEgdGlueSwgQVBJLWNvbXBhdGlibGUgc3Vic2V0IG9mIGpRdWVyeSB0aGF0IGFsbG93c1xuICogQW5ndWxhciB0byBtYW5pcHVsYXRlIHRoZSBET00gaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgd2F5LiBqcUxpdGUgaW1wbGVtZW50cyBvbmx5IHRoZSBtb3N0XG4gKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LlxuICpcbiAqIFRvIHVzZSBgalF1ZXJ5YCwgc2ltcGx5IGVuc3VyZSBpdCBpcyBsb2FkZWQgYmVmb3JlIHRoZSBgYW5ndWxhci5qc2AgZmlsZS4gWW91IGNhbiBhbHNvIHVzZSB0aGVcbiAqIHtAbGluayBuZ0pxIGBuZ0pxYH0gZGlyZWN0aXZlIHRvIHNwZWNpZnkgdGhhdCBqcWxpdGUgc2hvdWxkIGJlIHVzZWQgb3ZlciBqUXVlcnksIG9yIHRvIHVzZSBhXG4gKiBzcGVjaWZpYyB2ZXJzaW9uIG9mIGpRdWVyeSBpZiBtdWx0aXBsZSB2ZXJzaW9ucyBleGlzdCBvbiB0aGUgcGFnZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPioqTm90ZToqKiBBbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yXG4gKiBqcUxpdGUgKHN1Y2ggYXMgdGhlIGVsZW1lbnQgYXJndW1lbnQgaW4gYSBkaXJlY3RpdmUncyBjb21waWxlIC8gbGluayBmdW5jdGlvbikuIFRoZXkgYXJlIG5ldmVyIHJhdyBET00gcmVmZXJlbmNlcy48L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPioqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgbm90IGZpbmQgZWxlbWVudHNcbiAqIGJ5IHRhZyBuYW1lIC8gQ1NTIHNlbGVjdG9yLiBGb3IgbG9va3VwcyBieSB0YWcgbmFtZSwgdHJ5IGluc3RlYWQgYGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCguLi4pYFxuICogb3IgYCRkb2N1bWVudC5maW5kKClgLCBvciB1c2UgdGhlIHN0YW5kYXJkIERPTSBBUElzLCBlLmcuIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKClgLjwvZGl2PlxuICpcbiAqICMjIEFuZ3VsYXIncyBqcUxpdGVcbiAqIGpxTGl0ZSBwcm92aWRlcyBvbmx5IHRoZSBmb2xsb3dpbmcgalF1ZXJ5IG1ldGhvZHM6XG4gKlxuICogLSBbYGFkZENsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKSAtIERvZXMgbm90IHN1cHBvcnQgYSBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudFxuICogLSBbYGFmdGVyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWZ0ZXIvKVxuICogLSBbYGFwcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC8pXG4gKiAtIFtgYXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKSAtIERvZXMgbm90IHN1cHBvcnQgZnVuY3Rpb25zIGFzIHBhcmFtZXRlcnNcbiAqIC0gW2BiaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYmluZC8pIChfZGVwcmVjYXRlZF8sIHVzZSBbYG9uKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb24vKSkgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BjaGlsZHJlbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYGNsb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvKVxuICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKVxuICogLSBbYGNzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nzcy8pIC0gT25seSByZXRyaWV2ZXMgaW5saW5lLXN0eWxlcywgZG9lcyBub3QgY2FsbCBgZ2V0Q29tcHV0ZWRTdHlsZSgpYC5cbiAqICAgQXMgYSBzZXR0ZXIsIGRvZXMgbm90IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdzIG9yIGFwcGVuZCAncHgnLCBhbmQgYWxzbyBkb2VzIG5vdCBoYXZlIGF1dG9tYXRpYyBwcm9wZXJ0eSBwcmVmaXhpbmcuXG4gKiAtIFtgZGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RhdGEvKVxuICogLSBbYGRldGFjaCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RldGFjaC8pXG4gKiAtIFtgZW1wdHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lbXB0eS8pXG4gKiAtIFtgZXEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pXG4gKiAtIFtgZmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2ZpbmQvKSAtIExpbWl0ZWQgdG8gbG9va3VwcyBieSB0YWcgbmFtZVxuICogLSBbYGhhc0NsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaGFzQ2xhc3MvKVxuICogLSBbYGh0bWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLylcbiAqIC0gW2BuZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BvbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50IG9iamVjdCBhcyBwYXJhbWV0ZXJcbiAqIC0gW2BvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbmUvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnNcbiAqIC0gW2BwYXJlbnQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wYXJlbnQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgcHJlcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKVxuICogLSBbYHByb3AoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcm9wLylcbiAqIC0gW2ByZWFkeSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlYWR5LykgKF9kZXByZWNhdGVkXywgdXNlIGBhbmd1bGFyLmVsZW1lbnQoY2FsbGJhY2spYCBpbnN0ZWFkIG9mIGBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGNhbGxiYWNrKWApXG4gKiAtIFtgcmVtb3ZlKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlLylcbiAqIC0gW2ByZW1vdmVBdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBtdWx0aXBsZSBhdHRyaWJ1dGVzXG4gKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pIC0gRG9lcyBub3Qgc3VwcG9ydCBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XG4gKiAtIFtgcmVtb3ZlRGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZURhdGEvKVxuICogLSBbYHJlcGxhY2VXaXRoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVwbGFjZVdpdGgvKVxuICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LylcbiAqIC0gW2B0b2dnbGVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RvZ2dsZUNsYXNzLykgLSBEb2VzIG5vdCBzdXBwb3J0IGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcbiAqIC0gW2B0cmlnZ2VySGFuZGxlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RyaWdnZXJIYW5kbGVyLykgLSBQYXNzZXMgYSBkdW1teSBldmVudCBvYmplY3QgdG8gaGFuZGxlcnNcbiAqIC0gW2B1bmJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS91bmJpbmQvKSAoX2RlcHJlY2F0ZWRfLCB1c2UgW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSkgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3IgZXZlbnQgb2JqZWN0IGFzIHBhcmFtZXRlclxuICogLSBbYHZhbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ZhbC8pXG4gKiAtIFtgd3JhcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3dyYXAvKVxuICpcbiAqICMjIGpRdWVyeS9qcUxpdGUgRXh0cmFzXG4gKiBBbmd1bGFyIGFsc28gcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIG1ldGhvZHMgYW5kIGV2ZW50cyB0byBib3RoIGpRdWVyeSBhbmQganFMaXRlOlxuICpcbiAqICMjIyBFdmVudHNcbiAqIC0gYCRkZXN0cm95YCAtIEFuZ3VsYXJKUyBpbnRlcmNlcHRzIGFsbCBqcUxpdGUvalF1ZXJ5J3MgRE9NIGRlc3RydWN0aW9uIGFwaXMgYW5kIGZpcmVzIHRoaXMgZXZlbnRcbiAqICAgIG9uIGFsbCBET00gbm9kZXMgYmVpbmcgcmVtb3ZlZC4gIFRoaXMgY2FuIGJlIHVzZWQgdG8gY2xlYW4gdXAgYW55IDNyZCBwYXJ0eSBiaW5kaW5ncyB0byB0aGUgRE9NXG4gKiAgICBlbGVtZW50IGJlZm9yZSBpdCBpcyByZW1vdmVkLlxuICpcbiAqICMjIyBNZXRob2RzXG4gKiAtIGBjb250cm9sbGVyKG5hbWUpYCAtIHJldHJpZXZlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIEJ5IGRlZmF1bHRcbiAqICAgcmV0cmlldmVzIGNvbnRyb2xsZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUuIElmIGBuYW1lYCBpcyBwcm92aWRlZCBhc1xuICogICBjYW1lbENhc2UgZGlyZWN0aXZlIG5hbWUsIHRoZW4gdGhlIGNvbnRyb2xsZXIgZm9yIHRoaXMgZGlyZWN0aXZlIHdpbGwgYmUgcmV0cmlldmVkIChlLmcuXG4gKiAgIGAnbmdNb2RlbCdgKS5cbiAqIC0gYGluamVjdG9yKClgIC0gcmV0cmlldmVzIHRoZSBpbmplY3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuXG4gKiAtIGBzY29wZSgpYCAtIHJldHJpZXZlcyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IG9mIHRoZSBjdXJyZW50XG4gKiAgIGVsZW1lbnQgb3IgaXRzIHBhcmVudC4gUmVxdWlyZXMge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGVidWcgRGF0YX0gdG9cbiAqICAgYmUgZW5hYmxlZC5cbiAqIC0gYGlzb2xhdGVTY29wZSgpYCAtIHJldHJpZXZlcyBhbiBpc29sYXRlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBpZiBvbmUgaXMgYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlXG4gKiAgIGN1cnJlbnQgZWxlbWVudC4gVGhpcyBnZXR0ZXIgc2hvdWxkIGJlIHVzZWQgb25seSBvbiBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYSBkaXJlY3RpdmUgd2hpY2ggc3RhcnRzIGEgbmV3IGlzb2xhdGVcbiAqICAgc2NvcGUuIENhbGxpbmcgYHNjb3BlKClgIG9uIHRoaXMgZWxlbWVudCBhbHdheXMgcmV0dXJucyB0aGUgb3JpZ2luYWwgbm9uLWlzb2xhdGUgc2NvcGUuXG4gKiAgIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvIGJlIGVuYWJsZWQuXG4gKiAtIGBpbmhlcml0ZWREYXRhKClgIC0gc2FtZSBhcyBgZGF0YSgpYCwgYnV0IHdhbGtzIHVwIHRoZSBET00gdW50aWwgYSB2YWx1ZSBpcyBmb3VuZCBvciB0aGUgdG9wXG4gKiAgIHBhcmVudCBlbGVtZW50IGlzIHJlYWNoZWQuXG4gKlxuICogQGtub3duSXNzdWUgWW91IGNhbm5vdCBzcHkgb24gYGFuZ3VsYXIuZWxlbWVudGAgaWYgeW91IGFyZSB1c2luZyBKYXNtaW5lIHZlcnNpb24gMS54LiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE0MjUxIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDE7XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIERBU0hfTE9XRVJDQVNFX1JFR0VYUCA9IC8tKFthLXpdKS9nO1xudmFyIE1TX0hBQ0tfUkVHRVhQID0gL14tbXMtLztcbnZhciBNT1VTRV9FVkVOVF9NQVAgPSB7IG1vdXNlbGVhdmU6ICdtb3VzZW91dCcsIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInIH07XG52YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBrZWJhYi1jYXNlIHRvIGNhbWVsQ2FzZS5cbiAqIFRoZXJlIGlzIGFsc28gYSBzcGVjaWFsIGNhc2UgZm9yIHRoZSBtcyBwcmVmaXggc3RhcnRpbmcgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXIuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICovXG5mdW5jdGlvbiBjc3NLZWJhYlRvQ2FtZWwobmFtZSkge1xuICAgIHJldHVybiBrZWJhYlRvQ2FtZWwobmFtZS5yZXBsYWNlKE1TX0hBQ0tfUkVHRVhQLCAnbXMtJykpO1xufVxuXG5mdW5jdGlvbiBmbkNhbWVsQ2FzZVJlcGxhY2UoYWxsLCBsZXR0ZXIpIHtcbiAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGtlYmFiLWNhc2UgdG8gY2FtZWxDYXNlLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24ga2ViYWJUb0NhbWVsKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShEQVNIX0xPV0VSQ0FTRV9SRUdFWFAsIGZuQ2FtZWxDYXNlUmVwbGFjZSk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Oi1dKykvO1xudmFyIFhIVE1MX1RBR19SRUdFWFAgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpO1xuXG52YXIgd3JhcE1hcCA9IHtcbiAgJ29wdGlvbic6IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JywgJzwvc2VsZWN0PiddLFxuXG4gICd0aGVhZCc6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuICAndGQnOiBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ19kZWZhdWx0JzogWzAsICcnLCAnJ11cbn07XG5cbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBqcUxpdGVJc1RleHROb2RlKGh0bWwpIHtcbiAgcmV0dXJuICFIVE1MX1JFR0VYUC50ZXN0KGh0bWwpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVBY2NlcHRzRGF0YShub2RlKSB7XG4gIC8vIFRoZSB3aW5kb3cgb2JqZWN0IGNhbiBhY2NlcHQgZGF0YSBidXQgaGFzIG5vIG5vZGVUeXBlXG4gIC8vIE90aGVyd2lzZSB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIGVsZW1lbnRzICgxKSBhbmQgZG9jdW1lbnRzICg5KVxuICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8ICFub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0RPQ1VNRU5UO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNEYXRhKG5vZGUpIHtcbiAgZm9yICh2YXIga2V5IGluIGpxQ2FjaGVbbm9kZS5uZzMzOV0pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkge1xuICB2YXIgdG1wLCB0YWcsIHdyYXAsXG4gICAgICBmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgbm9kZXMgPSBbXSwgaTtcblxuICBpZiAoanFMaXRlSXNUZXh0Tm9kZShodG1sKSkge1xuICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuICAgIG5vZGVzLnB1c2goY29udGV4dC5jcmVhdGVUZXh0Tm9kZShodG1sKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG4gICAgdG1wID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGV4dC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgdGFnID0gKFRBR19OQU1FX1JFR0VYUC5leGVjKGh0bWwpIHx8IFsnJywgJyddKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIHdyYXAgPSB3cmFwTWFwW3RhZ10gfHwgd3JhcE1hcC5fZGVmYXVsdDtcbiAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwucmVwbGFjZShYSFRNTF9UQUdfUkVHRVhQLCAnPCQxPjwvJDI+JykgKyB3cmFwWzJdO1xuXG4gICAgLy8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG4gICAgaSA9IHdyYXBbMF07XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDtcbiAgICB9XG5cbiAgICBub2RlcyA9IGNvbmNhdChub2RlcywgdG1wLmNoaWxkTm9kZXMpO1xuXG4gICAgdG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICB0bXAudGV4dENvbnRlbnQgPSAnJztcbiAgfVxuXG4gIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcbiAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSAnJztcbiAgZnJhZ21lbnQuaW5uZXJIVE1MID0gJyc7IC8vIENsZWFyIGlubmVyIEhUTUxcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICB9KTtcblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVBhcnNlSFRNTChodG1sLCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IHdpbmRvdy5kb2N1bWVudDtcbiAgdmFyIHBhcnNlZDtcblxuICBpZiAoKHBhcnNlZCA9IFNJTkdMRV9UQUdfUkVHRVhQLmV4ZWMoaHRtbCkpKSB7XG4gICAgcmV0dXJuIFtjb250ZXh0LmNyZWF0ZUVsZW1lbnQocGFyc2VkWzFdKV07XG4gIH1cblxuICBpZiAoKHBhcnNlZCA9IGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkpKSB7XG4gICAgcmV0dXJuIHBhcnNlZC5jaGlsZE5vZGVzO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVXcmFwTm9kZShub2RlLCB3cmFwcGVyKSB7XG4gIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcHBlciwgbm9kZSk7XG4gIH1cblxuICB3cmFwcGVyLmFwcGVuZENoaWxkKG5vZGUpO1xufVxuXG5cbi8vIElFOS0xMSBoYXMgbm8gbWV0aG9kIFwiY29udGFpbnNcIiBpbiBTVkcgZWxlbWVudCBhbmQgaW4gTm9kZS5wcm90b3R5cGUuIEJ1ZyAjMTAyNTkuXG52YXIganFMaXRlQ29udGFpbnMgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgfHwgLyoqIEB0aGlzICovIGZ1bmN0aW9uKGFyZykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICByZXR1cm4gISEodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhcmcpICYgMTYpO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBKUUxpdGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpRTGl0ZSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgdmFyIGFyZ0lzU3RyaW5nO1xuXG4gIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuICAgIGVsZW1lbnQgPSB0cmltKGVsZW1lbnQpO1xuICAgIGFyZ0lzU3RyaW5nID0gdHJ1ZTtcbiAgfVxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlFMaXRlKSkge1xuICAgIGlmIChhcmdJc1N0cmluZyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPT0gJzwnKSB7XG4gICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBKUUxpdGUoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoYXJnSXNTdHJpbmcpIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBqcUxpdGVQYXJzZUhUTUwoZWxlbWVudCkpO1xuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24oZWxlbWVudCkpIHtcbiAgICBqcUxpdGVSZWFkeShlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBlbGVtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlRGVhbG9jKGVsZW1lbnQsIG9ubHlEZXNjZW5kYW50cykge1xuICBpZiAoIW9ubHlEZXNjZW5kYW50cyAmJiBqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkganFMaXRlLmNsZWFuRGF0YShbZWxlbWVudF0pO1xuXG4gIGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpIHtcbiAgICBqcUxpdGUuY2xlYW5EYXRhKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVPZmYoZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29mZmFyZ3MnLCAnanFMaXRlI29mZigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgYXJndW1lbnQnKTtcblxuICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmhhbmRsZTtcblxuICBpZiAoIWhhbmRsZSkgcmV0dXJuOyAvL25vIGxpc3RlbmVycyByZWdpc3RlcmVkXG5cbiAgaWYgKCF0eXBlKSB7XG4gICAgZm9yICh0eXBlIGluIGV2ZW50cykge1xuICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgIH1cbiAgfSBlbHNlIHtcblxuICAgIHZhciByZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVyRm5zID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGlzRGVmaW5lZChmbikpIHtcbiAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJGbnMgfHwgW10sIGZuKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGlzRGVmaW5lZChmbikgJiYgbGlzdGVuZXJGbnMgJiYgbGlzdGVuZXJGbnMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICByZW1vdmVIYW5kbGVyKHR5cGUpO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICByZW1vdmVIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50LCBuYW1lKSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5O1xuICB2YXIgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoZXhwYW5kb1N0b3JlKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGRlbGV0ZSBleHBhbmRvU3RvcmUuZGF0YVtuYW1lXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXhwYW5kb1N0b3JlLmhhbmRsZSkge1xuICAgICAgaWYgKGV4cGFuZG9TdG9yZS5ldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgZXhwYW5kb1N0b3JlLmhhbmRsZSh7fSwgJyRkZXN0cm95Jyk7XG4gICAgICB9XG4gICAgICBqcUxpdGVPZmYoZWxlbWVudCk7XG4gICAgfVxuICAgIGRlbGV0ZSBqcUNhY2hlW2V4cGFuZG9JZF07XG4gICAgZWxlbWVudC5uZzMzOSA9IHVuZGVmaW5lZDsgLy8gZG9uJ3QgZGVsZXRlIERPTSBleHBhbmRvcy4gSUUgYW5kIENocm9tZSBkb24ndCBsaWtlIGl0XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgY3JlYXRlSWZOZWNlc3NhcnkpIHtcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzksXG4gICAgICBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gIGlmIChjcmVhdGVJZk5lY2Vzc2FyeSAmJiAhZXhwYW5kb1N0b3JlKSB7XG4gICAgZWxlbWVudC5uZzMzOSA9IGV4cGFuZG9JZCA9IGpxTmV4dElkKCk7XG4gICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge2V2ZW50czoge30sIGRhdGE6IHt9LCBoYW5kbGU6IHVuZGVmaW5lZH07XG4gIH1cblxuICByZXR1cm4gZXhwYW5kb1N0b3JlO1xufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZURhdGEoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICBpZiAoanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcbiAgICB2YXIgcHJvcDtcblxuICAgIHZhciBpc1NpbXBsZVNldHRlciA9IGlzRGVmaW5lZCh2YWx1ZSk7XG4gICAgdmFyIGlzU2ltcGxlR2V0dGVyID0gIWlzU2ltcGxlU2V0dGVyICYmIGtleSAmJiAhaXNPYmplY3Qoa2V5KTtcbiAgICB2YXIgbWFzc0dldHRlciA9ICFrZXk7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAhaXNTaW1wbGVHZXR0ZXIpO1xuICAgIHZhciBkYXRhID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5kYXRhO1xuXG4gICAgaWYgKGlzU2ltcGxlU2V0dGVyKSB7IC8vIGRhdGEoJ2tleScsIHZhbHVlKVxuICAgICAgZGF0YVtrZWJhYlRvQ2FtZWwoa2V5KV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hc3NHZXR0ZXIpIHsgIC8vIGRhdGEoKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1NpbXBsZUdldHRlcikgeyAvLyBkYXRhKCdrZXknKVxuICAgICAgICAgIC8vIGRvbid0IGZvcmNlIGNyZWF0aW9uIG9mIGV4cGFuZG9TdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFba2ViYWJUb0NhbWVsKGtleSldO1xuICAgICAgICB9IGVsc2UgeyAvLyBtYXNzLXNldHRlcjogZGF0YSh7a2V5MTogdmFsMSwga2V5MjogdmFsMn0pXG4gICAgICAgICAgZm9yIChwcm9wIGluIGtleSkge1xuICAgICAgICAgICAgZGF0YVtrZWJhYlRvQ2FtZWwocHJvcCldID0ga2V5W3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKCcgJyArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAnICcpLnJlcGxhY2UoL1tcXG5cXHRdL2csICcgJykuXG4gICAgICBpbmRleE9mKCcgJyArIHNlbGVjdG9yICsgJyAnKSA+IC0xKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShcbiAgICAgICAgICAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJylcbiAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgJyAnKVxuICAgICAgICAgIC5yZXBsYWNlKCcgJyArIHRyaW0oY3NzQ2xhc3MpICsgJyAnLCAnICcpKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XG4gIGlmIChjc3NDbGFzc2VzICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIGV4aXN0aW5nQ2xhc3NlcyA9ICgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFxuXFx0XS9nLCAnICcpO1xuXG4gICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7XG4gICAgICBjc3NDbGFzcyA9IHRyaW0oY3NzQ2xhc3MpO1xuICAgICAgaWYgKGV4aXN0aW5nQ2xhc3Nlcy5pbmRleE9mKCcgJyArIGNzc0NsYXNzICsgJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgZXhpc3RpbmdDbGFzc2VzICs9IGNzc0NsYXNzICsgJyAnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShleGlzdGluZ0NsYXNzZXMpKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUFkZE5vZGVzKHJvb3QsIGVsZW1lbnRzKSB7XG4gIC8vIFRISVMgQ09ERSBJUyBWRVJZIEhPVC4gRG9uJ3QgbWFrZSBjaGFuZ2VzIHdpdGhvdXQgYmVuY2htYXJraW5nLlxuXG4gIGlmIChlbGVtZW50cykge1xuXG4gICAgLy8gaWYgYSBOb2RlICh0aGUgbW9zdCBjb21tb24gY2FzZSlcbiAgICBpZiAoZWxlbWVudHMubm9kZVR5cGUpIHtcbiAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgLy8gaWYgYW4gQXJyYXkgb3IgTm9kZUxpc3QgYW5kIG5vdCBhIFdpbmRvd1xuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGVsZW1lbnRzLndpbmRvdyAhPT0gZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVDb250cm9sbGVyKGVsZW1lbnQsIG5hbWUpIHtcbiAgcmV0dXJuIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgJyQnICsgKG5hbWUgfHwgJ25nQ29udHJvbGxlcicpICsgJ0NvbnRyb2xsZXInKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAvLyBpZiBlbGVtZW50IGlzIHRoZSBkb2N1bWVudCBvYmplY3Qgd29yayB3aXRoIHRoZSBodG1sIGVsZW1lbnQgaW5zdGVhZFxuICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGVcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgbmFtZXMgPSBpc0FycmF5KG5hbWUpID8gbmFtZSA6IFtuYW1lXTtcblxuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUgPSBqcUxpdGUuZGF0YShlbGVtZW50LCBuYW1lc1tpXSkpKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gSWYgZGVhbGluZyB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB3aXRoIGEgaG9zdCBlbGVtZW50LCBhbmQgbm8gcGFyZW50LCB1c2UgdGhlIGhvc3RcbiAgICAvLyBlbGVtZW50IGFzIHRoZSBwYXJlbnQuIFRoaXMgZW5hYmxlcyBkaXJlY3RpdmVzIHdpdGhpbiBhIFNoYWRvdyBET00gb3IgcG9seWZpbGxlZCBTaGFkb3cgRE9NXG4gICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgJiYgZWxlbWVudC5ob3N0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVFbXB0eShlbGVtZW50KSB7XG4gIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmUoZWxlbWVudCwga2VlcERhdGEpIHtcbiAgaWYgKCFrZWVwRGF0YSkganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRG9jdW1lbnRMb2FkZWQoYWN0aW9uLCB3aW4pIHtcbiAgd2luID0gd2luIHx8IHdpbmRvdztcbiAgaWYgKHdpbi5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgLy8gRm9yY2UgdGhlIGFjdGlvbiB0byBiZSBydW4gYXN5bmMgZm9yIGNvbnNpc3RlbnQgYmVoYXZpb3JcbiAgICAvLyBmcm9tIHRoZSBhY3Rpb24ncyBwb2ludCBvZiB2aWV3XG4gICAgLy8gaS5lLiBpdCB3aWxsIGRlZmluaXRlbHkgbm90IGJlIGluIGEgJGFwcGx5XG4gICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBObyBuZWVkIHRvIHVuYmluZCB0aGlzIGhhbmRsZXIgYXMgbG9hZCBpcyBvbmx5IGV2ZXIgY2FsbGVkIG9uY2VcbiAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVhZHkoZm4pIHtcbiAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdHJpZ2dlcik7XG4gICAgZm4oKTtcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIGRvY3VtZW50IGlzIGFscmVhZHkgbG9hZGVkXG4gIGlmICh3aW5kb3cuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZuKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBjYW4gbm90IHVzZSBqcUxpdGUgc2luY2Ugd2UgYXJlIG5vdCBkb25lIGxvYWRpbmcgYW5kIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgbGF0ZXIuXG5cbiAgICAvLyBXb3JrcyBmb3IgbW9kZXJuIGJyb3dzZXJzIGFuZCBJRTlcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpO1xuXG4gICAgLy8gRmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCBmb3Igb3RoZXJzXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0cmlnZ2VyKTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyB3aGljaCBhcmUgZGVjbGFyZWQgZGlyZWN0bHkuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBKUUxpdGVQcm90b3R5cGUgPSBKUUxpdGUucHJvdG90eXBlID0ge1xuICByZWFkeToganFMaXRlUmVhZHksXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBbXTtcbiAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uKGUpIHsgdmFsdWUucHVzaCgnJyArIGUpO30pO1xuICAgIHJldHVybiAnWycgKyB2YWx1ZS5qb2luKCcsICcpICsgJ10nO1xuICB9LFxuXG4gIGVxOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIChpbmRleCA+PSAwKSA/IGpxTGl0ZSh0aGlzW2luZGV4XSkgOiBqcUxpdGUodGhpc1t0aGlzLmxlbmd0aCArIGluZGV4XSk7XG4gIH0sXG5cbiAgbGVuZ3RoOiAwLFxuICBwdXNoOiBwdXNoLFxuICBzb3J0OiBbXS5zb3J0LFxuICBzcGxpY2U6IFtdLnNwbGljZVxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIGdldHRlci9zZXR0ZXJzLlxuLy8gdGhlc2UgZnVuY3Rpb25zIHJldHVybiBzZWxmIG9uIHNldHRlciBhbmRcbi8vIHZhbHVlIG9uIGdldC5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIEJPT0xFQU5fQVRUUiA9IHt9O1xuZm9yRWFjaCgnbXVsdGlwbGUsc2VsZWN0ZWQsY2hlY2tlZCxkaXNhYmxlZCxyZWFkT25seSxyZXF1aXJlZCxvcGVuJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xuICBCT09MRUFOX0FUVFJbbG93ZXJjYXNlKHZhbHVlKV0gPSB2YWx1ZTtcbn0pO1xudmFyIEJPT0xFQU5fRUxFTUVOVFMgPSB7fTtcbmZvckVhY2goJ2lucHV0LHNlbGVjdCxvcHRpb24sdGV4dGFyZWEsYnV0dG9uLGZvcm0sZGV0YWlscycuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgQk9PTEVBTl9FTEVNRU5UU1t2YWx1ZV0gPSB0cnVlO1xufSk7XG52YXIgQUxJQVNFRF9BVFRSID0ge1xuICAnbmdNaW5sZW5ndGgnOiAnbWlubGVuZ3RoJyxcbiAgJ25nTWF4bGVuZ3RoJzogJ21heGxlbmd0aCcsXG4gICduZ01pbic6ICdtaW4nLFxuICAnbmdNYXgnOiAnbWF4JyxcbiAgJ25nUGF0dGVybic6ICdwYXR0ZXJuJyxcbiAgJ25nU3RlcCc6ICdzdGVwJ1xufTtcblxuZnVuY3Rpb24gZ2V0Qm9vbGVhbkF0dHJOYW1lKGVsZW1lbnQsIG5hbWUpIHtcbiAgLy8gY2hlY2sgZG9tIGxhc3Qgc2luY2Ugd2Ugd2lsbCBtb3N0IGxpa2VseSBmYWlsIG9uIG5hbWVcbiAgdmFyIGJvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW25hbWUudG9Mb3dlckNhc2UoKV07XG5cbiAgLy8gYm9vbGVhbkF0dHIgaXMgaGVyZSB0d2ljZSB0byBtaW5pbWl6ZSBET00gYWNjZXNzXG4gIHJldHVybiBib29sZWFuQXR0ciAmJiBCT09MRUFOX0VMRU1FTlRTW25vZGVOYW1lXyhlbGVtZW50KV0gJiYgYm9vbGVhbkF0dHI7XG59XG5cbmZ1bmN0aW9uIGdldEFsaWFzZWRBdHRyTmFtZShuYW1lKSB7XG4gIHJldHVybiBBTElBU0VEX0FUVFJbbmFtZV07XG59XG5cbmZvckVhY2goe1xuICBkYXRhOiBqcUxpdGVEYXRhLFxuICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLFxuICBoYXNEYXRhOiBqcUxpdGVIYXNEYXRhLFxuICBjbGVhbkRhdGE6IGZ1bmN0aW9uIGpxTGl0ZUNsZWFuRGF0YShub2Rlcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGpxTGl0ZVJlbW92ZURhdGEobm9kZXNbaV0pO1xuICAgIH1cbiAgfVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgSlFMaXRlW25hbWVdID0gZm47XG59KTtcblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsXG5cbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7XG4gIH0sXG5cbiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7XG4gIH0sXG5cbiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlcixcblxuICBpbmplY3RvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gY3NzS2ViYWJUb0NhbWVsKG5hbWUpO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHJldDtcbiAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9BVFRSSUJVVEUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UIHx8XG4gICAgICAhZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbG93ZXJjYXNlZE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgdmFyIGlzQm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIC8vIHNldHRlclxuXG4gICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgKHZhbHVlID09PSBmYWxzZSAmJiBpc0Jvb2xlYW5BdHRyKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIGlzQm9vbGVhbkF0dHIgPyBsb3dlcmNhc2VkTmFtZSA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZ2V0dGVyXG5cbiAgICAgIHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAgICBpZiAoaXNCb29sZWFuQXR0ciAmJiByZXQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0ID0gbG93ZXJjYXNlZE5hbWU7XG4gICAgICB9XG4gICAgICAvLyBOb3JtYWxpemUgbm9uLWV4aXN0aW5nIGF0dHJpYnV0ZXMgdG8gdW5kZWZpbmVkIChhcyBqUXVlcnkpLlxuICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcDogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICB9XG4gIH0sXG5cbiAgdGV4dDogKGZ1bmN0aW9uKCkge1xuICAgIGdldFRleHQuJGR2ID0gJyc7XG4gICAgcmV0dXJuIGdldFRleHQ7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgICAgIHJldHVybiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCkgPyBlbGVtZW50LnRleHRDb250ZW50IDogJyc7XG4gICAgICB9XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9KSgpLFxuXG4gIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yRWFjaChlbGVtZW50Lm9wdGlvbnMsIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gIH0sXG5cbiAgaHRtbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUw7XG4gICAgfVxuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICB9LFxuXG4gIGVtcHR5OiBqcUxpdGVFbXB0eVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIFByb3BlcnRpZXM6IHdyaXRlcyByZXR1cm4gc2VsZWN0aW9uLCByZWFkcyByZXR1cm4gZmlyc3QgdmFsdWVcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7XG4gICAgdmFyIGksIGtleTtcbiAgICB2YXIgbm9kZUNvdW50ID0gdGhpcy5sZW5ndGg7XG5cbiAgICAvLyBqcUxpdGVIYXNDbGFzcyBoYXMgb25seSB0d28gYXJndW1lbnRzLCBidXQgaXMgYSBnZXR0ZXItb25seSBmbiwgc28gd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgaXRcbiAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi5cbiAgICAvLyBqcUxpdGVFbXB0eSB0YWtlcyBubyBhcmd1bWVudHMgYnV0IGlzIGEgc2V0dGVyLlxuICAgIGlmIChmbiAhPT0ganFMaXRlRW1wdHkgJiZcbiAgICAgICAgKGlzVW5kZWZpbmVkKChmbi5sZW5ndGggPT09IDIgJiYgKGZuICE9PSBqcUxpdGVIYXNDbGFzcyAmJiBmbiAhPT0ganFMaXRlQ29udHJvbGxlcikpID8gYXJnMSA6IGFyZzIpKSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGFyZzEpKSB7XG5cbiAgICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIGJ1dCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBrZXkvdmFsdWVzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkge1xuICAgICAgICAgICAgLy8gZGF0YSgpIHRha2VzIHRoZSB3aG9sZSBvYmplY3QgaW4galF1ZXJ5XG4gICAgICAgICAgICBmbih0aGlzW2ldLCBhcmcxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJnMSkge1xuICAgICAgICAgICAgICBmbih0aGlzW2ldLCBrZXksIGFyZzFba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLlxuICAgICAgICAvLyBUT0RPOiBkbyB3ZSBzdGlsbCBuZWVkIHRoaXM/XG4gICAgICAgIHZhciB2YWx1ZSA9IGZuLiRkdjtcbiAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgdmFyIGpqID0gKGlzVW5kZWZpbmVkKHZhbHVlKSkgPyBNYXRoLm1pbihub2RlQ291bnQsIDEpIDogbm9kZUNvdW50O1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICB2YXIgbm9kZVZhbHVlID0gZm4odGhpc1tqXSwgYXJnMSwgYXJnMik7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIHNvIGFwcGx5IHRvIGFsbCBjaGlsZHJlblxuICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykge1xuICB2YXIgZXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQsIHR5cGUpIHtcbiAgICAvLyBqUXVlcnkgc3BlY2lmaWMgYXBpXG4gICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGUgfHwgZXZlbnQudHlwZV07XG4gICAgdmFyIGV2ZW50Rm5zTGVuZ3RoID0gZXZlbnRGbnMgPyBldmVudEZucy5sZW5ndGggOiAwO1xuXG4gICAgaWYgKCFldmVudEZuc0xlbmd0aCkgcmV0dXJuO1xuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCkpIHtcbiAgICAgIHZhciBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgICAgIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBTb21lIGV2ZW50cyBoYXZlIHNwZWNpYWwgaGFuZGxlcnMgdGhhdCB3cmFwIHRoZSByZWFsIGhhbmRsZXJcbiAgICB2YXIgaGFuZGxlcldyYXBwZXIgPSBldmVudEZucy5zcGVjaWFsSGFuZGxlcldyYXBwZXIgfHwgZGVmYXVsdEhhbmRsZXJXcmFwcGVyO1xuXG4gICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgaWYgKChldmVudEZuc0xlbmd0aCA+IDEpKSB7XG4gICAgICBldmVudEZucyA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Rm5zTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBoYW5kbGVyV3JhcHBlcihlbGVtZW50LCBldmVudCwgZXZlbnRGbnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjayBmb3IgYW5ndWxhck1vY2tzL2NsZWFyRGF0YUNhY2hlIHRoYXQgbWFrZXMgaXQgcG9zc2libGUgdG8gZGVyZWdpc3RlciBhbGxcbiAgLy8gICAgICAgZXZlbnRzIG9uIGBlbGVtZW50YFxuICBldmVudEhhbmRsZXIuZWxlbSA9IGVsZW1lbnQ7XG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRIYW5kbGVyV3JhcHBlcihlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBzcGVjaWFsTW91c2VIYW5kbGVyV3JhcHBlcih0YXJnZXQsIGV2ZW50LCBoYW5kbGVyKSB7XG4gIC8vIFJlZmVyIHRvIGpRdWVyeSdzIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlZW50ZXIgJiBtb3VzZWxlYXZlXG4gIC8vIFJlYWQgYWJvdXQgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZTpcbiAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfbW91c2UuaHRtbCNsaW5rOFxuICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gIC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cbiAgLy8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcbiAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpxTGl0ZUNvbnRhaW5zLmNhbGwodGFyZ2V0LCByZWxhdGVkKSkpIHtcbiAgICBoYW5kbGVyLmNhbGwodGFyZ2V0LCBldmVudCk7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIHRyYXZlcnNhbC5cbi8vIFRoZXNlIGZ1bmN0aW9ucyBjaGFpbiByZXN1bHRzIGludG8gYSBzaW5nbGVcbi8vIHNlbGVjdG9yLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mb3JFYWNoKHtcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcblxuICBvbjogZnVuY3Rpb24ganFMaXRlT24oZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb25hcmdzJywgJ2pxTGl0ZSNvbigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgb3IgYGV2ZW50RGF0YWAgcGFyYW1ldGVycycpO1xuXG4gICAgLy8gRG8gbm90IGFkZCBldmVudCBoYW5kbGVycyB0byBub24tZWxlbWVudHMgYmVjYXVzZSB0aGV5IHdpbGwgbm90IGJlIGNsZWFuZWQgdXAuXG4gICAgaWYgKCFqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgdHJ1ZSk7XG4gICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgICBpZiAoIWhhbmRsZSkge1xuICAgICAgaGFuZGxlID0gZXhwYW5kb1N0b3JlLmhhbmRsZSA9IGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpO1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3N0cmluZy1pbmRleG9mLXZzLXNwbGl0XG4gICAgdmFyIHR5cGVzID0gdHlwZS5pbmRleE9mKCcgJykgPj0gMCA/IHR5cGUuc3BsaXQoJyAnKSA6IFt0eXBlXTtcbiAgICB2YXIgaSA9IHR5cGVzLmxlbmd0aDtcblxuICAgIHZhciBhZGRIYW5kbGVyID0gZnVuY3Rpb24odHlwZSwgc3BlY2lhbEhhbmRsZXJXcmFwcGVyLCBub0V2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKCFldmVudEZucykge1xuICAgICAgICBldmVudEZucyA9IGV2ZW50c1t0eXBlXSA9IFtdO1xuICAgICAgICBldmVudEZucy5zcGVjaWFsSGFuZGxlcldyYXBwZXIgPSBzcGVjaWFsSGFuZGxlcldyYXBwZXI7XG4gICAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knICYmICFub0V2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldmVudEZucy5wdXNoKGZuKTtcbiAgICB9O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdHlwZSA9IHR5cGVzW2ldO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICBhZGRIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSwgc3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIpO1xuICAgICAgICBhZGRIYW5kbGVyKHR5cGUsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRIYW5kbGVyKHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBvZmY6IGpxTGl0ZU9mZixcblxuICBvbmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7XG4gICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgIC8vYWRkIHRoZSBsaXN0ZW5lciB0d2ljZSBzbyB0aGF0IHdoZW4gaXQgaXMgY2FsbGVkXG4gICAgLy95b3UgY2FuIHJlbW92ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYW5kIHN0aWxsIGJlXG4gICAgLy9hYmxlIHRvIGNhbGwgZWxlbWVudC5vZmYoZXYsIGZuKSBub3JtYWxseVxuICAgIGVsZW1lbnQub24odHlwZSwgZnVuY3Rpb24gb25GbigpIHtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIGZuKTtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIG9uRm4pO1xuICAgIH0pO1xuICAgIGVsZW1lbnQub24odHlwZSwgZm4pO1xuICB9LFxuXG4gIHJlcGxhY2VXaXRoOiBmdW5jdGlvbihlbGVtZW50LCByZXBsYWNlTm9kZSkge1xuICAgIHZhciBpbmRleCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50KTtcbiAgICBmb3JFYWNoKG5ldyBKUUxpdGUocmVwbGFjZU5vZGUpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBpbmRleC5uZXh0U2libGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaW5kZXggPSBub2RlO1xuICAgIH0pO1xuICB9LFxuXG4gIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfSxcblxuICBjb250ZW50czogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNvbnRlbnREb2N1bWVudCB8fCBlbGVtZW50LmNoaWxkTm9kZXMgfHwgW107XG4gIH0sXG5cbiAgYXBwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7XG4gICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICBpZiAobm9kZVR5cGUgIT09IE5PREVfVFlQRV9FTEVNRU5UICYmIG5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQpIHJldHVybjtcblxuICAgIG5vZGUgPSBuZXcgSlFMaXRlKG5vZGUpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbm9kZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5vZGUpIHtcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgIHZhciBpbmRleCA9IGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICAgIGZvckVhY2gobmV3IEpRTGl0ZShub2RlKSwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICB3cmFwOiBmdW5jdGlvbihlbGVtZW50LCB3cmFwTm9kZSkge1xuICAgIGpxTGl0ZVdyYXBOb2RlKGVsZW1lbnQsIGpxTGl0ZSh3cmFwTm9kZSkuZXEoMCkuY2xvbmUoKVswXSk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBqcUxpdGVSZW1vdmUsXG5cbiAgZGV0YWNoOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAganFMaXRlUmVtb3ZlKGVsZW1lbnQsIHRydWUpO1xuICB9LFxuXG4gIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5ld0VsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5ld0VsZW1lbnRbaV07XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgICBpbmRleCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFkZENsYXNzOiBqcUxpdGVBZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3M6IGpxTGl0ZVJlbW92ZUNsYXNzLFxuXG4gIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3RvciwgY29uZGl0aW9uKSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBmb3JFYWNoKHNlbGVjdG9yLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgY2xhc3NDb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjbGFzc0NvbmRpdGlvbikpIHtcbiAgICAgICAgICBjbGFzc0NvbmRpdGlvbiA9ICFqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIChjbGFzc0NvbmRpdGlvbiA/IGpxTGl0ZUFkZENsYXNzIDoganFMaXRlUmVtb3ZlQ2xhc3MpKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcGFyZW50OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UID8gcGFyZW50IDogbnVsbDtcbiAgfSxcblxuICBuZXh0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9LFxuXG4gIGZpbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgaWYgKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSxcblxuICBjbG9uZToganFMaXRlQ2xvbmUsXG5cbiAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBleHRyYVBhcmFtZXRlcnMpIHtcblxuICAgIHZhciBkdW1teUV2ZW50LCBldmVudEZuc0NvcHksIGhhbmRsZXJBcmdzO1xuICAgIHZhciBldmVudE5hbWUgPSBldmVudC50eXBlIHx8IGV2ZW50O1xuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7XG4gICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgIHZhciBldmVudEZucyA9IGV2ZW50cyAmJiBldmVudHNbZXZlbnROYW1lXTtcblxuICAgIGlmIChldmVudEZucykge1xuICAgICAgLy8gQ3JlYXRlIGEgZHVtbXkgZXZlbnQgdG8gcGFzcyB0byB0aGUgaGFuZGxlcnNcbiAgICAgIGR1bW15RXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgaXNEZWZhdWx0UHJldmVudGVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZTsgfSxcbiAgICAgICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsgdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlOyB9LFxuICAgICAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTsgfSxcbiAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBub29wLFxuICAgICAgICB0eXBlOiBldmVudE5hbWUsXG4gICAgICAgIHRhcmdldDogZWxlbWVudFxuICAgICAgfTtcblxuICAgICAgLy8gSWYgYSBjdXN0b20gZXZlbnQgd2FzIHByb3ZpZGVkIHRoZW4gZXh0ZW5kIG91ciBkdW1teSBldmVudCB3aXRoIGl0XG4gICAgICBpZiAoZXZlbnQudHlwZSkge1xuICAgICAgICBkdW1teUV2ZW50ID0gZXh0ZW5kKGR1bW15RXZlbnQsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgICBldmVudEZuc0NvcHkgPSBzaGFsbG93Q29weShldmVudEZucyk7XG4gICAgICBoYW5kbGVyQXJncyA9IGV4dHJhUGFyYW1ldGVycyA/IFtkdW1teUV2ZW50XS5jb25jYXQoZXh0cmFQYXJhbWV0ZXJzKSA6IFtkdW1teUV2ZW50XTtcblxuICAgICAgZm9yRWFjaChldmVudEZuc0NvcHksIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIGlmICghZHVtbXlFdmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgZm4uYXBwbHkoZWxlbWVudCwgaGFuZGxlckFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7XG4gIC8qKlxuICAgKiBjaGFpbmluZyBmdW5jdGlvbnNcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgLy8gYW55IGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSBuZWVkcyB0byBiZSB3cmFwcGVkXG4gICAgICAgICAgdmFsdWUgPSBqcUxpdGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqcUxpdGVBZGROb2Rlcyh2YWx1ZSwgZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogdGhpcztcbiAgfTtcbn0pO1xuXG4vLyBiaW5kIGxlZ2FjeSBiaW5kL3VuYmluZCB0byBvbi9vZmZcbkpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247XG5KUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmO1xuXG5cbi8vIFByb3ZpZGVyIGZvciBwcml2YXRlICQkanFMaXRlIHNlcnZpY2Vcbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRqcUxpdGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gJCRqcUxpdGUoKSB7XG4gICAgcmV0dXJuIGV4dGVuZChKUUxpdGUsIHtcbiAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlSGFzQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9LFxuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVBZGRDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZVJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy5cbiAqIEhhc2ggb2YgYTpcbiAqICBzdHJpbmcgaXMgc3RyaW5nXG4gKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmdcbiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCxcbiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLlxuICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBoYXNoS2V5KG9iaiwgbmV4dFVpZEZuKSB7XG4gIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTtcblxuICBpZiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iajtcbiAgaWYgKG9ialR5cGUgPT09ICdmdW5jdGlvbicgfHwgKG9ialR5cGUgPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkpIHtcbiAgICBrZXkgPSBvYmouJCRoYXNoS2V5ID0gb2JqVHlwZSArICc6JyArIChuZXh0VWlkRm4gfHwgbmV4dFVpZCkoKTtcbiAgfSBlbHNlIHtcbiAgICBrZXkgPSBvYmpUeXBlICsgJzonICsgb2JqO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuLy8gQSBtaW5pbWFsIEVTMjAxNSBNYXAgaW1wbGVtZW50YXRpb24uXG4vLyBTaG91bGQgYmUgYnVnL2ZlYXR1cmUgZXF1aXZhbGVudCB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBvZiBzdXBwb3J0ZWQgYnJvd3NlcnNcbi8vIChmb3IgdGhlIGZlYXR1cmVzIHJlcXVpcmVkIGluIEFuZ3VsYXIpLlxuLy8gU2VlIGh0dHBzOi8va2FuZ2F4LmdpdGh1Yi5pby9jb21wYXQtdGFibGUvZXM2LyN0ZXN0LU1hcFxudmFyIG5hbktleSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBOZ01hcFNoaW0oKSB7XG4gIHRoaXMuX2tleXMgPSBbXTtcbiAgdGhpcy5fdmFsdWVzID0gW107XG4gIHRoaXMuX2xhc3RLZXkgPSBOYU47XG4gIHRoaXMuX2xhc3RJbmRleCA9IC0xO1xufVxuTmdNYXBTaGltLnByb3RvdHlwZSA9IHtcbiAgX2lkeDogZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gdGhpcy5fbGFzdEtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xhc3RJbmRleDtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEtleSA9IGtleTtcbiAgICB0aGlzLl9sYXN0SW5kZXggPSB0aGlzLl9rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICByZXR1cm4gdGhpcy5fbGFzdEluZGV4O1xuICB9LFxuICBfdHJhbnNmb3JtS2V5OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJOYU4oa2V5KSA/IG5hbktleSA6IGtleTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICB2YXIgaWR4ID0gdGhpcy5faWR4KGtleSk7XG4gICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZXNbaWR4XTtcbiAgICB9XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGtleSA9IHRoaXMuX3RyYW5zZm9ybUtleShrZXkpO1xuICAgIHZhciBpZHggPSB0aGlzLl9pZHgoa2V5KTtcbiAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgaWR4ID0gdGhpcy5fbGFzdEluZGV4ID0gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuX2tleXNbaWR4XSA9IGtleTtcbiAgICB0aGlzLl92YWx1ZXNbaWR4XSA9IHZhbHVlO1xuXG4gICAgLy8gU3VwcG9ydDogSUUxMVxuICAgIC8vIERvIG5vdCBgcmV0dXJuIHRoaXNgIHRvIHNpbXVsYXRlIHRoZSBwYXJ0aWFsIElFMTEgaW1wbGVtZW50YXRpb25cbiAgfSxcbiAgZGVsZXRlOiBmdW5jdGlvbihrZXkpIHtcbiAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICB2YXIgaWR4ID0gdGhpcy5faWR4KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fa2V5cy5zcGxpY2UoaWR4LCAxKTtcbiAgICB0aGlzLl92YWx1ZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgdGhpcy5fbGFzdEtleSA9IE5hTjtcbiAgICB0aGlzLl9sYXN0SW5kZXggPSAtMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gRm9yIG5vdywgYWx3YXlzIHVzZSBgTmdNYXBTaGltYCwgZXZlbiBpZiBgd2luZG93Lk1hcGAgaXMgYXZhaWxhYmxlLiBTb21lIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnNcbi8vIGFyZSBzdGlsbCBidWdneSAob2Z0ZW4gaW4gc3VidGxlIHdheXMpIGFuZCBjYW4gY2F1c2UgaGFyZC10by1kZWJ1ZyBmYWlsdXJlcy4gV2hlbiBuYXRpdmUgYE1hcGBcbi8vIGltcGxlbWVudGF0aW9ucyBnZXQgbW9yZSBzdGFibGUsIHdlIGNhbiByZWNvbnNpZGVyIHN3aXRjaGluZyB0byBgd2luZG93Lk1hcGAgKHdoZW4gYXZhaWxhYmxlKS5cbnZhciBOZ01hcCA9IE5nTWFwU2hpbTtcblxudmFyICQkTWFwUHJvdmlkZXIgPSBbLyoqIEB0aGlzICovZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFtmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gTmdNYXA7XG4gIH1dO1xufV07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAbmFtZSBhbmd1bGFyLmluamVjdG9yXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhbiBpbmplY3RvciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvclxuICogZGVwZW5kZW5jeSBpbmplY3Rpb24gKHNlZSB7QGxpbmsgZ3VpZGUvZGkgZGVwZW5kZW5jeSBpbmplY3Rpb259KS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBtb2R1bGVzIEEgbGlzdCBvZiBtb2R1bGUgZnVuY3Rpb25zIG9yIHRoZWlyIGFsaWFzZXMuIFNlZVxuICogICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIFdoZXRoZXIgdGhlIGluamVjdG9yIHNob3VsZCBiZSBpbiBzdHJpY3QgbW9kZSwgd2hpY2hcbiAqICAgICBkaXNhbGxvd3MgYXJndW1lbnQgbmFtZSBhbm5vdGF0aW9uIGluZmVyZW5jZS5cbiAqIEByZXR1cm5zIHtpbmplY3Rvcn0gSW5qZWN0b3Igb2JqZWN0LiBTZWUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gKlxuICogQGV4YW1wbGVcbiAqIFR5cGljYWwgdXNhZ2VcbiAqIGBgYGpzXG4gKiAgIC8vIGNyZWF0ZSBhbiBpbmplY3RvclxuICogICB2YXIgJGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJ10pO1xuICpcbiAqICAgLy8gdXNlIHRoZSBpbmplY3RvciB0byBraWNrIG9mZiB5b3VyIGFwcGxpY2F0aW9uXG4gKiAgIC8vIHVzZSB0aGUgdHlwZSBpbmZlcmVuY2UgdG8gYXV0byBpbmplY3QgYXJndW1lbnRzLCBvciB1c2UgaW1wbGljaXQgaW5qZWN0aW9uXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCkge1xuICogICAgICRjb21waWxlKCRkb2N1bWVudCkoJHJvb3RTY29wZSk7XG4gKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogU29tZXRpbWVzIHlvdSB3YW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGluamVjdG9yIG9mIGEgY3VycmVudGx5IHJ1bm5pbmcgQW5ndWxhciBhcHBcbiAqIGZyb20gb3V0c2lkZSBBbmd1bGFyLiBQZXJoYXBzLCB5b3Ugd2FudCB0byBpbmplY3QgYW5kIGNvbXBpbGUgc29tZSBtYXJrdXAgYWZ0ZXIgdGhlXG4gKiBhcHBsaWNhdGlvbiBoYXMgYmVlbiBib290c3RyYXBwZWQuIFlvdSBjYW4gZG8gdGhpcyB1c2luZyB0aGUgZXh0cmEgYGluamVjdG9yKClgIGFkZGVkXG4gKiB0byBKUXVlcnkvanFMaXRlIGVsZW1lbnRzLiBTZWUge0BsaW5rIGFuZ3VsYXIuZWxlbWVudH0uXG4gKlxuICogKlRoaXMgaXMgZmFpcmx5IHJhcmUgYnV0IGNvdWxkIGJlIHRoZSBjYXNlIGlmIGEgdGhpcmQgcGFydHkgbGlicmFyeSBpcyBpbmplY3RpbmcgdGhlXG4gKiBtYXJrdXAuKlxuICpcbiAqIEluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSBhIG5ldyBibG9jayBvZiBIVE1MIGNvbnRhaW5pbmcgYSBgbmctY29udHJvbGxlcmBcbiAqIGRpcmVjdGl2ZSBpcyBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCBib2R5IGJ5IEpRdWVyeS4gV2UgdGhlbiBjb21waWxlIGFuZCBsaW5rXG4gKiBpdCBpbnRvIHRoZSBjdXJyZW50IEFuZ3VsYXJKUyBzY29wZS5cbiAqXG4gKiBgYGBqc1xuICogdmFyICRkaXYgPSAkKCc8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNeUN0cmxcIj57e2NvbnRlbnQubGFiZWx9fTwvZGl2PicpO1xuICogJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoJGRpdik7XG4gKlxuICogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5pbmplY3RvcigpLmludm9rZShmdW5jdGlvbigkY29tcGlsZSkge1xuICogICB2YXIgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoJGRpdikuc2NvcGUoKTtcbiAqICAgJGNvbXBpbGUoJGRpdikoc2NvcGUpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgYXV0b1xuICogQGluc3RhbGxhdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogSW1wbGljaXQgbW9kdWxlIHdoaWNoIGdldHMgYXV0b21hdGljYWxseSBhZGRlZCB0byBlYWNoIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICovXG5cbnZhciBBUlJPV19BUkcgPSAvXihbXihdKz8pPT4vO1xudmFyIEZOX0FSR1MgPSAvXlteKF0qXFwoXFxzKihbXildKilcXCkvbTtcbnZhciBGTl9BUkdfU1BMSVQgPSAvLC87XG52YXIgRk5fQVJHID0gL15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC87XG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcblxuZnVuY3Rpb24gc3RyaW5naWZ5Rm4oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZuKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEFyZ3MoZm4pIHtcbiAgdmFyIGZuVGV4dCA9IHN0cmluZ2lmeUZuKGZuKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyksXG4gICAgICBhcmdzID0gZm5UZXh0Lm1hdGNoKEFSUk9XX0FSRykgfHwgZm5UZXh0Lm1hdGNoKEZOX0FSR1MpO1xuICByZXR1cm4gYXJncztcbn1cblxuZnVuY3Rpb24gYW5vbkZuKGZuKSB7XG4gIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW5cbiAgLy8gZGVidWdnaW5nLlxuICB2YXIgYXJncyA9IGV4dHJhY3RBcmdzKGZuKTtcbiAgaWYgKGFyZ3MpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyAoYXJnc1sxXSB8fCAnJykucmVwbGFjZSgvW1xcc1xcclxcbl0rLywgJyAnKSArICcpJztcbiAgfVxuICByZXR1cm4gJ2ZuJztcbn1cblxuZnVuY3Rpb24gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBuYW1lKSB7XG4gIHZhciAkaW5qZWN0LFxuICAgICAgYXJnRGVjbCxcbiAgICAgIGxhc3Q7XG5cbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkge1xuICAgICAgJGluamVjdCA9IFtdO1xuICAgICAgaWYgKGZuLmxlbmd0aCkge1xuICAgICAgICBpZiAoc3RyaWN0RGkpIHtcbiAgICAgICAgICBpZiAoIWlzU3RyaW5nKG5hbWUpIHx8ICFuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3N0cmljdGRpJyxcbiAgICAgICAgICAgICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJnRGVjbCA9IGV4dHJhY3RBcmdzKGZuKTtcbiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24oYWxsLCB1bmRlcnNjb3JlLCBuYW1lKSB7XG4gICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7XG4gICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpO1xuICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuICRpbmplY3Q7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJGluamVjdG9yYCBpcyB1c2VkIHRvIHJldHJpZXZlIG9iamVjdCBpbnN0YW5jZXMgYXMgZGVmaW5lZCBieVxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsXG4gKiBhbmQgbG9hZCBtb2R1bGVzLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6XG4gKlxuICogYGBganNcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTtcbiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICogICAgIHJldHVybiAkaW5qZWN0b3I7XG4gKiAgIH0pKS50b0JlKCRpbmplY3Rvcik7XG4gKiBgYGBcbiAqXG4gKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXG4gKlxuICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZVxuICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogYGBganNcbiAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbihzZXJ2aWNlQSl7fSk7XG4gKlxuICogICAvLyBhbm5vdGF0ZWRcbiAqICAgZnVuY3Rpb24gZXhwbGljaXQoc2VydmljZUEpIHt9O1xuICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddO1xuICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcbiAqXG4gKiAgIC8vIGlubGluZVxuICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xuICogYGBgXG4gKlxuICogIyMgSW5mZXJlbmNlXG4gKlxuICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uXG4gKiBjYW4gdGhlbiBiZSBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gVGhpcyBtZXRob2Qgb2YgZGlzY292ZXJpbmdcbiAqIGFubm90YXRpb25zIGlzIGRpc2FsbG93ZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgaW4gc3RyaWN0IG1vZGUuXG4gKiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGVcbiAqIGFyZ3VtZW50IG5hbWVzLlxuICpcbiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uXG4gKiBCeSBhZGRpbmcgYW4gYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC5cbiAqXG4gKiAjIyBJbmxpbmVcbiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvcGVydHlcbiAqIEBuYW1lICRpbmplY3RvciNtb2R1bGVzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGhhc2ggY29udGFpbmluZyBhbGwgdGhlIG1vZHVsZXMgdGhhdCBoYXZlIGJlZW4gbG9hZGVkIGludG8gdGhlXG4gKiAkaW5qZWN0b3IuXG4gKlxuICogWW91IGNhbiB1c2UgdGhpcyBwcm9wZXJ0eSB0byBmaW5kIG91dCBpbmZvcm1hdGlvbiBhYm91dCBhIG1vZHVsZSB2aWEgdGhlXG4gKiB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjaW5mbyBgbXlNb2R1bGUuaW5mbyguLi4pYH0gbWV0aG9kLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYFxuICogdmFyIGluZm8gPSAkaW5qZWN0b3IubW9kdWxlc1snbmdBbmltYXRlJ10uaW5mbygpO1xuICogYGBgXG4gKlxuICogKipEbyBub3QgdXNlIHRoaXMgcHJvcGVydHkgdG8gYXR0ZW1wdCB0byBtb2RpZnkgdGhlIG1vZHVsZXMgYWZ0ZXIgdGhlIGFwcGxpY2F0aW9uXG4gKiBoYXMgYmVlbiBib290c3RyYXBwZWQuKipcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2dldFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2FsbGVyIEFuIG9wdGlvbmFsIHN0cmluZyB0byBwcm92aWRlIHRoZSBvcmlnaW4gb2YgdGhlIGZ1bmN0aW9uIGNhbGwgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2ludm9rZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlIHRoZSBtZXRob2QgYW5kIHN1cHBseSB0aGUgbWV0aG9kIGFyZ3VtZW50cyBmcm9tIHRoZSBgJGluamVjdG9yYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBUaGUgaW5qZWN0YWJsZSBmdW5jdGlvbiB0byBpbnZva2UuIEZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlXG4gKiAgIGluamVjdGVkIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuXG4gKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2hhc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2luc3RhbnRpYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ld1xuICogb3BlcmF0b3IsIGFuZCBzdXBwbGllcyBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZVxuICogY29uc3RydWN0b3IgYW5ub3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjYW5ub3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpc1xuICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGVcbiAqIGZ1bmN0aW9uIGlzIGludm9rZWQuIFRoZXJlIGFyZSB0aHJlZSB3YXlzIGluIHdoaWNoIHRoZSBmdW5jdGlvbiBjYW4gYmUgYW5ub3RhdGVkIHdpdGggdGhlIG5lZWRlZFxuICogZGVwZW5kZW5jaWVzLlxuICpcbiAqICMgQXJndW1lbnQgbmFtZXNcbiAqXG4gKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lXG4gKiBieSBjb252ZXJ0aW5nIHRoZSBmdW5jdGlvbiBpbnRvIGEgc3RyaW5nIHVzaW5nIGB0b1N0cmluZygpYCBtZXRob2QgYW5kIGV4dHJhY3RpbmcgdGhlIGFyZ3VtZW50XG4gKiBuYW1lcy5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gZGlzYWxsb3cgdGhpcyBtZXRob2QgYnkgdXNpbmcgc3RyaWN0IGluamVjdGlvbiBtb2RlLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZ1xuICogYW5ub3RhdGlvbiBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKlxuICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5nc1xuICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llc1xuICogICBNeUNvbnRyb2xsZXJbJyRpbmplY3QnXSA9IFsnJHNjb3BlJywgJyRyb3V0ZSddO1xuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiAjIFRoZSBhcnJheSBub3RhdGlvblxuICpcbiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqIGlzIHZlcnkgaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW5cbiAqIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZTpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKVxuICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfSk7XG4gKlxuICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nXG4gKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH07XG4gKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTtcbiAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTtcbiAqXG4gKiAgIC8vIFRvIGJldHRlciBzdXBwb3J0IGlubGluZSBmdW5jdGlvbiB0aGUgaW5saW5lIGFubm90YXRpb24gaXMgc3VwcG9ydGVkXG4gKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfV0pO1xuICpcbiAqICAgLy8gVGhlcmVmb3JlXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShcbiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSlcbiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0b1xuICogYmUgcmV0cmlldmVkIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIERpc2FsbG93IGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAqL1xuXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHByb3ZpZGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGEgbnVtYmVyIG9mIG1ldGhvZHMgZm9yIHJlZ2lzdGVyaW5nIGNvbXBvbmVudHNcbiAqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBNYW55IG9mIHRoZXNlIGZ1bmN0aW9ucyBhcmUgYWxzbyBleHBvc2VkIG9uXG4gKiB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9LlxuICpcbiAqIEFuIEFuZ3VsYXIgKipzZXJ2aWNlKiogaXMgYSBzaW5nbGV0b24gb2JqZWN0IGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLiAgVGhlc2UgKipzZXJ2aWNlXG4gKiBmYWN0b3JpZXMqKiBhcmUgZnVuY3Rpb25zIHdoaWNoLCBpbiB0dXJuLCBhcmUgY3JlYXRlZCBieSBhICoqc2VydmljZSBwcm92aWRlcioqLlxuICogVGhlICoqc2VydmljZSBwcm92aWRlcnMqKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLiBXaGVuIGluc3RhbnRpYXRlZCB0aGV5IG11c3QgY29udGFpbiBhXG4gKiBwcm9wZXJ0eSBjYWxsZWQgYCRnZXRgLCB3aGljaCBob2xkcyB0aGUgKipzZXJ2aWNlIGZhY3RvcnkqKiBmdW5jdGlvbi5cbiAqXG4gKiBXaGVuIHlvdSByZXF1ZXN0IGEgc2VydmljZSwgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IGlzIHJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIHRoZVxuICogY29ycmVjdCAqKnNlcnZpY2UgcHJvdmlkZXIqKiwgaW5zdGFudGlhdGluZyBpdCBhbmQgdGhlbiBjYWxsaW5nIGl0cyBgJGdldGAgKipzZXJ2aWNlIGZhY3RvcnkqKlxuICogZnVuY3Rpb24gdG8gZ2V0IHRoZSBpbnN0YW5jZSBvZiB0aGUgKipzZXJ2aWNlKiouXG4gKlxuICogT2Z0ZW4gc2VydmljZXMgaGF2ZSBubyBjb25maWd1cmF0aW9uIG9wdGlvbnMgYW5kIHRoZXJlIGlzIG5vIG5lZWQgdG8gYWRkIG1ldGhvZHMgdG8gdGhlIHNlcnZpY2VcbiAqIHByb3ZpZGVyLiAgVGhlIHByb3ZpZGVyIHdpbGwgYmUgbm8gbW9yZSB0aGFuIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gd2l0aCBhIGAkZ2V0YCBwcm9wZXJ0eS4gRm9yXG4gKiB0aGVzZSBjYXNlcyB0aGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHMgdG8gcmVnaXN0ZXJcbiAqIHNlcnZpY2VzIHdpdGhvdXQgc3BlY2lmeWluZyBhIHByb3ZpZGVyLlxuICpcbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgcHJvdmlkZXIobmFtZSwgcHJvdmlkZXIpfSAtIHJlZ2lzdGVycyBhICoqc2VydmljZSBwcm92aWRlcioqIHdpdGggdGhlXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn1cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgY29uc3RhbnQobmFtZSwgb2JqKX0gLSByZWdpc3RlcnMgYSB2YWx1ZS9vYmplY3QgdGhhdCBjYW4gYmUgYWNjZXNzZWQgYnlcbiAqICAgICBwcm92aWRlcnMgYW5kIHNlcnZpY2VzLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZShuYW1lLCBvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBvbmx5IGJlIGFjY2Vzc2VkIGJ5XG4gKiAgICAgc2VydmljZXMsIG5vdCBwcm92aWRlcnMuXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgZmFjdG9yeShuYW1lLCBmbil9IC0gcmVnaXN0ZXJzIGEgc2VydmljZSAqKmZhY3RvcnkgZnVuY3Rpb24qKlxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZVxuICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShuYW1lLCBGbil9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlXG4gKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3IobmFtZSwgZGVjb3JGbil9IC0gcmVnaXN0ZXJzIGEgKipkZWNvcmF0b3IgZnVuY3Rpb24qKiB0aGF0XG4gKiAgICAgIHdpbGwgYmUgYWJsZSB0byBtb2RpZnkgb3IgcmVwbGFjZSB0aGUgaW1wbGVtZW50YXRpb24gb2YgYW5vdGhlciBzZXJ2aWNlLlxuICpcbiAqIFNlZSB0aGUgaW5kaXZpZHVhbCBtZXRob2RzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcy5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3Byb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqcHJvdmlkZXIgZnVuY3Rpb24qKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gUHJvdmlkZXIgZnVuY3Rpb25zXG4gKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLCB3aG9zZSBpbnN0YW5jZXMgYXJlIHJlc3BvbnNpYmxlIGZvciBcInByb3ZpZGluZ1wiIGEgZmFjdG9yeSBmb3IgYVxuICogc2VydmljZS5cbiAqXG4gKiBTZXJ2aWNlIHByb3ZpZGVyIG5hbWVzIHN0YXJ0IHdpdGggdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdGhleSBwcm92aWRlIGZvbGxvd2VkIGJ5IGBQcm92aWRlcmAuXG4gKiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgaGFzIGEgcHJvdmlkZXIgY2FsbGVkXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0uXG4gKlxuICogU2VydmljZSBwcm92aWRlciBvYmplY3RzIGNhbiBoYXZlIGFkZGl0aW9uYWwgbWV0aG9kcyB3aGljaCBhbGxvdyBjb25maWd1cmF0aW9uIG9mIHRoZSBwcm92aWRlclxuICogYW5kIGl0cyBzZXJ2aWNlLiBJbXBvcnRhbnRseSwgeW91IGNhbiBjb25maWd1cmUgd2hhdCBraW5kIG9mIHNlcnZpY2UgaXMgY3JlYXRlZCBieSB0aGUgYCRnZXRgXG4gKiBtZXRob2QsIG9yIGhvdyB0aGF0IHNlcnZpY2Ugd2lsbCBhY3QuIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9IGhhcyBhXG4gKiBtZXRob2Qge0BsaW5rIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWQgZGVidWdFbmFibGVkfVxuICogd2hpY2ggbGV0cyB5b3Ugc3BlY2lmeSB3aGV0aGVyIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHdpbGwgbG9nIGRlYnVnIG1lc3NhZ2VzIHRvIHRoZVxuICogY29uc29sZSBvciBub3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLiBOT1RFOiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBhdmFpbGFibGUgdW5kZXIgYG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1Byb3ZpZGVyJ2Aga2V5LlxuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKCkpfSBwcm92aWRlciBJZiB0aGUgcHJvdmlkZXIgaXM6XG4gKlxuICogICAtIGBPYmplY3RgOiB0aGVuIGl0IHNob3VsZCBoYXZlIGEgYCRnZXRgIG1ldGhvZC4gVGhlIGAkZ2V0YCBtZXRob2Qgd2lsbCBiZSBpbnZva2VkIHVzaW5nXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSAkaW5qZWN0b3IuaW52b2tlKCl9IHdoZW4gYW4gaW5zdGFuY2UgbmVlZHMgdG8gYmUgY3JlYXRlZC5cbiAqICAgLSBgQ29uc3RydWN0b3JgOiBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBjcmVhdGVkIHVzaW5nXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2luc3RhbnRpYXRlICRpbmplY3Rvci5pbnN0YW50aWF0ZSgpfSwgdGhlbiB0cmVhdGVkIGFzIGBvYmplY3RgLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcblxuICogQGV4YW1wbGVcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNyZWF0ZSBhIHNpbXBsZSBldmVudCB0cmFja2luZyBzZXJ2aWNlIGFuZCByZWdpc3RlciBpdCB1c2luZ1xuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gKlxuICogYGBganNcbiAqICAvLyBEZWZpbmUgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogIGZ1bmN0aW9uIEV2ZW50VHJhY2tlclByb3ZpZGVyKCkge1xuICogICAgdmFyIHRyYWNraW5nVXJsID0gJy90cmFjayc7XG4gKlxuICogICAgLy8gQSBwcm92aWRlciBtZXRob2QgZm9yIGNvbmZpZ3VyaW5nIHdoZXJlIHRoZSB0cmFja2VkIGV2ZW50cyBzaG91bGQgYmVlbiBzYXZlZFxuICogICAgdGhpcy5zZXRUcmFja2luZ1VybCA9IGZ1bmN0aW9uKHVybCkge1xuICogICAgICB0cmFja2luZ1VybCA9IHVybDtcbiAqICAgIH07XG4gKlxuICogICAgLy8gVGhlIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvblxuICogICAgdGhpcy4kZ2V0ID0gWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgIHZhciB0cmFja2VkRXZlbnRzID0ge307XG4gKiAgICAgIHJldHVybiB7XG4gKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHRyYWNrIGFuIGV2ZW50XG4gKiAgICAgICAgZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gKiAgICAgICAgICB2YXIgY291bnQgPSB0cmFja2VkRXZlbnRzW2V2ZW50XSB8fCAwO1xuICogICAgICAgICAgY291bnQgKz0gMTtcbiAqICAgICAgICAgIHRyYWNrZWRFdmVudHNbZXZlbnRdID0gY291bnQ7XG4gKiAgICAgICAgICByZXR1cm4gY291bnQ7XG4gKiAgICAgICAgfSxcbiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gc2F2ZSB0aGUgdHJhY2tlZCBldmVudHMgdG8gdGhlIHRyYWNraW5nVXJsXG4gKiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAkaHR0cC5wb3N0KHRyYWNraW5nVXJsLCB0cmFja2VkRXZlbnRzKTtcbiAqICAgICAgICB9XG4gKiAgICAgIH07XG4gKiAgICB9XTtcbiAqICB9XG4gKlxuICogIGRlc2NyaWJlKCdldmVudFRyYWNrZXInLCBmdW5jdGlvbigpIHtcbiAqICAgIHZhciBwb3N0U3B5O1xuICpcbiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gKiAgICAgIC8vIFJlZ2lzdGVyIHRoZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJ2V2ZW50VHJhY2tlcicsIEV2ZW50VHJhY2tlclByb3ZpZGVyKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbihldmVudFRyYWNrZXJQcm92aWRlcikge1xuICogICAgICAvLyBDb25maWd1cmUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgICAgIGV2ZW50VHJhY2tlclByb3ZpZGVyLnNldFRyYWNraW5nVXJsKCcvY3VzdG9tLXRyYWNrJyk7XG4gKiAgICB9KSk7XG4gKlxuICogICAgaXQoJ3RyYWNrcyBldmVudHMnLCBpbmplY3QoZnVuY3Rpb24oZXZlbnRUcmFja2VyKSB7XG4gKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMSk7XG4gKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMik7XG4gKiAgICB9KSk7XG4gKlxuICogICAgaXQoJ3NhdmVzIHRvIHRoZSB0cmFja2luZyB1cmwnLCBpbmplY3QoZnVuY3Rpb24oZXZlbnRUcmFja2VyLCAkaHR0cCkge1xuICogICAgICBwb3N0U3B5ID0gc3B5T24oJGh0dHAsICdwb3N0Jyk7XG4gKiAgICAgIGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKTtcbiAqICAgICAgZXZlbnRUcmFja2VyLnNhdmUoKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkubm90LnRvRXF1YWwoJy90cmFjaycpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS50b0VxdWFsKCcvY3VzdG9tLXRyYWNrJyk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMV0pLnRvRXF1YWwoeyAnbG9naW4nOiAxIH0pO1xuICogICAgfSkpO1xuICogIH0pO1xuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNmYWN0b3J5XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBmYWN0b3J5KiosIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHRvIHJldHVybiB0aGUgc2VydmljZSBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIgY29uc2lzdHMgb2Ygb25seSBhIGAkZ2V0YCBwcm9wZXJ0eSxcbiAqIHdoaWNoIGlzIHRoZSBnaXZlbiBzZXJ2aWNlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3Ugc2hvdWxkIHVzZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoZ2V0Rm4pfSBpZiB5b3UgZG8gbm90IG5lZWQgdG9cbiAqIGNvbmZpZ3VyZSB5b3VyIHNlcnZpY2UgaW4gYSBwcm92aWRlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSAkZ2V0Rm4gVGhlIGluamVjdGFibGUgJGdldEZuIGZvciB0aGUgaW5zdGFuY2UgY3JlYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hbGx5IHRoaXMgaXMgYSBzaG9ydCBoYW5kIGZvciBgJHByb3ZpZGUucHJvdmlkZXIobmFtZSwgeyRnZXQ6ICRnZXRGbn0pYC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgc2VydmljZVxuICogYGBganNcbiAqICAgJHByb3ZpZGUuZmFjdG9yeSgncGluZycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xuICogICAgIHJldHVybiBmdW5jdGlvbiBwaW5nKCkge1xuICogICAgICAgcmV0dXJuICRodHRwLnNlbmQoJy9waW5nJyk7XG4gKiAgICAgfTtcbiAqICAgfV0pO1xuICogYGBgXG4gKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOlxuICogYGBganNcbiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykge1xuICogICAgIHBpbmcoKTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3NlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGNvbnN0cnVjdG9yKiosIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aXRoIGBuZXdgIHRvIGNyZWF0ZSB0aGUgc2VydmljZVxuICogaW5zdGFuY2UuXG4gKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeVxuICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGluc3RhbmNlIGluc3RhbnRpYXRlZCBieSB0aGUgaW5qZWN0b3IgZnJvbSB0aGUgc2VydmljZSBjb25zdHJ1Y3RvclxuICogZnVuY3Rpb24uXG4gKlxuICogSW50ZXJuYWxseSBpdCBsb29rcyBhIGJpdCBsaWtlIHRoaXM6XG4gKlxuICogYGBgXG4gKiB7XG4gKiAgICRnZXQ6IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0gaWYgeW91IGRlZmluZSB5b3VyIHNlcnZpY2VcbiAqIGFzIGEgdHlwZS9jbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBjb25zdHJ1Y3RvciBBbiBpbmplY3RhYmxlIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbilcbiAqICAgICB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoY2xhc3MpfS5cbiAqIGBgYGpzXG4gKiAgIHZhciBQaW5nID0gZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gKiAgIH07XG4gKlxuICogICBQaW5nLiRpbmplY3QgPSBbJyRodHRwJ107XG4gKlxuICogICBQaW5nLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KCcvcGluZycpO1xuICogICB9O1xuICogICAkcHJvdmlkZS5zZXJ2aWNlKCdwaW5nJywgUGluZyk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZy5zZW5kKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSN2YWx1ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnZhbHVlIHNlcnZpY2UqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgc3VjaCBhcyBhIHN0cmluZywgYVxuICogbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHNcbiAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZVxuICogc2VydmljZSoqLiBUaGF0IGFsc28gbWVhbnMgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGluamVjdCBvdGhlciBzZXJ2aWNlcyBpbnRvIGEgdmFsdWUgc2VydmljZS5cbiAqXG4gKiBWYWx1ZSBzZXJ2aWNlcyBhcmUgc2ltaWxhciB0byBjb25zdGFudCBzZXJ2aWNlcywgZXhjZXB0IHRoYXQgdGhleSBjYW5ub3QgYmUgaW5qZWN0ZWQgaW50byBhXG4gKiBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBidXQgdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBieVxuICogYW4gQW5ndWxhciB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyB2YWx1ZSBzZXJ2aWNlcy5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLnZhbHVlKCdBRE1JTl9VU0VSJywgJ2FkbWluJyk7XG4gKlxuICogICAkcHJvdmlkZS52YWx1ZSgnUm9sZUxvb2t1cCcsIHsgYWRtaW46IDAsIHdyaXRlcjogMSwgcmVhZGVyOiAyIH0pO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ2hhbGZPZicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlIC8gMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjY29uc3RhbnRcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipjb25zdGFudCBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsXG4gKiBhIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiBMaWtlIHRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0sIGl0IGlzIG5vdFxuICogcG9zc2libGUgdG8gaW5qZWN0IG90aGVyIHNlcnZpY2VzIGludG8gYSBjb25zdGFudC5cbiAqXG4gKiBCdXQgdW5saWtlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlfSwgYSBjb25zdGFudCBjYW4gYmVcbiAqIGluamVjdGVkIGludG8gYSBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBhbmQgaXQgY2Fubm90XG4gKiBiZSBvdmVycmlkZGVuIGJ5IGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIGNvbnN0YW50czpcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdTSEFSRF9IRUlHSFQnLCAzMDYpO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ01ZX0NPTE9VUlMnLCBbJ3JlZCcsICdibHVlJywgJ2dyZXknXSk7XG4gKlxuICogICAkcHJvdmlkZS5jb25zdGFudCgnZG91YmxlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUgKiAyO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNkZWNvcmF0b3JcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipkZWNvcmF0b3IgZnVuY3Rpb24qKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQSBkZWNvcmF0b3IgZnVuY3Rpb25cbiAqIGludGVyY2VwdHMgdGhlIGNyZWF0aW9uIG9mIGEgc2VydmljZSwgYWxsb3dpbmcgaXQgdG8gb3ZlcnJpZGUgb3IgbW9kaWZ5IHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIHNlcnZpY2UuIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGRlY29yYXRvciBmdW5jdGlvbiBtYXkgYmUgdGhlIG9yaWdpbmFsIHNlcnZpY2UsIG9yIGEgbmV3IHNlcnZpY2VcbiAqIHRoYXQgcmVwbGFjZXMgKG9yIHdyYXBzIGFuZCBkZWxlZ2F0ZXMgdG8pIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLlxuICpcbiAqIFlvdSBjYW4gZmluZCBvdXQgbW9yZSBhYm91dCB1c2luZyBkZWNvcmF0b3JzIGluIHRoZSB7QGxpbmsgZ3VpZGUvZGVjb3JhdG9yc30gZ3VpZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICogICAgcHJvdmlkZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nXG4gKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuXG4gKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICpcbiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIHJlcGxhY2VkLCBtb25rZXkgcGF0Y2hlZCwgY29uZmlndXJlZCxcbiAqICAgICAgZGVjb3JhdGVkIG9yIGRlbGVnYXRlZCB0by5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSB3ZSBkZWNvcmF0ZSB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB0byBjb252ZXJ0IHdhcm5pbmdzIHRvIGVycm9ycyBieSBpbnRlcmNlcHRpbmdcbiAqIGNhbGxzIHRvIHtAbGluayBuZy4kbG9nI2Vycm9yICRsb2cud2FybigpfS5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmRlY29yYXRvcignJGxvZycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gKiAgICAgJGRlbGVnYXRlLndhcm4gPSAkZGVsZWdhdGUuZXJyb3I7XG4gKiAgICAgcmV0dXJuICRkZWxlZ2F0ZTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihtb2R1bGVzVG9Mb2FkLCBzdHJpY3REaSkge1xuICBzdHJpY3REaSA9IChzdHJpY3REaSA9PT0gdHJ1ZSk7XG4gIHZhciBJTlNUQU5USUFUSU5HID0ge30sXG4gICAgICBwcm92aWRlclN1ZmZpeCA9ICdQcm92aWRlcicsXG4gICAgICBwYXRoID0gW10sXG4gICAgICBsb2FkZWRNb2R1bGVzID0gbmV3IE5nTWFwKCksXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xuICAgICAgICAkcHJvdmlkZToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLFxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXG4gICAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlckluamVjdG9yID0gKHByb3ZpZGVyQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNhbGxlcikpIHtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKGNhbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCAnVW5rbm93biBwcm92aWRlcjogezB9JywgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICAgIH0pKSxcbiAgICAgIGluc3RhbmNlQ2FjaGUgPSB7fSxcbiAgICAgIHByb3RvSW5zdGFuY2VJbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4LCBjYWxsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICB9KSxcbiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSBwcm90b0luc3RhbmNlSW5qZWN0b3I7XG5cbiAgcHJvdmlkZXJDYWNoZVsnJGluamVjdG9yJyArIHByb3ZpZGVyU3VmZml4XSA9IHsgJGdldDogdmFsdWVGbihwcm90b0luc3RhbmNlSW5qZWN0b3IpIH07XG4gIGluc3RhbmNlSW5qZWN0b3IubW9kdWxlcyA9IHByb3ZpZGVySW5qZWN0b3IubW9kdWxlcyA9IGNyZWF0ZU1hcCgpO1xuICB2YXIgcnVuQmxvY2tzID0gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCk7XG4gIGluc3RhbmNlSW5qZWN0b3IgPSBwcm90b0luc3RhbmNlSW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKTtcbiAgaW5zdGFuY2VJbmplY3Rvci5zdHJpY3REaSA9IHN0cmljdERpO1xuICBmb3JFYWNoKHJ1bkJsb2NrcywgZnVuY3Rpb24oZm4pIHsgaWYgKGZuKSBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbik7IH0pO1xuXG4gIHJldHVybiBpbnN0YW5jZUluamVjdG9yO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyAkcHJvdmlkZXJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZnVuY3Rpb24gc3VwcG9ydE9iamVjdChkZWxlZ2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICBmb3JFYWNoKGtleSwgcmV2ZXJzZVBhcmFtcyhkZWxlZ2F0ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm92aWRlcihuYW1lLCBwcm92aWRlcl8pIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnc2VydmljZScpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHByb3ZpZGVyXykgfHwgaXNBcnJheShwcm92aWRlcl8pKSB7XG4gICAgICBwcm92aWRlcl8gPSBwcm92aWRlckluamVjdG9yLmluc3RhbnRpYXRlKHByb3ZpZGVyXyk7XG4gICAgfVxuICAgIGlmICghcHJvdmlkZXJfLiRnZXQpIHtcbiAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigncGdldCcsICdQcm92aWRlciBcXCd7MH1cXCcgbXVzdCBkZWZpbmUgJGdldCBmYWN0b3J5IG1ldGhvZC4nLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIChwcm92aWRlckNhY2hlW25hbWUgKyBwcm92aWRlclN1ZmZpeF0gPSBwcm92aWRlcl8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnkpIHtcbiAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZmFjdG9yeSwgdGhpcyk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VuZGVmJywgJ1Byb3ZpZGVyIFxcJ3swfVxcJyBtdXN0IHJldHVybiBhIHZhbHVlIGZyb20gJGdldCBmYWN0b3J5IG1ldGhvZC4nLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZhY3RvcnkobmFtZSwgZmFjdG9yeUZuLCBlbmZvcmNlKSB7XG4gICAgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHtcbiAgICAgICRnZXQ6IGVuZm9yY2UgIT09IGZhbHNlID8gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnlGbikgOiBmYWN0b3J5Rm5cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcnZpY2UobmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3Rvcik7XG4gICAgfV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWUobmFtZSwgdmFsKSB7IHJldHVybiBmYWN0b3J5KG5hbWUsIHZhbHVlRm4odmFsKSwgZmFsc2UpOyB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnY29uc3RhbnQnKTtcbiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7XG4gICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb3JhdG9yKHNlcnZpY2VOYW1lLCBkZWNvckZuKSB7XG4gICAgdmFyIG9yaWdQcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgpLFxuICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0O1xuXG4gICAgb3JpZ1Byb3ZpZGVyLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7JGRlbGVnYXRlOiBvcmlnSW5zdGFuY2V9KTtcbiAgICB9O1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1vZHVsZSBMb2FkaW5nXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBmdW5jdGlvbiBsb2FkTW9kdWxlcyhtb2R1bGVzVG9Mb2FkKSB7XG4gICAgYXNzZXJ0QXJnKGlzVW5kZWZpbmVkKG1vZHVsZXNUb0xvYWQpIHx8IGlzQXJyYXkobW9kdWxlc1RvTG9hZCksICdtb2R1bGVzVG9Mb2FkJywgJ25vdCBhbiBhcnJheScpO1xuICAgIHZhciBydW5CbG9ja3MgPSBbXSwgbW9kdWxlRm47XG4gICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47XG4gICAgICBsb2FkZWRNb2R1bGVzLnNldChtb2R1bGUsIHRydWUpO1xuXG4gICAgICBmdW5jdGlvbiBydW5JbnZva2VRdWV1ZShxdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBpbnZva2VBcmdzID0gcXVldWVbaV0sXG4gICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7XG5cbiAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGVGbiA9IGFuZ3VsYXJNb2R1bGUobW9kdWxlKTtcbiAgICAgICAgICBpbnN0YW5jZUluamVjdG9yLm1vZHVsZXNbbW9kdWxlXSA9IG1vZHVsZUZuO1xuICAgICAgICAgIHJ1bkJsb2NrcyA9IHJ1bkJsb2Nrcy5jb25jYXQobG9hZE1vZHVsZXMobW9kdWxlRm4ucmVxdWlyZXMpKS5jb25jYXQobW9kdWxlRm4uX3J1bkJsb2Nrcyk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2ludm9rZVF1ZXVlKTtcbiAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5fY29uZmlnQmxvY2tzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0QXJnRm4obW9kdWxlLCAnbW9kdWxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVttb2R1bGUubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLnN0YWNrICYmIGUuc3RhY2suaW5kZXhPZihlLm1lc3NhZ2UpID09PSAtMSkge1xuICAgICAgICAgIC8vIFNhZmFyaSAmIEZGJ3Mgc3RhY2sgdHJhY2VzIGRvbid0IGNvbnRhaW4gZXJyb3IubWVzc2FnZSBjb250ZW50XG4gICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcbiAgICAgICAgICAvLyBTbyBpZiBzdGFjayBkb2Vzbid0IGNvbnRhaW4gbWVzc2FnZSwgd2UgY3JlYXRlIGEgbmV3IHN0cmluZyB0aGF0IGNvbnRhaW5zIGJvdGguXG4gICAgICAgICAgLy8gU2luY2UgZXJyb3Iuc3RhY2sgaXMgcmVhZC1vbmx5IGluIFNhZmFyaSwgSSdtIG92ZXJyaWRpbmcgZSBhbmQgbm90IGUuc3RhY2sgaGVyZS5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXgtYXNzaWduXG4gICAgICAgICAgZSA9IGUubWVzc2FnZSArICdcXG4nICsgZS5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ21vZHVsZXJyJywgJ0ZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcXG57MX0nLFxuICAgICAgICAgICAgICAgICAgbW9kdWxlLCBlLnN0YWNrIHx8IGUubWVzc2FnZSB8fCBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcnVuQmxvY2tzO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGludGVybmFsIEluamVjdG9yXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHtcblxuICAgIGZ1bmN0aW9uIGdldFNlcnZpY2Uoc2VydmljZU5hbWUsIGNhbGxlcikge1xuICAgICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KHNlcnZpY2VOYW1lKSkge1xuICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdjZGVwJywgJ0NpcmN1bGFyIGRlcGVuZGVuY3kgZm91bmQ6IHswfScsXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lICsgJyA8LSAnICsgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gSU5TVEFOVElBVElORztcbiAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBmYWN0b3J5KHNlcnZpY2VOYW1lLCBjYWxsZXIpO1xuICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGluamVjdGlvbkFyZ3MoZm4sIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgJGluamVjdCA9IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUoZm4sIHN0cmljdERpLCBzZXJ2aWNlTmFtZSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSAkaW5qZWN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSAkaW5qZWN0W2ldO1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2l0a24nLFxuICAgICAgICAgICAgICAgICAgJ0luY29ycmVjdCBpbmplY3Rpb24gdG9rZW4hIEV4cGVjdGVkIHNlcnZpY2UgbmFtZSBhcyBzdHJpbmcsIGdvdCB7MH0nLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MucHVzaChsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleSkgPyBsb2NhbHNba2V5XSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTZXJ2aWNlKGtleSwgc2VydmljZU5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ2xhc3MoZnVuYykge1xuICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAvLyBJRSA5LTExIGRvIG5vdCBzdXBwb3J0IGNsYXNzZXMgYW5kIElFOSBsZWFrcyB3aXRoIHRoZSBjb2RlIGJlbG93LlxuICAgICAgaWYgKG1zaWUgfHwgdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuJCRuZ0lzQ2xhc3M7XG4gICAgICBpZiAoIWlzQm9vbGVhbihyZXN1bHQpKSB7XG4gICAgICAgIC8vIFN1cHBvcnQ6IEVkZ2UgMTItMTMgb25seVxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzYxNTYxMzUvXG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuJCRuZ0lzQ2xhc3MgPSAvXig/OmNsYXNzXFxifGNvbnN0cnVjdG9yXFwoKS8udGVzdChzdHJpbmdpZnlGbihmdW5jKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludm9rZShmbiwgc2VsZiwgbG9jYWxzLCBzZXJ2aWNlTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiBsb2NhbHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNlcnZpY2VOYW1lID0gbG9jYWxzO1xuICAgICAgICBsb2NhbHMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IGluamVjdGlvbkFyZ3MoZm4sIGxvY2Fscywgc2VydmljZU5hbWUpO1xuICAgICAgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICAgIGZuID0gZm5bZm4ubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNDbGFzcyhmbikpIHtcbiAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLWludm9rZS1hcHBseS12cy1zd2l0Y2hcbiAgICAgICAgLy8gIzUzODhcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KG51bGwpO1xuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShmbiwgYXJncykpKCk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZShUeXBlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICAvLyBDaGVjayBpZiBUeXBlIGlzIGFubm90YXRlZCBhbmQgdXNlIGp1c3QgdGhlIGdpdmVuIGZ1bmN0aW9uIGF0IG4tMSBhcyBwYXJhbWV0ZXJcbiAgICAgIC8vIGUuZy4gc29tZU1vZHVsZS5mYWN0b3J5KCdncmVldGVyJywgWyckd2luZG93JywgZnVuY3Rpb24ocmVuYW1lZCR3aW5kb3cpIHt9XSk7XG4gICAgICB2YXIgY3RvciA9IChpc0FycmF5KFR5cGUpID8gVHlwZVtUeXBlLmxlbmd0aCAtIDFdIDogVHlwZSk7XG4gICAgICB2YXIgYXJncyA9IGluamVjdGlvbkFyZ3MoVHlwZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7XG4gICAgICAvLyBFbXB0eSBvYmplY3QgYXQgcG9zaXRpb24gMCBpcyBpZ25vcmVkIGZvciBpbnZvY2F0aW9uIHdpdGggYG5ld2AsIGJ1dCByZXF1aXJlZC5cbiAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KGN0b3IsIGFyZ3MpKSgpO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGludm9rZTogaW52b2tlLFxuICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLFxuICAgICAgZ2V0OiBnZXRTZXJ2aWNlLFxuICAgICAgYW5ub3RhdGU6IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUsXG4gICAgICBoYXM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSArIHByb3ZpZGVyU3VmZml4KSB8fCBjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUgPSBhbm5vdGF0ZTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmNob3JTY3JvbGxQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXJcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCBjaGFuZ2VzIHRvXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgc2Nyb2xsIHRvIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoZSBuZXcgaGFzaC48YnIgLz5cbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZy5cbiAgICpcbiAgICogSWYgYXV0b21hdGljIHNjcm9sbGluZyBpcyBkaXNhYmxlZCwgb25lIG11c3QgZXhwbGljaXRseSBjYWxsXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gaW4gb3JkZXIgdG8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlXG4gICAqIGN1cnJlbnQgaGFzaC5cbiAgICovXG4gIHRoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqIEByZXF1aXJlcyAkd2luZG93XG4gICAqIEByZXF1aXJlcyAkbG9jYXRpb25cbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdoZW4gY2FsbGVkLCBpdCBzY3JvbGxzIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlIHNwZWNpZmllZCBgaGFzaGAgb3IgKGlmIG9taXR0ZWQpIHRvIHRoZVxuICAgKiBjdXJyZW50IHZhbHVlIG9mIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSwgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBzcGVjaWZpZWRcbiAgICogaW4gdGhlXG4gICAqIFtIVE1MNSBzcGVjXShodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9icm93c2Vycy5odG1sI2FuLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCkuXG4gICAqXG4gICAqIEl0IGFsc28gd2F0Y2hlcyB0aGUge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG9cbiAgICogbWF0Y2ggYW55IGFuY2hvciB3aGVuZXZlciBpdCBjaGFuZ2VzLiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKCl9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gdXNlIGl0cyB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0IHlPZmZzZXR9IHByb3BlcnR5IHRvIHNwZWNpZnkgYVxuICAgKiB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChlaXRoZXIgZml4ZWQgb3IgZHluYW1pYykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBUaGUgaGFzaCBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB0by4gSWYgb21pdHRlZCwgdGhlIHZhbHVlIG9mXG4gICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldFxuICAgKiBJZiBzZXQsIHNwZWNpZmllcyBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gdGhlcmUgYXJlIGZpeGVkXG4gICAqIHBvc2l0aW9uZWQgZWxlbWVudHMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSwgc3VjaCBhcyBuYXZiYXJzLCBoZWFkZXJzIGV0Yy5cbiAgICpcbiAgICogYHlPZmZzZXRgIGNhbiBiZSBzcGVjaWZpZWQgaW4gdmFyaW91cyB3YXlzOlxuICAgKiAtICoqbnVtYmVyKio6IEEgZml4ZWQgbnVtYmVyIG9mIHBpeGVscyB0byBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz48YnIgLz5cbiAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuXG4gICAqICAgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgKGluIHBpeGVscykuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipqcUxpdGUqKjogQSBqcUxpdGUvalF1ZXJ5IGVsZW1lbnQgdG8gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgb2Zmc2V0LiBUaGUgZGlzdGFuY2UgZnJvbVxuICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz5cbiAgICogICAqKk5vdGUqKjogVGhlIGVsZW1lbnQgd2lsbCBiZSB0YWtlbiBpbnRvIGFjY291bnQgb25seSBhcyBsb25nIGFzIGl0cyBgcG9zaXRpb25gIGlzIHNldCB0b1xuICAgKiAgIGBmaXhlZGAuIFRoaXMgb3B0aW9uIGlzIHVzZWZ1bCwgd2hlbiBkZWFsaW5nIHdpdGggcmVzcG9uc2l2ZSBuYXZiYXJzL2hlYWRlcnMgdGhhdCBhZGp1c3RcbiAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLlxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogSW4gb3JkZXIgZm9yIGB5T2Zmc2V0YCB0byB3b3JrIHByb3Blcmx5LCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgcGxhY2Ugb24gdGhlIGRvY3VtZW50J3Mgcm9vdCBhbmRcbiAgICogbm90IHNvbWUgY2hpbGQgZWxlbWVudC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbEV4YW1wbGVcIiBuYW1lPVwiYW5jaG9yLXNjcm9sbFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGlkPVwic2Nyb2xsQXJlYVwiIG5nLWNvbnRyb2xsZXI9XCJTY3JvbGxDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxhIG5nLWNsaWNrPVwiZ290b0JvdHRvbSgpXCI+R28gdG8gYm90dG9tPC9hPlxuICAgICAgICAgICA8YSBpZD1cImJvdHRvbVwiPjwvYT4gWW91J3JlIGF0IHRoZSBib3R0b20hXG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ1Njcm9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJGFuY2hvclNjcm9sbCcsXG4gICAgICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICRhbmNob3JTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5nb3RvQm90dG9tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbG9jYXRpb24uaGFzaCB0byB0aGUgaWQgb2ZcbiAgICAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgeW91IHdpc2ggdG8gc2Nyb2xsIHRvLlxuICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnYm90dG9tJyk7XG5cbiAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKClcbiAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgICNzY3JvbGxBcmVhIHtcbiAgICAgICAgICAgaGVpZ2h0OiAyODBweDtcbiAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICB9XG5cbiAgICAgICAgICNib3R0b20ge1xuICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgbWFyZ2luLXRvcDogMjAwMHB4O1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKlxuICAgKiA8aHIgLz5cbiAgICogVGhlIGV4YW1wbGUgYmVsb3cgaWxsdXN0cmF0ZXMgdGhlIHVzZSBvZiBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQgKHNwZWNpZmllZCBhcyBhIGZpeGVkIHZhbHVlKS5cbiAgICogU2VlIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsI3lPZmZzZXQgJGFuY2hvclNjcm9sbC55T2Zmc2V0fSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlXCIgbmFtZT1cImFuY2hvci1zY3JvbGwtb2Zmc2V0XCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJmaXhlZC1oZWFkZXJcIiBuZy1jb250cm9sbGVyPVwiaGVhZGVyQ3RybFwiPlxuICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJnb3RvQW5jaG9yKHgpXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICAgIEdvIHRvIGFuY2hvciB7e3h9fVxuICAgICAgICAgICA8L2E+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDxkaXYgaWQ9XCJhbmNob3J7e3h9fVwiIGNsYXNzPVwiYW5jaG9yXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICBBbmNob3Ige3t4fX0gb2YgNVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5ydW4oWyckYW5jaG9yU2Nyb2xsJywgZnVuY3Rpb24oJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICRhbmNob3JTY3JvbGwueU9mZnNldCA9IDUwOyAgIC8vIGFsd2F5cyBzY3JvbGwgYnkgNTAgZXh0cmEgcGl4ZWxzXG4gICAgICAgICAgIH1dKVxuICAgICAgICAgICAuY29udHJvbGxlcignaGVhZGVyQ3RybCcsIFsnJGFuY2hvclNjcm9sbCcsICckbG9jYXRpb24nLCAnJHNjb3BlJyxcbiAgICAgICAgICAgICBmdW5jdGlvbigkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9BbmNob3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBuZXdIYXNoID0gJ2FuY2hvcicgKyB4O1xuICAgICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmhhc2goKSAhPT0gbmV3SGFzaCkge1xuICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgJGxvY2F0aW9uLmhhc2ggdG8gYG5ld0hhc2hgIGFuZFxuICAgICAgICAgICAgICAgICAgIC8vICRhbmNob3JTY3JvbGwgd2lsbCBhdXRvbWF0aWNhbGx5IHNjcm9sbCB0byBpdFxuICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdhbmNob3InICsgeCk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKCkgZXhwbGljaXRseSxcbiAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSAkbG9jYXRpb24uaGFzaCBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIF0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBib2R5IHtcbiAgICAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5hbmNob3Ige1xuICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDtcbiAgICAgICAgICAgcGFkZGluZzogMTBweCAxMHB4IDIwMHB4IDEwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIge1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwO1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyID4gYSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgbWFyZ2luOiA1cHggMTVweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3RcbiAgICAvLyAodXNpbmcgYEFycmF5I3NvbWUoKWAgaW5zdGVhZCBvZiBgYW5ndWxhciNmb3JFYWNoKClgIHNpbmNlIGl0J3MgbW9yZSBwZXJmb3JtYW50XG4gICAgLy8gIGFuZCB3b3JraW5nIGluIGFsbCBzdXBwb3J0ZWQgYnJvd3NlcnMuKVxuICAgIGZ1bmN0aW9uIGdldEZpcnN0QW5jaG9yKGxpc3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykge1xuICAgICAgICAgIHJlc3VsdCA9IGVsZW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRZT2Zmc2V0KCkge1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gc2Nyb2xsLnlPZmZzZXQ7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0KCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudChvZmZzZXQpKSB7XG4gICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdO1xuICAgICAgICB2YXIgc3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzTnVtYmVyKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtKSB7XG4gICAgICBpZiAoZWxlbSkge1xuICAgICAgICBlbGVtLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgLy8gYG9mZnNldGAgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2Ugc2hvdWxkIHNjcm9sbCBVUCBpbiBvcmRlciB0byBhbGlnbiBgZWxlbWAgcHJvcGVybHkuXG4gICAgICAgICAgLy8gVGhpcyBpcyB0cnVlIE9OTFkgaWYgdGhlIGNhbGwgdG8gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgaW5pdGlhbGx5IGFsaWducyBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gdG9wIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElGIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIHRvcCBvZiBgZWxlbWAgdG8gdGhlIGVuZCBvZiB0aGUgcGFnZSdzIGNvbnRlbnQgaXMgbGVzc1xuICAgICAgICAgIC8vIHRoYW4gdGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHRoZW4gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgd2lsbCBhbGlnbiB0aGUgYGVsZW1gIHNvbWVcbiAgICAgICAgICAvLyB3YXkgZG93biB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UgZm9yIGVsZW1lbnRzIG5lYXIgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMgd2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsIHRoZSB3aG9sZSBgb2Zmc2V0YCB1cCwganVzdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAgICAgLy8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCBhbmQgdGhlIG9mZnNldCwgd2hpY2ggaXMgZW5vdWdoIHRvIGFsaWduIHRoZSB0b3Agb2YgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIGRlc2lyZWQgcG9zaXRpb24uXG4gICAgICAgICAgdmFyIGVsZW1Ub3AgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAkd2luZG93LnNjcm9sbEJ5KDAsIGVsZW1Ub3AgLSBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbChoYXNoKSB7XG4gICAgICAvLyBBbGxvdyBudW1lcmljIGhhc2hlc1xuICAgICAgaGFzaCA9IGlzU3RyaW5nKGhhc2gpID8gaGFzaCA6IGlzTnVtYmVyKGhhc2gpID8gaGFzaC50b1N0cmluZygpIDogJGxvY2F0aW9uLmhhc2goKTtcbiAgICAgIHZhciBlbG07XG5cbiAgICAgIC8vIGVtcHR5IGhhc2gsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpO1xuXG4gICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWRcbiAgICAgIGVsc2UgaWYgKChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1EXG4gICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgLy8gbm8gZWxlbWVudCBhbmQgaGFzaCA9PT0gJ3RvcCcsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgc2Nyb2xsVG8obnVsbCk7XG4gICAgfVxuXG4gICAgLy8gZG9lcyBub3Qgc2Nyb2xsIHdoZW4gdXNlciBjbGlja3Mgb24gYW5jaG9yIGxpbmsgdGhhdCBpcyBjdXJyZW50bHkgb25cbiAgICAvLyAobm8gdXJsIGNoYW5nZSwgbm8gJGxvY2F0aW9uLmhhc2goKSBjaGFuZ2UpLCBicm93c2VyIG5hdGl2ZSBkb2VzIHNjcm9sbFxuICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkge1xuICAgICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoKCkge3JldHVybiAkbG9jYXRpb24uaGFzaCgpO30sXG4gICAgICAgIGZ1bmN0aW9uIGF1dG9TY3JvbGxXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIGluaXRpYWwgc2Nyb2xsIGlmICRsb2NhdGlvbi5oYXNoIGlzIGVtcHR5XG4gICAgICAgICAgaWYgKG5ld1ZhbCA9PT0gb2xkVmFsICYmIG5ld1ZhbCA9PT0gJycpIHJldHVybjtcblxuICAgICAgICAgIGpxTGl0ZURvY3VtZW50TG9hZGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKHNjcm9sbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzY3JvbGw7XG4gIH1dO1xufVxuXG52YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7XG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBOR19BTklNQVRFX0NMQVNTTkFNRSA9ICduZy1hbmltYXRlJztcblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsYikge1xuICBpZiAoIWEgJiYgIWIpIHJldHVybiAnJztcbiAgaWYgKCFhKSByZXR1cm4gYjtcbiAgaWYgKCFiKSByZXR1cm4gYTtcbiAgaWYgKGlzQXJyYXkoYSkpIGEgPSBhLmpvaW4oJyAnKTtcbiAgaWYgKGlzQXJyYXkoYikpIGIgPSBiLmpvaW4oJyAnKTtcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICBpZiAoZWxtLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiBlbG07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0Q2xhc3NlcyhjbGFzc2VzKSB7XG4gIGlmIChpc1N0cmluZyhjbGFzc2VzKSkge1xuICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG4gIH1cblxuICAvLyBVc2UgY3JlYXRlTWFwKCkgdG8gcHJldmVudCBjbGFzcyBhc3N1bXB0aW9ucyBpbnZvbHZpbmcgcHJvcGVydHkgbmFtZXMgaW5cbiAgLy8gT2JqZWN0LnByb3RvdHlwZVxuICB2YXIgb2JqID0gY3JlYXRlTWFwKCk7XG4gIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MpIHtcbiAgICAvLyBzb21ldGltZXMgdGhlIHNwbGl0IGxlYXZlcyBlbXB0eSBzdHJpbmcgdmFsdWVzXG4gICAgLy8gaW5jYXNlIGV4dHJhIHNwYWNlcyB3ZXJlIGFwcGxpZWQgdG8gdGhlIG9wdGlvbnNcbiAgICBpZiAoa2xhc3MubGVuZ3RoKSB7XG4gICAgICBvYmpba2xhc3NdID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG4vLyBpZiBhbnkgb3RoZXIgdHlwZSBvZiBvcHRpb25zIHZhbHVlIGJlc2lkZXMgYW4gT2JqZWN0IHZhbHVlIGlzXG4vLyBwYXNzZWQgaW50byB0aGUgJGFuaW1hdGUubWV0aG9kKCkgYW5pbWF0aW9uIHRoZW4gdGhpcyBoZWxwZXIgY29kZVxuLy8gd2lsbCBiZSBydW4gd2hpY2ggd2lsbCBpZ25vcmUgaXQuIFdoaWxlIHRoaXMgcGF0Y2ggaXMgbm90IHRoZVxuLy8gZ3JlYXRlc3Qgc29sdXRpb24gdG8gdGhpcywgYSBsb3Qgb2YgZXhpc3RpbmcgcGx1Z2lucyBkZXBlbmQgb25cbi8vICRhbmltYXRlIHRvIGVpdGhlciBjYWxsIHRoZSBjYWxsYmFjayAoPCAxLjIpIG9yIHJldHVybiBhIHByb21pc2Vcbi8vIHRoYXQgY2FuIGJlIGNoYW5nZWQuIFRoaXMgaGVscGVyIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCB0aGUgb3B0aW9uc1xuLy8gYXJlIHdpcGVkIGNsZWFuIGluY2FzZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLlxuZnVuY3Rpb24gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9wdGlvbnMpXG4gICAgICA/IG9wdGlvbnNcbiAgICAgIDoge307XG59XG5cbnZhciAkJENvcmVBbmltYXRlSnNQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gbm9vcDtcbn07XG5cbi8vIHRoaXMgaXMgcHJlZml4ZWQgd2l0aCBDb3JlIHNpbmNlIGl0IGNvbmZsaWN0cyB3aXRoXG4vLyB0aGUgYW5pbWF0ZVF1ZXVlUHJvdmlkZXIgZGVmaW5lZCBpbiBuZ0FuaW1hdGUvYW5pbWF0ZVF1ZXVlLmpzXG52YXIgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHZhciBwb3N0RGlnZXN0UXVldWUgPSBuZXcgTmdNYXAoKTtcbiAgdmFyIHBvc3REaWdlc3RFbGVtZW50cyA9IFtdO1xuXG4gIHRoaXMuJGdldCA9IFsnJCRBbmltYXRlUnVubmVyJywgJyRyb290U2NvcGUnLFxuICAgICAgIGZ1bmN0aW9uKCQkQW5pbWF0ZVJ1bm5lciwgICAkcm9vdFNjb3BlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZWQ6IG5vb3AsXG4gICAgICBvbjogbm9vcCxcbiAgICAgIG9mZjogbm9vcCxcbiAgICAgIHBpbjogbm9vcCxcblxuICAgICAgcHVzaDogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGRvbU9wZXJhdGlvbikge1xuICAgICAgICBpZiAoZG9tT3BlcmF0aW9uKSB7XG4gICAgICAgICAgZG9tT3BlcmF0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudG8pIHtcbiAgICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLnRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzIHx8IG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdChlbGVtZW50LCBvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG5cbiAgICAgICAgLy8gc2luY2UgdGhlcmUgYXJlIG5vIGFuaW1hdGlvbnMgdG8gcnVuIHRoZSBydW5uZXIgbmVlZHMgdG8gYmVcbiAgICAgICAgLy8gbm90aWZpZWQgdGhhdCB0aGUgYW5pbWF0aW9uIGNhbGwgaXMgY29tcGxldGUuXG4gICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoZGF0YSwgY2xhc3NlcywgdmFsdWUpIHtcbiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICBpZiAoY2xhc3Nlcykge1xuICAgICAgICBjbGFzc2VzID0gaXNTdHJpbmcoY2xhc3NlcykgPyBjbGFzc2VzLnNwbGl0KCcgJykgOlxuICAgICAgICAgICAgICAgICAgaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBbXTtcbiAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGFbY2xhc3NOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDU1NDbGFzc0NoYW5nZXMoKSB7XG4gICAgICBmb3JFYWNoKHBvc3REaWdlc3RFbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgZGF0YSA9IHBvc3REaWdlc3RRdWV1ZS5nZXQoZWxlbWVudCk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgdmFyIGV4aXN0aW5nID0gc3BsaXRDbGFzc2VzKGVsZW1lbnQuYXR0cignY2xhc3MnKSk7XG4gICAgICAgICAgdmFyIHRvQWRkID0gJyc7XG4gICAgICAgICAgdmFyIHRvUmVtb3ZlID0gJyc7XG4gICAgICAgICAgZm9yRWFjaChkYXRhLCBmdW5jdGlvbihzdGF0dXMsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdmFyIGhhc0NsYXNzID0gISFleGlzdGluZ1tjbGFzc05hbWVdO1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gaGFzQ2xhc3MpIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgICAgIHRvQWRkICs9ICh0b0FkZC5sZW5ndGggPyAnICcgOiAnJykgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9SZW1vdmUgKz0gKHRvUmVtb3ZlLmxlbmd0aCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgICAgIGlmICh0b0FkZCkge1xuICAgICAgICAgICAgICBqcUxpdGVBZGRDbGFzcyhlbG0sIHRvQWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b1JlbW92ZSkge1xuICAgICAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbG0sIHRvUmVtb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3N0RGlnZXN0UXVldWUuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgYWRkLCByZW1vdmUpIHtcbiAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KSB8fCB7fTtcblxuICAgICAgdmFyIGNsYXNzZXNBZGRlZCA9IHVwZGF0ZURhdGEoZGF0YSwgYWRkLCB0cnVlKTtcbiAgICAgIHZhciBjbGFzc2VzUmVtb3ZlZCA9IHVwZGF0ZURhdGEoZGF0YSwgcmVtb3ZlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChjbGFzc2VzQWRkZWQgfHwgY2xhc3Nlc1JlbW92ZWQpIHtcblxuICAgICAgICBwb3N0RGlnZXN0UXVldWUuc2V0KGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICBwb3N0RGlnZXN0RWxlbWVudHMucHVzaChlbGVtZW50KTtcblxuICAgICAgICBpZiAocG9zdERpZ2VzdEVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGhhbmRsZUNTU0NsYXNzQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgJGFuaW1hdGUgdGhhdCBkb2Vzbid0IHBlcmZvcm0gYW55IGFuaW1hdGlvbnMsIGluc3RlYWQganVzdFxuICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET00gdXBkYXRlcyBhbmQgcmVzb2x2ZXMgdGhlIHJldHVybmVkIHJ1bm5lciBwcm9taXNlLlxuICpcbiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbmltYXRpb25zIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC5cbiAqXG4gKiBUbyBzZWUgdGhlIGZ1bmN0aW9uYWwgaW1wbGVtZW50YXRpb24gY2hlY2sgb3V0IGBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanNgLlxuICovXG52YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAgdmFyIHByb3ZpZGVyID0gdGhpcztcbiAgdmFyIGNsYXNzTmFtZUZpbHRlciA9IG51bGw7XG5cbiAgdGhpcy4kJHJlZ2lzdGVyZWRBbmltYXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgbmV3IGluamVjdGFibGUgYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHByb2R1Y2VzIHRoZVxuICAgKiBhbmltYXRpb24gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudCB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlXG4gICAqIGFuaW1hdGVkLlxuICAgKlxuICAgKiAgICogYGV2ZW50Rm5gOiBgZnVuY3Rpb24oZWxlbWVudCwgLi4uICwgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKWBcbiAgICogICBUaGUgZWxlbWVudCB0byBhbmltYXRlLCB0aGUgYGRvbmVGdW5jdGlvbmAgYW5kIHRoZSBvcHRpb25zIGZlZCBpbnRvIHRoZSBhbmltYXRpb24uIERlcGVuZGluZ1xuICAgKiAgIG9uIHRoZSB0eXBlIG9mIGFuaW1hdGlvbiBhZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIGluamVjdGVkIGludG8gdGhlIGFuaW1hdGlvbiBmdW5jdGlvbi4gVGhlXG4gICAqICAgbGlzdCBiZWxvdyBleHBsYWlucyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlcyBmb3IgdGhlIGRpZmZlcmVudCBhbmltYXRpb24gbWV0aG9kczpcbiAgICpcbiAgICogICAtIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGRlZENsYXNzZXMsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgcmVtb3ZlZENsYXNzZXMsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGVudGVyLCBsZWF2ZSwgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZnJvbVN0eWxlcywgdG9TdHlsZXMsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICpcbiAgICogICBNYWtlIHN1cmUgdG8gdHJpZ2dlciB0aGUgYGRvbmVGdW5jdGlvbmAgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGZ1bGx5IGNvbXBsZXRlLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHJldHVybiB7XG4gICAqICAgICAvL2VudGVyLCBsZWF2ZSwgbW92ZSBzaWduYXR1cmVcbiAgICogICAgIGV2ZW50Rm4gOiBmdW5jdGlvbihlbGVtZW50LCBkb25lLCBvcHRpb25zKSB7XG4gICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKVxuICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gZW5kRnVuY3Rpb24od2FzQ2FuY2VsbGVkKSB7XG4gICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uICh0aGlzIGlzIHdoYXQgdGhlIGNsYXNzLWJhc2VkIENTUyB2YWx1ZSB3aWxsIGJlIGNvbXBhcmVkIHRvKS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmFjdG9yeSBUaGUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcmV0dXJuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuXG4gICAqL1xuICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgZmFjdG9yeSkge1xuICAgIGlmIChuYW1lICYmIG5hbWUuY2hhckF0KDApICE9PSAnLicpIHtcbiAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub3Rjc2VsJywgJ0V4cGVjdGluZyBjbGFzcyBzZWxlY3RvciBzdGFydGluZyB3aXRoIFxcJy5cXCcgZ290IFxcJ3swfVxcJy4nLCBuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gbmFtZSArICctYW5pbWF0aW9uJztcbiAgICBwcm92aWRlci4kJHJlZ2lzdGVyZWRBbmltYXRpb25zW25hbWUuc3Vic3RyKDEpXSA9IGtleTtcbiAgICAkcHJvdmlkZS5mYWN0b3J5KGtleSwgZmFjdG9yeSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZ1xuICAgKiBhbiBhbmltYXRpb24uIFVwb24gYm9vdHN0cmFwIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUgaXMgbm90IHNldCBhdCBhbGwgYW5kIHdpbGxcbiAgICogdGhlcmVmb3JlIGVuYWJsZSAkYW5pbWF0ZSB0byBhdHRlbXB0IHRvIHBlcmZvcm0gYW4gYW5pbWF0aW9uIG9uIGFueSBlbGVtZW50IHRoYXQgaXMgdHJpZ2dlcmVkLlxuICAgKiBXaGVuIHNldHRpbmcgdGhlIGBjbGFzc05hbWVGaWx0ZXJgIHZhbHVlLCBhbmltYXRpb25zIHdpbGwgb25seSBiZSBwZXJmb3JtZWQgb24gZWxlbWVudHNcbiAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlXG4gICAqIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzIGFzIHdlbGwgYXMgYXBwbGljYXRpb25zIGNvbnRhaW5pbmcgYSBsb3Qgb2Ygc3RydWN0dXJhbCBvcGVyYXRpb25zLlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IGV4cHJlc3Npb24gVGhlIGNsYXNzTmFtZSBleHByZXNzaW9uIHdoaWNoIHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IGFsbCBhbmltYXRpb25zXG4gICAqIEByZXR1cm4ge1JlZ0V4cH0gVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSBleHByZXNzaW9uIHZhbHVlLiBJZiBudWxsIHRoZW4gdGhlcmUgaXMgbm8gZXhwcmVzc2lvbiB2YWx1ZVxuICAgKi9cbiAgdGhpcy5jbGFzc05hbWVGaWx0ZXIgPSBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNsYXNzTmFtZUZpbHRlciA9IChleHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwKSA/IGV4cHJlc3Npb24gOiBudWxsO1xuICAgICAgaWYgKGNsYXNzTmFtZUZpbHRlcikge1xuICAgICAgICB2YXIgcmVzZXJ2ZWRSZWdleCA9IG5ldyBSZWdFeHAoJ1soXFxcXHN8XFxcXC8pXScgKyBOR19BTklNQVRFX0NMQVNTTkFNRSArICdbKFxcXFxzfFxcXFwvKV0nKTtcbiAgICAgICAgaWYgKHJlc2VydmVkUmVnZXgudGVzdChjbGFzc05hbWVGaWx0ZXIudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICBjbGFzc05hbWVGaWx0ZXIgPSBudWxsO1xuICAgICAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub25nY2xzJywgJyRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKHJlZ2V4KSBwcm9oaWJpdHMgYWNjZXB0aW5nIGEgcmVnZXggdmFsdWUgd2hpY2ggbWF0Y2hlcy9jb250YWlucyB0aGUgXCJ7MH1cIiBDU1MgY2xhc3MuJywgTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGFzc05hbWVGaWx0ZXI7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVRdWV1ZScsIGZ1bmN0aW9uKCQkYW5pbWF0ZVF1ZXVlKSB7XG4gICAgZnVuY3Rpb24gZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCkge1xuICAgICAgLy8gaWYgZm9yIHNvbWUgcmVhc29uIHRoZSBwcmV2aW91cyBlbGVtZW50IHdhcyByZW1vdmVkXG4gICAgICAvLyBmcm9tIHRoZSBkb20gc29tZXRpbWUgYmVmb3JlIHRoaXMgY29kZSBydW5zIHRoZW4gbGV0J3NcbiAgICAgIC8vIGp1c3Qgc3RpY2sgdG8gdXNpbmcgdGhlIHBhcmVudCBlbGVtZW50IGFzIHRoZSBhbmNob3JcbiAgICAgIGlmIChhZnRlckVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFmdGVyTm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShhZnRlckVsZW1lbnQpO1xuICAgICAgICBpZiAoYWZ0ZXJOb2RlICYmICFhZnRlck5vZGUucGFyZW50Tm9kZSAmJiAhYWZ0ZXJOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBhZnRlckVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWZ0ZXJFbGVtZW50KSB7XG4gICAgICAgIGFmdGVyRWxlbWVudC5hZnRlcihlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudEVsZW1lbnQucHJlcGVuZChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIGV4cG9zZXMgYSBzZXJpZXMgb2YgRE9NIHV0aWxpdHkgbWV0aG9kcyB0aGF0IHByb3ZpZGUgc3VwcG9ydFxuICAgICAqIGZvciBhbmltYXRpb24gaG9va3MuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRoZSBhcHBsaWNhdGlvbiBvZiBET00gb3BlcmF0aW9ucywgaG93ZXZlcixcbiAgICAgKiB3aGVuIGFuIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCAoYW5kIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQpLCAkYW5pbWF0ZSB3aWxsIGRvIHRoZSBoZWF2eSBsaWZ0aW5nXG4gICAgICogdG8gZW5zdXJlIHRoYXQgYW5pbWF0aW9uIHJ1bnMgd2l0aCB0aGUgdHJpZ2dlcmVkIERPTSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0ICRhbmltYXRlIGRvZXNuJ3QgdHJpZ2dlciBhbnkgYW5pbWF0aW9ucy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXNuJ3RcbiAgICAgKiBpbmNsdWRlZCBhbmQgb25seSB3aGVuIGl0IGlzIGFjdGl2ZSB0aGVuIHRoZSBhbmltYXRpb24gaG9va3MgdGhhdCBgJGFuaW1hdGVgIHRyaWdnZXJzIHdpbGwgYmVcbiAgICAgKiBmdW5jdGlvbmFsLiBPbmNlIGFjdGl2ZSB0aGVuIGFsbCBzdHJ1Y3R1cmFsIGBuZy1gIGRpcmVjdGl2ZXMgd2lsbCB0cmlnZ2VyIGFuaW1hdGlvbnMgYXMgdGhleSBwZXJmb3JtXG4gICAgICogdGhlaXIgRE9NLXJlbGF0ZWQgb3BlcmF0aW9ucyAoZW50ZXIsIGxlYXZlIGFuZCBtb3ZlKS4gT3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBuZ0NsYXNzYCxcbiAgICAgKiBgbmdTaG93YCwgYG5nSGlkZWAgYW5kIGBuZ01lc3NhZ2VzYCBhbHNvIHByb3ZpZGUgc3VwcG9ydCBmb3IgYW5pbWF0aW9ucy5cbiAgICAgKlxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhlYCRhbmltYXRlYCBzZXJ2aWNlIGlzIGFsd2F5cyB1c2VkIHdoZW4gZXhlY3V0aW5nIERPTS1yZWxhdGVkIHByb2NlZHVyZXMgd2l0aGluIGRpcmVjdGl2ZXMuXG4gICAgICpcbiAgICAgKiBUbyBsZWFybiBtb3JlIGFib3V0IGVuYWJsaW5nIGFuaW1hdGlvbiBzdXBwb3J0LCBjbGljayBoZXJlIHRvIHZpc2l0IHRoZVxuICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZSBwYWdlfS5cbiAgICAgKi9cbiAgICByZXR1cm4ge1xuICAgICAgLy8gd2UgZG9uJ3QgY2FsbCBpdCBkaXJlY3RseSBzaW5jZSBub24tZXhpc3RhbnQgYXJndW1lbnRzIG1heVxuICAgICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgbnVsbCB3aXRoaW4gdGhlIHN1YiBlbmFibGVkIGZ1bmN0aW9uXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI29uXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdXAgYW4gZXZlbnQgbGlzdGVuZXIgdG8gZmlyZSB3aGVuZXZlciB0aGUgYW5pbWF0aW9uIGV2ZW50IChlbnRlciwgbGVhdmUsIG1vdmUsIGV0Yy4uLilcbiAgICAgICAqICAgIGhhcyBmaXJlZCBvbiB0aGUgZ2l2ZW4gZWxlbWVudCBvciBhbW9uZyBhbnkgb2YgaXRzIGNoaWxkcmVuLiBPbmNlIHRoZSBsaXN0ZW5lciBpcyBmaXJlZCwgdGhlIHByb3ZpZGVkIGNhbGxiYWNrXG4gICAgICAgKiAgICBpcyBmaXJlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1zOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAkYW5pbWF0ZS5vbignZW50ZXInLCBjb250YWluZXIsXG4gICAgICAgKiAgICBmdW5jdGlvbiBjYWxsYmFjayhlbGVtZW50LCBwaGFzZSkge1xuICAgICAgICogICAgICAvLyBjb29sIHdlIGRldGVjdGVkIGFuIGVudGVyIGFuaW1hdGlvbiB3aXRoaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICogICAgfVxuICAgICAgICogKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCB0aGUgYW5pbWF0aW9uIGV2ZW50IHRoYXQgd2lsbCBiZSBjYXB0dXJlZCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgZXRjLi4uKVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciBlbGVtZW50IHRoYXQgd2lsbCBjYXB0dXJlIGVhY2ggb2YgdGhlIGFuaW1hdGlvbiBldmVudHMgdGhhdCBhcmUgZmlyZWQgb24gaXRzZWxmXG4gICAgICAgKiAgICAgYXMgd2VsbCBhcyBhbW9uZyBpdHMgY2hpbGRyZW5cbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgbGlzdGVuZXIgaXMgdHJpZ2dlcmVkXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBwcmVzZW50IGluIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBhcmU6XG4gICAgICAgKiAqIGBlbGVtZW50YCAtIFRoZSBjYXB0dXJlZCBET00gZWxlbWVudCB0aGF0IHRoZSBhbmltYXRpb24gd2FzIGZpcmVkIG9uLlxuICAgICAgICogKiBgcGhhc2VgIC0gVGhlIHBoYXNlIG9mIHRoZSBhbmltYXRpb24uIFRoZSB0d28gcG9zc2libGUgcGhhc2VzIGFyZSAqKnN0YXJ0KiogKHdoZW4gdGhlIGFuaW1hdGlvbiBzdGFydHMpIGFuZCAqKmNsb3NlKiogKHdoZW4gaXQgZW5kcykuXG4gICAgICAgKi9cbiAgICAgIG9uOiAkJGFuaW1hdGVRdWV1ZS5vbixcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjb2ZmXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIERlcmVnaXN0ZXJzIGFuIGV2ZW50IGxpc3RlbmVyIGJhc2VkIG9uIHRoZSBldmVudCB3aGljaCBoYXMgYmVlbiBhc3NvY2lhdGVkIHdpdGggdGhlIHByb3ZpZGVkIGVsZW1lbnQuIFRoaXMgbWV0aG9kXG4gICAgICAgKiBjYW4gYmUgdXNlZCBpbiB0aHJlZSBkaWZmZXJlbnQgd2F5cyBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmBcbiAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZW1vdmUgbGlzdGVuZXJzIGZvciBhbGwgYW5pbWF0aW9uIGV2ZW50cyBmcm9tIHRoZSBjb250YWluZXIgZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUub2ZmKGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBwcm92aWRlZCBieSBgY2FsbGJhY2tgIHRoYXQgaXMgc2V0XG4gICAgICAgKiAvLyB0byBsaXN0ZW4gZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGBjb250YWluZXJgIGFzIHdlbGwgYXMgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJywgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBldmVudHxjb250YWluZXIgdGhlIGFuaW1hdGlvbiBldmVudCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsXG4gICAgICAgKiBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGV0Yy4uLiksIG9yIHRoZSBjb250YWluZXIgZWxlbWVudC4gSWYgaXQgaXMgdGhlIGVsZW1lbnQsIGFsbCBvdGhlclxuICAgICAgICogYXJndW1lbnRzIGFyZSBpZ25vcmVkLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGUgZXZlbnQgbGlzdGVuZXIgd2FzIHBsYWNlZCBvblxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdhcyByZWdpc3RlcmVkIGFzIHRoZSBsaXN0ZW5lclxuICAgICAgICovXG4gICAgICBvZmY6ICQkYW5pbWF0ZVF1ZXVlLm9mZixcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNwaW5cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQXNzb2NpYXRlcyB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIGEgaG9zdCBwYXJlbnQgZWxlbWVudCB0byBhbGxvdyB0aGUgZWxlbWVudCB0byBiZSBhbmltYXRlZCBldmVuIGlmIGl0IGV4aXN0c1xuICAgICAgICogICAgb3V0c2lkZSBvZiB0aGUgRE9NIHN0cnVjdHVyZSBvZiB0aGUgQW5ndWxhciBhcHBsaWNhdGlvbi4gQnkgZG9pbmcgc28sIGFueSBhbmltYXRpb24gdHJpZ2dlcmVkIHZpYSBgJGFuaW1hdGVgIGNhbiBiZSBpc3N1ZWQgb24gdGhlXG4gICAgICAgKiAgICBlbGVtZW50IGRlc3BpdGUgYmVpbmcgb3V0c2lkZSB0aGUgcmVhbG0gb2YgdGhlIGFwcGxpY2F0aW9uIG9yIHdpdGhpbiBhbm90aGVyIGFwcGxpY2F0aW9uLiBTYXkgZm9yIGV4YW1wbGUgaWYgdGhlIGFwcGxpY2F0aW9uXG4gICAgICAgKiAgICB3YXMgYm9vdHN0cmFwcGVkIG9uIGFuIGVsZW1lbnQgdGhhdCBpcyBzb21ld2hlcmUgaW5zaWRlIG9mIHRoZSBgPGJvZHk+YCB0YWcsIGJ1dCB3ZSB3YW50ZWQgdG8gYWxsb3cgZm9yIGFuIGVsZW1lbnQgdG8gYmUgc2l0dWF0ZWRcbiAgICAgICAqICAgIGFzIGEgZGlyZWN0IGNoaWxkIG9mIGBkb2N1bWVudC5ib2R5YCwgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSBwaW5uaW5nIHRoZSBlbGVtZW50IHZpYSBgJGFuaW1hdGUucGluKGVsZW1lbnQpYC4gS2VlcCBpbiBtaW5kXG4gICAgICAgKiAgICB0aGF0IGNhbGxpbmcgYCRhbmltYXRlLnBpbihlbGVtZW50LCBwYXJlbnRFbGVtZW50KWAgd2lsbCBub3QgYWN0dWFsbHkgaW5zZXJ0IGludG8gdGhlIERPTSBhbnl3aGVyZTsgaXQgd2lsbCBqdXN0IGNyZWF0ZSB0aGUgYXNzb2NpYXRpb24uXG4gICAgICAgKlxuICAgICAgICogICAgTm90ZSB0aGF0IHRoaXMgZmVhdHVyZSBpcyBvbmx5IGFjdGl2ZSB3aGVuIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXMgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGV4dGVybmFsIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHBpbm5lZFxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnRFbGVtZW50IHRoZSBob3N0IHBhcmVudCBlbGVtZW50IHRoYXQgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dGVybmFsIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgcGluOiAkJGFuaW1hdGVRdWV1ZS5waW4sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VuYWJsZWRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVXNlZCB0byBnZXQgYW5kIHNldCB3aGV0aGVyIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgb3Igbm90IG9uIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gb3Igb24gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLiBUaGlzXG4gICAgICAgKiBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGluIGZvdXIgd2F5czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKCk7XG4gICAgICAgKlxuICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYWxsIGFuaW1hdGlvbnNcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZmFsc2UpO1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCh0cnVlKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2UgaWYgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCBmb3IgYW4gZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50KTtcbiAgICAgICAqXG4gICAgICAgKiAvLyBjaGFuZ2VzIHRoZSBlbmFibGVkIHN0YXRlIGZvciBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGNvbnNpZGVyZWQgZm9yIGNoZWNraW5nL3NldHRpbmcgdGhlIGVuYWJsZWQgc3RhdGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGVuYWJsZWQgd2hldGhlciBvciBub3QgdGhlIGFuaW1hdGlvbnMgd2lsbCBiZSBlbmFibGVkIGZvciB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IGFuaW1hdGlvbnMgYXJlIGVuYWJsZWRcbiAgICAgICAqL1xuICAgICAgZW5hYmxlZDogJCRhbmltYXRlUXVldWUuZW5hYmxlZCxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNjYW5jZWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQ2FuY2VscyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gYW5pbWF0aW9uUHJvbWlzZSBUaGUgYW5pbWF0aW9uIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZCB3aGVuIGFuIGFuaW1hdGlvbiBpcyBzdGFydGVkLlxuICAgICAgICovXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBpZiAocnVubmVyLmVuZCkge1xuICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW50ZXJcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyB0aGUgZWxlbWVudCBpbnRvIHRoZSBET00gZWl0aGVyIGFmdGVyIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgKGlmIHByb3ZpZGVkKSBvclxuICAgICAgICogICBhcyB0aGUgZmlyc3QgY2hpbGQgd2l0aGluIHRoZSBgcGFyZW50YCBlbGVtZW50IGFuZCB0aGVuIHRyaWdnZXJzIGFuIGFuaW1hdGlvbi5cbiAgICAgICAqICAgQSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBkdXJpbmcgdGhlIG5leHQgZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvblxuICAgICAgICogICBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIERPTVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IGFmdGVyIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCAmJiBqcUxpdGUocGFyZW50KTtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlciAmJiBqcUxpdGUoYWZ0ZXIpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgYWZ0ZXIucGFyZW50KCk7XG4gICAgICAgIGRvbUluc2VydChlbGVtZW50LCBwYXJlbnQsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2VudGVyJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI21vdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyAobW92ZXMpIHRoZSBlbGVtZW50IGludG8gaXRzIG5ldyBwb3NpdGlvbiBpbiB0aGUgRE9NIGVpdGhlciBhZnRlclxuICAgICAgICogICB0aGUgYGFmdGVyYCBlbGVtZW50IChpZiBwcm92aWRlZCkgb3IgYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudFxuICAgICAgICogICBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAgICAgICAqICAgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBpbnRvIHRoZSBuZXcgRE9NIHBvc2l0aW9uXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXNcbiAgICAgICAqICAgYSBjaGlsZCAoc28gbG9uZyBhcyB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggdGhlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIgJiYganFMaXRlKGFmdGVyKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdtb3ZlJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjbGVhdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYW5pbWF0aW9uIGFuZCB0aGVuIHJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NLlxuICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0XG4gICAgICAgKiBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdsZWF2ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhbiBhZGRDbGFzcyBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIGFkZGl0aW9uIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIGFkZENsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgYWxyZWFkeSBjb250YWlucyB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyByZW1vdmVkIGF0IGEgbGF0ZXIgc3RlcC5cbiAgICAgICAqICAgTm90ZSB0aGF0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zXG4gICAgICAgKiAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZGNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYWRkQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGEgcmVtb3ZlQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSByZW1vdmFsIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIHJlbW92ZUNsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyBhZGRlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAncmVtb3ZlQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGJvdGggdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mIGEgQ1NTIGNsYXNzZXMgb24gYW4gZWxlbWVudCBhbmQgKGR1cmluZyB0aGUgcHJvY2VzcylcbiAgICAgICAqICAgIHRyaWdnZXJzIGFuIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgY2xhc3MgYWRkaXRpb24vcmVtb3ZhbC4gTXVjaCBsaWtlIGAkYW5pbWF0ZS5hZGRDbGFzc2AgYW5kXG4gICAgICAgKiAgICBgJGFuaW1hdGUucmVtb3ZlQ2xhc3NgLCBgc2V0Q2xhc3NgIHdpbGwgb25seSBldmFsdWF0ZSB0aGUgY2xhc3NlcyBiZWluZyBhZGRlZC9yZW1vdmVkIG9uY2UgYSBkaWdlc3QgaGFzXG4gICAgICAgKiAgICBwYXNzZWQuIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGQgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIHJlbW92ZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgc2V0Q2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRDbGFzcywgYWRkKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCByZW1vdmUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnc2V0Q2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjYW5pbWF0ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUGVyZm9ybXMgYW4gaW5saW5lIGFuaW1hdGlvbiBvbiB0aGUgZWxlbWVudCB3aGljaCBhcHBsaWVzIHRoZSBwcm92aWRlZCB0byBhbmQgZnJvbSBDU1Mgc3R5bGVzIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogSWYgYW55IGRldGVjdGVkIENTUyB0cmFuc2l0aW9uLCBrZXlmcmFtZSBvciBKYXZhU2NyaXB0IG1hdGNoZXMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSB2YWx1ZSwgdGhlbiB0aGUgYW5pbWF0aW9uIHdpbGwgdGFrZVxuICAgICAgICogb24gdGhlIHByb3ZpZGVkIHN0eWxlcy4gRm9yIGV4YW1wbGUsIGlmIGEgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgc2V0IGZvciB0aGUgZ2l2ZW4gY2xhc3NOYW1lLCB0aGVuIHRoZSBwcm92aWRlZCBgZnJvbWAgYW5kXG4gICAgICAgKiBgdG9gIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgYWxvbmdzaWRlIHRoZSBnaXZlbiB0cmFuc2l0aW9uLiBJZiB0aGUgQ1NTIHN0eWxlIHByb3ZpZGVkIGluIGBmcm9tYCBkb2VzIG5vdCBoYXZlIGEgY29ycmVzcG9uZGluZ1xuICAgICAgICogc3R5bGUgaW4gYHRvYCwgdGhlIHN0eWxlIGluIGBmcm9tYCBpcyBhcHBsaWVkIGltbWVkaWF0ZWx5LCBhbmQgbm8gYW5pbWF0aW9uIGlzIHJ1bi5cbiAgICAgICAqIElmIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGUgcHJvdmlkZWQgc3R5bGVzIHdpbGwgYmUgZ2l2ZW4gaW4gYXMgZnVuY3Rpb24gcGFyYW1ldGVycyBpbnRvIHRoZSBgYW5pbWF0ZWBcbiAgICAgICAqIG1ldGhvZCAob3IgYXMgcGFydCBvZiB0aGUgYG9wdGlvbnNgIHBhcmFtZXRlcik6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIG5nTW9kdWxlLmFuaW1hdGlvbignLm15LWlubGluZS1hbmltYXRpb24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAqICAgcmV0dXJuIHtcbiAgICAgICAqICAgICBhbmltYXRlIDogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGRvbmUsIG9wdGlvbnMpIHtcbiAgICAgICAqICAgICAgIC8vYW5pbWF0aW9uXG4gICAgICAgKiAgICAgICBkb25lKCk7XG4gICAgICAgKiAgICAgfVxuICAgICAgICogICB9XG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmcm9tIHRoZSBmcm9tIChzdGFydGluZykgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdG8gdGhlIHRvIChkZXN0aW5hdGlvbikgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGNsYXNzTmFtZSBhbiBvcHRpb25hbCBDU1MgY2xhc3MgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLiBJZlxuICAgICAgICogICAgdGhpcyB2YWx1ZSBpcyBsZWZ0IGFzIGVtcHR5IHRoZW4gYSBDU1MgY2xhc3Mgb2YgYG5nLWlubGluZS1hbmltYXRlYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgICAoTm90ZSB0aGF0IGlmIG5vIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCB0aGVuIHRoaXMgdmFsdWUgd2lsbCBub3QgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC4pXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhbmltYXRlOiBmdW5jdGlvbihlbGVtZW50LCBmcm9tLCB0bywgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSA/IGV4dGVuZChvcHRpb25zLmZyb20sIGZyb20pIDogZnJvbTtcbiAgICAgICAgb3B0aW9ucy50byAgID0gb3B0aW9ucy50byAgID8gZXh0ZW5kKG9wdGlvbnMudG8sIHRvKSAgICAgOiB0bztcblxuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgJ25nLWlubGluZS1hbmltYXRlJztcbiAgICAgICAgb3B0aW9ucy50ZW1wQ2xhc3NlcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnRlbXBDbGFzc2VzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYW5pbWF0ZScsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xufV07XG5cbnZhciAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsIGZ1bmN0aW9uKCQkckFGKSB7XG4gICAgdmFyIHdhaXRRdWV1ZSA9IFtdO1xuXG4gICAgZnVuY3Rpb24gd2FpdEZvclRpY2soZm4pIHtcbiAgICAgIHdhaXRRdWV1ZS5wdXNoKGZuKTtcbiAgICAgIGlmICh3YWl0UXVldWUubGVuZ3RoID4gMSkgcmV0dXJuO1xuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2FpdFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgd2FpdFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2FpdFF1ZXVlID0gW107XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFzc2VkID0gZmFsc2U7XG4gICAgICB3YWl0Rm9yVGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgcGFzc2VkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChwYXNzZWQpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhaXRGb3JUaWNrKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XTtcbn07XG5cbnZhciAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJHEnLCAnJHNuaWZmZXInLCAnJCRhbmltYXRlQXN5bmNSdW4nLCAnJCRpc0RvY3VtZW50SGlkZGVuJywgJyR0aW1lb3V0JyxcbiAgICAgICBmdW5jdGlvbigkcSwgICAkc25pZmZlciwgICAkJGFuaW1hdGVBc3luY1J1biwgICAkJGlzRG9jdW1lbnRIaWRkZW4sICAgJHRpbWVvdXQpIHtcblxuICAgIHZhciBJTklUSUFMX1NUQVRFID0gMDtcbiAgICB2YXIgRE9ORV9QRU5ESU5HX1NUQVRFID0gMTtcbiAgICB2YXIgRE9ORV9DT01QTEVURV9TVEFURSA9IDI7XG5cbiAgICBBbmltYXRlUnVubmVyLmNoYWluID0gZnVuY3Rpb24oY2hhaW4sIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICBuZXh0KCk7XG4gICAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IGNoYWluLmxlbmd0aCkge1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYWluW2luZGV4XShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBBbmltYXRlUnVubmVyLmFsbCA9IGZ1bmN0aW9uKHJ1bm5lcnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdmFyIHN0YXR1cyA9IHRydWU7XG4gICAgICBmb3JFYWNoKHJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBydW5uZXIuZG9uZShvblByb2dyZXNzKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBvblByb2dyZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgIHN0YXR1cyA9IHN0YXR1cyAmJiByZXNwb25zZTtcbiAgICAgICAgaWYgKCsrY291bnQgPT09IHJ1bm5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY2FsbGJhY2soc3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBBbmltYXRlUnVubmVyKGhvc3QpIHtcbiAgICAgIHRoaXMuc2V0SG9zdChob3N0KTtcblxuICAgICAgdmFyIHJhZlRpY2sgPSAkJGFuaW1hdGVBc3luY1J1bigpO1xuICAgICAgdmFyIHRpbWVvdXRUaWNrID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgJHRpbWVvdXQoZm4sIDAsIGZhbHNlKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MgPSBbXTtcbiAgICAgIHRoaXMuX3RpY2sgPSBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoJCRpc0RvY3VtZW50SGlkZGVuKCkpIHtcbiAgICAgICAgICB0aW1lb3V0VGljayhmbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmFmVGljayhmbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgfVxuXG4gICAgQW5pbWF0ZVJ1bm5lci5wcm90b3R5cGUgPSB7XG4gICAgICBzZXRIb3N0OiBmdW5jdGlvbihob3N0KSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3QgfHwge307XG4gICAgICB9LFxuXG4gICAgICBkb25lOiBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IERPTkVfQ09NUExFVEVfU1RBVEUpIHtcbiAgICAgICAgICBmbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MucHVzaChmbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHByb2dyZXNzOiBub29wLFxuXG4gICAgICBnZXRQcm9taXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb21pc2UpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdGhpcy5wcm9taXNlID0gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBzZWxmLmRvbmUoZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuICAgICAgfSxcblxuICAgICAgdGhlbjogZnVuY3Rpb24ocmVzb2x2ZUhhbmRsZXIsIHJlamVjdEhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpLnRoZW4ocmVzb2x2ZUhhbmRsZXIsIHJlamVjdEhhbmRsZXIpO1xuICAgICAgfSxcblxuICAgICAgJ2NhdGNoJzogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2NhdGNoJ10oaGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICAnZmluYWxseSc6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpWydmaW5hbGx5J10oaGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QucGF1c2UpIHtcbiAgICAgICAgICB0aGlzLmhvc3QucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9zdC5yZXN1bWUpIHtcbiAgICAgICAgICB0aGlzLmhvc3QucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QuZW5kKSB7XG4gICAgICAgICAgdGhpcy5ob3N0LmVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jlc29sdmUodHJ1ZSk7XG4gICAgICB9LFxuXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0LmNhbmNlbCkge1xuICAgICAgICAgIHRoaXMuaG9zdC5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHZlKGZhbHNlKTtcbiAgICAgIH0sXG5cbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSA9PT0gSU5JVElBTF9TVEFURSkge1xuICAgICAgICAgIHNlbGYuX3N0YXRlID0gRE9ORV9QRU5ESU5HX1NUQVRFO1xuICAgICAgICAgIHNlbGYuX3RpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLl9yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3Jlc29sdmU6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gRE9ORV9DT01QTEVURV9TVEFURSkge1xuICAgICAgICAgIGZvckVhY2godGhpcy5fZG9uZUNhbGxiYWNrcywgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIGZuKHJlc3BvbnNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9kb25lQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgdGhpcy5fc3RhdGUgPSBET05FX0NPTVBMRVRFX1NUQVRFO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBBbmltYXRlUnVubmVyO1xuICB9XTtcbn07XG5cbi8qIGV4cG9ydGVkICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRhbmltYXRlQ3NzXG4gKiBAa2luZCBvYmplY3RcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIHRoZSBjb3JlIHZlcnNpb24gb2YgYCRhbmltYXRlQ3NzYC4gQnkgZGVmYXVsdCwgb25seSB3aGVuIHRoZSBgbmdBbmltYXRlYCBpcyBpbmNsdWRlZCxcbiAqIHRoZW4gdGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSB3aWxsIGFjdHVhbGx5IHBlcmZvcm0gYW5pbWF0aW9ucy5cbiAqXG4gKiBDbGljayBoZXJlIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGVDc3MgdG8gcmVhZCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgJGFuaW1hdGVDc3N9LlxuICovXG52YXIgJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsICckcScsICckJEFuaW1hdGVSdW5uZXInLCBmdW5jdGlvbigkJHJBRiwgJHEsICQkQW5pbWF0ZVJ1bm5lcikge1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAvLyBhbGwgb2YgdGhlIGFuaW1hdGlvbiBmdW5jdGlvbnMgc2hvdWxkIGNyZWF0ZVxuICAgICAgLy8gYSBjb3B5IG9mIHRoZSBvcHRpb25zIGRhdGEsIGhvd2V2ZXIsIGlmIGFcbiAgICAgIC8vIHBhcmVudCBzZXJ2aWNlIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBjb3B5IHRoZW5cbiAgICAgIC8vIHdlIHNob3VsZCBzdGljayB0byB1c2luZyB0aGF0XG4gICAgICB2YXIgb3B0aW9ucyA9IGluaXRpYWxPcHRpb25zIHx8IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLiQkcHJlcGFyZWQpIHtcbiAgICAgICAgb3B0aW9ucyA9IGNvcHkob3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IGluIGFwcGx5aW5nIHRoZSBzdHlsZXMgc2luY2VcbiAgICAgIC8vIHRoZXJlIGlzIG5vIGFuaW1hdGlvbiB0aGF0IGdvZXMgb24gYXQgYWxsIGluXG4gICAgICAvLyB0aGlzIHZlcnNpb24gb2YgJGFuaW1hdGVDc3MuXG4gICAgICBpZiAob3B0aW9ucy5jbGVhbnVwU3R5bGVzKSB7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMudG8gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5mcm9tKSB7XG4gICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbG9zZWQsIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBydW4sXG4gICAgICAgIGVuZDogcnVuXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBydW4oKSB7XG4gICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGFwcGx5QW5pbWF0aW9uQ29udGVudHMoKTtcbiAgICAgICAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseUFuaW1hdGlvbkNvbnRlbnRzKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Mob3B0aW9ucy5hZGRDbGFzcyk7XG4gICAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKG9wdGlvbnMucmVtb3ZlQ2xhc3MpO1xuICAgICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRvKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgICAgICAgb3B0aW9ucy50byA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn07XG5cbi8qIGdsb2JhbCBzdHJpcEhhc2g6IHRydWUgKi9cblxuLyoqXG4gKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICFcbiAqXG4gKiBAbmFtZSAkYnJvd3NlclxuICogQHJlcXVpcmVzICRsb2dcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczpcbiAqXG4gKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0XG4gKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXNcbiAqXG4gKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgXG4gKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoXG4gKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuXG4gKi9cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gJGxvZyB3aW5kb3cuY29uc29sZSBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZVxuICovXG5mdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5LFxuICAgICAgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0LFxuICAgICAgY2xlYXJUaW1lb3V0ID0gd2luZG93LmNsZWFyVGltZW91dCxcbiAgICAgIHBlbmRpbmdEZWZlcklkcyA9IHt9O1xuXG4gIHNlbGYuaXNNb2NrID0gZmFsc2U7XG5cbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gMDtcbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyA9IFtdO1xuXG4gIC8vIFRPRE8odm9qdGEpOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgYXBpXG4gIHNlbGYuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCA9IGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0O1xuICBzZWxmLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbigpIHsgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsgfTtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYFxuICAgKiBjb3VudGVyLiBJZiB0aGUgY291bnRlciByZWFjaGVzIDAsIGFsbCB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2AgYXJlIGV4ZWN1dGVkLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgc2xpY2VBcmdzKGFyZ3VtZW50cywgMSkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudC0tO1xuICAgICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICAgIHdoaWxlIChvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGFzaCh1cmwpIHtcbiAgICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIHJldHVybiBpbmRleCA9PT0gLTEgPyAnJyA6IHVybC5zdWJzdHIoaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHVzZWQgb25seSBieSBzY2VuYXJpbyBydW5uZXJcbiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID9cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdFxuICAgKi9cbiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gVVJMIEFQSVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIHZhciBjYWNoZWRTdGF0ZSwgbGFzdEhpc3RvcnlTdGF0ZSxcbiAgICAgIGxhc3RCcm93c2VyVXJsID0gbG9jYXRpb24uaHJlZixcbiAgICAgIGJhc2VFbGVtZW50ID0gZG9jdW1lbnQuZmluZCgnYmFzZScpLFxuICAgICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbCxcbiAgICAgIGdldEN1cnJlbnRTdGF0ZSA9ICEkc25pZmZlci5oaXN0b3J5ID8gbm9vcCA6IGZ1bmN0aW9uIGdldEN1cnJlbnRTdGF0ZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gaGlzdG9yeS5zdGF0ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIE1TSUUgY2FuIHJlcG9ydGVkbHkgdGhyb3cgd2hlbiB0aGVyZSBpcyBubyBzdGF0ZSAoVU5DT05GSVJNRUQpLlxuICAgICAgICB9XG4gICAgICB9O1xuXG4gIGNhY2hlU3RhdGUoKTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHRVRURVI6XG4gICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLlxuICAgKlxuICAgKiBTRVRURVI6XG4gICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuXG4gICAqIElmIGh0bWw1IGhpc3RvcnkgYXBpIHN1cHBvcnRlZCwgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSBpcyB1c2VkLCBvdGhlcndpc2VcbiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXG4gICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZ1xuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkP1xuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIG9iamVjdCB0byB1c2Ugd2l0aCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlXG4gICAqL1xuICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgYGhpc3Rvcnkuc3RhdGVgIGlzIGBudWxsYCBieSBkZWZhdWx0OyB0cmVhdGluZyBpdCBzZXBhcmF0ZWx5XG4gICAgLy8gZnJvbSBgdW5kZWZpbmVkYCB3b3VsZCBjYXVzZSBgJGJyb3dzZXIudXJsKCcvZm9vJylgIHRvIGNoYW5nZSBgaGlzdG9yeS5zdGF0ZWBcbiAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFuZHJvaWQgQnJvd3NlciBCRkNhY2hlIGNhdXNlcyBsb2NhdGlvbiwgaGlzdG9yeSByZWZlcmVuY2UgdG8gYmVjb21lIHN0YWxlLlxuICAgIGlmIChsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uKSBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICAgIC8vIHNldHRlclxuICAgIGlmICh1cmwpIHtcbiAgICAgIHZhciBzYW1lU3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlID09PSBzdGF0ZTtcblxuICAgICAgLy8gRG9uJ3QgY2hhbmdlIGFueXRoaW5nIGlmIHByZXZpb3VzIGFuZCBjdXJyZW50IFVSTHMgYW5kIHN0YXRlcyBtYXRjaC4gVGhpcyBhbHNvIHByZXZlbnRzXG4gICAgICAvLyBJRTwxMCBmcm9tIGdldHRpbmcgaW50byByZWRpcmVjdCBsb29wIHdoZW4gaW4gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwgbW9kZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxXG4gICAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHVybCAmJiAoISRzbmlmZmVyLmhpc3RvcnkgfHwgc2FtZVN0YXRlKSkge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHZhciBzYW1lQmFzZSA9IGxhc3RCcm93c2VyVXJsICYmIHN0cmlwSGFzaChsYXN0QnJvd3NlclVybCkgPT09IHN0cmlwSGFzaCh1cmwpO1xuICAgICAgbGFzdEJyb3dzZXJVcmwgPSB1cmw7XG4gICAgICBsYXN0SGlzdG9yeVN0YXRlID0gc3RhdGU7XG4gICAgICAvLyBEb24ndCB1c2UgaGlzdG9yeSBBUEkgaWYgb25seSB0aGUgaGFzaCBjaGFuZ2VkXG4gICAgICAvLyBkdWUgdG8gYSBidWcgaW4gSUUxMC9JRTExIHdoaWNoIGxlYWRzXG4gICAgICAvLyB0byBub3QgZmlyaW5nIGEgYGhhc2hjaGFuZ2VgIG5vciBgcG9wc3RhdGVgIGV2ZW50XG4gICAgICAvLyBpbiBzb21lIGNhc2VzIChzZWUgIzkxNDMpLlxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkgJiYgKCFzYW1lQmFzZSB8fCAhc2FtZVN0YXRlKSkge1xuICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XG4gICAgICAgIGNhY2hlU3RhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc2FtZUJhc2UpIHtcbiAgICAgICAgICBwZW5kaW5nTG9jYXRpb24gPSB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKHVybCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXNhbWVCYXNlKSB7XG4gICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gZ2V0SGFzaCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhdGlvbi5ocmVmICE9PSB1cmwpIHtcbiAgICAgICAgICBwZW5kaW5nTG9jYXRpb24gPSB1cmw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgLy8gZ2V0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0gcGVuZGluZ0xvY2F0aW9uIGlzIG5lZWRlZCBhcyBicm93c2VycyBkb24ndCBhbGxvdyB0byByZWFkIG91dFxuICAgICAgLy8gICB0aGUgbmV3IGxvY2F0aW9uLmhyZWYgaWYgYSByZWxvYWQgaGFwcGVuZWQgb3IgaWYgdGhlcmUgaXMgYSBidWcgbGlrZSBpbiBpT1MgOSAoc2VlXG4gICAgICAvLyAgIGh0dHBzOi8vb3BlbnJhZGFyLmFwcHNwb3QuY29tLzIyMTg2MTA5KS5cbiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICByZXR1cm4gcGVuZGluZ0xvY2F0aW9uIHx8IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvJTI3L2csJ1xcJycpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGEgZ2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gaGlzdG9yeS5zdGF0ZSBvciBudWxsIGlmIGhpc3Rvcnkuc3RhdGUgaXMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgc2VsZi5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjYWNoZWRTdGF0ZTtcbiAgfTtcblxuICB2YXIgdXJsQ2hhbmdlTGlzdGVuZXJzID0gW10sXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UoKSB7XG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICBmaXJlU3RhdGVPclVybENoYW5nZSgpO1xuICB9XG5cbiAgLy8gVGhpcyB2YXJpYWJsZSBzaG91bGQgYmUgdXNlZCAqb25seSogaW5zaWRlIHRoZSBjYWNoZVN0YXRlIGZ1bmN0aW9uLlxuICB2YXIgbGFzdENhY2hlZFN0YXRlID0gbnVsbDtcbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZSgpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgb25seSBwbGFjZSBpbiAkYnJvd3NlciB3aGVyZSBgaGlzdG9yeS5zdGF0ZWAgaXMgcmVhZC5cbiAgICBjYWNoZWRTdGF0ZSA9IGdldEN1cnJlbnRTdGF0ZSgpO1xuICAgIGNhY2hlZFN0YXRlID0gaXNVbmRlZmluZWQoY2FjaGVkU3RhdGUpID8gbnVsbCA6IGNhY2hlZFN0YXRlO1xuXG4gICAgLy8gUHJldmVudCBjYWxsYmFja3MgZm8gZmlyZSB0d2ljZSBpZiBib3RoIGhhc2hjaGFuZ2UgJiBwb3BzdGF0ZSB3ZXJlIGZpcmVkLlxuICAgIGlmIChlcXVhbHMoY2FjaGVkU3RhdGUsIGxhc3RDYWNoZWRTdGF0ZSkpIHtcbiAgICAgIGNhY2hlZFN0YXRlID0gbGFzdENhY2hlZFN0YXRlO1xuICAgIH1cblxuICAgIGxhc3RDYWNoZWRTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcmVTdGF0ZU9yVXJsQ2hhbmdlKCkge1xuICAgIHZhciBwcmV2TGFzdEhpc3RvcnlTdGF0ZSA9IGxhc3RIaXN0b3J5U3RhdGU7XG4gICAgY2FjaGVTdGF0ZSgpO1xuXG4gICAgaWYgKGxhc3RCcm93c2VyVXJsID09PSBzZWxmLnVybCgpICYmIHByZXZMYXN0SGlzdG9yeVN0YXRlID09PSBjYWNoZWRTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RCcm93c2VyVXJsID0gc2VsZi51cmwoKTtcbiAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgZm9yRWFjaCh1cmxDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihzZWxmLnVybCgpLCBjYWNoZWRTdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjb25VcmxDaGFuZ2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQsIHdoZW4gdXJsIGNoYW5nZXMuXG4gICAqXG4gICAqIEl0J3Mgb25seSBjYWxsZWQgd2hlbiB0aGUgdXJsIGlzIGNoYW5nZWQgZnJvbSBvdXRzaWRlIG9mIGFuZ3VsYXI6XG4gICAqIC0gdXNlciB0eXBlcyBkaWZmZXJlbnQgdXJsIGludG8gYWRkcmVzcyBiYXJcbiAgICogLSB1c2VyIGNsaWNrcyBvbiBoaXN0b3J5IChmb3J3YXJkL2JhY2spIGJ1dHRvblxuICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGlua1xuICAgKlxuICAgKiBJdCdzIG5vdCBjYWxsZWQgd2hlbiB1cmwgaXMgY2hhbmdlZCBieSAkYnJvd3Nlci51cmwoKSBtZXRob2RcbiAgICpcbiAgICogVGhlIGxpc3RlbmVyIGdldHMgY2FsbGVkIHdpdGggbmV3IHVybCBhcyBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIG1vbml0b3IgdXJsIGNoYW5nZXMgaW4gYW5ndWxhciBhcHBzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbihzdHJpbmcpfSBSZXR1cm5zIHRoZSByZWdpc3RlcmVkIGxpc3RlbmVyIGZuIC0gaGFuZHkgaWYgdGhlIGZuIGlzIGFub255bW91cy5cbiAgICovXG4gIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIC8vIFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzXG4gICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7XG4gICAgICAvLyBXZSBsaXN0ZW4gb24gYm90aCAoaGFzaGNoYW5nZS9wb3BzdGF0ZSkgd2hlbiBhdmFpbGFibGUsIGFzIHNvbWUgYnJvd3NlcnMgZG9uJ3RcbiAgICAgIC8vIGZpcmUgcG9wc3RhdGUgd2hlbiB1c2VyIGNoYW5nZXMgdGhlIGFkZHJlc3MgYmFyIGFuZCBkb24ndCBmaXJlIGhhc2hjaGFuZ2Ugd2hlbiB1cmxcbiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGVcblxuICAgICAgLy8gaHRtbDUgaGlzdG9yeSBhcGkgLSBwb3BzdGF0ZSBldmVudFxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcbiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnRcbiAgICAgIGpxTGl0ZSh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmxDaGFuZ2VMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBSZW1vdmUgcG9wc3RhdGUgYW5kIGhhc2hjaGFuZ2UgaGFuZGxlciBmcm9tIHdpbmRvdy5cbiAgICpcbiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5ICRyb290U2NvcGUuXG4gICAqL1xuICBzZWxmLiQkYXBwbGljYXRpb25EZXN0cm95ZWQgPSBmdW5jdGlvbigpIHtcbiAgICBqcUxpdGUod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UgcG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSB1cmwgaGFzIGNoYW5nZWQgb3V0c2lkZSBvZiBBbmd1bGFyLlxuICAgKiBOZWVkcyB0byBiZSBleHBvcnRlZCB0byBiZSBhYmxlIHRvIGNoZWNrIGZvciBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgaW4gc3luYyxcbiAgICogYXMgaGFzaGNoYW5nZS9wb3BzdGF0ZSBldmVudHMgZmlyZSBpbiBhc3luYy5cbiAgICovXG4gIHNlbGYuJCRjaGVja1VybENoYW5nZSA9IGZpcmVTdGF0ZU9yVXJsQ2hhbmdlO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1pc2MgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2Jhc2VIcmVmXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj5cbiAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKVxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCBiYXNlIGhyZWZcbiAgICovXG4gIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTtcbiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz86KT9cXC9cXC9bXi9dKi8sICcnKSA6ICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVmZXJyZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIG9mIG1pbGxpc2Vjb25kcyB0byBkZWZlciB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAgKiBAcmV0dXJucyB7Kn0gRGVmZXJJZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgdGFzayB2aWEgYCRicm93c2VyLmRlZmVyLmNhbmNlbCgpYC5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEV4ZWN1dGVzIGEgZm4gYXN5bmNocm9ub3VzbHkgdmlhIGBzZXRUaW1lb3V0KGZuLCBkZWxheSlgLlxuICAgKlxuICAgKiBVbmxpa2Ugd2hlbiBjYWxsaW5nIGBzZXRUaW1lb3V0YCBkaXJlY3RseSwgaW4gdGVzdCB0aGlzIGZ1bmN0aW9uIGlzIG1vY2tlZCBhbmQgaW5zdGVhZCBvZiB1c2luZ1xuICAgKiBgc2V0VGltZW91dGAgaW4gdGVzdHMsIHRoZSBmbnMgYXJlIHF1ZXVlZCBpbiBhbiBhcnJheSwgd2hpY2ggY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgZmx1c2hlZFxuICAgKiB2aWEgYCRicm93c2VyLmRlZmVyLmZsdXNoKClgLlxuICAgKlxuICAgKi9cbiAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uKGZuLCBkZWxheSkge1xuICAgIHZhciB0aW1lb3V0SWQ7XG4gICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKztcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pO1xuICAgIH0sIGRlbGF5IHx8IDApO1xuICAgIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdID0gdHJ1ZTtcbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2RlZmVyLmNhbmNlbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VscyBhIGRlZmVycmVkIHRhc2sgaWRlbnRpZmllZCB3aXRoIGBkZWZlcklkYC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkZWZlcklkIFRva2VuIHJldHVybmVkIGJ5IHRoZSBgJGJyb3dzZXIuZGVmZXJgIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgICAgY2FuY2VsZWQuXG4gICAqL1xuICBzZWxmLmRlZmVyLmNhbmNlbCA9IGZ1bmN0aW9uKGRlZmVySWQpIHtcbiAgICBpZiAocGVuZGluZ0RlZmVySWRzW2RlZmVySWRdKSB7XG4gICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdO1xuICAgICAgY2xlYXJUaW1lb3V0KGRlZmVySWQpO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2cnLCAnJHNuaWZmZXInLCAnJGRvY3VtZW50JyxcbiAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICRsb2csICRzbmlmZmVyLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCcm93c2VyKCR3aW5kb3csICRkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpO1xuICAgICAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjYWNoZUZhY3RvcnlcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGYWN0b3J5IHRoYXQgY29uc3RydWN0cyB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0cyBhbmQgZ2l2ZXMgYWNjZXNzIHRvXG4gKiB0aGVtLlxuICpcbiAqIGBgYGpzXG4gKlxuICogIHZhciBjYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTtcbiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ2NhY2hlSWQnKSkudG9CZShjYWNoZSk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdub1N1Y2hDYWNoZUlkJykpLm5vdC50b0JlRGVmaW5lZCgpO1xuICpcbiAqICBjYWNoZS5wdXQoXCJrZXlcIiwgXCJ2YWx1ZVwiKTtcbiAqICBjYWNoZS5wdXQoXCJhbm90aGVyIGtleVwiLCBcImFub3RoZXIgdmFsdWVcIik7XG4gKlxuICogIC8vIFdlJ3ZlIHNwZWNpZmllZCBubyBvcHRpb25zIG9uIGNyZWF0aW9uXG4gKiAgZXhwZWN0KGNhY2hlLmluZm8oKSkudG9FcXVhbCh7aWQ6ICdjYWNoZUlkJywgc2l6ZTogMn0pO1xuICpcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIHRoZSBuZXdseSBjcmVhdGVkIGNhY2hlLlxuICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBjYWNoZSBiZWhhdmlvci4gUHJvcGVydGllczpcbiAqXG4gKiAgIC0gYHtudW1iZXI9fWAgYGNhcGFjaXR5YCDigJQgdHVybnMgdGhlIGNhY2hlIGludG8gTFJVIGNhY2hlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczpcbiAqXG4gKiAtIGB7b2JqZWN0fWAgYGluZm8oKWAg4oCUIFJldHVybnMgaWQsIHNpemUsIGFuZCBvcHRpb25zIG9mIGNhY2hlLlxuICogLSBge3sqfX1gIGBwdXQoe3N0cmluZ30ga2V5LCB7Kn0gdmFsdWUpYCDigJQgUHV0cyBhIG5ldyBrZXktdmFsdWUgcGFpciBpbnRvIHRoZSBjYWNoZSBhbmQgcmV0dXJuc1xuICogICBpdC5cbiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIOKAlCBSZXR1cm5zIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgb3IgdW5kZWZpbmVkIGZvciBjYWNoZSBtaXNzLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlKHtzdHJpbmd9IGtleSlgIOKAlCBSZW1vdmVzIGEga2V5LXZhbHVlIHBhaXIgZnJvbSB0aGUgY2FjaGUuXG4gKiAtIGB7dm9pZH1gIGByZW1vdmVBbGwoKWAg4oCUIFJlbW92ZXMgYWxsIGNhY2hlZCB2YWx1ZXMuXG4gKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIOKAlCBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gdGhpcyBjYWNoZSBmcm9tICRjYWNoZUZhY3RvcnkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImNhY2hlRXhhbXBsZUFwcFwiIG5hbWU9XCJjYWNoZS1mYWN0b3J5XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FjaGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZUtleVwiIHBsYWNlaG9sZGVyPVwiS2V5XCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZVZhbHVlXCIgcGxhY2Vob2xkZXI9XCJWYWx1ZVwiPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInB1dChuZXdDYWNoZUtleSwgbmV3Q2FjaGVWYWx1ZSlcIj5DYWNoZTwvYnV0dG9uPlxuXG4gICAgICAgICA8cCBuZy1pZj1cImtleXMubGVuZ3RoXCI+Q2FjaGVkIFZhbHVlczwvcD5cbiAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwia2V5IGluIGtleXNcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJjYWNoZS5nZXQoa2V5KVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICA8cD5DYWNoZSBJbmZvPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gY2FjaGUuaW5mbygpXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJrZXlcIj48L3NwYW4+XG4gICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICA8YiBuZy1iaW5kPVwidmFsdWVcIj48L2I+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2NhY2hlRXhhbXBsZUFwcCcsIFtdKS5cbiAgICAgICAgIGNvbnRyb2xsZXIoJ0NhY2hlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkc2NvcGUsICRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAgICAgJHNjb3BlLmtleXMgPSBbXTtcbiAgICAgICAgICAgJHNjb3BlLmNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICAgICAgICAgICAkc2NvcGUucHV0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKCRzY29wZS5jYWNoZS5nZXQoa2V5KSkpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgJHNjb3BlLmNhY2hlLnB1dChrZXksIGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpID8gbnVsbCA6IHZhbHVlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgcCB7XG4gICAgICAgICBtYXJnaW46IDEwcHggMCAzcHg7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRDYWNoZUZhY3RvcnlQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FjaGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBjYWNoZUZhY3RvcnkoY2FjaGVJZCwgb3B0aW9ucykge1xuICAgICAgaWYgKGNhY2hlSWQgaW4gY2FjaGVzKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNhY2hlRmFjdG9yeScpKCdpaWQnLCAnQ2FjaGVJZCBcXCd7MH1cXCcgaXMgYWxyZWFkeSB0YWtlbiEnLCBjYWNoZUlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemUgPSAwLFxuICAgICAgICAgIHN0YXRzID0gZXh0ZW5kKHt9LCBvcHRpb25zLCB7aWQ6IGNhY2hlSWR9KSxcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIGxydUhhc2ggPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsXG4gICAgICAgICAgc3RhbGVFbmQgPSBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIGNhY2hlIG9iamVjdCB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBkYXRhLCBwcmltYXJpbHkgdXNlZCBieVxuICAgICAgICoge0BsaW5rICRodHRwICRodHRwfSBhbmQgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IHNjcmlwdH0gZGlyZWN0aXZlIHRvIGNhY2hlXG4gICAgICAgKiB0ZW1wbGF0ZXMgYW5kIG90aGVyIGRhdGEuXG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBhbmd1bGFyLm1vZHVsZSgnc3VwZXJDYWNoZScpXG4gICAgICAgKiAgICAuZmFjdG9yeSgnc3VwZXJDYWNoZScsIFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAqICAgICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3N1cGVyLWNhY2hlJyk7XG4gICAgICAgKiAgICB9XSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlIHRlc3Q6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBpdCgnc2hvdWxkIGJlaGF2ZSBsaWtlIGEgY2FjaGUnLCBpbmplY3QoZnVuY3Rpb24oc3VwZXJDYWNoZSkge1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2tleScsICd2YWx1ZScpO1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2Fub3RoZXIga2V5JywgJ2Fub3RoZXIgdmFsdWUnKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMlxuICAgICAgICogICAgfSk7XG4gICAgICAgKlxuICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmUoJ2Fub3RoZXIga2V5Jyk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5nZXQoJ2Fub3RoZXIga2V5JykpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZUFsbCgpO1xuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHtcbiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgKiAgICAgIHNpemU6IDBcbiAgICAgICAqICAgIH0pO1xuICAgICAgICogIH0pKTtcbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICByZXR1cm4gKGNhY2hlc1tjYWNoZUlkXSA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3B1dFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogSW5zZXJ0cyBhIG5hbWVkIGVudHJ5IGludG8gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QgdG8gYmVcbiAgICAgICAgICogcmV0cmlldmVkIGxhdGVyLCBhbmQgaW5jcmVtZW50aW5nIHRoZSBzaXplIG9mIHRoZSBjYWNoZSBpZiB0aGUga2V5IHdhcyBub3QgYWxyZWFkeVxuICAgICAgICAgKiBwcmVzZW50IGluIHRoZSBjYWNoZS4gSWYgYmVoYXZpbmcgbGlrZSBhbiBMUlUgY2FjaGUsIGl0IHdpbGwgYWxzbyByZW1vdmUgc3RhbGVcbiAgICAgICAgICogZW50cmllcyBmcm9tIHRoZSBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IHdpbGwgbm90IGluc2VydCB1bmRlZmluZWQgdmFsdWVzIGludG8gdGhlIGNhY2hlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdW5kZXIgd2hpY2ggdGhlIGNhY2hlZCBkYXRhIGlzIHN0b3JlZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSB0aGUgdmFsdWUgdG8gc3RvcmUgYWxvbmdzaWRlIHRoZSBrZXkuIElmIGl0IGlzIHVuZGVmaW5lZCwgdGhlIGtleVxuICAgICAgICAgKiAgICB3aWxsIG5vdCBiZSBzdG9yZWQuXG4gICAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgc3RvcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghKGtleSBpbiBkYXRhKSkgc2l6ZSsrO1xuICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgICAgaWYgKHNpemUgPiBjYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3RhbGVFbmQua2V5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNnZXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlcyBuYW1lZCBkYXRhIHN0b3JlZCBpbiB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBkYXRhIHRvIGJlIHJldHJpZXZlZFxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmVtb3ZlcyBhbiBlbnRyeSBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PT0gZnJlc2hFbmQpIGZyZXNoRW5kID0gbHJ1RW50cnkucDtcbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjtcbiAgICAgICAgICAgIGxpbmsobHJ1RW50cnkubixscnVFbnRyeS5wKTtcblxuICAgICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHJldHVybjtcblxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgc2l6ZS0tO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgbHJ1SGFzaCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgIGxydUhhc2ggPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm9cbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgPHVsPlxuICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPlxuICAgICAgICAgKiAgIDwvdWw+XG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBtYWtlcyB0aGUgYGVudHJ5YCB0aGUgZnJlc2hFbmQgb2YgdGhlIExSVSBsaW5rZWQgbGlzdFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZWZyZXNoKGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSAhPT0gZnJlc2hFbmQpIHtcbiAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT09IGVudHJ5KSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcbiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTtcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkge1xuICAgICAgICBpZiAobmV4dEVudHJ5ICE9PSBwcmV2RW50cnkpIHtcbiAgICAgICAgICBpZiAobmV4dEVudHJ5KSBuZXh0RW50cnkucCA9IHByZXZFbnRyeTsgLy9wIHN0YW5kcyBmb3IgcHJldmlvdXMsICdwcmV2JyBkaWRuJ3QgbWluaWZ5XG4gICAgICAgICAgaWYgKHByZXZFbnRyeSkgcHJldkVudHJ5Lm4gPSBuZXh0RW50cnk7IC8vbiBzdGFuZHMgZm9yIG5leHQsICduZXh0JyBkaWRuJ3QgbWluaWZ5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2luZm9cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgdGhlIGNhY2hlcyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0ga2V5LXZhbHVlIG1hcCBvZiBgY2FjaGVJZGAgdG8gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGBjYWNoZSNpbmZvYFxuICAgKi9cbiAgICBjYWNoZUZhY3RvcnkuaW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluZm8gPSB7fTtcbiAgICAgIGZvckVhY2goY2FjaGVzLCBmdW5jdGlvbihjYWNoZSwgY2FjaGVJZCkge1xuICAgICAgICBpbmZvW2NhY2hlSWRdID0gY2FjaGUuaW5mbygpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNhY2hlRmFjdG9yeSNnZXRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldCBhY2Nlc3MgdG8gYSBjYWNoZSBvYmplY3QgYnkgdGhlIGBjYWNoZUlkYCB1c2VkIHdoZW4gaXQgd2FzIGNyZWF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgYSBjYWNoZSB0byBhY2Nlc3MuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IENhY2hlIG9iamVjdCBpZGVudGlmaWVkIGJ5IHRoZSBjYWNoZUlkIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoIGNhY2hlLlxuICAgKi9cbiAgICBjYWNoZUZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oY2FjaGVJZCkge1xuICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXTtcbiAgICB9O1xuXG5cbiAgICByZXR1cm4gY2FjaGVGYWN0b3J5O1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkdGVtcGxhdGVDYWNoZVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmaXJzdCB0aW1lIGEgdGVtcGxhdGUgaXMgdXNlZCwgaXQgaXMgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSBjYWNoZSBmb3IgcXVpY2sgcmV0cmlldmFsLiBZb3VcbiAqIGNhbiBsb2FkIHRlbXBsYXRlcyBkaXJlY3RseSBpbnRvIHRoZSBjYWNoZSBpbiBhIGBzY3JpcHRgIHRhZywgb3IgYnkgY29uc3VtaW5nIHRoZVxuICogYCR0ZW1wbGF0ZUNhY2hlYCBzZXJ2aWNlIGRpcmVjdGx5LlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzpcbiAqXG4gKiBgYGBodG1sXG4gKiAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cInRlbXBsYXRlSWQuaHRtbFwiPlxuICogICAgIDxwPlRoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlPC9wPlxuICogICA8L3NjcmlwdD5cbiAqIGBgYFxuICpcbiAqICoqTm90ZToqKiB0aGUgYHNjcmlwdGAgdGFnIGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGBoZWFkYCBvZlxuICogdGhlIGRvY3VtZW50LCBidXQgaXQgbXVzdCBiZSBhIGRlc2NlbmRlbnQgb2YgdGhlIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgJHJvb3RFbGVtZW50fSAoSUUsXG4gKiBlbGVtZW50IHdpdGggbmctYXBwIGF0dHJpYnV0ZSksIG90aGVyd2lzZSB0aGUgdGVtcGxhdGUgd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pO1xuICogbXlBcHAucnVuKGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIGNvbXBvbmVudDpcbiAqIGBgYGpzXG4gKiBteUFwcC5jb21wb25lbnQoJ215Q29tcG9uZW50Jywge1xuICogICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZUlkLmh0bWwnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIG9yIGdldCBpdCB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqIGBgYGpzXG4gKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpXG4gKiBgYGBcbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uXG4gKlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpO1xuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2UgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiAhIFZBUklBQkxFL0ZVTkNUSU9OIE5BTUlORyBDT05WRU5USU9OUyBUSEFUIEFQUExZIFRPIFRISVMgRklMRSFcbiAqXG4gKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6XG4gKlxuICogLSBcIm5vZGVcIiAtIERPTSBOb2RlXG4gKiAtIFwiZWxlbWVudFwiIC0gRE9NIEVsZW1lbnQgb3IgTm9kZVxuICogLSBcIiRub2RlXCIgb3IgXCIkZWxlbWVudFwiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50XG4gKlxuICpcbiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6XG4gKlxuICogLSBcImxpbmtGblwiIC0gbGlua2luZyBmbiBvZiBhIHNpbmdsZSBkaXJlY3RpdmVcbiAqIC0gXCJub2RlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIHBhcnRpY3VsYXIgbm9kZVxuICogLSBcImNoaWxkTGlua0ZuXCIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjb21wb3NpdGVMaW5rRm5cIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgY29tcGlsYXRpb24gcm9vdCAobm9kZUxpc3QpXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkY29tcGlsZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBpbGVzIGFuIEhUTUwgc3RyaW5nIG9yIERPTSBpbnRvIGEgdGVtcGxhdGUgYW5kIHByb2R1Y2VzIGEgdGVtcGxhdGUgZnVuY3Rpb24sIHdoaWNoXG4gKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYHNjb3BlYH0gYW5kIHRoZSB0ZW1wbGF0ZSB0b2dldGhlci5cbiAqXG4gKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCBtYXRjaGluZyBET00gZWxlbWVudHMgdG9cbiAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoaXMgZG9jdW1lbnQgaXMgYW4gaW4tZGVwdGggcmVmZXJlbmNlIG9mIGFsbCBkaXJlY3RpdmUgb3B0aW9ucy5cbiAqIEZvciBhIGdlbnRsZSBpbnRyb2R1Y3Rpb24gdG8gZGlyZWN0aXZlcyB3aXRoIGV4YW1wbGVzIG9mIGNvbW1vbiB1c2UgY2FzZXMsXG4gKiBzZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIENvbXByZWhlbnNpdmUgRGlyZWN0aXZlIEFQSVxuICpcbiAqIFRoZXJlIGFyZSBtYW55IGRpZmZlcmVudCBvcHRpb25zIGZvciBhIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGUgZGlmZmVyZW5jZSByZXNpZGVzIGluIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3UgY2FuIGVpdGhlciByZXR1cm4gYSB7QGxpbmsgJGNvbXBpbGUjZGlyZWN0aXZlLWRlZmluaXRpb24tb2JqZWN0IERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdCAoc2VlIGJlbG93KX1cbiAqIHRoYXQgZGVmaW5lcyB0aGUgZGlyZWN0aXZlIHByb3BlcnRpZXMsIG9yIGp1c3QgdGhlIGBwb3N0TGlua2AgZnVuY3Rpb24gKGFsbCBvdGhlciBwcm9wZXJ0aWVzIHdpbGwgaGF2ZVxuICogdGhlIGRlZmF1bHQgdmFsdWVzKS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBcImRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdFwiIGZvcm0uXG4gKiA8L2Rpdj5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDpcbiAqXG4gKiBgYGBqc1xuICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICpcbiAqICAgbXlNb2R1bGUuZGlyZWN0aXZlKCdkaXJlY3RpdmVOYW1lJywgZnVuY3Rpb24gZmFjdG9yeShpbmplY3RhYmxlcykge1xuICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0ge1xuICogICAgICAge0BsaW5rICRjb21waWxlIy1wcmlvcml0eS0gcHJpb3JpdHl9OiAwLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy10ZW1wbGF0ZS0gdGVtcGxhdGV9OiAnPGRpdj48L2Rpdj4nLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIHtAbGluayAkY29tcGlsZSMtdGVtcGxhdGV1cmwtIHRlbXBsYXRlVXJsfTogJ2RpcmVjdGl2ZS5odG1sJywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtdHJhbnNjbHVkZS0gdHJhbnNjbHVkZX06IGZhbHNlLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXN0cmljdC0gcmVzdHJpY3R9OiAnQScsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXRlbXBsYXRlbmFtZXNwYWNlLSB0ZW1wbGF0ZU5hbWVzcGFjZX06ICdodG1sJyxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtc2NvcGUtIHNjb3BlfTogZmFsc2UsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWNvbnRyb2xsZXItIGNvbnRyb2xsZXJ9OiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlLCBvdGhlckluamVjdGFibGVzKSB7IC4uLiB9LFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1jb250cm9sbGVyYXMtIGNvbnRyb2xsZXJBc306ICdzdHJpbmdJZGVudGlmaWVyJyxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtYmluZHRvY29udHJvbGxlci0gYmluZFRvQ29udHJvbGxlcn06IGZhbHNlLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXF1aXJlLSByZXF1aXJlfTogJ3NpYmxpbmdEaXJlY3RpdmVOYW1lJywgLy8gb3IgLy8gWydecGFyZW50RGlyZWN0aXZlTmFtZScsICc/b3B0aW9uYWxEaXJlY3RpdmVOYW1lJywgJz9eb3B0aW9uYWxQYXJlbnQnXSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtbXVsdGllbGVtZW50LSBtdWx0aUVsZW1lbnR9OiBmYWxzZSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtY29tcGlsZS0gY29tcGlsZX06IGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgICB7QGxpbmsgJGNvbXBpbGUjcHJlLWxpbmtpbmctZnVuY3Rpb24gcHJlfTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgICAgICAge0BsaW5rICRjb21waWxlI3Bvc3QtbGlua2luZy1mdW5jdGlvbiBwb3N0fTogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAqICAgICAgICAgfVxuICogICAgICAgICAvLyBvclxuICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8ge0BsaW5rICRjb21waWxlIy1saW5rLSBsaW5rfToge1xuICogICAgICAgLy8gIHtAbGluayAkY29tcGlsZSNwcmUtbGlua2luZy1mdW5jdGlvbiBwcmV9OiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LFxuICogICAgICAgLy8gIHtAbGluayAkY29tcGlsZSNwb3N0LWxpbmtpbmctZnVuY3Rpb24gcG9zdH06IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9XG4gKiAgICAgICAvLyB9XG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8ge0BsaW5rICRjb21waWxlIy1saW5rLSBsaW5rfTogZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICB9O1xuICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0O1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogQW55IHVuc3BlY2lmaWVkIG9wdGlvbnMgd2lsbCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUuIFlvdSBjYW4gc2VlIHRoZSBkZWZhdWx0IHZhbHVlcyBiZWxvdy5cbiAqIDwvZGl2PlxuICpcbiAqIFRoZXJlZm9yZSB0aGUgYWJvdmUgY2FuIGJlIHNpbXBsaWZpZWQgYXM6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgICAvLyBvclxuICogICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICB9KTtcbiAqIGBgYFxuICpcbiAqICMjIyBMaWZlLWN5Y2xlIGhvb2tzXG4gKiBEaXJlY3RpdmUgY29udHJvbGxlcnMgY2FuIHByb3ZpZGUgdGhlIGZvbGxvd2luZyBtZXRob2RzIHRoYXQgYXJlIGNhbGxlZCBieSBBbmd1bGFyIGF0IHBvaW50cyBpbiB0aGUgbGlmZS1jeWNsZSBvZiB0aGVcbiAqIGRpcmVjdGl2ZTpcbiAqICogYCRvbkluaXQoKWAgLSBDYWxsZWQgb24gZWFjaCBjb250cm9sbGVyIGFmdGVyIGFsbCB0aGUgY29udHJvbGxlcnMgb24gYW4gZWxlbWVudCBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYW5kXG4gKiAgIGhhZCB0aGVpciBiaW5kaW5ncyBpbml0aWFsaXplZCAoYW5kIGJlZm9yZSB0aGUgcHJlICZhbXA7IHBvc3QgbGlua2luZyBmdW5jdGlvbnMgZm9yIHRoZSBkaXJlY3RpdmVzIG9uXG4gKiAgIHRoaXMgZWxlbWVudCkuIFRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIHB1dCBpbml0aWFsaXphdGlvbiBjb2RlIGZvciB5b3VyIGNvbnRyb2xsZXIuXG4gKiAqIGAkb25DaGFuZ2VzKGNoYW5nZXNPYmopYCAtIENhbGxlZCB3aGVuZXZlciBvbmUtd2F5IChgPGApIG9yIGludGVycG9sYXRpb24gKGBAYCkgYmluZGluZ3MgYXJlIHVwZGF0ZWQuIFRoZVxuICogICBgY2hhbmdlc09iamAgaXMgYSBoYXNoIHdob3NlIGtleXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgYm91bmQgcHJvcGVydGllcyB0aGF0IGhhdmUgY2hhbmdlZCwgYW5kIHRoZSB2YWx1ZXMgYXJlIGFuXG4gKiAgIG9iamVjdCBvZiB0aGUgZm9ybSBgeyBjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUsIGlzRmlyc3RDaGFuZ2UoKSB9YC4gVXNlIHRoaXMgaG9vayB0byB0cmlnZ2VyIHVwZGF0ZXMgd2l0aGluIGFcbiAqICAgY29tcG9uZW50IHN1Y2ggYXMgY2xvbmluZyB0aGUgYm91bmQgdmFsdWUgdG8gcHJldmVudCBhY2NpZGVudGFsIG11dGF0aW9uIG9mIHRoZSBvdXRlciB2YWx1ZS4gTm90ZSB0aGF0IHRoaXMgd2lsbFxuICogICBhbHNvIGJlIGNhbGxlZCB3aGVuIHlvdXIgYmluZGluZ3MgYXJlIGluaXRpYWxpemVkLlxuICogKiBgJGRvQ2hlY2soKWAgLSBDYWxsZWQgb24gZWFjaCB0dXJuIG9mIHRoZSBkaWdlc3QgY3ljbGUuIFByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIGRldGVjdCBhbmQgYWN0IG9uXG4gKiAgIGNoYW5nZXMuIEFueSBhY3Rpb25zIHRoYXQgeW91IHdpc2ggdG8gdGFrZSBpbiByZXNwb25zZSB0byB0aGUgY2hhbmdlcyB0aGF0IHlvdSBkZXRlY3QgbXVzdCBiZVxuICogICBpbnZva2VkIGZyb20gdGhpcyBob29rOyBpbXBsZW1lbnRpbmcgdGhpcyBoYXMgbm8gZWZmZWN0IG9uIHdoZW4gYCRvbkNoYW5nZXNgIGlzIGNhbGxlZC4gRm9yIGV4YW1wbGUsIHRoaXMgaG9va1xuICogICBjb3VsZCBiZSB1c2VmdWwgaWYgeW91IHdpc2ggdG8gcGVyZm9ybSBhIGRlZXAgZXF1YWxpdHkgY2hlY2ssIG9yIHRvIGNoZWNrIGEgRGF0ZSBvYmplY3QsIGNoYW5nZXMgdG8gd2hpY2ggd291bGQgbm90XG4gKiAgIGJlIGRldGVjdGVkIGJ5IEFuZ3VsYXIncyBjaGFuZ2UgZGV0ZWN0b3IgYW5kIHRodXMgbm90IHRyaWdnZXIgYCRvbkNoYW5nZXNgLiBUaGlzIGhvb2sgaXMgaW52b2tlZCB3aXRoIG5vIGFyZ3VtZW50cztcbiAqICAgaWYgZGV0ZWN0aW5nIGNoYW5nZXMsIHlvdSBtdXN0IHN0b3JlIHRoZSBwcmV2aW91cyB2YWx1ZShzKSBmb3IgY29tcGFyaXNvbiB0byB0aGUgY3VycmVudCB2YWx1ZXMuXG4gKiAqIGAkb25EZXN0cm95KClgIC0gQ2FsbGVkIG9uIGEgY29udHJvbGxlciB3aGVuIGl0cyBjb250YWluaW5nIHNjb3BlIGlzIGRlc3Ryb3llZC4gVXNlIHRoaXMgaG9vayBmb3IgcmVsZWFzaW5nXG4gKiAgIGV4dGVybmFsIHJlc291cmNlcywgd2F0Y2hlcyBhbmQgZXZlbnQgaGFuZGxlcnMuIE5vdGUgdGhhdCBjb21wb25lbnRzIGhhdmUgdGhlaXIgYCRvbkRlc3Ryb3koKWAgaG9va3MgY2FsbGVkIGluXG4gKiAgIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBgJHNjb3BlLiRicm9hZGNhc3RgIGV2ZW50cyBhcmUgdHJpZ2dlcmVkLCB3aGljaCBpcyB0b3AgZG93bi4gVGhpcyBtZWFucyB0aGF0IHBhcmVudFxuICogICBjb21wb25lbnRzIHdpbGwgaGF2ZSB0aGVpciBgJG9uRGVzdHJveSgpYCBob29rIGNhbGxlZCBiZWZvcmUgY2hpbGQgY29tcG9uZW50cy5cbiAqICogYCRwb3N0TGluaygpYCAtIENhbGxlZCBhZnRlciB0aGlzIGNvbnRyb2xsZXIncyBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4gaGF2ZSBiZWVuIGxpbmtlZC4gU2ltaWxhciB0byB0aGUgcG9zdC1saW5rXG4gKiAgIGZ1bmN0aW9uIHRoaXMgaG9vayBjYW4gYmUgdXNlZCB0byBzZXQgdXAgRE9NIGV2ZW50IGhhbmRsZXJzIGFuZCBkbyBkaXJlY3QgRE9NIG1hbmlwdWxhdGlvbi5cbiAqICAgTm90ZSB0aGF0IGNoaWxkIGVsZW1lbnRzIHRoYXQgY29udGFpbiBgdGVtcGxhdGVVcmxgIGRpcmVjdGl2ZXMgd2lsbCBub3QgaGF2ZSBiZWVuIGNvbXBpbGVkIGFuZCBsaW5rZWQgc2luY2VcbiAqICAgdGhleSBhcmUgd2FpdGluZyBmb3IgdGhlaXIgdGVtcGxhdGUgdG8gbG9hZCBhc3luY2hyb25vdXNseSBhbmQgdGhlaXIgb3duIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuXG4gKiAgIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiAjIyMjIENvbXBhcmlzb24gd2l0aCBBbmd1bGFyIDIgbGlmZS1jeWNsZSBob29rc1xuICogQW5ndWxhciAyIGFsc28gdXNlcyBsaWZlLWN5Y2xlIGhvb2tzIGZvciBpdHMgY29tcG9uZW50cy4gV2hpbGUgdGhlIEFuZ3VsYXIgMSBsaWZlLWN5Y2xlIGhvb2tzIGFyZSBzaW1pbGFyIHRoZXJlIGFyZVxuICogc29tZSBkaWZmZXJlbmNlcyB0aGF0IHlvdSBzaG91bGQgYmUgYXdhcmUgb2YsIGVzcGVjaWFsbHkgd2hlbiBpdCBjb21lcyB0byBtb3ZpbmcgeW91ciBjb2RlIGZyb20gQW5ndWxhciAxIHRvIEFuZ3VsYXIgMjpcbiAqXG4gKiAqIEFuZ3VsYXIgMSBob29rcyBhcmUgcHJlZml4ZWQgd2l0aCBgJGAsIHN1Y2ggYXMgYCRvbkluaXRgLiBBbmd1bGFyIDIgaG9va3MgYXJlIHByZWZpeGVkIHdpdGggYG5nYCwgc3VjaCBhcyBgbmdPbkluaXRgLlxuICogKiBBbmd1bGFyIDEgaG9va3MgY2FuIGJlIGRlZmluZWQgb24gdGhlIGNvbnRyb2xsZXIgcHJvdG90eXBlIG9yIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIGluc2lkZSBpdHMgY29uc3RydWN0b3IuXG4gKiAgIEluIEFuZ3VsYXIgMiB5b3UgY2FuIG9ubHkgZGVmaW5lIGhvb2tzIG9uIHRoZSBwcm90b3R5cGUgb2YgdGhlIENvbXBvbmVudCBjbGFzcy5cbiAqICogRHVlIHRvIHRoZSBkaWZmZXJlbmNlcyBpbiBjaGFuZ2UtZGV0ZWN0aW9uLCB5b3UgbWF5IGdldCBtYW55IG1vcmUgY2FsbHMgdG8gYCRkb0NoZWNrYCBpbiBBbmd1bGFyIDEgdGhhbiB5b3Ugd291bGQgdG9cbiAqICAgYG5nRG9DaGVja2AgaW4gQW5ndWxhciAyXG4gKiAqIENoYW5nZXMgdG8gdGhlIG1vZGVsIGluc2lkZSBgJGRvQ2hlY2tgIHdpbGwgdHJpZ2dlciBuZXcgdHVybnMgb2YgdGhlIGRpZ2VzdCBsb29wLCB3aGljaCB3aWxsIGNhdXNlIHRoZSBjaGFuZ2VzIHRvIGJlXG4gKiAgIHByb3BhZ2F0ZWQgdGhyb3VnaG91dCB0aGUgYXBwbGljYXRpb24uXG4gKiAgIEFuZ3VsYXIgMiBkb2VzIG5vdCBhbGxvdyB0aGUgYG5nRG9DaGVja2AgaG9vayB0byB0cmlnZ2VyIGEgY2hhbmdlIG91dHNpZGUgb2YgdGhlIGNvbXBvbmVudC4gSXQgd2lsbCBlaXRoZXIgdGhyb3cgYW5cbiAqICAgZXJyb3Igb3IgZG8gbm90aGluZyBkZXBlbmRpbmcgdXBvbiB0aGUgc3RhdGUgb2YgYGVuYWJsZVByb2RNb2RlKClgLlxuICpcbiAqICMjIyMgTGlmZS1jeWNsZSBob29rIGV4YW1wbGVzXG4gKlxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB5b3UgY2FuIGNoZWNrIGZvciBtdXRhdGlvbnMgdG8gYSBEYXRlIG9iamVjdCBldmVuIHRob3VnaCB0aGUgaWRlbnRpdHkgb2YgdGhlIG9iamVjdFxuICogaGFzIG5vdCBjaGFuZ2VkLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJkb0NoZWNrRGF0ZUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdkby1jaGVjay1tb2R1bGUnLCBbXSlcbiAqICAgICAgIC5jb21wb25lbnQoJ2FwcCcsIHtcbiAqICAgICAgICAgdGVtcGxhdGU6XG4gKiAgICAgICAgICAgJ01vbnRoOiA8aW5wdXQgbmctbW9kZWw9XCIkY3RybC5tb250aFwiIG5nLWNoYW5nZT1cIiRjdHJsLnVwZGF0ZURhdGUoKVwiPicgK1xuICogICAgICAgICAgICdEYXRlOiB7eyAkY3RybC5kYXRlIH19JyArXG4gKiAgICAgICAgICAgJzx0ZXN0IGRhdGU9XCIkY3RybC5kYXRlXCI+PC90ZXN0PicsXG4gKiAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gKiAgICAgICAgICAgdGhpcy5tb250aCA9IHRoaXMuZGF0ZS5nZXRNb250aCgpO1xuICogICAgICAgICAgIHRoaXMudXBkYXRlRGF0ZSA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMubW9udGgpO1xuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pXG4gKiAgICAgICAuY29tcG9uZW50KCd0ZXN0Jywge1xuICogICAgICAgICBiaW5kaW5nczogeyBkYXRlOiAnPCcgfSxcbiAqICAgICAgICAgdGVtcGxhdGU6XG4gKiAgICAgICAgICAgJzxwcmU+e3sgJGN0cmwubG9nIHwganNvbiB9fTwvcHJlPicsXG4gKiAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgIHZhciBwcmV2aW91c1ZhbHVlO1xuICogICAgICAgICAgIHRoaXMubG9nID0gW107XG4gKiAgICAgICAgICAgdGhpcy4kZG9DaGVjayA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZGF0ZSAmJiB0aGlzLmRhdGUudmFsdWVPZigpO1xuICogICAgICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICogICAgICAgICAgICAgICB0aGlzLmxvZy5wdXNoKCdkb0NoZWNrOiBkYXRlIG11dGF0ZWQ6ICcgKyB0aGlzLmRhdGUpO1xuICogICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY3VycmVudFZhbHVlO1xuICogICAgICAgICAgICAgfVxuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGFwcD48L2FwcD5cbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIFRoaXMgZXhhbXBsZSBzaG93IGhvdyB5b3UgbWlnaHQgdXNlIGAkZG9DaGVja2AgdG8gdHJpZ2dlciBjaGFuZ2VzIGluIHlvdXIgY29tcG9uZW50J3MgaW5wdXRzIGV2ZW4gaWYgdGhlXG4gKiBhY3R1YWwgaWRlbnRpdHkgb2YgdGhlIGNvbXBvbmVudCBkb2Vzbid0IGNoYW5nZS4gKEJlIGF3YXJlIHRoYXQgY2xvbmluZyBhbmQgZGVlcCBlcXVhbGl0eSBjaGVja3Mgb24gbGFyZ2VcbiAqIGFycmF5cyBvciBvYmplY3RzIGNhbiBoYXZlIGEgbmVnYXRpdmUgaW1wYWN0IG9uIHlvdXIgYXBwbGljYXRpb24gcGVyZm9ybWFuY2UpXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cImRvQ2hlY2tBcnJheUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8ZGl2IG5nLWluaXQ9XCJpdGVtcyA9IFtdXCI+XG4gKiAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiaXRlbXMucHVzaChpdGVtcy5sZW5ndGgpXCI+QWRkIEl0ZW08L2J1dHRvbj5cbiAqICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJpdGVtcyA9IFtdXCI+UmVzZXQgSXRlbXM8L2J1dHRvbj5cbiAqICAgICAgIDxwcmU+e3sgaXRlbXMgfX08L3ByZT5cbiAqICAgICAgIDx0ZXN0IGl0ZW1zPVwiaXRlbXNcIj48L3Rlc3Q+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgICBhbmd1bGFyLm1vZHVsZSgnZG8tY2hlY2stbW9kdWxlJywgW10pXG4gKiAgICAgICAgLmNvbXBvbmVudCgndGVzdCcsIHtcbiAqICAgICAgICAgIGJpbmRpbmdzOiB7IGl0ZW1zOiAnPCcgfSxcbiAqICAgICAgICAgIHRlbXBsYXRlOlxuICogICAgICAgICAgICAnPHByZT57eyAkY3RybC5sb2cgfCBqc29uIH19PC9wcmU+JyxcbiAqICAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICB0aGlzLmxvZyA9IFtdO1xuICpcbiAqICAgICAgICAgICAgdGhpcy4kZG9DaGVjayA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zX3JlZiAhPT0gdGhpcy5pdGVtcykge1xuICogICAgICAgICAgICAgICAgdGhpcy5sb2cucHVzaCgnZG9DaGVjazogaXRlbXMgY2hhbmdlZCcpO1xuICogICAgICAgICAgICAgICAgdGhpcy5pdGVtc19yZWYgPSB0aGlzLml0ZW1zO1xuICogICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHRoaXMuaXRlbXNfY2xvbmUsIHRoaXMuaXRlbXMpKSB7XG4gKiAgICAgICAgICAgICAgICB0aGlzLmxvZy5wdXNoKCdkb0NoZWNrOiBpdGVtcyBtdXRhdGVkJyk7XG4gKiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zX2Nsb25lID0gYW5ndWxhci5jb3B5KHRoaXMuaXRlbXMpO1xuICogICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgfTtcbiAqICAgICAgICAgIH1cbiAqICAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqXG4gKiAjIyMgRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0XG4gKlxuICogVGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdCBwcm92aWRlcyBpbnN0cnVjdGlvbnMgdG8gdGhlIHtAbGluayBuZy4kY29tcGlsZVxuICogY29tcGlsZXJ9LiBUaGUgYXR0cmlidXRlcyBhcmU6XG4gKlxuICogIyMjIyBgbXVsdGlFbGVtZW50YFxuICogV2hlbiB0aGlzIHByb3BlcnR5IGlzIHNldCB0byB0cnVlIChkZWZhdWx0IGlzIGBmYWxzZWApLCB0aGUgSFRNTCBjb21waWxlciB3aWxsIGNvbGxlY3QgRE9NIG5vZGVzIGJldHdlZW5cbiAqIG5vZGVzIHdpdGggdGhlIGF0dHJpYnV0ZXMgYGRpcmVjdGl2ZS1uYW1lLXN0YXJ0YCBhbmQgYGRpcmVjdGl2ZS1uYW1lLWVuZGAsIGFuZCBncm91cCB0aGVtXG4gKiB0b2dldGhlciBhcyB0aGUgZGlyZWN0aXZlIGVsZW1lbnRzLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoaXMgZmVhdHVyZSBiZSB1c2VkIG9uIGRpcmVjdGl2ZXNcbiAqIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgYmVoYXZpb3JhbCAoc3VjaCBhcyB7QGxpbmsgbmdDbGlja30pLCBhbmQgd2hpY2hcbiAqIGRvIG5vdCBtYW5pcHVsYXRlIG9yIHJlcGxhY2UgY2hpbGQgbm9kZXMgKHN1Y2ggYXMge0BsaW5rIG5nSW5jbHVkZX0pLlxuICpcbiAqICMjIyMgYHByaW9yaXR5YFxuICogV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZGlyZWN0aXZlcyBkZWZpbmVkIG9uIGEgc2luZ2xlIERPTSBlbGVtZW50LCBzb21ldGltZXMgaXRcbiAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZFxuICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGFcbiAqIG51bWJlci4gRGlyZWN0aXZlcyB3aXRoIGdyZWF0ZXIgbnVtZXJpY2FsIGBwcmlvcml0eWAgYXJlIGNvbXBpbGVkIGZpcnN0LiBQcmUtbGluayBmdW5jdGlvbnNcbiAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXJcbiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC5cbiAqXG4gKiAjIyMjIGB0ZXJtaW5hbGBcbiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzXG4gKiB3aGljaCB3aWxsIGV4ZWN1dGUgKGFueSBkaXJlY3RpdmVzIGF0IHRoZSBjdXJyZW50IHByaW9yaXR5IHdpbGwgc3RpbGwgZXhlY3V0ZVxuICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4gTm90ZSB0aGF0IGV4cHJlc3Npb25zXG4gKiBhbmQgb3RoZXIgZGlyZWN0aXZlcyB1c2VkIGluIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSB3aWxsIGFsc28gYmUgZXhjbHVkZWQgZnJvbSBleGVjdXRpb24uXG4gKlxuICogIyMjIyBgc2NvcGVgXG4gKiBUaGUgc2NvcGUgcHJvcGVydHkgY2FuIGJlIGBmYWxzZWAsIGB0cnVlYCwgb3IgYW4gb2JqZWN0OlxuICpcbiAqICogKipgZmFsc2VgIChkZWZhdWx0KToqKiBObyBzY29wZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoZSBkaXJlY3RpdmUuIFRoZSBkaXJlY3RpdmUgd2lsbCB1c2UgaXRzXG4gKiBwYXJlbnQncyBzY29wZS5cbiAqXG4gKiAqICoqYHRydWVgOioqIEEgbmV3IGNoaWxkIHNjb3BlIHRoYXQgcHJvdG90eXBpY2FsbHkgaW5oZXJpdHMgZnJvbSBpdHMgcGFyZW50IHdpbGwgYmUgY3JlYXRlZCBmb3JcbiAqIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LiBJZiBtdWx0aXBsZSBkaXJlY3RpdmVzIG9uIHRoZSBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSxcbiAqIG9ubHkgb25lIG5ldyBzY29wZSBpcyBjcmVhdGVkLlxuICpcbiAqICogKipgey4uLn1gIChhbiBvYmplY3QgaGFzaCk6KiogQSBuZXcgXCJpc29sYXRlXCIgc2NvcGUgaXMgY3JlYXRlZCBmb3IgdGhlIGRpcmVjdGl2ZSdzIHRlbXBsYXRlLlxuICogVGhlICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb20gbm9ybWFsIHNjb3BlIGluIHRoYXQgaXQgZG9lcyBub3QgcHJvdG90eXBpY2FsbHlcbiAqIGluaGVyaXQgZnJvbSBpdHMgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3RcbiAqIGFjY2lkZW50YWxseSByZWFkIG9yIG1vZGlmeSBkYXRhIGluIHRoZSBwYXJlbnQgc2NvcGUuIE5vdGUgdGhhdCBhbiBpc29sYXRlIHNjb3BlXG4gKiBkaXJlY3RpdmUgd2l0aG91dCBhIGB0ZW1wbGF0ZWAgb3IgYHRlbXBsYXRlVXJsYCB3aWxsIG5vdCBhcHBseSB0aGUgaXNvbGF0ZSBzY29wZVxuICogdG8gaXRzIGNoaWxkcmVuIGVsZW1lbnRzLlxuICpcbiAqIFRoZSAnaXNvbGF0ZScgc2NvcGUgb2JqZWN0IGhhc2ggZGVmaW5lcyBhIHNldCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0aWVzIGRlcml2ZWQgZnJvbSBhdHRyaWJ1dGVzIG9uIHRoZVxuICogZGlyZWN0aXZlJ3MgZWxlbWVudC4gVGhlc2UgbG9jYWwgcHJvcGVydGllcyBhcmUgdXNlZnVsIGZvciBhbGlhc2luZyB2YWx1ZXMgZm9yIHRlbXBsYXRlcy4gVGhlIGtleXMgaW5cbiAqIHRoZSBvYmplY3QgaGFzaCBtYXAgdG8gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IG9uIHRoZSBpc29sYXRlIHNjb3BlOyB0aGUgdmFsdWVzIGRlZmluZSBob3cgdGhlIHByb3BlcnR5XG4gKiBpcyBib3VuZCB0byB0aGUgcGFyZW50IHNjb3BlLCB2aWEgbWF0Y2hpbmcgYXR0cmlidXRlcyBvbiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudDpcbiAqXG4gKiAqIGBAYCBvciBgQGF0dHJgIC0gYmluZCBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IHRvIHRoZSB2YWx1ZSBvZiBET00gYXR0cmlidXRlLiBUaGUgcmVzdWx0IGlzXG4gKiAgIGFsd2F5cyBhIHN0cmluZyBzaW5jZSBET00gYXR0cmlidXRlcyBhcmUgc3RyaW5ncy4gSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlXG4gKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuIEdpdmVuIGA8bXktY29tcG9uZW50XG4gKiAgIG15LWF0dHI9XCJoZWxsbyB7e25hbWV9fVwiPmAgYW5kIHRoZSBpc29sYXRlIHNjb3BlIGRlZmluaXRpb24gYHNjb3BlOiB7IGxvY2FsTmFtZTonQG15QXR0cicgfWAsXG4gKiAgIHRoZSBkaXJlY3RpdmUncyBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3QgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG9cbiAqICAge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSBkaXJlY3RpdmUnc1xuICogICBzY29wZS4gVGhlIGBuYW1lYCBpcyByZWFkIGZyb20gdGhlIHBhcmVudCBzY29wZSAobm90IHRoZSBkaXJlY3RpdmUncyBzY29wZSkuXG4gKlxuICogKiBgPWAgb3IgYD1hdHRyYCAtIHNldCB1cCBhIGJpZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIGFuIGV4cHJlc3Npb25cbiAqICAgcGFzc2VkIHZpYSB0aGUgYXR0cmlidXRlIGBhdHRyYC4gVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuXG4gKiAgIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbFxuICogICBuYW1lLiBHaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB0aGUgaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uIGBzY29wZToge1xuICogICBsb2NhbE1vZGVsOiAnPW15QXR0cicgfWAsIHRoZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgb24gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIHdpbGwgcmVmbGVjdCB0aGVcbiAqICAgdmFsdWUgb2YgYHBhcmVudE1vZGVsYCBvbiB0aGUgcGFyZW50IHNjb3BlLiBDaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWQgaW5cbiAqICAgYGxvY2FsTW9kZWxgIGFuZCB2aWNlIHZlcnNhLiBPcHRpb25hbCBhdHRyaWJ1dGVzIHNob3VsZCBiZSBtYXJrZWQgYXMgc3VjaCB3aXRoIGEgcXVlc3Rpb24gbWFyazpcbiAqICAgYD0/YCBvciBgPT9hdHRyYC4gSWYgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbiBpcyBub24tYXNzaWduYWJsZSwgb3IgaWYgdGhlIGF0dHJpYnV0ZSBpc24ndFxuICogICBvcHRpb25hbCBhbmQgZG9lc24ndCBleGlzdCwgYW4gZXhjZXB0aW9uICh7QGxpbmsgZXJyb3IvJGNvbXBpbGUvbm9uYXNzaWduIGAkY29tcGlsZTpub25hc3NpZ25gfSlcbiAqICAgd2lsbCBiZSB0aHJvd24gdXBvbiBkaXNjb3ZlcmluZyBjaGFuZ2VzIHRvIHRoZSBsb2NhbCB2YWx1ZSwgc2luY2UgaXQgd2lsbCBiZSBpbXBvc3NpYmxlIHRvIHN5bmNcbiAqICAgdGhlbSBiYWNrIHRvIHRoZSBwYXJlbnQgc2NvcGUuIEJ5IGRlZmF1bHQsIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggYCR3YXRjaGB9XG4gKiAgIG1ldGhvZCBpcyB1c2VkIGZvciB0cmFja2luZyBjaGFuZ2VzLCBhbmQgdGhlIGVxdWFsaXR5IGNoZWNrIGlzIGJhc2VkIG9uIG9iamVjdCBpZGVudGl0eS5cbiAqICAgSG93ZXZlciwgaWYgYW4gb2JqZWN0IGxpdGVyYWwgb3IgYW4gYXJyYXkgbGl0ZXJhbCBpcyBwYXNzZWQgYXMgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbiwgdGhlXG4gKiAgIGVxdWFsaXR5IGNoZWNrIGlzIGRvbmUgYnkgdmFsdWUgKHVzaW5nIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uKS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiAgIHRvIHdhdGNoIHRoZSBldmFsdWF0ZWQgdmFsdWUgc2hhbGxvd2x5IHdpdGgge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICogICBgJHdhdGNoQ29sbGVjdGlvbmB9OiB1c2UgYD0qYCBvciBgPSphdHRyYCAoYD0qP2Agb3IgYD0qP2F0dHJgIGlmIHRoZSBhdHRyaWJ1dGUgaXMgb3B0aW9uYWwpLlxuICpcbiAgKiAqIGA8YCBvciBgPGF0dHJgIC0gc2V0IHVwIGEgb25lLXdheSAob25lLWRpcmVjdGlvbmFsKSBiaW5kaW5nIGJldHdlZW4gYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSBhbmQgYW5cbiAqICAgZXhwcmVzc2lvbiBwYXNzZWQgdmlhIHRoZSBhdHRyaWJ1dGUgYGF0dHJgLiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlXG4gKiAgIHBhcmVudCBzY29wZS4gSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiAgIGxvY2FsIG5hbWUuIFlvdSBjYW4gYWxzbyBtYWtlIHRoZSBiaW5kaW5nIG9wdGlvbmFsIGJ5IGFkZGluZyBgP2A6IGA8P2Agb3IgYDw/YXR0cmAuXG4gKlxuICogICBGb3IgZXhhbXBsZSwgZ2l2ZW4gYDxteS1jb21wb25lbnQgbXktYXR0cj1cInBhcmVudE1vZGVsXCI+YCBhbmQgZGlyZWN0aXZlIGRlZmluaXRpb24gb2ZcbiAqICAgYHNjb3BlOiB7IGxvY2FsTW9kZWw6JzxteUF0dHInIH1gLCB0aGVuIHRoZSBpc29sYXRlZCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgd2lsbCByZWZsZWN0IHRoZVxuICogICB2YWx1ZSBvZiBgcGFyZW50TW9kZWxgIG9uIHRoZSBwYXJlbnQgc2NvcGUuIEFueSBjaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWRcbiAqICAgaW4gYGxvY2FsTW9kZWxgLCBidXQgY2hhbmdlcyBpbiBgbG9jYWxNb2RlbGAgd2lsbCBub3QgcmVmbGVjdCBpbiBgcGFyZW50TW9kZWxgLiBUaGVyZSBhcmUgaG93ZXZlclxuICogICB0d28gY2F2ZWF0czpcbiAqICAgICAxLiBvbmUtd2F5IGJpbmRpbmcgZG9lcyBub3QgY29weSB0aGUgdmFsdWUgZnJvbSB0aGUgcGFyZW50IHRvIHRoZSBpc29sYXRlIHNjb3BlLCBpdCBzaW1wbHlcbiAqICAgICBzZXRzIHRoZSBzYW1lIHZhbHVlLiBUaGF0IG1lYW5zIGlmIHlvdXIgYm91bmQgdmFsdWUgaXMgYW4gb2JqZWN0LCBjaGFuZ2VzIHRvIGl0cyBwcm9wZXJ0aWVzXG4gKiAgICAgaW4gdGhlIGlzb2xhdGVkIHNjb3BlIHdpbGwgYmUgcmVmbGVjdGVkIGluIHRoZSBwYXJlbnQgc2NvcGUgKGJlY2F1c2UgYm90aCByZWZlcmVuY2UgdGhlIHNhbWUgb2JqZWN0KS5cbiAqICAgICAyLiBvbmUtd2F5IGJpbmRpbmcgd2F0Y2hlcyBjaGFuZ2VzIHRvIHRoZSAqKmlkZW50aXR5Kiogb2YgdGhlIHBhcmVudCB2YWx1ZS4gVGhhdCBtZWFucyB0aGVcbiAqICAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggYCR3YXRjaGB9IG9uIHRoZSBwYXJlbnQgdmFsdWUgb25seSBmaXJlcyBpZiB0aGUgcmVmZXJlbmNlXG4gKiAgICAgdG8gdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLiBJbiBtb3N0IGNhc2VzLCB0aGlzIHNob3VsZCBub3QgYmUgb2YgY29uY2VybiwgYnV0IGNhbiBiZSBpbXBvcnRhbnRcbiAqICAgICB0byBrbm93IGlmIHlvdSBvbmUtd2F5IGJpbmQgdG8gYW4gb2JqZWN0LCBhbmQgdGhlbiByZXBsYWNlIHRoYXQgb2JqZWN0IGluIHRoZSBpc29sYXRlZCBzY29wZS5cbiAqICAgICBJZiB5b3Ugbm93IGNoYW5nZSBhIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgaW4geW91ciBwYXJlbnQgc2NvcGUsIHRoZSBjaGFuZ2Ugd2lsbCBub3QgYmVcbiAqICAgICBwcm9wYWdhdGVkIHRvIHRoZSBpc29sYXRlZCBzY29wZSwgYmVjYXVzZSB0aGUgaWRlbnRpdHkgb2YgdGhlIG9iamVjdCBvbiB0aGUgcGFyZW50IHNjb3BlXG4gKiAgICAgaGFzIG5vdCBjaGFuZ2VkLiBJbnN0ZWFkIHlvdSBtdXN0IGFzc2lnbiBhIG5ldyBvYmplY3QuXG4gKlxuICogICBPbmUtd2F5IGJpbmRpbmcgaXMgdXNlZnVsIGlmIHlvdSBkbyBub3QgcGxhbiB0byBwcm9wYWdhdGUgY2hhbmdlcyB0byB5b3VyIGlzb2xhdGVkIHNjb3BlIGJpbmRpbmdzXG4gKiAgIGJhY2sgdG8gdGhlIHBhcmVudC4gSG93ZXZlciwgaXQgZG9lcyBub3QgbWFrZSB0aGlzIGNvbXBsZXRlbHkgaW1wb3NzaWJsZS5cbiAqXG4gKiAqIGAmYCBvciBgJmF0dHJgIC0gcHJvdmlkZXMgYSB3YXkgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuIElmXG4gKiAgIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwiY291bnQgPSBjb3VudCArIHZhbHVlXCI+YCBhbmQgdGhlIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBgc2NvcGU6IHtcbiAqICAgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZSBpc29sYXRlIHNjb3BlIHByb3BlcnR5IGBsb2NhbEZuYCB3aWxsIHBvaW50IHRvIGEgZnVuY3Rpb24gd3JhcHBlciBmb3JcbiAqICAgdGhlIGBjb3VudCA9IGNvdW50ICsgdmFsdWVgIGV4cHJlc3Npb24uIE9mdGVuIGl0J3MgZGVzaXJhYmxlIHRvIHBhc3MgZGF0YSBmcm9tIHRoZSBpc29sYXRlZCBzY29wZVxuICogICB2aWEgYW4gZXhwcmVzc2lvbiB0byB0aGUgcGFyZW50IHNjb3BlLiBUaGlzIGNhbiBiZSBkb25lIGJ5IHBhc3NpbmcgYSBtYXAgb2YgbG9jYWwgdmFyaWFibGUgbmFtZXNcbiAqICAgYW5kIHZhbHVlcyBpbnRvIHRoZSBleHByZXNzaW9uIHdyYXBwZXIgZm4uIEZvciBleGFtcGxlLCBpZiB0aGUgZXhwcmVzc2lvbiBpcyBgaW5jcmVtZW50KGFtb3VudClgXG4gKiAgIHRoZW4gd2UgY2FuIHNwZWNpZnkgdGhlIGFtb3VudCB2YWx1ZSBieSBjYWxsaW5nIHRoZSBgbG9jYWxGbmAgYXMgYGxvY2FsRm4oe2Ftb3VudDogMjJ9KWAuXG4gKlxuICogSW4gZ2VuZXJhbCBpdCdzIHBvc3NpYmxlIHRvIGFwcGx5IG1vcmUgdGhhbiBvbmUgZGlyZWN0aXZlIHRvIG9uZSBlbGVtZW50LCBidXQgdGhlcmUgbWlnaHQgYmUgbGltaXRhdGlvbnNcbiAqIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBzY29wZSByZXF1aXJlZCBieSB0aGUgZGlyZWN0aXZlcy4gVGhlIGZvbGxvd2luZyBwb2ludHMgd2lsbCBoZWxwIGV4cGxhaW4gdGhlc2UgbGltaXRhdGlvbnMuXG4gKiBGb3Igc2ltcGxpY2l0eSBvbmx5IHR3byBkaXJlY3RpdmVzIGFyZSB0YWtlbiBpbnRvIGFjY291bnQsIGJ1dCBpdCBpcyBhbHNvIGFwcGxpY2FibGUgZm9yIHNldmVyYWwgZGlyZWN0aXZlczpcbiAqXG4gKiAqICoqbm8gc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiBUd28gZGlyZWN0aXZlcyB3aGljaCBkb24ndCByZXF1aXJlIHRoZWlyIG93biBzY29wZSB3aWxsIHVzZSB0aGVpciBwYXJlbnQncyBzY29wZVxuICogKiAqKmNoaWxkIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gIEJvdGggZGlyZWN0aXZlcyB3aWxsIHNoYXJlIG9uZSBzaW5nbGUgY2hpbGQgc2NvcGVcbiAqICogKipjaGlsZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICBCb3RoIGRpcmVjdGl2ZXMgd2lsbCBzaGFyZSBvbmUgc2luZ2xlIGNoaWxkIHNjb3BlXG4gKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiAgVGhlIGlzb2xhdGVkIGRpcmVjdGl2ZSB3aWxsIHVzZSBpdCdzIG93biBjcmVhdGVkIGlzb2xhdGVkIHNjb3BlLiBUaGUgb3RoZXIgZGlyZWN0aXZlIHdpbGwgdXNlXG4gKiBpdHMgcGFyZW50J3Mgc2NvcGVcbiAqICogKippc29sYXRlZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzIGNhbm5vdFxuICogYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICogKiAqKmlzb2xhdGVkIHNjb3BlKiogKyAqKmlzb2xhdGVkIHNjb3BlKiogID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzXG4gKiBjYW5ub3QgYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICpcbiAqXG4gKiAjIyMjIGBiaW5kVG9Db250cm9sbGVyYFxuICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGJpbmQgc2NvcGUgcHJvcGVydGllcyBkaXJlY3RseSB0byB0aGUgY29udHJvbGxlci4gSXQgY2FuIGJlIGVpdGhlclxuICogYHRydWVgIG9yIGFuIG9iamVjdCBoYXNoIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgc2NvcGVgIHByb3BlcnR5LlxuICpcbiAqIFdoZW4gYW4gaXNvbGF0ZSBzY29wZSBpcyB1c2VkIGZvciBhIGRpcmVjdGl2ZSAoc2VlIGFib3ZlKSwgYGJpbmRUb0NvbnRyb2xsZXI6IHRydWVgIHdpbGxcbiAqIGFsbG93IGEgY29tcG9uZW50IHRvIGhhdmUgaXRzIHByb3BlcnRpZXMgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIsIHJhdGhlciB0aGFuIHRvIHNjb3BlLlxuICpcbiAqIEFmdGVyIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCwgdGhlIGluaXRpYWwgdmFsdWVzIG9mIHRoZSBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIHdpbGwgYmUgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXJcbiAqIHByb3BlcnRpZXMuIFlvdSBjYW4gYWNjZXNzIHRoZXNlIGJpbmRpbmdzIG9uY2UgdGhleSBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgYnkgcHJvdmlkaW5nIGEgY29udHJvbGxlciBtZXRob2QgY2FsbGVkXG4gKiBgJG9uSW5pdGAsIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzIG9uIGFuIGVsZW1lbnQgaGF2ZSBiZWVuIGNvbnN0cnVjdGVkIGFuZCBoYWQgdGhlaXIgYmluZGluZ3NcbiAqIGluaXRpYWxpemVkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKkRlcHJlY2F0aW9uIHdhcm5pbmc6KiogaWYgYCRjb21waWxlUHJvY3ZpZGVyLnByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCh0cnVlKWAgd2FzIGNhbGxlZCwgYmluZGluZ3MgZm9yIG5vbi1FUzYgY2xhc3NcbiAqIGNvbnRyb2xsZXJzIGFyZSBib3VuZCB0byBgdGhpc2AgYmVmb3JlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCBidXQgdGhpcyB1c2UgaXMgbm93IGRlcHJlY2F0ZWQuIFBsZWFzZVxuICogcGxhY2UgaW5pdGlhbGl6YXRpb24gY29kZSB0aGF0IHJlbGllcyB1cG9uIGJpbmRpbmdzIGluc2lkZSBhIGAkb25Jbml0YCBtZXRob2Qgb24gdGhlIGNvbnRyb2xsZXIsIGluc3RlYWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNldCBgYmluZFRvQ29udHJvbGxlcmAgdG8gYW4gb2JqZWN0IGhhc2ggd2l0aCB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIGBzY29wZWAgcHJvcGVydHkuXG4gKiBUaGlzIHdpbGwgc2V0IHVwIHRoZSBzY29wZSBiaW5kaW5ncyB0byB0aGUgY29udHJvbGxlciBkaXJlY3RseS4gTm90ZSB0aGF0IGBzY29wZWAgY2FuIHN0aWxsIGJlIHVzZWRcbiAqIHRvIGRlZmluZSB3aGljaCBraW5kIG9mIHNjb3BlIGlzIGNyZWF0ZWQuIEJ5IGRlZmF1bHQsIG5vIHNjb3BlIGlzIGNyZWF0ZWQuIFVzZSBgc2NvcGU6IHt9YCB0byBjcmVhdGUgYW4gaXNvbGF0ZVxuICogc2NvcGUgKHVzZWZ1bCBmb3IgY29tcG9uZW50IGRpcmVjdGl2ZXMpLlxuICpcbiAqIElmIGJvdGggYGJpbmRUb0NvbnRyb2xsZXJgIGFuZCBgc2NvcGVgIGFyZSBkZWZpbmVkIGFuZCBoYXZlIG9iamVjdCBoYXNoZXMsIGBiaW5kVG9Db250cm9sbGVyYCBvdmVycmlkZXMgYHNjb3BlYC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlcmBcbiAqIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIFRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBiZWZvcmUgdGhlXG4gKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgKHNlZVxuICogYHJlcXVpcmVgIGF0dHJpYnV0ZSkuIFRoaXMgYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIGNvbW11bmljYXRlIHdpdGggZWFjaCBvdGhlciBhbmQgYXVnbWVudFxuICogZWFjaCBvdGhlcidzIGJlaGF2aW9yLiBUaGUgY29udHJvbGxlciBpcyBpbmplY3RhYmxlIChhbmQgc3VwcG9ydHMgYnJhY2tldCBub3RhdGlvbikgd2l0aCB0aGUgZm9sbG93aW5nIGxvY2FsczpcbiAqXG4gKiAqIGAkc2NvcGVgIC0gQ3VycmVudCBzY29wZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqICogYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICogKiBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gKiAqIGAkdHJhbnNjbHVkZWAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICogICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNsb3ROYW1lKWA6XG4gKiAgICAqIGBzY29wZWA6IChvcHRpb25hbCkgb3ZlcnJpZGUgdGhlIHNjb3BlLlxuICogICAgKiBgY2xvbmVMaW5raW5nRm5gOiAob3B0aW9uYWwpIGFyZ3VtZW50IHRvIGNyZWF0ZSBjbG9uZXMgb2YgdGhlIG9yaWdpbmFsIHRyYW5zY2x1ZGVkIGNvbnRlbnQuXG4gKiAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAob3B0aW9uYWwpOlxuICogICAgICAgICogZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVMaW5raW5nRm5gIHdpbGwgYWRkIHRoZSBjbG9uZWQgZWxlbWVudHMuXG4gKiAgICAgICAgKiBkZWZhdWx0OiBgJGVsZW1lbnQucGFyZW50KClgIHJlc3AuIGAkZWxlbWVudGAgZm9yIGB0cmFuc2NsdWRlOidlbGVtZW50J2AgcmVzcC4gYHRyYW5zY2x1ZGU6dHJ1ZWAuXG4gKiAgICAgICAgKiBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cylcbiAqICAgICAgICAgIGFuZCB3aGVuIHRoZSBgY2xvbmVMaW5raW5nRm5gIGlzIHBhc3NlZCxcbiAqICAgICAgICAgIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gY3JlYXRlZCBhbmQgY2xvbmVkIGluIGEgc3BlY2lhbCB3YXkgd2hlbiB0aGV5IGFyZSBkZWZpbmVkIG91dHNpZGUgdGhlaXJcbiAqICAgICAgICAgIHVzdWFsIGNvbnRhaW5lcnMgKGUuZy4gbGlrZSBgPHN2Zz5gKS5cbiAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS5cbiAqICAgICogYHNsb3ROYW1lYDogKG9wdGlvbmFsKSB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byB0cmFuc2NsdWRlLiBJZiBmYWxzeSAoZS5nLiBgbnVsbGAsIGB1bmRlZmluZWRgIG9yIGAnJ2ApXG4gKiAgICAgIHRoZW4gdGhlIGRlZmF1bHQgdHJhbnNjbHVzaW9uIGlzIHByb3ZpZGVkLlxuICogICAgVGhlIGAkdHJhbnNjbHVkZWAgZnVuY3Rpb24gYWxzbyBoYXMgYSBtZXRob2Qgb24gaXQsIGAkdHJhbnNjbHVkZS5pc1Nsb3RGaWxsZWQoc2xvdE5hbWUpYCwgd2hpY2ggcmV0dXJuc1xuICogICAgYHRydWVgIGlmIHRoZSBzcGVjaWZpZWQgc2xvdCBjb250YWlucyBjb250ZW50IChpLmUuIG9uZSBvciBtb3JlIERPTSBub2RlcykuXG4gKlxuICogIyMjIyBgcmVxdWlyZWBcbiAqIFJlcXVpcmUgYW5vdGhlciBkaXJlY3RpdmUgYW5kIGluamVjdCBpdHMgY29udHJvbGxlciBhcyB0aGUgZm91cnRoIGFyZ3VtZW50IHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGVcbiAqIGByZXF1aXJlYCBwcm9wZXJ0eSBjYW4gYmUgYSBzdHJpbmcsIGFuIGFycmF5IG9yIGFuIG9iamVjdDpcbiAqICogYSAqKnN0cmluZyoqIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uXG4gKiAqIGFuICoqYXJyYXkqKiBjb250YWluaW5nIHRoZSBuYW1lcyBvZiBkaXJlY3RpdmVzIHRvIHBhc3MgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZSBhcmd1bWVudCBwYXNzZWQgdG8gdGhlXG4gKiBsaW5raW5nIGZ1bmN0aW9uIHdpbGwgYmUgYW4gYXJyYXkgb2YgY29udHJvbGxlcnMgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIG5hbWVzIGluIHRoZSBgcmVxdWlyZWAgcHJvcGVydHlcbiAqICogYW4gKipvYmplY3QqKiB3aG9zZSBwcm9wZXJ0eSB2YWx1ZXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgZGlyZWN0aXZlcyB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGUgYXJndW1lbnRcbiAqIHBhc3NlZCB0byB0aGUgbGlua2luZyBmdW5jdGlvbiB3aWxsIGFsc28gYmUgYW4gb2JqZWN0IHdpdGggbWF0Y2hpbmcga2V5cywgd2hvc2UgdmFsdWVzIHdpbGwgaG9sZCB0aGUgY29ycmVzcG9uZGluZ1xuICogY29udHJvbGxlcnMuXG4gKlxuICogSWYgdGhlIGByZXF1aXJlYCBwcm9wZXJ0eSBpcyBhbiBvYmplY3QgYW5kIGBiaW5kVG9Db250cm9sbGVyYCBpcyB0cnV0aHksIHRoZW4gdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIGFyZVxuICogYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgdGhlIGtleXMgb2YgdGhlIGByZXF1aXJlYCBwcm9wZXJ0eS4gVGhpcyBiaW5kaW5nIG9jY3VycyBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzXG4gKiBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYnV0IGJlZm9yZSBgJG9uSW5pdGAgaXMgY2FsbGVkLlxuICogSWYgdGhlIG5hbWUgb2YgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgaXMgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUgKHRoZSBrZXkpLCB0aGUgbmFtZSBjYW4gYmVcbiAqIG9taXR0ZWQuIEZvciBleGFtcGxlLCBge3BhcmVudERpcjogJ15eJ31gIGlzIGVxdWl2YWxlbnQgdG8gYHtwYXJlbnREaXI6ICdeXnBhcmVudERpcid9YC5cbiAqIFNlZSB0aGUge0BsaW5rICRjb21waWxlUHJvdmlkZXIjY29tcG9uZW50fSBoZWxwZXIgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRoaXMgY2FuIGJlIHVzZWQuXG4gKiBJZiBubyBzdWNoIHJlcXVpcmVkIGRpcmVjdGl2ZShzKSBjYW4gYmUgZm91bmQsIG9yIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xsZXIsIHRoZW4gYW4gZXJyb3IgaXNcbiAqIHJhaXNlZCAodW5sZXNzIG5vIGxpbmsgZnVuY3Rpb24gaXMgc3BlY2lmaWVkIGFuZCB0aGUgcmVxdWlyZWQgY29udHJvbGxlcnMgYXJlIG5vdCBiZWluZyBib3VuZCB0byB0aGUgZGlyZWN0aXZlXG4gKiBjb250cm9sbGVyLCBpbiB3aGljaCBjYXNlIGVycm9yIGNoZWNraW5nIGlzIHNraXBwZWQpLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDpcbiAqXG4gKiAqIChubyBwcmVmaXgpIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGBeYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGBeXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eXmAgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLCBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlckFzYFxuICogSWRlbnRpZmllciBuYW1lIGZvciBhIHJlZmVyZW5jZSB0byB0aGUgY29udHJvbGxlciBpbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUuXG4gKiBUaGlzIGFsbG93cyB0aGUgY29udHJvbGxlciB0byBiZSByZWZlcmVuY2VkIGZyb20gdGhlIGRpcmVjdGl2ZSB0ZW1wbGF0ZS4gVGhpcyBpcyBlc3BlY2lhbGx5XG4gKiB1c2VmdWwgd2hlbiBhIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudCwgaS5lLiB3aXRoIGFuIGBpc29sYXRlYCBzY29wZS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiB0byB1c2UgaXQgaW4gYSBkaXJlY3RpdmUgd2l0aG91dCBhbiBgaXNvbGF0ZWAgLyBgbmV3YCBzY29wZSwgYnV0IHlvdSBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlXG4gKiBgY29udHJvbGxlckFzYCByZWZlcmVuY2UgbWlnaHQgb3ZlcndyaXRlIGEgcHJvcGVydHkgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqXG4gKiAjIyMjIGByZXN0cmljdGBcbiAqIFN0cmluZyBvZiBzdWJzZXQgb2YgYEVBQ01gIHdoaWNoIHJlc3RyaWN0cyB0aGUgZGlyZWN0aXZlIHRvIGEgc3BlY2lmaWMgZGlyZWN0aXZlXG4gKiBkZWNsYXJhdGlvbiBzdHlsZS4gSWYgb21pdHRlZCwgdGhlIGRlZmF1bHRzIChlbGVtZW50cyBhbmQgYXR0cmlidXRlcykgYXJlIHVzZWQuXG4gKlxuICogKiBgRWAgLSBFbGVtZW50IG5hbWUgKGRlZmF1bHQpOiBgPG15LWRpcmVjdGl2ZT48L215LWRpcmVjdGl2ZT5gXG4gKiAqIGBBYCAtIEF0dHJpYnV0ZSAoZGVmYXVsdCk6IGA8ZGl2IG15LWRpcmVjdGl2ZT1cImV4cFwiPjwvZGl2PmBcbiAqICogYENgIC0gQ2xhc3M6IGA8ZGl2IGNsYXNzPVwibXktZGlyZWN0aXZlOiBleHA7XCI+PC9kaXY+YFxuICogKiBgTWAgLSBDb21tZW50OiBgPCEtLSBkaXJlY3RpdmU6IG15LWRpcmVjdGl2ZSBleHAgLS0+YFxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZU5hbWVzcGFjZWBcbiAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRvY3VtZW50IHR5cGUgdXNlZCBieSB0aGUgbWFya3VwIGluIHRoZSB0ZW1wbGF0ZS5cbiAqIEFuZ3VsYXJKUyBuZWVkcyB0aGlzIGluZm9ybWF0aW9uIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gYmUgY3JlYXRlZCBhbmQgY2xvbmVkXG4gKiBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyIHVzdWFsIGNvbnRhaW5lcnMgbGlrZSBgPHN2Zz5gIGFuZCBgPG1hdGg+YC5cbiAqXG4gKiAqIGBodG1sYCAtIEFsbCByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgSFRNTC4gUm9vdCBub2RlcyBtYXkgYWxzbyBiZVxuICogICB0b3AtbGV2ZWwgZWxlbWVudHMgc3VjaCBhcyBgPHN2Zz5gIG9yIGA8bWF0aD5gLlxuICogKiBgc3ZnYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgU1ZHIGVsZW1lbnRzIChleGNsdWRpbmcgYDxtYXRoPmApLlxuICogKiBgbWF0aGAgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIE1hdGhNTCBlbGVtZW50cyAoZXhjbHVkaW5nIGA8c3ZnPmApLlxuICpcbiAqIElmIG5vIGB0ZW1wbGF0ZU5hbWVzcGFjZWAgaXMgc3BlY2lmaWVkLCB0aGVuIHRoZSBuYW1lc3BhY2UgaXMgY29uc2lkZXJlZCB0byBiZSBgaHRtbGAuXG4gKlxuICogIyMjIyBgdGVtcGxhdGVgXG4gKiBIVE1MIG1hcmt1cCB0aGF0IG1heTpcbiAqICogUmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGRlZmF1bHQpLlxuICogKiBSZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGl0c2VsZiAoaWYgYHJlcGxhY2VgIGlzIHRydWUgLSBERVBSRUNBVEVEKS5cbiAqICogV3JhcCB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGlmIGB0cmFuc2NsdWRlYCBpcyB0cnVlKS5cbiAqXG4gKiBWYWx1ZSBtYXkgYmU6XG4gKlxuICogKiBBIHN0cmluZy4gRm9yIGV4YW1wbGUgYDxkaXYgcmVkLW9uLWhvdmVyPnt7ZGVsZXRlX3N0cn19PC9kaXY+YC5cbiAqICogQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYFxuICogICBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlLlxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZVVybGBcbiAqIFRoaXMgaXMgc2ltaWxhciB0byBgdGVtcGxhdGVgIGJ1dCB0aGUgdGVtcGxhdGUgaXMgbG9hZGVkIGZyb20gdGhlIHNwZWNpZmllZCBVUkwsIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIEJlY2F1c2UgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGVyIHdpbGwgc3VzcGVuZCBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzIG9uIHRoYXQgZWxlbWVudFxuICogZm9yIGxhdGVyIHdoZW4gdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHJlc29sdmVkLiAgSW4gdGhlIG1lYW50aW1lIGl0IHdpbGwgY29udGludWUgdG8gY29tcGlsZSBhbmQgbGlua1xuICogc2libGluZyBhbmQgcGFyZW50IGVsZW1lbnRzIGFzIHRob3VnaCB0aGlzIGVsZW1lbnQgaGFkIG5vdCBjb250YWluZWQgYW55IGRpcmVjdGl2ZXMuXG4gKlxuICogVGhlIGNvbXBpbGVyIGRvZXMgbm90IHN1c3BlbmQgdGhlIGVudGlyZSBjb21waWxhdGlvbiB0byB3YWl0IGZvciB0ZW1wbGF0ZXMgdG8gYmUgbG9hZGVkIGJlY2F1c2UgdGhpc1xuICogd291bGQgcmVzdWx0IGluIHRoZSB3aG9sZSBhcHAgXCJzdGFsbGluZ1wiIHVudGlsIGFsbCB0ZW1wbGF0ZXMgYXJlIGxvYWRlZCBhc3luY2hyb25vdXNseSAtIGV2ZW4gaW4gdGhlXG4gKiBjYXNlIHdoZW4gb25seSBvbmUgZGVlcGx5IG5lc3RlZCBkaXJlY3RpdmUgaGFzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogVGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgZXZlbiBpZiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcHJlbG9hZGVkIGludG8gdGhlIHtAbGluayAkdGVtcGxhdGVDYWNoZX1cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgYHRlbXBsYXRlVXJsYCBhcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVSTCBvciBhcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3b1xuICogYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYCBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zXG4gKiBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHVybC4gIEluIGVpdGhlciBjYXNlLCB0aGUgdGVtcGxhdGUgVVJMIGlzIHBhc3NlZCB0aHJvdWdoIHtAbGlua1xuICogJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9LlxuICpcbiAqXG4gKiAjIyMjIGByZXBsYWNlYCAoWypERVBSRUNBVEVEKiFdLCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlIC0gaS5lLiB2Mi4wKVxuICogc3BlY2lmeSB3aGF0IHRoZSB0ZW1wbGF0ZSBzaG91bGQgcmVwbGFjZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiAqIGB0cnVlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGBmYWxzZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqXG4gKiBUaGUgcmVwbGFjZW1lbnQgcHJvY2VzcyBtaWdyYXRlcyBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgLyBjbGFzc2VzIGZyb20gdGhlIG9sZCBlbGVtZW50IHRvIHRoZSBuZXdcbiAqIG9uZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RlbXBsYXRlLWV4cGFuZGluZy1kaXJlY3RpdmVcbiAqIERpcmVjdGl2ZXMgR3VpZGV9IGZvciBhbiBleGFtcGxlLlxuICpcbiAqIFRoZXJlIGFyZSB2ZXJ5IGZldyBzY2VuYXJpb3Mgd2hlcmUgZWxlbWVudCByZXBsYWNlbWVudCBpcyByZXF1aXJlZCBmb3IgdGhlIGFwcGxpY2F0aW9uIGZ1bmN0aW9uLFxuICogdGhlIG1haW4gb25lIGJlaW5nIHJldXNhYmxlIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIHVzZWQgd2l0aGluIFNWRyBjb250ZXh0c1xuICogKGJlY2F1c2UgU1ZHIGRvZXNuJ3Qgd29yayB3aXRoIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgRE9NIHRyZWUpLlxuICpcbiAqICMjIyMgYHRyYW5zY2x1ZGVgXG4gKiBFeHRyYWN0IHRoZSBjb250ZW50cyBvZiB0aGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGFwcGVhcnMgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udGVudHMgYXJlIGNvbXBpbGVkIGFuZCBwcm92aWRlZCB0byB0aGUgZGlyZWN0aXZlIGFzIGEgKip0cmFuc2NsdXNpb24gZnVuY3Rpb24qKi4gU2VlIHRoZVxuICoge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBUcmFuc2NsdXNpb259IHNlY3Rpb24gYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGNvbXBpbGVgXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCwgdEF0dHJzLCB0cmFuc2NsdWRlKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBkZWFscyB3aXRoIHRyYW5zZm9ybWluZyB0aGUgdGVtcGxhdGUgRE9NLiBTaW5jZSBtb3N0IGRpcmVjdGl2ZXMgZG8gbm90IGRvXG4gKiB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiwgaXQgaXMgbm90IHVzZWQgb2Z0ZW4uIFRoZSBjb21waWxlIGZ1bmN0aW9uIHRha2VzIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICpcbiAqICAgKiBgdEVsZW1lbnRgIC0gdGVtcGxhdGUgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gZGVjbGFyZWQuIEl0IGlzXG4gKiAgICAgc2FmZSB0byBkbyB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiBvbiB0aGUgZWxlbWVudCBhbmQgY2hpbGQgZWxlbWVudHMgb25seS5cbiAqXG4gKiAgICogYHRBdHRyc2AgLSB0ZW1wbGF0ZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBjb21waWxlIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVgIC0gIFsqREVQUkVDQVRFRCohXSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbjogYGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUxpbmtpbmdGbilgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgdGVtcGxhdGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5rIGluc3RhbmNlIG1heSBiZSBkaWZmZXJlbnQgb2JqZWN0cyBpZiB0aGUgdGVtcGxhdGUgaGFzXG4gKiBiZWVuIGNsb25lZC4gRm9yIHRoaXMgcmVhc29uIGl0IGlzICoqbm90Kiogc2FmZSB0byBkbyBhbnl0aGluZyBvdGhlciB0aGFuIERPTSB0cmFuc2Zvcm1hdGlvbnMgdGhhdFxuICogYXBwbHkgdG8gYWxsIGNsb25lZCBET00gbm9kZXMgd2l0aGluIHRoZSBjb21waWxlIGZ1bmN0aW9uLiBTcGVjaWZpY2FsbHksIERPTSBsaXN0ZW5lciByZWdpc3RyYXRpb25cbiAqIHNob3VsZCBiZSBkb25lIGluIGEgbGlua2luZyBmdW5jdGlvbiByYXRoZXIgdGhhbiBpbiBhIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cblxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBjYW5ub3QgaGFuZGxlIGRpcmVjdGl2ZXMgdGhhdCByZWN1cnNpdmVseSB1c2UgdGhlbXNlbHZlcyBpbiB0aGVpclxuICogb3duIHRlbXBsYXRlcyBvciBjb21waWxlIGZ1bmN0aW9ucy4gQ29tcGlsaW5nIHRoZXNlIGRpcmVjdGl2ZXMgcmVzdWx0cyBpbiBhbiBpbmZpbml0ZSBsb29wIGFuZFxuICogc3RhY2sgb3ZlcmZsb3cgZXJyb3JzLlxuICpcbiAqIFRoaXMgY2FuIGJlIGF2b2lkZWQgYnkgbWFudWFsbHkgdXNpbmcgJGNvbXBpbGUgaW4gdGhlIHBvc3RMaW5rIGZ1bmN0aW9uIHRvIGltcGVyYXRpdmVseSBjb21waWxlXG4gKiBhIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIGluc3RlYWQgb2YgcmVseWluZyBvbiBhdXRvbWF0aWMgdGVtcGxhdGUgY29tcGlsYXRpb24gdmlhIGB0ZW1wbGF0ZWAgb3JcbiAqIGB0ZW1wbGF0ZVVybGAgZGVjbGFyYXRpb24gb3IgbWFudWFsIGNvbXBpbGF0aW9uIGluc2lkZSB0aGUgY29tcGlsZSBmdW5jdGlvbi5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqICoqTm90ZToqKiBUaGUgYHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gZG9lcyBub3Qga25vdyBhYm91dCB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSB1c2UgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWRcbiAqICAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuXG4gKiBBIGNvbXBpbGUgZnVuY3Rpb24gY2FuIGhhdmUgYSByZXR1cm4gdmFsdWUgd2hpY2ggY2FuIGJlIGVpdGhlciBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdC5cbiAqXG4gKiAqIHJldHVybmluZyBhIChwb3N0LWxpbmspIGZ1bmN0aW9uIC0gaXMgZXF1aXZhbGVudCB0byByZWdpc3RlcmluZyB0aGUgbGlua2luZyBmdW5jdGlvbiB2aWEgdGhlXG4gKiAgIGBsaW5rYCBwcm9wZXJ0eSBvZiB0aGUgY29uZmlnIG9iamVjdCB3aGVuIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGVtcHR5LlxuICpcbiAqICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uKHMpIHJlZ2lzdGVyZWQgdmlhIGBwcmVgIGFuZCBgcG9zdGAgcHJvcGVydGllcyAtIGFsbG93cyB5b3UgdG9cbiAqICAgY29udHJvbCB3aGVuIGEgbGlua2luZyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZS4gU2VlIGluZm8gYWJvdXRcbiAqICAgcHJlLWxpbmtpbmcgYW5kIHBvc3QtbGlua2luZyBmdW5jdGlvbnMgYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGxpbmtgXG4gKiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgb25seSBpZiB0aGUgYGNvbXBpbGVgIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLlxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGVGbikgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGxpbmsgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIERPTSBsaXN0ZW5lcnMgYXMgd2VsbCBhcyB1cGRhdGluZyB0aGUgRE9NLiBJdCBpc1xuICogZXhlY3V0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIGNsb25lZC4gVGhpcyBpcyB3aGVyZSBtb3N0IG9mIHRoZSBkaXJlY3RpdmUgbG9naWMgd2lsbCBiZVxuICogcHV0LlxuICpcbiAqICAgKiBgc2NvcGVgIC0ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IC0gVGhlIHNjb3BlIHRvIGJlIHVzZWQgYnkgdGhlXG4gKiAgICAgZGlyZWN0aXZlIGZvciByZWdpc3RlcmluZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlc30uXG4gKlxuICogICAqIGBpRWxlbWVudGAgLSBpbnN0YW5jZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBpcyB0byBiZSB1c2VkLiBJdCBpcyBzYWZlIHRvXG4gKiAgICAgbWFuaXB1bGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQgb25seSBpbiBgcG9zdExpbmtgIGZ1bmN0aW9uIHNpbmNlIHRoZSBjaGlsZHJlbiBoYXZlXG4gKiAgICAgYWxyZWFkeSBiZWVuIGxpbmtlZC5cbiAqXG4gKiAgICogYGlBdHRyc2AgLSBpbnN0YW5jZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBsaW5raW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYGNvbnRyb2xsZXJgIC0gdGhlIGRpcmVjdGl2ZSdzIHJlcXVpcmVkIGNvbnRyb2xsZXIgaW5zdGFuY2UocykgLSBJbnN0YW5jZXMgYXJlIHNoYXJlZFxuICogICAgIGFtb25nIGFsbCBkaXJlY3RpdmVzLCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBjb250cm9sbGVycyBhcyBhIGNvbW11bmljYXRpb25cbiAqICAgICBjaGFubmVsLiBUaGUgZXhhY3QgdmFsdWUgZGVwZW5kcyBvbiB0aGUgZGlyZWN0aXZlJ3MgYHJlcXVpcmVgIHByb3BlcnR5OlxuICogICAgICAgKiBubyBjb250cm9sbGVyKHMpIHJlcXVpcmVkOiB0aGUgZGlyZWN0aXZlJ3Mgb3duIGNvbnRyb2xsZXIsIG9yIGB1bmRlZmluZWRgIGlmIGl0IGRvZXNuJ3QgaGF2ZSBvbmVcbiAqICAgICAgICogYHN0cmluZ2A6IHRoZSBjb250cm9sbGVyIGluc3RhbmNlXG4gKiAgICAgICAqIGBhcnJheWA6IGFycmF5IG9mIGNvbnRyb2xsZXIgaW5zdGFuY2VzXG4gKlxuICogICAgIElmIGEgcmVxdWlyZWQgY29udHJvbGxlciBjYW5ub3QgYmUgZm91bmQsIGFuZCBpdCBpcyBvcHRpb25hbCwgdGhlIGluc3RhbmNlIGlzIGBudWxsYCxcbiAqICAgICBvdGhlcndpc2UgdGhlIHtAbGluayBlcnJvcjokY29tcGlsZTpjdHJlcSBNaXNzaW5nIFJlcXVpcmVkIENvbnRyb2xsZXJ9IGVycm9yIGlzIHRocm93bi5cbiAqXG4gKiAgICAgTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyByZXF1aXJlIHRoZSBkaXJlY3RpdmUncyBvd24gY29udHJvbGxlciAtIGl0IHdpbGwgYmUgbWFkZSBhdmFpbGFibGUgbGlrZVxuICogICAgIGFueSBvdGhlciBjb250cm9sbGVyLlxuICpcbiAqICAgKiBgdHJhbnNjbHVkZUZuYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiAgICAgVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYCR0cmFuc2NsdWRlYCBwYXJhbWV0ZXIgb2YgZGlyZWN0aXZlIGNvbnRyb2xsZXJzLFxuICogICAgIHNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWNvbnRyb2xsZXItIHRoZSBjb250cm9sbGVyIHNlY3Rpb24gZm9yIGRldGFpbHN9LlxuICogICAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICpcbiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBiZWZvcmUgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIE5vdCBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBzaW5jZSB0aGVcbiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy5cbiAqXG4gKiAjIyMjIFBvc3QtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGFmdGVyIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLlxuICpcbiAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZFxuICogYW5kIGxpbmtlZCBzaW5jZSB0aGV5IGFyZSB3YWl0aW5nIGZvciB0aGVpciB0ZW1wbGF0ZSB0byBsb2FkIGFzeW5jaHJvbm91c2x5IGFuZCB0aGVpciBvd25cbiAqIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiBJdCBpcyBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBpbiB0aGUgcG9zdC1saW5raW5nIGZ1bmN0aW9uIG9uIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCB3YWl0aW5nXG4gKiBmb3IgdGhlaXIgYXN5bmMgdGVtcGxhdGVzIHRvIGJlIHJlc29sdmVkLlxuICpcbiAqXG4gKiAjIyMgVHJhbnNjbHVzaW9uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHRoZSBwcm9jZXNzIG9mIGV4dHJhY3RpbmcgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cyBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBET00gYW5kXG4gKiBjb3B5aW5nIHRoZW0gdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBET00sIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGNvbm5lY3Rpb24gdG8gdGhlIG9yaWdpbmFsIEFuZ3VsYXJKU1xuICogc2NvcGUgZnJvbSB3aGVyZSB0aGV5IHdlcmUgdGFrZW4uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHVzZWQgKG9mdGVuIHdpdGgge0BsaW5rIG5nVHJhbnNjbHVkZX0pIHRvIGluc2VydCB0aGVcbiAqIG9yaWdpbmFsIGNvbnRlbnRzIG9mIGEgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbnRvIGEgc3BlY2lmaWVkIHBsYWNlIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGJlbmVmaXQgb2YgdHJhbnNjbHVzaW9uLCBvdmVyIHNpbXBseSBtb3ZpbmcgdGhlIERPTSBlbGVtZW50cyBtYW51YWxseSwgaXMgdGhhdCB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBvbiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdCB3YXMgdGFrZW4sIGV2ZW4gaWYgdGhlIGRpcmVjdGl2ZVxuICogaGFzIGlzb2xhdGVkIHNjb3BlLlxuICogU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI2NyZWF0aW5nLWEtZGlyZWN0aXZlLXRoYXQtd3JhcHMtb3RoZXItZWxlbWVudHMgRGlyZWN0aXZlcyBHdWlkZX0uXG4gKlxuICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUgZm9yIGl0cyB0ZW1wbGF0ZSwgd2hpbGUgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gaXRzIG9yaWdpbmF0aW5nIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogV2hlbiB0ZXN0aW5nIGFuIGVsZW1lbnQgdHJhbnNjbHVkZSBkaXJlY3RpdmUgeW91IG11c3Qgbm90IHBsYWNlIHRoZSBkaXJlY3RpdmUgYXQgdGhlIHJvb3Qgb2YgdGhlXG4gKiBET00gZnJhZ21lbnQgdGhhdCBpcyBiZWluZyBjb21waWxlZC4gU2VlIHtAbGluayBndWlkZS91bml0LXRlc3RpbmcjdGVzdGluZy10cmFuc2NsdXNpb24tZGlyZWN0aXZlc1xuICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZSBhcmUgdGhyZWUga2luZHMgb2YgdHJhbnNjbHVzaW9uIGRlcGVuZGluZyB1cG9uIHdoZXRoZXIgeW91IHdhbnQgdG8gdHJhbnNjbHVkZSBqdXN0IHRoZSBjb250ZW50cyBvZiB0aGVcbiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQsIHRoZSBlbnRpcmUgZWxlbWVudCBvciBtdWx0aXBsZSBwYXJ0cyBvZiB0aGUgZWxlbWVudCBjb250ZW50czpcbiAqXG4gKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgKGkuZS4gdGhlIGNoaWxkIG5vZGVzKSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqICogYCdlbGVtZW50J2AgLSB0cmFuc2NsdWRlIHRoZSB3aG9sZSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbmNsdWRpbmcgYW55IGRpcmVjdGl2ZXMgb24gdGhpc1xuICogICBlbGVtZW50IHRoYXQgZGVmaW5lZCBhdCBhIGxvd2VyIHByaW9yaXR5IHRoYW4gdGhpcyBkaXJlY3RpdmUuIFdoZW4gdXNlZCwgdGhlIGB0ZW1wbGF0ZWBcbiAqICAgcHJvcGVydHkgaXMgaWdub3JlZC5cbiAqICogKipgey4uLn1gIChhbiBvYmplY3QgaGFzaCk6KiogLSBtYXAgZWxlbWVudHMgb2YgdGhlIGNvbnRlbnQgb250byB0cmFuc2NsdXNpb24gXCJzbG90c1wiIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiAqKk11bHQtc2xvdCB0cmFuc2NsdXNpb24qKiBpcyBkZWNsYXJlZCBieSBwcm92aWRpbmcgYW4gb2JqZWN0IGZvciB0aGUgYHRyYW5zY2x1ZGVgIHByb3BlcnR5LlxuICpcbiAqIFRoaXMgb2JqZWN0IGlzIGEgbWFwIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byBmaWxsIGFuZCB0aGUgdmFsdWUgaXMgYW4gZWxlbWVudCBzZWxlY3RvclxuICogdXNlZCB0byBtYXRjaCB0aGUgSFRNTCB0byB0aGUgc2xvdC4gVGhlIGVsZW1lbnQgc2VsZWN0b3Igc2hvdWxkIGJlIGluIG5vcm1hbGl6ZWQgZm9ybSAoZS5nLiBgbXlFbGVtZW50YClcbiAqIGFuZCB3aWxsIG1hdGNoIHRoZSBzdGFuZGFyZCBlbGVtZW50IHZhcmlhbnRzIChlLmcuIGBteS1lbGVtZW50YCwgYG15OmVsZW1lbnRgLCBgZGF0YS1teS1lbGVtZW50YCwgZXRjKS5cbiAqXG4gKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBjaGVjayBvdXQgdGhlIGd1aWRlIG9uIHtAbGluayBndWlkZS9kaXJlY3RpdmUjbWF0Y2hpbmctZGlyZWN0aXZlcyBNYXRjaGluZyBEaXJlY3RpdmVzfVxuICpcbiAqIElmIHRoZSBlbGVtZW50IHNlbGVjdG9yIGlzIHByZWZpeGVkIHdpdGggYSBgP2AgdGhlbiB0aGF0IHNsb3QgaXMgb3B0aW9uYWwuXG4gKlxuICogRm9yIGV4YW1wbGUsIHRoZSB0cmFuc2NsdWRlIG9iamVjdCBgeyBzbG90QTogJz9teUN1c3RvbUVsZW1lbnQnIH1gIG1hcHMgYDxteS1jdXN0b20tZWxlbWVudD5gIGVsZW1lbnRzIHRvXG4gKiB0aGUgYHNsb3RBYCBzbG90LCB3aGljaCBjYW4gYmUgYWNjZXNzZWQgdmlhIHRoZSBgJHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIG9yIHZpYSB0aGUge0BsaW5rIG5nVHJhbnNjbHVkZX0gZGlyZWN0aXZlLlxuICpcbiAqIFNsb3RzIHRoYXQgYXJlIG5vdCBtYXJrZWQgYXMgb3B0aW9uYWwgKGA/YCkgd2lsbCB0cmlnZ2VyIGEgY29tcGlsZSB0aW1lIGVycm9yIGlmIHRoZXJlIGFyZSBubyBtYXRjaGluZyBlbGVtZW50c1xuICogaW4gdGhlIHRyYW5zY2x1ZGUgY29udGVudC4gSWYgeW91IHdpc2ggdG8ga25vdyBpZiBhbiBvcHRpb25hbCBzbG90IHdhcyBmaWxsZWQgd2l0aCBjb250ZW50LCB0aGVuIHlvdSBjYW4gY2FsbFxuICogYCR0cmFuc2NsdWRlLmlzU2xvdEZpbGxlZChzbG90TmFtZSlgIG9uIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHBhc3NlZCB0byB0aGUgZGlyZWN0aXZlJ3MgbGluayBmdW5jdGlvbiBhbmRcbiAqIGluamVjdGFibGUgaW50byB0aGUgZGlyZWN0aXZlJ3MgY29udHJvbGxlci5cbiAqXG4gKlxuICogIyMjIyBUcmFuc2NsdXNpb24gRnVuY3Rpb25zXG4gKlxuICogV2hlbiBhIGRpcmVjdGl2ZSByZXF1ZXN0cyB0cmFuc2NsdXNpb24sIHRoZSBjb21waWxlciBleHRyYWN0cyBpdHMgY29udGVudHMgYW5kIHByb3ZpZGVzIGEgKip0cmFuc2NsdXNpb25cbiAqIGZ1bmN0aW9uKiogdG8gdGhlIGRpcmVjdGl2ZSdzIGBsaW5rYCBmdW5jdGlvbiBhbmQgYGNvbnRyb2xsZXJgLiBUaGlzIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpcyBhIHNwZWNpYWxcbiAqICoqbGlua2luZyBmdW5jdGlvbioqIHRoYXQgd2lsbCByZXR1cm4gdGhlIGNvbXBpbGVkIGNvbnRlbnRzIGxpbmtlZCB0byBhIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqIElmIHlvdSBhcmUganVzdCB1c2luZyB7QGxpbmsgbmdUcmFuc2NsdWRlfSB0aGVuIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgZnVuY3Rpb24sIHNpbmNlXG4gKiBuZ1RyYW5zY2x1ZGUgd2lsbCBkZWFsIHdpdGggaXQgZm9yIHVzLlxuICogPC9kaXY+XG4gKlxuICogSWYgeW91IHdhbnQgdG8gbWFudWFsbHkgY29udHJvbCB0aGUgaW5zZXJ0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGluIHlvdXIgZGlyZWN0aXZlXG4gKiB0aGVuIHlvdSBtdXN0IHVzZSB0aGlzIHRyYW5zY2x1ZGUgZnVuY3Rpb24uIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBhIGpxTGl0ZS9KUXVlcnlcbiAqIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBjb21waWxlZCBET00sIHdoaWNoIGlzIGxpbmtlZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiB5b3UgY2FuIHBhc3MgaW4gYSAqKmNsb25lIGF0dGFjaCBmdW5jdGlvbioqLiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHNcbiAqIHR3byBwYXJhbWV0ZXJzLCBgZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7IC4uLiB9YCwgd2hlcmUgdGhlIGBjbG9uZWAgaXMgYSBmcmVzaCBjb21waWxlZCBjb3B5IG9mIHlvdXIgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgYW5kIHRoZSBgc2NvcGVgIGlzIHRoZSBuZXdseSBjcmVhdGVkIHRyYW5zY2x1c2lvbiBzY29wZSwgd2hpY2ggdGhlIGNsb25lIHdpbGwgYmUgbGlua2VkIHRvLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2UqKjogQWx3YXlzIHByb3ZpZGUgYSBgY2xvbmVGbmAgKGNsb25lIGF0dGFjaCBmdW5jdGlvbikgd2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb25cbiAqIHNpbmNlIHlvdSB0aGVuIGdldCBhIGZyZXNoIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBET00gYW5kIGFsc28gaGF2ZSBhY2Nlc3MgdG8gdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBub3JtYWwgcHJhY3RpY2UgdG8gYXR0YWNoIHlvdXIgdHJhbnNjbHVkZWQgY29udGVudCAoYGNsb25lYCkgdG8gdGhlIERPTSBpbnNpZGUgeW91ciAqKmNsb25lXG4gKiBhdHRhY2ggZnVuY3Rpb24qKjpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHRyYW5zY2x1ZGVkQ29udGVudCwgdHJhbnNjbHVzaW9uU2NvcGU7XG4gKlxuICogJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7XG4gKiAgIGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAqICAgdHJhbnNjbHVkZWRDb250ZW50ID0gY2xvbmU7XG4gKiAgIHRyYW5zY2x1c2lvblNjb3BlID0gc2NvcGU7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIExhdGVyLCBpZiB5b3Ugd2FudCB0byByZW1vdmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgZnJvbSB5b3VyIERPTSB0aGVuIHlvdSBzaG91bGQgYWxzbyBkZXN0cm95IHRoZVxuICogYXNzb2NpYXRlZCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gKlxuICogYGBganNcbiAqIHRyYW5zY2x1ZGVkQ29udGVudC5yZW1vdmUoKTtcbiAqIHRyYW5zY2x1c2lvblNjb3BlLiRkZXN0cm95KCk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IGlmIHlvdSBpbnRlbmQgdG8gYWRkIGFuZCByZW1vdmUgdHJhbnNjbHVkZWQgY29udGVudCBtYW51YWxseSBpbiB5b3VyIGRpcmVjdGl2ZVxuICogKGJ5IGNhbGxpbmcgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBET00gYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksXG4gKiB0aGVuIHlvdSBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyBgJGRlc3Ryb3lgIG9uIHRoZSB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGUgYnVpbHQtaW4gRE9NIG1hbmlwdWxhdGlvbiBkaXJlY3RpdmVzLCBzdWNoIGFzIHtAbGluayBuZ0lmfSwge0BsaW5rIG5nU3dpdGNofSBhbmQge0BsaW5rIG5nUmVwZWF0fVxuICogYXV0b21hdGljYWxseSBkZXN0cm95IHRoZWlyIHRyYW5zY2x1ZGVkIGNsb25lcyBhcyBuZWNlc3Nhcnkgc28geW91IGRvIG5vdCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgaWZcbiAqIHlvdSBhcmUgc2ltcGx5IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRvIGluamVjdCB0aGUgdHJhbnNjbHVzaW9uIGludG8geW91ciBkaXJlY3RpdmUuXG4gKlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIFNjb3Blc1xuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBET00gZnJhZ21lbnQgdGhhdCBpcyBwcmUtYm91bmQgdG8gYSAqKnRyYW5zY2x1c2lvblxuICogc2NvcGUqKi4gVGhpcyBzY29wZSBpcyBzcGVjaWFsLCBpbiB0aGF0IGl0IGlzIGEgY2hpbGQgb2YgdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIChhbmQgc28gZ2V0cyBkZXN0cm95ZWRcbiAqIHdoZW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIGdldHMgZGVzdHJveWVkKSBidXQgaXQgaW5oZXJpdHMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNjb3BlIGZyb20gd2hpY2ggaXRcbiAqIHdhcyB0YWtlbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSBjb25zaWRlciBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uIGFuZCBpc29sYXRlZCBzY29wZS4gVGhlIERPTSBoaWVyYXJjaHkgbWlnaHQgbG9va1xuICogbGlrZSB0aGlzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctYXBwPlxuICogICA8ZGl2IGlzb2xhdGU+XG4gKiAgICAgPGRpdiB0cmFuc2NsdXNpb24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGUgYCRwYXJlbnRgIHNjb3BlIGhpZXJhcmNoeSB3aWxsIGxvb2sgbGlrZSB0aGlzOlxuICpcbiAgIGBgYFxuICAgLSAkcm9vdFNjb3BlXG4gICAgIC0gaXNvbGF0ZVxuICAgICAgIC0gdHJhbnNjbHVzaW9uXG4gICBgYGBcbiAqXG4gKiBidXQgdGhlIHNjb3BlcyB3aWxsIGluaGVyaXQgcHJvdG90eXBpY2FsbHkgZnJvbSBkaWZmZXJlbnQgc2NvcGVzIHRvIHRoZWlyIGAkcGFyZW50YC5cbiAqXG4gICBgYGBcbiAgIC0gJHJvb3RTY29wZVxuICAgICAtIHRyYW5zY2x1c2lvblxuICAgLSBpc29sYXRlXG4gICBgYGBcbiAqXG4gKlxuICogIyMjIEF0dHJpYnV0ZXNcbiAqXG4gKiBUaGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIEF0dHJpYnV0ZXN9IG9iamVjdCAtIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGVcbiAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLlxuICpcbiAqICogKkFjY2Vzc2luZyBub3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lczoqIERpcmVjdGl2ZXMgbGlrZSAnbmdCaW5kJyBjYW4gYmUgZXhwcmVzc2VkIGluIG1hbnkgd2F5czpcbiAqICAgJ25nOmJpbmQnLCBgZGF0YS1uZy1iaW5kYCwgb3IgJ3gtbmctYmluZCcuIFRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhbGxvd3MgZm9yIG5vcm1hbGl6ZWQgYWNjZXNzXG4gKiAgIHRvIHRoZSBhdHRyaWJ1dGVzLlxuICpcbiAqICogKkRpcmVjdGl2ZSBpbnRlci1jb21tdW5pY2F0aW9uOiogQWxsIGRpcmVjdGl2ZXMgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2Ugb2YgdGhlIGF0dHJpYnV0ZXNcbiAqICAgb2JqZWN0IHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFzIGludGVyIGRpcmVjdGl2ZVxuICogICBjb21tdW5pY2F0aW9uLlxuICpcbiAqICogKlN1cHBvcnRzIGludGVycG9sYXRpb246KiBJbnRlcnBvbGF0aW9uIGF0dHJpYnV0ZXMgYXJlIGFzc2lnbmVkIHRvIHRoZSBhdHRyaWJ1dGUgb2JqZWN0XG4gKiAgIGFsbG93aW5nIG90aGVyIGRpcmVjdGl2ZXMgdG8gcmVhZCB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlLlxuICpcbiAqICogKk9ic2VydmluZyBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlczoqIFVzZSBgJG9ic2VydmVgIHRvIG9ic2VydmUgdGhlIHZhbHVlIGNoYW5nZXMgb2YgYXR0cmlidXRlc1xuICogICB0aGF0IGNvbnRhaW4gaW50ZXJwb2xhdGlvbiAoZS5nLiBgc3JjPVwie3tiYXJ9fVwiYCkuIE5vdCBvbmx5IGlzIHRoaXMgdmVyeSBlZmZpY2llbnQgYnV0IGl0J3MgYWxzb1xuICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uXG4gKiAgIGhhc24ndCBiZWVuIGV2YWx1YXRlZCB5ZXQgYW5kIHNvIHRoZSB2YWx1ZSBpcyBhdCB0aGlzIHRpbWUgc2V0IHRvIGB1bmRlZmluZWRgLlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBsaW5raW5nRm4oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAqICAgLy8gZ2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWVcbiAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7XG4gKlxuICogICAvLyBjaGFuZ2UgdGhlIGF0dHJpYnV0ZVxuICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpO1xuICpcbiAqICAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIGludGVycG9sYXRlZCBhdHRyaWJ1dGVcbiAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIGNvbnNvbGUubG9nKCduZ01vZGVsIGhhcyBjaGFuZ2VkIHZhbHVlIHRvICcgKyB2YWx1ZSk7XG4gKiAgIH0pO1xuICogfVxuICogYGBgXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzXG4gKiB0byBpbGx1c3RyYXRlIGhvdyBgJGNvbXBpbGVgIHdvcmtzLlxuICogPC9kaXY+XG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cImNvbXBpbGVFeGFtcGxlXCIgbmFtZT1cImNvbXBpbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjb21waWxlRXhhbXBsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSBuZXcgJ2NvbXBpbGUnIGRpcmVjdGl2ZSBieSBwYXNzaW5nIGEgZGlyZWN0aXZlXG4gICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZSdcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSBmYWN0b3J5IGNyZWF0ZXMgYSBsaW5rIGZ1bmN0aW9uXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBpdCBpbnRvIHRoZSBjdXJyZW50IERPTVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21waWxlIHRoZSBuZXcgRE9NIGFuZCBsaW5rIGl0IHRvIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBnZXQgaW50byBpbmZpbml0ZSBsb29wIGNvbXBpbGluZyBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nO1xuICAgICAgfV0pO1xuICAgIDwvc2NyaXB0PlxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdyZWV0ZXJDb250cm9sbGVyXCI+XG4gICAgICA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+IDxici8+XG4gICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJodG1sXCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAgICAgIDxkaXYgY29tcGlsZT1cImh0bWxcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpO1xuICAgICAgIHZhciBvdXRwdXQgPSAkKCdkaXZbY29tcGlsZV0nKTtcbiAgICAgICAvLyBUaGUgaW5pdGlhbCBzdGF0ZSByZWFkcyAnSGVsbG8gQW5ndWxhcicuXG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTtcbiAgICAgICB0ZXh0YXJlYS5jbGVhcigpO1xuICAgICAgIHRleHRhcmVhLnNlbmRLZXlzKCd7e25hbWV9fSEnKTtcbiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzIC0gREVQUkVDQVRFRC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiAqKk5vdGU6KiogUGFzc2luZyBhIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0byB0aGUgJGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiB3aWxsIG5vdCB1c2UgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgcGFzcyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBhcyBhXG4gKiAgIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhhbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZVxuICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKVxuICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSwgb3B0aW9ucz0pfSBhIGxpbmsgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBiaW5kIHRlbXBsYXRlXG4gKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZTpcbiAqXG4gKiAgKiBgc2NvcGVgIC0gQSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gdG8gYmluZCB0by5cbiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZVxuICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGVcbiAqICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXNcbiAqICBjYWxsZWQgYXM6IDxici8+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6XG4gKlxuICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuXG4gKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLlxuICpcbiAqICAqIGBvcHRpb25zYCAtIEFuIG9wdGlvbmFsIG9iamVjdCBoYXNoIHdpdGggbGlua2luZyBvcHRpb25zLiBJZiBgb3B0aW9uc2AgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGZvbGxvd2luZ1xuICogIGtleXMgbWF5IGJlIHVzZWQgdG8gY29udHJvbCBsaW5raW5nIGJlaGF2aW9yOlxuICpcbiAqICAgICAgKiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIC0gdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gbWFkZSBhdmFpbGFibGUgdG9cbiAqICAgICAgICBkaXJlY3RpdmVzOyBpZiBnaXZlbiwgaXQgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgbGluayBmdW5jdGlvbnMgb2ZcbiAqICAgICAgICBkaXJlY3RpdmVzIGZvdW5kIGluIGBlbGVtZW50YCBkdXJpbmcgY29tcGlsYXRpb24uXG4gKiAgICAgICogYHRyYW5zY2x1ZGVDb250cm9sbGVyc2AgLSBhbiBvYmplY3QgaGFzaCB3aXRoIGtleXMgdGhhdCBtYXAgY29udHJvbGxlciBuYW1lc1xuICogICAgICAgIHRvIGEgaGFzaCB3aXRoIHRoZSBrZXkgYGluc3RhbmNlYCwgd2hpY2ggbWFwcyB0byB0aGUgY29udHJvbGxlciBpbnN0YW5jZTtcbiAqICAgICAgICBpZiBnaXZlbiwgaXQgd2lsbCBtYWtlIHRoZSBjb250cm9sbGVycyBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyBvbiB0aGUgY29tcGlsZU5vZGU6XG4gKiAgICAgICAgYGBgXG4gKiAgICAgICAge1xuICogICAgICAgICAgcGFyZW50OiB7XG4gKiAgICAgICAgICAgIGluc3RhbmNlOiBwYXJlbnRDb250cm9sbGVySW5zdGFuY2VcbiAqICAgICAgICAgIH1cbiAqICAgICAgICB9XG4gKiAgICAgICAgYGBgXG4gKiAgICAgICogYGZ1dHVyZVBhcmVudEVsZW1lbnRgIC0gZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVBdHRhY2hGbmAgd2lsbCBhZGRcbiAqICAgICAgICB0aGUgY2xvbmVkIGVsZW1lbnRzOyBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sXG4gKiAgICAgICAgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKS4gU2VlIGFsc28gdGhlIGRpcmVjdGl2ZS5jb250cm9sbGVyIHByb3BlcnR5LlxuICpcbiAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWxcbiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC5cbiAqXG4gKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5XG4gKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6XG4gKlxuICogLSBJZiB5b3UgYXJlIG5vdCBhc2tpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdG8gY2xvbmUgdGhlIHRlbXBsYXRlLCBjcmVhdGUgdGhlIERPTSBlbGVtZW50KHMpXG4gKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuXG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIGVsZW1lbnQgPSAkY29tcGlsZSgnPHA+e3t0b3RhbH19PC9wPicpKHNjb3BlKTtcbiAqICAgYGBgXG4gKlxuICogLSBpZiBvbiB0aGUgb3RoZXIgaGFuZCwgeW91IG5lZWQgdGhlIGVsZW1lbnQgdG8gYmUgY2xvbmVkLCB0aGUgdmlldyByZWZlcmVuY2UgZnJvbSB0aGUgb3JpZ2luYWxcbiAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluXG4gKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjpcbiAqICAgYGBganNcbiAqICAgICB2YXIgdGVtcGxhdGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksXG4gKiAgICAgICAgIHNjb3BlID0gLi4uLjtcbiAqXG4gKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkge1xuICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2VcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YFxuICogICBgYGBcbiAqXG4gKlxuICogRm9yIGluZm9ybWF0aW9uIG9uIGhvdyB0aGUgY29tcGlsZXIgd29ya3MsIHNlZSB0aGVcbiAqIHtAbGluayBndWlkZS9jb21waWxlciBBbmd1bGFyIEhUTUwgQ29tcGlsZXJ9IHNlY3Rpb24gb2YgdGhlIERldmVsb3BlciBHdWlkZS5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqICMjIyBEb3VibGUgQ29tcGlsYXRpb25cbiAqXG4gICBEb3VibGUgY29tcGlsYXRpb24gb2NjdXJzIHdoZW4gYW4gYWxyZWFkeSBjb21waWxlZCBwYXJ0IG9mIHRoZSBET00gZ2V0c1xuICAgY29tcGlsZWQgYWdhaW4uIFRoaXMgaXMgYW4gdW5kZXNpcmVkIGVmZmVjdCBhbmQgY2FuIGxlYWQgdG8gbWlzYmVoYXZpbmcgZGlyZWN0aXZlcywgcGVyZm9ybWFuY2UgaXNzdWVzLFxuICAgYW5kIG1lbW9yeSBsZWFrcy4gUmVmZXIgdG8gdGhlIENvbXBpbGVyIEd1aWRlIHtAbGluayBndWlkZS9jb21waWxlciNkb3VibGUtY29tcGlsYXRpb24tYW5kLWhvdy10by1hdm9pZC1pdFxuICAgc2VjdGlvbiBvbiBkb3VibGUgY29tcGlsYXRpb259IGZvciBhbiBpbi1kZXB0aCBleHBsYW5hdGlvbiBhbmQgd2F5cyB0byBhdm9pZCBpdC5cbiAqXG4gKi9cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG5mdW5jdGlvbiBVTklOSVRJQUxJWkVEX1ZBTFVFKCkge31cbnZhciBfVU5JTklUSUFMSVpFRF9WQUxVRSA9IG5ldyBVTklOSVRJQUxJWkVEX1ZBTFVFKCk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbiRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnLCAnJCRzYW5pdGl6ZVVyaVByb3ZpZGVyJ107XG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRDb21waWxlUHJvdmlkZXIoJHByb3ZpZGUsICQkc2FuaXRpemVVcmlQcm92aWRlcikge1xuICB2YXIgaGFzRGlyZWN0aXZlcyA9IHt9LFxuICAgICAgU3VmZml4ID0gJ0RpcmVjdGl2ZScsXG4gICAgICBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAgPSAvXlxccypkaXJlY3RpdmU6XFxzKihbXFx3LV0rKVxccysoLiopJC8sXG4gICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xcdy1dKykoPzo6KFteO10rKSk/Oz8pLyxcbiAgICAgIEFMTF9PUl9OT1RISU5HX0FUVFJTID0gbWFrZU1hcCgnbmdTcmMsbmdTcmNzZXQsc3JjLHNyY3NldCcpLFxuICAgICAgUkVRVUlSRV9QUkVGSVhfUkVHRVhQID0gL14oPzooXFxeXFxePyk/KFxcPyk/KFxcXlxcXj8pPyk/LztcblxuICAvLyBSZWY6IGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWhhbmRsZXItaWRsLWF0dHJpYnV0ZXNcbiAgLy8gVGhlIGFzc3VtcHRpb24gaXMgdGhhdCBmdXR1cmUgRE9NIGV2ZW50IGF0dHJpYnV0ZSBuYW1lcyB3aWxsIGJlZ2luIHdpdGhcbiAgLy8gJ29uJyBhbmQgYmUgY29tcG9zZWQgb2Ygb25seSBFbmdsaXNoIGxldHRlcnMuXG4gIHZhciBFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQID0gL14ob25bYS16XSt8Zm9ybWFjdGlvbikkLztcbiAgdmFyIGJpbmRpbmdDYWNoZSA9IGNyZWF0ZU1hcCgpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlSXNvbGF0ZUJpbmRpbmdzKHNjb3BlLCBkaXJlY3RpdmVOYW1lLCBpc0NvbnRyb2xsZXIpIHtcbiAgICB2YXIgTE9DQUxfUkVHRVhQID0gL15cXHMqKFtAJjxdfD0oXFwqPykpKFxcPz8pXFxzKihbXFx3JF0qKVxccyokLztcblxuICAgIHZhciBiaW5kaW5ncyA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgZm9yRWFjaChzY29wZSwgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XG4gICAgICBpZiAoZGVmaW5pdGlvbiBpbiBiaW5kaW5nQ2FjaGUpIHtcbiAgICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IGJpbmRpbmdDYWNoZVtkZWZpbml0aW9uXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgICdJbnZhbGlkIHszfSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJy4nICtcbiAgICAgICAgICAgICcgRGVmaW5pdGlvbjogey4uLiB7MX06IFxcJ3syfVxcJyAuLi59JyxcbiAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHNjb3BlTmFtZSwgZGVmaW5pdGlvbixcbiAgICAgICAgICAgIChpc0NvbnRyb2xsZXIgPyAnY29udHJvbGxlciBiaW5kaW5ncyBkZWZpbml0aW9uJyA6XG4gICAgICAgICAgICAnaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uJykpO1xuICAgICAgfVxuXG4gICAgICBiaW5kaW5nc1tzY29wZU5hbWVdID0ge1xuICAgICAgICBtb2RlOiBtYXRjaFsxXVswXSxcbiAgICAgICAgY29sbGVjdGlvbjogbWF0Y2hbMl0gPT09ICcqJyxcbiAgICAgICAgb3B0aW9uYWw6IG1hdGNoWzNdID09PSAnPycsXG4gICAgICAgIGF0dHJOYW1lOiBtYXRjaFs0XSB8fCBzY29wZU5hbWVcbiAgICAgIH07XG4gICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgYmluZGluZ0NhY2hlW2RlZmluaXRpb25dID0gYmluZGluZ3Nbc2NvcGVOYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlQmluZGluZ3MoZGlyZWN0aXZlLCBkaXJlY3RpdmVOYW1lKSB7XG4gICAgdmFyIGJpbmRpbmdzID0ge1xuICAgICAgaXNvbGF0ZVNjb3BlOiBudWxsLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogbnVsbFxuICAgIH07XG4gICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgIGlmIChkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciA9PT0gdHJ1ZSkge1xuICAgICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgdHJ1ZSk7XG4gICAgICAgIGJpbmRpbmdzLmlzb2xhdGVTY29wZSA9IHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluZGluZ3MuaXNvbGF0ZVNjb3BlID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlcikpIHtcbiAgICAgIGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgPVxuICAgICAgICAgIHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyLCBkaXJlY3RpdmVOYW1lLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgJiYgIWRpcmVjdGl2ZS5jb250cm9sbGVyKSB7XG4gICAgICAvLyBUaGVyZSBpcyBubyBjb250cm9sbGVyXG4gICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9jdHJsJyxcbiAgICAgICAgICAgICdDYW5ub3QgYmluZCB0byBjb250cm9sbGVyIHdpdGhvdXQgZGlyZWN0aXZlIFxcJ3swfVxcJ3MgY29udHJvbGxlci4nLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgdmFyIGxldHRlciA9IG5hbWUuY2hhckF0KDApO1xuICAgIGlmICghbGV0dGVyIHx8IGxldHRlciAhPT0gbG93ZXJjYXNlKGxldHRlcikpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLCAnRGlyZWN0aXZlL0NvbXBvbmVudCBuYW1lIFxcJ3swfVxcJyBpcyBpbnZhbGlkLiBUaGUgZmlyc3QgY2hhcmFjdGVyIG11c3QgYmUgYSBsb3dlcmNhc2UgbGV0dGVyJywgbmFtZSk7XG4gICAgfVxuICAgIGlmIChuYW1lICE9PSBuYW1lLnRyaW0oKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZGRpcicsXG4gICAgICAgICAgICAnRGlyZWN0aXZlL0NvbXBvbmVudCBuYW1lIFxcJ3swfVxcJyBpcyBpbnZhbGlkLiBUaGUgbmFtZSBzaG91bGQgbm90IGNvbnRhaW4gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlcycsXG4gICAgICAgICAgICBuYW1lKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3RpdmVSZXF1aXJlKGRpcmVjdGl2ZSkge1xuICAgIHZhciByZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmUgfHwgKGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lKTtcblxuICAgIGlmICghaXNBcnJheShyZXF1aXJlKSAmJiBpc09iamVjdChyZXF1aXJlKSkge1xuICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHZhbHVlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgIHZhciBuYW1lID0gdmFsdWUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIGlmICghbmFtZSkgcmVxdWlyZVtrZXldID0gbWF0Y2hbMF0gKyBrZXk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWlyZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERpcmVjdGl2ZVJlc3RyaWN0KHJlc3RyaWN0LCBuYW1lKSB7XG4gICAgaWYgKHJlc3RyaWN0ICYmICEoaXNTdHJpbmcocmVzdHJpY3QpICYmIC9bRUFDTV0vLnRlc3QocmVzdHJpY3QpKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZHJlc3RyaWN0JyxcbiAgICAgICAgICAnUmVzdHJpY3QgcHJvcGVydHkgXFwnezB9XFwnIG9mIGRpcmVjdGl2ZSBcXCd7MX1cXCcgaXMgaW52YWxpZCcsXG4gICAgICAgICAgcmVzdHJpY3QsXG4gICAgICAgICAgbmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3RyaWN0IHx8ICdFQSc7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGluIGNhbWVsLWNhc2UgKGkuZS4gPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaFxuICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGVcbiAgICogICAgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlIHRoZVxuICAgKiAgICB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0gYW5kIHRoZSB7QGxpbmsgJGNvbXBpbGUgY29tcGlsZSBBUEl9IGZvciBtb3JlIGluZm8uXG4gICAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICovXG4gIHRoaXMuZGlyZWN0aXZlID0gZnVuY3Rpb24gcmVnaXN0ZXJEaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlRmFjdG9yeSkge1xuICAgIGFzc2VydEFyZyhuYW1lLCAnbmFtZScpO1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdkaXJlY3RpdmUnKTtcbiAgICBpZiAoaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKTtcbiAgICAgIGFzc2VydEFyZyhkaXJlY3RpdmVGYWN0b3J5LCAnZGlyZWN0aXZlRmFjdG9yeScpO1xuICAgICAgaWYgKCFoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0gPSBbXTtcbiAgICAgICAgJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgU3VmZml4LCBbJyRpbmplY3RvcicsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvckVhY2goaGFzRGlyZWN0aXZlc1tuYW1lXSwgZnVuY3Rpb24oZGlyZWN0aXZlRmFjdG9yeSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gJGluamVjdG9yLmludm9rZShkaXJlY3RpdmVGYWN0b3J5KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSB7IGNvbXBpbGU6IHZhbHVlRm4oZGlyZWN0aXZlKSB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpcmVjdGl2ZS5jb21waWxlICYmIGRpcmVjdGl2ZS5saW5rKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUuY29tcGlsZSA9IHZhbHVlRm4oZGlyZWN0aXZlLmxpbmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHkgfHwgMDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUubmFtZSA9IGRpcmVjdGl2ZS5uYW1lIHx8IG5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlcXVpcmUgPSBnZXREaXJlY3RpdmVSZXF1aXJlKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZ2V0RGlyZWN0aXZlUmVzdHJpY3QoZGlyZWN0aXZlLnJlc3RyaWN0LCBuYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuJCRtb2R1bGVOYW1lID0gZGlyZWN0aXZlRmFjdG9yeS4kJG1vZHVsZU5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICAgICAgICB9XSk7XG4gICAgICB9XG4gICAgICBoYXNEaXJlY3RpdmVzW25hbWVdLnB1c2goZGlyZWN0aXZlRmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhyZWdpc3RlckRpcmVjdGl2ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2NvbXBvbmVudFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBpbiBjYW1lbENhc2UgKGkuZS4gYG15Q29tcGAgd2hpY2ggd2lsbCBtYXRjaCBgPG15LWNvbXA+YClcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29tcG9uZW50IGRlZmluaXRpb24gb2JqZWN0IChhIHNpbXBsaWZpZWRcbiAgICogICAge0BsaW5rIG5nLiRjb21waWxlI2RpcmVjdGl2ZS1kZWZpbml0aW9uLW9iamVjdCBkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3R9KSxcbiAgICogICAgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgKGFsbCBvcHRpb25hbCk6XG4gICAqXG4gICAqICAgIC0gYGNvbnRyb2xsZXJgIOKAkyBgeyhzdHJpbmd8ZnVuY3Rpb24oKT19YCDigJMgY29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZVxuICAgKiAgICAgIGFzc29jaWF0ZWQgd2l0aCBuZXdseSBjcmVhdGVkIHNjb3BlIG9yIHRoZSBuYW1lIG9mIGEge0BsaW5rIG5nLiRjb21waWxlIy1jb250cm9sbGVyLVxuICAgKiAgICAgIHJlZ2lzdGVyZWQgY29udHJvbGxlcn0gaWYgcGFzc2VkIGFzIGEgc3RyaW5nLiBBbiBlbXB0eSBgbm9vcGAgZnVuY3Rpb24gYnkgZGVmYXVsdC5cbiAgICogICAgLSBgY29udHJvbGxlckFzYCDigJMgYHtzdHJpbmc9fWAg4oCTIGlkZW50aWZpZXIgbmFtZSBmb3IgdG8gcmVmZXJlbmNlIHRoZSBjb250cm9sbGVyIGluIHRoZSBjb21wb25lbnQncyBzY29wZS5cbiAgICogICAgICBJZiBwcmVzZW50LCB0aGUgY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCB0byBzY29wZSB1bmRlciB0aGUgYGNvbnRyb2xsZXJBc2AgbmFtZS5cbiAgICogICAgICBJZiBub3QgcHJlc2VudCwgdGhpcyB3aWxsIGRlZmF1bHQgdG8gYmUgYCRjdHJsYC5cbiAgICogICAgLSBgdGVtcGxhdGVgIOKAkyBge3N0cmluZz18ZnVuY3Rpb24oKT19YCDigJMgaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHRoYXRcbiAgICogICAgICByZXR1cm5zIGFuIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgd2hpY2ggc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGNvbnRlbnRzIG9mIHRoaXMgY29tcG9uZW50LlxuICAgKiAgICAgIEVtcHR5IHN0cmluZyBieSBkZWZhdWx0LlxuICAgKlxuICAgKiAgICAgIElmIGB0ZW1wbGF0ZWAgaXMgYSBmdW5jdGlvbiwgdGhlbiBpdCBpcyB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlIGluamVjdGVkfSB3aXRoXG4gICAqICAgICAgdGhlIGZvbGxvd2luZyBsb2NhbHM6XG4gICAqXG4gICAqICAgICAgLSBgJGVsZW1lbnRgIC0gQ3VycmVudCBlbGVtZW50XG4gICAqICAgICAgLSBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gICAqXG4gICAqICAgIC0gYHRlbXBsYXRlVXJsYCDigJMgYHtzdHJpbmc9fGZ1bmN0aW9uKCk9fWAg4oCTIHBhdGggb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcGF0aCB0byBhbiBodG1sXG4gICAqICAgICAgdGVtcGxhdGUgdGhhdCBzaG91bGQgYmUgdXNlZCAgYXMgdGhlIGNvbnRlbnRzIG9mIHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiAgICAgIElmIGB0ZW1wbGF0ZVVybGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBpdCBpcyB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlIGluamVjdGVkfSB3aXRoXG4gICAqICAgICAgdGhlIGZvbGxvd2luZyBsb2NhbHM6XG4gICAqXG4gICAqICAgICAgLSBgJGVsZW1lbnRgIC0gQ3VycmVudCBlbGVtZW50XG4gICAqICAgICAgLSBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gICAqXG4gICAqICAgIC0gYGJpbmRpbmdzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGRlZmluZXMgYmluZGluZ3MgYmV0d2VlbiBET00gYXR0cmlidXRlcyBhbmQgY29tcG9uZW50IHByb3BlcnRpZXMuXG4gICAqICAgICAgQ29tcG9uZW50IHByb3BlcnRpZXMgYXJlIGFsd2F5cyBib3VuZCB0byB0aGUgY29tcG9uZW50IGNvbnRyb2xsZXIgYW5kIG5vdCB0byB0aGUgc2NvcGUuXG4gICAqICAgICAgU2VlIHtAbGluayBuZy4kY29tcGlsZSMtYmluZHRvY29udHJvbGxlci0gYGJpbmRUb0NvbnRyb2xsZXJgfS5cbiAgICogICAgLSBgdHJhbnNjbHVkZWAg4oCTIGB7Ym9vbGVhbj19YCDigJMgd2hldGhlciB7QGxpbmsgJGNvbXBpbGUjdHJhbnNjbHVzaW9uIGNvbnRlbnQgdHJhbnNjbHVzaW9ufSBpcyBlbmFibGVkLlxuICAgKiAgICAgIERpc2FibGVkIGJ5IGRlZmF1bHQuXG4gICAqICAgIC0gYHJlcXVpcmVgIC0gYHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+PX1gIC0gcmVxdWlyZXMgdGhlIGNvbnRyb2xsZXJzIG9mIG90aGVyIGRpcmVjdGl2ZXMgYW5kIGJpbmRzIHRoZW0gdG9cbiAgICogICAgICB0aGlzIGNvbXBvbmVudCdzIGNvbnRyb2xsZXIuIFRoZSBvYmplY3Qga2V5cyBzcGVjaWZ5IHRoZSBwcm9wZXJ0eSBuYW1lcyB1bmRlciB3aGljaCB0aGUgcmVxdWlyZWRcbiAgICogICAgICBjb250cm9sbGVycyAob2JqZWN0IHZhbHVlcykgd2lsbCBiZSBib3VuZC4gU2VlIHtAbGluayBuZy4kY29tcGlsZSMtcmVxdWlyZS0gYHJlcXVpcmVgfS5cbiAgICogICAgLSBgJC4uLmAg4oCTIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBhdHRhY2ggdG8gdGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uIGFuZCB0aGUgY29udHJvbGxlclxuICAgKiAgICAgIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiAoVGhpcyBpcyB1c2VkIGJ5IHRoZSBjb21wb25lbnQgcm91dGVyIHRvIGFubm90YXRlKVxuICAgKlxuICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gdGhlIGNvbXBpbGUgcHJvdmlkZXIgaXRzZWxmLCBmb3IgY2hhaW5pbmcgb2YgZnVuY3Rpb24gY2FsbHMuXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBhICoqY29tcG9uZW50IGRlZmluaXRpb24qKiB3aXRoIHRoZSBjb21waWxlci4gVGhpcyBpcyBhIHNob3J0aGFuZCBmb3IgcmVnaXN0ZXJpbmcgYSBzcGVjaWFsXG4gICAqIHR5cGUgb2YgZGlyZWN0aXZlLCB3aGljaCByZXByZXNlbnRzIGEgc2VsZi1jb250YWluZWQgVUkgY29tcG9uZW50IGluIHlvdXIgYXBwbGljYXRpb24uIFN1Y2ggY29tcG9uZW50c1xuICAgKiBhcmUgYWx3YXlzIGlzb2xhdGVkIChpLmUuIGBzY29wZToge31gKSBhbmQgYXJlIGFsd2F5cyByZXN0cmljdGVkIHRvIGVsZW1lbnRzIChpLmUuIGByZXN0cmljdDogJ0UnYCkuXG4gICAqXG4gICAqIENvbXBvbmVudCBkZWZpbml0aW9ucyBhcmUgdmVyeSBzaW1wbGUgYW5kIGRvIG5vdCByZXF1aXJlIGFzIG11Y2ggY29uZmlndXJhdGlvbiBhcyBkZWZpbmluZyBnZW5lcmFsXG4gICAqIGRpcmVjdGl2ZXMuIENvbXBvbmVudCBkZWZpbml0aW9ucyB1c3VhbGx5IGNvbnNpc3Qgb25seSBvZiBhIHRlbXBsYXRlIGFuZCBhIGNvbnRyb2xsZXIgYmFja2luZyBpdC5cbiAgICpcbiAgICogSW4gb3JkZXIgdG8gbWFrZSB0aGUgZGVmaW5pdGlvbiBlYXNpZXIsIGNvbXBvbmVudHMgZW5mb3JjZSBiZXN0IHByYWN0aWNlcyBsaWtlIHVzZSBvZiBgY29udHJvbGxlckFzYCxcbiAgICogYGJpbmRUb0NvbnRyb2xsZXJgLiBUaGV5IGFsd2F5cyBoYXZlICoqaXNvbGF0ZSBzY29wZSoqIGFuZCBhcmUgcmVzdHJpY3RlZCB0byBlbGVtZW50cy5cbiAgICpcbiAgICogSGVyZSBhcmUgYSBmZXcgZXhhbXBsZXMgb2YgaG93IHlvdSB3b3VsZCB1c3VhbGx5IGRlZmluZSBjb21wb25lbnRzOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHZhciBteU1vZCA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gICAqICAgbXlNb2QuY29tcG9uZW50KCdteUNvbXAnLCB7XG4gICAqICAgICB0ZW1wbGF0ZTogJzxkaXY+TXkgbmFtZSBpcyB7eyRjdHJsLm5hbWV9fTwvZGl2PicsXG4gICAqICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgICAgdGhpcy5uYW1lID0gJ3NoYWhhcic7XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqXG4gICAqICAgbXlNb2QuY29tcG9uZW50KCdteUNvbXAnLCB7XG4gICAqICAgICB0ZW1wbGF0ZTogJzxkaXY+TXkgbmFtZSBpcyB7eyRjdHJsLm5hbWV9fTwvZGl2PicsXG4gICAqICAgICBiaW5kaW5nczoge25hbWU6ICdAJ31cbiAgICogICB9KTtcbiAgICpcbiAgICogICBteU1vZC5jb21wb25lbnQoJ215Q29tcCcsIHtcbiAgICogICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbXktY29tcC5odG1sJyxcbiAgICogICAgIGNvbnRyb2xsZXI6ICdNeUN0cmwnLFxuICAgKiAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAqICAgICBiaW5kaW5nczoge25hbWU6ICdAJ31cbiAgICogICB9KTtcbiAgICpcbiAgICogYGBgXG4gICAqIEZvciBtb3JlIGV4YW1wbGVzLCBhbmQgYW4gaW4tZGVwdGggZ3VpZGUsIHNlZSB0aGUge0BsaW5rIGd1aWRlL2NvbXBvbmVudCBjb21wb25lbnQgZ3VpZGV9LlxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogU2VlIGFsc28ge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCl9LlxuICAgKi9cbiAgdGhpcy5jb21wb25lbnQgPSBmdW5jdGlvbiByZWdpc3RlckNvbXBvbmVudChuYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRyb2xsZXIgPSBvcHRpb25zLmNvbnRyb2xsZXIgfHwgZnVuY3Rpb24oKSB7fTtcblxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoJGluamVjdG9yKSB7XG4gICAgICBmdW5jdGlvbiBtYWtlSW5qZWN0YWJsZShmbikge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikgfHwgaXNBcnJheShmbikpIHtcbiAgICAgICAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgICAgIHJldHVybiAkaW5qZWN0b3IuaW52b2tlKGZuLCB0aGlzLCB7JGVsZW1lbnQ6IHRFbGVtZW50LCAkYXR0cnM6IHRBdHRyc30pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZW1wbGF0ZSA9ICghb3B0aW9ucy50ZW1wbGF0ZSAmJiAhb3B0aW9ucy50ZW1wbGF0ZVVybCA/ICcnIDogb3B0aW9ucy50ZW1wbGF0ZSk7XG4gICAgICB2YXIgZGRvID0ge1xuICAgICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6IGlkZW50aWZpZXJGb3JDb250cm9sbGVyKG9wdGlvbnMuY29udHJvbGxlcikgfHwgb3B0aW9ucy5jb250cm9sbGVyQXMgfHwgJyRjdHJsJyxcbiAgICAgICAgdGVtcGxhdGU6IG1ha2VJbmplY3RhYmxlKHRlbXBsYXRlKSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IG1ha2VJbmplY3RhYmxlKG9wdGlvbnMudGVtcGxhdGVVcmwpLFxuICAgICAgICB0cmFuc2NsdWRlOiBvcHRpb25zLnRyYW5zY2x1ZGUsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjogb3B0aW9ucy5iaW5kaW5ncyB8fCB7fSxcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgcmVxdWlyZTogb3B0aW9ucy5yZXF1aXJlXG4gICAgICB9O1xuXG4gICAgICAvLyBDb3B5IGFubm90YXRpb25zIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIERET1xuICAgICAgZm9yRWFjaChvcHRpb25zLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnKSBkZG9ba2V5XSA9IHZhbDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGRvO1xuICAgIH1cblxuICAgIC8vIFRPRE8ocGV0ZSkgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgYGZvckVhY2hgIGJlZm9yZSB3ZSByZWxlYXNlIDEuNi4wXG4gICAgLy8gVGhlIGNvbXBvbmVudC1yb3V0ZXJAMC4yLjAgbG9va3MgZm9yIHRoZSBhbm5vdGF0aW9ucyBvbiB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvclxuICAgIC8vIE5vdGhpbmcgaW4gQW5ndWxhciBsb29rcyBmb3IgYW5ub3RhdGlvbnMgb24gdGhlIGZhY3RvcnkgZnVuY3Rpb24gYnV0IHdlIGNhbid0IHJlbW92ZVxuICAgIC8vIGl0IGZyb20gMS41LnggeWV0LlxuXG4gICAgLy8gQ29weSBhbnkgYW5ub3RhdGlvbiBwcm9wZXJ0aWVzIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIGZhY3RvcnkgYW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb25zXG4gICAgLy8gVGhlc2UgY291bGQgYmUgdXNlZCBieSBsaWJyYXJpZXMgc3VjaCBhcyB0aGUgbmV3IGNvbXBvbmVudCByb3V0ZXJcbiAgICBmb3JFYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgIGZhY3Rvcnlba2V5XSA9IHZhbDtcbiAgICAgICAgLy8gRG9uJ3QgdHJ5IHRvIGNvcHkgb3ZlciBhbm5vdGF0aW9ucyB0byBuYW1lZCBjb250cm9sbGVyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXIpKSBjb250cm9sbGVyW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmYWN0b3J5LiRpbmplY3QgPSBbJyRpbmplY3RvciddO1xuXG4gICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlKG5hbWUsIGZhY3RvcnkpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudGluZyBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGVcbiAgICogY3VycmVudCBkZWJ1Z0luZm9FbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHZhcmlvdXMgZGVidWcgcnVudGltZSBpbmZvcm1hdGlvbiBpbiB0aGUgY29tcGlsZXIgc3VjaCBhcyBhZGRpbmdcbiAgICogYmluZGluZyBpbmZvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2NvcGUgb24gdG8gRE9NIGVsZW1lbnRzLlxuICAgKiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBhZGQgdGhlIGZvbGxvd2luZyB0byBET00gZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gYm91bmQgdG8gdGhlIHNjb3BlXG4gICAqICogYG5nLWJpbmRpbmdgIENTUyBjbGFzc1xuICAgKiAqIGAkYmluZGluZ2AgZGF0YSBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIHRoZSBiaW5kaW5nIGV4cHJlc3Npb25zXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoaXMgaW4gcHJvZHVjdGlvbiBmb3IgYSBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBib29zdC4gU2VlXG4gICAqIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERpc2FibGluZyBEZWJ1ZyBEYXRhfSBmb3IgbW9yZS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHZhciBkZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5kZWJ1Z0luZm9FbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChpc0RlZmluZWQoZW5hYmxlZCkpIHtcbiAgICAgIGRlYnVnSW5mb0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBkZWJ1Z0luZm9FbmFibGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI3ByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkIHN0YXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlXG4gICAqIGN1cnJlbnQgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHdoZXRoZXIgZGlyZWN0aXZlIGNvbnRyb2xsZXJzIGFyZSBhc3NpZ25lZCBiaW5kaW5ncyBiZWZvcmVcbiAgICogY2FsbGluZyB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yLlxuICAgKiBJZiBlbmFibGVkICh0cnVlKSwgdGhlIGNvbXBpbGVyIGFzc2lnbnMgdGhlIHZhbHVlIG9mIGVhY2ggb2YgdGhlIGJpbmRpbmdzIHRvIHRoZVxuICAgKiBwcm9wZXJ0aWVzIG9mIHRoZSBjb250cm9sbGVyIG9iamVjdCBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIG9mIHRoaXMgb2JqZWN0IGlzIGNhbGxlZC5cbiAgICpcbiAgICogSWYgZGlzYWJsZWQgKGZhbHNlKSwgdGhlIGNvbXBpbGVyIGNhbGxzIHRoZSBjb25zdHJ1Y3RvciBmaXJzdCBiZWZvcmUgYXNzaWduaW5nIGJpbmRpbmdzLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogc2luY2VWZXJzaW9uPVwiMS42LjBcIlxuICAgKiByZW1vdmVWZXJzaW9uPVwiMS43LjBcIlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBhbmQgdGhlIG9wdGlvbiB0byBhc3NpZ24gdGhlIGJpbmRpbmdzIGJlZm9yZSBjYWxsaW5nIHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3JcbiAgICogd2lsbCBiZSByZW1vdmVkIGluIHYxLjcuMC5cbiAgICovXG4gIHZhciBwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBmYWxzZTtcbiAgdGhpcy5wcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkID0gZW5hYmxlZDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gcHJlQXNzaWduQmluZGluZ3NFbmFibGVkO1xuICB9O1xuXG5cbiAgdmFyIFRUTCA9IDEwO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI29uQ2hhbmdlc1R0bFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGAkb25DaGFuZ2VzYCBob29rcyBjYW4gdHJpZ2dlciBuZXcgY2hhbmdlcyBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICAgKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAgICpcbiAgICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLlxuICAgKlxuICAgKiBJbiBjb21wbGV4IGFwcGxpY2F0aW9ucyBpdCdzIHBvc3NpYmxlIHRoYXQgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCRvbkNoYW5nZXNgIGhvb2tzIGFuZCBiaW5kaW5ncyB3aWxsIHJlc3VsdFxuICAgKiBpbiBzZXZlcmFsIGl0ZXJhdGlvbnMgb2YgY2FsbHMgdG8gdGhlc2UgaG9va3MuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwXG4gICAqIGl0ZXJhdGlvbnMgdG8gc3RhYmlsaXplIHRoZW4geW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB3aGF0IGlzIGNhdXNpbmcgdGhlIG1vZGVsIHRvIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nXG4gICAqIHRoZSBgJG9uQ2hhbmdlc2AgaG9vayBleGVjdXRpb24uXG4gICAqXG4gICAqIEluY3JlYXNpbmcgdGhlIFRUTCBjb3VsZCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucywgc28geW91IHNob3VsZCBub3QgY2hhbmdlIGl0IHdpdGhvdXQgcHJvcGVyIGp1c3RpZmljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGAkb25DaGFuZ2VzYCBob29rIGl0ZXJhdGlvbnMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8b2JqZWN0fSB0aGUgY3VycmVudCBsaW1pdCAob3IgYHRoaXNgIGlmIGNhbGxlZCBhcyBhIHNldHRlciBmb3IgY2hhaW5pbmcpXG4gICAqL1xuICB0aGlzLm9uQ2hhbmdlc1R0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFRUTCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBUVEw7XG4gIH07XG5cbiAgdmFyIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHRydWU7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjY29tbWVudERpcmVjdGl2ZXNFbmFibGVkXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJdCBpbmRpY2F0ZXMgdG8gdGhlIGNvbXBpbGVyXG4gICAqIHdoZXRoZXIgb3Igbm90IGRpcmVjdGl2ZXMgb24gY29tbWVudHMgc2hvdWxkIGJlIGNvbXBpbGVkLlxuICAgKiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAqXG4gICAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiB3aXRoIGZhbHNlIGRpc2FibGVzIHRoZSBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzXG4gICAqIG9uIGNvbW1lbnRzIGZvciB0aGUgd2hvbGUgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgcmVzdWx0cyBpbiBhIGNvbXBpbGF0aW9uIHBlcmZvcm1hbmNlIGdhaW4sXG4gICAqIGFzIHRoZSBjb21waWxlciBkb2Vzbid0IGhhdmUgdG8gY2hlY2sgY29tbWVudHMgd2hlbiBsb29raW5nIGZvciBkaXJlY3RpdmVzLlxuICAgKiBUaGlzIHNob3VsZCBob3dldmVyIG9ubHkgYmUgdXNlZCBpZiB5b3UgYXJlIHN1cmUgdGhhdCBubyBjb21tZW50IGRpcmVjdGl2ZXMgYXJlIHVzZWQgaW5cbiAgICogdGhlIGFwcGxpY2F0aW9uIChpbmNsdWRpbmcgYW55IDNyZCBwYXJ0eSBkaXJlY3RpdmVzKS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkIGBmYWxzZWAgaWYgdGhlIGNvbXBpbGVyIG1heSBpZ25vcmUgZGlyZWN0aXZlcyBvbiBjb21tZW50c1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxvYmplY3R9IHRoZSBjdXJyZW50IHZhbHVlIChvciBgdGhpc2AgaWYgY2FsbGVkIGFzIGEgc2V0dGVyIGZvciBjaGFpbmluZylcbiAgICovXG4gIHRoaXMuY29tbWVudERpcmVjdGl2ZXNFbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcbiAgfTtcblxuXG4gIHZhciBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdHJ1ZTtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJdCBpbmRpY2F0ZXMgdG8gdGhlIGNvbXBpbGVyXG4gICAqIHdoZXRoZXIgb3Igbm90IGRpcmVjdGl2ZXMgb24gZWxlbWVudCBjbGFzc2VzIHNob3VsZCBiZSBjb21waWxlZC5cbiAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgKlxuICAgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gd2l0aCBmYWxzZSBkaXNhYmxlcyB0aGUgY29tcGlsYXRpb24gb2YgZGlyZWN0aXZlc1xuICAgKiBvbiBlbGVtZW50IGNsYXNzZXMgZm9yIHRoZSB3aG9sZSBhcHBsaWNhdGlvbi5cbiAgICogVGhpcyByZXN1bHRzIGluIGEgY29tcGlsYXRpb24gcGVyZm9ybWFuY2UgZ2FpbixcbiAgICogYXMgdGhlIGNvbXBpbGVyIGRvZXNuJ3QgaGF2ZSB0byBjaGVjayBlbGVtZW50IGNsYXNzZXMgd2hlbiBsb29raW5nIGZvciBkaXJlY3RpdmVzLlxuICAgKiBUaGlzIHNob3VsZCBob3dldmVyIG9ubHkgYmUgdXNlZCBpZiB5b3UgYXJlIHN1cmUgdGhhdCBubyBjbGFzcyBkaXJlY3RpdmVzIGFyZSB1c2VkIGluXG4gICAqIHRoZSBhcHBsaWNhdGlvbiAoaW5jbHVkaW5nIGFueSAzcmQgcGFydHkgZGlyZWN0aXZlcykuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBgZmFsc2VgIGlmIHRoZSBjb21waWxlciBtYXkgaWdub3JlIGRpcmVjdGl2ZXMgb24gZWxlbWVudCBjbGFzc2VzXG4gICAqIEByZXR1cm5zIHtib29sZWFufG9iamVjdH0gdGhlIGN1cnJlbnQgdmFsdWUgKG9yIGB0aGlzYCBpZiBjYWxsZWQgYXMgYSBzZXR0ZXIgZm9yIGNoYWluaW5nKVxuICAgKi9cbiAgdGhpcy5jc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICckaW5qZWN0b3InLCAnJGludGVycG9sYXRlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJHBhcnNlJyxcbiAgICAgICAgICAgICckY29udHJvbGxlcicsICckcm9vdFNjb3BlJywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsXG4gICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICRpbnRlcnBvbGF0ZSwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICRwYXJzZSxcbiAgICAgICAgICAgICAkY29udHJvbGxlciwgICAkcm9vdFNjb3BlLCAgICRzY2UsICAgJGFuaW1hdGUsICAgJCRzYW5pdGl6ZVVyaSkge1xuXG4gICAgdmFyIFNJTVBMRV9BVFRSX05BTUUgPSAvXlxcdy87XG4gICAgdmFyIHNwZWNpYWxBdHRySG9sZGVyID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG5cbiAgICB2YXIgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkID0gY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuICAgIHZhciBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkID0gY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcblxuXG4gICAgdmFyIG9uQ2hhbmdlc1R0bCA9IFRUTDtcbiAgICAvLyBUaGUgb25DaGFuZ2VzIGhvb2tzIHNob3VsZCBhbGwgYmUgcnVuIHRvZ2V0aGVyIGluIGEgc2luZ2xlIGRpZ2VzdFxuICAgIC8vIFdoZW4gY2hhbmdlcyBvY2N1ciwgdGhlIGNhbGwgdG8gdHJpZ2dlciB0aGVpciBob29rcyB3aWxsIGJlIGFkZGVkIHRvIHRoaXMgcXVldWVcbiAgICB2YXIgb25DaGFuZ2VzUXVldWU7XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbiBhICQkcG9zdERpZ2VzdCB0byB0cmlnZ2VyIGFsbCB0aGUgb25DaGFuZ2VzIGhvb2tzIGluIGEgc2luZ2xlIGRpZ2VzdFxuICAgIGZ1bmN0aW9uIGZsdXNoT25DaGFuZ2VzUXVldWUoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoISgtLW9uQ2hhbmdlc1R0bCkpIHtcbiAgICAgICAgICAvLyBXZSBoYXZlIGhpdCB0aGUgVFRMIGxpbWl0IHNvIHJlc2V0IGV2ZXJ5dGhpbmdcbiAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaW5mY2huZycsICd7MH0gJG9uQ2hhbmdlcygpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXFxuJywgVFRMKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBtdXN0IHJ1biB0aGlzIGhvb2sgaW4gYW4gYXBwbHkgc2luY2UgdGhlICQkcG9zdERpZ2VzdCBydW5zIG91dHNpZGUgYXBwbHlcbiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG9uQ2hhbmdlc1F1ZXVlLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlW2ldKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXNldCB0aGUgcXVldWUgdG8gdHJpZ2dlciBhIG5ldyBzY2hlZHVsZSBuZXh0IHRpbWUgdGhlcmUgaXMgYSBjaGFuZ2VcbiAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBvbkNoYW5nZXNUdGwrKztcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlc1RvQ29weSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTtcbiAgICAgICAgdmFyIGksIGwsIGtleTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIHRoaXNba2V5XSA9IGF0dHJpYnV0ZXNUb0NvcHlba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kYXR0ciA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgQXR0cmlidXRlcy5wcm90b3R5cGUgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRub3JtYWxpemVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBDb252ZXJ0cyBhbiBhdHRyaWJ1dGUgbmFtZSAoZS5nLiBkYXNoL2NvbG9uL3VuZGVyc2NvcmUtZGVsaW1pdGVkIHN0cmluZywgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGB4LWAgb3JcbiAgICAgICAqIGBkYXRhLWApIHRvIGl0cyBub3JtYWxpemVkLCBjYW1lbENhc2UgZm9ybS5cbiAgICAgICAqXG4gICAgICAgKiBBbHNvIHRoZXJlIGlzIHNwZWNpYWwgY2FzZSBmb3IgTW96IHByZWZpeCBzdGFydGluZyB3aXRoIHVwcGVyIGNhc2UgbGV0dGVyLlxuICAgICAgICpcbiAgICAgICAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uIGNoZWNrIG91dCB0aGUgZ3VpZGUgb24ge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNtYXRjaGluZy1kaXJlY3RpdmVzIE1hdGNoaW5nIERpcmVjdGl2ZXN9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAgICAgICAqL1xuICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGFkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIHRvIHRoZSBlbGVtZW50LiBJZiBhbmltYXRpb25zXG4gICAgICAgKiBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIGFkZGl0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICAkYWRkQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XG4gICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZW1vdmVzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgZnJvbSB0aGUgZWxlbWVudC4gSWZcbiAgICAgICAqIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyByZW1vdmFsLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgJHJlbW92ZUNsYXNzOiBmdW5jdGlvbihjbGFzc1ZhbCkge1xuICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHVwZGF0ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyBhbmQgcmVtb3ZlcyB0aGUgYXBwcm9wcmlhdGUgQ1NTIGNsYXNzIHZhbHVlcyB0byB0aGUgZWxlbWVudCBiYXNlZCBvbiB0aGUgZGlmZmVyZW5jZVxuICAgICAgICogYmV0d2VlbiB0aGUgbmV3IGFuZCBvbGQgQ1NTIGNsYXNzIHZhbHVlcyAoc3BlY2lmaWVkIGFzIG5ld0NsYXNzZXMgYW5kIG9sZENsYXNzZXMpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdDbGFzc2VzIFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRDbGFzc2VzIFRoZSBmb3JtZXIgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICovXG4gICAgICAkdXBkYXRlQ2xhc3M6IGZ1bmN0aW9uKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHtcbiAgICAgICAgdmFyIHRvQWRkID0gdG9rZW5EaWZmZXJlbmNlKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpO1xuICAgICAgICBpZiAodG9BZGQgJiYgdG9BZGQubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b1JlbW92ZSA9IHRva2VuRGlmZmVyZW5jZShvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKTtcbiAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCB0b1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IGEgbm9ybWFsaXplZCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaW4gYSB3YXkgc3VjaCB0aGF0IGFsbCBkaXJlY3RpdmVzXG4gICAgICAgKiBjYW4gc2hhcmUgdGhlIGF0dHJpYnV0ZS4gVGhpcyBmdW5jdGlvbiBwcm9wZXJseSBoYW5kbGVzIGJvb2xlYW4gYXR0cmlidXRlcy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuIElmIGBudWxsYCBhdHRyaWJ1dGUgd2lsbCBiZSBkZWxldGVkLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gd3JpdGVBdHRyIElmIGZhbHNlLCBkb2VzIG5vdCB3cml0ZSB0aGUgdmFsdWUgdG8gRE9NIGVsZW1lbnQgYXR0cmlidXRlLlxuICAgICAgICogICAgIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJOYW1lIE9wdGlvbmFsIG5vbmUgbm9ybWFsaXplZCBuYW1lLiBEZWZhdWx0cyB0byBrZXkuXG4gICAgICAgKi9cbiAgICAgICRzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHdyaXRlQXR0ciwgYXR0ck5hbWUpIHtcbiAgICAgICAgLy8gVE9ETzogZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIHRocm93IGFuIGVycm9yIGlmIFwiY2xhc3NcIlxuICAgICAgICAvL2lzIHNldCB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc2luY2UgaXQgbWF5IGNhdXNlICR1cGRhdGVDbGFzcyB0b1xuICAgICAgICAvL2JlY29tZSB1bnN0YWJsZS5cblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuJCRlbGVtZW50WzBdLFxuICAgICAgICAgICAgYm9vbGVhbktleSA9IGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBrZXkpLFxuICAgICAgICAgICAgYWxpYXNlZEtleSA9IGdldEFsaWFzZWRBdHRyTmFtZShrZXkpLFxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBrZXksXG4gICAgICAgICAgICBub2RlTmFtZTtcblxuICAgICAgICBpZiAoYm9vbGVhbktleSkge1xuICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgYXR0ck5hbWUgPSBib29sZWFuS2V5O1xuICAgICAgICB9IGVsc2UgaWYgKGFsaWFzZWRLZXkpIHtcbiAgICAgICAgICB0aGlzW2FsaWFzZWRLZXldID0gdmFsdWU7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSBhbGlhc2VkS2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgLy8gdHJhbnNsYXRlIG5vcm1hbGl6ZWQga2V5IHRvIGFjdHVhbCBrZXlcbiAgICAgICAgaWYgKGF0dHJOYW1lKSB7XG4gICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXR0ck5hbWUgPSB0aGlzLiRhdHRyW2tleV07XG4gICAgICAgICAgaWYgKCFhdHRyTmFtZSkge1xuICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWUgPSBzbmFrZV9jYXNlKGtleSwgJy0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBub2RlTmFtZSA9IG5vZGVOYW1lXyh0aGlzLiQkZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKChub2RlTmFtZSA9PT0gJ2EnICYmIChrZXkgPT09ICdocmVmJyB8fCBrZXkgPT09ICd4bGlua0hyZWYnKSkgfHxcbiAgICAgICAgICAgIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3JjJykpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXNcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9ICQkc2FuaXRpemVVcmkodmFsdWUsIGtleSA9PT0gJ3NyYycpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVOYW1lID09PSAnaW1nJyAmJiBrZXkgPT09ICdzcmNzZXQnICYmIGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBpbWdbc3Jjc2V0XSB2YWx1ZXNcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgICAvLyBmaXJzdCBjaGVjayBpZiB0aGVyZSBhcmUgc3BhY2VzIGJlY2F1c2UgaXQncyBub3QgdGhlIHNhbWUgcGF0dGVyblxuICAgICAgICAgIHZhciB0cmltbWVkU3Jjc2V0ID0gdHJpbSh2YWx1ZSk7XG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgKCAgIDk5OXggICAsfCAgIDk5OXcgICAsfCAgICx8LCAgIClcbiAgICAgICAgICB2YXIgc3JjUGF0dGVybiA9IC8oXFxzK1xcZCt4XFxzKix8XFxzK1xcZCt3XFxzKix8XFxzKyx8LFxccyspLztcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IC9cXHMvLnRlc3QodHJpbW1lZFNyY3NldCkgPyBzcmNQYXR0ZXJuIDogLygsKS87XG5cbiAgICAgICAgICAvLyBzcGxpdCBzcmNzZXQgaW50byB0dXBsZSBvZiB1cmkgYW5kIGRlc2NyaXB0b3IgZXhjZXB0IGZvciB0aGUgbGFzdCBpdGVtXG4gICAgICAgICAgdmFyIHJhd1VyaXMgPSB0cmltbWVkU3Jjc2V0LnNwbGl0KHBhdHRlcm4pO1xuXG4gICAgICAgICAgLy8gZm9yIGVhY2ggdHVwbGVzXG4gICAgICAgICAgdmFyIG5iclVyaXNXaXRoMnBhcnRzID0gTWF0aC5mbG9vcihyYXdVcmlzLmxlbmd0aCAvIDIpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmJyVXJpc1dpdGgycGFydHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlubmVySWR4ID0gaSAqIDI7XG4gICAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgdXJpXG4gICAgICAgICAgICByZXN1bHQgKz0gJCRzYW5pdGl6ZVVyaSh0cmltKHJhd1VyaXNbaW5uZXJJZHhdKSwgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBhZGQgdGhlIGRlc2NyaXB0b3JcbiAgICAgICAgICAgIHJlc3VsdCArPSAoJyAnICsgdHJpbShyYXdVcmlzW2lubmVySWR4ICsgMV0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzcGxpdCB0aGUgbGFzdCBpdGVtIGludG8gdXJpIGFuZCBkZXNjcmlwdG9yXG4gICAgICAgICAgdmFyIGxhc3RUdXBsZSA9IHRyaW0ocmF3VXJpc1tpICogMl0pLnNwbGl0KC9cXHMvKTtcblxuICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0obGFzdFR1cGxlWzBdKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55XG4gICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAoJyAnICsgdHJpbShsYXN0VHVwbGVbMV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod3JpdGVBdHRyICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoYXR0ck5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoU0lNUExFX0FUVFJfTkFNRS50ZXN0KGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXRTcGVjaWFsQXR0cih0aGlzLiQkZWxlbWVudFswXSwgYXR0ck5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJlIG9ic2VydmVyc1xuICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSB0aGlzLiQkb2JzZXJ2ZXJzO1xuICAgICAgICBpZiAoJCRvYnNlcnZlcnMpIHtcbiAgICAgICAgICBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZuKHZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkb2JzZXJ2ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIE9ic2VydmVzIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUuXG4gICAgICAgKlxuICAgICAgICogVGhlIG9ic2VydmVyIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGR1cmluZyB0aGUgbmV4dCBgJGRpZ2VzdGAgZm9sbG93aW5nXG4gICAgICAgKiBjb21waWxhdGlvbi4gVGhlIG9ic2VydmVyIGlzIHRoZW4gaW52b2tlZCB3aGVuZXZlciB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlXG4gICAgICAgKiBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSkgLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihpbnRlcnBvbGF0ZWRWYWx1ZSl9IGZuIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXJcbiAgICAgICAgICAgICAgICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAqICAgICAgICBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uI2hvdy10ZXh0LWFuZC1hdHRyaWJ1dGUtYmluZGluZ3Mtd29yayBJbnRlcnBvbGF0aW9uXG4gICAgICAgKiAgICAgICAgZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIG9ic2VydmVyLlxuICAgICAgICovXG4gICAgICAkb2JzZXJ2ZTogZnVuY3Rpb24oa2V5LCBmbikge1xuICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLFxuICAgICAgICAgICAgJCRvYnNlcnZlcnMgPSAoYXR0cnMuJCRvYnNlcnZlcnMgfHwgKGF0dHJzLiQkb2JzZXJ2ZXJzID0gY3JlYXRlTWFwKCkpKSxcbiAgICAgICAgICAgIGxpc3RlbmVycyA9ICgkJG9ic2VydmVyc1trZXldIHx8ICgkJG9ic2VydmVyc1trZXldID0gW10pKTtcblxuICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7XG4gICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIWxpc3RlbmVycy4kJGludGVyICYmIGF0dHJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIWlzVW5kZWZpbmVkKGF0dHJzW2tleV0pKSB7XG4gICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5XG4gICAgICAgICAgICBmbihhdHRyc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhcnJheVJlbW92ZShsaXN0ZW5lcnMsIGZuKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2V0U3BlY2lhbEF0dHIoZWxlbWVudCwgYXR0ck5hbWUsIHZhbHVlKSB7XG4gICAgICAvLyBBdHRyaWJ1dGVzIG5hbWVzIHRoYXQgZG8gbm90IHN0YXJ0IHdpdGggbGV0dGVycyAoc3VjaCBhcyBgKGNsaWNrKWApIGNhbm5vdCBiZSBzZXQgdXNpbmcgYHNldEF0dHJpYnV0ZWBcbiAgICAgIC8vIHNvIHdlIGhhdmUgdG8ganVtcCB0aHJvdWdoIHNvbWUgaG9vcHMgdG8gZ2V0IHN1Y2ggYW4gYXR0cmlidXRlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTMzMThcbiAgICAgIHNwZWNpYWxBdHRySG9sZGVyLmlubmVySFRNTCA9ICc8c3BhbiAnICsgYXR0ck5hbWUgKyAnPic7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHNwZWNpYWxBdHRySG9sZGVyLmZpcnN0Q2hpbGQuYXR0cmlidXRlcztcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWzBdO1xuICAgICAgLy8gV2UgaGF2ZSB0byByZW1vdmUgdGhlIGF0dHJpYnV0ZSBmcm9tIGl0cyBjb250YWluZXIgZWxlbWVudCBiZWZvcmUgd2UgY2FuIGFkZCBpdCB0byB0aGUgZGVzdGluYXRpb24gZWxlbWVudFxuICAgICAgYXR0cmlidXRlcy5yZW1vdmVOYW1lZEl0ZW0oYXR0cmlidXRlLm5hbWUpO1xuICAgICAgYXR0cmlidXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBlbGVtZW50LmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtKGF0dHJpYnV0ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09PSAne3snICYmIGVuZFN5bWJvbCAgPT09ICd9fScpXG4gICAgICAgICAgICA/IGlkZW50aXR5XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIGRlbm9ybWFsaXplVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcey9nLCBzdGFydFN5bWJvbCkucmVwbGFjZSgvfX0vZywgZW5kU3ltYm9sKTtcbiAgICAgICAgfSxcbiAgICAgICAgTkdfQVRUUl9CSU5ESU5HID0gL15uZ0F0dHJbQS1aXS87XG4gICAgdmFyIE1VTFRJX0VMRU1FTlRfRElSX1JFID0gL14oLispU3RhcnQkLztcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdJbmZvKCRlbGVtZW50LCBiaW5kaW5nKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSAkZWxlbWVudC5kYXRhKCckYmluZGluZycpIHx8IFtdO1xuXG4gICAgICBpZiAoaXNBcnJheShiaW5kaW5nKSkge1xuICAgICAgICBiaW5kaW5ncyA9IGJpbmRpbmdzLmNvbmNhdChiaW5kaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLnB1c2goYmluZGluZyk7XG4gICAgICB9XG5cbiAgICAgICRlbGVtZW50LmRhdGEoJyRiaW5kaW5nJywgYmluZGluZ3MpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdDbGFzcygkZWxlbWVudCkge1xuICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCAnbmctYmluZGluZycpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgc2NvcGUsIGlzb2xhdGVkLCBub1RlbXBsYXRlKSB7XG4gICAgICB2YXIgZGF0YU5hbWUgPSBpc29sYXRlZCA/IChub1RlbXBsYXRlID8gJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyA6ICckaXNvbGF0ZVNjb3BlJykgOiAnJHNjb3BlJztcbiAgICAgICRlbGVtZW50LmRhdGEoZGF0YU5hbWUsIHNjb3BlKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQgPyAnbmctaXNvbGF0ZS1zY29wZScgOiAnbmctc2NvcGUnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRjcmVhdGVDb21tZW50ID0gZnVuY3Rpb24oZGlyZWN0aXZlTmFtZSwgY29tbWVudCkge1xuICAgICAgdmFyIGNvbnRlbnQgPSAnJztcbiAgICAgIGlmIChkZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAgIGNvbnRlbnQgPSAnICcgKyAoZGlyZWN0aXZlTmFtZSB8fCAnJykgKyAnOiAnO1xuICAgICAgICBpZiAoY29tbWVudCkgY29udGVudCArPSBjb21tZW50ICsgJyAnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVDb21tZW50KGNvbnRlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29tcGlsZTtcblxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgaWYgKCEoJGNvbXBpbGVOb2RlcyBpbnN0YW5jZW9mIGpxTGl0ZSkpIHtcbiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vIG1vZGlmeSBpdC5cbiAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGpxTGl0ZSgkY29tcGlsZU5vZGVzKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb21wb3NpdGVMaW5rRm4gPVxuICAgICAgICAgICAgICBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkY29tcGlsZU5vZGVzKTtcbiAgICAgIHZhciBuYW1lc3BhY2UgPSBudWxsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHB1YmxpY0xpbmtGbihzY29wZSwgY2xvbmVDb25uZWN0Rm4sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCEkY29tcGlsZU5vZGVzKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ211bHRpbGluaycsICdUaGlzIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiBsaW5rZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTtcblxuICAgICAgICBpZiAocHJldmlvdXNDb21waWxlQ29udGV4dCAmJiBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5lZWRzTmV3U2NvcGUpIHtcbiAgICAgICAgICAvLyBBIHBhcmVudCBkaXJlY3RpdmUgZGlkIGEgcmVwbGFjZSBhbmQgYSBkaXJlY3RpdmUgb24gdGhpcyBlbGVtZW50IGFza2VkXG4gICAgICAgICAgLy8gZm9yIHRyYW5zY2x1c2lvbiwgd2hpY2ggY2F1c2VkIHVzIHRvIGxvc2UgYSBsYXllciBvZiBlbGVtZW50IG9uIHdoaWNoXG4gICAgICAgICAgLy8gd2UgY291bGQgaG9sZCB0aGUgbmV3IHRyYW5zY2x1c2lvbiBzY29wZSwgc28gd2Ugd2lsbCBjcmVhdGUgaXQgbWFudWFsbHlcbiAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudC4kbmV3KCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gb3B0aW9ucy5wYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnMgPSBvcHRpb25zLnRyYW5zY2x1ZGVDb250cm9sbGVycyxcbiAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gb3B0aW9ucy5mdXR1cmVQYXJlbnRFbGVtZW50O1xuXG4gICAgICAgIC8vIFdoZW4gYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCBpcyBwYXNzZWQsIGl0IGlzIGFcbiAgICAgICAgLy8gYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvbiAoaXQgd2FzIHByZXZpb3VzbHkgcGFzc2VkXG4gICAgICAgIC8vIGFzIGB0cmFuc2NsdWRlYCB0byBkaXJlY3RpdmUubGluaykgc28gd2UgbXVzdCB1bndyYXAgaXQgdG8gZ2V0XG4gICAgICAgIC8vIGl0cyBgYm91bmRUcmFuc2NsdWRlRm5gXG4gICAgICAgIGlmIChwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSkge1xuICAgICAgICAgIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4uJCRib3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICAgIG5hbWVzcGFjZSA9IGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMoZnV0dXJlUGFyZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICRsaW5rTm9kZTtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gJ2h0bWwnKSB7XG4gICAgICAgICAgLy8gV2hlbiB1c2luZyBhIGRpcmVjdGl2ZSB3aXRoIHJlcGxhY2U6dHJ1ZSBhbmQgdGVtcGxhdGVVcmwgdGhlICRjb21waWxlTm9kZXNcbiAgICAgICAgICAvLyAob3IgYSBjaGlsZCBlbGVtZW50IGluc2lkZSBvZiB0aGVtKVxuICAgICAgICAgIC8vIG1pZ2h0IGNoYW5nZSwgc28gd2UgbmVlZCB0byByZWNyZWF0ZSB0aGUgbmFtZXNwYWNlIGFkYXB0ZWQgY29tcGlsZU5vZGVzXG4gICAgICAgICAgLy8gZm9yIGNhbGwgdG8gdGhlIGxpbmsgZnVuY3Rpb24uXG4gICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFscmVhZHkgY2xvbmUgdGhlIG5vZGVzLi4uXG4gICAgICAgICAgJGxpbmtOb2RlID0ganFMaXRlKFxuICAgICAgICAgICAgd3JhcFRlbXBsYXRlKG5hbWVzcGFjZSwganFMaXRlKCc8ZGl2PicpLmFwcGVuZCgkY29tcGlsZU5vZGVzKS5odG1sKCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbG9uZUNvbm5lY3RGbikge1xuICAgICAgICAgIC8vIGltcG9ydGFudCEhOiB3ZSBtdXN0IGNhbGwgb3VyIGpxTGl0ZS5jbG9uZSgpIHNpbmNlIHRoZSBqUXVlcnkgb25lIGlzIHRyeWluZyB0byBiZSBzbWFydFxuICAgICAgICAgIC8vIGFuZCBzb21ldGltZXMgY2hhbmdlcyB0aGUgc3RydWN0dXJlIG9mIHRoZSBET00uXG4gICAgICAgICAgJGxpbmtOb2RlID0gSlFMaXRlUHJvdG90eXBlLmNsb25lLmNhbGwoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBjb250cm9sbGVyTmFtZSBpbiB0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICAgICRsaW5rTm9kZS5kYXRhKCckJyArIGNvbnRyb2xsZXJOYW1lICsgJ0NvbnRyb2xsZXInLCB0cmFuc2NsdWRlQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdLmluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKCRsaW5rTm9kZSwgc2NvcGUpO1xuXG4gICAgICAgIGlmIChjbG9uZUNvbm5lY3RGbikgY2xvbmVDb25uZWN0Rm4oJGxpbmtOb2RlLCBzY29wZSk7XG4gICAgICAgIGlmIChjb21wb3NpdGVMaW5rRm4pIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgJGxpbmtOb2RlLCAkbGlua05vZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICBpZiAoIWNsb25lQ29ubmVjdEZuKSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGNvbXBvc2l0ZUxpbmtGbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRsaW5rTm9kZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhwYXJlbnRFbGVtZW50KSB7XG4gICAgICAvLyBUT0RPOiBNYWtlIHRoaXMgZGV0ZWN0IE1hdGhNTCBhcyB3ZWxsLi4uXG4gICAgICB2YXIgbm9kZSA9IHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudFswXTtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXR1cm4gJ2h0bWwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5vZGVOYW1lXyhub2RlKSAhPT0gJ2ZvcmVpZ25vYmplY3QnICYmIHRvU3RyaW5nLmNhbGwobm9kZSkubWF0Y2goL1NWRy8pID8gJ3N2ZycgOiAnaHRtbCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGlsZSBmdW5jdGlvbiBtYXRjaGVzIGVhY2ggbm9kZSBpbiBub2RlTGlzdCBhZ2FpbnN0IHRoZSBkaXJlY3RpdmVzLiBPbmNlIGFsbCBkaXJlY3RpdmVzXG4gICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZVxuICAgICAqIGZ1bmN0aW9ucyByZXR1cm4gdmFsdWVzIC0gdGhlIGxpbmtpbmcgZnVuY3Rpb25zIC0gYXJlIGNvbWJpbmVkIGludG8gYSBjb21wb3NpdGUgbGlua2luZ1xuICAgICAqIGZ1bmN0aW9uLCB3aGljaCBpcyB0aGUgYSBsaW5raW5nIGZ1bmN0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVMaXN0IGFuIGFycmF5IG9mIG5vZGVzIG9yIE5vZGVMaXN0IHRvIGNvbXBpbGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSAkcm9vdEVsZW1lbnQgSWYgdGhlIG5vZGVMaXN0IGlzIHRoZSByb290IG9mIHRoZSBjb21waWxhdGlvbiB0cmVlIHRoZW5cbiAgICAgKiAgICAgICAgdGhlIHJvb3RFbGVtZW50IG11c3QgYmUgc2V0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBvZiB0aGUgY29tcGlsZSByb290LiBUaGlzIGlzXG4gICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgY29tcG9zaXRlIGxpbmtpbmcgZnVuY3Rpb24gb2YgYWxsIG9mIHRoZSBtYXRjaGVkIGRpcmVjdGl2ZXMgb3IgbnVsbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21waWxlTm9kZXMobm9kZUxpc3QsIHRyYW5zY2x1ZGVGbiwgJHJvb3RFbGVtZW50LCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rRm5zID0gW10sXG4gICAgICAgICAgLy8gYG5vZGVMaXN0YCBjYW4gYmUgZWl0aGVyIGFuIGVsZW1lbnQncyBgLmNoaWxkTm9kZXNgIChsaXZlIE5vZGVMaXN0KVxuICAgICAgICAgIC8vIG9yIGEganFMaXRlL2pRdWVyeSBjb2xsZWN0aW9uIG9yIGFuIGFycmF5XG4gICAgICAgICAgbm90TGl2ZUxpc3QgPSBpc0FycmF5KG5vZGVMaXN0KSB8fCAobm9kZUxpc3QgaW5zdGFuY2VvZiBqcUxpdGUpLFxuICAgICAgICAgIGF0dHJzLCBkaXJlY3RpdmVzLCBub2RlTGlua0ZuLCBjaGlsZE5vZGVzLCBjaGlsZExpbmtGbiwgbGlua0ZuRm91bmQsIG5vZGVMaW5rRm5Gb3VuZDtcblxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoKTtcblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG4gICAgICAgIC8vIFdvcmthcm91bmQgZm9yICMxMTc4MSBhbmQgIzE0OTI0XG4gICAgICAgIGlmIChtc2llID09PSAxMSkge1xuICAgICAgICAgIG1lcmdlQ29uc2VjdXRpdmVUZXh0Tm9kZXMobm9kZUxpc3QsIGksIG5vdExpdmVMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIG11c3QgYWx3YXlzIHJlZmVyIHRvIGBub2RlTGlzdFtpXWAgaGVyZWFmdGVyLFxuICAgICAgICAvLyBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhub2RlTGlzdFtpXSwgW10sIGF0dHJzLCBpID09PSAwID8gbWF4UHJpb3JpdHkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICBub2RlTGlua0ZuID0gKGRpcmVjdGl2ZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgbm9kZUxpc3RbaV0sIGF0dHJzLCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgW10sIFtdLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KVxuICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIGlmIChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyhhdHRycy4kJGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRMaW5rRm4gPSAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIShjaGlsZE5vZGVzID0gbm9kZUxpc3RbaV0uY2hpbGROb2RlcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAhY2hpbGROb2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogY29tcGlsZU5vZGVzKGNoaWxkTm9kZXMsXG4gICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4gPyAoXG4gICAgICAgICAgICAgICAgICAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCB8fCAhbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAmJiBub2RlTGlua0ZuLnRyYW5zY2x1ZGUpIDogdHJhbnNjbHVkZUZuKTtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiB8fCBjaGlsZExpbmtGbikge1xuICAgICAgICAgIGxpbmtGbnMucHVzaChpLCBub2RlTGlua0ZuLCBjaGlsZExpbmtGbik7XG4gICAgICAgICAgbGlua0ZuRm91bmQgPSB0cnVlO1xuICAgICAgICAgIG5vZGVMaW5rRm5Gb3VuZCA9IG5vZGVMaW5rRm5Gb3VuZCB8fCBub2RlTGlua0ZuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91c2UgdGhlIHByZXZpb3VzIGNvbnRleHQgb25seSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHZpcnR1YWwgZ3JvdXBcbiAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHJldHVybiBhIGxpbmtpbmcgZnVuY3Rpb24gaWYgd2UgaGF2ZSBmb3VuZCBhbnl0aGluZywgbnVsbCBvdGhlcndpc2VcbiAgICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgbm9kZUxpc3QsICRyb290RWxlbWVudCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBub2RlLCBjaGlsZFNjb3BlLCBpLCBpaSwgaWR4LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICB2YXIgc3RhYmxlTm9kZUxpc3Q7XG5cblxuICAgICAgICBpZiAobm9kZUxpbmtGbkZvdW5kKSB7XG4gICAgICAgICAgLy8gY29weSBub2RlTGlzdCBzbyB0aGF0IGlmIGEgbm9kZUxpbmtGbiByZW1vdmVzIG9yIGFkZHMgYW4gZWxlbWVudCBhdCB0aGlzIERPTSBsZXZlbCBvdXJcbiAgICAgICAgICAvLyBvZmZzZXRzIGRvbid0IGdldCBzY3Jld2VkIHVwXG4gICAgICAgICAgdmFyIG5vZGVMaXN0TGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbmV3IEFycmF5KG5vZGVMaXN0TGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGNyZWF0ZSBhIHNwYXJzZSBhcnJheSBieSBvbmx5IGNvcHlpbmcgdGhlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBsaW5rRm5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlua0Zucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgaWR4ID0gbGlua0Zuc1tpXTtcbiAgICAgICAgICAgIHN0YWJsZU5vZGVMaXN0W2lkeF0gPSBub2RlTGlzdFtpZHhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5vZGVMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBsaW5rRm5zLmxlbmd0aDsgaSA8IGlpOykge1xuICAgICAgICAgIG5vZGUgPSBzdGFibGVOb2RlTGlzdFtsaW5rRm5zW2krK11dO1xuICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107XG4gICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107XG5cbiAgICAgICAgICBpZiAobm9kZUxpbmtGbikge1xuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyhqcUxpdGUobm9kZSksIGNoaWxkU2NvcGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oXG4gICAgICAgICAgICAgICAgICBzY29wZSwgbm9kZUxpbmtGbi50cmFuc2NsdWRlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gJiYgdHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vZGVMaW5rRm4oY2hpbGRMaW5rRm4sIGNoaWxkU2NvcGUsIG5vZGUsICRyb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTGlua0ZuKSB7XG4gICAgICAgICAgICBjaGlsZExpbmtGbihzY29wZSwgbm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbnNlY3V0aXZlVGV4dE5vZGVzKG5vZGVMaXN0LCBpZHgsIG5vdExpdmVMaXN0KSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVMaXN0W2lkeF07XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgdmFyIHNpYmxpbmc7XG5cbiAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQgPyBub2RlLm5leHRTaWJsaW5nIDogbm9kZUxpc3RbaWR4ICsgMV07XG4gICAgICAgIGlmICghc2libGluZyB8fCBzaWJsaW5nLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5ub2RlVmFsdWUgPSBub2RlLm5vZGVWYWx1ZSArIHNpYmxpbmcubm9kZVZhbHVlO1xuXG4gICAgICAgIGlmIChzaWJsaW5nLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBzaWJsaW5nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdExpdmVMaXN0ICYmIHNpYmxpbmcgPT09IG5vZGVMaXN0W2lkeCArIDFdKSB7XG4gICAgICAgICAgbm9kZUxpc3Quc3BsaWNlKGlkeCArIDEsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbiwgcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgZnVuY3Rpb24gYm91bmRUcmFuc2NsdWRlRm4odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnM6IGNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQ6IGZ1dHVyZVBhcmVudEVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG5lZWQgIHRvIGF0dGFjaCB0aGUgdHJhbnNjbHVzaW9uIHNsb3RzIG9udG8gdGhlIGBib3VuZFRyYW5zY2x1ZGVGbmBcbiAgICAgIC8vIHNvIHRoYXQgdGhleSBhcmUgYXZhaWxhYmxlIGluc2lkZSB0aGUgYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgdmFyIGJvdW5kU2xvdHMgPSBib3VuZFRyYW5zY2x1ZGVGbi4kJHNsb3RzID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3IgKHZhciBzbG90TmFtZSBpbiB0cmFuc2NsdWRlRm4uJCRzbG90cykge1xuICAgICAgICBpZiAodHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgYm91bmRTbG90c1tzbG90TmFtZV0gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdLCBwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3VuZFNsb3RzW3Nsb3ROYW1lXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZCBhZGRzIHRoZW0gdG8gdGhlIGRpcmVjdGl2ZSBjb2xsZWN0aW9uIHdoaWNoIGlzXG4gICAgICogc29ydGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIGRpcmVjdGl2ZXMgQW4gYXJyYXkgdG8gd2hpY2ggdGhlIGRpcmVjdGl2ZXMgYXJlIGFkZGVkIHRvLiBUaGlzIGFycmF5IGlzIHNvcnRlZCBiZWZvcmVcbiAgICAgKiAgICAgICAgdGhlIGZ1bmN0aW9uIHJldHVybnMuXG4gICAgICogQHBhcmFtIGF0dHJzIFRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29sbGVjdERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcbiAgICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGUsXG4gICAgICAgICAgYXR0cnNNYXAgPSBhdHRycy4kYXR0cixcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBub2RlTmFtZSxcbiAgICAgICAgICBjbGFzc05hbWU7XG5cbiAgICAgIHN3aXRjaCAobm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfRUxFTUVOVDogLyogRWxlbWVudCAqL1xuXG4gICAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZV8obm9kZSk7XG5cbiAgICAgICAgICAvLyB1c2UgdGhlIG5vZGUgbmFtZTogPGRpcmVjdGl2ZT5cbiAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lKSwgJ0UnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgYXR0cmlidXRlc1xuICAgICAgICAgIGZvciAodmFyIGF0dHIsIG5hbWUsIG5OYW1lLCBuZ0F0dHJOYW1lLCB2YWx1ZSwgaXNOZ0F0dHIsIG5BdHRycyA9IG5vZGUuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICBqID0gMCwgamogPSBuQXR0cnMgJiYgbkF0dHJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyU3RhcnROYW1lID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgYXR0ckVuZE5hbWUgPSBmYWxzZTtcblxuICAgICAgICAgICAgYXR0ciA9IG5BdHRyc1tqXTtcbiAgICAgICAgICAgIG5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgICAgICB2YWx1ZSA9IGF0dHIudmFsdWU7XG5cbiAgICAgICAgICAgIC8vIHN1cHBvcnQgbmdBdHRyIGF0dHJpYnV0ZSBiaW5kaW5nXG4gICAgICAgICAgICBuZ0F0dHJOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpO1xuICAgICAgICAgICAgaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0cikge1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoOCkucmVwbGFjZSgvXyguKS9nLCBmdW5jdGlvbihtYXRjaCwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtdWx0aUVsZW1lbnRNYXRjaCA9IG5nQXR0ck5hbWUubWF0Y2goTVVMVElfRUxFTUVOVF9ESVJfUkUpO1xuICAgICAgICAgICAgaWYgKG11bHRpRWxlbWVudE1hdGNoICYmIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG11bHRpRWxlbWVudE1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICBhdHRyU3RhcnROYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgYXR0cnNNYXBbbk5hbWVdID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0ciB8fCAhYXR0cnMuaGFzT3duUHJvcGVydHkobk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRydWU7IC8vIHByZXNlbmNlIG1lYW5zIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lLCBpc05nQXR0cik7XG4gICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBub2RlLmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgLy8gSGlkZGVuIGlucHV0IGVsZW1lbnRzIGNhbiBoYXZlIHN0cmFuZ2UgYmVoYXZpb3VyIHdoZW4gbmF2aWdhdGluZyBiYWNrIHRvIHRoZSBwYWdlXG4gICAgICAgICAgICAvLyBUaGlzIHRlbGxzIHRoZSBicm93c2VyIG5vdCB0byB0cnkgdG8gY2FjaGUgYW5kIHJlaW5zdGF0ZSBwcmV2aW91cyB2YWx1ZXNcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZVxuICAgICAgICAgIGlmICghY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZCkgYnJlYWs7XG4gICAgICAgICAgY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWU7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgLy8gTWF5YmUgU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLmFuaW1WYWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1N0cmluZyhjbGFzc05hbWUpICYmIGNsYXNzTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkpIHtcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cihtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9URVhUOiAvKiBUZXh0IE5vZGUgKi9cbiAgICAgICAgICBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgbm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9DT01NRU5UOiAvKiBDb21tZW50ICovXG4gICAgICAgICAgaWYgKCFjb21tZW50RGlyZWN0aXZlc0VuYWJsZWQpIGJyZWFrO1xuICAgICAgICAgIGNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTtcbiAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xuICAgICAgLy8gZnVuY3Rpb24gY3JlYXRlZCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlLCB0cnkvY2F0Y2ggZGlzYWJsZXNcbiAgICAgIC8vIHRoZSBvcHRpbWl6YXRpb24gb2YgdGhlIHdob2xlIGZ1bmN0aW9uICMxNDg0OFxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG1hdGNoID0gQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMobm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMV0pO1xuICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyB0dXJucyBvdXQgdGhhdCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgSUU5IHRocm93cyBlcnJvcnMgd2hlbiBvbmUgYXR0ZW1wdHMgdG8gcmVhZFxuICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS5cbiAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLilcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIG5vZGUgd2l0aCBhIGRpcmVjdGl2ZS1zdGFydCBpdCBjb2xsZWN0cyBhbGwgb2YgdGhlIHNpYmxpbmdzIHVudGlsIGl0IGZpbmRzXG4gICAgICogZGlyZWN0aXZlLWVuZC5cbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwU2Nhbihub2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgdmFyIGRlcHRoID0gMDtcbiAgICAgIGlmIChhdHRyU3RhcnQgJiYgbm9kZS5oYXNBdHRyaWJ1dGUgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndXRlcmRpcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ1VudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kIFxcJ3swfVxcJyBidXQgbm8gbWF0Y2hpbmcgXFwnezF9XFwnIGZvdW5kLicsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkgZGVwdGgrKztcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyRW5kKSkgZGVwdGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqcUxpdGUobm9kZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWRcbiAgICAgKiBsaW5raW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW5rRm5cbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIobGlua0ZuLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBncm91cGVkRWxlbWVudHNMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICBlbGVtZW50ID0gZ3JvdXBTY2FuKGVsZW1lbnRbMF0sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiBnZW5lcmF0b3IgdGhhdCBpcyB1c2VkIHRvIHN1cHBvcnQgYm90aCBlYWdlciBhbmQgbGF6eSBjb21waWxhdGlvblxuICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIGVhZ2VyXG4gICAgICogQHBhcmFtICRjb21waWxlTm9kZXNcbiAgICAgKiBAcGFyYW0gdHJhbnNjbHVkZUZuXG4gICAgICogQHBhcmFtIG1heFByaW9yaXR5XG4gICAgICogQHBhcmFtIGlnbm9yZURpcmVjdGl2ZVxuICAgICAqIEBwYXJhbSBwcmV2aW91c0NvbXBpbGVDb250ZXh0XG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBpbGF0aW9uR2VuZXJhdG9yKGVhZ2VyLCAkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBjb21waWxlZDtcblxuICAgICAgaWYgKGVhZ2VyKSB7XG4gICAgICAgIHJldHVybiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uIGxhenlDb21waWxhdGlvbigpIHtcbiAgICAgICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgICAgIGNvbXBpbGVkID0gY29tcGlsZSgkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuXG4gICAgICAgICAgLy8gTnVsbCBvdXQgYWxsIG9mIHRoZXNlIHJlZmVyZW5jZXMgaW4gb3JkZXIgdG8gbWFrZSB0aGVtIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGEgcG90ZW50aWFsbHkgbG9uZyBsaXZlZCBjbG9zdXJlXG4gICAgICAgICAgJGNvbXBpbGVOb2RlcyA9IHRyYW5zY2x1ZGVGbiA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21waWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBkaXJlY3RpdmVzIGhhdmUgYmVlbiBjb2xsZWN0ZWQsIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhpcyBtZXRob2RcbiAgICAgKiBpcyByZXNwb25zaWJsZSBmb3IgaW5saW5pbmcgZGlyZWN0aXZlIHRlbXBsYXRlcyBhcyB3ZWxsIGFzIHRlcm1pbmF0aW5nIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRpcmVjdGl2ZXMgQXJyYXkgb2YgY29sbGVjdGVkIGRpcmVjdGl2ZXMgdG8gZXhlY3V0ZSB0aGVpciBjb21waWxlIGZ1bmN0aW9uLlxuICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuXG4gICAgICogQHBhcmFtIHtOb2RlfSBjb21waWxlTm9kZSBUaGUgcmF3IERPTSBub2RlIHRvIGFwcGx5IHRoZSBjb21waWxlIGZ1bmN0aW9ucyB0b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUF0dHJzIFRoZSBzaGFyZWQgYXR0cmlidXRlIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtKUUxpdGV9IGpxQ29sbGVjdGlvbiBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgaGFzIHRoZSByb290IGpxTGl0ZSBhcnJheSBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiBpdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSBBbiBvcHRpb25hbCBkaXJlY3RpdmUgdGhhdCB3aWxsIGJlIGlnbm9yZWQgd2hlblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGluZyB0aGUgdHJhbnNjbHVzaW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcHJlTGlua0Zuc1xuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcG9zdExpbmtGbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJldmlvdXNDb21waWxlQ29udGV4dCBDb250ZXh0IHVzZWQgZm9yIHByZXZpb3VzIGNvbXBpbGF0aW9uIG9mIHRoZSBjdXJyZW50XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gbGlua0ZuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCB0cmFuc2NsdWRlRm4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgfHwge307XG5cbiAgICAgIHZhciB0ZXJtaW5hbFByaW9yaXR5ID0gLU51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5jb250cm9sbGVyRGlyZWN0aXZlcyxcbiAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQudGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSBmYWxzZSxcbiAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPSBqcUxpdGUoY29tcGlsZU5vZGUpLFxuICAgICAgICAgIGRpcmVjdGl2ZSxcbiAgICAgICAgICBkaXJlY3RpdmVOYW1lLFxuICAgICAgICAgICR0ZW1wbGF0ZSxcbiAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLFxuICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZUZuLFxuICAgICAgICAgIGxpbmtGbixcbiAgICAgICAgICBkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gPSBmYWxzZSxcbiAgICAgICAgICBtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yID0gZmFsc2UsXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWU7XG5cbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9uc1xuICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICB9XG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5zY29wZTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUpIHtcblxuICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXNcbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7XG5cbiAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGEgY29uZGl0aW9uIHRoYXQgY2FuIHJlc3VsdCBpbiB0cmFuc2NsdXNpb24gb24gdGhlIGRpcmVjdGl2ZSxcbiAgICAgICAgLy8gdGhlbiBzY2FuIGFoZWFkIGluIHRoZSByZW1haW5pbmcgZGlyZWN0aXZlcyBmb3Igb3RoZXJzIHRoYXQgbWF5IGNhdXNlIGEgbXVsdGlwbGVcbiAgICAgICAgLy8gdHJhbnNjbHVzaW9uIGVycm9yIHRvIGJlIHRocm93biBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIHByb2Nlc3MuICBJZiBhIG1hdGNoaW5nIGRpcmVjdGl2ZVxuICAgICAgICAvLyBpcyBmb3VuZCwgdGhlbiB3ZSBrbm93IHRoYXQgd2hlbiB3ZSBlbmNvdW50ZXIgYSB0cmFuc2NsdWRlZCBkaXJlY3RpdmUsIHdlIG5lZWQgdG8gZWFnZXJseVxuICAgICAgICAvLyBjb21waWxlIHRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gcmF0aGVyIHRoYW4gZG9pbmcgaXQgbGF6aWx5IGluIG9yZGVyIHRvIHRocm93XG4gICAgICAgIC8vIGV4Y2VwdGlvbnMgYXQgdGhlIGNvcnJlY3QgdGltZVxuICAgICAgICBpZiAoIWRpZFNjYW5Gb3JNdWx0aXBsZVRyYW5zY2x1c2lvbiAmJiAoKGRpcmVjdGl2ZS5yZXBsYWNlICYmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgZGlyZWN0aXZlLnRlbXBsYXRlKSlcbiAgICAgICAgICAgIHx8IChkaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhZGlyZWN0aXZlLiQkdGxiKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FuZGlkYXRlRGlyZWN0aXZlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2Nhbm5pbmdJbmRleCA9IGkgKyAxOyAoY2FuZGlkYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlc1tzY2FubmluZ0luZGV4KytdKTspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjYW5kaWRhdGVEaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhY2FuZGlkYXRlRGlyZWN0aXZlLiQkdGxiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGNhbmRpZGF0ZURpcmVjdGl2ZS5yZXBsYWNlICYmIChjYW5kaWRhdGVEaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgY2FuZGlkYXRlRGlyZWN0aXZlLnRlbXBsYXRlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzIHx8IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCdcXCcnICsgZGlyZWN0aXZlTmFtZSArICdcXCcgY29udHJvbGxlcicsXG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlO1xuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSkge1xuICAgICAgICAgIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIG5nSWYgYW5kIG5nUmVwZWF0IHNvIHRoYXQgd2UgZG9uJ3QgY29tcGxhaW4gYWJvdXQgZHVwbGljYXRlIHRyYW5zY2x1c2lvbi5cbiAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGRpcmVjdGl2ZXMgdGhhdCBrbm93IGhvdyB0byBzYWZlbHkgaGFuZGxlIGVsZW1lbnQgdHJhbnNjbHVzaW9uLFxuICAgICAgICAgIC8vIHdoZXJlIHRoZSB0cmFuc2NsdWRlZCBub2RlcyBhcmUgYWRkZWQgb3IgcmVwbGFjZWQgYWZ0ZXIgbGlua2luZy5cbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS4kJHRsYikge1xuICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RyYW5zY2x1c2lvbicsIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHk7XG4gICAgICAgICAgICAkdGVtcGxhdGUgPSAkY29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudCA9XG4gICAgICAgICAgICAgICAganFMaXRlKGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KGRpcmVjdGl2ZU5hbWUsIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0pKTtcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCBzbGljZUFyZ3MoJHRlbXBsYXRlKSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPCA1MFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTQwNDFcblxuICAgICAgICAgICAgLy8gSW4gdGhlIHZlcnNpb25zIG9mIFY4IHByaW9yIHRvIENocm9tZSA1MCwgdGhlIGRvY3VtZW50IGZyYWdtZW50IHRoYXQgaXMgY3JlYXRlZFxuICAgICAgICAgICAgLy8gaW4gdGhlIGByZXBsYWNlV2l0aGAgZnVuY3Rpb24gaXMgaW1wcm9wZXJseSBnYXJiYWdlIGNvbGxlY3RlZCBkZXNwaXRlIHN0aWxsXG4gICAgICAgICAgICAvLyBiZWluZyByZWZlcmVuY2VkIGJ5IHRoZSBgcGFyZW50Tm9kZWAgcHJvcGVydHkgb2YgYWxsIG9mIHRoZSBjaGlsZCBub2Rlcy4gIEJ5IGFkZGluZ1xuICAgICAgICAgICAgLy8gYSByZWZlcmVuY2UgdG8gdGhlIGZyYWdtZW50IHZpYSBhIGRpZmZlcmVudCBwcm9wZXJ0eSwgd2UgY2FuIGF2b2lkIHRoYXQgaW5jb3JyZWN0XG4gICAgICAgICAgICAvLyBiZWhhdmlvci5cbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGxpbmUgYWZ0ZXIgQ2hyb21lIDUwIGhhcyBiZWVuIHJlbGVhc2VkXG4gICAgICAgICAgICAkdGVtcGxhdGVbMF0uJCRwYXJlbnROb2RlID0gJHRlbXBsYXRlWzBdLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsYXRpb25HZW5lcmF0b3IobWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciwgJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHRlcm1pbmFsUHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSAmJiByZXBsYWNlRGlyZWN0aXZlLm5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHBhc3MgaW46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIGNvbnRyb2xsZXJEaXJlY3RpdmVzIC0gb3RoZXJ3aXNlIHdlJ2xsIGNyZWF0ZSBkdXBsaWNhdGVzIGNvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSBvciB0ZW1wbGF0ZURpcmVjdGl2ZSAtIGNvbWJpbmluZyB0ZW1wbGF0ZXMgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlbGVtZW50IHRyYW5zY2x1c2lvbiBkb2Vzbid0IG1ha2Ugc2Vuc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCBvbmx5IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgc28gdGhhdCB3ZSBwcmV2ZW50IHB1dHRpbmcgdHJhbnNjbHVzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTogbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHZhciBzbG90cyA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoanFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpKS5jb250ZW50cygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRyYW5zY2x1c2lvbiBzbG90cyxcbiAgICAgICAgICAgICAgLy8gY29sbGVjdCB0aGVtIHVwLCBjb21waWxlIHRoZW0gYW5kIHN0b3JlIHRoZWlyIHRyYW5zY2x1c2lvbiBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG5cbiAgICAgICAgICAgICAgdmFyIHNsb3RNYXAgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgICAgICAgdmFyIGZpbGxlZFNsb3RzID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGVsZW1lbnQgc2VsZWN0b3JzXG4gICAgICAgICAgICAgIGZvckVhY2goZGlyZWN0aXZlVmFsdWUsIGZ1bmN0aW9uKGVsZW1lbnRTZWxlY3Rvciwgc2xvdE5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBhbiBlbGVtZW50IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIGEgPyB0aGVuIGl0IGlzIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsID0gKGVsZW1lbnRTZWxlY3Rvci5jaGFyQXQoMCkgPT09ICc/Jyk7XG4gICAgICAgICAgICAgICAgZWxlbWVudFNlbGVjdG9yID0gb3B0aW9uYWwgPyBlbGVtZW50U2VsZWN0b3Iuc3Vic3RyaW5nKDEpIDogZWxlbWVudFNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgc2xvdE1hcFtlbGVtZW50U2VsZWN0b3JdID0gc2xvdE5hbWU7XG5cbiAgICAgICAgICAgICAgICAvLyBXZSBleHBsaWNpdGx5IGFzc2lnbiBgbnVsbGAgc2luY2UgdGhpcyBpbXBsaWVzIHRoYXQgYSBzbG90IHdhcyBkZWZpbmVkIGJ1dCBub3QgZmlsbGVkLlxuICAgICAgICAgICAgICAgIC8vIExhdGVyIHdoZW4gY2FsbGluZyBib3VuZFRyYW5zY2x1c2lvbiBmdW5jdGlvbnMgd2l0aCBhIHNsb3QgbmFtZSB3ZSBvbmx5IGVycm9yIGlmIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNsb3QgaXMgYHVuZGVmaW5lZGBcbiAgICAgICAgICAgICAgICBzbG90c1tzbG90TmFtZV0gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gZmlsbGVkU2xvdHMgY29udGFpbnMgYHRydWVgIGZvciBhbGwgc2xvdHMgdGhhdCBhcmUgZWl0aGVyIG9wdGlvbmFsIG9yIGhhdmUgYmVlblxuICAgICAgICAgICAgICAgIC8vIGZpbGxlZC4gVGhpcyBpcyB1c2VkIHRvIGNoZWNrIHRoYXQgd2UgaGF2ZSBub3QgbWlzc2VkIGFueSByZXF1aXJlZCBzbG90c1xuICAgICAgICAgICAgICAgIGZpbGxlZFNsb3RzW3Nsb3ROYW1lXSA9IG9wdGlvbmFsO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvLyBBZGQgdGhlIG1hdGNoaW5nIGVsZW1lbnRzIGludG8gdGhlaXIgc2xvdFxuICAgICAgICAgICAgICBmb3JFYWNoKCRjb21waWxlTm9kZS5jb250ZW50cygpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsb3ROYW1lID0gc2xvdE1hcFtkaXJlY3RpdmVOb3JtYWxpemUobm9kZU5hbWVfKG5vZGUpKV07XG4gICAgICAgICAgICAgICAgaWYgKHNsb3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgICBmaWxsZWRTbG90c1tzbG90TmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdID0gc2xvdHNbc2xvdE5hbWVdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICR0ZW1wbGF0ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHJlcXVpcmVkIHNsb3RzIHRoYXQgd2VyZSBub3QgZmlsbGVkXG4gICAgICAgICAgICAgIGZvckVhY2goZmlsbGVkU2xvdHMsIGZ1bmN0aW9uKGZpbGxlZCwgc2xvdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGxlZCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3JlcXNsb3QnLCAnUmVxdWlyZWQgdHJhbnNjbHVzaW9uIHNsb3QgYHswfWAgd2FzIG5vdCBmaWxsZWQuJywgc2xvdE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgc2xvdE5hbWUgaW4gc2xvdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAvLyBPbmx5IGRlZmluZSBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpZiB0aGUgc2xvdCB3YXMgZmlsbGVkXG4gICAgICAgICAgICAgICAgICBzbG90c1tzbG90TmFtZV0gPSBjb21waWxhdGlvbkdlbmVyYXRvcihtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yLCBzbG90c1tzbG90TmFtZV0sIHRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50c1xuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxhdGlvbkdlbmVyYXRvcihtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yLCAkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbiwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgeyBuZWVkc05ld1Njb3BlOiBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUgfHwgZGlyZWN0aXZlLiQkbmV3U2NvcGV9KTtcbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLiQkc2xvdHMgPSBzbG90cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IChpc0Z1bmN0aW9uKGRpcmVjdGl2ZS50ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycylcbiAgICAgICAgICAgICAgOiBkaXJlY3RpdmUudGVtcGxhdGU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoZGlyZWN0aXZlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShkaXJlY3RpdmVWYWx1ZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgICdUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX0nLFxuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXBsYWNlV2l0aChqcUNvbGxlY3Rpb24sICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuXG4gICAgICAgICAgICAvLyBjb21iaW5lIGRpcmVjdGl2ZXMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSBhbmQgZnJvbSB0aGUgdGVtcGxhdGU6XG4gICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgLy8gLSBzcGxpdCBpdCBpbnRvIHR3byBwYXJ0cywgdGhvc2UgdGhhdCBhbHJlYWR5IGFwcGxpZWQgKHByb2Nlc3NlZCkgYW5kIHRob3NlIHRoYXQgd2VyZW4ndCAodW5wcm9jZXNzZWQpXG4gICAgICAgICAgICAvLyAtIGNvbGxlY3QgZGlyZWN0aXZlcyBmcm9tIHRoZSB0ZW1wbGF0ZSBhbmQgc29ydCB0aGVtIGJ5IHByaW9yaXR5XG4gICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZFxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgbmV3VGVtcGxhdGVBdHRycyk7XG4gICAgICAgICAgICB2YXIgdW5wcm9jZXNzZWREaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5zcGxpY2UoaSArIDEsIGRpcmVjdGl2ZXMubGVuZ3RoIC0gKGkgKyAxKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgbmV3U2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGRpcmVjdGl2ZSBjYXVzZWQgdGhlIGN1cnJlbnQgZWxlbWVudCB0byBiZSByZXBsYWNlZCBidXQgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAgIC8vIGFsc28gbmVlZHMgdG8gaGF2ZSBhIG5ldyBzY29wZSwgc28gd2UgbmVlZCB0byB0ZWxsIHRoZSB0ZW1wbGF0ZSBkaXJlY3RpdmVzXG4gICAgICAgICAgICAgIC8vIHRoYXQgdGhleSB3b3VsZCBuZWVkIHRvIGdldCB0aGVpciBzY29wZSBmcm9tIGZ1cnRoZXIgdXAsIGlmIHRoZXkgcmVxdWlyZSB0cmFuc2NsdXNpb25cbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZVNjb3BlKHRlbXBsYXRlRGlyZWN0aXZlcywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBuZXdTY29wZURpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5jb25jYXQodGVtcGxhdGVEaXJlY3RpdmVzKS5jb25jYXQodW5wcm9jZXNzZWREaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRlbXBsYXRlQXR0cnMsIG5ld1RlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChkaXJlY3RpdmVWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mdW5jLWFzc2lnblxuICAgICAgICAgIG5vZGVMaW5rRm4gPSBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcy5zcGxpY2UoaSwgZGlyZWN0aXZlcy5sZW5ndGggLSBpKSwgJGNvbXBpbGVOb2RlLFxuICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXM6IGNvbnRyb2xsZXJEaXJlY3RpdmVzLFxuICAgICAgICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlOiAobmV3U2NvcGVEaXJlY3RpdmUgIT09IGRpcmVjdGl2ZSkgJiYgbmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmU6IHRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsaW5rRm4gPSBkaXJlY3RpdmUuY29tcGlsZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gZGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUgfHwgZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlua0ZuKSkge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGJpbmQoY29udGV4dCwgbGlua0ZuKSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7XG4gICAgICAgICAgICAgIGFkZExpbmtGbnMoYmluZChjb250ZXh0LCBsaW5rRm4ucHJlKSwgYmluZChjb250ZXh0LCBsaW5rRm4ucG9zdCksIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGNvbXBpbGVOb2RlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkge1xuICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlO1xuICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBNYXRoLm1heCh0ZXJtaW5hbFByaW9yaXR5LCBkaXJlY3RpdmUucHJpb3JpdHkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCA9IGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmU7XG4gICAgICBub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCA9IGhhc1RlbXBsYXRlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gY2hpbGRUcmFuc2NsdWRlRm47XG5cbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTtcblxuICAgICAgLy8gbWlnaHQgYmUgbm9ybWFsIG9yIGRlbGF5ZWQgbm9kZUxpbmtGbiBkZXBlbmRpbmcgb24gaWYgdGVtcGxhdGVVcmwgaXMgcHJlc2VudFxuICAgICAgcmV0dXJuIG5vZGVMaW5rRm47XG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgICAgaWYgKHByZSkge1xuICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHByZSA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHByZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xuICAgICAgICAgIHByZS5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwcmUgPSBjbG9uZUFuZEFubm90YXRlRm4ocHJlLCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZUxpbmtGbnMucHVzaChwcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3N0KSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcG9zdCA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcG9zdC5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGksIGlpLCBsaW5rRm4sIGlzb2xhdGVTY29wZSwgY29udHJvbGxlclNjb3BlLCBlbGVtZW50Q29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbiwgJGVsZW1lbnQsXG4gICAgICAgICAgICBhdHRycywgc2NvcGVCaW5kaW5nSW5mbztcblxuICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7XG4gICAgICAgICAgYXR0cnMgPSB0ZW1wbGF0ZUF0dHJzO1xuICAgICAgICAgICRlbGVtZW50ID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQgPSBqcUxpdGUobGlua05vZGUpO1xuICAgICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoJGVsZW1lbnQsIHRlbXBsYXRlQXR0cnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGU7XG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBpc29sYXRlU2NvcGUgPSBzY29wZS4kbmV3KHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKG5ld1Njb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIC8vIHRyYWNrIGBib3VuZFRyYW5zY2x1ZGVGbmAgc28gaXQgY2FuIGJlIHVud3JhcHBlZCBpZiBgdHJhbnNjbHVkZUZuYFxuICAgICAgICAgIC8vIGlzIGxhdGVyIHBhc3NlZCBhcyBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIGBwdWJsaWNMaW5rRm5gXG4gICAgICAgICAgdHJhbnNjbHVkZUZuID0gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgICAgdHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgICAgLy8gZXhwb3NlIHRoZSBzbG90cyBvbiB0aGUgYCR0cmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgICAgIHRyYW5zY2x1ZGVGbi5pc1Nsb3RGaWxsZWQgPSBmdW5jdGlvbihzbG90TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICEhYm91bmRUcmFuc2NsdWRlRm4uJCRzbG90c1tzbG90TmFtZV07XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250cm9sbGVyRGlyZWN0aXZlcykge1xuICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVycyA9IHNldHVwQ29udHJvbGxlcnMoJGVsZW1lbnQsIGF0dHJzLCB0cmFuc2NsdWRlRm4sIGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBpc29sYXRlU2NvcGUsIHNjb3BlLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIC8vIEluaXRpYWxpemUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBmb3IgbmV3IGlzb2xhdGUgc2NvcGUgZGlyZWN0aXZlLlxuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIGlzb2xhdGVTY29wZSwgdHJ1ZSwgISh0ZW1wbGF0ZURpcmVjdGl2ZSAmJiAodGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fFxuICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSk7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyA9XG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncztcbiAgICAgICAgICBzY29wZUJpbmRpbmdJbmZvID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgaXNvbGF0ZVNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgIGlmIChzY29wZUJpbmRpbmdJbmZvLnJlbW92ZVdhdGNoZXMpIHtcbiAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kb24oJyRkZXN0cm95Jywgc2NvcGVCaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXplIGJpbmRUb0NvbnRyb2xsZXIgYmluZGluZ3NcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBlbGVtZW50Q29udHJvbGxlcnMpIHtcbiAgICAgICAgICB2YXIgY29udHJvbGxlckRpcmVjdGl2ZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzW25hbWVdO1xuICAgICAgICAgIHZhciBjb250cm9sbGVyID0gZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgIHZhciBiaW5kaW5ncyA9IGNvbnRyb2xsZXJEaXJlY3RpdmUuJCRiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyO1xuXG4gICAgICAgICAgaWYgKHByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKGJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8gPVxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhjb250cm9sbGVyU2NvcGUsIGF0dHJzLCBjb250cm9sbGVyLmluc3RhbmNlLCBiaW5kaW5ncywgY29udHJvbGxlckRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmJpbmRpbmdJbmZvID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyUmVzdWx0ID0gY29udHJvbGxlcigpO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXJSZXN1bHQgIT09IGNvbnRyb2xsZXIuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgaGFzIGEgcmV0dXJuIHZhbHVlLCBvdmVyd3JpdGUgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgIC8vIGZyb20gc2V0dXBDb250cm9sbGVyc1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmluc3RhbmNlID0gY29udHJvbGxlclJlc3VsdDtcbiAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBjb250cm9sbGVyRGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJSZXN1bHQpO1xuICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci5iaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mbyA9XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKGNvbnRyb2xsZXJTY29wZSwgYXR0cnMsIGNvbnRyb2xsZXIuaW5zdGFuY2UsIGJpbmRpbmdzLCBjb250cm9sbGVyRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgY29udHJvbGxlckRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVyLmluc3RhbmNlKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8gPVxuICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJpbmQgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIHRvIHRoZSBjb250cm9sbGVyLCBpZiBgcmVxdWlyZWAgaXMgYW4gb2JqZWN0IGFuZCBgYmluZFRvQ29udHJvbGxlcmAgaXMgdHJ1dGh5XG4gICAgICAgIGZvckVhY2goY29udHJvbGxlckRpcmVjdGl2ZXMsIGZ1bmN0aW9uKGNvbnRyb2xsZXJEaXJlY3RpdmUsIG5hbWUpIHtcbiAgICAgICAgICB2YXIgcmVxdWlyZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyICYmICFpc0FycmF5KHJlcXVpcmUpICYmIGlzT2JqZWN0KHJlcXVpcmUpKSB7XG4gICAgICAgICAgICBleHRlbmQoZWxlbWVudENvbnRyb2xsZXJzW25hbWVdLmluc3RhbmNlLCBnZXRDb250cm9sbGVycyhuYW1lLCByZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGUgdGhlIGluaXQgYW5kIGRlc3Ryb3kgbGlmZWN5Y2xlIGhvb2tzIG9uIGFsbCBjb250cm9sbGVycyB0aGF0IGhhdmUgdGhlbVxuICAgICAgICBmb3JFYWNoKGVsZW1lbnRDb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBjb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXJJbnN0YW5jZS4kb25DaGFuZ2VzKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRvbkNoYW5nZXMoY29udHJvbGxlci5iaW5kaW5nSW5mby5pbml0aWFsQ2hhbmdlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJG9uSW5pdCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZS4kb25Jbml0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2spKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyU2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyBjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2soKTsgfSk7XG4gICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udHJvbGxlckluc3RhbmNlLiRvbkRlc3Ryb3kpKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIGNhbGxPbkRlc3Ryb3lIb29rKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJG9uRGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQUkVMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgbGlua0ZuID0gcHJlTGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJFQ1VSU0lPTlxuICAgICAgICAvLyBXZSBvbmx5IHBhc3MgdGhlIGlzb2xhdGUgc2NvcGUsIGlmIHRoZSBpc29sYXRlIGRpcmVjdGl2ZSBoYXMgYSB0ZW1wbGF0ZSxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjaGlsZCBlbGVtZW50cyBkbyBub3QgYmVsb25nIHRvIHRoZSBpc29sYXRlIGRpcmVjdGl2ZS5cbiAgICAgICAgdmFyIHNjb3BlVG9DaGlsZCA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlICYmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGUgfHwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlVXJsID09PSBudWxsKSkge1xuICAgICAgICAgIHNjb3BlVG9DaGlsZCA9IGlzb2xhdGVTY29wZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICBjaGlsZExpbmtGbihzY29wZVRvQ2hpbGQsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUE9TVExJTktJTkdcbiAgICAgICAgZm9yIChpID0gcG9zdExpbmtGbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyaWdnZXIgJHBvc3RMaW5rIGxpZmVjeWNsZSBob29rc1xuICAgICAgICBmb3JFYWNoKGVsZW1lbnRDb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBjb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXJJbnN0YW5jZS4kcG9zdExpbmspKSB7XG4gICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJHBvc3RMaW5rKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuXG4gICAgICAgIC8vIE5vdGU6IGFsbCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsIVxuICAgICAgICBmdW5jdGlvbiBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZShzY29wZSwgY2xvbmVBdHRhY2hGbiwgZnV0dXJlUGFyZW50RWxlbWVudCwgc2xvdE5hbWUpIHtcbiAgICAgICAgICB2YXIgdHJhbnNjbHVkZUNvbnRyb2xsZXJzO1xuICAgICAgICAgIC8vIE5vIHNjb3BlIHBhc3NlZCBpbjpcbiAgICAgICAgICBpZiAoIWlzU2NvcGUoc2NvcGUpKSB7XG4gICAgICAgICAgICBzbG90TmFtZSA9IGZ1dHVyZVBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gY2xvbmVBdHRhY2hGbjtcbiAgICAgICAgICAgIGNsb25lQXR0YWNoRm4gPSBzY29wZTtcbiAgICAgICAgICAgIHNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA/ICRlbGVtZW50LnBhcmVudCgpIDogJGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzbG90TmFtZSkge1xuICAgICAgICAgICAgLy8gc2xvdFRyYW5zY2x1ZGVGbiBjYW4gYmUgb25lIG9mIHRocmVlIHRoaW5nczpcbiAgICAgICAgICAgIC8vICAqIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiAtIGEgZmlsbGVkIHNsb3RcbiAgICAgICAgICAgIC8vICAqIGBudWxsYCAtIGFuIG9wdGlvbmFsIHNsb3QgdGhhdCB3YXMgbm90IGZpbGxlZFxuICAgICAgICAgICAgLy8gICogYHVuZGVmaW5lZGAgLSBhIHNsb3QgdGhhdCB3YXMgbm90IGRlY2xhcmVkIChpLmUuIGludmFsaWQpXG4gICAgICAgICAgICB2YXIgc2xvdFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdO1xuICAgICAgICAgICAgaWYgKHNsb3RUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNsb3RUcmFuc2NsdWRlRm4oc2NvcGUsIGNsb25lQXR0YWNoRm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgc2NvcGVUb0NoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQoc2xvdFRyYW5zY2x1ZGVGbikpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vc2xvdCcsXG4gICAgICAgICAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIHdpdGggc2xvdCBuYW1lIFwiezB9XCIuICcgK1xuICAgICAgICAgICAgICAgJ0VsZW1lbnQ6IHsxfScsXG4gICAgICAgICAgICAgICBzbG90TmFtZSwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNjb3BlVG9DaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBpZiAoaXNTdHJpbmcocmVxdWlyZSkpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmVxdWlyZS5tYXRjaChSRVFVSVJFX1BSRUZJWF9SRUdFWFApO1xuICAgICAgICB2YXIgbmFtZSA9IHJlcXVpcmUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIHZhciBpbmhlcml0VHlwZSA9IG1hdGNoWzFdIHx8IG1hdGNoWzNdO1xuICAgICAgICB2YXIgb3B0aW9uYWwgPSBtYXRjaFsyXSA9PT0gJz8nO1xuXG4gICAgICAgIC8vSWYgb25seSBwYXJlbnRzIHRoZW4gc3RhcnQgYXQgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAgIGlmIChpbmhlcml0VHlwZSA9PT0gJ15eJykge1xuICAgICAgICAgICRlbGVtZW50ID0gJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgIC8vT3RoZXJ3aXNlIGF0dGVtcHQgZ2V0dGluZyB0aGUgY29udHJvbGxlciBmcm9tIGVsZW1lbnRDb250cm9sbGVycyBpbiBjYXNlXG4gICAgICAgIC8vdGhlIGVsZW1lbnQgaXMgdHJhbnNjbHVkZWQgKGFuZCBoYXMgbm8gZGF0YSkgYW5kIHRvIGF2b2lkIC5kYXRhIGlmIHBvc3NpYmxlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBlbGVtZW50Q29udHJvbGxlcnMgJiYgZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWUuaW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgdmFyIGRhdGFOYW1lID0gJyQnICsgbmFtZSArICdDb250cm9sbGVyJztcbiAgICAgICAgICB2YWx1ZSA9IGluaGVyaXRUeXBlID8gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YShkYXRhTmFtZSkgOiAkZWxlbWVudC5kYXRhKGRhdGFOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsdWUgJiYgIW9wdGlvbmFsKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJyxcbiAgICAgICAgICAgICAgJ0NvbnRyb2xsZXIgXFwnezB9XFwnLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgXFwnezF9XFwnLCBjYW5cXCd0IGJlIGZvdW5kIScsXG4gICAgICAgICAgICAgIG5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVxdWlyZSkpIHtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVxdWlyZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFsdWVbaV0gPSBnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlW2ldLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChyZXF1aXJlKSkge1xuICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICBmb3JFYWNoKHJlcXVpcmUsIGZ1bmN0aW9uKGNvbnRyb2xsZXIsIHByb3BlcnR5KSB7XG4gICAgICAgICAgdmFsdWVbcHJvcGVydHldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgY29udHJvbGxlciwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICB2YXIgZWxlbWVudENvbnRyb2xsZXJzID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3IgKHZhciBjb250cm9sbGVyS2V5IGluIGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tjb250cm9sbGVyS2V5XTtcbiAgICAgICAgdmFyIGxvY2FscyA9IHtcbiAgICAgICAgICAkc2NvcGU6IGRpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICAgICAgICAkYXR0cnM6IGF0dHJzLFxuICAgICAgICAgICR0cmFuc2NsdWRlOiB0cmFuc2NsdWRlRm5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29udHJvbGxlciA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICBpZiAoY29udHJvbGxlciA9PT0gJ0AnKSB7XG4gICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMsIHRydWUsIGRpcmVjdGl2ZS5jb250cm9sbGVyQXMpO1xuXG4gICAgICAgIC8vIEZvciBkaXJlY3RpdmVzIHdpdGggZWxlbWVudCB0cmFuc2NsdXNpb24gdGhlIGVsZW1lbnQgaXMgYSBjb21tZW50LlxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UgLmRhdGEgd2lsbCBub3QgYXR0YWNoIGFueSBkYXRhLlxuICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBzYXZlIHRoZSBjb250cm9sbGVycyBmb3IgdGhlIGVsZW1lbnQgaW4gYSBsb2NhbCBoYXNoIGFuZCBhdHRhY2ggdG8gLmRhdGFcbiAgICAgICAgLy8gbGF0ZXIsIG9uY2Ugd2UgaGF2ZSB0aGUgYWN0dWFsIGVsZW1lbnQuXG4gICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJJbnN0YW5jZS5pbnN0YW5jZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgIH1cblxuICAgIC8vIERlcGVuZGluZyB1cG9uIHRoZSBjb250ZXh0IGluIHdoaWNoIGEgZGlyZWN0aXZlIGZpbmRzIGl0c2VsZiBpdCBtaWdodCBuZWVkIHRvIGhhdmUgYSBuZXcgaXNvbGF0ZWRcbiAgICAvLyBvciBjaGlsZCBzY29wZSBjcmVhdGVkLiBGb3IgaW5zdGFuY2U6XG4gICAgLy8gKiBpZiB0aGUgZGlyZWN0aXZlIGhhcyBiZWVuIHB1bGxlZCBpbnRvIGEgdGVtcGxhdGUgYmVjYXVzZSBhbm90aGVyIGRpcmVjdGl2ZSB3aXRoIGEgaGlnaGVyIHByaW9yaXR5XG4gICAgLy8gYXNrZWQgZm9yIGVsZW1lbnQgdHJhbnNjbHVzaW9uXG4gICAgLy8gKiBpZiB0aGUgZGlyZWN0aXZlIGl0c2VsZiBhc2tzIGZvciB0cmFuc2NsdXNpb24gYnV0IGl0IGlzIGF0IHRoZSByb290IG9mIGEgdGVtcGxhdGUgYW5kIHRoZSBvcmlnaW5hbFxuICAgIC8vIGVsZW1lbnQgd2FzIHJlcGxhY2VkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTI5MzZcbiAgICBmdW5jdGlvbiBtYXJrRGlyZWN0aXZlU2NvcGUoZGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBuZXdTY29wZSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gZGlyZWN0aXZlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIGRpcmVjdGl2ZXNbal0gPSBpbmhlcml0KGRpcmVjdGl2ZXNbal0sIHskJGlzb2xhdGVTY29wZTogaXNvbGF0ZVNjb3BlLCAkJG5ld1Njb3BlOiBuZXdTY29wZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlXG4gICAgICogY2FsbCB0aGlzIHRoZSBib3VuZERpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBUaGUgZGlyZWN0aXZlIG11c3QgYmUgZm91bmQgaW4gc3BlY2lmaWMgZm9ybWF0LlxuICAgICAqICAgU3RyaW5nIGNvbnRhaW5pbmcgYW55IG9mIHRoZXNlcyBjaGFyYWN0ZXJzOlxuICAgICAqXG4gICAgICogICAqIGBFYDogZWxlbWVudCBuYW1lXG4gICAgICogICAqIGBBJzogYXR0cmlidXRlXG4gICAgICogICAqIGBDYDogY2xhc3NcbiAgICAgKiAgICogYE1gOiBjb21tZW50XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGREaXJlY3RpdmUodERpcmVjdGl2ZXMsIG5hbWUsIGxvY2F0aW9uLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBzdGFydEF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRBdHRyTmFtZSkge1xuICAgICAgaWYgKG5hbWUgPT09IGlnbm9yZURpcmVjdGl2ZSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgbWF0Y2ggPSBudWxsO1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKChpc1VuZGVmaW5lZChtYXhQcmlvcml0eSkgfHwgbWF4UHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpICYmXG4gICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRBdHRyTmFtZSkge1xuICAgICAgICAgICAgICBkaXJlY3RpdmUgPSBpbmhlcml0KGRpcmVjdGl2ZSwgeyQkc3RhcnQ6IHN0YXJ0QXR0ck5hbWUsICQkZW5kOiBlbmRBdHRyTmFtZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUuJCRiaW5kaW5ncykge1xuICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBkaXJlY3RpdmUuJCRiaW5kaW5ncyA9XG4gICAgICAgICAgICAgICAgICBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICBpZiAoaXNPYmplY3QoYmluZGluZ3MuaXNvbGF0ZVNjb3BlKSkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IGJpbmRpbmdzLmlzb2xhdGVTY29wZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdERpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgbWF0Y2ggPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgaXMgYSBtdWx0aS1lbGVtZW50IGRpcmVjdGl2ZSxcbiAgICAgKiBhbmQgdGhlcmVmb3JlIHJlcXVpcmVzIERPTSBub2RlcyBiZXR3ZWVuIC1zdGFydCBhbmQgLWVuZCBtYXJrZXJzIHRvIGJlIGdyb3VwZWRcbiAgICAgKiB0b2dldGhlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyByZWdpc3RlcmVkIGFzIG11bHRpLWVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQobmFtZSkge1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5tdWx0aUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzXG4gICAgICogb24gdGhlIHRlbXBsYXRlIG5lZWQgdG8gYmUgbWVyZ2VkIHdpdGggdGhlIGV4aXN0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlIERPTS5cbiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZHN0IGRlc3RpbmF0aW9uIGF0dHJpYnV0ZXMgKG9yaWdpbmFsIERPTSlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMoZHN0LCBzcmMpIHtcbiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLFxuICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHI7XG5cbiAgICAgIC8vIHJlYXBwbHkgdGhlIG9sZCBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgZWxlbWVudFxuICAgICAgZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgIGlmIChzcmNba2V5XSAmJiBzcmNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFsdWUgKz0gKGtleSA9PT0gJ3N0eWxlJyA/ICc7JyA6ICcgJykgKyBzcmNba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gc3JjW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRzdC4kc2V0KGtleSwgdmFsdWUsIHRydWUsIHNyY0F0dHJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBjb3B5IHRoZSBuZXcgYXR0cmlidXRlcyBvbiB0aGUgb2xkIGF0dHJzIG9iamVjdFxuICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBzZXQgdGhpcyBhdHRyaWJ1dGUgaW4gdGhlIGxvb3AgYWJvdmUuXG4gICAgICAgIC8vIGBkc3RgIHdpbGwgbmV2ZXIgY29udGFpbiBoYXNPd25Qcm9wZXJ0eSBhcyBET00gcGFyc2VyIHdvbid0IGxldCBpdC5cbiAgICAgICAgLy8gWW91IHdpbGwgZ2V0IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yOiBET00gRXhjZXB0aW9uIDVcIiBlcnJvciBpZiB5b3VcbiAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSBcImhhcy1vd24tcHJvcGVydHlcIiBvciBcImRhdGEtaGFzLW93bi1wcm9wZXJ0eVwiLCBldGMuXG4gICAgICAgIGlmICghZHN0Lmhhc093blByb3BlcnR5KGtleSkgJiYga2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChrZXkgIT09ICdjbGFzcycgJiYga2V5ICE9PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLCAkY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgJHJvb3RFbGVtZW50LCBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rUXVldWUgPSBbXSxcbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbixcbiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sXG4gICAgICAgICAgYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXSxcbiAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUgPSBkaXJlY3RpdmVzLnNoaWZ0KCksXG4gICAgICAgICAgZGVyaXZlZFN5bmNEaXJlY3RpdmUgPSBpbmhlcml0KG9yaWdBc3luY0RpcmVjdGl2ZSwge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IG51bGwsIHRyYW5zY2x1ZGU6IG51bGwsIHJlcGxhY2U6IG51bGwsICQkb3JpZ2luYWxEaXJlY3RpdmU6IG9yaWdBc3luY0RpcmVjdGl2ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRlbXBsYXRlVXJsID0gKGlzRnVuY3Rpb24ob3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKSlcbiAgICAgICAgICAgICAgPyBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwoJGNvbXBpbGVOb2RlLCB0QXR0cnMpXG4gICAgICAgICAgICAgIDogb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsLFxuICAgICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlID0gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlO1xuXG4gICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTtcblxuICAgICAgJHRlbXBsYXRlUmVxdWVzdCh0ZW1wbGF0ZVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICAgIHZhciBjb21waWxlTm9kZSwgdGVtcFRlbXBsYXRlQXR0cnMsICR0ZW1wbGF0ZSwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgICAgIGNvbnRlbnQgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGNvbnRlbnQpO1xuXG4gICAgICAgICAgaWYgKG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICBpZiAoanFMaXRlSXNUZXh0Tm9kZShjb250ZW50KSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IHJlbW92ZUNvbW1lbnRzKHdyYXBUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShjb250ZW50KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07XG5cbiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9PSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLFxuICAgICAgICAgICAgICAgICAgJ1RlbXBsYXRlIGZvciBkaXJlY3RpdmUgXFwnezB9XFwnIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfScsXG4gICAgICAgICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUubmFtZSwgdGVtcGxhdGVVcmwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZW1wVGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuICAgICAgICAgICAgcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgW10sIHRlbXBUZW1wbGF0ZUF0dHJzKTtcblxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9yaWdBc3luY0RpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIGRpcmVjdGl2ZSB0aGF0IGNhdXNlZCB0aGUgdGVtcGxhdGUgdG8gYmUgbG9hZGVkIGFzeW5jIHJlcXVpcmVkXG4gICAgICAgICAgICAgIC8vIGFuIGlzb2xhdGUgc2NvcGVcbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZVNjb3BlKHRlbXBsYXRlRGlyZWN0aXZlcywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gdGVtcGxhdGVEaXJlY3RpdmVzLmNvbmNhdChkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRBdHRycywgdGVtcFRlbXBsYXRlQXR0cnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChjb250ZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXJlY3RpdmVzLnVuc2hpZnQoZGVyaXZlZFN5bmNEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4gPSBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4sICRjb21waWxlTm9kZSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICAgICAgZm9yRWFjaCgkcm9vdEVsZW1lbnQsIGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgIGlmIChub2RlID09PSBjb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB3aGlsZSAobGlua1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNjb3BlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtSb290RWxlbWVudCA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJvdW5kVHJhbnNjbHVkZUZuID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07XG5cbiAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYmVmb3JlVGVtcGxhdGVMaW5rTm9kZS5jbGFzc05hbWU7XG5cbiAgICAgICAgICAgICAgaWYgKCEocHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gaXQgd2FzIGNsb25lZCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBjbG9uZSBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0ganFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7XG5cbiAgICAgICAgICAgICAgLy8gQ29weSBpbiBDU1MgY2xhc3NlcyBmcm9tIG9yaWdpbmFsIG5vZGVcbiAgICAgICAgICAgICAgc2FmZUFkZENsYXNzKGpxTGl0ZShsaW5rTm9kZSksIG9sZENsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmtRdWV1ZSA9IG51bGw7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZGVsYXllZE5vZGVMaW5rRm4oaWdub3JlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGlmIChsaW5rUXVldWUpIHtcbiAgICAgICAgICBsaW5rUXVldWUucHVzaChzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlLCBib3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNvcnRpbmcgZnVuY3Rpb24gZm9yIGJvdW5kIGRpcmVjdGl2ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYnlQcmlvcml0eShhLCBiKSB7XG4gICAgICB2YXIgZGlmZiA9IGIucHJpb3JpdHkgLSBhLnByaW9yaXR5O1xuICAgICAgaWYgKGRpZmYgIT09IDApIHJldHVybiBkaWZmO1xuICAgICAgaWYgKGEubmFtZSAhPT0gYi5uYW1lKSByZXR1cm4gKGEubmFtZSA8IGIubmFtZSkgPyAtMSA6IDE7XG4gICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXNzZXJ0Tm9EdXBsaWNhdGUod2hhdCwgcHJldmlvdXNEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgZWxlbWVudCkge1xuXG4gICAgICBmdW5jdGlvbiB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChtb2R1bGVOYW1lKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGVOYW1lID9cbiAgICAgICAgICAoJyAobW9kdWxlOiAnICsgbW9kdWxlTmFtZSArICcpJykgOlxuICAgICAgICAgICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldmlvdXNEaXJlY3RpdmUpIHtcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ211bHRpZGlyJywgJ011bHRpcGxlIGRpcmVjdGl2ZXMgW3swfXsxfSwgezJ9ezN9XSBhc2tpbmcgZm9yIHs0fSBvbjogezV9JyxcbiAgICAgICAgICAgIHByZXZpb3VzRGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKHByZXZpb3VzRGlyZWN0aXZlLiQkbW9kdWxlTmFtZSksXG4gICAgICAgICAgICBkaXJlY3RpdmUubmFtZSwgd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQoZGlyZWN0aXZlLiQkbW9kdWxlTmFtZSksIHdoYXQsIHN0YXJ0aW5nVGFnKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCB0ZXh0KSB7XG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh0ZXh0LCB0cnVlKTtcbiAgICAgIGlmIChpbnRlcnBvbGF0ZUZuKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMucHVzaCh7XG4gICAgICAgICAgcHJpb3JpdHk6IDAsXG4gICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gdGV4dEludGVycG9sYXRlQ29tcGlsZUZuKHRlbXBsYXRlTm9kZSkge1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlTm9kZVBhcmVudCA9IHRlbXBsYXRlTm9kZS5wYXJlbnQoKSxcbiAgICAgICAgICAgICAgICBoYXNDb21waWxlUGFyZW50ID0gISF0ZW1wbGF0ZU5vZGVQYXJlbnQubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyBXaGVuIHRyYW5zY2x1ZGluZyBhIHRlbXBsYXRlIHRoYXQgaGFzIGJpbmRpbmdzIGluIHRoZSByb290XG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBoYXZlIGEgcGFyZW50IGFuZCB0aHVzIG5lZWQgdG8gYWRkIHRoZSBjbGFzcyBkdXJpbmcgbGlua2luZyBmbi5cbiAgICAgICAgICAgIGlmIChoYXNDb21waWxlUGFyZW50KSBjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlTm9kZVBhcmVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0ZXh0SW50ZXJwb2xhdGVMaW5rRm4oc2NvcGUsIG5vZGUpIHtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KCk7XG4gICAgICAgICAgICAgIGlmICghaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyhwYXJlbnQpO1xuICAgICAgICAgICAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8ocGFyZW50LCBpbnRlcnBvbGF0ZUZuLmV4cHJlc3Npb25zKTtcbiAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIG5vZGVbMF0ubm9kZVZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gd3JhcFRlbXBsYXRlKHR5cGUsIHRlbXBsYXRlKSB7XG4gICAgICB0eXBlID0gbG93ZXJjYXNlKHR5cGUgfHwgJ2h0bWwnKTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnc3ZnJzpcbiAgICAgIGNhc2UgJ21hdGgnOlxuICAgICAgICB2YXIgd3JhcHBlciA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPCcgKyB0eXBlICsgJz4nICsgdGVtcGxhdGUgKyAnPC8nICsgdHlwZSArICc+JztcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgYXR0ck5vcm1hbGl6ZWROYW1lKSB7XG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnc3JjZG9jJykge1xuICAgICAgICByZXR1cm4gJHNjZS5IVE1MO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IG5vZGVOYW1lXyhub2RlKTtcbiAgICAgIC8vIEFsbCB0YWdzIHdpdGggc3JjIGF0dHJpYnV0ZXMgcmVxdWlyZSBhIFJFU09VUkNFX1VSTCB2YWx1ZSwgZXhjZXB0IGZvclxuICAgICAgLy8gaW1nIGFuZCB2YXJpb3VzIGh0bWw1IG1lZGlhIHRhZ3MuXG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnc3JjJyB8fCBhdHRyTm9ybWFsaXplZE5hbWUgPT09ICduZ1NyYycpIHtcbiAgICAgICAgaWYgKFsnaW1nJywgJ3ZpZGVvJywgJ2F1ZGlvJywgJ3NvdXJjZScsICd0cmFjayddLmluZGV4T2YodGFnKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gJHNjZS5SRVNPVVJDRV9VUkw7XG4gICAgICAgIH1cbiAgICAgIC8vIG1hY3Rpb25beGxpbms6aHJlZl0gY2FuIHNvdXJjZSBTVkcuICBJdCdzIG5vdCBsaW1pdGVkIHRvIDxtYWN0aW9uPi5cbiAgICAgIH0gZWxzZSBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09PSAneGxpbmtIcmVmJyB8fFxuICAgICAgICAgICh0YWcgPT09ICdmb3JtJyAmJiBhdHRyTm9ybWFsaXplZE5hbWUgPT09ICdhY3Rpb24nKSB8fFxuICAgICAgICAgIC8vIGxpbmtzIGNhbiBiZSBzdHlsZXNoZWV0cyBvciBpbXBvcnRzLCB3aGljaCBjYW4gcnVuIHNjcmlwdCBpbiB0aGUgY3VycmVudCBvcmlnaW5cbiAgICAgICAgICAodGFnID09PSAnbGluaycgJiYgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnaHJlZicpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lLCBpc05nQXR0cikge1xuICAgICAgdmFyIHRydXN0ZWRDb250ZXh0ID0gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgbmFtZSk7XG4gICAgICB2YXIgbXVzdEhhdmVFeHByZXNzaW9uID0gIWlzTmdBdHRyO1xuICAgICAgdmFyIGFsbE9yTm90aGluZyA9IEFMTF9PUl9OT1RISU5HX0FUVFJTW25hbWVdIHx8IGlzTmdBdHRyO1xuXG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKTtcblxuICAgICAgLy8gbm8gaW50ZXJwb2xhdGlvbiBmb3VuZCAtPiBpZ25vcmVcbiAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgcmV0dXJuO1xuXG4gICAgICBpZiAobmFtZSA9PT0gJ211bHRpcGxlJyAmJiBub2RlTmFtZV8obm9kZSkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdzZWxtdWx0aScsXG4gICAgICAgICAgICAnQmluZGluZyB0byB0aGUgXFwnbXVsdGlwbGVcXCcgYXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQuIEVsZW1lbnQ6IHswfScsXG4gICAgICAgICAgICBzdGFydGluZ1RhZyhub2RlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJyxcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9ucyBmb3IgSFRNTCBET00gZXZlbnQgYXR0cmlidXRlcyBhcmUgZGlzYWxsb3dlZC4gIFBsZWFzZSB1c2UgdGhlICcgK1xuICAgICAgICAgICAgICAgICduZy0gdmVyc2lvbnMgKHN1Y2ggYXMgbmctY2xpY2sgaW5zdGVhZCBvZiBvbmNsaWNrKSBpbnN0ZWFkLicpO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHByZTogZnVuY3Rpb24gYXR0ckludGVycG9sYXRlUHJlTGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSBjcmVhdGVNYXAoKSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0ICRpbnRlcnBvbGF0ZSgpZWRcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBhdHRyW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gaW50ZXJwb2xhdGUgYWdhaW4gc2luY2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICAgICAgICAgICAgICAvLyAoZS5nLiBieSBhbm90aGVyIGRpcmVjdGl2ZSdzIGNvbXBpbGUgZnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgdW5zZXQvZW1wdHkgdmFsdWVzIG1ha2UgaW50ZXJwb2xhdGVGbiBmYWxzeVxuICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVGbiA9IG5ld1ZhbHVlICYmICRpbnRlcnBvbGF0ZShuZXdWYWx1ZSwgdHJ1ZSwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGlmIGF0dHJpYnV0ZSB3YXMgdXBkYXRlZCBzbyB0aGF0IHRoZXJlIGlzIG5vIGludGVycG9sYXRpb24gZ29pbmcgb24gd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyIGFueSBvYnNlcnZlcnNcbiAgICAgICAgICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgYXR0ciBvYmplY3Qgc28gdGhhdCBpdCdzIHJlYWR5IGluIGNhc2Ugd2UgbmVlZCB0aGUgdmFsdWUgZm9yIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBzY29wZSBpbml0aWFsaXphdGlvbiwgb3RoZXJ3aXNlIHRoZSB2YWx1ZSB3b3VsZCBub3QgYmUgYXZhaWxhYmxlIGZyb20gaXNvbGF0ZVxuICAgICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZSdzIGxpbmtpbmcgZm4gZHVyaW5nIGxpbmtpbmcgcGhhc2VcbiAgICAgICAgICAgICAgICBhdHRyW25hbWVdID0gaW50ZXJwb2xhdGVGbihzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAoJCRvYnNlcnZlcnNbbmFtZV0gfHwgKCQkb2JzZXJ2ZXJzW25hbWVdID0gW10pKS4kJGludGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAoYXR0ci4kJG9ic2VydmVycyAmJiBhdHRyLiQkb2JzZXJ2ZXJzW25hbWVdLiQkc2NvcGUgfHwgc2NvcGUpLlxuICAgICAgICAgICAgICAgICAgJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIGNsYXNzIGF0dHJpYnV0ZSBhZGRpdGlvbiArIHJlbW92YWxcbiAgICAgICAgICAgICAgICAgICAgLy9zbyB0aGF0IGNsYXNzIGNoYW5nZXMgY2FuIHRhcCBpbnRvIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy9ob29rcyBwcm92aWRlZCBieSB0aGUgJGFuaW1hdGUgc2VydmljZS4gQmUgc3VyZSB0b1xuICAgICAgICAgICAgICAgICAgICAvL3NraXAgYW5pbWF0aW9ucyB3aGVuIHRoZSBmaXJzdCBkaWdlc3Qgb2NjdXJzICh3aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vYm90aCB0aGUgbmV3IGFuZCB0aGUgb2xkIHZhbHVlcyBhcmUgdGhlIHNhbWUpIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIENTUyBjbGFzc2VzIGFyZSB0aGUgbm9uLWludGVycG9sYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjbGFzcycgJiYgbmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kdXBkYXRlQ2xhc3MobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2hcbiAgICAgKiBoYXZlIG5vIHBhcmVudHMsIHByb3ZpZGVkIHRoYXQgdGhlIGNvbnRhaW5pbmcganFMaXRlIGNvbGxlY3Rpb24gaXMgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcm9vdCBvZiB0aGUgdHJlZS5cbiAgICAgKiBAcGFyYW0ge0pxTGl0ZX0gZWxlbWVudHNUb1JlbW92ZSBUaGUganFMaXRlIGVsZW1lbnQgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UuIFdlIGtlZXBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hlbGwsIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtOb2RlfSBuZXdOb2RlIFRoZSBuZXcgRE9NIG5vZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7XG4gICAgICB2YXIgZmlyc3RFbGVtZW50VG9SZW1vdmUgPSBlbGVtZW50c1RvUmVtb3ZlWzBdLFxuICAgICAgICAgIHJlbW92ZUNvdW50ID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGgsXG4gICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSxcbiAgICAgICAgICBpLCBpaTtcblxuICAgICAgaWYgKCRyb290RWxlbWVudCkge1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9ICRyb290RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICRyb290RWxlbWVudFtpKytdID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBpLCBqMiA9IGogKyByZW1vdmVDb3VudCAtIDEsXG4gICAgICAgICAgICAgICAgICAgICBqaiA9ICRyb290RWxlbWVudC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgIGogPCBqajsgaisrLCBqMisrKSB7XG4gICAgICAgICAgICAgIGlmIChqMiA8IGpqKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RFbGVtZW50W2pdID0gJHJvb3RFbGVtZW50W2oyXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgJHJvb3RFbGVtZW50W2pdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkcm9vdEVsZW1lbnQubGVuZ3RoIC09IHJlbW92ZUNvdW50IC0gMTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIHJlcGxhY2VkIGVsZW1lbnQgaXMgYWxzbyB0aGUgalF1ZXJ5IC5jb250ZXh0IHRoZW4gcmVwbGFjZSBpdFxuICAgICAgICAgICAgLy8gLmNvbnRleHQgaXMgYSBkZXByZWNhdGVkIGpRdWVyeSBhcGksIHNvIHdlIHNob3VsZCBzZXQgaXQgb25seSB3aGVuIGpRdWVyeSBzZXQgaXRcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jb250ZXh0L1xuICAgICAgICAgICAgaWYgKCRyb290RWxlbWVudC5jb250ZXh0ID09PSBmaXJzdEVsZW1lbnRUb1JlbW92ZSkge1xuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnQuY29udGV4dCA9IG5ld05vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5ld05vZGUsIGZpcnN0RWxlbWVudFRvUmVtb3ZlKTtcbiAgICAgIH1cblxuICAgICAgLy8gQXBwZW5kIGFsbCB0aGUgYGVsZW1lbnRzVG9SZW1vdmVgIHRvIGEgZnJhZ21lbnQuIFRoaXMgd2lsbC4uLlxuICAgICAgLy8gLSByZW1vdmUgdGhlbSBmcm9tIHRoZSBET01cbiAgICAgIC8vIC0gYWxsb3cgdGhlbSB0byBzdGlsbCBiZSB0cmF2ZXJzZWQgd2l0aCAubmV4dFNpYmxpbmdcbiAgICAgIC8vIC0gYWxsb3cgYSBzaW5nbGUgZnJhZ21lbnQucVNBIHRvIGZldGNoIGFsbCBlbGVtZW50cyBiZWluZyByZW1vdmVkXG4gICAgICB2YXIgZnJhZ21lbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHJlbW92ZUNvdW50OyBpKyspIHtcbiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudHNUb1JlbW92ZVtpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChqcUxpdGUuaGFzRGF0YShmaXJzdEVsZW1lbnRUb1JlbW92ZSkpIHtcbiAgICAgICAgLy8gQ29weSBvdmVyIHVzZXIgZGF0YSAodGhhdCBpbmNsdWRlcyBBbmd1bGFyJ3MgJHNjb3BlIGV0Yy4pLiBEb24ndCBjb3B5IHByaXZhdGVcbiAgICAgICAgLy8gZGF0YSBoZXJlIGJlY2F1c2UgdGhlcmUncyBubyBwdWJsaWMgaW50ZXJmYWNlIGluIGpRdWVyeSB0byBkbyB0aGF0IGFuZCBjb3B5aW5nIG92ZXJcbiAgICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzICh3aGljaCBpcyB0aGUgbWFpbiB1c2Ugb2YgcHJpdmF0ZSBkYXRhKSB3b3VsZG4ndCB3b3JrIGFueXdheS5cbiAgICAgICAganFMaXRlLmRhdGEobmV3Tm9kZSwganFMaXRlLmRhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKTtcblxuICAgICAgICAvLyBSZW1vdmUgJGRlc3Ryb3kgZXZlbnQgbGlzdGVuZXJzIGZyb20gYGZpcnN0RWxlbWVudFRvUmVtb3ZlYFxuICAgICAgICBqcUxpdGUoZmlyc3RFbGVtZW50VG9SZW1vdmUpLm9mZignJGRlc3Ryb3knKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBhbnkgZGF0YS9saXN0ZW5lcnMgb24gdGhlIGVsZW1lbnRzIGFuZCBjaGlsZHJlbi5cbiAgICAgIC8vIFRoaXMgaW5jbHVkZXMgaW52b2tpbmcgdGhlICRkZXN0cm95IGV2ZW50IG9uIGFueSBlbGVtZW50cyB3aXRoIGxpc3RlbmVycy5cbiAgICAgIGpxTGl0ZS5jbGVhbkRhdGEoZnJhZ21lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBqcUxpdGUgY29sbGVjdGlvbiB0byBvbmx5IGNvbnRhaW4gdGhlIGBuZXdOb2RlYFxuICAgICAgZm9yIChpID0gMTsgaSA8IHJlbW92ZUNvdW50OyBpKyspIHtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnRzVG9SZW1vdmVbaV07XG4gICAgICB9XG4gICAgICBlbGVtZW50c1RvUmVtb3ZlWzBdID0gbmV3Tm9kZTtcbiAgICAgIGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoID0gMTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNsb25lQW5kQW5ub3RhdGVGbihmbiwgYW5ub3RhdGlvbikge1xuICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbigpIHsgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH0sIGZuLCBhbm5vdGF0aW9uKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGludm9rZUxpbmtGbihsaW5rRm4sIHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpbmtGbihzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIFNldCB1cCAkd2F0Y2hlcyBmb3IgaXNvbGF0ZSBzY29wZSBhbmQgY29udHJvbGxlciBiaW5kaW5ncy5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBkZXN0aW5hdGlvbiwgYmluZGluZ3MsIGRpcmVjdGl2ZSkge1xuICAgICAgdmFyIHJlbW92ZVdhdGNoQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgdmFyIGluaXRpYWxDaGFuZ2VzID0ge307XG4gICAgICB2YXIgY2hhbmdlcztcbiAgICAgIGZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uIGluaXRpYWxpemVCaW5kaW5nKGRlZmluaXRpb24sIHNjb3BlTmFtZSkge1xuICAgICAgICB2YXIgYXR0ck5hbWUgPSBkZWZpbml0aW9uLmF0dHJOYW1lLFxuICAgICAgICBvcHRpb25hbCA9IGRlZmluaXRpb24ub3B0aW9uYWwsXG4gICAgICAgIG1vZGUgPSBkZWZpbml0aW9uLm1vZGUsIC8vIEAsID0sIDwsIG9yICZcbiAgICAgICAgbGFzdFZhbHVlLFxuICAgICAgICBwYXJlbnRHZXQsIHBhcmVudFNldCwgY29tcGFyZSwgcmVtb3ZlV2F0Y2g7XG5cbiAgICAgICAgc3dpdGNoIChtb2RlKSB7XG5cbiAgICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgICAgIGlmICghb3B0aW9uYWwgJiYgIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gYXR0cnNbYXR0ck5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBhdHRycy4kb2JzZXJ2ZShhdHRyTmFtZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCBpc0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXTtcbiAgICAgICAgICAgICAgICByZWNvcmRDaGFuZ2VzKHNjb3BlTmFtZSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBpcyB0aGVyZSBmb3IgdXNlIGluIHRoZSBsaW5rIGZuXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUobGFzdFZhbHVlKShzY29wZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQm9vbGVhbihsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGVzIGlzIG9uZSBvZiB0aGUgQk9PTEVBTl9BVFRSIHRoZW4gQW5ndWxhciB3aWxsIGhhdmUgY29udmVydGVkXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSB0byBib29sZWFuIHJhdGhlciB0aGFuIGEgc3RyaW5nLCBzbyB3ZSBzcGVjaWFsIGNhc2UgdGhpcyBzaXR1YXRpb25cbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzW3Njb3BlTmFtZV0gPSBuZXcgU2ltcGxlQ2hhbmdlKF9VTklOSVRJQUxJWkVEX1ZBTFVFLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnPSc6XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIGJyZWFrO1xuICAgICAgICAgICAgICBhdHRyc1thdHRyTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9uYWwgJiYgIWF0dHJzW2F0dHJOYW1lXSkgYnJlYWs7XG5cbiAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgICAgaWYgKHBhcmVudEdldC5saXRlcmFsKSB7XG4gICAgICAgICAgICAgIGNvbXBhcmUgPSBlcXVhbHM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb21wYXJlID0gc2ltcGxlQ29tcGFyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudFNldCA9IHBhcmVudEdldC5hc3NpZ24gfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBjaGFuZ2UsIG9yIHdlIHdpbGwgdGhyb3cgdGhpcyBleGNlcHRpb24gb24gZXZlcnkgJGRpZ2VzdFxuICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vbmFzc2lnbicsXG4gICAgICAgICAgICAgICAgICAnRXhwcmVzc2lvbiBcXCd7MH1cXCcgaW4gYXR0cmlidXRlIFxcJ3sxfVxcJyB1c2VkIHdpdGggZGlyZWN0aXZlIFxcJ3syfVxcJyBpcyBub24tYXNzaWduYWJsZSEnLFxuICAgICAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdLCBhdHRyTmFtZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgdmFyIHBhcmVudFZhbHVlV2F0Y2ggPSBmdW5jdGlvbiBwYXJlbnRWYWx1ZVdhdGNoKHBhcmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICghY29tcGFyZShwYXJlbnRWYWx1ZSwgZGVzdGluYXRpb25bc2NvcGVOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgb3V0IG9mIHN5bmMgYW5kIG5lZWQgdG8gY29weVxuICAgICAgICAgICAgICAgIGlmICghY29tcGFyZShwYXJlbnRWYWx1ZSwgbGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlXG4gICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc29cbiAgICAgICAgICAgICAgICAgIHBhcmVudFNldChzY29wZSwgcGFyZW50VmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gcGFyZW50VmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFyZW50VmFsdWVXYXRjaC4kc3RhdGVmdWwgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGRlZmluaXRpb24uY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoID0gc2NvcGUuJHdhdGNoKCRwYXJzZShhdHRyc1thdHRyTmFtZV0sIHBhcmVudFZhbHVlV2F0Y2gpLCBudWxsLCBwYXJlbnRHZXQubGl0ZXJhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb24ucHVzaChyZW1vdmVXYXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSBicmVhaztcbiAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsICYmICFhdHRyc1thdHRyTmFtZV0pIGJyZWFrO1xuXG4gICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgIHZhciBkZWVwV2F0Y2ggPSBwYXJlbnRHZXQubGl0ZXJhbDtcblxuICAgICAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgaW5pdGlhbENoYW5nZXNbc2NvcGVOYW1lXSA9IG5ldyBTaW1wbGVDaGFuZ2UoX1VOSU5JVElBTElaRURfVkFMVUUsIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pO1xuXG4gICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaChwYXJlbnRHZXQsIGZ1bmN0aW9uIHBhcmVudFZhbHVlV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IGluaXRpYWxWYWx1ZSB8fCAoZGVlcFdhdGNoICYmIGVxdWFscyhvbGRWYWx1ZSwgaW5pdGlhbFZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVjb3JkQ2hhbmdlcyhzY29wZU5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH0sIGRlZXBXYXRjaCk7XG5cbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgICAvLyBEb24ndCBhc3NpZ24gT2JqZWN0LnByb3RvdHlwZSBtZXRob2QgdG8gc2NvcGVcbiAgICAgICAgICAgIHBhcmVudEdldCA9IGF0dHJzLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSA/ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pIDogbm9vcDtcblxuICAgICAgICAgICAgLy8gRG9uJ3QgYXNzaWduIG5vb3AgdG8gZGVzdGluYXRpb24gaWYgZXhwcmVzc2lvbiBpcyBub3QgdmFsaWRcbiAgICAgICAgICAgIGlmIChwYXJlbnRHZXQgPT09IG5vb3AgJiYgb3B0aW9uYWwpIGJyZWFrO1xuXG4gICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJlbnRHZXQoc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiByZWNvcmRDaGFuZ2VzKGtleSwgY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGRlc3RpbmF0aW9uLiRvbkNoYW5nZXMpICYmICFzaW1wbGVDb21wYXJlKGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vdCBhbHJlYWR5IHNjaGVkdWxlZCB0aGUgdG9wIGxldmVsIG9uQ2hhbmdlc1F1ZXVlIGhhbmRsZXIgdGhlbiBkbyBzbyBub3dcbiAgICAgICAgICBpZiAoIW9uQ2hhbmdlc1F1ZXVlKSB7XG4gICAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZmx1c2hPbkNoYW5nZXNRdWV1ZSk7XG4gICAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vdCBhbHJlYWR5IHF1ZXVlZCBhIHRyaWdnZXIgb2Ygb25DaGFuZ2VzIGZvciB0aGlzIGNvbnRyb2xsZXIgdGhlbiBkbyBzbyBub3dcbiAgICAgICAgICBpZiAoIWNoYW5nZXMpIHtcbiAgICAgICAgICAgIGNoYW5nZXMgPSB7fTtcbiAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlLnB1c2godHJpZ2dlck9uQ2hhbmdlc0hvb2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiB0aGUgaGFzIGJlZW4gYSBjaGFuZ2Ugb24gdGhpcyBwcm9wZXJ0eSBhbHJlYWR5IHRoZW4gd2UgbmVlZCB0byByZXVzZSB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgICBpZiAoY2hhbmdlc1trZXldKSB7XG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY2hhbmdlc1trZXldLnByZXZpb3VzVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFN0b3JlIHRoaXMgY2hhbmdlXG4gICAgICAgICAgY2hhbmdlc1trZXldID0gbmV3IFNpbXBsZUNoYW5nZShwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyaWdnZXJPbkNoYW5nZXNIb29rKCkge1xuICAgICAgICBkZXN0aW5hdGlvbi4kb25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgICAgICAvLyBOb3cgY2xlYXIgdGhlIGNoYW5nZXMgc28gdGhhdCB3ZSBzY2hlZHVsZSBvbkNoYW5nZXMgd2hlbiBtb3JlIGNoYW5nZXMgYXJyaXZlXG4gICAgICAgIGNoYW5nZXMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluaXRpYWxDaGFuZ2VzOiBpbml0aWFsQ2hhbmdlcyxcbiAgICAgICAgcmVtb3ZlV2F0Y2hlczogcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uLmxlbmd0aCAmJiBmdW5jdGlvbiByZW1vdmVXYXRjaGVzKCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb25baV0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxuZnVuY3Rpb24gU2ltcGxlQ2hhbmdlKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gIHRoaXMucHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzO1xuICB0aGlzLmN1cnJlbnRWYWx1ZSA9IGN1cnJlbnQ7XG59XG5TaW1wbGVDaGFuZ2UucHJvdG90eXBlLmlzRmlyc3RDaGFuZ2UgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMucHJldmlvdXNWYWx1ZSA9PT0gX1VOSU5JVElBTElaRURfVkFMVUU7IH07XG5cblxudmFyIFBSRUZJWF9SRUdFWFAgPSAvXigoPzp4fGRhdGEpWzpcXC1fXSkvaTtcbnZhciBTUEVDSUFMX0NIQVJTX1JFR0VYUCA9IC9bOlxcLV9dKyguKS9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGFsbCBhY2NlcHRlZCBkaXJlY3RpdmVzIGZvcm1hdCBpbnRvIHByb3BlciBkaXJlY3RpdmUgbmFtZS5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKSB7XG4gIHJldHVybiBuYW1lXG4gICAgLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpXG4gICAgLnJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZuQ2FtZWxDYXNlUmVwbGFjZSk7XG59XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHNoYXJlZCBvYmplY3QgYmV0d2VlbiBkaXJlY3RpdmUgY29tcGlsZSAvIGxpbmtpbmcgZnVuY3Rpb25zIHdoaWNoIGNvbnRhaW5zIG5vcm1hbGl6ZWQgRE9NXG4gKiBlbGVtZW50IGF0dHJpYnV0ZXMuIFRoZSB2YWx1ZXMgcmVmbGVjdCBjdXJyZW50IGJpbmRpbmcgc3RhdGUgYHt7IH19YC4gVGhlIG5vcm1hbGl6YXRpb24gaXNcbiAqIG5lZWRlZCBzaW5jZSBhbGwgb2YgdGhlc2UgYXJlIHRyZWF0ZWQgYXMgZXF1aXZhbGVudCBpbiBBbmd1bGFyOlxuICpcbiAqIGBgYFxuICogICAgPHNwYW4gbmc6YmluZD1cImFcIiBuZy1iaW5kPVwiYVwiIGRhdGEtbmctYmluZD1cImFcIiB4LW5nLWJpbmQ9XCJhXCI+XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm9wZXJ0eVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgbWFwIG9mIERPTSBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lcyB0byB0aGUgbm9ybWFsaXplZCBuYW1lLiBUaGlzIGlzXG4gKiBuZWVkZWQgdG8gZG8gcmV2ZXJzZSBsb29rdXAgZnJvbSBub3JtYWxpemVkIG5hbWUgYmFjayB0byBhY3R1YWwgbmFtZS5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHNldFxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldCBET00gZWxlbWVudCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5vcm1hbGl6ZWQgZWxlbWVudCBhdHRyaWJ1dGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gbW9kaWZ5LiBUaGUgbmFtZSBpc1xuICogICAgICAgICAgcmV2ZXJzZS10cmFuc2xhdGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHIgJGF0dHJ9XG4gKiAgICAgICAgICBwcm9wZXJ0eSB0byB0aGUgb3JpZ2luYWwgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdGhlIGF0dHJpYnV0ZSB0by4gVGhlIHZhbHVlIGNhbiBiZSBhbiBpbnRlcnBvbGF0ZWQgc3RyaW5nLlxuICovXG5cblxuXG4vKipcbiAqIENsb3N1cmUgY29tcGlsZXIgdHlwZSBpbmZvcm1hdGlvblxuICovXG5cbmZ1bmN0aW9uIG5vZGVzZXRMaW5raW5nRm4oXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXG4gIC8qIE5vZGVMaXN0ICovIG5vZGVMaXN0LFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gZGlyZWN0aXZlTGlua2luZ0ZuKFxuICAvKiBub2Rlc2V0TGlua2luZ0ZuICovIG5vZGVzZXRMaW5raW5nRm4sXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXG4gIC8qIE5vZGUgKi8gbm9kZSxcbiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCxcbiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuXG4pIHt9XG5cbmZ1bmN0aW9uIHRva2VuRGlmZmVyZW5jZShzdHIxLCBzdHIyKSB7XG4gIHZhciB2YWx1ZXMgPSAnJyxcbiAgICAgIHRva2VuczEgPSBzdHIxLnNwbGl0KC9cXHMrLyksXG4gICAgICB0b2tlbnMyID0gc3RyMi5zcGxpdCgvXFxzKy8pO1xuXG4gIG91dGVyOlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9rZW5zMi5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHRva2VuID09PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjtcbiAgICB9XG4gICAgdmFsdWVzICs9ICh2YWx1ZXMubGVuZ3RoID4gMCA/ICcgJyA6ICcnKSArIHRva2VuO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRzKGpxTm9kZXMpIHtcbiAganFOb2RlcyA9IGpxTGl0ZShqcU5vZGVzKTtcbiAgdmFyIGkgPSBqcU5vZGVzLmxlbmd0aDtcblxuICBpZiAoaSA8PSAxKSB7XG4gICAgcmV0dXJuIGpxTm9kZXM7XG4gIH1cblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIG5vZGUgPSBqcU5vZGVzW2ldO1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCB8fFxuICAgICAgIChub2RlLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCAmJiBub2RlLm5vZGVWYWx1ZS50cmltKCkgPT09ICcnKSkge1xuICAgICAgICAgc3BsaWNlLmNhbGwoanFOb2RlcywgaSwgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBqcU5vZGVzO1xufVxuXG52YXIgJGNvbnRyb2xsZXJNaW5FcnIgPSBtaW5FcnIoJyRjb250cm9sbGVyJyk7XG5cblxudmFyIENOVFJMX1JFRyA9IC9eKFxcUyspKFxccythc1xccysoW1xcdyRdKykpPyQvO1xuZnVuY3Rpb24gaWRlbnRpZmllckZvckNvbnRyb2xsZXIoY29udHJvbGxlciwgaWRlbnQpIHtcbiAgaWYgKGlkZW50ICYmIGlzU3RyaW5nKGlkZW50KSkgcmV0dXJuIGlkZW50O1xuICBpZiAoaXNTdHJpbmcoY29udHJvbGxlcikpIHtcbiAgICB2YXIgbWF0Y2ggPSBDTlRSTF9SRUcuZXhlYyhjb250cm9sbGVyKTtcbiAgICBpZiAobWF0Y2gpIHJldHVybiBtYXRjaFszXTtcbiAgfVxufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlciBzZXJ2aWNlfSBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gY3JlYXRlIG5ld1xuICogY29udHJvbGxlcnMuXG4gKlxuICogVGhpcyBwcm92aWRlciBhbGxvd3MgY29udHJvbGxlciByZWdpc3RyYXRpb24gdmlhIHRoZVxuICoge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgcmVnaXN0ZXJ9IG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gJENvbnRyb2xsZXJQcm92aWRlcigpIHtcbiAgdmFyIGNvbnRyb2xsZXJzID0ge30sXG4gICAgICBnbG9iYWxzID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNoYXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ29udHJvbGxlciBuYW1lIHRvIGNoZWNrLlxuICAgKi9cbiAgdGhpcy5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KG5hbWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGUga2V5cyBhcmVcbiAgICogICAgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBjb25zdHJ1Y3RvciBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZuIChvcHRpb25hbGx5IGRlY29yYXRlZCB3aXRoIERJXG4gICAqICAgIGFubm90YXRpb25zIGluIHRoZSBhcnJheSBub3RhdGlvbikuXG4gICAqL1xuICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnY29udHJvbGxlcicpO1xuICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgZXh0ZW5kKGNvbnRyb2xsZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udHJvbGxlcnNbbmFtZV0gPSBjb25zdHJ1Y3RvcjtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHNcbiAgICogQGRlc2NyaXB0aW9uIElmIGNhbGxlZCwgYWxsb3dzIGAkY29udHJvbGxlcmAgdG8gZmluZCBjb250cm9sbGVyIGNvbnN0cnVjdG9ycyBvbiBgd2luZG93YFxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBzaW5jZVZlcnNpb249XCJ2MS4zLjBcIlxuICAgKiByZW1vdmVWZXJzaW9uPVwidjEuNy4wXCJcbiAgICogVGhpcyBtZXRob2Qgb2YgZmluZGluZyBjb250cm9sbGVycyBoYXMgYmVlbiBkZXByZWNhdGVkLlxuICAgKi9cbiAgdGhpcy5hbGxvd0dsb2JhbHMgPSBmdW5jdGlvbigpIHtcbiAgICBnbG9iYWxzID0gdHJ1ZTtcbiAgfTtcblxuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkaW5qZWN0b3IsICR3aW5kb3cpIHtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGNvbnRyb2xsZXJcbiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gY29uc3RydWN0b3IgSWYgY2FsbGVkIHdpdGggYSBmdW5jdGlvbiB0aGVuIGl0J3MgY29uc2lkZXJlZCB0byBiZSB0aGVcbiAgICAgKiAgICBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBPdGhlcndpc2UgaXQncyBjb25zaWRlcmVkIHRvIGJlIGEgc3RyaW5nIHdoaWNoIGlzIHVzZWRcbiAgICAgKiAgICB0byByZXRyaWV2ZSB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciB1c2luZyB0aGUgZm9sbG93aW5nIHN0ZXBzOlxuICAgICAqXG4gICAgICogICAgKiBjaGVjayBpZiBhIGNvbnRyb2xsZXIgd2l0aCBnaXZlbiBuYW1lIGlzIHJlZ2lzdGVyZWQgdmlhIGAkY29udHJvbGxlclByb3ZpZGVyYFxuICAgICAqICAgICogY2hlY2sgaWYgZXZhbHVhdGluZyB0aGUgc3RyaW5nIG9uIHRoZSBjdXJyZW50IHNjb3BlIHJldHVybnMgYSBjb25zdHJ1Y3RvclxuICAgICAqICAgICogaWYgJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMsIGNoZWNrIGB3aW5kb3dbY29uc3RydWN0b3JdYCBvbiB0aGUgZ2xvYmFsXG4gICAgICogICAgICBgd2luZG93YCBvYmplY3QgKGRlcHJlY2F0ZWQsIG5vdCByZWNvbW1lbmRlZClcbiAgICAgKlxuICAgICAqICAgIFRoZSBzdHJpbmcgY2FuIHVzZSB0aGUgYGNvbnRyb2xsZXIgYXMgcHJvcGVydHlgIHN5bnRheCwgd2hlcmUgdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2UgaXMgcHVibGlzaGVkXG4gICAgICogICAgYXMgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvbiB0aGUgYHNjb3BlYDsgdGhlIGBzY29wZWAgbXVzdCBiZSBpbmplY3RlZCBpbnRvIGBsb2NhbHNgIHBhcmFtIGZvciB0aGlzXG4gICAgICogICAgdG8gd29yayBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbG9jYWxzIEluamVjdGlvbiBsb2NhbHMgZm9yIENvbnRyb2xsZXIuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBJbnN0YW5jZSBvZiBnaXZlbiBjb250cm9sbGVyLlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogYCRjb250cm9sbGVyYCBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciBpbnN0YW50aWF0aW5nIGNvbnRyb2xsZXJzLlxuICAgICAqXG4gICAgICogSXQncyBqdXN0IGEgc2ltcGxlIGNhbGwgdG8ge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIGJ1dCBleHRyYWN0ZWQgaW50b1xuICAgICAqIGEgc2VydmljZSwgc28gdGhhdCBvbmUgY2FuIG92ZXJyaWRlIHRoaXMgc2VydmljZSB3aXRoIFtCQyB2ZXJzaW9uXShodHRwczovL2dpc3QuZ2l0aHViLmNvbS8xNjQ5Nzg4KS5cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gJGNvbnRyb2xsZXIoZXhwcmVzc2lvbiwgbG9jYWxzLCBsYXRlciwgaWRlbnQpIHtcbiAgICAgIC8vIFBSSVZBVEUgQVBJOlxuICAgICAgLy8gICBwYXJhbSBgbGF0ZXJgIC0tLSBpbmRpY2F0ZXMgdGhhdCB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yIGlzIGludm9rZWQgYXQgYSBsYXRlciB0aW1lLlxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBJZiB0cnVlLCAkY29udHJvbGxlciB3aWxsIGFsbG9jYXRlIHRoZSBvYmplY3Qgd2l0aCB0aGUgY29ycmVjdFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBwcm90b3R5cGUgY2hhaW4sIGJ1dCB3aWxsIG5vdCBpbnZva2UgdGhlIGNvbnRyb2xsZXIgdW50aWwgYSByZXR1cm5lZFxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBpcyBpbnZva2VkLlxuICAgICAgLy8gICBwYXJhbSBgaWRlbnRgIC0tLSBBbiBvcHRpb25hbCBsYWJlbCB3aGljaCBvdmVycmlkZXMgdGhlIGxhYmVsIHBhcnNlZCBmcm9tIHRoZSBjb250cm9sbGVyXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sIGlmIGFueS5cbiAgICAgIHZhciBpbnN0YW5jZSwgbWF0Y2gsIGNvbnN0cnVjdG9yLCBpZGVudGlmaWVyO1xuICAgICAgbGF0ZXIgPSBsYXRlciA9PT0gdHJ1ZTtcbiAgICAgIGlmIChpZGVudCAmJiBpc1N0cmluZyhpZGVudCkpIHtcbiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJpbmcoZXhwcmVzc2lvbikpIHtcbiAgICAgICAgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKENOVFJMX1JFRyk7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICB0aHJvdyAkY29udHJvbGxlck1pbkVycignY3RybGZtdCcsXG4gICAgICAgICAgICAnQmFkbHkgZm9ybWVkIGNvbnRyb2xsZXIgc3RyaW5nIFxcJ3swfVxcJy4gJyArXG4gICAgICAgICAgICAnTXVzdCBtYXRjaCBgX19uYW1lX18gYXMgX19pZF9fYCBvciBgX19uYW1lX19gLicsIGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0cnVjdG9yID0gbWF0Y2hbMV07XG4gICAgICAgIGlkZW50aWZpZXIgPSBpZGVudGlmaWVyIHx8IG1hdGNoWzNdO1xuICAgICAgICBleHByZXNzaW9uID0gY29udHJvbGxlcnMuaGFzT3duUHJvcGVydHkoY29uc3RydWN0b3IpXG4gICAgICAgICAgICA/IGNvbnRyb2xsZXJzW2NvbnN0cnVjdG9yXVxuICAgICAgICAgICAgOiBnZXR0ZXIobG9jYWxzLiRzY29wZSwgY29uc3RydWN0b3IsIHRydWUpIHx8XG4gICAgICAgICAgICAgICAgKGdsb2JhbHMgPyBnZXR0ZXIoJHdpbmRvdywgY29uc3RydWN0b3IsIHRydWUpIDogdW5kZWZpbmVkKTtcblxuICAgICAgICBpZiAoIWV4cHJlc3Npb24pIHtcbiAgICAgICAgICB0aHJvdyAkY29udHJvbGxlck1pbkVycignY3RybHJlZycsXG4gICAgICAgICAgICAnVGhlIGNvbnRyb2xsZXIgd2l0aCB0aGUgbmFtZSBcXCd7MH1cXCcgaXMgbm90IHJlZ2lzdGVyZWQuJywgY29uc3RydWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXNzZXJ0QXJnRm4oZXhwcmVzc2lvbiwgY29uc3RydWN0b3IsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGF0ZXIpIHtcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgY29udHJvbGxlciBsYXRlcjpcbiAgICAgICAgLy8gVGhpcyBtYWNoaW5lcnkgaXMgdXNlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCBiZWZvcmUgY2FsbGluZyB0aGVcbiAgICAgICAgLy8gY29udHJvbGxlcidzIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlciBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIGlzXG4gICAgICAgIC8vIGludm9rZWQuIFByaW1hcmlseSwgdGhpcyBpcyB1c2VkIGZvciBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIGluICRjb21waWxlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGZlYXR1cmUgaXMgbm90IGludGVuZGVkIGZvciB1c2UgYnkgYXBwbGljYXRpb25zLCBhbmQgaXMgdGh1cyBub3QgZG9jdW1lbnRlZFxuICAgICAgICAvLyBwdWJsaWNseS5cbiAgICAgICAgLy8gT2JqZWN0IGNyZWF0aW9uOiBodHRwOi8vanNwZXJmLmNvbS9jcmVhdGUtY29uc3RydWN0b3IvMlxuICAgICAgICB2YXIgY29udHJvbGxlclByb3RvdHlwZSA9IChpc0FycmF5KGV4cHJlc3Npb24pID9cbiAgICAgICAgICBleHByZXNzaW9uW2V4cHJlc3Npb24ubGVuZ3RoIC0gMV0gOiBleHByZXNzaW9uKS5wcm90b3R5cGU7XG4gICAgICAgIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShjb250cm9sbGVyUHJvdG90eXBlIHx8IG51bGwpO1xuXG4gICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkY29udHJvbGxlckluaXQoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9ICRpbmplY3Rvci5pbnZva2UoZXhwcmVzc2lvbiwgaW5zdGFuY2UsIGxvY2FscywgY29uc3RydWN0b3IpO1xuICAgICAgICAgIGlmIChyZXN1bHQgIT09IGluc3RhbmNlICYmIChpc09iamVjdChyZXN1bHQpIHx8IGlzRnVuY3Rpb24ocmVzdWx0KSkpIHtcbiAgICAgICAgICAgIGluc3RhbmNlID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgLy8gSWYgcmVzdWx0IGNoYW5nZWQsIHJlLWFzc2lnbiBjb250cm9sbGVyQXMgdmFsdWUgdG8gc2NvcGUuXG4gICAgICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlID0gJGluamVjdG9yLmluc3RhbnRpYXRlKGV4cHJlc3Npb24sIGxvY2FscywgY29uc3RydWN0b3IpO1xuXG4gICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBuYW1lKSB7XG4gICAgICBpZiAoIShsb2NhbHMgJiYgaXNPYmplY3QobG9jYWxzLiRzY29wZSkpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNvbnRyb2xsZXInKSgnbm9zY3AnLFxuICAgICAgICAgICdDYW5ub3QgZXhwb3J0IGNvbnRyb2xsZXIgXFwnezB9XFwnIGFzIFxcJ3sxfVxcJyEgTm8gJHNjb3BlIG9iamVjdCBwcm92aWRlZCB2aWEgYGxvY2Fsc2AuJyxcbiAgICAgICAgICBuYW1lLCBpZGVudGlmaWVyKTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRkb2N1bWVudFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHtAbGluayBhbmd1bGFyLmVsZW1lbnQgalF1ZXJ5IG9yIGpxTGl0ZX0gd3JhcHBlciBmb3IgdGhlIGJyb3dzZXIncyBgd2luZG93LmRvY3VtZW50YCBvYmplY3QuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImRvY3VtZW50RXhhbXBsZVwiIG5hbWU9XCJkb2N1bWVudFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cD4kZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9XCJ0aXRsZVwiPjwvYj48L3A+XG4gICAgICAgICA8cD53aW5kb3cuZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9XCJ3aW5kb3dUaXRsZVwiPjwvYj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkb2N1bWVudEV4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGRvY3VtZW50KSB7XG4gICAgICAgICAgICRzY29wZS50aXRsZSA9ICRkb2N1bWVudFswXS50aXRsZTtcbiAgICAgICAgICAgJHNjb3BlLndpbmRvd1RpdGxlID0gYW5ndWxhci5lbGVtZW50KHdpbmRvdy5kb2N1bWVudClbMF0udGl0bGU7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJERvY3VtZW50UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHJldHVybiBqcUxpdGUod2luZG93LmRvY3VtZW50KTtcbiAgfV07XG59XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHRoaXNcbiAqIExpc3RlbnMgZm9yIGRvY3VtZW50IHZpc2liaWxpdHkgY2hhbmdlIGFuZCBtYWtlcyB0aGUgY3VycmVudCBzdGF0dXMgYWNjZXNzaWJsZS5cbiAqL1xuZnVuY3Rpb24gJCRJc0RvY3VtZW50SGlkZGVuUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGRvY3VtZW50JywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkZG9jdW1lbnQsICRyb290U2NvcGUpIHtcbiAgICB2YXIgZG9jID0gJGRvY3VtZW50WzBdO1xuICAgIHZhciBoaWRkZW4gPSBkb2MgJiYgZG9jLmhpZGRlbjtcblxuICAgICRkb2N1bWVudC5vbigndmlzaWJpbGl0eWNoYW5nZScsIGNoYW5nZUxpc3RlbmVyKTtcblxuICAgICRyb290U2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgJGRvY3VtZW50Lm9mZigndmlzaWJpbGl0eWNoYW5nZScsIGNoYW5nZUxpc3RlbmVyKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGNoYW5nZUxpc3RlbmVyKCkge1xuICAgICAgaGlkZGVuID0gZG9jLmhpZGRlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaGlkZGVuO1xuICAgIH07XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZXhjZXB0aW9uSGFuZGxlclxuICogQHJlcXVpcmVzIG5nLiRsb2dcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbnkgdW5jYXVnaHQgZXhjZXB0aW9uIGluIGFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGVsZWdhdGVkIHRvIHRoaXMgc2VydmljZS5cbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50b1xuICogdGhlIGJyb3dzZXIgY29uc29sZS5cbiAqXG4gKiBJbiB1bml0IHRlc3RzLCBpZiBgYW5ndWxhci1tb2Nrcy5qc2AgaXMgbG9hZGVkLCB0aGlzIHNlcnZpY2UgaXMgb3ZlcnJpZGRlbiBieVxuICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuXG4gKlxuICogIyMgRXhhbXBsZTpcbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyB3aWxsIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBgJGV4Y2VwdGlvbkhhbmRsZXJgIGluIG9yZGVyIHRvIChhKSBsb2cgdW5jYXVnaHRcbiAqIGVycm9ycyB0byB0aGUgYmFja2VuZCBmb3IgbGF0ZXIgaW5zcGVjdGlvbiBieSB0aGUgZGV2ZWxvcGVycyBhbmQgKGIpIHRvIHVzZSBgJGxvZy53YXJuKClgIGluc3RlYWRcbiAqIG9mIGAkbG9nLmVycm9yKClgLlxuICpcbiAqIGBgYGpzXG4gKiAgIGFuZ3VsYXIuXG4gKiAgICAgbW9kdWxlKCdleGNlcHRpb25PdmVyd3JpdGUnLCBbXSkuXG4gKiAgICAgZmFjdG9yeSgnJGV4Y2VwdGlvbkhhbmRsZXInLCBbJyRsb2cnLCAnbG9nRXJyb3JzVG9CYWNrZW5kJywgZnVuY3Rpb24oJGxvZywgbG9nRXJyb3JzVG9CYWNrZW5kKSB7XG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24gbXlFeGNlcHRpb25IYW5kbGVyKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAqICAgICAgICAgbG9nRXJyb3JzVG9CYWNrZW5kKGV4Y2VwdGlvbiwgY2F1c2UpO1xuICogICAgICAgICAkbG9nLndhcm4oZXhjZXB0aW9uLCBjYXVzZSk7XG4gKiAgICAgICB9O1xuICogICAgIH1dKTtcbiAqIGBgYFxuICpcbiAqIDxociAvPlxuICogTm90ZSwgdGhhdCBjb2RlIGV4ZWN1dGVkIGluIGV2ZW50LWxpc3RlbmVycyAoZXZlbiB0aG9zZSByZWdpc3RlcmVkIHVzaW5nIGpxTGl0ZSdzIGBvbmAvYGJpbmRgXG4gKiBtZXRob2RzKSBkb2VzIG5vdCBkZWxlZ2F0ZSBleGNlcHRpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9XG4gKiAodW5sZXNzIGV4ZWN1dGVkIGR1cmluZyBhIGRpZ2VzdCkuXG4gKlxuICogSWYgeW91IHdpc2gsIHlvdSBjYW4gbWFudWFsbHkgZGVsZWdhdGUgZXhjZXB0aW9ucywgZS5nLlxuICogYHRyeSB7IC4uLiB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1gXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICogQHBhcmFtIHtzdHJpbmc9fSBjYXVzZSBPcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29udGV4dCBpbiB3aGljaFxuICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uXG4gKlxuICovXG5mdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XTtcbn1cblxudmFyICQkRm9yY2VSZWZsb3dQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckZG9jdW1lbnQnLCBmdW5jdGlvbigkZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZG9tTm9kZSkge1xuICAgICAgLy90aGUgbGluZSBiZWxvdyB3aWxsIGZvcmNlIHRoZSBicm93c2VyIHRvIHBlcmZvcm0gYSByZXBhaW50IHNvXG4gICAgICAvL3RoYXQgYWxsIHRoZSBhbmltYXRlZCBlbGVtZW50cyB3aXRoaW4gdGhlIGFuaW1hdGlvbiBmcmFtZSB3aWxsXG4gICAgICAvL2JlIHByb3Blcmx5IHVwZGF0ZWQgYW5kIGRyYXduIG9uIHNjcmVlbi4gVGhpcyBpcyByZXF1aXJlZCB0b1xuICAgICAgLy9lbnN1cmUgdGhhdCB0aGUgcHJlcGFyYXRpb24gYW5pbWF0aW9uIGlzIHByb3Blcmx5IGZsdXNoZWQgc28gdGhhdFxuICAgICAgLy90aGUgYWN0aXZlIHN0YXRlIHBpY2tzIHVwIGZyb20gdGhlcmUuIERPIE5PVCBSRU1PVkUgVEhJUyBMSU5FLlxuICAgICAgLy9ETyBOT1QgT1BUSU1JWkUgVEhJUyBMSU5FLiBUSEUgTUlOSUZJRVIgV0lMTCBSRU1PVkUgSVQgT1RIRVJXSVNFIFdISUNIXG4gICAgICAvL1dJTEwgUkVTVUxUIElOIEFOIFVOUFJFRElDVEFCTEUgQlVHIFRIQVQgSVMgVkVSWSBIQVJEIFRPIFRSQUNLIERPV04gQU5EXG4gICAgICAvL1dJTEwgVEFLRSBZRUFSUyBBV0FZIEZST00gWU9VUiBMSUZFLlxuICAgICAgaWYgKGRvbU5vZGUpIHtcbiAgICAgICAgaWYgKCFkb21Ob2RlLm5vZGVUeXBlICYmIGRvbU5vZGUgaW5zdGFuY2VvZiBqcUxpdGUpIHtcbiAgICAgICAgICBkb21Ob2RlID0gZG9tTm9kZVswXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9tTm9kZSA9ICRkb2N1bWVudFswXS5ib2R5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbU5vZGUub2Zmc2V0V2lkdGggKyAxO1xuICAgIH07XG4gIH1dO1xufTtcblxudmFyIEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7XG52YXIgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnfTtcbnZhciBKU09OX1NUQVJUID0gL15cXFt8Xlxceyg/IVxceykvO1xudmFyIEpTT05fRU5EUyA9IHtcbiAgJ1snOiAvXSQvLFxuICAneyc6IC99JC9cbn07XG52YXIgSlNPTl9QUk9URUNUSU9OX1BSRUZJWCA9IC9eXFwpXVxcfScsP1xcbi87XG52YXIgJGh0dHBNaW5FcnIgPSBtaW5FcnIoJyRodHRwJyk7XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVZhbHVlKHYpIHtcbiAgaWYgKGlzT2JqZWN0KHYpKSB7XG4gICAgcmV0dXJuIGlzRGF0ZSh2KSA/IHYudG9JU09TdHJpbmcoKSA6IHRvSnNvbih2KTtcbiAgfVxuICByZXR1cm4gdjtcbn1cblxuXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIoKSB7XG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkaHR0cFBhcmFtU2VyaWFsaXplclxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmYXVsdCB7QGxpbmsgJGh0dHAgYCRodHRwYH0gcGFyYW1zIHNlcmlhbGl6ZXIgdGhhdCBjb252ZXJ0cyBvYmplY3RzIHRvIHN0cmluZ3NcbiAgICogYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4gICAqXG4gICAqICogYHsnZm9vJzogJ2Jhcid9YCByZXN1bHRzIGluIGBmb289YmFyYFxuICAgKiAqIGB7J2Zvbyc6IERhdGUubm93KCl9YCByZXN1bHRzIGluIGBmb289MjAxNS0wNC0wMVQwOSUzQTUwJTNBNDkuMjYyWmAgKGB0b0lTT1N0cmluZygpYCBhbmQgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiBhIERhdGUgb2JqZWN0KVxuICAgKiAqIGB7J2Zvbyc6IFsnYmFyJywgJ2JheiddfWAgcmVzdWx0cyBpbiBgZm9vPWJhciZmb289YmF6YCAocmVwZWF0ZWQga2V5IGZvciBlYWNoIGFycmF5IGVsZW1lbnQpXG4gICAqICogYHsnZm9vJzogeydiYXInOidiYXonfX1gIHJlc3VsdHMgaW4gYGZvbz0lN0IlMjJiYXIlMjIlM0ElMjJiYXolMjIlN0RgIChzdHJpbmdpZmllZCBhbmQgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QpXG4gICAqXG4gICAqIE5vdGUgdGhhdCBzZXJpYWxpemVyIHdpbGwgc29ydCB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzIGFscGhhYmV0aWNhbGx5LlxuICAgKiAqL1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBuZ1BhcmFtU2VyaWFsaXplcihwYXJhbXMpIHtcbiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIGZvckVhY2hTb3J0ZWQocGFyYW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24odikge1xuICAgICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXkpICArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHYpKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXkpICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodmFsdWUpKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xuICAgIH07XG4gIH07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBbHRlcm5hdGl2ZSB7QGxpbmsgJGh0dHAgYCRodHRwYH0gcGFyYW1zIHNlcmlhbGl6ZXIgdGhhdCBmb2xsb3dzXG4gICAqIGpRdWVyeSdzIFtgcGFyYW0oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qcXVlcnkucGFyYW0vKSBtZXRob2QgbG9naWMuXG4gICAqIFRoZSBzZXJpYWxpemVyIHdpbGwgYWxzbyBzb3J0IHRoZSBwYXJhbXMgYWxwaGFiZXRpY2FsbHkuXG4gICAqXG4gICAqIFRvIHVzZSBpdCBmb3Igc2VyaWFsaXppbmcgYCRodHRwYCByZXF1ZXN0IHBhcmFtZXRlcnMsIHNldCBpdCBhcyB0aGUgYHBhcmFtU2VyaWFsaXplcmAgcHJvcGVydHk6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqICRodHRwKHtcbiAgICogICB1cmw6IG15VXJsLFxuICAgKiAgIG1ldGhvZDogJ0dFVCcsXG4gICAqICAgcGFyYW1zOiBteVBhcmFtcyxcbiAgICogICBwYXJhbVNlcmlhbGl6ZXI6ICckaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNldCBpdCBhcyB0aGUgZGVmYXVsdCBgcGFyYW1TZXJpYWxpemVyYCBpbiB0aGVcbiAgICoge0BsaW5rICRodHRwUHJvdmlkZXIjZGVmYXVsdHMgYCRodHRwUHJvdmlkZXJgfS5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIGluamVjdCB0aGUgc2VyaWFsaXplciBhbmQgdXNlIGl0IGV4cGxpY2l0bHksIGZvciBleGFtcGxlIHRvIHNlcmlhbGl6ZVxuICAgKiBmb3JtIGRhdGEgZm9yIHN1Ym1pc3Npb246XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC5jb250cm9sbGVyKGZ1bmN0aW9uKCRodHRwLCAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSkge1xuICAgKiAgIC8vLi4uXG4gICAqXG4gICAqICAgJGh0dHAoe1xuICAgKiAgICAgdXJsOiBteVVybCxcbiAgICogICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgKiAgICAgZGF0YTogJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UobXlEYXRhKSxcbiAgICogICAgIGhlYWRlcnM6IHtcbiAgICogICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogKi9cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGpRdWVyeUxpa2VQYXJhbVNlcmlhbGl6ZXIocGFyYW1zKSB7XG4gICAgICBpZiAoIXBhcmFtcykgcmV0dXJuICcnO1xuICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICBzZXJpYWxpemUocGFyYW1zLCAnJywgdHJ1ZSk7XG4gICAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xuXG4gICAgICBmdW5jdGlvbiBzZXJpYWxpemUodG9TZXJpYWxpemUsIHByZWZpeCwgdG9wTGV2ZWwpIHtcbiAgICAgICAgaWYgKHRvU2VyaWFsaXplID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHRvU2VyaWFsaXplKSkgcmV0dXJuO1xuICAgICAgICBpZiAoaXNBcnJheSh0b1NlcmlhbGl6ZSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHRvU2VyaWFsaXplLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSwgcHJlZml4ICsgJ1snICsgKGlzT2JqZWN0KHZhbHVlKSA/IGluZGV4IDogJycpICsgJ10nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh0b1NlcmlhbGl6ZSkgJiYgIWlzRGF0ZSh0b1NlcmlhbGl6ZSkpIHtcbiAgICAgICAgICBmb3JFYWNoU29ydGVkKHRvU2VyaWFsaXplLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBzZXJpYWxpemUodmFsdWUsIHByZWZpeCArXG4gICAgICAgICAgICAgICAgKHRvcExldmVsID8gJycgOiAnWycpICtcbiAgICAgICAgICAgICAgICBrZXkgK1xuICAgICAgICAgICAgICAgICh0b3BMZXZlbCA/ICcnIDogJ10nKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShwcmVmaXgpICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodG9TZXJpYWxpemUpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKGRhdGEsIGhlYWRlcnMpIHtcbiAgaWYgKGlzU3RyaW5nKGRhdGEpKSB7XG4gICAgLy8gU3RyaXAganNvbiB2dWxuZXJhYmlsaXR5IHByb3RlY3Rpb24gcHJlZml4IGFuZCB0cmltIHdoaXRlc3BhY2VcbiAgICB2YXIgdGVtcERhdGEgPSBkYXRhLnJlcGxhY2UoSlNPTl9QUk9URUNUSU9OX1BSRUZJWCwgJycpLnRyaW0oKTtcblxuICAgIGlmICh0ZW1wRGF0YSkge1xuICAgICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycygnQ29udGVudC1UeXBlJyk7XG4gICAgICBpZiAoKGNvbnRlbnRUeXBlICYmIChjb250ZW50VHlwZS5pbmRleE9mKEFQUExJQ0FUSU9OX0pTT04pID09PSAwKSkgfHwgaXNKc29uTGlrZSh0ZW1wRGF0YSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkYXRhID0gZnJvbUpzb24odGVtcERhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhyb3cgJGh0dHBNaW5FcnIoJ2JhZGRhdGEnLCAnRGF0YSBtdXN0IGJlIGEgdmFsaWQgSlNPTiBvYmplY3QuIFJlY2VpdmVkOiBcInswfVwiLiAnICtcbiAgICAgICAgICAnUGFyc2UgZXJyb3I6IFwiezF9XCInLCBkYXRhLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBpc0pzb25MaWtlKHN0cikge1xuICAgIHZhciBqc29uU3RhcnQgPSBzdHIubWF0Y2goSlNPTl9TVEFSVCk7XG4gICAgcmV0dXJuIGpzb25TdGFydCAmJiBKU09OX0VORFNbanNvblN0YXJ0WzBdXS50ZXN0KHN0cik7XG59XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGtleSB2YWx1ZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVycyBSYXcgaGVhZGVycyBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge09iamVjdH0gUGFyc2VkIGhlYWRlcnMgYXMga2V5IHZhbHVlIG9iamVjdFxuICovXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0gY3JlYXRlTWFwKCksIGk7XG5cbiAgZnVuY3Rpb24gZmlsbEluUGFyc2VkKGtleSwgdmFsKSB7XG4gICAgaWYgKGtleSkge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNTdHJpbmcoaGVhZGVycykpIHtcbiAgICBmb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbihsaW5lKSB7XG4gICAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAgICBmaWxsSW5QYXJzZWQobG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKSwgdHJpbShsaW5lLnN1YnN0cihpICsgMSkpKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc09iamVjdChoZWFkZXJzKSkge1xuICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyVmFsLCBoZWFkZXJLZXkpIHtcbiAgICAgIGZpbGxJblBhcnNlZChsb3dlcmNhc2UoaGVhZGVyS2V5KSwgdHJpbShoZWFkZXJWYWwpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZWQ7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gcGFyc2VkIGhlYWRlcnMuXG4gKlxuICogSGVhZGVycyBhcmUgbGF6eSBwYXJzZWQgd2hlbiBmaXJzdCByZXF1ZXN0ZWQuXG4gKiBAc2VlIHBhcnNlSGVhZGVyc1xuICpcbiAqIEBwYXJhbSB7KHN0cmluZ3xPYmplY3QpfSBoZWFkZXJzIEhlYWRlcnMgdG8gcHJvdmlkZSBhY2Nlc3MgdG8uXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nPSl9IFJldHVybnMgYSBnZXR0ZXIgZnVuY3Rpb24gd2hpY2ggaWYgY2FsbGVkIHdpdGg6XG4gKlxuICogICAtIGlmIGNhbGxlZCB3aXRoIGFuIGFyZ3VtZW50IHJldHVybnMgYSBzaW5nbGUgaGVhZGVyIHZhbHVlIG9yIG51bGxcbiAqICAgLSBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgaGVhZGVycy5cbiAqL1xuZnVuY3Rpb24gaGVhZGVyc0dldHRlcihoZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzT2JqO1xuXG4gIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKCFoZWFkZXJzT2JqKSBoZWFkZXJzT2JqID0gIHBhcnNlSGVhZGVycyhoZWFkZXJzKTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2xvd2VyY2FzZShuYW1lKV07XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnNPYmo7XG4gIH07XG59XG5cblxuLyoqXG4gKiBDaGFpbiBhbGwgZ2l2ZW4gZnVuY3Rpb25zXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGZvciBib3RoIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gZGF0YSBEYXRhIHRvIHRyYW5zZm9ybS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nPSl9IGhlYWRlcnMgSFRUUCBoZWFkZXJzIGdldHRlciBmbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXG4gKiBAcGFyYW0geyhGdW5jdGlvbnxBcnJheS48RnVuY3Rpb24+KX0gZm5zIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm5zIHsqfSBUcmFuc2Zvcm1lZCBkYXRhLlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIHN0YXR1cywgZm5zKSB7XG4gIGlmIChpc0Z1bmN0aW9uKGZucykpIHtcbiAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMsIHN0YXR1cyk7XG4gIH1cblxuICBmb3JFYWNoKGZucywgZnVuY3Rpb24oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycywgc3RhdHVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cblxuZnVuY3Rpb24gaXNTdWNjZXNzKHN0YXR1cykge1xuICByZXR1cm4gMjAwIDw9IHN0YXR1cyAmJiBzdGF0dXMgPCAzMDA7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRodHRwUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgYCRodHRwUHJvdmlkZXJgIHRvIGNoYW5nZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRodHRwICRodHRwfSBzZXJ2aWNlLlxuICogKi9cbmZ1bmN0aW9uICRIdHRwUHJvdmlkZXIoKSB7XG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciNkZWZhdWx0c1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHJlcXVlc3RzLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLmNhY2hlYCoqIC0ge2Jvb2xlYW58T2JqZWN0fSAtIEEgYm9vbGVhbiB2YWx1ZSBvciBvYmplY3QgY3JlYXRlZCB3aXRoXG4gICAqIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0gdG8gZW5hYmxlIG9yIGRpc2FibGUgY2FjaGluZyBvZiBIVFRQIHJlc3BvbnNlc1xuICAgKiBieSBkZWZhdWx0LiBTZWUge0BsaW5rICRodHRwI2NhY2hpbmcgJGh0dHAgQ2FjaGluZ30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uXG4gICAqIERlZmF1bHRzIHZhbHVlIGlzIGAnWFNSRi1UT0tFTidgLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlXG4gICAqIFhTUkYgdG9rZW4uIERlZmF1bHRzIHZhbHVlIGlzIGAnWC1YU1JGLVRPS0VOJ2AuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMuaGVhZGVyc2AqKiAtIHtPYmplY3R9IC0gRGVmYXVsdCBoZWFkZXJzIGZvciBhbGwgJGh0dHAgcmVxdWVzdHMuXG4gICAqIFJlZmVyIHRvIHtAbGluayBuZy4kaHR0cCNzZXR0aW5nLWh0dHAtaGVhZGVycyAkaHR0cH0gZm9yIGRvY3VtZW50YXRpb24gb25cbiAgICogc2V0dGluZyBkZWZhdWx0IGhlYWRlcnMuXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucG9zdGAqKlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnB1dGAqKlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnBhdGNoYCoqXG4gICAqXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyYCoqIC0gYHtzdHJpbmd8ZnVuY3Rpb24oT2JqZWN0PHN0cmluZyxzdHJpbmc+KTpzdHJpbmd9YCAtIEEgZnVuY3Rpb25cbiAgICogIHVzZWQgdG8gdGhlIHByZXBhcmUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHJlcXVlc3QgcGFyYW1ldGVycyAoc3BlY2lmaWVkIGFzIGFuIG9iamVjdCkuXG4gICAqICBJZiBzcGVjaWZpZWQgYXMgc3RyaW5nLCBpdCBpcyBpbnRlcnByZXRlZCBhcyBhIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAqICBEZWZhdWx0cyB0byB7QGxpbmsgbmcuJGh0dHBQYXJhbVNlcmlhbGl6ZXIgJGh0dHBQYXJhbVNlcmlhbGl6ZXJ9LlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLmpzb25wQ2FsbGJhY2tQYXJhbWAqKiAtIGB7c3RyaW5nfWAgLSB0aGUgbmFtZSBvZiB0aGUgcXVlcnkgcGFyYW1ldGVyIHRoYXQgcGFzc2VzIHRoZSBuYW1lIG9mIHRoZVxuICAgKiBjYWxsYmFjayBpbiBhIEpTT05QIHJlcXVlc3QuIFRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB3aWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIGV4cHJlc3Npb24gZ2VuZXJhdGVkIGJ5IHRoZVxuICAgKiB7QGxpbmsgJGpzb25wQ2FsbGJhY2tzfSBzZXJ2aWNlLiBEZWZhdWx0cyB0byBgJ2NhbGxiYWNrJ2AuXG4gICAqXG4gICAqKi9cbiAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAvLyB0cmFuc2Zvcm0gaW5jb21pbmcgcmVzcG9uc2UgZGF0YVxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBbZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybV0sXG5cbiAgICAvLyB0cmFuc2Zvcm0gb3V0Z29pbmcgcmVxdWVzdCBkYXRhXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBpc09iamVjdChkKSAmJiAhaXNGaWxlKGQpICYmICFpc0Jsb2IoZCkgJiYgIWlzRm9ybURhdGEoZCkgPyB0b0pzb24oZCkgOiBkO1xuICAgIH1dLFxuXG4gICAgLy8gZGVmYXVsdCBoZWFkZXJzXG4gICAgaGVhZGVyczoge1xuICAgICAgY29tbW9uOiB7XG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgICAgfSxcbiAgICAgIHBvc3Q6ICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLFxuICAgICAgcHV0OiAgICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksXG4gICAgICBwYXRjaDogIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKVxuICAgIH0sXG5cbiAgICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICAgIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVyJyxcblxuICAgIGpzb25wQ2FsbGJhY2tQYXJhbTogJ2NhbGxiYWNrJ1xuICB9O1xuXG4gIHZhciB1c2VBcHBseUFzeW5jID0gZmFsc2U7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjdXNlQXBwbHlBc3luY1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29uZmlndXJlICRodHRwIHNlcnZpY2UgdG8gY29tYmluZSBwcm9jZXNzaW5nIG9mIG11bHRpcGxlIGh0dHAgcmVzcG9uc2VzIHJlY2VpdmVkIGF0IGFyb3VuZFxuICAgKiB0aGUgc2FtZSB0aW1lIHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHlBc3luYyAkcm9vdFNjb3BlLiRhcHBseUFzeW5jfS4gVGhpcyBjYW4gcmVzdWx0IGluXG4gICAqIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGltcHJvdmVtZW50IGZvciBiaWdnZXIgYXBwbGljYXRpb25zIHRoYXQgbWFrZSBtYW55IEhUVFAgcmVxdWVzdHNcbiAgICogY29uY3VycmVudGx5IChjb21tb24gZHVyaW5nIGFwcGxpY2F0aW9uIGJvb3RzdHJhcCkuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLiBJZiBubyB2YWx1ZSBpcyBzcGVjaWZpZWQsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgdHJ1ZSwgd2hlbiByZXF1ZXN0cyBhcmUgbG9hZGVkLCB0aGV5IHdpbGwgc2NoZWR1bGUgYSBkZWZlcnJlZFxuICAgKiAgICBcImFwcGx5XCIgb24gdGhlIG5leHQgdGljaywgZ2l2aW5nIHRpbWUgZm9yIHN1YnNlcXVlbnQgcmVxdWVzdHMgaW4gYSByb3VnaGx5IH4xMG1zIHdpbmRvd1xuICAgKiAgICB0byBsb2FkIGFuZCBzaGFyZSB0aGUgc2FtZSBkaWdlc3QgY3ljbGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufE9iamVjdH0gSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQsIHJldHVybnMgdGhlICRodHRwUHJvdmlkZXIgZm9yIGNoYWluaW5nLlxuICAgKiAgICBvdGhlcndpc2UsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS5cbiAgICoqL1xuICB0aGlzLnVzZUFwcGx5QXN5bmMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICB1c2VBcHBseUFzeW5jID0gISF2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdXNlQXBwbHlBc3luYztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHByb3BlcnR5XG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjaW50ZXJjZXB0b3JzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBcnJheSBjb250YWluaW5nIHNlcnZpY2UgZmFjdG9yaWVzIGZvciBhbGwgc3luY2hyb25vdXMgb3IgYXN5bmNocm9ub3VzIHtAbGluayBuZy4kaHR0cCAkaHR0cH1cbiAgICogcHJlLXByb2Nlc3Npbmcgb2YgcmVxdWVzdCBvciBwb3N0cHJvY2Vzc2luZyBvZiByZXNwb25zZXMuXG4gICAqXG4gICAqIFRoZXNlIHNlcnZpY2UgZmFjdG9yaWVzIGFyZSBvcmRlcmVkIGJ5IHJlcXVlc3QsIGkuZS4gdGhleSBhcmUgYXBwbGllZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbiAgICogYXJyYXksIG9uIHJlcXVlc3QsIGJ1dCByZXZlcnNlIG9yZGVyLCBvbiByZXNwb25zZS5cbiAgICpcbiAgICoge0BsaW5rIG5nLiRodHRwI2ludGVyY2VwdG9ycyBJbnRlcmNlcHRvcnMgZGV0YWlsZWQgaW5mb31cbiAgICoqL1xuICB2YXIgaW50ZXJjZXB0b3JGYWN0b3JpZXMgPSB0aGlzLmludGVyY2VwdG9ycyA9IFtdO1xuXG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGh0dHBCYWNrZW5kJywgJyQkY29va2llUmVhZGVyJywgJyRjYWNoZUZhY3RvcnknLCAnJHJvb3RTY29wZScsICckcScsICckaW5qZWN0b3InLCAnJHNjZScsXG4gICAgICBmdW5jdGlvbigkYnJvd3NlciwgJGh0dHBCYWNrZW5kLCAkJGNvb2tpZVJlYWRlciwgJGNhY2hlRmFjdG9yeSwgJHJvb3RTY29wZSwgJHEsICRpbmplY3RvciwgJHNjZSkge1xuXG4gICAgdmFyIGRlZmF1bHRDYWNoZSA9ICRjYWNoZUZhY3RvcnkoJyRodHRwJyk7XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgdGhhdCBkZWZhdWx0IHBhcmFtIHNlcmlhbGl6ZXIgaXMgZXhwb3NlZCBhcyBhIGZ1bmN0aW9uXG4gICAgICovXG4gICAgZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyID0gaXNTdHJpbmcoZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyKSA/XG4gICAgICAkaW5qZWN0b3IuZ2V0KGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcikgOiBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXI7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcmNlcHRvcnMgc3RvcmVkIGluIHJldmVyc2Ugb3JkZXIuIElubmVyIGludGVyY2VwdG9ycyBiZWZvcmUgb3V0ZXIgaW50ZXJjZXB0b3JzLlxuICAgICAqIFRoZSByZXZlcnNhbCBpcyBuZWVkZWQgc28gdGhhdCB3ZSBjYW4gYnVpbGQgdXAgdGhlIGludGVyY2VwdGlvbiBjaGFpbiBhcm91bmQgdGhlXG4gICAgICogc2VydmVyIHJlcXVlc3QuXG4gICAgICovXG4gICAgdmFyIHJldmVyc2VkSW50ZXJjZXB0b3JzID0gW107XG5cbiAgICBmb3JFYWNoKGludGVyY2VwdG9yRmFjdG9yaWVzLCBmdW5jdGlvbihpbnRlcmNlcHRvckZhY3RvcnkpIHtcbiAgICAgIHJldmVyc2VkSW50ZXJjZXB0b3JzLnVuc2hpZnQoaXNTdHJpbmcoaW50ZXJjZXB0b3JGYWN0b3J5KVxuICAgICAgICAgID8gJGluamVjdG9yLmdldChpbnRlcmNlcHRvckZhY3RvcnkpIDogJGluamVjdG9yLmludm9rZShpbnRlcmNlcHRvckZhY3RvcnkpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSAkaHR0cFxuICAgICAqIEByZXF1aXJlcyBuZy4kaHR0cEJhY2tlbmRcbiAgICAgKiBAcmVxdWlyZXMgJGNhY2hlRmFjdG9yeVxuICAgICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAgICogQHJlcXVpcmVzICRxXG4gICAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGNvcmUgQW5ndWxhciBzZXJ2aWNlIHRoYXQgZmFjaWxpdGF0ZXMgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSByZW1vdGVcbiAgICAgKiBIVFRQIHNlcnZlcnMgdmlhIHRoZSBicm93c2VyJ3MgW1hNTEh0dHBSZXF1ZXN0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdClcbiAgICAgKiBvYmplY3Qgb3IgdmlhIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkuXG4gICAgICpcbiAgICAgKiBGb3IgdW5pdCB0ZXN0aW5nIGFwcGxpY2F0aW9ucyB0aGF0IHVzZSBgJGh0dHBgIHNlcnZpY2UsIHNlZVxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kICRodHRwQmFja2VuZCBtb2NrfS5cbiAgICAgKlxuICAgICAqIEZvciBhIGhpZ2hlciBsZXZlbCBvZiBhYnN0cmFjdGlvbiwgcGxlYXNlIGNoZWNrIG91dCB0aGUge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlXG4gICAgICogJHJlc291cmNlfSBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogVGhlICRodHRwIEFQSSBpcyBiYXNlZCBvbiB0aGUge0BsaW5rIG5nLiRxIGRlZmVycmVkL3Byb21pc2UgQVBJc30gZXhwb3NlZCBieVxuICAgICAqIHRoZSAkcSBzZXJ2aWNlLiBXaGlsZSBmb3Igc2ltcGxlIHVzYWdlIHBhdHRlcm5zIHRoaXMgZG9lc24ndCBtYXR0ZXIgbXVjaCwgZm9yIGFkdmFuY2VkIHVzYWdlXG4gICAgICogaXQgaXMgaW1wb3J0YW50IHRvIGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlc2UgQVBJcyBhbmQgdGhlIGd1YXJhbnRlZXMgdGhleSBwcm92aWRlLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBHZW5lcmFsIHVzYWdlXG4gICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50IOKAlCBhIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd1cmF0aW9uIG9iamVjdH0g4oCUXG4gICAgICogdGhhdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGFuIEhUVFAgcmVxdWVzdCBhbmQgcmV0dXJucyAgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgLy8gU2ltcGxlIEdFVCByZXF1ZXN0IGV4YW1wbGU6XG4gICAgICogICAkaHR0cCh7XG4gICAgICogICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICogICAgIHVybDogJy9zb21lVXJsJ1xuICAgICAqICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAvLyBjYWxsZWQgYXN5bmNocm9ub3VzbHkgaWYgYW4gZXJyb3Igb2NjdXJzXG4gICAgICogICAgICAgLy8gb3Igc2VydmVyIHJldHVybnMgcmVzcG9uc2Ugd2l0aCBhbiBlcnJvciBzdGF0dXMuXG4gICAgICogICAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIHJlc3BvbnNlIG9iamVjdCBoYXMgdGhlc2UgcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIFRoZSByZXNwb25zZSBib2R5IHRyYW5zZm9ybWVkIHdpdGggdGhlIHRyYW5zZm9ybVxuICAgICAqICAgICBmdW5jdGlvbnMuXG4gICAgICogICAtICoqc3RhdHVzKiog4oCTIGB7bnVtYmVyfWAg4oCTIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqICAgLSAqKmhlYWRlcnMqKiDigJMgYHtmdW5jdGlvbihbaGVhZGVyTmFtZV0pfWAg4oCTIEhlYWRlciBnZXR0ZXIgZnVuY3Rpb24uXG4gICAgICogICAtICoqY29uZmlnKiog4oCTIGB7T2JqZWN0fWAg4oCTIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSByZXF1ZXN0LlxuICAgICAqICAgLSAqKnN0YXR1c1RleHQqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBzdGF0dXMgdGV4dCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBBIHJlc3BvbnNlIHN0YXR1cyBjb2RlIGJldHdlZW4gMjAwIGFuZCAyOTkgaXMgY29uc2lkZXJlZCBhIHN1Y2Nlc3Mgc3RhdHVzIGFuZCB3aWxsIHJlc3VsdCBpblxuICAgICAqIHRoZSBzdWNjZXNzIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC4gQW55IHJlc3BvbnNlIHN0YXR1cyBjb2RlIG91dHNpZGUgb2YgdGhhdCByYW5nZSBpc1xuICAgICAqIGNvbnNpZGVyZWQgYW4gZXJyb3Igc3RhdHVzIGFuZCB3aWxsIHJlc3VsdCBpbiB0aGUgZXJyb3IgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLlxuICAgICAqIEFsc28sIHN0YXR1cyBjb2RlcyBsZXNzIHRoYW4gLTEgYXJlIG5vcm1hbGl6ZWQgdG8gemVyby4gLTEgdXN1YWxseSBtZWFucyB0aGUgcmVxdWVzdCB3YXNcbiAgICAgKiBhYm9ydGVkLCBlLmcuIHVzaW5nIGEgYGNvbmZpZy50aW1lb3V0YC5cbiAgICAgKiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsIFhNTEh0dHBSZXF1ZXN0IHdpbGwgdHJhbnNwYXJlbnRseSBmb2xsb3cgaXQsIG1lYW5pbmdcbiAgICAgKiB0aGF0IHRoZSBvdXRjb21lIChzdWNjZXNzIG9yIGVycm9yKSB3aWxsIGJlIGRldGVybWluZWQgYnkgdGhlIGZpbmFsIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTaG9ydGN1dCBtZXRob2RzXG4gICAgICpcbiAgICAgKiBTaG9ydGN1dCBtZXRob2RzIGFyZSBhbHNvIGF2YWlsYWJsZS4gQWxsIHNob3J0Y3V0IG1ldGhvZHMgcmVxdWlyZSBwYXNzaW5nIGluIHRoZSBVUkwsIGFuZFxuICAgICAqIHJlcXVlc3QgZGF0YSBtdXN0IGJlIHBhc3NlZCBpbiBmb3IgUE9TVC9QVVQgcmVxdWVzdHMuIEFuIG9wdGlvbmFsIGNvbmZpZyBjYW4gYmUgcGFzc2VkIGFzIHRoZVxuICAgICAqIGxhc3QgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgJGh0dHAuZ2V0KCcvc29tZVVybCcsIGNvbmZpZykudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIENvbXBsZXRlIGxpc3Qgb2Ygc2hvcnRjdXQgbWV0aG9kczpcbiAgICAgKlxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjaGVhZCAkaHR0cC5oZWFkfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3Bvc3QgJGh0dHAucG9zdH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2RlbGV0ZSAkaHR0cC5kZWxldGV9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjanNvbnAgJGh0dHAuanNvbnB9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcGF0Y2ggJGh0dHAucGF0Y2h9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIFdyaXRpbmcgVW5pdCBUZXN0cyB0aGF0IHVzZSAkaHR0cFxuICAgICAqIFdoZW4gdW5pdCB0ZXN0aW5nICh1c2luZyB7QGxpbmsgbmdNb2NrIG5nTW9ja30pLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbFxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kI2ZsdXNoICRodHRwQmFja2VuZC5mbHVzaCgpfSB0byBmbHVzaCBlYWNoIHBlbmRpbmdcbiAgICAgKiByZXF1ZXN0IHVzaW5nIHRyYWluZWQgcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogJGh0dHBCYWNrZW5kLmV4cGVjdEdFVCguLi4pO1xuICAgICAqICRodHRwLmdldCguLi4pO1xuICAgICAqICRodHRwQmFja2VuZC5mbHVzaCgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2V0dGluZyBIVFRQIEhlYWRlcnNcbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBzZXJ2aWNlIHdpbGwgYXV0b21hdGljYWxseSBhZGQgY2VydGFpbiBIVFRQIGhlYWRlcnMgdG8gYWxsIHJlcXVlc3RzLiBUaGVzZSBkZWZhdWx0c1xuICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOlxuICAgICAqXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOlxuICAgICAqICAgLSA8Y29kZT5BY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sIFxcKiYjNjUyNzk7LyYjNjUyNzk7XFwqPC9jb2RlPlxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICpcbiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAqIHdpdGggdGhlIGxvd2VyY2FzZWQgSFRUUCBtZXRob2QgbmFtZSBhcyB0aGUga2V5LCBlLmcuXG4gICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9YC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0cyBjYW4gYWxzbyBiZSBzZXQgYXQgcnVudGltZSB2aWEgdGhlIGAkaHR0cC5kZWZhdWx0c2Agb2JqZWN0IGluIHRoZSBzYW1lXG4gICAgICogZmFzaGlvbi4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBtb2R1bGUucnVuKGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICogICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljIFltVmxjRHBpYjI5dyc7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiwgeW91IGNhbiBzdXBwbHkgYSBgaGVhZGVyc2AgcHJvcGVydHkgaW4gdGhlIGNvbmZpZyBvYmplY3QgcGFzc2VkIHdoZW5cbiAgICAgKiBjYWxsaW5nIGAkaHR0cChjb25maWcpYCwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0cyB3aXRob3V0IGNoYW5naW5nIHRoZW0gZ2xvYmFsbHkuXG4gICAgICpcbiAgICAgKiBUbyBleHBsaWNpdGx5IHJlbW92ZSBhIGhlYWRlciBhdXRvbWF0aWNhbGx5IGFkZGVkIHZpYSAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMgb24gYSBwZXIgcmVxdWVzdCBiYXNpcyxcbiAgICAgKiBVc2UgdGhlIGBoZWFkZXJzYCBwcm9wZXJ0eSwgc2V0dGluZyB0aGUgZGVzaXJlZCBoZWFkZXIgdG8gYHVuZGVmaW5lZGAuIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgcmVxID0ge1xuICAgICAqICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgKiAgdXJsOiAnaHR0cDovL2V4YW1wbGUuY29tJyxcbiAgICAgKiAgaGVhZGVyczoge1xuICAgICAqICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICAgKiAgfSxcbiAgICAgKiAgZGF0YTogeyB0ZXN0OiAndGVzdCcgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHJlcSkudGhlbihmdW5jdGlvbigpey4uLn0sIGZ1bmN0aW9uKCl7Li4ufSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1xuICAgICAqXG4gICAgICogQm90aCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGNhbiBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnM6IGB0cmFuc2Zvcm1SZXF1ZXN0YFxuICAgICAqIGFuZCBgdHJhbnNmb3JtUmVzcG9uc2VgLiBUaGVzZSBwcm9wZXJ0aWVzIGNhbiBiZSBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpYCkgb3IgYW4gYXJyYXkgb2Ygc3VjaCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMsXG4gICAgICogd2hpY2ggYWxsb3dzIHlvdSB0byBgcHVzaGAgb3IgYHVuc2hpZnRgIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIGludG8gdGhlIHRyYW5zZm9ybWF0aW9uIGNoYWluLlxuICAgICAqXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgKiAqKk5vdGU6KiogQW5ndWxhciBkb2VzIG5vdCBtYWtlIGEgY29weSBvZiB0aGUgYGRhdGFgIHBhcmFtZXRlciBiZWZvcmUgaXQgaXMgcGFzc2VkIGludG8gdGhlIGB0cmFuc2Zvcm1SZXF1ZXN0YCBwaXBlbGluZS5cbiAgICAgKiBUaGF0IG1lYW5zIGNoYW5nZXMgdG8gdGhlIHByb3BlcnRpZXMgb2YgYGRhdGFgIGFyZSBub3QgbG9jYWwgdG8gdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiAoc2luY2UgSmF2YXNjcmlwdCBwYXNzZXMgb2JqZWN0cyBieSByZWZlcmVuY2UpLlxuICAgICAqIEZvciBleGFtcGxlLCB3aGVuIGNhbGxpbmcgYCRodHRwLmdldCh1cmwsICRzY29wZS5teU9iamVjdClgLCBtb2RpZmljYXRpb25zIHRvIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzIGluIGEgdHJhbnNmb3JtUmVxdWVzdFxuICAgICAqIGZ1bmN0aW9uIHdpbGwgYmUgcmVmbGVjdGVkIG9uIHRoZSBzY29wZSBhbmQgaW4gYW55IHRlbXBsYXRlcyB3aGVyZSB0aGUgb2JqZWN0IGlzIGRhdGEtYm91bmQuXG4gICAgICogVG8gcHJldmVudCB0aGlzLCB0cmFuc2Zvcm0gZnVuY3Rpb25zIHNob3VsZCBoYXZlIG5vIHNpZGUtZWZmZWN0cy5cbiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgcHJvcGVydGllcywgaXQgaXMgcmVjb21tZW5kZWQgdG8gbWFrZSBhIGNvcHkgb2YgdGhlIGRhdGEsIG9yIGNyZWF0ZSBuZXcgb2JqZWN0IHRvIHJldHVybi5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKlxuICAgICAqICMjIyBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc1xuICAgICAqXG4gICAgICogVGhlIGAkaHR0cFByb3ZpZGVyYCBwcm92aWRlciBhbmQgYCRodHRwYCBzZXJ2aWNlIGV4cG9zZSBgZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kXG4gICAgICogYGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzLiBJZiBhIHJlcXVlc3QgZG9lcyBub3QgcHJvdmlkZSBpdHMgb3duIHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIHRoZW4gdGhlc2Ugd2lsbCBiZSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhdWdtZW50IG9yIHJlcGxhY2UgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIGJ5IG1vZGlmeWluZyB0aGVzZSBwcm9wZXJ0aWVzIGJ5IGFkZGluZyB0byBvclxuICAgICAqIHJlcGxhY2luZyB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnM6XG4gICAgICpcbiAgICAgKiBSZXF1ZXN0IHRyYW5zZm9ybWF0aW9ucyAoYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCk6XG4gICAgICpcbiAgICAgKiAtIElmIHRoZSBgZGF0YWAgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXRcbiAgICAgKiAgIGludG8gSlNPTiBmb3JtYXQuXG4gICAgICpcbiAgICAgKiBSZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCBhbmQgYCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCk6XG4gICAgICpcbiAgICAgKiAgLSBJZiBYU1JGIHByZWZpeCBpcyBkZXRlY3RlZCwgc3RyaXAgaXQgKHNlZSBTZWN1cml0eSBDb25zaWRlcmF0aW9ucyBzZWN0aW9uIGJlbG93KS5cbiAgICAgKiAgLSBJZiBKU09OIHJlc3BvbnNlIGlzIGRldGVjdGVkLCBkZXNlcmlhbGl6ZSBpdCB1c2luZyBhIEpTT04gcGFyc2VyLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyMgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnMgUGVyIFJlcXVlc3RcbiAgICAgKlxuICAgICAqIElmIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSByZXF1ZXN0L3Jlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucyBvbmx5IGZvciBhIHNpbmdsZSByZXF1ZXN0IHRoZW4gcHJvdmlkZVxuICAgICAqIGB0cmFuc2Zvcm1SZXF1ZXN0YCBhbmQvb3IgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9uIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBwYXNzZWRcbiAgICAgKiBpbnRvIGAkaHR0cGAuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgaWYgeW91IHByb3ZpZGUgdGhlc2UgcHJvcGVydGllcyBvbiB0aGUgY29uZmlnIG9iamVjdCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgd2lsbCBiZVxuICAgICAqIG92ZXJ3cml0dGVuLiBJZiB5b3Ugd2lzaCB0byBhdWdtZW50IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyB0aGVuIHlvdSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB5b3VyXG4gICAgICogbG9jYWwgdHJhbnNmb3JtYXRpb24gYXJyYXkuXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIGNvZGUgZGVtb25zdHJhdGVzIGFkZGluZyBhIG5ldyByZXNwb25zZSB0cmFuc2Zvcm1hdGlvbiB0byBiZSBydW4gYWZ0ZXIgdGhlIGRlZmF1bHQgcmVzcG9uc2VcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgaGF2ZSBiZWVuIHJ1bi5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogZnVuY3Rpb24gYXBwZW5kVHJhbnNmb3JtKGRlZmF1bHRzLCB0cmFuc2Zvcm0pIHtcbiAgICAgKlxuICAgICAqICAgLy8gV2UgY2FuJ3QgZ3VhcmFudGVlIHRoYXQgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb24gaXMgYW4gYXJyYXlcbiAgICAgKiAgIGRlZmF1bHRzID0gYW5ndWxhci5pc0FycmF5KGRlZmF1bHRzKSA/IGRlZmF1bHRzIDogW2RlZmF1bHRzXTtcbiAgICAgKlxuICAgICAqICAgLy8gQXBwZW5kIHRoZSBuZXcgdHJhbnNmb3JtYXRpb24gdG8gdGhlIGRlZmF1bHRzXG4gICAgICogICByZXR1cm4gZGVmYXVsdHMuY29uY2F0KHRyYW5zZm9ybSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogJGh0dHAoe1xuICAgICAqICAgdXJsOiAnLi4uJyxcbiAgICAgKiAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICogICB0cmFuc2Zvcm1SZXNwb25zZTogYXBwZW5kVHJhbnNmb3JtKCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgICByZXR1cm4gZG9UcmFuc2Zvcm0odmFsdWUpO1xuICAgICAqICAgfSlcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgQ2FjaGluZ1xuICAgICAqXG4gICAgICoge0BsaW5rIG5nLiRodHRwIGAkaHR0cGB9IHJlc3BvbnNlcyBhcmUgbm90IGNhY2hlZCBieSBkZWZhdWx0LiBUbyBlbmFibGUgY2FjaGluZywgeW91IG11c3RcbiAgICAgKiBzZXQgdGhlIGNvbmZpZy5jYWNoZSB2YWx1ZSBvciB0aGUgZGVmYXVsdCBjYWNoZSB2YWx1ZSB0byBUUlVFIG9yIHRvIGEgY2FjaGUgb2JqZWN0IChjcmVhdGVkXG4gICAgICogd2l0aCB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9KS4gSWYgZGVmaW5lZCwgdGhlIHZhbHVlIG9mIGNvbmZpZy5jYWNoZSB0YWtlc1xuICAgICAqIHByZWNlZGVuY2Ugb3ZlciB0aGUgZGVmYXVsdCBjYWNoZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEluIG9yZGVyIHRvOlxuICAgICAqICAgKiBjYWNoZSBhbGwgcmVzcG9uc2VzIC0gc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlIHRvIFRSVUUgb3IgdG8gYSBjYWNoZSBvYmplY3RcbiAgICAgKiAgICogY2FjaGUgYSBzcGVjaWZpYyByZXNwb25zZSAtIHNldCBjb25maWcuY2FjaGUgdmFsdWUgdG8gVFJVRSBvciB0byBhIGNhY2hlIG9iamVjdFxuICAgICAqXG4gICAgICogSWYgY2FjaGluZyBpcyBlbmFibGVkLCBidXQgbmVpdGhlciB0aGUgZGVmYXVsdCBjYWNoZSBub3IgY29uZmlnLmNhY2hlIGFyZSBzZXQgdG8gYSBjYWNoZSBvYmplY3QsXG4gICAgICogdGhlbiB0aGUgZGVmYXVsdCBgJGNhY2hlRmFjdG9yeShcIiRodHRwXCIpYCBvYmplY3QgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlIGNhbiBiZSBzZXQgYnkgdXBkYXRpbmcgdGhlXG4gICAgICoge0BsaW5rIG5nLiRodHRwI2RlZmF1bHRzIGAkaHR0cC5kZWZhdWx0cy5jYWNoZWB9IHByb3BlcnR5IG9yIHRoZVxuICAgICAqIHtAbGluayAkaHR0cFByb3ZpZGVyI2RlZmF1bHRzIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmNhY2hlYH0gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBXaGVuIGNhY2hpbmcgaXMgZW5hYmxlZCwge0BsaW5rIG5nLiRodHRwIGAkaHR0cGB9IHN0b3JlcyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIHVzaW5nXG4gICAgICogdGhlIHJlbGV2YW50IGNhY2hlIG9iamVjdC4gVGhlIG5leHQgdGltZSB0aGUgc2FtZSByZXF1ZXN0IGlzIG1hZGUsIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgICAqIGZyb20gdGhlIGNhY2hlIHdpdGhvdXQgc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIFRha2Ugbm90ZSB0aGF0OlxuICAgICAqXG4gICAgICogICAqIE9ubHkgR0VUIGFuZCBKU09OUCByZXF1ZXN0cyBhcmUgY2FjaGVkLlxuICAgICAqICAgKiBUaGUgY2FjaGUga2V5IGlzIHRoZSByZXF1ZXN0IFVSTCBpbmNsdWRpbmcgc2VhcmNoIHBhcmFtZXRlcnM7IGhlYWRlcnMgYXJlIG5vdCBjb25zaWRlcmVkLlxuICAgICAqICAgKiBDYWNoZWQgcmVzcG9uc2VzIGFyZSByZXR1cm5lZCBhc3luY2hyb25vdXNseSwgaW4gdGhlIHNhbWUgd2F5IGFzIHJlc3BvbnNlcyBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICogICAqIElmIG11bHRpcGxlIGlkZW50aWNhbCByZXF1ZXN0cyBhcmUgbWFkZSB1c2luZyB0aGUgc2FtZSBjYWNoZSwgd2hpY2ggaXMgbm90IHlldCBwb3B1bGF0ZWQsXG4gICAgICogICAgIG9uZSByZXF1ZXN0IHdpbGwgYmUgbWFkZSB0byB0aGUgc2VydmVyIGFuZCByZW1haW5pbmcgcmVxdWVzdHMgd2lsbCByZXR1cm4gdGhlIHNhbWUgcmVzcG9uc2UuXG4gICAgICogICAqIEEgY2FjaGUtY29udHJvbCBoZWFkZXIgb24gdGhlIHJlc3BvbnNlIGRvZXMgbm90IGFmZmVjdCBpZiBvciBob3cgcmVzcG9uc2VzIGFyZSBjYWNoZWQuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIEludGVyY2VwdG9yc1xuICAgICAqXG4gICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJHEgJHEgYW5kIGRlZmVycmVkL3Byb21pc2UgQVBJc30uXG4gICAgICpcbiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiwgb3IgYW55IGtpbmQgb2Ygc3luY2hyb25vdXMgb3JcbiAgICAgKiBhc3luY2hyb25vdXMgcHJlLXByb2Nlc3Npbmcgb2YgcmVxdWVzdCBvciBwb3N0cHJvY2Vzc2luZyBvZiByZXNwb25zZXMsIGl0IGlzIGRlc2lyYWJsZSB0byBiZVxuICAgICAqIGFibGUgdG8gaW50ZXJjZXB0IHJlcXVlc3RzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgdG8gdGhlIHNlcnZlciBhbmRcbiAgICAgKiByZXNwb25zZXMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBhcHBsaWNhdGlvbiBjb2RlIHRoYXRcbiAgICAgKiBpbml0aWF0ZWQgdGhlc2UgcmVxdWVzdHMuIFRoZSBpbnRlcmNlcHRvcnMgbGV2ZXJhZ2UgdGhlIHtAbGluayBuZy4kcVxuICAgICAqIHByb21pc2UgQVBJc30gdG8gZnVsZmlsbCB0aGlzIG5lZWQgZm9yIGJvdGggc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZy5cbiAgICAgKlxuICAgICAqIFRoZSBpbnRlcmNlcHRvcnMgYXJlIHNlcnZpY2UgZmFjdG9yaWVzIHRoYXQgYXJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRodHRwUHJvdmlkZXJgIGJ5XG4gICAgICogYWRkaW5nIHRoZW0gdG8gdGhlIGAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9yc2AgYXJyYXkuIFRoZSBmYWN0b3J5IGlzIGNhbGxlZCBhbmRcbiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IuXG4gICAgICpcbiAgICAgKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIGludGVyY2VwdG9ycyAoYW5kIHR3byBraW5kcyBvZiByZWplY3Rpb24gaW50ZXJjZXB0b3JzKTpcbiAgICAgKlxuICAgICAqICAgKiBgcmVxdWVzdGA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggYSBodHRwIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd9IG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG9cbiAgICAgKiAgICAgbW9kaWZ5IHRoZSBgY29uZmlnYCBvYmplY3Qgb3IgY3JlYXRlIGEgbmV3IG9uZS4gVGhlIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiB0aGUgYGNvbmZpZ2BcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYGNvbmZpZ2Agb3IgYSBuZXcgYGNvbmZpZ2Agb2JqZWN0LlxuICAgICAqICAgKiBgcmVxdWVzdEVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yXG4gICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICogICAqIGByZXNwb25zZWA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggaHR0cCBgcmVzcG9uc2VgIG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG9cbiAgICAgKiAgICAgbW9kaWZ5IHRoZSBgcmVzcG9uc2VgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgcmVzcG9uc2VgXG4gICAgICogICAgIG9iamVjdCBkaXJlY3RseSwgb3IgYXMgYSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGByZXNwb25zZWAgb3IgYSBuZXcgYHJlc3BvbnNlYCBvYmplY3QuXG4gICAgICogICAqIGByZXNwb25zZUVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yXG4gICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAvLyByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgYXMgYSBzZXJ2aWNlXG4gICAgICogICAkcHJvdmlkZS5mYWN0b3J5KCdteUh0dHBJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgJ3JlcXVlc3RFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKlxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAgJ3Jlc3BvbnNlJzogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzXG4gICAgICogICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgJ3Jlc3BvbnNlRXJyb3InOiBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvclxuICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkge1xuICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2VcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH07XG4gICAgICogICB9KTtcbiAgICAgKlxuICAgICAqICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnbXlIdHRwSW50ZXJjZXB0b3InKTtcbiAgICAgKlxuICAgICAqXG4gICAgICogICAvLyBhbHRlcm5hdGl2ZWx5LCByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgdmlhIGFuIGFub255bW91cyBmYWN0b3J5XG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmVcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH07XG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zXG4gICAgICpcbiAgICAgKiBXaGVuIGRlc2lnbmluZyB3ZWIgYXBwbGljYXRpb25zLCBjb25zaWRlciBzZWN1cml0eSB0aHJlYXRzIGZyb206XG4gICAgICpcbiAgICAgKiAtIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiAtIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KVxuICAgICAqXG4gICAgICogQm90aCBzZXJ2ZXIgYW5kIHRoZSBjbGllbnQgbXVzdCBjb29wZXJhdGUgaW4gb3JkZXIgdG8gZWxpbWluYXRlIHRoZXNlIHRocmVhdHMuIEFuZ3VsYXIgY29tZXNcbiAgICAgKiBwcmUtY29uZmlndXJlZCB3aXRoIHN0cmF0ZWdpZXMgdGhhdCBhZGRyZXNzIHRoZXNlIGlzc3VlcywgYnV0IGZvciB0aGlzIHRvIHdvcmsgYmFja2VuZCBzZXJ2ZXJcbiAgICAgKiBjb29wZXJhdGlvbiBpcyByZXF1aXJlZC5cbiAgICAgKlxuICAgICAqICMjIyBKU09OIFZ1bG5lcmFiaWxpdHkgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogQSBbSlNPTiB2dWxuZXJhYmlsaXR5XShodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgpXG4gICAgICogYWxsb3dzIHRoaXJkIHBhcnR5IHdlYnNpdGUgdG8gdHVybiB5b3VyIEpTT04gcmVzb3VyY2UgVVJMIGludG9cbiAgICAgKiBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApIHJlcXVlc3QgdW5kZXIgc29tZSBjb25kaXRpb25zLiBUb1xuICAgICAqIGNvdW50ZXIgdGhpcyB5b3VyIHNlcnZlciBjYW4gcHJlZml4IGFsbCBKU09OIHJlcXVlc3RzIHdpdGggZm9sbG93aW5nIHN0cmluZyBgXCIpXX0nLFxcblwiYC5cbiAgICAgKiBBbmd1bGFyIHdpbGwgYXV0b21hdGljYWxseSBzdHJpcCB0aGUgcHJlZml4IGJlZm9yZSBwcm9jZXNzaW5nIGl0IGFzIEpTT04uXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSBpZiB5b3VyIHNlcnZlciBuZWVkcyB0byByZXR1cm46XG4gICAgICogYGBganNcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiB3aGljaCBpcyB2dWxuZXJhYmxlIHRvIGF0dGFjaywgeW91ciBzZXJ2ZXIgY2FuIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqICldfScsXG4gICAgICogWydvbmUnLCd0d28nXVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQW5ndWxhciB3aWxsIHN0cmlwIHRoZSBwcmVmaXgsIGJlZm9yZSBwcm9jZXNzaW5nIHRoZSBKU09OLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyMgQ3Jvc3MgU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgKFhTUkYpIFByb3RlY3Rpb25cbiAgICAgKlxuICAgICAqIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KSBpcyBhbiBhdHRhY2sgdGVjaG5pcXVlIGJ5XG4gICAgICogd2hpY2ggdGhlIGF0dGFja2VyIGNhbiB0cmljayBhbiBhdXRoZW50aWNhdGVkIHVzZXIgaW50byB1bmtub3dpbmdseSBleGVjdXRpbmcgYWN0aW9ucyBvbiB5b3VyXG4gICAgICogd2Vic2l0ZS4gQW5ndWxhciBwcm92aWRlcyBhIG1lY2hhbmlzbSB0byBjb3VudGVyIFhTUkYuIFdoZW4gcGVyZm9ybWluZyBYSFIgcmVxdWVzdHMsIHRoZVxuICAgICAqICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llIChieSBkZWZhdWx0LCBgWFNSRi1UT0tFTmApIGFuZCBzZXRzIGl0IGFzIGFuIEhUVFBcbiAgICAgKiBoZWFkZXIgKGBYLVhTUkYtVE9LRU5gKS4gU2luY2Ugb25seSBKYXZhU2NyaXB0IHRoYXQgcnVucyBvbiB5b3VyIGRvbWFpbiBjb3VsZCByZWFkIHRoZVxuICAgICAqIGNvb2tpZSwgeW91ciBzZXJ2ZXIgY2FuIGJlIGFzc3VyZWQgdGhhdCB0aGUgWEhSIGNhbWUgZnJvbSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4uXG4gICAgICogVGhlIGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cy5cbiAgICAgKlxuICAgICAqIFRvIHRha2UgYWR2YW50YWdlIG9mIHRoaXMsIHlvdXIgc2VydmVyIG5lZWRzIHRvIHNldCBhIHRva2VuIGluIGEgSmF2YVNjcmlwdCByZWFkYWJsZSBzZXNzaW9uXG4gICAgICogY29va2llIGNhbGxlZCBgWFNSRi1UT0tFTmAgb24gdGhlIGZpcnN0IEhUVFAgR0VUIHJlcXVlc3QuIE9uIHN1YnNlcXVlbnQgWEhSIHJlcXVlc3RzIHRoZVxuICAgICAqIHNlcnZlciBjYW4gdmVyaWZ5IHRoYXQgdGhlIGNvb2tpZSBtYXRjaGVzIGBYLVhTUkYtVE9LRU5gIEhUVFAgaGVhZGVyLCBhbmQgdGhlcmVmb3JlIGJlIHN1cmVcbiAgICAgKiB0aGF0IG9ubHkgSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluIGNvdWxkIGhhdmUgc2VudCB0aGUgcmVxdWVzdC4gVGhlIHRva2VuIG11c3QgYmVcbiAgICAgKiB1bmlxdWUgZm9yIGVhY2ggdXNlciBhbmQgbXVzdCBiZSB2ZXJpZmlhYmxlIGJ5IHRoZSBzZXJ2ZXIgKHRvIHByZXZlbnQgdGhlIEphdmFTY3JpcHQgZnJvbVxuICAgICAqIG1ha2luZyB1cCBpdHMgb3duIHRva2VucykuIFdlIHJlY29tbWVuZCB0aGF0IHRoZSB0b2tlbiBpcyBhIGRpZ2VzdCBvZiB5b3VyIHNpdGUnc1xuICAgICAqIGF1dGhlbnRpY2F0aW9uIGNvb2tpZSB3aXRoIGEgW3NhbHRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NhbHRfKGNyeXB0b2dyYXBoeSYjNDE7KVxuICAgICAqIGZvciBhZGRlZCBzZWN1cml0eS5cbiAgICAgKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBoZWFkZXJzIGNhbiBiZSBzcGVjaWZpZWQgdXNpbmcgdGhlIHhzcmZIZWFkZXJOYW1lIGFuZCB4c3JmQ29va2llTmFtZVxuICAgICAqIHByb3BlcnRpZXMgb2YgZWl0aGVyICRodHRwUHJvdmlkZXIuZGVmYXVsdHMgYXQgY29uZmlnLXRpbWUsICRodHRwLmRlZmF1bHRzIGF0IHJ1bi10aW1lLFxuICAgICAqIG9yIHRoZSBwZXItcmVxdWVzdCBjb25maWcgb2JqZWN0LlxuICAgICAqXG4gICAgICogSW4gb3JkZXIgdG8gcHJldmVudCBjb2xsaXNpb25zIGluIGVudmlyb25tZW50cyB3aGVyZSBtdWx0aXBsZSBBbmd1bGFyIGFwcHMgc2hhcmUgdGhlXG4gICAgICogc2FtZSBkb21haW4gb3Igc3ViZG9tYWluLCB3ZSByZWNvbW1lbmQgdGhhdCBlYWNoIGFwcGxpY2F0aW9uIHVzZXMgdW5pcXVlIGNvb2tpZSBuYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlXG4gICAgICogICAgcHJvY2Vzc2VkLiBUaGUgb2JqZWN0IGhhcyBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKVxuICAgICAqICAgIC0gKip1cmwqKiDigJMgYHtzdHJpbmd8VHJ1c3RlZE9iamVjdH1gIOKAkyBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkO1xuICAgICAqICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgKiAgICAtICoqcGFyYW1zKiog4oCTIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHdoaWNoIHdpbGwgYmUgc2VyaWFsaXplZFxuICAgICAqICAgICAgd2l0aCB0aGUgYHBhcmFtU2VyaWFsaXplcmAgYW5kIGFwcGVuZGVkIGFzIEdFVCBwYXJhbWV0ZXJzLlxuICAgICAqICAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBEYXRhIHRvIGJlIHNlbnQgYXMgdGhlIHJlcXVlc3QgbWVzc2FnZSBkYXRhLlxuICAgICAqICAgIC0gKipoZWFkZXJzKiog4oCTIGB7T2JqZWN0fWAg4oCTIE1hcCBvZiBzdHJpbmdzIG9yIGZ1bmN0aW9ucyB3aGljaCByZXR1cm4gc3RyaW5ncyByZXByZXNlbnRpbmdcbiAgICAgKiAgICAgIEhUVFAgaGVhZGVycyB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuIElmIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiBpcyBudWxsLCB0aGVcbiAgICAgKiAgICAgIGhlYWRlciB3aWxsIG5vdCBiZSBzZW50LiBGdW5jdGlvbnMgYWNjZXB0IGEgY29uZmlnIG9iamVjdCBhcyBhbiBhcmd1bWVudC5cbiAgICAgKiAgICAtICoqZXZlbnRIYW5kbGVycyoqIC0gYHtPYmplY3R9YCAtIEV2ZW50IGxpc3RlbmVycyB0byBiZSBib3VuZCB0byB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0LlxuICAgICAqICAgICAgVG8gYmluZCBldmVudHMgdG8gdGhlIFhNTEh0dHBSZXF1ZXN0IHVwbG9hZCBvYmplY3QsIHVzZSBgdXBsb2FkRXZlbnRIYW5kbGVyc2AuXG4gICAgICogICAgICBUaGUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgY29udGV4dCBvZiBhIGAkYXBwbHlgIGJsb2NrLlxuICAgICAqICAgIC0gKip1cGxvYWRFdmVudEhhbmRsZXJzKiogLSBge09iamVjdH1gIC0gRXZlbnQgbGlzdGVuZXJzIHRvIGJlIGJvdW5kIHRvIHRoZSBYTUxIdHRwUmVxdWVzdCB1cGxvYWRcbiAgICAgKiAgICAgIG9iamVjdC4gVG8gYmluZCBldmVudHMgdG8gdGhlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCwgdXNlIGBldmVudEhhbmRsZXJzYC5cbiAgICAgKiAgICAgIFRoZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBjb250ZXh0IG9mIGEgYCRhcHBseWAgYmxvY2suXG4gICAgICogICAgLSAqKnhzcmZIZWFkZXJOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqeHNyZkNvb2tpZU5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAk1xuICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcik+fWAg4oCTXG4gICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAqICAgICAgU2VlIHtAbGluayBuZy4kaHR0cCNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdFxuICAgICAqICAgICAgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnN9XG4gICAgICogICAgLSAqKnRyYW5zZm9ybVJlc3BvbnNlKiog4oCTXG4gICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyl8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyk+fWAg4oCTXG4gICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAgICAgKiAgICAgIHJlc3BvbnNlIGJvZHksIGhlYWRlcnMgYW5kIHN0YXR1cyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpIHZlcnNpb24uXG4gICAgICogICAgICBTZWUge0BsaW5rIG5nLiRodHRwI292ZXJyaWRpbmctdGhlLWRlZmF1bHQtdHJhbnNmb3JtYXRpb25zLXBlci1yZXF1ZXN0XG4gICAgICogICAgICBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc31cbiAgICAgKiAgICAtICoqcGFyYW1TZXJpYWxpemVyKiogLSBge3N0cmluZ3xmdW5jdGlvbihPYmplY3Q8c3RyaW5nLHN0cmluZz4pOnN0cmluZ31gIC0gQSBmdW5jdGlvbiB1c2VkIHRvXG4gICAgICogICAgICBwcmVwYXJlIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcmVxdWVzdCBwYXJhbWV0ZXJzIChzcGVjaWZpZWQgYXMgYW4gb2JqZWN0KS5cbiAgICAgKiAgICAgIElmIHNwZWNpZmllZCBhcyBzdHJpbmcsIGl0IGlzIGludGVycHJldGVkIGFzIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGVcbiAgICAgKiAgICAgIHtAbGluayAkaW5qZWN0b3IgJGluamVjdG9yfSwgd2hpY2ggbWVhbnMgeW91IGNhbiBjcmVhdGUgeW91ciBvd24gc2VyaWFsaXplclxuICAgICAqICAgICAgYnkgcmVnaXN0ZXJpbmcgaXQgYXMgYSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlIHNlcnZpY2V9LlxuICAgICAqICAgICAgVGhlIGRlZmF1bHQgc2VyaWFsaXplciBpcyB0aGUge0BsaW5rICRodHRwUGFyYW1TZXJpYWxpemVyICRodHRwUGFyYW1TZXJpYWxpemVyfTtcbiAgICAgKiAgICAgIGFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSB7QGxpbmsgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2V9XG4gICAgICogICAgLSAqKmNhY2hlKiog4oCTIGB7Ym9vbGVhbnxPYmplY3R9YCDigJMgQSBib29sZWFuIHZhbHVlIG9yIG9iamVjdCBjcmVhdGVkIHdpdGhcbiAgICAgKiAgICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0gdG8gZW5hYmxlIG9yIGRpc2FibGUgY2FjaGluZyBvZiB0aGUgSFRUUCByZXNwb25zZS5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgJGh0dHAjY2FjaGluZyAkaHR0cCBDYWNoaW5nfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiAgICAtICoqdGltZW91dCoqIOKAkyBge251bWJlcnxQcm9taXNlfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCBvciB7QGxpbmsgbmcuJHEgcHJvbWlzZX1cbiAgICAgKiAgICAgIHRoYXQgc2hvdWxkIGFib3J0IHRoZSByZXF1ZXN0IHdoZW4gcmVzb2x2ZWQuXG4gICAgICogICAgLSAqKndpdGhDcmVkZW50aWFscyoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGVcbiAgICAgKiAgICAgIFhIUiBvYmplY3QuIFNlZSBbcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRUUC9BY2Nlc3NfY29udHJvbF9DT1JTI1JlcXVlc3RzX3dpdGhfY3JlZGVudGlhbHMpXG4gICAgICogICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiAgICAtICoqcmVzcG9uc2VUeXBlKiogLSBge3N0cmluZ31gIC0gc2VlXG4gICAgICogICAgICBbWE1MSHR0cFJlcXVlc3QucmVzcG9uc2VUeXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3QjeG1saHR0cHJlcXVlc3QtcmVzcG9uc2V0eXBlKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gUmV0dXJucyBhIHtAbGluayBuZy4kcSBgUHJvbWlzZX1gIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB0byBhIHJlc3BvbnNlIG9iamVjdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcyBvciBmYWlscy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZ1xuICAgICAqICAgcmVxdWVzdHMuIFRoaXMgaXMgcHJpbWFyaWx5IG1lYW50IHRvIGJlIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbjxleGFtcGxlIG1vZHVsZT1cImh0dHBFeGFtcGxlXCIgbmFtZT1cImh0dHAtc2VydmljZVwiPlxuPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgPGRpdiBuZy1jb250cm9sbGVyPVwiRmV0Y2hDb250cm9sbGVyXCI+XG4gICAgPHNlbGVjdCBuZy1tb2RlbD1cIm1ldGhvZFwiIGFyaWEtbGFiZWw9XCJSZXF1ZXN0IG1ldGhvZFwiPlxuICAgICAgPG9wdGlvbj5HRVQ8L29wdGlvbj5cbiAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVybFwiIHNpemU9XCI4MFwiIGFyaWEtbGFiZWw9XCJVUkxcIiAvPlxuICAgIDxidXR0b24gaWQ9XCJmZXRjaGJ0blwiIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxuICAgIDxidXR0b24gaWQ9XCJzYW1wbGVnZXRidG5cIiBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJylcIj5TYW1wbGUgR0VUPC9idXR0b24+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJyxcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/bmFtZT1TdXBlciUyMEhlcm8nKVwiPlxuICAgICAgU2FtcGxlIEpTT05QXG4gICAgPC9idXR0b24+XG4gICAgPGJ1dHRvbiBpZD1cImludmFsaWRqc29ucGJ0blwiXG4gICAgICBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdKU09OUCcsICdodHRwczovL2FuZ3VsYXJqcy5vcmcvZG9lc250ZXhpc3QnKVwiPlxuICAgICAgICBJbnZhbGlkIEpTT05QXG4gICAgICA8L2J1dHRvbj5cbiAgICA8cHJlPmh0dHAgc3RhdHVzIGNvZGU6IHt7c3RhdHVzfX08L3ByZT5cbiAgICA8cHJlPmh0dHAgcmVzcG9uc2UgZGF0YToge3tkYXRhfX08L3ByZT5cbiAgPC9kaXY+XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gIGFuZ3VsYXIubW9kdWxlKCdodHRwRXhhbXBsZScsIFtdKVxuICAgIC5jb25maWcoWyckc2NlRGVsZWdhdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRzY2VEZWxlZ2F0ZVByb3ZpZGVyKSB7XG4gICAgICAvLyBXZSBtdXN0IHdoaXRlbGlzdCB0aGUgSlNPTlAgZW5kcG9pbnQgdGhhdCB3ZSBhcmUgdXNpbmcgdG8gc2hvdyB0aGF0IHdlIHRydXN0IGl0XG4gICAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdChbXG4gICAgICAgICdzZWxmJyxcbiAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy8qKidcbiAgICAgIF0pO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdGZXRjaENvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsXG4gICAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkdGVtcGxhdGVDYWNoZSkge1xuICAgICAgICAkc2NvcGUubWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICRzY29wZS51cmwgPSAnaHR0cC1oZWxsby5odG1sJztcblxuICAgICAgICAkc2NvcGUuZmV0Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUuY29kZSA9IG51bGw7XG4gICAgICAgICAgJHNjb3BlLnJlc3BvbnNlID0gbnVsbDtcblxuICAgICAgICAgICRodHRwKHttZXRob2Q6ICRzY29wZS5tZXRob2QsIHVybDogJHNjb3BlLnVybCwgY2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgICAgICRzY29wZS5kYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5kYXRhID0gcmVzcG9uc2UuZGF0YSB8fCAnUmVxdWVzdCBmYWlsZWQnO1xuICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7XG4gICAgICAgICAgJHNjb3BlLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgICAkc2NvcGUudXJsID0gdXJsO1xuICAgICAgICB9O1xuICAgICAgfV0pO1xuPC9maWxlPlxuPGZpbGUgbmFtZT1cImh0dHAtaGVsbG8uaHRtbFwiPlxuICBIZWxsbywgJGh0dHAhXG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gIHZhciBzdGF0dXMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3N0YXR1cycpKTtcbiAgdmFyIGRhdGEgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2RhdGEnKSk7XG4gIHZhciBmZXRjaEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ZldGNoYnRuJykpO1xuICB2YXIgc2FtcGxlR2V0QnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlZ2V0YnRuJykpO1xuICB2YXIgaW52YWxpZEpzb25wQnRuID0gZWxlbWVudChieS5pZCgnaW52YWxpZGpzb25wYnRuJykpO1xuXG4gIGl0KCdzaG91bGQgbWFrZSBhbiB4aHIgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHtcbiAgICBzYW1wbGVHZXRCdG4uY2xpY2soKTtcbiAgICBmZXRjaEJ0bi5jbGljaygpO1xuICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTtcbiAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goL0hlbGxvLCBcXCRodHRwIS8pO1xuICB9KTtcblxuLy8gQ29tbWVudGVkIG91dCBkdWUgdG8gZmxha2VzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTE4NVxuLy8gaXQoJ3Nob3VsZCBtYWtlIGEgSlNPTlAgcmVxdWVzdCB0byBhbmd1bGFyanMub3JnJywgZnVuY3Rpb24oKSB7XG4vLyAgIHZhciBzYW1wbGVKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ3NhbXBsZWpzb25wYnRuJykpO1xuLy8gICBzYW1wbGVKc29ucEJ0bi5jbGljaygpO1xuLy8gICBmZXRjaEJ0bi5jbGljaygpO1xuLy8gICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMjAwJyk7XG4vLyAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTtcbi8vIH0pO1xuXG4gIGl0KCdzaG91bGQgbWFrZSBKU09OUCByZXF1ZXN0IHRvIGludmFsaWQgVVJMIGFuZCBpbnZva2UgdGhlIGVycm9yIGhhbmRsZXInLFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgaW52YWxpZEpzb25wQnRuLmNsaWNrKCk7XG4gICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgnUmVxdWVzdCBmYWlsZWQnKTtcbiAgfSk7XG48L2ZpbGU+XG48L2V4YW1wbGU+XG4gICAgICovXG4gICAgZnVuY3Rpb24gJGh0dHAocmVxdWVzdENvbmZpZykge1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcXVlc3RDb25maWcpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGh0dHAnKSgnYmFkcmVxJywgJ0h0dHAgcmVxdWVzdCBjb25maWd1cmF0aW9uIG11c3QgYmUgYW4gb2JqZWN0LiAgUmVjZWl2ZWQ6IHswfScsIHJlcXVlc3RDb25maWcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU3RyaW5nKCRzY2UudmFsdWVPZihyZXF1ZXN0Q29uZmlnLnVybCkpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGh0dHAnKSgnYmFkcmVxJywgJ0h0dHAgcmVxdWVzdCBjb25maWd1cmF0aW9uIHVybCBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgJHNjZSB0cnVzdGVkIG9iamVjdC4gIFJlY2VpdmVkOiB7MH0nLCByZXF1ZXN0Q29uZmlnLnVybCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSBleHRlbmQoe1xuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0LFxuICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgIHBhcmFtU2VyaWFsaXplcjogZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyLFxuICAgICAgICBqc29ucENhbGxiYWNrUGFyYW06IGRlZmF1bHRzLmpzb25wQ2FsbGJhY2tQYXJhbVxuICAgICAgfSwgcmVxdWVzdENvbmZpZyk7XG5cbiAgICAgIGNvbmZpZy5oZWFkZXJzID0gbWVyZ2VIZWFkZXJzKHJlcXVlc3RDb25maWcpO1xuICAgICAgY29uZmlnLm1ldGhvZCA9IHVwcGVyY2FzZShjb25maWcubWV0aG9kKTtcbiAgICAgIGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIgPSBpc1N0cmluZyhjb25maWcucGFyYW1TZXJpYWxpemVyKSA/XG4gICAgICAgICAgJGluamVjdG9yLmdldChjb25maWcucGFyYW1TZXJpYWxpemVyKSA6IGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXI7XG5cbiAgICAgICRicm93c2VyLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQoKTtcblxuICAgICAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvcnMgPSBbXTtcbiAgICAgIHZhciByZXNwb25zZUludGVyY2VwdG9ycyA9IFtdO1xuICAgICAgdmFyIHByb21pc2UgPSAkcS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIC8vIGFwcGx5IGludGVyY2VwdG9yc1xuICAgICAgZm9yRWFjaChyZXZlcnNlZEludGVyY2VwdG9ycywgZnVuY3Rpb24oaW50ZXJjZXB0b3IpIHtcbiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlcXVlc3QgfHwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKSB7XG4gICAgICAgICAgcmVxdWVzdEludGVyY2VwdG9ycy51bnNoaWZ0KGludGVyY2VwdG9yLnJlcXVlc3QsIGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlc3BvbnNlIHx8IGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICByZXNwb25zZUludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yLnJlc3BvbnNlLCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHByb21pc2UgPSBjaGFpbkludGVyY2VwdG9ycyhwcm9taXNlLCByZXF1ZXN0SW50ZXJjZXB0b3JzKTtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oc2VydmVyUmVxdWVzdCk7XG4gICAgICBwcm9taXNlID0gY2hhaW5JbnRlcmNlcHRvcnMocHJvbWlzZSwgcmVzcG9uc2VJbnRlcmNlcHRvcnMpO1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UuZmluYWxseShjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCk7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG5cbiAgICAgIGZ1bmN0aW9uIGNoYWluSW50ZXJjZXB0b3JzKHByb21pc2UsIGludGVyY2VwdG9ycykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnRlcmNlcHRvcnMubGVuZ3RoOyBpIDwgaWk7KSB7XG4gICAgICAgICAgdmFyIHRoZW5GbiA9IGludGVyY2VwdG9yc1tpKytdO1xuICAgICAgICAgIHZhciByZWplY3RGbiA9IGludGVyY2VwdG9yc1tpKytdO1xuXG4gICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0aGVuRm4sIHJlamVjdEZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGludGVyY2VwdG9ycy5sZW5ndGggPSAwO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCgpIHtcbiAgICAgICAgJGJyb3dzZXIuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZXhlY3V0ZUhlYWRlckZucyhoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgdmFyIGhlYWRlckNvbnRlbnQsIHByb2Nlc3NlZEhlYWRlcnMgPSB7fTtcblxuICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKGhlYWRlckZuLCBoZWFkZXIpIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoZWFkZXJGbikpIHtcbiAgICAgICAgICAgIGhlYWRlckNvbnRlbnQgPSBoZWFkZXJGbihjb25maWcpO1xuICAgICAgICAgICAgaWYgKGhlYWRlckNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBwcm9jZXNzZWRIZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzZWRIZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJGbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9jZXNzZWRIZWFkZXJzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtZXJnZUhlYWRlcnMoY29uZmlnKSB7XG4gICAgICAgIHZhciBkZWZIZWFkZXJzID0gZGVmYXVsdHMuaGVhZGVycyxcbiAgICAgICAgICAgIHJlcUhlYWRlcnMgPSBleHRlbmQoe30sIGNvbmZpZy5oZWFkZXJzKSxcbiAgICAgICAgICAgIGRlZkhlYWRlck5hbWUsIGxvd2VyY2FzZURlZkhlYWRlck5hbWUsIHJlcUhlYWRlck5hbWU7XG5cbiAgICAgICAgZGVmSGVhZGVycyA9IGV4dGVuZCh7fSwgZGVmSGVhZGVycy5jb21tb24sIGRlZkhlYWRlcnNbbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpXSk7XG5cbiAgICAgICAgLy8gdXNpbmcgZm9yLWluIGluc3RlYWQgb2YgZm9yRWFjaCB0byBhdm9pZCB1bm5lY2Vzc2FyeSBpdGVyYXRpb24gYWZ0ZXIgaGVhZGVyIGhhcyBiZWVuIGZvdW5kXG4gICAgICAgIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uOlxuICAgICAgICBmb3IgKGRlZkhlYWRlck5hbWUgaW4gZGVmSGVhZGVycykge1xuICAgICAgICAgIGxvd2VyY2FzZURlZkhlYWRlck5hbWUgPSBsb3dlcmNhc2UoZGVmSGVhZGVyTmFtZSk7XG5cbiAgICAgICAgICBmb3IgKHJlcUhlYWRlck5hbWUgaW4gcmVxSGVhZGVycykge1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShyZXFIZWFkZXJOYW1lKSA9PT0gbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSkge1xuICAgICAgICAgICAgICBjb250aW51ZSBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXFIZWFkZXJzW2RlZkhlYWRlck5hbWVdID0gZGVmSGVhZGVyc1tkZWZIZWFkZXJOYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGV4ZWN1dGUgaWYgaGVhZGVyIHZhbHVlIGlzIGEgZnVuY3Rpb24gZm9yIG1lcmdlZCBoZWFkZXJzXG4gICAgICAgIHJldHVybiBleGVjdXRlSGVhZGVyRm5zKHJlcUhlYWRlcnMsIHNoYWxsb3dDb3B5KGNvbmZpZykpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXJ2ZXJSZXF1ZXN0KGNvbmZpZykge1xuICAgICAgICB2YXIgaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgICAgICB2YXIgcmVxRGF0YSA9IHRyYW5zZm9ybURhdGEoY29uZmlnLmRhdGEsIGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksIHVuZGVmaW5lZCwgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3QpO1xuXG4gICAgICAgIC8vIHN0cmlwIGNvbnRlbnQtdHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICBpZiAoaXNVbmRlZmluZWQocmVxRGF0YSkpIHtcbiAgICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBoZWFkZXIpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UoaGVhZGVyKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSAmJiAhaXNVbmRlZmluZWQoZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgPSBkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZW5kIHJlcXVlc3RcbiAgICAgICAgcmV0dXJuIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhKS50aGVuKHRyYW5zZm9ybVJlc3BvbnNlLCB0cmFuc2Zvcm1SZXNwb25zZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIG1ha2UgYSBjb3B5IHNpbmNlIHRoZSByZXNwb25zZSBtdXN0IGJlIGNhY2hlYWJsZVxuICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UpO1xuICAgICAgICByZXNwLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gKGlzU3VjY2VzcyhyZXNwb25zZS5zdGF0dXMpKVxuICAgICAgICAgID8gcmVzcFxuICAgICAgICAgIDogJHEucmVqZWN0KHJlc3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2dldFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEdFVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRPYmplY3R9IHVybCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkO1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBvYmplY3QgY3JlYXRlZCBieSBhIGNhbGwgdG8gYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZGVsZXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZE9iamVjdH0gdXJsIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNoZWFkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSEVBRGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRPYmplY3R9IHVybCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkO1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBvYmplY3QgY3JlYXRlZCBieSBhIGNhbGwgdG8gYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjanNvbnBcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBKU09OUGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCwgc2luY2UgSlNPTlAgcmVxdWVzdHMgYXJlIHNlbnNpdGl2ZSBiZWNhdXNlIHRoZSByZXNwb25zZSBpcyBnaXZlbiBmdWxsIGFjY2VzcyB0byB0aGUgYnJvd3NlcixcbiAgICAgKiB0aGUgdXJsIG11c3QgYmUgZGVjbGFyZWQsIHZpYSB7QGxpbmsgJHNjZX0gYXMgYSB0cnVzdGVkIHJlc291cmNlIFVSTC5cbiAgICAgKiBZb3UgY2FuIHRydXN0IGEgVVJMIGJ5IGFkZGluZyBpdCB0byB0aGUgd2hpdGVsaXN0IHZpYVxuICAgICAqIHtAbGluayAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCAgYCRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0YH0gb3JcbiAgICAgKiBieSBleHBsaWNpdGx5IHRydXN0aW5nIHRoZSBVUkwgdmlhIHtAbGluayAkc2NlI3RydXN0QXNSZXNvdXJjZVVybCBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWB9LlxuICAgICAqXG4gICAgICogSlNPTlAgcmVxdWVzdHMgbXVzdCBzcGVjaWZ5IGEgY2FsbGJhY2sgdG8gYmUgdXNlZCBpbiB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLiBUaGlzIGNhbGxiYWNrXG4gICAgICogaXMgcGFzc2VkIGFzIGEgcXVlcnkgcGFyYW1ldGVyIGluIHRoZSByZXF1ZXN0LiBZb3UgbXVzdCBzcGVjaWZ5IHRoZSBuYW1lIG9mIHRoaXMgcGFyYW1ldGVyIGJ5XG4gICAgICogc2V0dGluZyB0aGUgYGpzb25wQ2FsbGJhY2tQYXJhbWAgcHJvcGVydHkgb24gdGhlIHJlcXVlc3QgY29uZmlnIG9iamVjdC5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICRodHRwLmpzb25wKCdzb21lL3RydXN0ZWQvdXJsJywge2pzb25wQ2FsbGJhY2tQYXJhbTogJ2NhbGxiYWNrJ30pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGFsc28gc3BlY2lmeSBhIGRlZmF1bHQgY2FsbGJhY2sgcGFyYW1ldGVyIG5hbWUgaW4gYCRodHRwLmRlZmF1bHRzLmpzb25wQ2FsbGJhY2tQYXJhbWAuXG4gICAgICogSW5pdGlhbGx5IHRoaXMgaXMgc2V0IHRvIGAnY2FsbGJhY2snYC5cbiAgICAgKlxuICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAgICAgKiBZb3UgY2FuIG5vIGxvbmdlciB1c2UgdGhlIGBKU09OX0NBTExCQUNLYCBzdHJpbmcgYXMgYSBwbGFjZWhvbGRlciBmb3Igc3BlY2lmeWluZyB3aGVyZSB0aGUgY2FsbGJhY2tcbiAgICAgKiBwYXJhbWV0ZXIgdmFsdWUgc2hvdWxkIGdvLlxuICAgICAqIDwvZGl2PlxuICAgICAqXG4gICAgICogSWYgeW91IHdvdWxkIGxpa2UgdG8gY3VzdG9taXNlIHdoZXJlIGFuZCBob3cgdGhlIGNhbGxiYWNrcyBhcmUgc3RvcmVkIHRoZW4gdHJ5IG92ZXJyaWRpbmdcbiAgICAgKiBvciBkZWNvcmF0aW5nIHRoZSB7QGxpbmsgJGpzb25wQ2FsbGJhY2tzfSBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZE9iamVjdH0gdXJsIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cbiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI3Bvc3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQT1NUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNwdXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQVVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICRodHRwI3BhdGNoXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUEFUQ0hgIHJlcXVlc3QuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICAqL1xuICAgIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKCdwb3N0JywgJ3B1dCcsICdwYXRjaCcpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICogQG5hbWUgJGh0dHAjZGVmYXVsdHNcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJ1bnRpbWUgZXF1aXZhbGVudCBvZiB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHNgIHByb3BlcnR5LiBBbGxvd3MgY29uZmlndXJhdGlvbiBvZlxuICAgICAgICAgKiBkZWZhdWx0IGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIFwiU2V0dGluZyBIVFRQIEhlYWRlcnNcIiBhbmQgXCJUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1wiIHNlY3Rpb25zIGFib3ZlLlxuICAgICAgICAgKi9cbiAgICAkaHR0cC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuXG5cbiAgICByZXR1cm4gJGh0dHA7XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykge1xuICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJGh0dHBbbmFtZV0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoe30sIGNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgICAgbWV0aG9kOiBuYW1lLFxuICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKG5hbWUpIHtcbiAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgdGhlIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiAhISEgQUNDRVNTRVMgQ0xPU1VSRSBWQVJTOlxuICAgICAqICRodHRwQmFja2VuZCwgZGVmYXVsdHMsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2VuZFJlcShjb25maWcsIHJlcURhdGEpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgY2FjaGVkUmVzcCxcbiAgICAgICAgICByZXFIZWFkZXJzID0gY29uZmlnLmhlYWRlcnMsXG4gICAgICAgICAgaXNKc29ucCA9IGxvd2VyY2FzZShjb25maWcubWV0aG9kKSA9PT0gJ2pzb25wJyxcbiAgICAgICAgICB1cmwgPSBjb25maWcudXJsO1xuXG4gICAgICBpZiAoaXNKc29ucCkge1xuICAgICAgICAvLyBKU09OUCBpcyBhIHByZXR0eSBzZW5zaXRpdmUgb3BlcmF0aW9uIHdoZXJlIHdlJ3JlIGFsbG93aW5nIGEgc2NyaXB0IHRvIGhhdmUgZnVsbCBhY2Nlc3MgdG9cbiAgICAgICAgLy8gb3VyIERPTSBhbmQgSlMgc3BhY2UuICBTbyB3ZSByZXF1aXJlIHRoYXQgdGhlIFVSTCBzYXRpc2ZpZXMgU0NFLlJFU09VUkNFX1VSTC5cbiAgICAgICAgdXJsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodXJsKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaW5nKHVybCkpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgbm90IGEgc3RyaW5nIHRoZW4gdGhlIFVSTCBtdXN0IGJlIGEgJHNjZSB0cnVzdGVkIG9iamVjdFxuICAgICAgICB1cmwgPSAkc2NlLnZhbHVlT2YodXJsKTtcbiAgICAgIH1cblxuICAgICAgdXJsID0gYnVpbGRVcmwodXJsLCBjb25maWcucGFyYW1TZXJpYWxpemVyKGNvbmZpZy5wYXJhbXMpKTtcblxuICAgICAgaWYgKGlzSnNvbnApIHtcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHVybCBhbmQgYWRkIHRoZSBKU09OUCBjYWxsYmFjayBwbGFjZWhvbGRlclxuICAgICAgICB1cmwgPSBzYW5pdGl6ZUpzb25wQ2FsbGJhY2tQYXJhbSh1cmwsIGNvbmZpZy5qc29ucENhbGxiYWNrUGFyYW0pO1xuICAgICAgfVxuXG4gICAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMucHVzaChjb25maWcpO1xuICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpO1xuXG4gICAgICBpZiAoKGNvbmZpZy5jYWNoZSB8fCBkZWZhdWx0cy5jYWNoZSkgJiYgY29uZmlnLmNhY2hlICE9PSBmYWxzZSAmJlxuICAgICAgICAgIChjb25maWcubWV0aG9kID09PSAnR0VUJyB8fCBjb25maWcubWV0aG9kID09PSAnSlNPTlAnKSkge1xuICAgICAgICBjYWNoZSA9IGlzT2JqZWN0KGNvbmZpZy5jYWNoZSkgPyBjb25maWcuY2FjaGVcbiAgICAgICAgICAgIDogaXNPYmplY3QoLyoqIEB0eXBlIHs/fSAqLyAoZGVmYXVsdHMpLmNhY2hlKVxuICAgICAgICAgICAgICA/IC8qKiBAdHlwZSB7P30gKi8gKGRlZmF1bHRzKS5jYWNoZVxuICAgICAgICAgICAgICA6IGRlZmF1bHRDYWNoZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlZFJlc3AgPSBjYWNoZS5nZXQodXJsKTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChjYWNoZWRSZXNwKSkge1xuICAgICAgICAgIGlmIChpc1Byb21pc2VMaWtlKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgICAvLyBjYWNoZWQgcmVxdWVzdCBoYXMgYWxyZWFkeSBiZWVuIHNlbnQsIGJ1dCB0aGVyZSBpcyBubyByZXNwb25zZSB5ZXRcbiAgICAgICAgICAgIGNhY2hlZFJlc3AudGhlbihyZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQsIHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNlcnZpbmcgZnJvbSBjYWNoZVxuICAgICAgICAgICAgaWYgKGlzQXJyYXkoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcFsxXSwgY2FjaGVkUmVzcFswXSwgc2hhbGxvd0NvcHkoY2FjaGVkUmVzcFsyXSksIGNhY2hlZFJlc3BbM10pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcCwgMjAwLCB7fSwgJ09LJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHB1dCB0aGUgcHJvbWlzZSBmb3IgdGhlIG5vbi10cmFuc2Zvcm1lZCByZXNwb25zZSBpbnRvIGNhY2hlIGFzIGEgcGxhY2Vob2xkZXJcbiAgICAgICAgICBjYWNoZS5wdXQodXJsLCBwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8vIGlmIHdlIHdvbid0IGhhdmUgdGhlIHJlc3BvbnNlIGluIGNhY2hlLCBzZXQgdGhlIHhzcmYgaGVhZGVycyBhbmRcbiAgICAgIC8vIHNlbmQgdGhlIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmRcbiAgICAgIGlmIChpc1VuZGVmaW5lZChjYWNoZWRSZXNwKSkge1xuICAgICAgICB2YXIgeHNyZlZhbHVlID0gdXJsSXNTYW1lT3JpZ2luKGNvbmZpZy51cmwpXG4gICAgICAgICAgICA/ICQkY29va2llUmVhZGVyKClbY29uZmlnLnhzcmZDb29raWVOYW1lIHx8IGRlZmF1bHRzLnhzcmZDb29raWVOYW1lXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgICByZXFIZWFkZXJzWyhjb25maWcueHNyZkhlYWRlck5hbWUgfHwgZGVmYXVsdHMueHNyZkhlYWRlck5hbWUpXSA9IHhzcmZWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgICRodHRwQmFja2VuZChjb25maWcubWV0aG9kLCB1cmwsIHJlcURhdGEsIGRvbmUsIHJlcUhlYWRlcnMsIGNvbmZpZy50aW1lb3V0LFxuICAgICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscywgY29uZmlnLnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgIGNyZWF0ZUFwcGx5SGFuZGxlcnMoY29uZmlnLmV2ZW50SGFuZGxlcnMpLFxuICAgICAgICAgICAgY3JlYXRlQXBwbHlIYW5kbGVycyhjb25maWcudXBsb2FkRXZlbnRIYW5kbGVycykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgZnVuY3Rpb24gY3JlYXRlQXBwbHlIYW5kbGVycyhldmVudEhhbmRsZXJzKSB7XG4gICAgICAgIGlmIChldmVudEhhbmRsZXJzKSB7XG4gICAgICAgICAgdmFyIGFwcGx5SGFuZGxlcnMgPSB7fTtcbiAgICAgICAgICBmb3JFYWNoKGV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uKGV2ZW50SGFuZGxlciwga2V5KSB7XG4gICAgICAgICAgICBhcHBseUhhbmRsZXJzW2tleV0gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICBpZiAodXNlQXBwbHlBc3luYykge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5QXN5bmMoY2FsbEV2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgY2FsbEV2ZW50SGFuZGxlcigpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGNhbGxFdmVudEhhbmRsZXIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gY2FsbEV2ZW50SGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBhcHBseUhhbmRsZXJzO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHRvICRodHRwQmFja2VuZCgpOlxuICAgICAgICogIC0gY2FjaGVzIHRoZSByZXNwb25zZSBpZiBkZXNpcmVkXG4gICAgICAgKiAgLSByZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2VcbiAgICAgICAqICAtIGNhbGxzICRhcHBseVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBkb25lKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgaWYgKGlzU3VjY2VzcyhzdGF0dXMpKSB7XG4gICAgICAgICAgICBjYWNoZS5wdXQodXJsLCBbc3RhdHVzLCByZXNwb25zZSwgcGFyc2VIZWFkZXJzKGhlYWRlcnNTdHJpbmcpLCBzdGF0dXNUZXh0XSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBwcm9taXNlIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICBjYWNoZS5yZW1vdmUodXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlSHR0cFByb21pc2UoKSB7XG4gICAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlQXBwbHlBc3luYykge1xuICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5QXN5bmMocmVzb2x2ZUh0dHBQcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlSHR0cFByb21pc2UoKTtcbiAgICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgIC8vc3RhdHVzOiBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlLCAwLCAtMSAoYWJvcnRlZCBieSB0aW1lb3V0IC8gcHJvbWlzZSlcbiAgICAgICAgc3RhdHVzID0gc3RhdHVzID49IC0xID8gc3RhdHVzIDogMDtcblxuICAgICAgICAoaXNTdWNjZXNzKHN0YXR1cykgPyBkZWZlcnJlZC5yZXNvbHZlIDogZGVmZXJyZWQucmVqZWN0KSh7XG4gICAgICAgICAgZGF0YTogcmVzcG9uc2UsXG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgaGVhZGVyczogaGVhZGVyc0dldHRlcihoZWFkZXJzKSxcbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQocmVzdWx0KSB7XG4gICAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdC5kYXRhLCByZXN1bHQuc3RhdHVzLCBzaGFsbG93Q29weShyZXN1bHQuaGVhZGVycygpKSwgcmVzdWx0LnN0YXR1c1RleHQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVQZW5kaW5nUmVxKCkge1xuICAgICAgICB2YXIgaWR4ID0gJGh0dHAucGVuZGluZ1JlcXVlc3RzLmluZGV4T2YoY29uZmlnKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGJ1aWxkVXJsKHVybCwgc2VyaWFsaXplZFBhcmFtcykge1xuICAgICAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICB1cmwgKz0gKCh1cmwuaW5kZXhPZignPycpID09PSAtMSkgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2FuaXRpemVKc29ucENhbGxiYWNrUGFyYW0odXJsLCBrZXkpIHtcbiAgICAgIGlmICgvWyY/XVtePV0rPUpTT05fQ0FMTEJBQ0svLnRlc3QodXJsKSkge1xuICAgICAgICAvLyBUaHJvdyBpZiB0aGUgdXJsIGFscmVhZHkgY29udGFpbnMgYSByZWZlcmVuY2UgdG8gSlNPTl9DQUxMQkFDS1xuICAgICAgICB0aHJvdyAkaHR0cE1pbkVycignYmFkanNvbnAnLCAnSWxsZWdhbCB1c2Ugb2YgSlNPTl9DQUxMQkFDSyBpbiB1cmwsIFwiezB9XCInLCB1cmwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FsbGJhY2tQYXJhbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnWyY/XScgKyBrZXkgKyAnPScpO1xuICAgICAgaWYgKGNhbGxiYWNrUGFyYW1SZWdleC50ZXN0KHVybCkpIHtcbiAgICAgICAgLy8gVGhyb3cgaWYgdGhlIGNhbGxiYWNrIHBhcmFtIHdhcyBhbHJlYWR5IHByb3ZpZGVkXG4gICAgICAgIHRocm93ICRodHRwTWluRXJyKCdiYWRqc29ucCcsICdJbGxlZ2FsIHVzZSBvZiBjYWxsYmFjayBwYXJhbSwgXCJ7MH1cIiwgaW4gdXJsLCBcInsxfVwiJywga2V5LCB1cmwpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgaW4gdGhlIEpTT05fQ0FMTEJBQ0sgY2FsbGJhY2sgcGFyYW0gdmFsdWVcbiAgICAgIHVybCArPSAoKHVybC5pbmRleE9mKCc/JykgPT09IC0xKSA/ICc/JyA6ICcmJykgKyBrZXkgKyAnPUpTT05fQ0FMTEJBQ0snO1xuXG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR4aHJGYWN0b3J5XG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSBYTUxIdHRwUmVxdWVzdCBvYmplY3RzLlxuICpcbiAqIFJlcGxhY2Ugb3IgZGVjb3JhdGUgdGhpcyBzZXJ2aWNlIHRvIGNyZWF0ZSB5b3VyIG93biBjdXN0b20gWE1MSHR0cFJlcXVlc3Qgb2JqZWN0cy5cbiAqXG4gKiBgYGBcbiAqIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKVxuICogLmZhY3RvcnkoJyR4aHJGYWN0b3J5JywgZnVuY3Rpb24oKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVYaHIobWV0aG9kLCB1cmwpIHtcbiAqICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCh7bW96U3lzdGVtOiB0cnVlfSk7XG4gKiAgIH07XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgSFRUUCBtZXRob2Qgb2YgdGhlIHJlcXVlc3QgKEdFVCwgUE9TVCwgUFVULCAuLilcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIG9mIHRoZSByZXF1ZXN0LlxuICovXG5mdW5jdGlvbiAkeGhyRmFjdG9yeVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlWGhyKCkge1xuICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9O1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaHR0cEJhY2tlbmRcbiAqIEByZXF1aXJlcyAkanNvbnBDYWxsYmFja3NcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqIEByZXF1aXJlcyAkeGhyRmFjdG9yeVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG9cbiAqIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBvciBKU09OUCBhbmQgZGVhbHMgd2l0aCBicm93c2VyIGluY29tcGF0aWJpbGl0aWVzLlxuICpcbiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczpcbiAqIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gb3Ige0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlICRyZXNvdXJjZX0uXG4gKlxuICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9ja1xuICogJGh0dHBCYWNrZW5kfSB3aGljaCBjYW4gYmUgdHJhaW5lZCB3aXRoIHJlc3BvbnNlcy5cbiAqL1xuZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGpzb25wQ2FsbGJhY2tzJywgJyRkb2N1bWVudCcsICckeGhyRmFjdG9yeScsIGZ1bmN0aW9uKCRicm93c2VyLCAkanNvbnBDYWxsYmFja3MsICRkb2N1bWVudCwgJHhockZhY3RvcnkpIHtcbiAgICByZXR1cm4gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsICR4aHJGYWN0b3J5LCAkYnJvd3Nlci5kZWZlciwgJGpzb25wQ2FsbGJhY2tzLCAkZG9jdW1lbnRbMF0pO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIGNyZWF0ZVhociwgJGJyb3dzZXJEZWZlciwgY2FsbGJhY2tzLCByYXdEb2N1bWVudCkge1xuICAvLyBUT0RPKHZvanRhKTogZml4IHRoZSBzaWduYXR1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwb3N0LCBjYWxsYmFjaywgaGVhZGVycywgdGltZW91dCwgd2l0aENyZWRlbnRpYWxzLCByZXNwb25zZVR5cGUsIGV2ZW50SGFuZGxlcnMsIHVwbG9hZEV2ZW50SGFuZGxlcnMpIHtcbiAgICB1cmwgPSB1cmwgfHwgJGJyb3dzZXIudXJsKCk7XG5cbiAgICBpZiAobG93ZXJjYXNlKG1ldGhvZCkgPT09ICdqc29ucCcpIHtcbiAgICAgIHZhciBjYWxsYmFja1BhdGggPSBjYWxsYmFja3MuY3JlYXRlQ2FsbGJhY2sodXJsKTtcbiAgICAgIHZhciBqc29ucERvbmUgPSBqc29ucFJlcSh1cmwsIGNhbGxiYWNrUGF0aCwgZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG4gICAgICAgIC8vIGpzb25wUmVxIG9ubHkgZXZlciBzZXRzIHN0YXR1cyB0byAyMDAgKE9LKSwgNDA0IChFUlJPUikgb3IgLTEgKFdBSVRJTkcpXG4gICAgICAgIHZhciByZXNwb25zZSA9IChzdGF0dXMgPT09IDIwMCkgJiYgY2FsbGJhY2tzLmdldFJlc3BvbnNlKGNhbGxiYWNrUGF0aCk7XG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgJycsIHRleHQpO1xuICAgICAgICBjYWxsYmFja3MucmVtb3ZlQ2FsbGJhY2soY2FsbGJhY2tQYXRoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIHZhciB4aHIgPSBjcmVhdGVYaHIobWV0aG9kLCB1cmwpO1xuXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIHJlcXVlc3RMb2FkZWQoKSB7XG4gICAgICAgIHZhciBzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQgfHwgJyc7XG5cbiAgICAgICAgLy8gcmVzcG9uc2VUZXh0IGlzIHRoZSBvbGQtc2Nob29sIHdheSBvZiByZXRyaWV2aW5nIHJlc3BvbnNlIChzdXBwb3J0ZWQgYnkgSUU5KVxuICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMClcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gKCdyZXNwb25zZScgaW4geGhyKSA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIElFOSBidWcgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTApXG4gICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cztcblxuICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLlxuICAgICAgICAvLyBPY2N1cnMgd2hlbiBhY2Nlc3NpbmcgZmlsZSByZXNvdXJjZXMgb3Igb24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlclxuICAgICAgICAvLyB3aGlsZSByZXRyaWV2aW5nIGZpbGVzIGZyb20gYXBwbGljYXRpb24gY2FjaGUuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICBzdGF0dXMgPSByZXNwb25zZSA/IDIwMCA6IHVybFJlc29sdmUodXJsKS5wcm90b2NvbCA9PT0gJ2ZpbGUnID8gNDA0IDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjayxcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLFxuICAgICAgICAgICAgc3RhdHVzVGV4dCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRoZSByZXNwb25zZSBpcyBhbHdheXMgZW1wdHlcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jcmVxdWVzdC1lcnJvci1zdGVwcyBhbmQgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbmV0d29yay1lcnJvclxuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIC0xLCBudWxsLCBudWxsLCAnJyk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IHJlcXVlc3RFcnJvcjtcbiAgICAgIHhoci5vbmFib3J0ID0gcmVxdWVzdEVycm9yO1xuICAgICAgeGhyLm9udGltZW91dCA9IHJlcXVlc3RFcnJvcjtcblxuICAgICAgZm9yRWFjaChldmVudEhhbmRsZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoa2V5LCB2YWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgZm9yRWFjaCh1cGxvYWRFdmVudEhhbmRsZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAod2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFdlYktpdCBhZGRlZCBzdXBwb3J0IGZvciB0aGUganNvbiByZXNwb25zZVR5cGUgdmFsdWUgb24gMDkvMDMvMjAxM1xuICAgICAgICAgIC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD03MzY0OC4gVmVyc2lvbnMgb2YgU2FmYXJpIHByaW9yIHRvIDcgYXJlXG4gICAgICAgICAgLy8ga25vd24gdG8gdGhyb3cgd2hlbiBzZXR0aW5nIHRoZSB2YWx1ZSBcImpzb25cIiBhcyB0aGUgcmVzcG9uc2UgdHlwZS4gT3RoZXIgb2xkZXJcbiAgICAgICAgICAvLyBicm93c2VycyBpbXBsZW1lbnRpbmcgdGhlIHJlc3BvbnNlVHlwZVxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhlIGpzb24gcmVzcG9uc2UgdHlwZSBjYW4gYmUgaWdub3JlZCBpZiBub3Qgc3VwcG9ydGVkLCBiZWNhdXNlIEpTT04gcGF5bG9hZHMgYXJlXG4gICAgICAgICAgLy8gcGFyc2VkIG9uIHRoZSBjbGllbnQtc2lkZSByZWdhcmRsZXNzLlxuICAgICAgICAgIGlmIChyZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQoaXNVbmRlZmluZWQocG9zdCkgPyBudWxsIDogcG9zdCk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICB2YXIgdGltZW91dElkID0gJGJyb3dzZXJEZWZlcih0aW1lb3V0UmVxdWVzdCwgdGltZW91dCk7XG4gICAgfSBlbHNlIGlmIChpc1Byb21pc2VMaWtlKHRpbWVvdXQpKSB7XG4gICAgICB0aW1lb3V0LnRoZW4odGltZW91dFJlcXVlc3QpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gdGltZW91dFJlcXVlc3QoKSB7XG4gICAgICBpZiAoanNvbnBEb25lKSB7XG4gICAgICAgIGpzb25wRG9uZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHhocikge1xuICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IGFuZCBzdWJzZXF1ZW50IHRpbWVvdXQgcHJvbWlzZSByZXNvbHV0aW9uXG4gICAgICBpZiAoaXNEZWZpbmVkKHRpbWVvdXRJZCkpIHtcbiAgICAgICAgJGJyb3dzZXJEZWZlci5jYW5jZWwodGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIGpzb25wRG9uZSA9IHhociA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBqc29ucFJlcSh1cmwsIGNhbGxiYWNrUGF0aCwgZG9uZSkge1xuICAgIHVybCA9IHVybC5yZXBsYWNlKCdKU09OX0NBTExCQUNLJywgY2FsbGJhY2tQYXRoKTtcbiAgICAvLyB3ZSBjYW4ndCB1c2UgalF1ZXJ5L2pxTGl0ZSBoZXJlIGJlY2F1c2UgalF1ZXJ5IGRvZXMgY3Jhenkgc3R1ZmYgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46XG4gICAgLy8gLSBmZXRjaGVzIGxvY2FsIHNjcmlwdHMgdmlhIFhIUiBhbmQgZXZhbHMgdGhlbVxuICAgIC8vIC0gYWRkcyBhbmQgaW1tZWRpYXRlbHkgcmVtb3ZlcyBzY3JpcHQgZWxlbWVudHMgZnJvbSB0aGUgZG9jdW1lbnRcbiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksIGNhbGxiYWNrID0gbnVsbDtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNjcmlwdC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgY2FsbGJhY2spO1xuICAgICAgc2NyaXB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgICAgcmF3RG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgIHZhciBzdGF0dXMgPSAtMTtcbiAgICAgIHZhciB0ZXh0ID0gJ3Vua25vd24nO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyAmJiAhY2FsbGJhY2tzLndhc0NhbGxlZChjYWxsYmFja1BhdGgpKSB7XG4gICAgICAgICAgZXZlbnQgPSB7IHR5cGU6ICdlcnJvcicgfTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gZXZlbnQudHlwZTtcbiAgICAgICAgc3RhdHVzID0gZXZlbnQudHlwZSA9PT0gJ2Vycm9yJyA/IDQwNCA6IDIwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgZG9uZShzdGF0dXMsIHRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNhbGxiYWNrKTtcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBjYWxsYmFjayk7XG4gICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfVxufVxuXG52YXIgJGludGVycG9sYXRlTWluRXJyID0gYW5ndWxhci4kaW50ZXJwb2xhdGVNaW5FcnIgPSBtaW5FcnIoJyRpbnRlcnBvbGF0ZScpO1xuJGludGVycG9sYXRlTWluRXJyLnRocm93Tm9jb25jYXQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRocm93ICRpbnRlcnBvbGF0ZU1pbkVycignbm9jb25jYXQnLFxuICAgICAgJ0Vycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyAnICtcbiAgICAgICdpbnRlcnBvbGF0aW9ucyB0aGF0IGNvbmNhdGVuYXRlIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoZW4gYSB0cnVzdGVkIHZhbHVlIGlzICcgK1xuICAgICAgJ3JlcXVpcmVkLiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UnLCB0ZXh0KTtcbn07XG5cbiRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIgPSBmdW5jdGlvbih0ZXh0LCBlcnIpIHtcbiAgcmV0dXJuICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgJ0NhblxcJ3QgaW50ZXJwb2xhdGU6IHswfVxcbnsxfScsIHRleHQsIGVyci50b1N0cmluZygpKTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2VkIGZvciBjb25maWd1cmluZyB0aGUgaW50ZXJwb2xhdGlvbiBtYXJrdXAuIERlZmF1bHRzIHRvIGB7e2AgYW5kIGB9fWAuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogVGhpcyBmZWF0dXJlIGlzIHNvbWV0aW1lcyB1c2VkIHRvIG1peCBkaWZmZXJlbnQgbWFya3VwIGxhbmd1YWdlcywgZS5nLiB0byB3cmFwIGFuIEFuZ3VsYXJcbiAqIHRlbXBsYXRlIHdpdGhpbiBhIFB5dGhvbiBKaW5qYSB0ZW1wbGF0ZSAob3IgYW55IG90aGVyIHRlbXBsYXRlIGxhbmd1YWdlKS4gTWl4aW5nIHRlbXBsYXRpbmdcbiAqIGxhbmd1YWdlcyBpcyAqKnZlcnkgZGFuZ2Vyb3VzKiouIFRoZSBlbWJlZGRpbmcgdGVtcGxhdGUgbGFuZ3VhZ2Ugd2lsbCBub3Qgc2FmZWx5IGVzY2FwZSBBbmd1bGFyXG4gKiBleHByZXNzaW9ucywgc28gYW55IHVzZXItY29udHJvbGxlZCB2YWx1ZXMgaW4gdGhlIHRlbXBsYXRlIHdpbGwgY2F1c2UgQ3Jvc3MgU2l0ZSBTY3JpcHRpbmcgKFhTUylcbiAqIHNlY3VyaXR5IGJ1Z3MhXG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuPGV4YW1wbGUgbmFtZT1cImN1c3RvbS1pbnRlcnBvbGF0aW9uLW1hcmt1cFwiIG1vZHVsZT1cImN1c3RvbUludGVycG9sYXRpb25BcHBcIj5cbjxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG48c2NyaXB0PlxuICB2YXIgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCA9IGFuZ3VsYXIubW9kdWxlKCdjdXN0b21JbnRlcnBvbGF0aW9uQXBwJywgW10pO1xuXG4gIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29uZmlnKGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZVByb3ZpZGVyKSB7XG4gICAgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2woJy8vJyk7XG4gICAgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sKCcvLycpO1xuICB9KTtcblxuXG4gIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29udHJvbGxlcignRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubGFiZWwgPSBcIlRoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuXCI7XG4gIH0pO1xuPC9zY3JpcHQ+XG48ZGl2IG5nLWNvbnRyb2xsZXI9XCJEZW1vQ29udHJvbGxlciBhcyBkZW1vXCI+XG4gICAgLy9kZW1vLmxhYmVsLy9cbjwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICBpdCgnc2hvdWxkIGludGVycG9sYXRlIGJpbmRpbmcgd2l0aCBjdXN0b20gc3ltYm9scycsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2RlbW8ubGFiZWwnKSkuZ2V0VGV4dCgpKS50b0JlKCdUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLicpO1xuICB9KTtcbjwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJEludGVycG9sYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBzdGFydFN5bWJvbCA9ICd7eyc7XG4gIHZhciBlbmRTeW1ib2wgPSAnfX0nO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTeW1ib2wgdG8gZGVub3RlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgc3RhcnRpbmcgc3ltYm9sIHRvLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBzdGFydFN5bWJvbCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBlbmRpbmcgc3ltYm9sIHRvLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5lbmRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZW5kU3ltYm9sID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuZFN5bWJvbDtcbiAgICB9XG4gIH07XG5cblxuICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckc2NlJywgZnVuY3Rpb24oJHBhcnNlLCAkZXhjZXB0aW9uSGFuZGxlciwgJHNjZSkge1xuICAgIHZhciBzdGFydFN5bWJvbExlbmd0aCA9IHN0YXJ0U3ltYm9sLmxlbmd0aCxcbiAgICAgICAgZW5kU3ltYm9sTGVuZ3RoID0gZW5kU3ltYm9sLmxlbmd0aCxcbiAgICAgICAgZXNjYXBlZFN0YXJ0UmVnZXhwID0gbmV3IFJlZ0V4cChzdGFydFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyksXG4gICAgICAgIGVzY2FwZWRFbmRSZWdleHAgPSBuZXcgUmVnRXhwKGVuZFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyk7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGUoY2gpIHtcbiAgICAgIHJldHVybiAnXFxcXFxcXFxcXFxcJyArIGNoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlVGV4dCh0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKGVzY2FwZWRTdGFydFJlZ2V4cCwgc3RhcnRTeW1ib2wpLlxuICAgICAgICByZXBsYWNlKGVzY2FwZWRFbmRSZWdleHAsIGVuZFN5bWJvbCk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogdGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgY29uc3RhbnRXYXRjaERlbGVnYXRlIGluIHBhcnNlLmpzXG4gICAgZnVuY3Rpb24gY29uc3RhbnRXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIGNvbnN0YW50SW50ZXJwKSB7XG4gICAgICB2YXIgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudEludGVycG9sYXRlV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICByZXR1cm4gY29uc3RhbnRJbnRlcnAoc2NvcGUpO1xuICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIHJldHVybiB1bndhdGNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXF1aXJlcyAkcGFyc2VcbiAgICAgKiBAcmVxdWlyZXMgJHNjZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZVxuICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZVxuICAgICAqIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciAkaW50ZXJwb2xhdGVQcm92aWRlcn0gZm9yIGNvbmZpZ3VyaW5nIHRoZVxuICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWRcbiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ0hlbGxvIHt7bmFtZSB8IHVwcGVyY2FzZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzXG4gICAgICogYHRydWVgLCB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zXG4gICAgICogZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07XG4gICAgICpcbiAgICAgKiAgIC8vIGRlZmF1bHQgXCJmb3JnaXZpbmdcIiBtb2RlXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyAhJyk7XG4gICAgICpcbiAgICAgKiAgIC8vIFwiYWxsT3JOb3RoaW5nXCIgbW9kZVxuICAgICAqICAgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJywgZmFsc2UsIG51bGwsIHRydWUpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gQW5ndWxhciEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBhbGxPck5vdGhpbmdgIGlzIHVzZWZ1bCBmb3IgaW50ZXJwb2xhdGluZyBVUkxzLiBgbmdTcmNgIGFuZCBgbmdTcmNzZXRgIHVzZSB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogIyMjIyBFc2NhcGVkIEludGVycG9sYXRpb25cbiAgICAgKiAkaW50ZXJwb2xhdGUgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIGVzY2FwaW5nIGludGVycG9sYXRpb24gbWFya2Vycy4gU3RhcnQgYW5kIGVuZCBtYXJrZXJzXG4gICAgICogY2FuIGJlIGVzY2FwZWQgYnkgcHJlY2VkaW5nIGVhY2ggb2YgdGhlaXIgY2hhcmFjdGVycyB3aXRoIGEgUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKS5cbiAgICAgKiBJdCB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgcmVndWxhciBzdGFydC9lbmQgbWFya2VyLCBhbmQgd2lsbCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gZXhwcmVzc2lvblxuICAgICAqIG9yIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIGVuYWJsZXMgd2ViLXNlcnZlcnMgdG8gcHJldmVudCBzY3JpcHQgaW5qZWN0aW9uIGF0dGFja3MgYW5kIGRlZmFjaW5nIGF0dGFja3MsIHRvIHNvbWVcbiAgICAgKiBkZWdyZWUsIHdoaWxlIGFsc28gZW5hYmxpbmcgY29kZSBleGFtcGxlcyB0byB3b3JrIHdpdGhvdXQgcmVseWluZyBvbiB0aGVcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTm9uQmluZGFibGUgbmdOb25CaW5kYWJsZX0gZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogKipGb3Igc2VjdXJpdHkgcHVycG9zZXMsIGl0IGlzIHN0cm9uZ2x5IGVuY291cmFnZWQgdGhhdCB3ZWIgc2VydmVycyBlc2NhcGUgdXNlci1zdXBwbGllZCBkYXRhLFxuICAgICAqIHJlcGxhY2luZyBhbmdsZSBicmFja2V0cyAoJmx0OywgJmd0Oykgd2l0aCAmYW1wO2x0OyBhbmQgJmFtcDtndDsgcmVzcGVjdGl2ZWx5LCBhbmQgcmVwbGFjaW5nIGFsbFxuICAgICAqIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCB0aGVpciBlc2NhcGVkIGNvdW50ZXJwYXJ0cy4qKlxuICAgICAqXG4gICAgICogRXNjYXBlZCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgYXJlIG9ubHkgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gbWFya2VycyBpbiByZW5kZXJlZFxuICAgICAqIG91dHB1dCB3aGVuIHRoZSAkaW50ZXJwb2xhdGUgc2VydmljZSBwcm9jZXNzZXMgdGhlIHRleHQuIFNvLCBmb3IgSFRNTCBlbGVtZW50cyBpbnRlcnBvbGF0ZWRcbiAgICAgKiBieSB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9LCBvciBvdGhlcndpc2UgaW50ZXJwb2xhdGVkIHdpdGggdGhlIGBtdXN0SGF2ZUV4cHJlc3Npb25gIHBhcmFtZXRlclxuICAgICAqIHNldCB0byBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dCBtdXN0IGNvbnRhaW4gYW4gdW5lc2NhcGVkIGludGVycG9sYXRpb24gZXhwcmVzc2lvbi4gQXMgc3VjaCxcbiAgICAgKiB0aGlzIGlzIHR5cGljYWxseSB1c2VmdWwgb25seSB3aGVuIHVzZXItZGF0YSBpcyB1c2VkIGluIHJlbmRlcmluZyBhIHRlbXBsYXRlIGZyb20gdGhlIHNlcnZlciwgb3JcbiAgICAgKiB3aGVuIG90aGVyd2lzZSB1bnRydXN0ZWQgZGF0YSBpcyB1c2VkIGJ5IGEgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogPGV4YW1wbGUgbmFtZT1cImludGVycG9sYXRpb25cIj5cbiAgICAgKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICA8ZGl2IG5nLWluaXQ9XCJ1c2VybmFtZT0nQSB1c2VyJ1wiPlxuICAgICAqICAgICAgPHAgbmctaW5pdD1cImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJ1wiPnt7YXBwdGl0bGV9fTogXFx7XFx7IHVzZXJuYW1lID0gXCJkZWZhY2VkIHZhbHVlXCI7IFxcfVxcfVxuICAgICAqICAgICAgICA8L3A+XG4gICAgICogICAgICA8cD48c3Ryb25nPnt7dXNlcm5hbWV9fTwvc3Ryb25nPiBhdHRlbXB0cyB0byBpbmplY3QgY29kZSB3aGljaCB3aWxsIGRlZmFjZSB0aGVcbiAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5XG4gICAgICogICAgICAgIGVzY2FwZWQgdGhlIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpXG4gICAgICogICAgICAgIGNoYXJhY3RlcnMuPC9wPlxuICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkXG4gICAgICogICAgICAgIGZyb20gdGhlIGRhdGFiYXNlIGJ5IGFuIGFkbWluaXN0cmF0b3IuPC9wPlxuICAgICAqICAgIDwvZGl2PlxuICAgICAqICA8L2ZpbGU+XG4gICAgICogPC9leGFtcGxlPlxuICAgICAqXG4gICAgICogQGtub3duSXNzdWVcbiAgICAgKiBJdCBpcyBjdXJyZW50bHkgbm90IHBvc3NpYmxlIGZvciBhbiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbiB0byBjb250YWluIHRoZSBpbnRlcnBvbGF0aW9uIGVuZFxuICAgICAqIHN5bWJvbC4gRm9yIGV4YW1wbGUsIGB7eyAnfX0nIH19YCB3aWxsIGJlIGluY29ycmVjdGx5IGludGVycHJldGVkIGFzIGB7eyAnIH19YCArIGAnIH19YCwgaS5lLlxuICAgICAqIGFuIGludGVycG9sYXRlZCBleHByZXNzaW9uIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGUtcXVvdGUgKGAnYCkgYW5kIHRoZSBgJyB9fWAgc3RyaW5nLlxuICAgICAqXG4gICAgICogQGtub3duSXNzdWVcbiAgICAgKiBBbGwgZGlyZWN0aXZlcyBhbmQgY29tcG9uZW50cyBtdXN0IHVzZSB0aGUgc3RhbmRhcmQgYHt7YCBgfX1gIGludGVycG9sYXRpb24gc3ltYm9sc1xuICAgICAqIGluIHRoZWlyIHRlbXBsYXRlcy4gSWYgeW91IGNoYW5nZSB0aGUgYXBwbGljYXRpb24gaW50ZXJwb2xhdGlvbiBzeW1ib2xzIHRoZSB7QGxpbmsgJGNvbXBpbGV9XG4gICAgICogc2VydmljZSB3aWxsIGF0dGVtcHQgdG8gZGVub3JtYWxpemUgdGhlIHN0YW5kYXJkIHN5bWJvbHMgdG8gdGhlIGN1c3RvbSBzeW1ib2xzLlxuICAgICAqIFRoZSBkZW5vcm1hbGl6YXRpb24gcHJvY2VzcyBpcyBub3QgY2xldmVyIGVub3VnaCB0byBrbm93IG5vdCB0byByZXBsYWNlIGluc3RhbmNlcyBvZiB0aGUgc3RhbmRhcmRcbiAgICAgKiBzeW1ib2xzIHdoZXJlIHRoZXkgd291bGQgbm90IG5vcm1hbGx5IGJlIHRyZWF0ZWQgYXMgaW50ZXJwb2xhdGlvbiBzeW1ib2xzLiBGb3IgZXhhbXBsZSBpbiB0aGUgZm9sbG93aW5nXG4gICAgICogY29kZSBzbmlwcGV0IHRoZSBjbG9zaW5nIGJyYWNlcyBvZiB0aGUgbGl0ZXJhbCBvYmplY3Qgd2lsbCBnZXQgaW5jb3JyZWN0bHkgZGVub3JtYWxpemVkOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPGRpdiBkYXRhLWNvbnRleHQ9J3tcImNvbnRleHRcIjp7XCJpZFwiOjMsXCJ0eXBlXCI6XCJwYWdlXCJ9fVwiPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIHdvcmthcm91bmQgaXMgdG8gZW5zdXJlIHRoYXQgc3VjaCBpbnN0YW5jZXMgYXJlIHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlOlxuICAgICAqIGBgYFxuICAgICAqIDxkaXYgZGF0YS1jb250ZXh0PSd7XCJjb250ZXh0XCI6e1wiaWRcIjozLFwidHlwZVwiOlwicGFnZVwifSB9XCI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE0NjEwI2lzc3VlY29tbWVudC0yMTk0MDEwOTkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtdXN0SGF2ZUV4cHJlc3Npb24gaWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgaW50ZXJwb2xhdGlvbiBzdHJpbmcgbXVzdCBoYXZlXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byByZXR1cm4gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gU3RyaW5ncyB3aXRoIG5vXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHRydXN0ZWRDb250ZXh0IHdoZW4gcHJvdmlkZWQsIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBwYXNzZXMgdGhlIGludGVycG9sYXRlZFxuICAgICAqICAgIHJlc3VsdCB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKGludGVycG9sYXRlZFJlc3VsdCxcbiAgICAgKiAgICB0cnVzdGVkQ29udGV4dCl9IGJlZm9yZSByZXR1cm5pbmcgaXQuICBSZWZlciB0byB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZSB0aGF0XG4gICAgICogICAgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZm9yIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gYWxsT3JOb3RoaW5nIGlmIGB0cnVlYCwgdGhlbiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcmV0dXJucyB1bmRlZmluZWRcbiAgICAgKiAgICB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCl9IGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICAgICAqICAgIGludGVycG9sYXRlZCBzdHJpbmcuIFRoZSBmdW5jdGlvbiBoYXMgdGhlc2UgcGFyYW1ldGVyczpcbiAgICAgKlxuICAgICAqIC0gYGNvbnRleHRgOiBldmFsdWF0aW9uIGNvbnRleHQgZm9yIGFsbCBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgaW50ZXJwb2xhdGVkIHRleHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkaW50ZXJwb2xhdGUodGV4dCwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKSB7XG4gICAgICAvLyBQcm92aWRlIGEgcXVpY2sgZXhpdCBhbmQgc2ltcGxpZmllZCByZXN1bHQgZnVuY3Rpb24gZm9yIHRleHQgd2l0aCBubyBpbnRlcnBvbGF0aW9uXG4gICAgICBpZiAoIXRleHQubGVuZ3RoIHx8IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCkgPT09IC0xKSB7XG4gICAgICAgIHZhciBjb25zdGFudEludGVycDtcbiAgICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24pIHtcbiAgICAgICAgICB2YXIgdW5lc2NhcGVkVGV4dCA9IHVuZXNjYXBlVGV4dCh0ZXh0KTtcbiAgICAgICAgICBjb25zdGFudEludGVycCA9IHZhbHVlRm4odW5lc2NhcGVkVGV4dCk7XG4gICAgICAgICAgY29uc3RhbnRJbnRlcnAuZXhwID0gdGV4dDtcbiAgICAgICAgICBjb25zdGFudEludGVycC5leHByZXNzaW9ucyA9IFtdO1xuICAgICAgICAgIGNvbnN0YW50SW50ZXJwLiQkd2F0Y2hEZWxlZ2F0ZSA9IGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3RhbnRJbnRlcnA7XG4gICAgICB9XG5cbiAgICAgIGFsbE9yTm90aGluZyA9ICEhYWxsT3JOb3RoaW5nO1xuICAgICAgdmFyIHN0YXJ0SW5kZXgsXG4gICAgICAgICAgZW5kSW5kZXgsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGV4cHJlc3Npb25zID0gW10sXG4gICAgICAgICAgcGFyc2VGbnMgPSBbXSxcbiAgICAgICAgICB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGgsXG4gICAgICAgICAgZXhwLFxuICAgICAgICAgIGNvbmNhdCA9IFtdLFxuICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgdGV4dExlbmd0aCkge1xuICAgICAgICBpZiAoKChzdGFydEluZGV4ID0gdGV4dC5pbmRleE9mKHN0YXJ0U3ltYm9sLCBpbmRleCkpICE9PSAtMSkgJiZcbiAgICAgICAgICAgICAoKGVuZEluZGV4ID0gdGV4dC5pbmRleE9mKGVuZFN5bWJvbCwgc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoKSkgIT09IC0xKSkge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KTtcbiAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cCk7XG4gICAgICAgICAgcGFyc2VGbnMucHVzaCgkcGFyc2UoZXhwLCBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKSk7XG4gICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDtcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zLnB1c2goY29uY2F0Lmxlbmd0aCk7XG4gICAgICAgICAgY29uY2F0LnB1c2goJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbiBpbnRlcnBvbGF0aW9uLCBzbyB3ZSBoYXZlIHRvIGFkZCB0aGUgcmVtYWluZGVyIHRvIHRoZSBzZXBhcmF0b3JzIGFycmF5XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mXG4gICAgICAvLyBjb25jYXRlbmF0ZWQgdmFsdWVzIGFyZSB1bnNhZmUgdG8gdXNlIGFuZCBjb3VsZCBlYXNpbHkgbGVhZCB0byBYU1MuICBCeSByZXF1aXJpbmcgdGhhdCBhXG4gICAgICAvLyBzaW5nbGUgZXhwcmVzc2lvbiBiZSB1c2VkIGZvciBpZnJhbWVbc3JjXSwgb2JqZWN0W3NyY10sIGV0Yy4sIHdlIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZVxuICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3JcbiAgICAgIC8vIG1ha2UgaXQgb2J2aW91cyB0aGF0IHlvdSBib3VuZCB0aGUgdmFsdWUgdG8gc29tZSB1c2VyIGNvbnRyb2xsZWQgdmFsdWUuICBUaGlzIGhlbHBzIHJlZHVjZVxuICAgICAgLy8gdGhlIGxvYWQgd2hlbiBhdWRpdGluZyBmb3IgWFNTIGlzc3Vlcy5cbiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICRpbnRlcnBvbGF0ZU1pbkVyci50aHJvd05vY29uY2F0KHRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11c3RIYXZlRXhwcmVzc2lvbiB8fCBleHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNvbXB1dGUgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYWxsT3JOb3RoaW5nICYmIGlzVW5kZWZpbmVkKHZhbHVlc1tpXSkpIHJldHVybjtcbiAgICAgICAgICAgIGNvbmNhdFtleHByZXNzaW9uUG9zaXRpb25zW2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbmNhdC5qb2luKCcnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVzdGVkQ29udGV4dCA/XG4gICAgICAgICAgICAkc2NlLmdldFRydXN0ZWQodHJ1c3RlZENvbnRleHQsIHZhbHVlKSA6XG4gICAgICAgICAgICAkc2NlLnZhbHVlT2YodmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gaW50ZXJwb2xhdGlvbkZuKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkoaWkpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBwYXJzZUZuc1tpXShjb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBjb21wdXRlKHZhbHVlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoJGludGVycG9sYXRlTWluRXJyLmludGVycih0ZXh0LCBlcnIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAvLyBhbGwgb2YgdGhlc2UgcHJvcGVydGllcyBhcmUgdW5kb2N1bWVudGVkIGZvciBub3dcbiAgICAgICAgICBleHA6IHRleHQsIC8vanVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHJlZ3VsYXIgd2F0Y2hlcnMgY3JlYXRlZCB2aWEgJHdhdGNoXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgICQkd2F0Y2hEZWxlZ2F0ZTogZnVuY3Rpb24oc2NvcGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaEdyb3VwKHBhcnNlRm5zLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoZXIodmFsdWVzLCBvbGRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBjdXJyVmFsdWUsIHZhbHVlcyAhPT0gb2xkVmFsdWVzID8gbGFzdFZhbHVlIDogY3VyclZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gY3VyclZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcih2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBhbGxPck5vdGhpbmcgJiYgIWlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKCRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIodGV4dCwgZXJyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjc3RhcnRTeW1ib2xcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2xgfSB0byBjaGFuZ2VcbiAgICAgKiB0aGUgc3ltYm9sLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjZW5kU3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAgICpcbiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGVuZCBzeW1ib2wuXG4gICAgICovXG4gICAgJGludGVycG9sYXRlLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuZFN5bWJvbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuICRpbnRlcnBvbGF0ZTtcbiAgfV07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEludGVydmFsUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckd2luZG93JywgJyRxJywgJyQkcScsICckYnJvd3NlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkd2luZG93LCAgICRxLCAgICQkcSwgICAkYnJvd3Nlcikge1xuICAgIHZhciBpbnRlcnZhbHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkaW50ZXJ2YWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YFxuICAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZVxuICAgICAgKiBub3RpZmllZCB1cG9uIGVhY2ggdGljayBvZiB0aGUgaW50ZXJ2YWwsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIGBjb3VudGAgaXRlcmF0aW9ucywgb3JcbiAgICAgICogcnVuIGluZGVmaW5pdGVseSBpZiBgY291bnRgIGlzIG5vdCBkZWZpbmVkLiBUaGUgdmFsdWUgb2YgdGhlIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHRoZVxuICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLlxuICAgICAgKiBUbyBjYW5jZWwgYW4gaW50ZXJ2YWwsIGNhbGwgYCRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSlgLlxuICAgICAgKlxuICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNmbHVzaCBgJGludGVydmFsLmZsdXNoKG1pbGxpcylgfSB0b1xuICAgICAgKiBtb3ZlIGZvcndhcmQgYnkgYG1pbGxpc2AgbWlsbGlzZWNvbmRzIGFuZCB0cmlnZ2VyIGFueSBmdW5jdGlvbnMgc2NoZWR1bGVkIHRvIHJ1biBpbiB0aGF0XG4gICAgICAqIHRpbWUuXG4gICAgICAqXG4gICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAqICoqTm90ZSoqOiBJbnRlcnZhbHMgY3JlYXRlZCBieSB0aGlzIHNlcnZpY2UgbXVzdCBiZSBleHBsaWNpdGx5IGRlc3Ryb3llZCB3aGVuIHlvdSBhcmUgZmluaXNoZWRcbiAgICAgICogd2l0aCB0aGVtLiAgSW4gcGFydGljdWxhciB0aGV5IGFyZSBub3QgYXV0b21hdGljYWxseSBkZXN0cm95ZWQgd2hlbiBhIGNvbnRyb2xsZXIncyBzY29wZSBvciBhXG4gICAgICAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgYXJlIGRlc3Ryb3llZC5cbiAgICAgICogWW91IHNob3VsZCB0YWtlIHRoaXMgaW50byBjb25zaWRlcmF0aW9uIGFuZCBtYWtlIHN1cmUgdG8gYWx3YXlzIGNhbmNlbCB0aGUgaW50ZXJ2YWwgYXQgdGhlXG4gICAgICAqIGFwcHJvcHJpYXRlIG1vbWVudC4gIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhbmQgd2hlbiB0byBkbyB0aGlzLlxuICAgICAgKiA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCByZXBlYXRlZGx5LiBJZiBubyBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAgKiAgIGFyZSBwYXNzZWQgKHNlZSBiZWxvdyksIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCBpdGVyYXRpb24gY291bnQuXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZWFjaCBmdW5jdGlvbiBjYWxsLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdFxuICAgICAgKiAgIGluZGVmaW5pdGVseS5cbiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suXG4gICAgICAqIEBwYXJhbSB7Li4uKj19IFBhc3MgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHRoZSBleGVjdXRlZCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIG5vdGlmaWVkIG9uIGVhY2ggaXRlcmF0aW9uLiBJdCB3aWxsIHJlc29sdmUgb25jZSBhbGwgaXRlcmF0aW9ucyBvZiB0aGUgaW50ZXJ2YWwgY29tcGxldGUuXG4gICAgICAqXG4gICAgICAqIEBleGFtcGxlXG4gICAgICAqIDxleGFtcGxlIG1vZHVsZT1cImludGVydmFsRXhhbXBsZVwiIG5hbWU9XCJpbnRlcnZhbC1zZXJ2aWNlXCI+XG4gICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAqICAgPHNjcmlwdD5cbiAgICAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdpbnRlcnZhbEV4YW1wbGUnLCBbXSlcbiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZvcm1hdCA9ICdNL2QveXkgaDptbTpzcyBhJztcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCBhIG5ldyBmaWdodCBpZiB3ZSBhcmUgYWxyZWFkeSBmaWdodGluZ1xuICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICBzdG9wID0gJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMztcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0O1xuICAgICAgKiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wKTtcbiAgICAgICogICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLnJlc2V0RmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vXG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTtcbiAgICAgICogICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgIH1dKVxuICAgICAgKiAgICAgICAvLyBSZWdpc3RlciB0aGUgJ215Q3VycmVudFRpbWUnIGRpcmVjdGl2ZSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRpbnRlcnZhbCwgZGF0ZUZpbHRlcikge1xuICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICogICAgICAgICAgICAgdmFyIGZvcm1hdCwgIC8vIGRhdGUgZm9ybWF0XG4gICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gdXNlZCB0byB1cGRhdGUgdGhlIFVJXG4gICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS5cbiAgICAgICogICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAqICAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICogICA8L3NjcmlwdD5cbiAgICAgICpcbiAgICAgICogICA8ZGl2PlxuICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICogICAgICAgPGxhYmVsPkRhdGUgZm9ybWF0OiA8aW5wdXQgbmctbW9kZWw9XCJmb3JtYXRcIj48L2xhYmVsPiA8aHIvPlxuICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICogICAgICAgPGhyLz5cbiAgICAgICogICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PlxuICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJmaWdodCgpXCI+RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInN0b3BGaWdodCgpXCI+U3RvcEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICA8L2Rpdj5cbiAgICAgICogICA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogPC9maWxlPlxuICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7XG4gICAgICB2YXIgaGFzUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQsXG4gICAgICAgICAgYXJncyA9IGhhc1BhcmFtcyA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDQpIDogW10sXG4gICAgICAgICAgc2V0SW50ZXJ2YWwgPSAkd2luZG93LnNldEludGVydmFsLFxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsXG4gICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgaWYgKHNraXBBcHBseSkge1xuICAgICAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLm5vdGlmeShpdGVyYXRpb24rKyk7XG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCAmJiBpdGVyYXRpb24gPj0gY291bnQpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGl0ZXJhdGlvbik7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcblxuICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKCFoYXNQYXJhbXMpIHtcbiAgICAgICAgICBmbihpdGVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGludGVydmFsI2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkaW50ZXJ2YWxgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgd2FzIHN1Y2Nlc3NmdWxseSBjYW5jZWxlZC5cbiAgICAgICovXG4gICAgaW50ZXJ2YWwuY2FuY2VsID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJGludGVydmFsSWQgaW4gaW50ZXJ2YWxzKSB7XG4gICAgICAgIC8vIEludGVydmFsIGNhbmNlbHMgc2hvdWxkIG5vdCByZXBvcnQgYXMgdW5oYW5kbGVkIHByb21pc2UuXG4gICAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0ucHJvbWlzZS5jYXRjaChub29wKTtcbiAgICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgICR3aW5kb3cuY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGludGVydmFsO1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGpzb25wQ2FsbGJhY2tzXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHNlcnZpY2UgaGFuZGxlcyB0aGUgbGlmZWN5Y2xlIG9mIGNhbGxiYWNrcyB0byBoYW5kbGUgSlNPTlAgcmVxdWVzdHMuXG4gKiBPdmVycmlkZSB0aGlzIHNlcnZpY2UgaWYgeW91IHdpc2ggdG8gY3VzdG9taXNlIHdoZXJlIHRoZSBjYWxsYmFja3MgYXJlIHN0b3JlZCBhbmRcbiAqIGhvdyB0aGV5IHZhcnkgY29tcGFyZWQgdG8gdGhlIHJlcXVlc3RlZCB1cmwuXG4gKi9cbnZhciAkanNvbnBDYWxsYmFja3NQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IGFuZ3VsYXIuY2FsbGJhY2tzO1xuICAgIHZhciBjYWxsYmFja01hcCA9IHt9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2tJZCkge1xuICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjYWxsYmFjay5kYXRhID0gZGF0YTtcbiAgICAgICAgY2FsbGJhY2suY2FsbGVkID0gdHJ1ZTtcbiAgICAgIH07XG4gICAgICBjYWxsYmFjay5pZCA9IGNhbGxiYWNrSWQ7XG4gICAgICByZXR1cm4gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGpzb25wQ2FsbGJhY2tzI2NyZWF0ZUNhbGxiYWNrXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIHRoZSB1cmwgb2YgdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBjYWxsYmFjayBwYXRoIHRvIHNlbmQgdG8gdGhlIHNlcnZlciBhcyBwYXJ0IG9mIHRoZSBKU09OUCByZXF1ZXN0XG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIHtAbGluayAkaHR0cEJhY2tlbmR9IGNhbGxzIHRoaXMgbWV0aG9kIHRvIGNyZWF0ZSBhIGNhbGxiYWNrIGFuZCBnZXQgaG9sZCBvZiB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2tcbiAgICAgICAqIHRvIHBhc3MgdG8gdGhlIHNlcnZlciwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGggaXRzIHBheWxvYWQgaW4gdGhlIEpTT05QIHJlc3BvbnNlLlxuICAgICAgICovXG4gICAgICBjcmVhdGVDYWxsYmFjazogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHZhciBjYWxsYmFja0lkID0gJ18nICsgKGNhbGxiYWNrcy4kJGNvdW50ZXIrKykudG9TdHJpbmcoMzYpO1xuICAgICAgICB2YXIgY2FsbGJhY2tQYXRoID0gJ2FuZ3VsYXIuY2FsbGJhY2tzLicgKyBjYWxsYmFja0lkO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBjcmVhdGVDYWxsYmFjayhjYWxsYmFja0lkKTtcbiAgICAgICAgY2FsbGJhY2tNYXBbY2FsbGJhY2tQYXRoXSA9IGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGNhbGxiYWNrO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tQYXRoO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGpzb25wQ2FsbGJhY2tzI3dhc0NhbGxlZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxiYWNrUGF0aCB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2sgdGhhdCB3YXMgc2VudCBpbiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGNhbGxiYWNrIGhhcyBiZWVuIGNhbGxlZCwgYXMgYSByZXN1bHQgb2YgdGhlIEpTT05QIHJlc3BvbnNlXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIHtAbGluayAkaHR0cEJhY2tlbmR9IGNhbGxzIHRoaXMgbWV0aG9kIHRvIGZpbmQgb3V0IHdoZXRoZXIgdGhlIEpTT05QIHJlc3BvbnNlIGFjdHVhbGx5IGNhbGxlZCB0aGVcbiAgICAgICAqIGNhbGxiYWNrIHRoYXQgd2FzIHBhc3NlZCBpbiB0aGUgcmVxdWVzdC5cbiAgICAgICAqL1xuICAgICAgd2FzQ2FsbGVkOiBmdW5jdGlvbihjYWxsYmFja1BhdGgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF0uY2FsbGVkO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGpzb25wQ2FsbGJhY2tzI2dldFJlc3BvbnNlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGJhY2tQYXRoIHRoZSBwYXRoIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdhcyBzZW50IGluIHRoZSBKU09OUCByZXF1ZXN0XG4gICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIGRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgcmVzcG9uc2UgdmlhIHRoZSByZWdpc3RlcmVkIGNhbGxiYWNrXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIHtAbGluayAkaHR0cEJhY2tlbmR9IGNhbGxzIHRoaXMgbWV0aG9kIHRvIGdldCBob2xkIG9mIHRoZSBkYXRhIHRoYXQgd2FzIHByb3ZpZGVkIHRvIHRoZSBjYWxsYmFja1xuICAgICAgICogaW4gdGhlIEpTT05QIHJlc3BvbnNlLlxuICAgICAgICovXG4gICAgICBnZXRSZXNwb25zZTogZnVuY3Rpb24oY2FsbGJhY2tQYXRoKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdLmRhdGE7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3MjcmVtb3ZlQ2FsbGJhY2tcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsYmFja1BhdGggdGhlIHBhdGggdG8gdGhlIGNhbGxiYWNrIHRoYXQgd2FzIHNlbnQgaW4gdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICoge0BsaW5rICRodHRwQmFja2VuZH0gY2FsbHMgdGhpcyBtZXRob2QgdG8gcmVtb3ZlIHRoZSBjYWxsYmFjayBhZnRlciB0aGUgSlNPTlAgcmVxdWVzdCBoYXNcbiAgICAgICAqIGNvbXBsZXRlZCBvciB0aW1lZC1vdXQuXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNhbGxiYWNrOiBmdW5jdGlvbihjYWxsYmFja1BhdGgpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tNYXBbY2FsbGJhY2tQYXRoXTtcbiAgICAgICAgZGVsZXRlIGNhbGxiYWNrc1tjYWxsYmFjay5pZF07XG4gICAgICAgIGRlbGV0ZSBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYWxlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAkbG9jYWxlIHNlcnZpY2UgcHJvdmlkZXMgbG9jYWxpemF0aW9uIHJ1bGVzIGZvciB2YXJpb3VzIEFuZ3VsYXIgY29tcG9uZW50cy4gQXMgb2YgcmlnaHQgbm93IHRoZVxuICogb25seSBwdWJsaWMgYXBpIGlzOlxuICpcbiAqICogYGlkYCDigJMgYHtzdHJpbmd9YCDigJMgbG9jYWxlIGlkIGZvcm1hdHRlZCBhcyBgbGFuZ3VhZ2VJZC1jb3VudHJ5SWRgIChlLmcuIGBlbi11c2ApXG4gKi9cblxudmFyIFBBVEhfTUFUQ0ggPSAvXihbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8sXG4gICAgREVGQVVMVF9QT1JUUyA9IHsnaHR0cCc6IDgwLCAnaHR0cHMnOiA0NDMsICdmdHAnOiAyMX07XG52YXIgJGxvY2F0aW9uTWluRXJyID0gbWluRXJyKCckbG9jYXRpb24nKTtcblxuXG4vKipcbiAqIEVuY29kZSBwYXRoIHVzaW5nIGVuY29kZVVyaVNlZ21lbnQsIGlnbm9yaW5nIGZvcndhcmQgc2xhc2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gZW5jb2RlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLycpLFxuICAgICAgaSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgc2VnbWVudHNbaV0gPSBlbmNvZGVVcmlTZWdtZW50KHNlZ21lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50cy5qb2luKCcvJyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQWJzb2x1dGVVcmwoYWJzb2x1dGVVcmwsIGxvY2F0aW9uT2JqKSB7XG4gIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKGFic29sdXRlVXJsKTtcblxuICBsb2NhdGlvbk9iai4kJHByb3RvY29sID0gcGFyc2VkVXJsLnByb3RvY29sO1xuICBsb2NhdGlvbk9iai4kJGhvc3QgPSBwYXJzZWRVcmwuaG9zdG5hbWU7XG4gIGxvY2F0aW9uT2JqLiQkcG9ydCA9IHRvSW50KHBhcnNlZFVybC5wb3J0KSB8fCBERUZBVUxUX1BPUlRTW3BhcnNlZFVybC5wcm90b2NvbF0gfHwgbnVsbDtcbn1cblxudmFyIERPVUJMRV9TTEFTSF9SRUdFWCA9IC9eXFxzKltcXFxcL117Mix9LztcbmZ1bmN0aW9uIHBhcnNlQXBwVXJsKHVybCwgbG9jYXRpb25PYmopIHtcblxuICBpZiAoRE9VQkxFX1NMQVNIX1JFR0VYLnRlc3QodXJsKSkge1xuICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignYmFkcGF0aCcsICdJbnZhbGlkIHVybCBcInswfVwiLicsIHVybCk7XG4gIH1cblxuICB2YXIgcHJlZml4ZWQgPSAodXJsLmNoYXJBdCgwKSAhPT0gJy8nKTtcbiAgaWYgKHByZWZpeGVkKSB7XG4gICAgdXJsID0gJy8nICsgdXJsO1xuICB9XG4gIHZhciBtYXRjaCA9IHVybFJlc29sdmUodXJsKTtcbiAgbG9jYXRpb25PYmouJCRwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHByZWZpeGVkICYmIG1hdGNoLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID9cbiAgICAgIG1hdGNoLnBhdGhuYW1lLnN1YnN0cmluZygxKSA6IG1hdGNoLnBhdGhuYW1lKTtcbiAgbG9jYXRpb25PYmouJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKG1hdGNoLnNlYXJjaCk7XG4gIGxvY2F0aW9uT2JqLiQkaGFzaCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5oYXNoKTtcblxuICAvLyBtYWtlIHN1cmUgcGF0aCBzdGFydHMgd2l0aCAnLyc7XG4gIGlmIChsb2NhdGlvbk9iai4kJHBhdGggJiYgbG9jYXRpb25PYmouJCRwYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgbG9jYXRpb25PYmouJCRwYXRoID0gJy8nICsgbG9jYXRpb25PYmouJCRwYXRoO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gpIHtcbiAgcmV0dXJuIHN0ci5zbGljZSgwLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyB0ZXh0IGZyb20gYHVybGAgYWZ0ZXIgYGJhc2VgIG9yIGB1bmRlZmluZWRgIGlmIGl0IGRvZXMgbm90IGJlZ2luIHdpdGhcbiAqICAgICAgICAgICAgICAgICAgIHRoZSBleHBlY3RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQmFzZVVybChiYXNlLCB1cmwpIHtcbiAgaWYgKHN0YXJ0c1dpdGgodXJsLCBiYXNlKSkge1xuICAgIHJldHVybiB1cmwuc3Vic3RyKGJhc2UubGVuZ3RoKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zdWJzdHIoMCwgaW5kZXgpO1xufVxuXG5mdW5jdGlvbiB0cmltRW1wdHlIYXNoKHVybCkge1xuICByZXR1cm4gdXJsLnJlcGxhY2UoLygjLispfCMkLywgJyQxJyk7XG59XG5cblxuZnVuY3Rpb24gc3RyaXBGaWxlKHVybCkge1xuICByZXR1cm4gdXJsLnN1YnN0cigwLCBzdHJpcEhhc2godXJsKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG59XG5cbi8qIHJldHVybiB0aGUgc2VydmVyIG9ubHkgKHNjaGVtZTovL2hvc3Q6cG9ydCkgKi9cbmZ1bmN0aW9uIHNlcnZlckJhc2UodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCcvJywgdXJsLmluZGV4T2YoJy8vJykgKyAyKSk7XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkh0bWw1VXJsIHJlcHJlc2VudHMgYSBVUkxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBIVE1MNSBtb2RlIGlzIGVuYWJsZWQgYW5kIHN1cHBvcnRlZFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlTm9GaWxlIGFwcGxpY2F0aW9uIGJhc2UgVVJMIHN0cmlwcGVkIG9mIGFueSBmaWxlbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQcmVmaXggVVJMIHBhdGggcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSHRtbDVVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgYmFzZVByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBiYXNlUHJlZml4ID0gYmFzZVByZWZpeCB8fCAnJztcbiAgcGFyc2VBYnNvbHV0ZVVybChhcHBCYXNlLCB0aGlzKTtcblxuXG4gIC8qKlxuICAgKiBQYXJzZSBnaXZlbiBIVE1MNSAocmVndWxhcikgVVJMIHN0cmluZyBpbnRvIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIVE1MNSBVUkxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciBwYXRoVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgaWYgKCFpc1N0cmluZyhwYXRoVXJsKSkge1xuICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpcHRocHJmeCcsICdJbnZhbGlkIHVybCBcInswfVwiLCBtaXNzaW5nIHBhdGggcHJlZml4IFwiezF9XCIuJywgdXJsLFxuICAgICAgICAgIGFwcEJhc2VOb0ZpbGUpO1xuICAgIH1cblxuICAgIHBhcnNlQXBwVXJsKHBhdGhVcmwsIHRoaXMpO1xuXG4gICAgaWYgKCF0aGlzLiQkcGF0aCkge1xuICAgICAgdGhpcy4kJHBhdGggPSAnLyc7XG4gICAgfVxuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcG9zZSB1cmwgYW5kIHVwZGF0ZSBgYWJzVXJsYCBwcm9wZXJ0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlTm9GaWxlICsgdGhpcy4kJHVybC5zdWJzdHIoMSk7IC8vIGZpcnN0IGNoYXIgaXMgYWx3YXlzICcvJ1xuXG4gICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLiQkcGFyc2VMaW5rVXJsID0gZnVuY3Rpb24odXJsLCByZWxIcmVmKSB7XG4gICAgaWYgKHJlbEhyZWYgJiYgcmVsSHJlZlswXSA9PT0gJyMnKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOlxuICAgICAgLy8ga2VlcCB0aGUgb2xkIHVybCBhbmQgb25seSByZXBsYWNlIHRoZSBoYXNoIGZyYWdtZW50XG4gICAgICB0aGlzLmhhc2gocmVsSHJlZi5zbGljZSgxKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGFwcFVybCwgcHJldkFwcFVybDtcbiAgICB2YXIgcmV3cml0dGVuVXJsO1xuXG5cbiAgICBpZiAoaXNEZWZpbmVkKGFwcFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlLCB1cmwpKSkge1xuICAgICAgcHJldkFwcFVybCA9IGFwcFVybDtcbiAgICAgIGlmIChiYXNlUHJlZml4ICYmIGlzRGVmaW5lZChhcHBVcmwgPSBzdHJpcEJhc2VVcmwoYmFzZVByZWZpeCwgYXBwVXJsKSkpIHtcbiAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIChzdHJpcEJhc2VVcmwoJy8nLCBhcHBVcmwpIHx8IGFwcFVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgcHJldkFwcFVybDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZChhcHBVcmwgPSBzdHJpcEJhc2VVcmwoYXBwQmFzZU5vRmlsZSwgdXJsKSkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGUgKyBhcHBVcmw7XG4gICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09PSB1cmwgKyAnLycpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGU7XG4gICAgfVxuICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgIHRoaXMuJCRwYXJzZShyZXdyaXR0ZW5VcmwpO1xuICAgIH1cbiAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgVVJMXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gZGV2ZWxvcGVyIGRvZXNuJ3Qgb3B0IGludG8gaHRtbDUgbW9kZS5cbiAqIEl0IGFsc28gc2VydmVzIGFzIHRoZSBiYXNlIGNsYXNzIGZvciBodG1sNSBtb2RlIGZhbGxiYWNrIG9uIGxlZ2FjeSBicm93c2Vycy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IGhhc2hiYW5nIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nVXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGhhc2hQcmVmaXgpIHtcblxuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIGhhc2hiYW5nIFVSTCBpbnRvIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyBVUkxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciB3aXRob3V0QmFzZVVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlLCB1cmwpIHx8IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpO1xuICAgIHZhciB3aXRob3V0SGFzaFVybDtcblxuICAgIGlmICghaXNVbmRlZmluZWQod2l0aG91dEJhc2VVcmwpICYmIHdpdGhvdXRCYXNlVXJsLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG5cbiAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBVUkwgc3RhcnRzIHdpdGggYSBoYXNoIHNvIHdlIGhhdmVcbiAgICAgIC8vIGdvdCBlaXRoZXIgYSBoYXNoYmFuZyBwYXRoIG9yIGEgcGxhaW4gaGFzaCBmcmFnbWVudFxuICAgICAgd2l0aG91dEhhc2hVcmwgPSBzdHJpcEJhc2VVcmwoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRIYXNoVXJsKSkge1xuICAgICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcHJlZml4IHNvIHdlIGp1c3QgaGF2ZSBhIGhhc2ggZnJhZ21lbnRcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcGF0aCBub3IgaGFzaCBmcmFnbWVudDpcbiAgICAgIC8vIElmIHdlIGFyZSBpbiBIVE1MNSBtb2RlIHdlIHVzZSB3aGF0IGlzIGxlZnQgYXMgdGhlIHBhdGg7XG4gICAgICAvLyBPdGhlcndpc2Ugd2UgaWdub3JlIHdoYXQgaXMgbGVmdFxuICAgICAgaWYgKHRoaXMuJCRodG1sNSkge1xuICAgICAgICB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSAnJztcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRCYXNlVXJsKSkge1xuICAgICAgICAgIGFwcEJhc2UgPSB1cmw7XG4gICAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAodGhpcykucmVwbGFjZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2VBcHBVcmwod2l0aG91dEhhc2hVcmwsIHRoaXMpO1xuXG4gICAgdGhpcy4kJHBhdGggPSByZW1vdmVXaW5kb3dzRHJpdmVOYW1lKHRoaXMuJCRwYXRoLCB3aXRob3V0SGFzaFVybCwgYXBwQmFzZSk7XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuXG4gICAgLypcbiAgICAgKiBJbiBXaW5kb3dzLCBvbiBhbiBhbmNob3Igbm9kZSBvbiBkb2N1bWVudHMgbG9hZGVkIGZyb21cbiAgICAgKiB0aGUgZmlsZXN5c3RlbSwgdGhlIGJyb3dzZXIgd2lsbCByZXR1cm4gYSBwYXRobmFtZVxuICAgICAqIHByZWZpeGVkIHdpdGggdGhlIGRyaXZlIG5hbWUgKCcvQzovcGF0aCcpIHdoZW4gYVxuICAgICAqIHBhdGhuYW1lIHdpdGhvdXQgYSBkcml2ZSBpcyBzZXQ6XG4gICAgICogICogYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnL2ZvbycpXG4gICAgICogICAqIGEucGF0aG5hbWUgPT09ICcvQzovZm9vJyAvL3RydWVcbiAgICAgKlxuICAgICAqIEluc2lkZSBvZiBBbmd1bGFyLCB3ZSdyZSBhbHdheXMgdXNpbmcgcGF0aG5hbWVzIHRoYXRcbiAgICAgKiBkbyBub3QgaW5jbHVkZSBkcml2ZSBuYW1lcyBmb3Igcm91dGluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVXaW5kb3dzRHJpdmVOYW1lKHBhdGgsIHVybCwgYmFzZSkge1xuICAgICAgLypcbiAgICAgIE1hdGNoZXMgcGF0aHMgZm9yIGZpbGUgcHJvdG9jb2wgb24gd2luZG93cyxcbiAgICAgIHN1Y2ggYXMgL0M6L2Zvby9iYXIsIGFuZCBjYXB0dXJlcyBvbmx5IC9mb28vYmFyLlxuICAgICAgKi9cbiAgICAgIHZhciB3aW5kb3dzRmlsZVBhdGhFeHAgPSAvXlxcL1tBLVpdOihcXC8uKikvO1xuXG4gICAgICB2YXIgZmlyc3RQYXRoU2VnbWVudE1hdGNoO1xuXG4gICAgICAvL0dldCB0aGUgcmVsYXRpdmUgcGF0aCBmcm9tIHRoZSBpbnB1dCBVUkwuXG4gICAgICBpZiAoc3RhcnRzV2l0aCh1cmwsIGJhc2UpKSB7XG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKGJhc2UsICcnKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGlucHV0IFVSTCBpbnRlbnRpb25hbGx5IGNvbnRhaW5zIGEgZmlyc3QgcGF0aCBzZWdtZW50IHRoYXQgZW5kcyB3aXRoIGEgY29sb24uXG4gICAgICBpZiAod2luZG93c0ZpbGVQYXRoRXhwLmV4ZWModXJsKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH1cblxuICAgICAgZmlyc3RQYXRoU2VnbWVudE1hdGNoID0gd2luZG93c0ZpbGVQYXRoRXhwLmV4ZWMocGF0aCk7XG4gICAgICByZXR1cm4gZmlyc3RQYXRoU2VnbWVudE1hdGNoID8gZmlyc3RQYXRoU2VnbWVudE1hdGNoWzFdIDogcGF0aDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBvc2UgaGFzaGJhbmcgVVJMIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArICh0aGlzLiQkdXJsID8gaGFzaFByZWZpeCArIHRoaXMuJCR1cmwgOiAnJyk7XG5cbiAgICB0aGlzLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAoc3RyaXBIYXNoKGFwcEJhc2UpID09PSBzdHJpcEhhc2godXJsKSkge1xuICAgICAgdGhpcy4kJHBhcnNlKHVybCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufVxuXG5cbi8qKlxuICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIFVSTFxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGh0bWw1IGhpc3RvcnkgYXBpIGlzIGVuYWJsZWQgYnV0IHRoZSBicm93c2VyXG4gKiBkb2VzIG5vdCBzdXBwb3J0IGl0LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlTm9GaWxlIGFwcGxpY2F0aW9uIGJhc2UgVVJMIHN0cmlwcGVkIG9mIGFueSBmaWxlbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGhhc2hQcmVmaXgpIHtcbiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTtcbiAgTG9jYXRpb25IYXNoYmFuZ1VybC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAocmVsSHJlZiAmJiByZWxIcmVmWzBdID09PSAnIycpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgbGlua3MgdG8gaGFzaCBmcmFnbWVudHM6XG4gICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgIHRoaXMuaGFzaChyZWxIcmVmLnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciByZXdyaXR0ZW5Vcmw7XG4gICAgdmFyIGFwcFVybDtcblxuICAgIGlmIChhcHBCYXNlID09PSBzdHJpcEhhc2godXJsKSkge1xuICAgICAgcmV3cml0dGVuVXJsID0gdXJsO1xuICAgIH0gZWxzZSBpZiAoKGFwcFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpKSkge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyBhcHBVcmw7XG4gICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09PSB1cmwgKyAnLycpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGU7XG4gICAgfVxuICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgIHRoaXMuJCRwYXJzZShyZXdyaXR0ZW5VcmwpO1xuICAgIH1cbiAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gIH07XG5cbiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xuICAgIC8vIGluY2x1ZGUgaGFzaFByZWZpeCBpbiAkJGFic1VybCB3aGVuICQkdXJsIGlzIGVtcHR5IHNvIElFOSBkb2VzIG5vdCByZWxvYWQgcGFnZSBiZWNhdXNlIG9mIHJlbW92YWwgb2YgJyMnXG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2UgKyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybDtcblxuICAgIHRoaXMuJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiA9IHRydWU7XG4gIH07XG5cbn1cblxuXG52YXIgbG9jYXRpb25Qcm90b3R5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEVuc3VyZSBhYnNvbHV0ZSBVUkwgaXMgaW5pdGlhbGl6ZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAkJGFic1VybDonJyxcblxuICAvKipcbiAgICogQXJlIHdlIGluIGh0bWw1IG1vZGU/XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAkJGh0bWw1OiBmYWxzZSxcblxuICAvKipcbiAgICogSGFzIGFueSBjaGFuZ2UgYmVlbiByZXBsYWNpbmc/XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAkJHJlcGxhY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNhYnNVcmxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gZnVsbCBVUkwgcmVwcmVzZW50YXRpb24gd2l0aCBhbGwgc2VnbWVudHMgZW5jb2RlZCBhY2NvcmRpbmcgdG8gcnVsZXMgc3BlY2lmaWVkIGluXG4gICAqIFtSRkMgMzk4Nl0oaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHQpLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIGFic1VybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcbiAgICogLy8gPT4gXCJodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1wiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGZ1bGwgVVJMXG4gICAqL1xuICBhYnNVcmw6IGxvY2F0aW9uR2V0dGVyKCckJGFic1VybCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiN1cmxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIFVSTCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKSB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBwYXRoLCBzZWFyY2ggYW5kIGhhc2gsIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgdXJsID0gJGxvY2F0aW9uLnVybCgpO1xuICAgKiAvLyA9PiBcIi9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1wiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHVybCBOZXcgVVJMIHdpdGhvdXQgYmFzZSBwcmVmaXggKGUuZy4gYC9wYXRoP2E9YiNoYXNoYClcbiAgICogQHJldHVybiB7c3RyaW5nfSB1cmxcbiAgICovXG4gIHVybDogZnVuY3Rpb24odXJsKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHVybCkpIHtcbiAgICAgIHJldHVybiB0aGlzLiQkdXJsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaCA9IFBBVEhfTUFUQ0guZXhlYyh1cmwpO1xuICAgIGlmIChtYXRjaFsxXSB8fCB1cmwgPT09ICcnKSB0aGlzLnBhdGgoZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdKSk7XG4gICAgaWYgKG1hdGNoWzJdIHx8IG1hdGNoWzFdIHx8IHVybCA9PT0gJycpIHRoaXMuc2VhcmNoKG1hdGNoWzNdIHx8ICcnKTtcbiAgICB0aGlzLmhhc2gobWF0Y2hbNV0gfHwgJycpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3Byb3RvY29sXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIHByb3RvY29sIG9mIGN1cnJlbnQgVVJMLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHByb3RvY29sID0gJGxvY2F0aW9uLnByb3RvY29sKCk7XG4gICAqIC8vID0+IFwiaHR0cFwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHByb3RvY29sIG9mIGN1cnJlbnQgVVJMXG4gICAqL1xuICBwcm90b2NvbDogbG9jYXRpb25HZXR0ZXIoJyQkcHJvdG9jb2wnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jaG9zdFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBob3N0IG9mIGN1cnJlbnQgVVJMLlxuICAgKlxuICAgKiBOb3RlOiBjb21wYXJlZCB0byB0aGUgbm9uLWFuZ3VsYXIgdmVyc2lvbiBgbG9jYXRpb24uaG9zdGAgd2hpY2ggcmV0dXJucyBgaG9zdG5hbWU6cG9ydGAsIHRoaXMgcmV0dXJucyB0aGUgYGhvc3RuYW1lYCBwb3J0aW9uIG9ubHkuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgaG9zdCA9ICRsb2NhdGlvbi5ob3N0KCk7XG4gICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgKlxuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL3VzZXI6cGFzc3dvcmRAZXhhbXBsZS5jb206ODA4MC8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIGhvc3QgPSAkbG9jYXRpb24uaG9zdCgpO1xuICAgKiAvLyA9PiBcImV4YW1wbGUuY29tXCJcbiAgICogaG9zdCA9IGxvY2F0aW9uLmhvc3Q7XG4gICAqIC8vID0+IFwiZXhhbXBsZS5jb206ODA4MFwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhvc3Qgb2YgY3VycmVudCBVUkwuXG4gICAqL1xuICBob3N0OiBsb2NhdGlvbkdldHRlcignJCRob3N0JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3BvcnRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcG9ydCBvZiBjdXJyZW50IFVSTC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwb3J0ID0gJGxvY2F0aW9uLnBvcnQoKTtcbiAgICogLy8gPT4gODBcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gcG9ydFxuICAgKi9cbiAgcG9ydDogbG9jYXRpb25HZXR0ZXIoJyQkcG9ydCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNwYXRoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBwYXRoIG9mIGN1cnJlbnQgVVJMIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHBhdGggd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICogTm90ZTogUGF0aCBzaG91bGQgYWx3YXlzIGJlZ2luIHdpdGggZm9yd2FyZCBzbGFzaCAoLyksIHRoaXMgbWV0aG9kIHdpbGwgYWRkIHRoZSBmb3J3YXJkIHNsYXNoXG4gICAqIGlmIGl0IGlzIG1pc3NpbmcuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcGF0aCA9ICRsb2NhdGlvbi5wYXRoKCk7XG4gICAqIC8vID0+IFwiL3NvbWUvcGF0aFwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IHBhdGggTmV3IHBhdGhcbiAgICogQHJldHVybiB7KHN0cmluZ3xvYmplY3QpfSBwYXRoIGlmIGNhbGxlZCB3aXRoIG5vIHBhcmFtZXRlcnMsIG9yIGAkbG9jYXRpb25gIGlmIGNhbGxlZCB3aXRoIGEgcGFyYW1ldGVyXG4gICAqL1xuICBwYXRoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRwYXRoJywgZnVuY3Rpb24ocGF0aCkge1xuICAgIHBhdGggPSBwYXRoICE9PSBudWxsID8gcGF0aC50b1N0cmluZygpIDogJyc7XG4gICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3NlYXJjaFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gc2VhcmNoIHBhcnQgKGFzIG9iamVjdCkgb2YgY3VycmVudCBVUkwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2Ugc2VhcmNoIHBhcnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBzZWFyY2hPYmplY3QgPSAkbG9jYXRpb24uc2VhcmNoKCk7XG4gICAqIC8vID0+IHtmb286ICdiYXInLCBiYXo6ICd4b3hvJ31cbiAgICpcbiAgICogLy8gc2V0IGZvbyB0byAneWlwZWUnXG4gICAqICRsb2NhdGlvbi5zZWFyY2goJ2ZvbycsICd5aXBlZScpO1xuICAgKiAvLyAkbG9jYXRpb24uc2VhcmNoKCkgPT4ge2ZvbzogJ3lpcGVlJywgYmF6OiAneG94byd9XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZz58T2JqZWN0LjxBcnJheS48c3RyaW5nPj59IHNlYXJjaCBOZXcgc2VhcmNoIHBhcmFtcyAtIHN0cmluZyBvclxuICAgKiBoYXNoIG9iamVjdC5cbiAgICpcbiAgICogV2hlbiBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCB0aGUgbWV0aG9kIGFjdHMgYXMgYSBzZXR0ZXIsIHNldHRpbmcgdGhlIGBzZWFyY2hgIGNvbXBvbmVudFxuICAgKiBvZiBgJGxvY2F0aW9uYCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLlxuICAgKlxuICAgKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBoYXNoIG9iamVjdCBjb250YWluaW5nIGFuIGFycmF5IG9mIHZhbHVlcywgdGhlc2UgdmFsdWVzIHdpbGwgYmUgZW5jb2RlZFxuICAgKiBhcyBkdXBsaWNhdGUgc2VhcmNoIHBhcmFtZXRlcnMgaW4gdGhlIFVSTC5cbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfE51bWJlcnxBcnJheTxzdHJpbmc+fGJvb2xlYW4pPX0gcGFyYW1WYWx1ZSBJZiBgc2VhcmNoYCBpcyBhIHN0cmluZyBvciBudW1iZXIsIHRoZW4gYHBhcmFtVmFsdWVgXG4gICAqIHdpbGwgb3ZlcnJpZGUgb25seSBhIHNpbmdsZSBzZWFyY2ggcHJvcGVydHkuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBhbiBhcnJheSwgaXQgd2lsbCBvdmVycmlkZSB0aGUgcHJvcGVydHkgb2YgdGhlIGBzZWFyY2hgIGNvbXBvbmVudCBvZlxuICAgKiBgJGxvY2F0aW9uYCBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAgICpcbiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGBudWxsYCwgdGhlIHByb3BlcnR5IHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgZGVsZXRlZC5cbiAgICpcbiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGB0cnVlYCwgdGhlIHByb3BlcnR5IHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgYWRkZWQgd2l0aCBub1xuICAgKiB2YWx1ZSBub3IgdHJhaWxpbmcgZXF1YWwgc2lnbi5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSBJZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyB0aGUgcGFyc2VkIGBzZWFyY2hgIG9iamVjdC4gSWYgY2FsbGVkIHdpdGhcbiAgICogb25lIG9yIG1vcmUgYXJndW1lbnRzIHJldHVybnMgYCRsb2NhdGlvbmAgb2JqZWN0IGl0c2VsZi5cbiAgICovXG4gIHNlYXJjaDogZnVuY3Rpb24oc2VhcmNoLCBwYXJhbVZhbHVlKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiB0aGlzLiQkc2VhcmNoO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoaXNTdHJpbmcoc2VhcmNoKSB8fCBpc051bWJlcihzZWFyY2gpKSB7XG4gICAgICAgICAgc2VhcmNoID0gc2VhcmNoLnRvU3RyaW5nKCk7XG4gICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUoc2VhcmNoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChzZWFyY2gpKSB7XG4gICAgICAgICAgc2VhcmNoID0gY29weShzZWFyY2gsIHt9KTtcbiAgICAgICAgICAvLyByZW1vdmUgb2JqZWN0IHVuZGVmaW5lZCBvciBudWxsIHByb3BlcnRpZXNcbiAgICAgICAgICBmb3JFYWNoKHNlYXJjaCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIGRlbGV0ZSBzZWFyY2hba2V5XTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBzZWFyY2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpc3JjaGFyZycsXG4gICAgICAgICAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgb2YgdGhlIGAkbG9jYXRpb24jc2VhcmNoKClgIGNhbGwgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoaXNVbmRlZmluZWQocGFyYW1WYWx1ZSkgfHwgcGFyYW1WYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLiQkc2VhcmNoW3NlYXJjaF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy4kJHNlYXJjaFtzZWFyY2hdID0gcGFyYW1WYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2hhc2hcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJucyB0aGUgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBDaGFuZ2VzIHRoZSBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGggYSBwYXJhbWV0ZXIgYW5kIHJldHVybnMgYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94byNoYXNoVmFsdWVcbiAgICogdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpO1xuICAgKiAvLyA9PiBcImhhc2hWYWx1ZVwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGhhc2ggTmV3IGhhc2ggZnJhZ21lbnRcbiAgICogQHJldHVybiB7c3RyaW5nfSBoYXNoXG4gICAqL1xuICBoYXNoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRoYXNoJywgZnVuY3Rpb24oaGFzaCkge1xuICAgIHJldHVybiBoYXNoICE9PSBudWxsID8gaGFzaC50b1N0cmluZygpIDogJyc7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNyZXBsYWNlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJZiBjYWxsZWQsIGFsbCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBkdXJpbmcgdGhlIGN1cnJlbnQgYCRkaWdlc3RgIHdpbGwgcmVwbGFjZSB0aGUgY3VycmVudCBoaXN0b3J5XG4gICAqIHJlY29yZCwgaW5zdGVhZCBvZiBhZGRpbmcgYSBuZXcgb25lLlxuICAgKi9cbiAgcmVwbGFjZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJHJlcGxhY2UgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5mb3JFYWNoKFtMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCwgTG9jYXRpb25IYXNoYmFuZ1VybCwgTG9jYXRpb25IdG1sNVVybF0sIGZ1bmN0aW9uKExvY2F0aW9uKSB7XG4gIExvY2F0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNzdGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRoIG9uZSBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICogVGhlIHN0YXRlIG9iamVjdCBpcyBsYXRlciBwYXNzZWQgdG8gYHB1c2hTdGF0ZWAgb3IgYHJlcGxhY2VTdGF0ZWAuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgbWV0aG9kIGlzIHN1cHBvcnRlZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIG9ubHkgaW4gYnJvd3NlcnMgc3VwcG9ydGluZ1xuICAgKiB0aGUgSFRNTDUgSGlzdG9yeSBBUEkgKGkuZS4gbWV0aG9kcyBgcHVzaFN0YXRlYCBhbmQgYHJlcGxhY2VTdGF0ZWApLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0XG4gICAqIG9sZGVyIGJyb3dzZXJzIChsaWtlIElFOSBvciBBbmRyb2lkIDwgNC4wKSwgZG9uJ3QgdXNlIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIFN0YXRlIG9iamVjdCBmb3IgcHVzaFN0YXRlIG9yIHJlcGxhY2VTdGF0ZVxuICAgKiBAcmV0dXJuIHtvYmplY3R9IHN0YXRlXG4gICAqL1xuICBMb2NhdGlvbi5wcm90b3R5cGUuc3RhdGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuJCRzdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAoTG9jYXRpb24gIT09IExvY2F0aW9uSHRtbDVVcmwgfHwgIXRoaXMuJCRodG1sNSkge1xuICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub3N0YXRlJywgJ0hpc3RvcnkgQVBJIHN0YXRlIHN1cHBvcnQgaXMgYXZhaWxhYmxlIG9ubHkgJyArXG4gICAgICAgICdpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmcgSFRNTDUgSGlzdG9yeSBBUEknKTtcbiAgICB9XG4gICAgLy8gVGhlIHVzZXIgbWlnaHQgbW9kaWZ5IGBzdGF0ZU9iamVjdGAgYWZ0ZXIgaW52b2tpbmcgYCRsb2NhdGlvbi5zdGF0ZShzdGF0ZU9iamVjdClgXG4gICAgLy8gYnV0IHdlJ3JlIGNoYW5naW5nIHRoZSAkJHN0YXRlIHJlZmVyZW5jZSB0byAkYnJvd3Nlci5zdGF0ZSgpIGR1cmluZyB0aGUgJGRpZ2VzdFxuICAgIC8vIHNvIHRoZSBtb2RpZmljYXRpb24gd2luZG93IGlzIG5hcnJvdy5cbiAgICB0aGlzLiQkc3RhdGUgPSBpc1VuZGVmaW5lZChzdGF0ZSkgPyBudWxsIDogc3RhdGU7XG4gICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cblxuZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXIocHJvcGVydHkpIHtcbiAgcmV0dXJuIC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gIH07XG59XG5cblxuZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXJTZXR0ZXIocHJvcGVydHksIHByZXByb2Nlc3MpIHtcbiAgcmV0dXJuIC8qKiBAdGhpcyAqLyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICB0aGlzW3Byb3BlcnR5XSA9IHByZXByb2Nlc3ModmFsdWUpO1xuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYXRpb25cbiAqXG4gKiBAcmVxdWlyZXMgJHJvb3RFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgJGxvY2F0aW9uIHNlcnZpY2UgcGFyc2VzIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIgKGJhc2VkIG9uIHRoZVxuICogW3dpbmRvdy5sb2NhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vd2luZG93LmxvY2F0aW9uKSkgYW5kIG1ha2VzIHRoZSBVUkxcbiAqIGF2YWlsYWJsZSB0byB5b3VyIGFwcGxpY2F0aW9uLiBDaGFuZ2VzIHRvIHRoZSBVUkwgaW4gdGhlIGFkZHJlc3MgYmFyIGFyZSByZWZsZWN0ZWQgaW50b1xuICogJGxvY2F0aW9uIHNlcnZpY2UgYW5kIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGFyZSByZWZsZWN0ZWQgaW50byB0aGUgYnJvd3NlciBhZGRyZXNzIGJhci5cbiAqXG4gKiAqKlRoZSAkbG9jYXRpb24gc2VydmljZToqKlxuICpcbiAqIC0gRXhwb3NlcyB0aGUgY3VycmVudCBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIsIHNvIHlvdSBjYW5cbiAqICAgLSBXYXRjaCBhbmQgb2JzZXJ2ZSB0aGUgVVJMLlxuICogICAtIENoYW5nZSB0aGUgVVJMLlxuICogLSBTeW5jaHJvbml6ZXMgdGhlIFVSTCB3aXRoIHRoZSBicm93c2VyIHdoZW4gdGhlIHVzZXJcbiAqICAgLSBDaGFuZ2VzIHRoZSBhZGRyZXNzIGJhci5cbiAqICAgLSBDbGlja3MgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24gKG9yIGNsaWNrcyBhIEhpc3RvcnkgbGluaykuXG4gKiAgIC0gQ2xpY2tzIG9uIGEgbGluay5cbiAqIC0gUmVwcmVzZW50cyB0aGUgVVJMIG9iamVjdCBhcyBhIHNldCBvZiBtZXRob2RzIChwcm90b2NvbCwgaG9zdCwgcG9ydCwgcGF0aCwgc2VhcmNoLCBoYXNoKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGd1aWRlLyRsb2NhdGlvbiBEZXZlbG9wZXIgR3VpZGU6IFVzaW5nICRsb2NhdGlvbn1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhlIGAkbG9jYXRpb25Qcm92aWRlcmAgdG8gY29uZmlndXJlIGhvdyB0aGUgYXBwbGljYXRpb24gZGVlcCBsaW5raW5nIHBhdGhzIGFyZSBzdG9yZWQuXG4gKi9cbmZ1bmN0aW9uICRMb2NhdGlvblByb3ZpZGVyKCkge1xuICB2YXIgaGFzaFByZWZpeCA9ICchJyxcbiAgICAgIGh0bWw1TW9kZSA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlcXVpcmVCYXNlOiB0cnVlLFxuICAgICAgICByZXdyaXRlTGlua3M6IHRydWVcbiAgICAgIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIjaGFzaFByZWZpeFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBwcmVmaXggaXMgYCchJ2AuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcHJlZml4IFByZWZpeCBmb3IgaGFzaCBwYXJ0IChjb250YWluaW5nIHBhdGggYW5kIHNlYXJjaClcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuaGFzaFByZWZpeCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIGlmIChpc0RlZmluZWQocHJlZml4KSkge1xuICAgICAgaGFzaFByZWZpeCA9IHByZWZpeDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGFzaFByZWZpeDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIjaHRtbDVNb2RlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBAcGFyYW0geyhib29sZWFufE9iamVjdCk9fSBtb2RlIElmIGJvb2xlYW4sIHNldHMgYGh0bWw1TW9kZS5lbmFibGVkYCB0byB2YWx1ZS5cbiAgICogICBJZiBvYmplY3QsIHNldHMgYGVuYWJsZWRgLCBgcmVxdWlyZUJhc2VgIGFuZCBgcmV3cml0ZUxpbmtzYCB0byByZXNwZWN0aXZlIHZhbHVlcy4gU3VwcG9ydGVkXG4gICAqICAgcHJvcGVydGllczpcbiAgICogICAtICoqZW5hYmxlZCoqIOKAkyBge2Jvb2xlYW59YCDigJMgKGRlZmF1bHQ6IGZhbHNlKSBJZiB0cnVlLCB3aWxsIHJlbHkgb24gYGhpc3RvcnkucHVzaFN0YXRlYCB0b1xuICAgKiAgICAgY2hhbmdlIHVybHMgd2hlcmUgc3VwcG9ydGVkLiBXaWxsIGZhbGwgYmFjayB0byBoYXNoLXByZWZpeGVkIHBhdGhzIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90XG4gICAqICAgICBzdXBwb3J0IGBwdXNoU3RhdGVgLlxuICAgKiAgIC0gKipyZXF1aXJlQmFzZSoqIC0gYHtib29sZWFufWAgLSAoZGVmYXVsdDogYHRydWVgKSBXaGVuIGh0bWw1TW9kZSBpcyBlbmFibGVkLCBzcGVjaWZpZXNcbiAgICogICAgIHdoZXRoZXIgb3Igbm90IGEgPGJhc2U+IHRhZyBpcyByZXF1aXJlZCB0byBiZSBwcmVzZW50LiBJZiBgZW5hYmxlZGAgYW5kIGByZXF1aXJlQmFzZWAgYXJlXG4gICAqICAgICB0cnVlLCBhbmQgYSBiYXNlIHRhZyBpcyBub3QgcHJlc2VudCwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gd2hlbiBgJGxvY2F0aW9uYCBpcyBpbmplY3RlZC5cbiAgICogICAgIFNlZSB0aGUge0BsaW5rIGd1aWRlLyRsb2NhdGlvbiAkbG9jYXRpb24gZ3VpZGUgZm9yIG1vcmUgaW5mb3JtYXRpb259XG4gICAqICAgLSAqKnJld3JpdGVMaW5rcyoqIC0gYHtib29sZWFufHN0cmluZ31gIC0gKGRlZmF1bHQ6IGB0cnVlYCkgV2hlbiBodG1sNU1vZGUgaXMgZW5hYmxlZCxcbiAgICogICAgIGVuYWJsZXMvZGlzYWJsZXMgVVJMIHJld3JpdGluZyBmb3IgcmVsYXRpdmUgbGlua3MuIElmIHNldCB0byBhIHN0cmluZywgVVJMIHJld3JpdGluZyB3aWxsXG4gICAqICAgICBvbmx5IGhhcHBlbiBvbiBsaW5rcyB3aXRoIGFuIGF0dHJpYnV0ZSB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIHN0cmluZy4gRm9yIGV4YW1wbGUsIGlmIHNldFxuICAgKiAgICAgdG8gYCdpbnRlcm5hbC1saW5rJ2AsIHRoZW4gdGhlIFVSTCB3aWxsIG9ubHkgYmUgcmV3cml0dGVuIGZvciBgPGEgaW50ZXJuYWwtbGluaz5gIGxpbmtzLlxuICAgKiAgICAgTm90ZSB0aGF0IFthdHRyaWJ1dGUgbmFtZSBub3JtYWxpemF0aW9uXShndWlkZS9kaXJlY3RpdmUjbm9ybWFsaXphdGlvbikgZG9lcyBub3QgYXBwbHlcbiAgICogICAgIGhlcmUsIHNvIGAnaW50ZXJuYWxMaW5rJ2Agd2lsbCAqKm5vdCoqIG1hdGNoIGAnaW50ZXJuYWwtbGluaydgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBodG1sNU1vZGUgb2JqZWN0IGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqL1xuICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICBpZiAoaXNCb29sZWFuKG1vZGUpKSB7XG4gICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG1vZGUpKSB7XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5lbmFibGVkKSkge1xuICAgICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGUuZW5hYmxlZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJlcXVpcmVCYXNlKSkge1xuICAgICAgICBodG1sNU1vZGUucmVxdWlyZUJhc2UgPSBtb2RlLnJlcXVpcmVCYXNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmV3cml0ZUxpbmtzKSB8fCBpc1N0cmluZyhtb2RlLnJld3JpdGVMaW5rcykpIHtcbiAgICAgICAgaHRtbDVNb2RlLnJld3JpdGVMaW5rcyA9IG1vZGUucmV3cml0ZUxpbmtzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGh0bWw1TW9kZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3RhcnRcbiAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQnJvYWRjYXN0ZWQgYmVmb3JlIGEgVVJMIHdpbGwgY2hhbmdlLlxuICAgKlxuICAgKiBUaGlzIGNoYW5nZSBjYW4gYmUgcHJldmVudGVkIGJ5IGNhbGxpbmdcbiAgICogYHByZXZlbnREZWZhdWx0YCBtZXRob2Qgb2YgdGhlIGV2ZW50LiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBmb3IgbW9yZVxuICAgKiBkZXRhaWxzIGFib3V0IGV2ZW50IG9iamVjdC4gVXBvbiBzdWNjZXNzZnVsIGNoYW5nZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MgJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc30gaXMgZmlyZWQuXG4gICAqXG4gICAqIFRoZSBgbmV3U3RhdGVgIGFuZCBgb2xkU3RhdGVgIHBhcmFtZXRlcnMgbWF5IGJlIGRlZmluZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCB3aGVuXG4gICAqIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBIVE1MNSBIaXN0b3J5IEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsIE5ldyBVUkxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZXdTdGF0ZSBOZXcgaGlzdG9yeSBzdGF0ZSBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRTdGF0ZSBIaXN0b3J5IHN0YXRlIG9iamVjdCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZXZlbnRcbiAgICogQG5hbWUgJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NcbiAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQnJvYWRjYXN0ZWQgYWZ0ZXIgYSBVUkwgd2FzIGNoYW5nZWQuXG4gICAqXG4gICAqIFRoZSBgbmV3U3RhdGVgIGFuZCBgb2xkU3RhdGVgIHBhcmFtZXRlcnMgbWF5IGJlIGRlZmluZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCB3aGVuXG4gICAqIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBIVE1MNSBIaXN0b3J5IEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsIE5ldyBVUkxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZXdTdGF0ZSBOZXcgaGlzdG9yeSBzdGF0ZSBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRTdGF0ZSBIaXN0b3J5IHN0YXRlIG9iamVjdCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqL1xuXG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckc25pZmZlcicsICckcm9vdEVsZW1lbnQnLCAnJHdpbmRvdycsXG4gICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAkYnJvd3NlciwgJHNuaWZmZXIsICRyb290RWxlbWVudCwgJHdpbmRvdykge1xuICAgIHZhciAkbG9jYXRpb24sXG4gICAgICAgIExvY2F0aW9uTW9kZSxcbiAgICAgICAgYmFzZUhyZWYgPSAkYnJvd3Nlci5iYXNlSHJlZigpLCAvLyBpZiBiYXNlW2hyZWZdIGlzIHVuZGVmaW5lZCwgaXQgZGVmYXVsdHMgdG8gJydcbiAgICAgICAgaW5pdGlhbFVybCA9ICRicm93c2VyLnVybCgpLFxuICAgICAgICBhcHBCYXNlO1xuXG4gICAgaWYgKGh0bWw1TW9kZS5lbmFibGVkKSB7XG4gICAgICBpZiAoIWJhc2VIcmVmICYmIGh0bWw1TW9kZS5yZXF1aXJlQmFzZSkge1xuICAgICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ25vYmFzZScsXG4gICAgICAgICAgJyRsb2NhdGlvbiBpbiBIVE1MNSBtb2RlIHJlcXVpcmVzIGEgPGJhc2U+IHRhZyB0byBiZSBwcmVzZW50IScpO1xuICAgICAgfVxuICAgICAgYXBwQmFzZSA9IHNlcnZlckJhc2UoaW5pdGlhbFVybCkgKyAoYmFzZUhyZWYgfHwgJy8nKTtcbiAgICAgIExvY2F0aW9uTW9kZSA9ICRzbmlmZmVyLmhpc3RvcnkgPyBMb2NhdGlvbkh0bWw1VXJsIDogTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcEJhc2UgPSBzdHJpcEhhc2goaW5pdGlhbFVybCk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSBMb2NhdGlvbkhhc2hiYW5nVXJsO1xuICAgIH1cbiAgICB2YXIgYXBwQmFzZU5vRmlsZSA9IHN0cmlwRmlsZShhcHBCYXNlKTtcblxuICAgICRsb2NhdGlvbiA9IG5ldyBMb2NhdGlvbk1vZGUoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgJyMnICsgaGFzaFByZWZpeCk7XG4gICAgJGxvY2F0aW9uLiQkcGFyc2VMaW5rVXJsKGluaXRpYWxVcmwsIGluaXRpYWxVcmwpO1xuXG4gICAgJGxvY2F0aW9uLiQkc3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuXG4gICAgdmFyIElHTk9SRV9VUklfUkVHRVhQID0gL15cXHMqKGphdmFzY3JpcHR8bWFpbHRvKTovaTtcblxuICAgIGZ1bmN0aW9uIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sodXJsLCByZXBsYWNlLCBzdGF0ZSkge1xuICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgJGJyb3dzZXIudXJsKHVybCwgcmVwbGFjZSwgc3RhdGUpO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSAkbG9jYXRpb24uc3RhdGUoKSByZXR1cm5zIHJlZmVyZW50aWFsbHkgaWRlbnRpY2FsIChub3QganVzdCBkZWVwbHkgZXF1YWwpXG4gICAgICAgIC8vIHN0YXRlIG9iamVjdDsgdGhpcyBtYWtlcyBwb3NzaWJsZSBxdWljayBjaGVja2luZyBpZiB0aGUgc3RhdGUgY2hhbmdlZCBpbiB0aGUgZGlnZXN0XG4gICAgICAgIC8vIGxvb3AuIENoZWNraW5nIGRlZXAgZXF1YWxpdHkgd291bGQgYmUgdG9vIGV4cGVuc2l2ZS5cbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBSZXN0b3JlIG9sZCB2YWx1ZXMgaWYgcHVzaFN0YXRlIGZhaWxzXG4gICAgICAgICRsb2NhdGlvbi51cmwob2xkVXJsKTtcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcblxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cblxuICAgICRyb290RWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIHJld3JpdGVMaW5rcyA9IGh0bWw1TW9kZS5yZXdyaXRlTGlua3M7XG4gICAgICAvLyBUT0RPKHZvanRhKTogcmV3cml0ZSBsaW5rIHdoZW4gb3BlbmluZyBpbiBuZXcgdGFiL3dpbmRvdyAoaW4gbGVnYWN5IGJyb3dzZXIpXG4gICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuXG5cbiAgICAgIGlmICghcmV3cml0ZUxpbmtzIHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC53aGljaCA9PT0gMiB8fCBldmVudC5idXR0b24gPT09IDIpIHJldHVybjtcblxuICAgICAgdmFyIGVsbSA9IGpxTGl0ZShldmVudC50YXJnZXQpO1xuXG4gICAgICAvLyB0cmF2ZXJzZSB0aGUgRE9NIHVwIHRvIGZpbmQgZmlyc3QgQSB0YWdcbiAgICAgIHdoaWxlIChub2RlTmFtZV8oZWxtWzBdKSAhPT0gJ2EnKSB7XG4gICAgICAgIC8vIGlnbm9yZSByZXdyaXRpbmcgaWYgbm8gQSB0YWcgKHJlYWNoZWQgcm9vdCBlbGVtZW50LCBvciBubyBwYXJlbnQgLSByZW1vdmVkIGZyb20gZG9jdW1lbnQpXG4gICAgICAgIGlmIChlbG1bMF0gPT09ICRyb290RWxlbWVudFswXSB8fCAhKGVsbSA9IGVsbS5wYXJlbnQoKSlbMF0pIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKHJld3JpdGVMaW5rcykgJiYgaXNVbmRlZmluZWQoZWxtLmF0dHIocmV3cml0ZUxpbmtzKSkpIHJldHVybjtcblxuICAgICAgdmFyIGFic0hyZWYgPSBlbG0ucHJvcCgnaHJlZicpO1xuICAgICAgLy8gZ2V0IHRoZSBhY3R1YWwgaHJlZiBhdHRyaWJ1dGUgLSBzZWVcbiAgICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kZDM0NzE0OCh2PXZzLjg1KS5hc3B4XG4gICAgICB2YXIgcmVsSHJlZiA9IGVsbS5hdHRyKCdocmVmJykgfHwgZWxtLmF0dHIoJ3hsaW5rOmhyZWYnKTtcblxuICAgICAgaWYgKGlzT2JqZWN0KGFic0hyZWYpICYmIGFic0hyZWYudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykge1xuICAgICAgICAvLyBTVkdBbmltYXRlZFN0cmluZy5hbmltVmFsIHNob3VsZCBiZSBpZGVudGljYWwgdG8gU1ZHQW5pbWF0ZWRTdHJpbmcuYmFzZVZhbCwgdW5sZXNzIGR1cmluZ1xuICAgICAgICAvLyBhbiBhbmltYXRpb24uXG4gICAgICAgIGFic0hyZWYgPSB1cmxSZXNvbHZlKGFic0hyZWYuYW5pbVZhbCkuaHJlZjtcbiAgICAgIH1cblxuICAgICAgLy8gSWdub3JlIHdoZW4gdXJsIGlzIHN0YXJ0ZWQgd2l0aCBqYXZhc2NyaXB0OiBvciBtYWlsdG86XG4gICAgICBpZiAoSUdOT1JFX1VSSV9SRUdFWFAudGVzdChhYnNIcmVmKSkgcmV0dXJuO1xuXG4gICAgICBpZiAoYWJzSHJlZiAmJiAhZWxtLmF0dHIoJ3RhcmdldCcpICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICBpZiAoJGxvY2F0aW9uLiQkcGFyc2VMaW5rVXJsKGFic0hyZWYsIHJlbEhyZWYpKSB7XG4gICAgICAgICAgLy8gV2UgZG8gYSBwcmV2ZW50RGVmYXVsdCBmb3IgYWxsIHVybHMgdGhhdCBhcmUgcGFydCBvZiB0aGUgYW5ndWxhciBhcHBsaWNhdGlvbixcbiAgICAgICAgICAvLyBpbiBodG1sNW1vZGUgYW5kIGFsc28gd2l0aG91dCwgc28gdGhhdCB3ZSBhcmUgYWJsZSB0byBhYm9ydCBuYXZpZ2F0aW9uIHdpdGhvdXRcbiAgICAgICAgICAvLyBnZXR0aW5nIGRvdWJsZSBlbnRyaWVzIGluIHRoZSBsb2NhdGlvbiBoaXN0b3J5LlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgLy8gdXBkYXRlIGxvY2F0aW9uIG1hbnVhbGx5XG4gICAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gJGJyb3dzZXIudXJsKCkpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAvLyBoYWNrIHRvIHdvcmsgYXJvdW5kIEZGNiBidWcgNjg0MjA4IHdoZW4gc2NlbmFyaW8gcnVubmVyIGNsaWNrcyBvbiBsaW5rc1xuICAgICAgICAgICAgJHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8vIHJld3JpdGUgaGFzaGJhbmcgdXJsIDw+IGh0bWw1IHVybFxuICAgIGlmICh0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSkgIT09IHRyaW1FbXB0eUhhc2goaW5pdGlhbFVybCkpIHtcbiAgICAgICRicm93c2VyLnVybCgkbG9jYXRpb24uYWJzVXJsKCksIHRydWUpO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsaXppbmcgPSB0cnVlO1xuXG4gICAgLy8gdXBkYXRlICRsb2NhdGlvbiB3aGVuICRicm93c2VyIHVybCBjaGFuZ2VzXG4gICAgJGJyb3dzZXIub25VcmxDaGFuZ2UoZnVuY3Rpb24obmV3VXJsLCBuZXdTdGF0ZSkge1xuXG4gICAgICBpZiAoIXN0YXJ0c1dpdGgobmV3VXJsLCBhcHBCYXNlTm9GaWxlKSkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIG9mIHRoZSBhcHAgdGhlbiBmb3JjZSBhIHJlbG9hZFxuICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXdVcmw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgIG5ld1VybCA9IHRyaW1FbXB0eUhhc2gobmV3VXJsKTtcbiAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2UobmV3VXJsKTtcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBuZXdTdGF0ZTtcblxuICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIG5ld1VybCwgb2xkVXJsLFxuICAgICAgICAgICAgbmV3U3RhdGUsIG9sZFN0YXRlKS5kZWZhdWx0UHJldmVudGVkO1xuXG4gICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiB3YXMgY2hhbmdlZCBieSBhIGAkbG9jYXRpb25DaGFuZ2VTdGFydGAgaGFuZGxlciB0aGVuIHN0b3BcbiAgICAgICAgLy8gcHJvY2Vzc2luZyB0aGlzIGxvY2F0aW9uIGNoYW5nZVxuICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSBuZXdVcmwpIHJldHVybjtcblxuICAgICAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKG9sZFVybCwgZmFsc2UsIG9sZFN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBicm93c2VyXG4gICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gJGxvY2F0aW9uV2F0Y2goKSB7XG4gICAgICBpZiAoaW5pdGlhbGl6aW5nIHx8ICRsb2NhdGlvbi4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uKSB7XG4gICAgICAgICRsb2NhdGlvbi4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIG9sZFVybCA9IHRyaW1FbXB0eUhhc2goJGJyb3dzZXIudXJsKCkpO1xuICAgICAgICB2YXIgbmV3VXJsID0gdHJpbUVtcHR5SGFzaCgkbG9jYXRpb24uYWJzVXJsKCkpO1xuICAgICAgICB2YXIgb2xkU3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuICAgICAgICB2YXIgY3VycmVudFJlcGxhY2UgPSAkbG9jYXRpb24uJCRyZXBsYWNlO1xuICAgICAgICB2YXIgdXJsT3JTdGF0ZUNoYW5nZWQgPSBvbGRVcmwgIT09IG5ld1VybCB8fFxuICAgICAgICAgICgkbG9jYXRpb24uJCRodG1sNSAmJiAkc25pZmZlci5oaXN0b3J5ICYmIG9sZFN0YXRlICE9PSAkbG9jYXRpb24uJCRzdGF0ZSk7XG5cbiAgICAgICAgaWYgKGluaXRpYWxpemluZyB8fCB1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG5ld1VybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIG5ld1VybCwgb2xkVXJsLFxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIHdhcyBjaGFuZ2VkIGJ5IGEgYCRsb2NhdGlvbkNoYW5nZVN0YXJ0YCBoYW5kbGVyIHRoZW4gc3RvcFxuICAgICAgICAgICAgLy8gcHJvY2Vzc2luZyB0aGlzIGxvY2F0aW9uIGNoYW5nZVxuICAgICAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gbmV3VXJsKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKG5ld1VybCwgY3VycmVudFJlcGxhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRTdGF0ZSA9PT0gJGxvY2F0aW9uLiQkc3RhdGUgPyBudWxsIDogJGxvY2F0aW9uLiQkc3RhdGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlO1xuXG4gICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHJldHVybiBhbnl0aGluZyBiZWNhdXNlICRldmFsQXN5bmMgd2lsbCBtYWtlIHRoZSBkaWdlc3QgbG9vcCBkaXJ0eSB3aGVuXG4gICAgICAvLyB0aGVyZSBpcyBhIGNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuICRsb2NhdGlvbjtcblxuICAgIGZ1bmN0aW9uIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSk7XG4gICAgfVxufV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2dcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZy4gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzYWZlbHkgd3JpdGVzIHRoZSBtZXNzYWdlXG4gKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuXG4gKlxuICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuXG4gKlxuICogVGhlIGRlZmF1bHQgaXMgdG8gbG9nIGBkZWJ1Z2AgbWVzc2FnZXMuIFlvdSBjYW4gdXNlXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWR9IHRvIGNoYW5nZSB0aGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsb2dFeGFtcGxlXCIgbmFtZT1cImxvZy1zZXJ2aWNlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbG9nRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0xvZ0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9nJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nKSB7XG4gICAgICAgICAgICRzY29wZS4kbG9nID0gJGxvZztcbiAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkxvZ0NvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPlJlbG9hZCB0aGlzIHBhZ2Ugd2l0aCBvcGVuIGNvbnNvbGUsIGVudGVyIHRleHQgYW5kIGhpdCB0aGUgbG9nIGJ1dHRvbi4uLjwvcD5cbiAgICAgICAgIDxsYWJlbD5NZXNzYWdlOlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtZXNzYWdlXCIgLz48L2xhYmVsPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cubG9nKG1lc3NhZ2UpXCI+bG9nPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy53YXJuKG1lc3NhZ2UpXCI+d2FybjwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuaW5mbyhtZXNzYWdlKVwiPmluZm88L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmVycm9yKG1lc3NhZ2UpXCI+ZXJyb3I8L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmRlYnVnKG1lc3NhZ2UpXCI+ZGVidWc8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9nUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhlIGAkbG9nUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGxvZ3MgbWVzc2FnZXNcbiAqL1xuZnVuY3Rpb24gJExvZ1Byb3ZpZGVyKCkge1xuICB2YXIgZGVidWcgPSB0cnVlLFxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHtib29sZWFuPX0gZmxhZyBlbmFibGUgb3IgZGlzYWJsZSBkZWJ1ZyBsZXZlbCBtZXNzYWdlc1xuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5kZWJ1Z0VuYWJsZWQgPSBmdW5jdGlvbihmbGFnKSB7XG4gICAgaWYgKGlzRGVmaW5lZChmbGFnKSkge1xuICAgICAgZGVidWcgPSBmbGFnO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkZWJ1ZztcbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24oJHdpbmRvdykge1xuICAgIC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2UgMTItMTQrXG4gICAgLy8gSUUvRWRnZSBkaXNwbGF5IGVycm9ycyBpbiBzdWNoIGEgd2F5IHRoYXQgaXQgcmVxdWlyZXMgdGhlIHVzZXIgdG8gY2xpY2sgaW4gNCBwbGFjZXNcbiAgICAvLyB0byBzZWUgdGhlIHN0YWNrIHRyYWNlLiBUaGVyZSBpcyBubyB3YXkgdG8gZmVhdHVyZS1kZXRlY3QgaXQgc28gdGhlcmUncyBhIGNoYW5jZVxuICAgIC8vIG9mIHRoZSB1c2VyIGFnZW50IHNuaWZmaW5nIHRvIGdvIHdyb25nIGJ1dCBzaW5jZSBpdCdzIG9ubHkgYWJvdXQgbG9nZ2luZywgdGhpcyBzaG91bGRuJ3RcbiAgICAvLyBicmVhayBhcHBzLiBPdGhlciBicm93c2VycyBkaXNwbGF5IGVycm9ycyBpbiBhIHNlbnNpYmxlIHdheSBhbmQgc29tZSBvZiB0aGVtIG1hcCBzdGFja1xuICAgIC8vIHRyYWNlcyBhbG9uZyBzb3VyY2UgbWFwcyBpZiBhdmFpbGFibGUgc28gaXQgbWFrZXMgc2Vuc2UgdG8gbGV0IGJyb3dzZXJzIGRpc3BsYXkgaXRcbiAgICAvLyBhcyB0aGV5IHdhbnQuXG4gICAgdmFyIGZvcm1hdFN0YWNrVHJhY2UgPSBtc2llIHx8IC9cXGJFZGdlXFwvLy50ZXN0KCR3aW5kb3cubmF2aWdhdG9yICYmICR3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2xvZ1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBsb2cgbWVzc2FnZVxuICAgICAgICovXG4gICAgICBsb2c6IGNvbnNvbGVMb2coJ2xvZycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjaW5mb1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYW4gaW5mb3JtYXRpb24gbWVzc2FnZVxuICAgICAgICovXG4gICAgICBpbmZvOiBjb25zb2xlTG9nKCdpbmZvJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyN3YXJuXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBXcml0ZSBhIHdhcm5pbmcgbWVzc2FnZVxuICAgICAgICovXG4gICAgICB3YXJuOiBjb25zb2xlTG9nKCd3YXJuJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNlcnJvclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYW4gZXJyb3IgbWVzc2FnZVxuICAgICAgICovXG4gICAgICBlcnJvcjogY29uc29sZUxvZygnZXJyb3InKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2RlYnVnXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBXcml0ZSBhIGRlYnVnIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZGVidWc6IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGZuID0gY29uc29sZUxvZygnZGVidWcnKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICBmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKClcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0RXJyb3IoYXJnKSB7XG4gICAgICBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgaWYgKGFyZy5zdGFjayAmJiBmb3JtYXRTdGFja1RyYWNlKSB7XG4gICAgICAgICAgYXJnID0gKGFyZy5tZXNzYWdlICYmIGFyZy5zdGFjay5pbmRleE9mKGFyZy5tZXNzYWdlKSA9PT0gLTEpXG4gICAgICAgICAgICAgID8gJ0Vycm9yOiAnICsgYXJnLm1lc3NhZ2UgKyAnXFxuJyArIGFyZy5zdGFja1xuICAgICAgICAgICAgICA6IGFyZy5zdGFjaztcbiAgICAgICAgfSBlbHNlIGlmIChhcmcuc291cmNlVVJMKSB7XG4gICAgICAgICAgYXJnID0gYXJnLm1lc3NhZ2UgKyAnXFxuJyArIGFyZy5zb3VyY2VVUkwgKyAnOicgKyBhcmcubGluZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFyZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKHR5cGUpIHtcbiAgICAgIHZhciBjb25zb2xlID0gJHdpbmRvdy5jb25zb2xlIHx8IHt9LFxuICAgICAgICAgIGxvZ0ZuID0gY29uc29sZVt0eXBlXSB8fCBjb25zb2xlLmxvZyB8fCBub29wLFxuICAgICAgICAgIGhhc0FwcGx5ID0gZmFsc2U7XG5cbiAgICAgIC8vIE5vdGU6IHJlYWRpbmcgbG9nRm4uYXBwbHkgdGhyb3dzIGFuIGVycm9yIGluIElFMTEgaW4gSUU4IGRvY3VtZW50IG1vZGUuXG4gICAgICAvLyBUaGUgcmVhc29uIGJlaGluZCB0aGlzIGlzIHRoYXQgY29uc29sZS5sb2cgaGFzIHR5cGUgXCJvYmplY3RcIiBpbiBJRTguLi5cbiAgICAgIHRyeSB7XG4gICAgICAgIGhhc0FwcGx5ID0gISFsb2dGbi5hcHBseTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgICBpZiAoaGFzQXBwbHkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICAgYXJncy5wdXNoKGZvcm1hdEVycm9yKGFyZykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBsb2dGbi5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gd2UgYXJlIElFIHdoaWNoIGVpdGhlciBkb2Vzbid0IGhhdmUgd2luZG93LmNvbnNvbGUgPT4gdGhpcyBpcyBub29wIGFuZCB3ZSBkbyBub3RoaW5nLFxuICAgICAgLy8gb3Igd2UgYXJlIElFIHdoZXJlIGNvbnNvbGUubG9nIGRvZXNuJ3QgaGF2ZSBhcHBseSBzbyB3ZSBsb2cgYXQgbGVhc3QgZmlyc3QgMiBhcmdzXG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xuICAgICAgICBsb2dGbihhcmcxLCBhcmcyID09IG51bGwgPyAnJyA6IGFyZzIpO1xuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG52YXIgJHBhcnNlTWluRXJyID0gbWluRXJyKCckcGFyc2UnKTtcblxudmFyIG9iamVjdFZhbHVlT2YgPSB7fS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUudmFsdWVPZjtcblxuLy8gU2FuZGJveGluZyBBbmd1bGFyIEV4cHJlc3Npb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEFuZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIG5vIGxvbmdlciBzYW5kYm94ZWQuIFNvIGl0IGlzIG5vdyBldmVuIGVhc2llciB0byBhY2Nlc3MgYXJiaXRyYXJ5IEpTIGNvZGUgYnlcbi8vIHZhcmlvdXMgbWVhbnMgc3VjaCBhcyBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gbmF0aXZlIEpTIGZ1bmN0aW9ucyBsaWtlIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci5cbi8vXG4vLyBBcyBhbiBleGFtcGxlLCBjb25zaWRlciB0aGUgZm9sbG93aW5nIEFuZ3VsYXIgZXhwcmVzc2lvbjpcbi8vXG4vLyAgIHt9LnRvU3RyaW5nLmNvbnN0cnVjdG9yKCdhbGVydChcImV2aWwgSlMgY29kZVwiKScpXG4vL1xuLy8gSXQgaXMgaW1wb3J0YW50IHRvIHJlYWxpemUgdGhhdCBpZiB5b3UgY3JlYXRlIGFuIGV4cHJlc3Npb24gZnJvbSBhIHN0cmluZyB0aGF0IGNvbnRhaW5zIHVzZXIgcHJvdmlkZWRcbi8vIGNvbnRlbnQgdGhlbiBpdCBpcyBwb3NzaWJsZSB0aGF0IHlvdXIgYXBwbGljYXRpb24gY29udGFpbnMgYSBzZWN1cml0eSB2dWxuZXJhYmlsaXR5IHRvIGFuIFhTUyBzdHlsZSBhdHRhY2suXG4vL1xuLy8gU2VlIGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2d1aWRlL3NlY3VyaXR5XG5cblxuZnVuY3Rpb24gZ2V0U3RyaW5nVmFsdWUobmFtZSkge1xuICAvLyBQcm9wZXJ0eSBuYW1lcyBtdXN0IGJlIHN0cmluZ3MuIFRoaXMgbWVhbnMgdGhhdCBub24tc3RyaW5nIG9iamVjdHMgY2Fubm90IGJlIHVzZWRcbiAgLy8gYXMga2V5cyBpbiBhbiBvYmplY3QuIEFueSBub24tc3RyaW5nIG9iamVjdCwgaW5jbHVkaW5nIGEgbnVtYmVyLCBpcyB0eXBlY2FzdGVkXG4gIC8vIGludG8gYSBzdHJpbmcgdmlhIHRoZSB0b1N0cmluZyBtZXRob2QuXG4gIC8vIC0tIE1ETiwgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL1Byb3BlcnR5X2FjY2Vzc29ycyNQcm9wZXJ0eV9uYW1lc1xuICAvL1xuICAvLyBTbywgdG8gZW5zdXJlIHRoYXQgd2UgYXJlIGNoZWNraW5nIHRoZSBzYW1lIGBuYW1lYCB0aGF0IEphdmFTY3JpcHQgd291bGQgdXNlLCB3ZSBjYXN0IGl0XG4gIC8vIHRvIGEgc3RyaW5nLiBJdCdzIG5vdCBhbHdheXMgcG9zc2libGUuIElmIGBuYW1lYCBpcyBhbiBvYmplY3QgYW5kIGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBpc1xuICAvLyAnYnJva2VuJyAoZG9lc24ndCByZXR1cm4gYSBzdHJpbmcsIGlzbid0IGEgZnVuY3Rpb24sIGV0Yy4pLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bjpcbiAgLy9cbiAgLy8gVHlwZUVycm9yOiBDYW5ub3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXG4gIC8vXG4gIC8vIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBkb24ndCBjYXRjaCB0aGlzIGVycm9yIGhlcmUgYW5kIGFsbG93IGl0IHRvIHByb3BhZ2F0ZSB1cCB0aGUgY2FsbFxuICAvLyBzdGFjay4gTm90ZSB0aGF0IHlvdSdsbCBnZXQgdGhlIHNhbWUgZXJyb3IgaW4gSmF2YVNjcmlwdCBpZiB5b3UgdHJ5IHRvIGFjY2VzcyBhIHByb3BlcnR5IHVzaW5nXG4gIC8vIHN1Y2ggYSAnYnJva2VuJyBvYmplY3QgYXMgYSBrZXkuXG4gIHJldHVybiBuYW1lICsgJyc7XG59XG5cblxudmFyIE9QRVJBVE9SUyA9IGNyZWF0ZU1hcCgpO1xuZm9yRWFjaCgnKyAtICogLyAlID09PSAhPT0gPT0gIT0gPCA+IDw9ID49ICYmIHx8ICEgPSB8Jy5zcGxpdCgnICcpLCBmdW5jdGlvbihvcGVyYXRvcikgeyBPUEVSQVRPUlNbb3BlcmF0b3JdID0gdHJ1ZTsgfSk7XG52YXIgRVNDQVBFID0geyduJzonXFxuJywgJ2YnOidcXGYnLCAncic6J1xccicsICd0JzonXFx0JywgJ3YnOidcXHYnLCAnXFwnJzonXFwnJywgJ1wiJzonXCInfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBMZXhlciA9IGZ1bmN0aW9uIExleGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbkxleGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExleGVyLFxuXG4gIGxleDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy50b2tlbnMgPSBbXTtcblxuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmIChjaCA9PT0gJ1wiJyB8fCBjaCA9PT0gJ1xcJycpIHtcbiAgICAgICAgdGhpcy5yZWFkU3RyaW5nKGNoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc051bWJlcihjaCkgfHwgY2ggPT09ICcuJyAmJiB0aGlzLmlzTnVtYmVyKHRoaXMucGVlaygpKSkge1xuICAgICAgICB0aGlzLnJlYWROdW1iZXIoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0lkZW50aWZpZXJTdGFydCh0aGlzLnBlZWtNdWx0aWNoYXIoKSkpIHtcbiAgICAgICAgdGhpcy5yZWFkSWRlbnQoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pcyhjaCwgJygpe31bXS4sOzo/JykpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IGNofSk7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1doaXRlc3BhY2UoY2gpKSB7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaDIgPSBjaCArIHRoaXMucGVlaygpO1xuICAgICAgICB2YXIgY2gzID0gY2gyICsgdGhpcy5wZWVrKDIpO1xuICAgICAgICB2YXIgb3AxID0gT1BFUkFUT1JTW2NoXTtcbiAgICAgICAgdmFyIG9wMiA9IE9QRVJBVE9SU1tjaDJdO1xuICAgICAgICB2YXIgb3AzID0gT1BFUkFUT1JTW2NoM107XG4gICAgICAgIGlmIChvcDEgfHwgb3AyIHx8IG9wMykge1xuICAgICAgICAgIHZhciB0b2tlbiA9IG9wMyA/IGNoMyA6IChvcDIgPyBjaDIgOiBjaCk7XG4gICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IHRva2VuLCBvcGVyYXRvcjogdHJ1ZX0pO1xuICAgICAgICAgIHRoaXMuaW5kZXggKz0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignVW5leHBlY3RlZCBuZXh0IGNoYXJhY3RlciAnLCB0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9rZW5zO1xuICB9LFxuXG4gIGlzOiBmdW5jdGlvbihjaCwgY2hhcnMpIHtcbiAgICByZXR1cm4gY2hhcnMuaW5kZXhPZihjaCkgIT09IC0xO1xuICB9LFxuXG4gIHBlZWs6IGZ1bmN0aW9uKGkpIHtcbiAgICB2YXIgbnVtID0gaSB8fCAxO1xuICAgIHJldHVybiAodGhpcy5pbmRleCArIG51bSA8IHRoaXMudGV4dC5sZW5ndGgpID8gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4ICsgbnVtKSA6IGZhbHNlO1xuICB9LFxuXG4gIGlzTnVtYmVyOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoJzAnIDw9IGNoICYmIGNoIDw9ICc5JykgJiYgdHlwZW9mIGNoID09PSAnc3RyaW5nJztcbiAgfSxcblxuICBpc1doaXRlc3BhY2U6IGZ1bmN0aW9uKGNoKSB7XG4gICAgLy8gSUUgdHJlYXRzIG5vbi1icmVha2luZyBzcGFjZSBhcyBcXHUwMEEwXG4gICAgcmV0dXJuIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFxyJyB8fCBjaCA9PT0gJ1xcdCcgfHxcbiAgICAgICAgICAgIGNoID09PSAnXFxuJyB8fCBjaCA9PT0gJ1xcdicgfHwgY2ggPT09ICdcXHUwMEEwJyk7XG4gIH0sXG5cbiAgaXNJZGVudGlmaWVyU3RhcnQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJTdGFydCA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJTdGFydChjaCwgdGhpcy5jb2RlUG9pbnRBdChjaCkpIDpcbiAgICAgICAgdGhpcy5pc1ZhbGlkSWRlbnRpZmllclN0YXJ0KGNoKTtcbiAgfSxcblxuICBpc1ZhbGlkSWRlbnRpZmllclN0YXJ0OiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoJ2EnIDw9IGNoICYmIGNoIDw9ICd6JyB8fFxuICAgICAgICAgICAgJ0EnIDw9IGNoICYmIGNoIDw9ICdaJyB8fFxuICAgICAgICAgICAgJ18nID09PSBjaCB8fCBjaCA9PT0gJyQnKTtcbiAgfSxcblxuICBpc0lkZW50aWZpZXJDb250aW51ZTogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmlzSWRlbnRpZmllckNvbnRpbnVlID9cbiAgICAgICAgdGhpcy5vcHRpb25zLmlzSWRlbnRpZmllckNvbnRpbnVlKGNoLCB0aGlzLmNvZGVQb2ludEF0KGNoKSkgOlxuICAgICAgICB0aGlzLmlzVmFsaWRJZGVudGlmaWVyQ29udGludWUoY2gpO1xuICB9LFxuXG4gIGlzVmFsaWRJZGVudGlmaWVyQ29udGludWU6IGZ1bmN0aW9uKGNoLCBjcCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRJZGVudGlmaWVyU3RhcnQoY2gsIGNwKSB8fCB0aGlzLmlzTnVtYmVyKGNoKTtcbiAgfSxcblxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24oY2gpIHtcbiAgICBpZiAoY2gubGVuZ3RoID09PSAxKSByZXR1cm4gY2guY2hhckNvZGVBdCgwKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIHJldHVybiAoY2guY2hhckNvZGVBdCgwKSA8PCAxMCkgKyBjaC5jaGFyQ29kZUF0KDEpIC0gMHgzNUZEQzAwO1xuICB9LFxuXG4gIHBlZWtNdWx0aWNoYXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgdmFyIHBlZWsgPSB0aGlzLnBlZWsoKTtcbiAgICBpZiAoIXBlZWspIHtcbiAgICAgIHJldHVybiBjaDtcbiAgICB9XG4gICAgdmFyIGNwMSA9IGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIGNwMiA9IHBlZWsuY2hhckNvZGVBdCgwKTtcbiAgICBpZiAoY3AxID49IDB4RDgwMCAmJiBjcDEgPD0gMHhEQkZGICYmIGNwMiA+PSAweERDMDAgJiYgY3AyIDw9IDB4REZGRikge1xuICAgICAgcmV0dXJuIGNoICsgcGVlaztcbiAgICB9XG4gICAgcmV0dXJuIGNoO1xuICB9LFxuXG4gIGlzRXhwT3BlcmF0b3I6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycgfHwgdGhpcy5pc051bWJlcihjaCkpO1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKGVycm9yLCBzdGFydCwgZW5kKSB7XG4gICAgZW5kID0gZW5kIHx8IHRoaXMuaW5kZXg7XG4gICAgdmFyIGNvbFN0ciA9IChpc0RlZmluZWQoc3RhcnQpXG4gICAgICAgICAgICA/ICdzICcgKyBzdGFydCArICAnLScgKyB0aGlzLmluZGV4ICsgJyBbJyArIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCkgKyAnXSdcbiAgICAgICAgICAgIDogJyAnICsgZW5kKTtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2xleGVycicsICdMZXhlciBFcnJvcjogezB9IGF0IGNvbHVtbnsxfSBpbiBleHByZXNzaW9uIFt7Mn1dLicsXG4gICAgICAgIGVycm9yLCBjb2xTdHIsIHRoaXMudGV4dCk7XG4gIH0sXG5cbiAgcmVhZE51bWJlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG51bWJlciA9ICcnO1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICB2YXIgY2ggPSBsb3dlcmNhc2UodGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSk7XG4gICAgICBpZiAoY2ggPT09ICcuJyB8fCB0aGlzLmlzTnVtYmVyKGNoKSkge1xuICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGVla0NoID0gdGhpcy5wZWVrKCk7XG4gICAgICAgIGlmIChjaCA9PT0gJ2UnICYmIHRoaXMuaXNFeHBPcGVyYXRvcihwZWVrQ2gpKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiZcbiAgICAgICAgICAgIHBlZWtDaCAmJiB0aGlzLmlzTnVtYmVyKHBlZWtDaCkgJiZcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09PSAnZScpIHtcbiAgICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJlxuICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIXRoaXMuaXNOdW1iZXIocGVla0NoKSkgJiZcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09PSAnZScpIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0ludmFsaWQgZXhwb25lbnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IG51bWJlcixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgdmFsdWU6IE51bWJlcihudW1iZXIpXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZElkZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuaW5kZXggKz0gdGhpcy5wZWVrTXVsdGljaGFyKCkubGVuZ3RoO1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy5wZWVrTXVsdGljaGFyKCk7XG4gICAgICBpZiAoIXRoaXMuaXNJZGVudGlmaWVyQ29udGludWUoY2gpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCArPSBjaC5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogdGhpcy50ZXh0LnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KSxcbiAgICAgIGlkZW50aWZpZXI6IHRydWVcbiAgICB9KTtcbiAgfSxcblxuICByZWFkU3RyaW5nOiBmdW5jdGlvbihxdW90ZSkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5pbmRleCsrO1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7XG4gICAgdmFyIGVzY2FwZSA9IGZhbHNlO1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIHJhd1N0cmluZyArPSBjaDtcbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgaWYgKGNoID09PSAndScpIHtcbiAgICAgICAgICB2YXIgaGV4ID0gdGhpcy50ZXh0LnN1YnN0cmluZyh0aGlzLmluZGV4ICsgMSwgdGhpcy5pbmRleCArIDUpO1xuICAgICAgICAgIGlmICghaGV4Lm1hdGNoKC9bXFxkYS1mXXs0fS9pKSkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdScgKyBoZXggKyAnXScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7XG4gICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXAgPSBFU0NBUEVbY2hdO1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIChyZXAgfHwgY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGVzY2FwZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSBxdW90ZSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgICAgICB0ZXh0OiByYXdTdHJpbmcsXG4gICAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHN0cmluZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRocm93RXJyb3IoJ1VudGVybWluYXRlZCBxdW90ZScsIHN0YXJ0KTtcbiAgfVxufTtcblxudmFyIEFTVCA9IGZ1bmN0aW9uIEFTVChsZXhlciwgb3B0aW9ucykge1xuICB0aGlzLmxleGVyID0gbGV4ZXI7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5BU1QuUHJvZ3JhbSA9ICdQcm9ncmFtJztcbkFTVC5FeHByZXNzaW9uU3RhdGVtZW50ID0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnO1xuQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uID0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJztcbkFTVC5Db25kaXRpb25hbEV4cHJlc3Npb24gPSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJztcbkFTVC5Mb2dpY2FsRXhwcmVzc2lvbiA9ICdMb2dpY2FsRXhwcmVzc2lvbic7XG5BU1QuQmluYXJ5RXhwcmVzc2lvbiA9ICdCaW5hcnlFeHByZXNzaW9uJztcbkFTVC5VbmFyeUV4cHJlc3Npb24gPSAnVW5hcnlFeHByZXNzaW9uJztcbkFTVC5DYWxsRXhwcmVzc2lvbiA9ICdDYWxsRXhwcmVzc2lvbic7XG5BU1QuTWVtYmVyRXhwcmVzc2lvbiA9ICdNZW1iZXJFeHByZXNzaW9uJztcbkFTVC5JZGVudGlmaWVyID0gJ0lkZW50aWZpZXInO1xuQVNULkxpdGVyYWwgPSAnTGl0ZXJhbCc7XG5BU1QuQXJyYXlFeHByZXNzaW9uID0gJ0FycmF5RXhwcmVzc2lvbic7XG5BU1QuUHJvcGVydHkgPSAnUHJvcGVydHknO1xuQVNULk9iamVjdEV4cHJlc3Npb24gPSAnT2JqZWN0RXhwcmVzc2lvbic7XG5BU1QuVGhpc0V4cHJlc3Npb24gPSAnVGhpc0V4cHJlc3Npb24nO1xuQVNULkxvY2Fsc0V4cHJlc3Npb24gPSAnTG9jYWxzRXhwcmVzc2lvbic7XG5cbi8vIEludGVybmFsIHVzZSBvbmx5XG5BU1QuTkdWYWx1ZVBhcmFtZXRlciA9ICdOR1ZhbHVlUGFyYW1ldGVyJztcblxuQVNULnByb3RvdHlwZSA9IHtcbiAgYXN0OiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLnRva2VucyA9IHRoaXMubGV4ZXIubGV4KHRleHQpO1xuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5wcm9ncmFtKCk7XG5cbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIGFuIHVuZXhwZWN0ZWQgdG9rZW4nLCB0aGlzLnRva2Vuc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuXG4gIHByb2dyYW06IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib2R5ID0gW107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiAwICYmICF0aGlzLnBlZWsoJ30nLCAnKScsICc7JywgJ10nKSlcbiAgICAgICAgYm9keS5wdXNoKHRoaXMuZXhwcmVzc2lvblN0YXRlbWVudCgpKTtcbiAgICAgIGlmICghdGhpcy5leHBlY3QoJzsnKSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBBU1QuUHJvZ3JhbSwgYm9keTogYm9keX07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGV4cHJlc3Npb25TdGF0ZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7IHR5cGU6IEFTVC5FeHByZXNzaW9uU3RhdGVtZW50LCBleHByZXNzaW9uOiB0aGlzLmZpbHRlckNoYWluKCkgfTtcbiAgfSxcblxuICBmaWx0ZXJDaGFpbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICB3aGlsZSAodGhpcy5leHBlY3QoJ3wnKSkge1xuICAgICAgbGVmdCA9IHRoaXMuZmlsdGVyKGxlZnQpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBleHByZXNzaW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hc3NpZ25tZW50KCk7XG4gIH0sXG5cbiAgYXNzaWdubWVudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMudGVybmFyeSgpO1xuICAgIGlmICh0aGlzLmV4cGVjdCgnPScpKSB7XG4gICAgICBpZiAoIWlzQXNzaWduYWJsZShyZXN1bHQpKSB7XG4gICAgICAgIHRocm93ICRwYXJzZU1pbkVycignbHZhbCcsICdUcnlpbmcgdG8gYXNzaWduIGEgdmFsdWUgdG8gYSBub24gbC12YWx1ZScpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7IHR5cGU6IEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiwgbGVmdDogcmVzdWx0LCByaWdodDogdGhpcy5hc3NpZ25tZW50KCksIG9wZXJhdG9yOiAnPSd9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIHRlcm5hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ZXN0ID0gdGhpcy5sb2dpY2FsT1IoKTtcbiAgICB2YXIgYWx0ZXJuYXRlO1xuICAgIHZhciBjb25zZXF1ZW50O1xuICAgIGlmICh0aGlzLmV4cGVjdCgnPycpKSB7XG4gICAgICBhbHRlcm5hdGUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgIGlmICh0aGlzLmNvbnN1bWUoJzonKSkge1xuICAgICAgICBjb25zZXF1ZW50ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb24sIHRlc3Q6IHRlc3QsIGFsdGVybmF0ZTogYWx0ZXJuYXRlLCBjb25zZXF1ZW50OiBjb25zZXF1ZW50fTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRlc3Q7XG4gIH0sXG5cbiAgbG9naWNhbE9SOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubG9naWNhbEFORCgpO1xuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnfHwnKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkxvZ2ljYWxFeHByZXNzaW9uLCBvcGVyYXRvcjogJ3x8JywgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMubG9naWNhbEFORCgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGxvZ2ljYWxBTkQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5lcXVhbGl0eSgpO1xuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnJiYnKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkxvZ2ljYWxFeHByZXNzaW9uLCBvcGVyYXRvcjogJyYmJywgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMuZXF1YWxpdHkoKX07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGVxdWFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMucmVsYXRpb25hbCgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJz09JywnIT0nLCc9PT0nLCchPT0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMucmVsYXRpb25hbCgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHJlbGF0aW9uYWw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5hZGRpdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJzwnLCAnPicsICc8PScsICc+PScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5hZGRpdGl2ZSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGFkZGl0aXZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubXVsdGlwbGljYXRpdmUoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcrJywnLScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5tdWx0aXBsaWNhdGl2ZSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIG11bHRpcGxpY2F0aXZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMudW5hcnkoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcqJywnLycsJyUnKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMudW5hcnkoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICB1bmFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsICctJywgJyEnKSkpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5VbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBwcmVmaXg6IHRydWUsIGFyZ3VtZW50OiB0aGlzLnVuYXJ5KCkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeSgpO1xuICAgIH1cbiAgfSxcblxuICBwcmltYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJpbWFyeTtcbiAgICBpZiAodGhpcy5leHBlY3QoJygnKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuZmlsdGVyQ2hhaW4oKTtcbiAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5leHBlY3QoJ1snKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuYXJyYXlEZWNsYXJhdGlvbigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5leHBlY3QoJ3snKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMub2JqZWN0KCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGZSZWZlcmVudGlhbC5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgcHJpbWFyeSA9IGNvcHkodGhpcy5zZWxmUmVmZXJlbnRpYWxbdGhpcy5jb25zdW1lKCkudGV4dF0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmxpdGVyYWxzLmhhc093blByb3BlcnR5KHRoaXMucGVlaygpLnRleHQpKSB7XG4gICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHRoaXMub3B0aW9ucy5saXRlcmFsc1t0aGlzLmNvbnN1bWUoKS50ZXh0XX07XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5jb25zdGFudCkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdub3QgYSBwcmltYXJ5IGV4cHJlc3Npb24nLCB0aGlzLnBlZWsoKSk7XG4gICAgfVxuXG4gICAgdmFyIG5leHQ7XG4gICAgd2hpbGUgKChuZXh0ID0gdGhpcy5leHBlY3QoJygnLCAnWycsICcuJykpKSB7XG4gICAgICBpZiAobmV4dC50ZXh0ID09PSAnKCcpIHtcbiAgICAgICAgcHJpbWFyeSA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogcHJpbWFyeSwgYXJndW1lbnRzOiB0aGlzLnBhcnNlQXJndW1lbnRzKCkgfTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJ1snKSB7XG4gICAgICAgIHByaW1hcnkgPSB7IHR5cGU6IEFTVC5NZW1iZXJFeHByZXNzaW9uLCBvYmplY3Q6IHByaW1hcnksIHByb3BlcnR5OiB0aGlzLmV4cHJlc3Npb24oKSwgY29tcHV0ZWQ6IHRydWUgfTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJy4nKSB7XG4gICAgICAgIHByaW1hcnkgPSB7IHR5cGU6IEFTVC5NZW1iZXJFeHByZXNzaW9uLCBvYmplY3Q6IHByaW1hcnksIHByb3BlcnR5OiB0aGlzLmlkZW50aWZpZXIoKSwgY29tcHV0ZWQ6IGZhbHNlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0lNUE9TU0lCTEUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByaW1hcnk7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbihiYXNlRXhwcmVzc2lvbikge1xuICAgIHZhciBhcmdzID0gW2Jhc2VFeHByZXNzaW9uXTtcbiAgICB2YXIgcmVzdWx0ID0ge3R5cGU6IEFTVC5DYWxsRXhwcmVzc2lvbiwgY2FsbGVlOiB0aGlzLmlkZW50aWZpZXIoKSwgYXJndW1lbnRzOiBhcmdzLCBmaWx0ZXI6IHRydWV9O1xuXG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCc6JykpIHtcbiAgICAgIGFyZ3MucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBwYXJzZUFyZ3VtZW50czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnKScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgYXJncy5wdXNoKHRoaXMuZmlsdGVyQ2hhaW4oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH0sXG5cbiAgaWRlbnRpZmllcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5jb25zdW1lKCk7XG4gICAgaWYgKCF0b2tlbi5pZGVudGlmaWVyKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIG5vdCBhIHZhbGlkIGlkZW50aWZpZXInLCB0b2tlbik7XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5JZGVudGlmaWVyLCBuYW1lOiB0b2tlbi50ZXh0IH07XG4gIH0sXG5cbiAgY29uc3RhbnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRPRE8gY2hlY2sgdGhhdCBpdCBpcyBhIGNvbnN0YW50XG4gICAgcmV0dXJuIHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0aGlzLmNvbnN1bWUoKS52YWx1ZSB9O1xuICB9LFxuXG4gIGFycmF5RGVjbGFyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICddJykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAodGhpcy5wZWVrKCddJykpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCddJyk7XG5cbiAgICByZXR1cm4geyB0eXBlOiBBU1QuQXJyYXlFeHByZXNzaW9uLCBlbGVtZW50czogZWxlbWVudHMgfTtcbiAgfSxcblxuICBvYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gW10sIHByb3BlcnR5O1xuICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICd9Jykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAodGhpcy5wZWVrKCd9JykpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcGVydHkgPSB7dHlwZTogQVNULlByb3BlcnR5LCBraW5kOiAnaW5pdCd9O1xuICAgICAgICBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgICAgICBwcm9wZXJ0eS5rZXkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgICAgICAgcHJvcGVydHkuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmNvbnN1bWUoJzonKTtcbiAgICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGVlaygpLmlkZW50aWZpZXIpIHtcbiAgICAgICAgICBwcm9wZXJ0eS5rZXkgPSB0aGlzLmlkZW50aWZpZXIoKTtcbiAgICAgICAgICBwcm9wZXJ0eS5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmICh0aGlzLnBlZWsoJzonKSkge1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7XG4gICAgICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHByb3BlcnR5LmtleTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCdbJykpIHtcbiAgICAgICAgICB0aGlzLmNvbnN1bWUoJ1snKTtcbiAgICAgICAgICBwcm9wZXJ0eS5rZXkgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgICB0aGlzLmNvbnN1bWUoJ10nKTtcbiAgICAgICAgICBwcm9wZXJ0eS5jb21wdXRlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7XG4gICAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ2ludmFsaWQga2V5JywgdGhpcy5wZWVrKCkpO1xuICAgICAgICB9XG4gICAgICAgIHByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCd9Jyk7XG5cbiAgICByZXR1cm4ge3R5cGU6IEFTVC5PYmplY3RFeHByZXNzaW9uLCBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzIH07XG4gIH0sXG5cbiAgdGhyb3dFcnJvcjogZnVuY3Rpb24obXNnLCB0b2tlbikge1xuICAgIHRocm93ICRwYXJzZU1pbkVycignc3ludGF4JyxcbiAgICAgICAgJ1N5bnRheCBFcnJvcjogVG9rZW4gXFwnezB9XFwnIHsxfSBhdCBjb2x1bW4gezJ9IG9mIHRoZSBleHByZXNzaW9uIFt7M31dIHN0YXJ0aW5nIGF0IFt7NH1dLicsXG4gICAgICAgICAgdG9rZW4udGV4dCwgbXNnLCAodG9rZW4uaW5kZXggKyAxKSwgdGhpcy50ZXh0LCB0aGlzLnRleHQuc3Vic3RyaW5nKHRva2VuLmluZGV4KSk7XG4gIH0sXG5cbiAgY29uc3VtZTogZnVuY3Rpb24oZTEpIHtcbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3Vlb2UnLCAnVW5leHBlY3RlZCBlbmQgb2YgZXhwcmVzc2lvbjogezB9JywgdGhpcy50ZXh0KTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdChlMSk7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyB1bmV4cGVjdGVkLCBleHBlY3RpbmcgWycgKyBlMSArICddJywgdGhpcy5wZWVrKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdG9rZW47XG4gIH0sXG5cbiAgcGVla1Rva2VuOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3Vlb2UnLCAnVW5leHBlY3RlZCBlbmQgb2YgZXhwcmVzc2lvbjogezB9JywgdGhpcy50ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9rZW5zWzBdO1xuICB9LFxuXG4gIHBlZWs6IGZ1bmN0aW9uKGUxLCBlMiwgZTMsIGU0KSB7XG4gICAgcmV0dXJuIHRoaXMucGVla0FoZWFkKDAsIGUxLCBlMiwgZTMsIGU0KTtcbiAgfSxcblxuICBwZWVrQWhlYWQ6IGZ1bmN0aW9uKGksIGUxLCBlMiwgZTMsIGU0KSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA+IGkpIHtcbiAgICAgIHZhciB0b2tlbiA9IHRoaXMudG9rZW5zW2ldO1xuICAgICAgdmFyIHQgPSB0b2tlbi50ZXh0O1xuICAgICAgaWYgKHQgPT09IGUxIHx8IHQgPT09IGUyIHx8IHQgPT09IGUzIHx8IHQgPT09IGU0IHx8XG4gICAgICAgICAgKCFlMSAmJiAhZTIgJiYgIWUzICYmICFlNCkpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgZXhwZWN0OiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMucGVlayhlMSwgZTIsIGUzLCBlNCk7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICB0aGlzLnRva2Vucy5zaGlmdCgpO1xuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgc2VsZlJlZmVyZW50aWFsOiB7XG4gICAgJ3RoaXMnOiB7dHlwZTogQVNULlRoaXNFeHByZXNzaW9uIH0sXG4gICAgJyRsb2NhbHMnOiB7dHlwZTogQVNULkxvY2Fsc0V4cHJlc3Npb24gfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpZkRlZmluZWQodiwgZCkge1xuICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnID8gdiA6IGQ7XG59XG5cbmZ1bmN0aW9uIHBsdXNGbihsLCByKSB7XG4gIGlmICh0eXBlb2YgbCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiByO1xuICBpZiAodHlwZW9mIHIgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gbDtcbiAgcmV0dXJuIGwgKyByO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRlbGVzcygkZmlsdGVyLCBmaWx0ZXJOYW1lKSB7XG4gIHZhciBmbiA9ICRmaWx0ZXIoZmlsdGVyTmFtZSk7XG4gIHJldHVybiAhZm4uJHN0YXRlZnVsO1xufVxuXG5mdW5jdGlvbiBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgJGZpbHRlcikge1xuICB2YXIgYWxsQ29uc3RhbnRzO1xuICB2YXIgYXJnc1RvV2F0Y2g7XG4gIHZhciBpc1N0YXRlbGVzc0ZpbHRlcjtcbiAgc3dpdGNoIChhc3QudHlwZSkge1xuICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgIGFsbENvbnN0YW50cyA9IHRydWU7XG4gICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLmV4cHJlc3Npb24sICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIGV4cHIuZXhwcmVzc2lvbi5jb25zdGFudDtcbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgYXN0LmNvbnN0YW50ID0gdHJ1ZTtcbiAgICBhc3QudG9XYXRjaCA9IFtdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuYXJndW1lbnQsICRmaWx0ZXIpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5hcmd1bWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5hcmd1bWVudC50b1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QubGVmdC50b1dhdGNoLmNvbmNhdChhc3QucmlnaHQudG9XYXRjaCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QudGVzdCwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuYWx0ZXJuYXRlLCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5jb25zZXF1ZW50LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QudGVzdC5jb25zdGFudCAmJiBhc3QuYWx0ZXJuYXRlLmNvbnN0YW50ICYmIGFzdC5jb25zZXF1ZW50LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmNvbnN0YW50ID8gW10gOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICBhc3QuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBhc3QudG9XYXRjaCA9IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0Lm9iamVjdCwgJGZpbHRlcik7XG4gICAgaWYgKGFzdC5jb21wdXRlZCkge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucHJvcGVydHksICRmaWx0ZXIpO1xuICAgIH1cbiAgICBhc3QuY29uc3RhbnQgPSBhc3Qub2JqZWN0LmNvbnN0YW50ICYmICghYXN0LmNvbXB1dGVkIHx8IGFzdC5wcm9wZXJ0eS5jb25zdGFudCk7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgaXNTdGF0ZWxlc3NGaWx0ZXIgPSBhc3QuZmlsdGVyID8gaXNTdGF0ZWxlc3MoJGZpbHRlciwgYXN0LmNhbGxlZS5uYW1lKSA6IGZhbHNlO1xuICAgIGFsbENvbnN0YW50cyA9IGlzU3RhdGVsZXNzRmlsdGVyO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGV4cHIsICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIGV4cHIuY29uc3RhbnQ7XG4gICAgICBpZiAoIWV4cHIuY29uc3RhbnQpIHtcbiAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgZXhwci50b1dhdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBpc1N0YXRlbGVzc0ZpbHRlciA/IGFyZ3NUb1dhdGNoIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgIGFsbENvbnN0YW50cyA9IHRydWU7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgaWYgKCFleHByLmNvbnN0YW50KSB7XG4gICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gYXJnc1RvV2F0Y2g7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKHByb3BlcnR5LnZhbHVlLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBwcm9wZXJ0eS52YWx1ZS5jb25zdGFudCAmJiAhcHJvcGVydHkuY29tcHV0ZWQ7XG4gICAgICBpZiAoIXByb3BlcnR5LnZhbHVlLmNvbnN0YW50KSB7XG4gICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIHByb3BlcnR5LnZhbHVlLnRvV2F0Y2gpO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BlcnR5LmNvbXB1dGVkKSB7XG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMocHJvcGVydHkua2V5LCAkZmlsdGVyKTtcbiAgICAgICAgaWYgKCFwcm9wZXJ0eS5rZXkuY29uc3RhbnQpIHtcbiAgICAgICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBwcm9wZXJ0eS5rZXkudG9XYXRjaCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0pO1xuICAgIGFzdC5jb25zdGFudCA9IGFsbENvbnN0YW50cztcbiAgICBhc3QudG9XYXRjaCA9IGFyZ3NUb1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICBhc3QuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBhc3QudG9XYXRjaCA9IFtdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgIGFzdC50b1dhdGNoID0gW107XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRzKGJvZHkpIHtcbiAgaWYgKGJvZHkubGVuZ3RoICE9PSAxKSByZXR1cm47XG4gIHZhciBsYXN0RXhwcmVzc2lvbiA9IGJvZHlbMF0uZXhwcmVzc2lvbjtcbiAgdmFyIGNhbmRpZGF0ZSA9IGxhc3RFeHByZXNzaW9uLnRvV2F0Y2g7XG4gIGlmIChjYW5kaWRhdGUubGVuZ3RoICE9PSAxKSByZXR1cm4gY2FuZGlkYXRlO1xuICByZXR1cm4gY2FuZGlkYXRlWzBdICE9PSBsYXN0RXhwcmVzc2lvbiA/IGNhbmRpZGF0ZSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNBc3NpZ25hYmxlKGFzdCkge1xuICByZXR1cm4gYXN0LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyIHx8IGFzdC50eXBlID09PSBBU1QuTWVtYmVyRXhwcmVzc2lvbjtcbn1cblxuZnVuY3Rpb24gYXNzaWduYWJsZUFTVChhc3QpIHtcbiAgaWYgKGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSAmJiBpc0Fzc2lnbmFibGUoYXN0LmJvZHlbMF0uZXhwcmVzc2lvbikpIHtcbiAgICByZXR1cm4ge3R5cGU6IEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiwgbGVmdDogYXN0LmJvZHlbMF0uZXhwcmVzc2lvbiwgcmlnaHQ6IHt0eXBlOiBBU1QuTkdWYWx1ZVBhcmFtZXRlcn0sIG9wZXJhdG9yOiAnPSd9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzTGl0ZXJhbChhc3QpIHtcbiAgcmV0dXJuIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgYXN0LmJvZHkubGVuZ3RoID09PSAxICYmIChcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULkxpdGVyYWwgfHxcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULkFycmF5RXhwcmVzc2lvbiB8fFxuICAgICAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlID09PSBBU1QuT2JqZWN0RXhwcmVzc2lvbik7XG59XG5cbmZ1bmN0aW9uIGlzQ29uc3RhbnQoYXN0KSB7XG4gIHJldHVybiBhc3QuY29uc3RhbnQ7XG59XG5cbmZ1bmN0aW9uIEFTVENvbXBpbGVyKCRmaWx0ZXIpIHtcbiAgdGhpcy4kZmlsdGVyID0gJGZpbHRlcjtcbn1cblxuQVNUQ29tcGlsZXIucHJvdG90eXBlID0ge1xuICBjb21waWxlOiBmdW5jdGlvbihhc3QpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5leHRJZDogMCxcbiAgICAgIGZpbHRlcnM6IHt9LFxuICAgICAgZm46IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319LFxuICAgICAgYXNzaWduOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGlucHV0czogW11cbiAgICB9O1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBleHRyYSA9ICcnO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHRoaXMuc3RhZ2UgPSAnYXNzaWduJztcbiAgICBpZiAoKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpKSB7XG4gICAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdhc3NpZ24nO1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubmV4dElkKCk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXNzaWduYWJsZSwgcmVzdWx0KTtcbiAgICAgIHRoaXMucmV0dXJuXyhyZXN1bHQpO1xuICAgICAgZXh0cmEgPSAnZm4uYXNzaWduPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2Fzc2lnbicsICdzLHYsbCcpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgc2VsZi5zdGFnZSA9ICdpbnB1dHMnO1xuICAgIGZvckVhY2godG9XYXRjaCwgZnVuY3Rpb24od2F0Y2gsIGtleSkge1xuICAgICAgdmFyIGZuS2V5ID0gJ2ZuJyArIGtleTtcbiAgICAgIHNlbGYuc3RhdGVbZm5LZXldID0ge3ZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fX07XG4gICAgICBzZWxmLnN0YXRlLmNvbXB1dGluZyA9IGZuS2V5O1xuICAgICAgdmFyIGludG9JZCA9IHNlbGYubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2Uod2F0Y2gsIGludG9JZCk7XG4gICAgICBzZWxmLnJldHVybl8oaW50b0lkKTtcbiAgICAgIHNlbGYuc3RhdGUuaW5wdXRzLnB1c2goZm5LZXkpO1xuICAgICAgd2F0Y2gud2F0Y2hJZCA9IGtleTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdmbic7XG4gICAgdGhpcy5zdGFnZSA9ICdtYWluJztcbiAgICB0aGlzLnJlY3Vyc2UoYXN0KTtcbiAgICB2YXIgZm5TdHJpbmcgPVxuICAgICAgLy8gVGhlIGJ1aWxkIGFuZCBtaW5pZmljYXRpb24gc3RlcHMgcmVtb3ZlIHRoZSBzdHJpbmcgXCJ1c2Ugc3RyaWN0XCIgZnJvbSB0aGUgY29kZSwgYnV0IHRoaXMgaXMgZG9uZSB1c2luZyBhIHJlZ2V4LlxuICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIHRoaXMgdW50aWwgd2UgZG8gYSBiZXR0ZXIgam9iIGF0IG9ubHkgcmVtb3ZpbmcgdGhlIHByZWZpeCBvbmx5IHdoZW4gd2Ugc2hvdWxkLlxuICAgICAgJ1wiJyArIHRoaXMuVVNFICsgJyAnICsgdGhpcy5TVFJJQ1QgKyAnXCI7XFxuJyArXG4gICAgICB0aGlzLmZpbHRlclByZWZpeCgpICtcbiAgICAgICd2YXIgZm49JyArIHRoaXMuZ2VuZXJhdGVGdW5jdGlvbignZm4nLCAncyxsLGEsaScpICtcbiAgICAgIGV4dHJhICtcbiAgICAgIHRoaXMud2F0Y2hGbnMoKSArXG4gICAgICAncmV0dXJuIGZuOyc7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICB2YXIgZm4gPSAobmV3IEZ1bmN0aW9uKCckZmlsdGVyJyxcbiAgICAgICAgJ2dldFN0cmluZ1ZhbHVlJyxcbiAgICAgICAgJ2lmRGVmaW5lZCcsXG4gICAgICAgICdwbHVzJyxcbiAgICAgICAgZm5TdHJpbmcpKShcbiAgICAgICAgICB0aGlzLiRmaWx0ZXIsXG4gICAgICAgICAgZ2V0U3RyaW5nVmFsdWUsXG4gICAgICAgICAgaWZEZWZpbmVkLFxuICAgICAgICAgIHBsdXNGbik7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhZ2UgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIFVTRTogJ3VzZScsXG5cbiAgU1RSSUNUOiAnc3RyaWN0JyxcblxuICB3YXRjaEZuczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBmbnMgPSB0aGlzLnN0YXRlLmlucHV0cztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCd2YXIgJyArIG5hbWUgKyAnPScgKyBzZWxmLmdlbmVyYXRlRnVuY3Rpb24obmFtZSwgJ3MnKSk7XG4gICAgfSk7XG4gICAgaWYgKGZucy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdmbi5pbnB1dHM9WycgKyBmbnMuam9pbignLCcpICsgJ107Jyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH0sXG5cbiAgZ2VuZXJhdGVGdW5jdGlvbjogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbignICsgcGFyYW1zICsgJyl7JyArXG4gICAgICAgIHRoaXMudmFyc1ByZWZpeChuYW1lKSArXG4gICAgICAgIHRoaXMuYm9keShuYW1lKSArXG4gICAgICAgICd9Oyc7XG4gIH0sXG5cbiAgZmlsdGVyUHJlZml4OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaCh0aGlzLnN0YXRlLmZpbHRlcnMsIGZ1bmN0aW9uKGlkLCBmaWx0ZXIpIHtcbiAgICAgIHBhcnRzLnB1c2goaWQgKyAnPSRmaWx0ZXIoJyArIHNlbGYuZXNjYXBlKGZpbHRlcikgKyAnKScpO1xuICAgIH0pO1xuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHJldHVybiAndmFyICcgKyBwYXJ0cy5qb2luKCcsJykgKyAnOyc7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIHZhcnNQcmVmaXg6IGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmxlbmd0aCA/ICd2YXIgJyArIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5qb2luKCcsJykgKyAnOycgOiAnJztcbiAgfSxcblxuICBib2R5OiBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc2VjdGlvbl0uYm9keS5qb2luKCcnKTtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbiwgY29tcHV0ZWQ7XG4gICAgcmVjdXJzaW9uRm4gPSByZWN1cnNpb25GbiB8fCBub29wO1xuICAgIGlmICghc2tpcFdhdGNoSWRDaGVjayAmJiBpc0RlZmluZWQoYXN0LndhdGNoSWQpKSB7XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHRoaXMuaWZfKCdpJyxcbiAgICAgICAgdGhpcy5sYXp5QXNzaWduKGludG9JZCwgdGhpcy5jb21wdXRlZE1lbWJlcignaScsIGFzdC53YXRjaElkKSksXG4gICAgICAgIHRoaXMubGF6eVJlY3Vyc2UoYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgdHJ1ZSlcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgcG9zKSB7XG4gICAgICAgIHNlbGYucmVjdXJzZShleHByZXNzaW9uLmV4cHJlc3Npb24sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7IHJpZ2h0ID0gZXhwcjsgfSk7XG4gICAgICAgIGlmIChwb3MgIT09IGFzdC5ib2R5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBzZWxmLmN1cnJlbnQoKS5ib2R5LnB1c2gocmlnaHQsICc7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5yZXR1cm5fKHJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuZXNjYXBlKGFzdC52YWx1ZSk7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5hcmd1bWVudCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSBhc3Qub3BlcmF0b3IgKyAnKCcgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCkgKyAnKSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyBsZWZ0ID0gZXhwcjsgfSk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyByaWdodCA9IGV4cHI7IH0pO1xuICAgICAgaWYgKGFzdC5vcGVyYXRvciA9PT0gJysnKSB7XG4gICAgICAgIGV4cHJlc3Npb24gPSB0aGlzLnBsdXMobGVmdCwgcmlnaHQpO1xuICAgICAgfSBlbHNlIGlmIChhc3Qub3BlcmF0b3IgPT09ICctJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5pZkRlZmluZWQobGVmdCwgMCkgKyBhc3Qub3BlcmF0b3IgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHByZXNzaW9uID0gJygnICsgbGVmdCArICcpJyArIGFzdC5vcGVyYXRvciArICcoJyArIHJpZ2h0ICsgJyknO1xuICAgICAgfVxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTG9naWNhbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QubGVmdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGFzdC5vcGVyYXRvciA9PT0gJyYmJyA/IGludG9JZCA6IHNlbGYubm90KGludG9JZCksIHNlbGYubGF6eVJlY3Vyc2UoYXN0LnJpZ2h0LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QudGVzdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGludG9JZCwgc2VsZi5sYXp5UmVjdXJzZShhc3QuYWx0ZXJuYXRlLCBpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5jb25zZXF1ZW50LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgIG5hbWVJZC5jb250ZXh0ID0gc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgPyAncycgOiB0aGlzLmFzc2lnbih0aGlzLm5leHRJZCgpLCB0aGlzLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpICsgJz9sOnMnKTtcbiAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgIG5hbWVJZC5uYW1lID0gYXN0Lm5hbWU7XG4gICAgICB9XG4gICAgICBzZWxmLmlmXyhzZWxmLnN0YWdlID09PSAnaW5wdXRzJyB8fCBzZWxmLm5vdChzZWxmLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgJ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKFxuICAgICAgICAgICAgICAgIHNlbGYuaXNOdWxsKHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpLFxuICAgICAgICAgICAgICAgIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBpbnRvSWQgJiYgc2VsZi5sYXp5QXNzaWduKGludG9JZCwgc2VsZi5ub25Db21wdXRlZE1lbWJlcignbCcsIGFzdC5uYW1lKSlcbiAgICAgICAgKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IG5hbWVJZCAmJiAobmFtZUlkLmNvbnRleHQgPSB0aGlzLm5leHRJZCgpKSB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0Lm9iamVjdCwgbGVmdCwgdW5kZWZpbmVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKGxlZnQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoYXN0LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnByb3BlcnR5LCByaWdodCk7XG4gICAgICAgICAgICBzZWxmLmdldFN0cmluZ1ZhbHVlKHJpZ2h0KTtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90KHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpKSwgc2VsZi5sYXp5QXNzaWduKHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICAgICAgICBuYW1lSWQuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IHJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLmlzTnVsbChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSksIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIG5hbWVJZC5uYW1lID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsICd1bmRlZmluZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9LCAhIWNyZWF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKGFzdC5maWx0ZXIpIHtcbiAgICAgICAgcmlnaHQgPSBzZWxmLmZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgICBhcmdzID0gW107XG4gICAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIHZhciBhcmd1bWVudCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIGFyZ3VtZW50KTtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgIGxlZnQgPSB7fTtcbiAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LmNhbGxlZSwgcmlnaHQsIGxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChyaWdodCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBhc3QuY29uc3RhbnQgPyB1bmRlZmluZWQgOiBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChsZWZ0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCAndW5kZWZpbmVkJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICAgIHJpZ2h0ID0gdGhpcy5uZXh0SWQoKTtcbiAgICAgIGxlZnQgPSB7fTtcbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCBsZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKGxlZnQuY29udGV4dCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QucmlnaHQsIHJpZ2h0KTtcbiAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5tZW1iZXIobGVmdC5jb250ZXh0LCBsZWZ0Lm5hbWUsIGxlZnQuY29tcHV0ZWQpICsgYXN0Lm9wZXJhdG9yICsgcmlnaHQ7XG4gICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQgfHwgZXhwcmVzc2lvbik7XG4gICAgICAgIH0pO1xuICAgICAgfSwgMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwciwgYXN0LmNvbnN0YW50ID8gdW5kZWZpbmVkIDogc2VsZi5uZXh0SWQoKSwgdW5kZWZpbmVkLCBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBleHByZXNzaW9uID0gJ1snICsgYXJncy5qb2luKCcsJykgKyAnXSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGNvbXB1dGVkID0gZmFsc2U7XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBpZiAocHJvcGVydHkuY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb21wdXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgICB0aGlzLmFzc2lnbihpbnRvSWQsICd7fScpO1xuICAgICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICAgICAgbGVmdCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkua2V5LCBsZWZ0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVmdCA9IHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/XG4gICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICAgICAgKCcnICsgcHJvcGVydHkua2V5LnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgIHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSwgcmlnaHQpO1xuICAgICAgICAgIHNlbGYuYXNzaWduKHNlbGYubWVtYmVyKGludG9JZCwgbGVmdCwgcHJvcGVydHkuY29tcHV0ZWQpLCByaWdodCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIGFzdC5jb25zdGFudCA/IHVuZGVmaW5lZCA6IHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgICAgYXJncy5wdXNoKHNlbGYuZXNjYXBlKFxuICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/IHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSkpICtcbiAgICAgICAgICAgICAgICAnOicgKyBleHByKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cHJlc3Npb24gPSAneycgKyBhcmdzLmpvaW4oJywnKSArICd9JztcbiAgICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAncycpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICdzJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAnbCcpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICdsJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5OR1ZhbHVlUGFyYW1ldGVyOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAndicpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICd2Jyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0sXG5cbiAgZ2V0SGFzT3duUHJvcGVydHk6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgdmFyIGtleSA9IGVsZW1lbnQgKyAnLicgKyBwcm9wZXJ0eTtcbiAgICB2YXIgb3duID0gdGhpcy5jdXJyZW50KCkub3duO1xuICAgIGlmICghb3duLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIG93bltrZXldID0gdGhpcy5uZXh0SWQoZmFsc2UsIGVsZW1lbnQgKyAnJiYoJyArIHRoaXMuZXNjYXBlKHByb3BlcnR5KSArICcgaW4gJyArIGVsZW1lbnQgKyAnKScpO1xuICAgIH1cbiAgICByZXR1cm4gb3duW2tleV07XG4gIH0sXG5cbiAgYXNzaWduOiBmdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICBpZiAoIWlkKSByZXR1cm47XG4gICAgdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKGlkLCAnPScsIHZhbHVlLCAnOycpO1xuICAgIHJldHVybiBpZDtcbiAgfSxcblxuICBmaWx0ZXI6IGZ1bmN0aW9uKGZpbHRlck5hbWUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXJOYW1lKSkge1xuICAgICAgdGhpcy5zdGF0ZS5maWx0ZXJzW2ZpbHRlck5hbWVdID0gdGhpcy5uZXh0SWQodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0YXRlLmZpbHRlcnNbZmlsdGVyTmFtZV07XG4gIH0sXG5cbiAgaWZEZWZpbmVkOiBmdW5jdGlvbihpZCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuICdpZkRlZmluZWQoJyArIGlkICsgJywnICsgdGhpcy5lc2NhcGUoZGVmYXVsdFZhbHVlKSArICcpJztcbiAgfSxcblxuICBwbHVzOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiAncGx1cygnICsgbGVmdCArICcsJyArIHJpZ2h0ICsgJyknO1xuICB9LFxuXG4gIHJldHVybl86IGZ1bmN0aW9uKGlkKSB7XG4gICAgdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKCdyZXR1cm4gJywgaWQsICc7Jyk7XG4gIH0sXG5cbiAgaWZfOiBmdW5jdGlvbih0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQpIHtcbiAgICBpZiAodGVzdCA9PT0gdHJ1ZSkge1xuICAgICAgYWx0ZXJuYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5jdXJyZW50KCkuYm9keTtcbiAgICAgIGJvZHkucHVzaCgnaWYoJywgdGVzdCwgJyl7Jyk7XG4gICAgICBhbHRlcm5hdGUoKTtcbiAgICAgIGJvZHkucHVzaCgnfScpO1xuICAgICAgaWYgKGNvbnNlcXVlbnQpIHtcbiAgICAgICAgYm9keS5wdXNoKCdlbHNleycpO1xuICAgICAgICBjb25zZXF1ZW50KCk7XG4gICAgICAgIGJvZHkucHVzaCgnfScpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBub3Q6IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gJyEoJyArIGV4cHJlc3Npb24gKyAnKSc7XG4gIH0sXG5cbiAgaXNOdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnPT1udWxsJztcbiAgfSxcblxuICBub3ROdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnIT1udWxsJztcbiAgfSxcblxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICB2YXIgU0FGRV9JREVOVElGSUVSID0gL15bJF9hLXpBLVpdWyRfYS16QS1aMC05XSokLztcbiAgICB2YXIgVU5TQUZFX0NIQVJBQ1RFUlMgPSAvW14kX2EtekEtWjAtOV0vZztcbiAgICBpZiAoU0FGRV9JREVOVElGSUVSLnRlc3QocmlnaHQpKSB7XG4gICAgICByZXR1cm4gbGVmdCArICcuJyArIHJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGVmdCAgKyAnW1wiJyArIHJpZ2h0LnJlcGxhY2UoVU5TQUZFX0NIQVJBQ1RFUlMsIHRoaXMuc3RyaW5nRXNjYXBlRm4pICsgJ1wiXSc7XG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICsgJ1snICsgcmlnaHQgKyAnXSc7XG4gIH0sXG5cbiAgbWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29tcHV0ZWQpIHtcbiAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gIH0sXG5cbiAgZ2V0U3RyaW5nVmFsdWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmFzc2lnbihpdGVtLCAnZ2V0U3RyaW5nVmFsdWUoJyArIGl0ZW0gKyAnKScpO1xuICB9LFxuXG4gIGxhenlSZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKTtcbiAgICB9O1xuICB9LFxuXG4gIGxhenlBc3NpZ246IGZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmFzc2lnbihpZCwgdmFsdWUpO1xuICAgIH07XG4gIH0sXG5cbiAgc3RyaW5nRXNjYXBlUmVnZXg6IC9bXiBhLXpBLVowLTldL2csXG5cbiAgc3RyaW5nRXNjYXBlRm46IGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArICgnMDAwMCcgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gIH0sXG5cbiAgZXNjYXBlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHJldHVybiAnXFwnJyArIHZhbHVlLnJlcGxhY2UodGhpcy5zdHJpbmdFc2NhcGVSZWdleCwgdGhpcy5zdHJpbmdFc2NhcGVGbikgKyAnXFwnJztcbiAgICBpZiAoaXNOdW1iZXIodmFsdWUpKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHJldHVybiAndHJ1ZSc7XG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSkgcmV0dXJuICdmYWxzZSc7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG5cbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2VzYycsICdJTVBPU1NJQkxFJyk7XG4gIH0sXG5cbiAgbmV4dElkOiBmdW5jdGlvbihza2lwLCBpbml0KSB7XG4gICAgdmFyIGlkID0gJ3YnICsgKHRoaXMuc3RhdGUubmV4dElkKyspO1xuICAgIGlmICghc2tpcCkge1xuICAgICAgdGhpcy5jdXJyZW50KCkudmFycy5wdXNoKGlkICsgKGluaXQgPyAnPScgKyBpbml0IDogJycpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIGN1cnJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlW3RoaXMuc3RhdGUuY29tcHV0aW5nXTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBBU1RJbnRlcnByZXRlcigkZmlsdGVyKSB7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG59XG5cbkFTVEludGVycHJldGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZTogZnVuY3Rpb24oYXN0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHZhciBhc3NpZ247XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgYXNzaWduID0gdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgdmFyIGlucHV0cztcbiAgICBpZiAodG9XYXRjaCkge1xuICAgICAgaW5wdXRzID0gW107XG4gICAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gc2VsZi5yZWN1cnNlKHdhdGNoKTtcbiAgICAgICAgd2F0Y2guaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgaW5wdXRzLnB1c2goaW5wdXQpO1xuICAgICAgICB3YXRjaC53YXRjaElkID0ga2V5O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBleHByZXNzaW9ucyA9IFtdO1xuICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgIGV4cHJlc3Npb25zLnB1c2goc2VsZi5yZWN1cnNlKGV4cHJlc3Npb24uZXhwcmVzc2lvbikpO1xuICAgIH0pO1xuICAgIHZhciBmbiA9IGFzdC5ib2R5Lmxlbmd0aCA9PT0gMCA/IG5vb3AgOlxuICAgICAgICAgICAgIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSA/IGV4cHJlc3Npb25zWzBdIDpcbiAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7XG4gICAgICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgZm9yRWFjaChleHByZXNzaW9ucywgZnVuY3Rpb24oZXhwKSB7XG4gICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGV4cChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICB9O1xuICAgIGlmIChhc3NpZ24pIHtcbiAgICAgIGZuLmFzc2lnbiA9IGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZSwgbG9jYWxzKSB7XG4gICAgICAgIHJldHVybiBhc3NpZ24oc2NvcGUsIGxvY2FscywgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlucHV0cykge1xuICAgICAgZm4uaW5wdXRzID0gaW5wdXRzO1xuICAgIH1cbiAgICByZXR1cm4gZm47XG4gIH0sXG5cbiAgcmVjdXJzZTogZnVuY3Rpb24oYXN0LCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICB2YXIgbGVmdCwgcmlnaHQsIHNlbGYgPSB0aGlzLCBhcmdzO1xuICAgIGlmIChhc3QuaW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlucHV0cyhhc3QuaW5wdXQsIGFzdC53YXRjaElkKTtcbiAgICB9XG4gICAgc3dpdGNoIChhc3QudHlwZSkge1xuICAgIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZShhc3QudmFsdWUsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULlVuYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5hcmd1bWVudCk7XG4gICAgICByZXR1cm4gdGhpc1sndW5hcnknICsgYXN0Lm9wZXJhdG9yXShyaWdodCwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQpO1xuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgIHJldHVybiB0aGlzWydiaW5hcnknICsgYXN0Lm9wZXJhdG9yXShsZWZ0LCByaWdodCwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuTG9naWNhbEV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0KTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gdGhpc1snYmluYXJ5JyArIGFzdC5vcGVyYXRvcl0obGVmdCwgcmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiB0aGlzWyd0ZXJuYXJ5PzonXShcbiAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC50ZXN0KSxcbiAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC5hbHRlcm5hdGUpLFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LmNvbnNlcXVlbnQpLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIGNhc2UgQVNULklkZW50aWZpZXI6XG4gICAgICByZXR1cm4gc2VsZi5pZGVudGlmaWVyKGFzdC5uYW1lLCBjb250ZXh0LCBjcmVhdGUpO1xuICAgIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5vYmplY3QsIGZhbHNlLCAhIWNyZWF0ZSk7XG4gICAgICBpZiAoIWFzdC5jb21wdXRlZCkge1xuICAgICAgICByaWdodCA9IGFzdC5wcm9wZXJ0eS5uYW1lO1xuICAgICAgfVxuICAgICAgaWYgKGFzdC5jb21wdXRlZCkgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnByb3BlcnR5KTtcbiAgICAgIHJldHVybiBhc3QuY29tcHV0ZWQgP1xuICAgICAgICB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUpIDpcbiAgICAgICAgdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlKTtcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBhcmdzLnB1c2goc2VsZi5yZWN1cnNlKGV4cHIpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFzdC5maWx0ZXIpIHJpZ2h0ID0gdGhpcy4kZmlsdGVyKGFzdC5jYWxsZWUubmFtZSk7XG4gICAgICBpZiAoIWFzdC5maWx0ZXIpIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5jYWxsZWUsIHRydWUpO1xuICAgICAgcmV0dXJuIGFzdC5maWx0ZXIgP1xuICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHZhbHVlID0gcmlnaHQuYXBwbHkodW5kZWZpbmVkLCB2YWx1ZXMsIGlucHV0cyk7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7Y29udGV4dDogdW5kZWZpbmVkLCBuYW1lOiB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgaWYgKHJocy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWUgPSByaHMudmFsdWUuYXBwbHkocmhzLmNvbnRleHQsIHZhbHVlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQsIHRydWUsIDEpO1xuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHZhciByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIGxocy5jb250ZXh0W2xocy5uYW1lXSA9IHJocztcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHJoc30gOiByaHM7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIGFyZ3MucHVzaChzZWxmLnJlY3Vyc2UoZXhwcikpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHZhbHVlLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICAgIGFyZ3MucHVzaCh7a2V5OiBzZWxmLnJlY3Vyc2UocHJvcGVydHkua2V5KSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcmdzLnB1c2goe2tleTogcHJvcGVydHkua2V5LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkua2V5Lm5hbWUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoJycgKyBwcm9wZXJ0eS5rZXkudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGlmIChhcmdzW2ldLmNvbXB1dGVkKSB7XG4gICAgICAgICAgICB2YWx1ZVthcmdzW2ldLmtleShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyldID0gYXJnc1tpXS52YWx1ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlW2FyZ3NbaV0ua2V5XSA9IGFyZ3NbaV0udmFsdWUoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBzY29wZX0gOiBzY29wZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuTG9jYWxzRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBsb2NhbHN9IDogbG9jYWxzO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5OR1ZhbHVlUGFyYW1ldGVyOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbikge1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXNzaWdufSA6IGFzc2lnbjtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gICd1bmFyeSsnOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChpc0RlZmluZWQoYXJnKSkge1xuICAgICAgICBhcmcgPSArYXJnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd1bmFyeS0nOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChpc0RlZmluZWQoYXJnKSkge1xuICAgICAgICBhcmcgPSAtYXJnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnID0gLTA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndW5hcnkhJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSAhYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSsnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciBhcmcgPSBwbHVzRm4obGhzLCByaHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeS0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciBhcmcgPSAoaXNEZWZpbmVkKGxocykgPyBsaHMgOiAwKSAtIChpc0RlZmluZWQocmhzKSA/IHJocyA6IDApO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSonOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICogcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeS8nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIC8gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSUnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICUgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT09PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPT09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkhPT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICE9PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkhPSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeTwnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDwgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT4nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID4gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeTw9JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA8PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Pj0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID49IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkmJic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgJiYgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeXx8JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB8fCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndGVybmFyeT86JzogZnVuY3Rpb24odGVzdCwgYWx0ZXJuYXRlLCBjb25zZXF1ZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gdGVzdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPyBhbHRlcm5hdGUoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDogY29uc2VxdWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICB2YWx1ZTogZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiBjb250ZXh0ID8ge2NvbnRleHQ6IHVuZGVmaW5lZCwgbmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9IDogdmFsdWU7IH07XG4gIH0sXG4gIGlkZW50aWZpZXI6IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGJhc2UgPSBsb2NhbHMgJiYgKG5hbWUgaW4gbG9jYWxzKSA/IGxvY2FscyA6IHNjb3BlO1xuICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEgJiYgYmFzZSAmJiBiYXNlW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgYmFzZVtuYW1lXSA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYmFzZSA/IGJhc2VbbmFtZV0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGJhc2UsIG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciByaHM7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBpZiAobGhzICE9IG51bGwpIHtcbiAgICAgICAgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByaHMgPSBnZXRTdHJpbmdWYWx1ZShyaHMpO1xuICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgIGlmIChsaHMgJiYgIShsaHNbcmhzXSkpIHtcbiAgICAgICAgICAgIGxoc1tyaHNdID0ge307XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gbGhzW3Joc107XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGxocywgbmFtZTogcmhzLCB2YWx1ZTogdmFsdWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIG5vbkNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICBpZiAobGhzICYmIGxoc1tyaWdodF0gPT0gbnVsbCkge1xuICAgICAgICAgIGxoc1tyaWdodF0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gbGhzICE9IG51bGwgPyBsaHNbcmlnaHRdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtjb250ZXh0OiBsaHMsIG5hbWU6IHJpZ2h0LCB2YWx1ZTogdmFsdWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGlucHV0czogZnVuY3Rpb24oaW5wdXQsIHdhdGNoSWQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIHZhbHVlLCBsb2NhbHMsIGlucHV0cykge1xuICAgICAgaWYgKGlucHV0cykgcmV0dXJuIGlucHV0c1t3YXRjaElkXTtcbiAgICAgIHJldHVybiBpbnB1dChzY29wZSwgdmFsdWUsIGxvY2Fscyk7XG4gICAgfTtcbiAgfVxufTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFyc2VyKGxleGVyLCAkZmlsdGVyLCBvcHRpb25zKSB7XG4gIHRoaXMuYXN0ID0gbmV3IEFTVChsZXhlciwgb3B0aW9ucyk7XG4gIHRoaXMuYXN0Q29tcGlsZXIgPSBvcHRpb25zLmNzcCA/IG5ldyBBU1RJbnRlcnByZXRlcigkZmlsdGVyKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBBU1RDb21waWxlcigkZmlsdGVyKTtcbn1cblxuUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhcnNlcixcblxuICBwYXJzZTogZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBhc3QgPSB0aGlzLmFzdC5hc3QodGV4dCk7XG4gICAgdmFyIGZuID0gdGhpcy5hc3RDb21waWxlci5jb21waWxlKGFzdCk7XG4gICAgZm4ubGl0ZXJhbCA9IGlzTGl0ZXJhbChhc3QpO1xuICAgIGZuLmNvbnN0YW50ID0gaXNDb25zdGFudChhc3QpO1xuICAgIHJldHVybiBmbjtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0VmFsdWVPZih2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZS52YWx1ZU9mKSA/IHZhbHVlLnZhbHVlT2YoKSA6IG9iamVjdFZhbHVlT2YuY2FsbCh2YWx1ZSk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRwYXJzZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogICB2YXIgZ2V0dGVyID0gJHBhcnNlKCd1c2VyLm5hbWUnKTtcbiAqICAgdmFyIHNldHRlciA9IGdldHRlci5hc3NpZ247XG4gKiAgIHZhciBjb250ZXh0ID0ge3VzZXI6e25hbWU6J2FuZ3VsYXInfX07XG4gKiAgIHZhciBsb2NhbHMgPSB7dXNlcjp7bmFtZTonbG9jYWwnfX07XG4gKlxuICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQpKS50b0VxdWFsKCdhbmd1bGFyJyk7XG4gKiAgIHNldHRlcihjb250ZXh0LCAnbmV3VmFsdWUnKTtcbiAqICAgZXhwZWN0KGNvbnRleHQudXNlci5uYW1lKS50b0VxdWFsKCduZXdWYWx1ZScpO1xuICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQsIGxvY2FscykpLnRvRXF1YWwoJ2xvY2FsJyk7XG4gKiBgYGBcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gKlxuICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gKiAgICAgIGBjb250ZXh0YC5cbiAqXG4gKiAgICBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gYWxzbyBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAgICAqIGBsaXRlcmFsYCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24ncyB0b3AtbGV2ZWwgbm9kZSBpcyBhIEphdmFTY3JpcHRcbiAqICAgICAgICBsaXRlcmFsLlxuICogICAgICAqIGBjb25zdGFudGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uIGlzIG1hZGUgZW50aXJlbHkgb2YgSmF2YVNjcmlwdFxuICogICAgICAgIGNvbnN0YW50IGxpdGVyYWxzLlxuICogICAgICAqIGBhc3NpZ25gIOKAkyBgez9mdW5jdGlvbihjb250ZXh0LCB2YWx1ZSl9YCDigJMgaWYgdGhlIGV4cHJlc3Npb24gaXMgYXNzaWduYWJsZSwgdGhpcyB3aWxsIGJlXG4gKiAgICAgICAgc2V0IHRvIGEgZnVuY3Rpb24gdG8gY2hhbmdlIGl0cyB2YWx1ZSBvbiB0aGUgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHBhcnNlUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgJHBhcnNlUHJvdmlkZXJgIGNhbiBiZSB1c2VkIGZvciBjb25maWd1cmluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRwYXJzZSAkcGFyc2V9XG4gKiAgc2VydmljZS5cbiAqL1xuZnVuY3Rpb24gJFBhcnNlUHJvdmlkZXIoKSB7XG4gIHZhciBjYWNoZSA9IGNyZWF0ZU1hcCgpO1xuICB2YXIgbGl0ZXJhbHMgPSB7XG4gICAgJ3RydWUnOiB0cnVlLFxuICAgICdmYWxzZSc6IGZhbHNlLFxuICAgICdudWxsJzogbnVsbCxcbiAgICAndW5kZWZpbmVkJzogdW5kZWZpbmVkXG4gIH07XG4gIHZhciBpZGVudFN0YXJ0LCBpZGVudENvbnRpbnVlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRwYXJzZVByb3ZpZGVyI2FkZExpdGVyYWxcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIENvbmZpZ3VyZSAkcGFyc2Ugc2VydmljZSB0byBhZGQgbGl0ZXJhbCB2YWx1ZXMgdGhhdCB3aWxsIGJlIHByZXNlbnQgYXMgbGl0ZXJhbCBhdCBleHByZXNzaW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpdGVyYWxOYW1lIFRva2VuIGZvciB0aGUgbGl0ZXJhbCB2YWx1ZS4gVGhlIGxpdGVyYWwgbmFtZSB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgbGl0ZXJhbCBuYW1lLlxuICAgKiBAcGFyYW0geyp9IGxpdGVyYWxWYWx1ZSBWYWx1ZSBmb3IgdGhpcyBsaXRlcmFsLiBBbGwgbGl0ZXJhbCB2YWx1ZXMgbXVzdCBiZSBwcmltaXRpdmVzIG9yIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiovXG4gIHRoaXMuYWRkTGl0ZXJhbCA9IGZ1bmN0aW9uKGxpdGVyYWxOYW1lLCBsaXRlcmFsVmFsdWUpIHtcbiAgICBsaXRlcmFsc1tsaXRlcmFsTmFtZV0gPSBsaXRlcmFsVmFsdWU7XG4gIH07XG5cbiAvKipcbiAgKiBAbmdkb2MgbWV0aG9kXG4gICogQG5hbWUgJHBhcnNlUHJvdmlkZXIjc2V0SWRlbnRpZmllckZuc1xuICAqXG4gICogQGRlc2NyaXB0aW9uXG4gICpcbiAgKiBBbGxvd3MgZGVmaW5pbmcgdGhlIHNldCBvZiBjaGFyYWN0ZXJzIHRoYXQgYXJlIGFsbG93ZWQgaW4gQW5ndWxhciBleHByZXNzaW9ucy4gVGhlIGZ1bmN0aW9uXG4gICogYGlkZW50aWZpZXJTdGFydGAgd2lsbCBnZXQgY2FsbGVkIHRvIGtub3cgaWYgYSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgdG8gYmUgdGhlXG4gICogZmlyc3QgY2hhcmFjdGVyIGZvciBhbiBpZGVudGlmaWVyLiBUaGUgZnVuY3Rpb24gYGlkZW50aWZpZXJDb250aW51ZWAgd2lsbCBnZXQgY2FsbGVkIHRvIGtub3cgaWZcbiAgKiBhIGdpdmVuIGNoYXJhY3RlciBpcyBhIHZhbGlkIGNoYXJhY3RlciB0byBiZSBhIGZvbGxvdy11cCBpZGVudGlmaWVyIGNoYXJhY3Rlci4gVGhlIGZ1bmN0aW9uc1xuICAqIGBpZGVudGlmaWVyU3RhcnRgIGFuZCBgaWRlbnRpZmllckNvbnRpbnVlYCB3aWxsIHJlY2VpdmUgYXMgYXJndW1lbnRzIHRoZSBzaW5nbGUgY2hhcmFjdGVyIHRvIGJlXG4gICogaWRlbnRpZmllciBhbmQgdGhlIGNoYXJhY3RlciBjb2RlIHBvaW50LiBUaGVzZSBhcmd1bWVudHMgd2lsbCBiZSBgc3RyaW5nYCBhbmQgYG51bWVyaWNgLiBLZWVwIGluXG4gICogbWluZCB0aGF0IHRoZSBgc3RyaW5nYCBwYXJhbWV0ZXIgY2FuIGJlIHR3byBjaGFyYWN0ZXJzIGxvbmcgZGVwZW5kaW5nIG9uIHRoZSBjaGFyYWN0ZXJcbiAgKiByZXByZXNlbnRhdGlvbi4gSXQgaXMgZXhwZWN0ZWQgZm9yIHRoZSBmdW5jdGlvbiB0byByZXR1cm4gYHRydWVgIG9yIGBmYWxzZWAsIHdoZXRoZXIgdGhhdFxuICAqIGNoYXJhY3RlciBpcyBhbGxvd2VkIG9yIG5vdC5cbiAgKlxuICAqIFNpbmNlIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgZXh0ZW5zaXZlbHksIGtlZXAgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZXNlIGZ1bmN0aW9ucyBmYXN0LFxuICAqIGFzIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGVzZSBmdW5jdGlvbnMgaGF2ZSBhIGRpcmVjdCBpbXBhY3Qgb24gdGhlIGV4cHJlc3Npb25zIHBhcnNpbmcgc3BlZWQuXG4gICpcbiAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gaWRlbnRpZmllclN0YXJ0IFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgZGVjaWRlIHdoZXRoZXIgdGhlIGdpdmVuIGNoYXJhY3RlciBpc1xuICAqICAgYSB2YWxpZCBpZGVudGlmaWVyIHN0YXJ0IGNoYXJhY3Rlci5cbiAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gaWRlbnRpZmllckNvbnRpbnVlIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgZGVjaWRlIHdoZXRoZXIgdGhlIGdpdmVuIGNoYXJhY3RlciBpc1xuICAqICAgYSB2YWxpZCBpZGVudGlmaWVyIGNvbnRpbnVlIGNoYXJhY3Rlci5cbiAgKi9cbiAgdGhpcy5zZXRJZGVudGlmaWVyRm5zID0gZnVuY3Rpb24oaWRlbnRpZmllclN0YXJ0LCBpZGVudGlmaWVyQ29udGludWUpIHtcbiAgICBpZGVudFN0YXJ0ID0gaWRlbnRpZmllclN0YXJ0O1xuICAgIGlkZW50Q29udGludWUgPSBpZGVudGlmaWVyQ29udGludWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckZmlsdGVyJywgZnVuY3Rpb24oJGZpbHRlcikge1xuICAgIHZhciBub1Vuc2FmZUV2YWwgPSBjc3AoKS5ub1Vuc2FmZUV2YWw7XG4gICAgdmFyICRwYXJzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgY3NwOiBub1Vuc2FmZUV2YWwsXG4gICAgICAgICAgbGl0ZXJhbHM6IGNvcHkobGl0ZXJhbHMpLFxuICAgICAgICAgIGlzSWRlbnRpZmllclN0YXJ0OiBpc0Z1bmN0aW9uKGlkZW50U3RhcnQpICYmIGlkZW50U3RhcnQsXG4gICAgICAgICAgaXNJZGVudGlmaWVyQ29udGludWU6IGlzRnVuY3Rpb24oaWRlbnRDb250aW51ZSkgJiYgaWRlbnRDb250aW51ZVxuICAgICAgICB9O1xuICAgIHJldHVybiAkcGFyc2U7XG5cbiAgICBmdW5jdGlvbiAkcGFyc2UoZXhwLCBpbnRlcmNlcHRvckZuKSB7XG4gICAgICB2YXIgcGFyc2VkRXhwcmVzc2lvbiwgb25lVGltZSwgY2FjaGVLZXk7XG5cbiAgICAgIHN3aXRjaCAodHlwZW9mIGV4cCkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgIGV4cCA9IGV4cC50cmltKCk7XG4gICAgICAgICAgY2FjaGVLZXkgPSBleHA7XG5cbiAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gY2FjaGVbY2FjaGVLZXldO1xuXG4gICAgICAgICAgaWYgKCFwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICBpZiAoZXhwLmNoYXJBdCgwKSA9PT0gJzonICYmIGV4cC5jaGFyQXQoMSkgPT09ICc6Jykge1xuICAgICAgICAgICAgICBvbmVUaW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZXhwID0gZXhwLnN1YnN0cmluZygyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcigkcGFyc2VPcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKGxleGVyLCAkZmlsdGVyLCAkcGFyc2VPcHRpb25zKTtcbiAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBwYXJzZXIucGFyc2UoZXhwKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLmNvbnN0YW50KSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gY29uc3RhbnRXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvbmVUaW1lKSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24ub25lVGltZSA9IHRydWU7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gb25lVGltZVdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IHBhcnNlZEV4cHJlc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKGV4cCwgaW50ZXJjZXB0b3JGbik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3Iobm9vcCwgaW50ZXJjZXB0b3JGbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdWYWx1ZSwgb2xkVmFsdWVPZlZhbHVlLCBjb21wYXJlT2JqZWN0SWRlbnRpdHkpIHtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09IG51bGwgfHwgb2xkVmFsdWVPZlZhbHVlID09IG51bGwpIHsgLy8gbnVsbC91bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgLy8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSB2YWx1ZSB0byBhIHByaW1pdGl2ZSB0eXBlXG4gICAgICAgIC8vIFRPRE8oZG9jcyk6IGFkZCBhIG5vdGUgdG8gZG9jcyB0aGF0IGJ5IGltcGxlbWVudGluZyB2YWx1ZU9mIGV2ZW4gb2JqZWN0cyBhbmQgYXJyYXlzIGNhblxuICAgICAgICAvLyAgICAgICAgICAgICBiZSBjaGVhcGx5IGRpcnR5LWNoZWNrZWRcbiAgICAgICAgbmV3VmFsdWUgPSBnZXRWYWx1ZU9mKG5ld1ZhbHVlKTtcblxuICAgICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0JyAmJiAhY29tcGFyZU9iamVjdElkZW50aXR5KSB7XG4gICAgICAgICAgLy8gb2JqZWN0cy9hcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgLSBkZWVwLXdhdGNoaW5nIHRoZW0gd291bGQgYmUgdG9vIGV4cGVuc2l2ZVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGwtdGhyb3VnaCB0byB0aGUgcHJpbWl0aXZlIGVxdWFsaXR5IGNoZWNrXG4gICAgICB9XG5cbiAgICAgIC8vUHJpbWl0aXZlIG9yIE5hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWUgfHwgKG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSAmJiBvbGRWYWx1ZU9mVmFsdWUgIT09IG9sZFZhbHVlT2ZWYWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBpbnB1dEV4cHJlc3Npb25zID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICB2YXIgbGFzdFJlc3VsdDtcblxuICAgICAgaWYgKGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBvbGRJbnB1dFZhbHVlT2YgPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgaW5wdXRFeHByZXNzaW9ucyA9IGlucHV0RXhwcmVzc2lvbnNbMF07XG4gICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgICB2YXIgbmV3SW5wdXRWYWx1ZSA9IGlucHV0RXhwcmVzc2lvbnMoc2NvcGUpO1xuICAgICAgICAgIGlmICghZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2YsIHBhcnNlZEV4cHJlc3Npb24ubGl0ZXJhbCkpIHtcbiAgICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgW25ld0lucHV0VmFsdWVdKTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZiA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9sZElucHV0VmFsdWVPZlZhbHVlcyA9IFtdO1xuICAgICAgdmFyIG9sZElucHV0VmFsdWVzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzXG4gICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRzV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB2YXIgbmV3SW5wdXRWYWx1ZSA9IGlucHV0RXhwcmVzc2lvbnNbaV0oc2NvcGUpO1xuICAgICAgICAgIGlmIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0gIWV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3SW5wdXRWYWx1ZSwgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldLCBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwpKSkge1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZXNbaV0gPSBuZXdJbnB1dFZhbHVlO1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZSAmJiBnZXRWYWx1ZU9mKG5ld0lucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGRJbnB1dFZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBpc0RvbmUgPSBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwgPyBpc0FsbERlZmluZWQgOiBpc0RlZmluZWQ7XG4gICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlO1xuICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgIHVud2F0Y2ggPSBpbnB1dHNXYXRjaERlbGVnYXRlKHNjb3BlLCBvbmVUaW1lTGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChvbmVUaW1lV2F0Y2gsIG9uZVRpbWVMaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVud2F0Y2g7XG5cbiAgICAgIGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEb25lKHZhbHVlKSkge1xuICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0RvbmUobGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FsbERlZmluZWQodmFsdWUpIHtcbiAgICAgIHZhciBhbGxEZWZpbmVkID0gdHJ1ZTtcbiAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAoIWlzRGVmaW5lZCh2YWwpKSBhbGxEZWZpbmVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhbGxEZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudFdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIHJldHVybiB1bndhdGNoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEludGVyY2VwdG9yKHBhcnNlZEV4cHJlc3Npb24sIGludGVyY2VwdG9yRm4pIHtcbiAgICAgIGlmICghaW50ZXJjZXB0b3JGbikgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247XG4gICAgICB2YXIgd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlO1xuICAgICAgdmFyIHVzZUlucHV0cyA9IGZhbHNlO1xuXG4gICAgICB2YXIgaXNEb25lID0gcGFyc2VkRXhwcmVzc2lvbi5saXRlcmFsID8gaXNBbGxEZWZpbmVkIDogaXNEZWZpbmVkO1xuXG4gICAgICBmdW5jdGlvbiByZWd1bGFySW50ZXJjZXB0ZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHVzZUlucHV0cyAmJiBpbnB1dHMgPyBpbnB1dHNbMF0gOiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbmVUaW1lSW50ZXJjZXB0ZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHVzZUlucHV0cyAmJiBpbnB1dHMgPyBpbnB1dHNbMF0gOiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAvLyB3ZSBvbmx5IHJldHVybiB0aGUgaW50ZXJjZXB0b3IncyByZXN1bHQgaWYgdGhlXG4gICAgICAgIC8vIGluaXRpYWwgdmFsdWUgaXMgZGVmaW5lZCAoZm9yIGJpbmQtb25jZSlcbiAgICAgICAgcmV0dXJuIGlzRG9uZSh2YWx1ZSkgPyByZXN1bHQgOiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZuID0gcGFyc2VkRXhwcmVzc2lvbi5vbmVUaW1lID8gb25lVGltZUludGVyY2VwdGVkRXhwcmVzc2lvbiA6IHJlZ3VsYXJJbnRlcmNlcHRlZEV4cHJlc3Npb247XG5cbiAgICAgIC8vIFByb3BvZ2F0ZSB0aGUgbGl0ZXJhbC9vbmVUaW1lIGF0dHJpYnV0ZXNcbiAgICAgIGZuLmxpdGVyYWwgPSBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWw7XG4gICAgICBmbi5vbmVUaW1lID0gcGFyc2VkRXhwcmVzc2lvbi5vbmVUaW1lO1xuXG4gICAgICAvLyBQcm9wYWdhdGUgb3IgY3JlYXRlIGlucHV0cyAvICQkd2F0Y2hEZWxlZ2F0ZXNcbiAgICAgIHVzZUlucHV0cyA9ICFwYXJzZWRFeHByZXNzaW9uLmlucHV0cztcbiAgICAgIGlmICh3YXRjaERlbGVnYXRlICYmIHdhdGNoRGVsZWdhdGUgIT09IGlucHV0c1dhdGNoRGVsZWdhdGUpIHtcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gd2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgZm4uaW5wdXRzID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICB9IGVsc2UgaWYgKCFpbnRlcmNlcHRvckZuLiRzdGF0ZWZ1bCkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBpbnRlcmNlcHRvciwgYnV0IG5vIHdhdGNoRGVsZWdhdGUgdGhlbiB0cmVhdCB0aGUgaW50ZXJjZXB0b3IgbGlrZVxuICAgICAgICAvLyB3ZSB0cmVhdCBmaWx0ZXJzIC0gaXQgaXMgYXNzdW1lZCB0byBiZSBhIHB1cmUgZnVuY3Rpb24gdW5sZXNzIGZsYWdnZWQgd2l0aCAkc3RhdGVmdWxcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgZm4uaW5wdXRzID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMgPyBwYXJzZWRFeHByZXNzaW9uLmlucHV0cyA6IFtwYXJzZWRFeHByZXNzaW9uXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRxXG4gKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzZXJ2aWNlIHRoYXQgaGVscHMgeW91IHJ1biBmdW5jdGlvbnMgYXN5bmNocm9ub3VzbHksIGFuZCB1c2UgdGhlaXIgcmV0dXJuIHZhbHVlcyAob3IgZXhjZXB0aW9ucylcbiAqIHdoZW4gdGhleSBhcmUgZG9uZSBwcm9jZXNzaW5nLlxuICpcbiAqIFRoaXMgaXMgYSBbUHJvbWlzZXMvQStdKGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vKS1jb21wbGlhbnQgaW1wbGVtZW50YXRpb24gb2YgcHJvbWlzZXMvZGVmZXJyZWRcbiAqIG9iamVjdHMgaW5zcGlyZWQgYnkgW0tyaXMgS293YWwncyBRXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpLlxuICpcbiAqICRxIGNhbiBiZSB1c2VkIGluIHR3byBmYXNoaW9ucyAtLS0gb25lIHdoaWNoIGlzIG1vcmUgc2ltaWxhciB0byBLcmlzIEtvd2FsJ3MgUSBvciBqUXVlcnkncyBEZWZlcnJlZFxuICogaW1wbGVtZW50YXRpb25zLCBhbmQgdGhlIG90aGVyIHdoaWNoIHJlc2VtYmxlcyBFUzYgKEVTMjAxNSkgcHJvbWlzZXMgdG8gc29tZSBkZWdyZWUuXG4gKlxuICogIyAkcSBjb25zdHJ1Y3RvclxuICpcbiAqIFRoZSBzdHJlYW1saW5lZCBFUzYgc3R5bGUgcHJvbWlzZSBpcyBlc3NlbnRpYWxseSBqdXN0IHVzaW5nICRxIGFzIGEgY29uc3RydWN0b3Igd2hpY2ggdGFrZXMgYSBgcmVzb2x2ZXJgXG4gKiBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQuIFRoaXMgaXMgc2ltaWxhciB0byB0aGUgbmF0aXZlIFByb21pc2UgaW1wbGVtZW50YXRpb24gZnJvbSBFUzYsXG4gKiBzZWUgW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZSkuXG4gKlxuICogV2hpbGUgdGhlIGNvbnN0cnVjdG9yLXN0eWxlIHVzZSBpcyBzdXBwb3J0ZWQsIG5vdCBhbGwgb2YgdGhlIHN1cHBvcnRpbmcgbWV0aG9kcyBmcm9tIEVTNiBwcm9taXNlcyBhcmVcbiAqIGF2YWlsYWJsZSB5ZXQuXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgbGlrZSBzbzpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICAvLyBwZXJmb3JtIHNvbWUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcmVzb2x2ZSBvciByZWplY3QgdGhlIHByb21pc2Ugd2hlbiBhcHByb3ByaWF0ZS5cbiAqICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gKiAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgICAgcmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICByZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgICAgfVxuICogICAgICAgfSwgMTAwMCk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogTm90ZTogcHJvZ3Jlc3Mvbm90aWZ5IGNhbGxiYWNrcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgdmlhIHRoZSBFUzYtc3R5bGUgaW50ZXJmYWNlLlxuICpcbiAqIE5vdGU6IHVubGlrZSBFUzYgYmVoYXZpb3IsIGFuIGV4Y2VwdGlvbiB0aHJvd24gaW4gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpbGwgTk9UIGltcGxpY2l0bHkgcmVqZWN0IHRoZSBwcm9taXNlLlxuICpcbiAqIEhvd2V2ZXIsIHRoZSBtb3JlIHRyYWRpdGlvbmFsIENvbW1vbkpTLXN0eWxlIHVzYWdlIGlzIHN0aWxsIGF2YWlsYWJsZSwgYW5kIGRvY3VtZW50ZWQgYmVsb3cuXG4gKlxuICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhblxuICogaW50ZXJmYWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiBhbiBhY3Rpb24gdGhhdCBpc1xuICogcGVyZm9ybWVkIGFzeW5jaHJvbm91c2x5LCBhbmQgbWF5IG9yIG1heSBub3QgYmUgZmluaXNoZWQgYXQgYW55IGdpdmVuIHBvaW50IGluIHRpbWUuXG4gKlxuICogRnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgZGVhbGluZyB3aXRoIGVycm9yIGhhbmRsaW5nLCBkZWZlcnJlZCBhbmQgcHJvbWlzZSBBUElzIGFyZSB0b1xuICogYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIHdoYXQgYHRyeWAsIGBjYXRjaGAgYW5kIGB0aHJvd2Aga2V5d29yZHMgYXJlIHRvIHN5bmNocm9ub3VzIHByb2dyYW1taW5nLlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS5cbiAqXG4gKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICogICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKlxuICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICBkZWZlcnJlZC5ub3RpZnkoJ0Fib3V0IHRvIGdyZWV0ICcgKyBuYW1lICsgJy4nKTtcbiAqXG4gKiAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7XG4gKiAgICAgICB9IGVsc2Uge1xuICogICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgIH1cbiAqICAgICB9LCAxMDAwKTtcbiAqXG4gKiAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0sIGZ1bmN0aW9uKHVwZGF0ZSkge1xuICogICAgIGFsZXJ0KCdHb3Qgbm90aWZpY2F0aW9uOiAnICsgdXBkYXRlKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBBdCBmaXJzdCBpdCBtaWdodCBub3QgYmUgb2J2aW91cyB3aHkgdGhpcyBleHRyYSBjb21wbGV4aXR5IGlzIHdvcnRoIHRoZSB0cm91YmxlLiBUaGUgcGF5b2ZmXG4gKiBjb21lcyBpbiB0aGUgd2F5IG9mIGd1YXJhbnRlZXMgdGhhdCBwcm9taXNlIGFuZCBkZWZlcnJlZCBBUElzIG1ha2UsIHNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC91bmNvbW1vbmpzL2Jsb2IvbWFzdGVyL3Byb21pc2VzL3NwZWNpZmljYXRpb24ubWQuXG4gKlxuICogQWRkaXRpb25hbGx5IHRoZSBwcm9taXNlIGFwaSBhbGxvd3MgZm9yIGNvbXBvc2l0aW9uIHRoYXQgaXMgdmVyeSBoYXJkIHRvIGRvIHdpdGggdGhlXG4gKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLlxuICogRm9yIG1vcmUgb24gdGhpcyBwbGVhc2Ugc2VlIHRoZSBbUSBkb2N1bWVudGF0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpIGVzcGVjaWFsbHkgdGhlXG4gKiBzZWN0aW9uIG9uIHNlcmlhbCBvciBwYXJhbGxlbCBqb2luaW5nIG9mIHByb21pc2VzLlxuICpcbiAqICMgVGhlIERlZmVycmVkIEFQSVxuICpcbiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBkZWZlcnJlZCBvYmplY3QgaXMgdG8gZXhwb3NlIHRoZSBhc3NvY2lhdGVkIFByb21pc2UgaW5zdGFuY2UgYXMgd2VsbCBhcyBBUElzXG4gKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24sIGFzIHdlbGwgYXMgdGhlIHN0YXR1c1xuICogb2YgdGhlIHRhc2suXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGByZXNvbHZlKHZhbHVlKWAg4oCTIHJlc29sdmVzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHZhbHVlYC4gSWYgdGhlIHZhbHVlIGlzIGEgcmVqZWN0aW9uXG4gKiAgIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpbnN0ZWFkLlxuICogLSBgcmVqZWN0KHJlYXNvbilgIOKAkyByZWplY3RzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHJlYXNvbmAuIFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICogICByZXNvbHZpbmcgaXQgd2l0aCBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAuXG4gKiAtIGBub3RpZnkodmFsdWUpYCAtIHByb3ZpZGVzIHVwZGF0ZXMgb24gdGhlIHN0YXR1cyBvZiB0aGUgcHJvbWlzZSdzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkXG4gKiAgIG11bHRpcGxlIHRpbWVzIGJlZm9yZSB0aGUgcHJvbWlzZSBpcyBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogKipQcm9wZXJ0aWVzKipcbiAqXG4gKiAtIHByb21pc2Ug4oCTIGB7UHJvbWlzZX1gIOKAkyBwcm9taXNlIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWZlcnJlZC5cbiAqXG4gKlxuICogIyBUaGUgUHJvbWlzZSBBUElcbiAqXG4gKiBBIG5ldyBwcm9taXNlIGluc3RhbmNlIGlzIGNyZWF0ZWQgd2hlbiBhIGRlZmVycmVkIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIGNhbiBiZSByZXRyaWV2ZWQgYnlcbiAqIGNhbGxpbmcgYGRlZmVycmVkLnByb21pc2VgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBwcm9taXNlIG9iamVjdCBpcyB0byBhbGxvdyBmb3IgaW50ZXJlc3RlZCBwYXJ0aWVzIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHJlc3VsdFxuICogb2YgdGhlIGRlZmVycmVkIHRhc2sgd2hlbiBpdCBjb21wbGV0ZXMuXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgW2Vycm9yQ2FsbGJhY2tdLCBbbm90aWZ5Q2FsbGJhY2tdKWAg4oCTIHJlZ2FyZGxlc3Mgb2Ygd2hlbiB0aGUgcHJvbWlzZSB3YXMgb3JcbiAqICAgd2lsbCBiZSByZXNvbHZlZCBvciByZWplY3RlZCwgYHRoZW5gIGNhbGxzIG9uZSBvZiB0aGUgc3VjY2VzcyBvciBlcnJvciBjYWxsYmFja3MgYXN5bmNocm9ub3VzbHlcbiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHRcbiAqICAgb3IgcmVqZWN0aW9uIHJlYXNvbi4gQWRkaXRpb25hbGx5LCB0aGUgbm90aWZ5IGNhbGxiYWNrIG1heSBiZSBjYWxsZWQgemVybyBvciBtb3JlIHRpbWVzIHRvXG4gKiAgIHByb3ZpZGUgYSBwcm9ncmVzcyBpbmRpY2F0aW9uLCBiZWZvcmUgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogICBUaGlzIG1ldGhvZCAqcmV0dXJucyBhIG5ldyBwcm9taXNlKiB3aGljaCBpcyByZXNvbHZlZCBvciByZWplY3RlZCB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGVcbiAqICAgYHN1Y2Nlc3NDYWxsYmFja2AsIGBlcnJvckNhbGxiYWNrYCAodW5sZXNzIHRoYXQgdmFsdWUgaXMgYSBwcm9taXNlLCBpbiB3aGljaCBjYXNlIGl0IGlzIHJlc29sdmVkXG4gKiAgIHdpdGggdGhlIHZhbHVlIHdoaWNoIGlzIHJlc29sdmVkIGluIHRoYXQgcHJvbWlzZSB1c2luZ1xuICogICBbcHJvbWlzZSBjaGFpbmluZ10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZXM2L3Byb21pc2VzLyN0b2MtcHJvbWlzZXMtcXVldWVzKSkuXG4gKiAgIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBub3RpZnlDYWxsYmFja2AgbWV0aG9kLiBUaGUgcHJvbWlzZSBjYW5ub3QgYmVcbiAqICAgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sgbWV0aG9kLiBUaGUgZXJyb3JDYWxsYmFjayBhbmQgbm90aWZ5Q2FsbGJhY2tcbiAqICAgYXJndW1lbnRzIGFyZSBvcHRpb25hbC5cbiAqXG4gKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAg4oCTIHNob3J0aGFuZCBmb3IgYHByb21pc2UudGhlbihudWxsLCBlcnJvckNhbGxiYWNrKWBcbiAqXG4gKiAtIGBmaW5hbGx5KGNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyBhbGxvd3MgeW91IHRvIG9ic2VydmUgZWl0aGVyIHRoZSBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gb2YgYSBwcm9taXNlLFxuICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lXG4gKiAgIGNsZWFuLXVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGV0aGVyIHRoZSBwcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gU2VlIHRoZSBbZnVsbFxuICogICBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3Evd2lraS9BUEktUmVmZXJlbmNlI3Byb21pc2VmaW5hbGx5Y2FsbGJhY2spIGZvclxuICogICBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICMgQ2hhaW5pbmcgcHJvbWlzZXNcbiAqXG4gKiBCZWNhdXNlIGNhbGxpbmcgdGhlIGB0aGVuYCBtZXRob2Qgb2YgYSBwcm9taXNlIHJldHVybnMgYSBuZXcgZGVyaXZlZCBwcm9taXNlLCBpdCBpcyBlYXNpbHlcbiAqIHBvc3NpYmxlIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAqICAgICByZXR1cm4gcmVzdWx0ICsgMTtcbiAqICAgfSk7XG4gKlxuICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdHMgdmFsdWVcbiAqICAgLy8gd2lsbCBiZSB0aGUgcmVzdWx0IG9mIHByb21pc2VBIGluY3JlbWVudGVkIGJ5IDFcbiAqIGBgYFxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGFpbnMgb2YgYW55IGxlbmd0aCBhbmQgc2luY2UgYSBwcm9taXNlIGNhbiBiZSByZXNvbHZlZCB3aXRoIGFub3RoZXJcbiAqIHByb21pc2UgKHdoaWNoIHdpbGwgZGVmZXIgaXRzIHJlc29sdXRpb24gZnVydGhlciksIGl0IGlzIHBvc3NpYmxlIHRvIHBhdXNlL2RlZmVyIHJlc29sdXRpb24gb2ZcbiAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBBUElzIGxpa2VcbiAqICRodHRwJ3MgcmVzcG9uc2UgaW50ZXJjZXB0b3JzLlxuICpcbiAqXG4gKiAjIERpZmZlcmVuY2VzIGJldHdlZW4gS3JpcyBLb3dhbCdzIFEgYW5kICRxXG4gKlxuICogIFRoZXJlIGFyZSB0d28gbWFpbiBkaWZmZXJlbmNlczpcbiAqXG4gKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uXG4gKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyXG4gKiAgIG1vZGVscyBhbmQgYXZvaWRpbmcgdW5uZWNlc3NhcnkgYnJvd3NlciByZXBhaW50cywgd2hpY2ggd291bGQgcmVzdWx0IGluIGZsaWNrZXJpbmcgVUkuXG4gKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWluc1xuICogICBhbGwgdGhlIGltcG9ydGFudCBmdW5jdGlvbmFsaXR5IG5lZWRlZCBmb3IgY29tbW9uIGFzeW5jIHRhc2tzLlxuICpcbiAqICMgVGVzdGluZ1xuICpcbiAqICBgYGBqc1xuICogICAgaXQoJ3Nob3VsZCBzaW11bGF0ZSBwcm9taXNlJywgaW5qZWN0KGZ1bmN0aW9uKCRxLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgICAgdmFyIHJlc29sdmVkVmFsdWU7XG4gKlxuICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTtcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvQmVVbmRlZmluZWQoKTtcbiAqXG4gKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlXG4gKiAgICAgIGRlZmVycmVkLnJlc29sdmUoMTIzKTtcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdFxuICogICAgICAvLyBpdCBnb3QgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3IgYXN5bmNocm9ub3VzbHkuXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBQcm9wYWdhdGUgcHJvbWlzZSByZXNvbHV0aW9uIHRvICd0aGVuJyBmdW5jdGlvbnMgdXNpbmcgJGFwcGx5KCkuXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7XG4gKiAgICB9KSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbiwgZnVuY3Rpb24pfSByZXNvbHZlciBGdW5jdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIG9yXG4gKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gKiAgIHByb21pc2UsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAqL1xuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRxUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7XG4gIHZhciBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgIH0sICRleGNlcHRpb25IYW5kbGVyLCBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyk7XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxUHJvdmlkZXIjZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnNcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgd2hldGhlciB0byBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpcyBub3QgaGFuZGxlZC5cbiAgICogVGhpcyBmZWF0dXJlIGlzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgV2hldGhlciB0byBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpcyBub3QgaGFuZGxlZC5cbiAgICogQHJldHVybnMge2Jvb2xlYW58bmcuJHFQcm92aWRlcn0gQ3VycmVudCB2YWx1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IGEgbmV3IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucztcbiAgICB9XG4gIH07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7XG4gIHZhciBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkYnJvd3NlciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlciwgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMpO1xuICB9XTtcblxuICB0aGlzLmVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnM7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIG1hbmFnZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbil9IG5leHRUaWNrIEZ1bmN0aW9uIGZvciBleGVjdXRpbmcgZnVuY3Rpb25zIGluIHRoZSBuZXh0IHR1cm4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBleGNlcHRpb25IYW5kbGVyIEZ1bmN0aW9uIGludG8gd2hpY2ggdW5leHBlY3RlZCBleGNlcHRpb25zIGFyZSBwYXNzZWQgZm9yXG4gKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLlxuIEAgcGFyYW0gez1ib29sZWFufSBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyBXaGV0aGVyIGFuIGVycm9yIHNob3VsZCBiZSBnZW5lcmF0ZWQgb24gdW5oYW5kbGVkXG4gKiAgICAgcHJvbWlzZXMgcmVqZWN0aW9ucy5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFByb21pc2UgbWFuYWdlci5cbiAqL1xuZnVuY3Rpb24gcUZhY3RvcnkobmV4dFRpY2ssIGV4Y2VwdGlvbkhhbmRsZXIsIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zKSB7XG4gIHZhciAkcU1pbkVyciA9IG1pbkVycignJHEnLCBUeXBlRXJyb3IpO1xuICB2YXIgcXVldWVTaXplID0gMDtcbiAgdmFyIGNoZWNrUXVldWUgPSBbXTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZy4kcSNkZWZlclxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIGBEZWZlcnJlZGAgb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgYSB0YXNrIHdoaWNoIHdpbGwgZmluaXNoIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZC5cbiAgICovXG4gIGZ1bmN0aW9uIGRlZmVyKCkge1xuICAgIHJldHVybiBuZXcgRGVmZXJyZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERlZmVycmVkKCkge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKTtcbiAgICAvL05vbiBwcm90b3R5cGUgbWV0aG9kcyBuZWNlc3NhcnkgdG8gc3VwcG9ydCB1bmJvdW5kIGV4ZWN1dGlvbiA6L1xuICAgIHRoaXMucmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbCkgeyByZXNvbHZlUHJvbWlzZShwcm9taXNlLCB2YWwpOyB9O1xuICAgIHRoaXMucmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7IHJlamVjdFByb21pc2UocHJvbWlzZSwgcmVhc29uKTsgfTtcbiAgICB0aGlzLm5vdGlmeSA9IGZ1bmN0aW9uKHByb2dyZXNzKSB7IG5vdGlmeVByb21pc2UocHJvbWlzZSwgcHJvZ3Jlc3MpOyB9O1xuICB9XG5cblxuICBmdW5jdGlvbiBQcm9taXNlKCkge1xuICAgIHRoaXMuJCRzdGF0ZSA9IHsgc3RhdHVzOiAwIH07XG4gIH1cblxuICBleHRlbmQoUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICB0aGVuOiBmdW5jdGlvbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvZ3Jlc3NCYWNrKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQob25GdWxmaWxsZWQpICYmIGlzVW5kZWZpbmVkKG9uUmVqZWN0ZWQpICYmIGlzVW5kZWZpbmVkKHByb2dyZXNzQmFjaykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKTtcblxuICAgICAgdGhpcy4kJHN0YXRlLnBlbmRpbmcgPSB0aGlzLiQkc3RhdGUucGVuZGluZyB8fCBbXTtcbiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nLnB1c2goW3Jlc3VsdCwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFja10pO1xuICAgICAgaWYgKHRoaXMuJCRzdGF0ZS5zdGF0dXMgPiAwKSBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLiQkc3RhdGUpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAnY2F0Y2gnOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgICdmaW5hbGx5JzogZnVuY3Rpb24oY2FsbGJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHJlc29sdmUsIGNhbGxiYWNrKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhlcnJvciwgcmVqZWN0LCBjYWxsYmFjayk7XG4gICAgICB9LCBwcm9ncmVzc0JhY2spO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKHN0YXRlKSB7XG4gICAgdmFyIGZuLCBwcm9taXNlLCBwZW5kaW5nO1xuXG4gICAgcGVuZGluZyA9IHN0YXRlLnBlbmRpbmc7XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHN0YXRlLnBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBlbmRpbmcubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICBzdGF0ZS5wdXIgPSB0cnVlO1xuICAgICAgICBwcm9taXNlID0gcGVuZGluZ1tpXVswXTtcbiAgICAgICAgZm4gPSBwZW5kaW5nW2ldW3N0YXRlLnN0YXR1c107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBmbihzdGF0ZS52YWx1ZSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc3RhdHVzID09PSAxKSB7XG4gICAgICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdFByb21pc2UocHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdFByb21pc2UocHJvbWlzZSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLS1xdWV1ZVNpemU7XG4gICAgICBpZiAoZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgJiYgcXVldWVTaXplID09PSAwKSB7XG4gICAgICAgIG5leHRUaWNrKHByb2Nlc3NDaGVja3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NDaGVja3MoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVubW9kaWZpZWQtbG9vcC1jb25kaXRpb25cbiAgICB3aGlsZSAoIXF1ZXVlU2l6ZSAmJiBjaGVja1F1ZXVlLmxlbmd0aCkge1xuICAgICAgdmFyIHRvQ2hlY2sgPSBjaGVja1F1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAoIXRvQ2hlY2sucHVyKSB7XG4gICAgICAgIHRvQ2hlY2sucHVyID0gdHJ1ZTtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9ICdQb3NzaWJseSB1bmhhbmRsZWQgcmVqZWN0aW9uOiAnICsgdG9EZWJ1Z1N0cmluZyh0b0NoZWNrLnZhbHVlKTtcbiAgICAgICAgaWYgKHRvQ2hlY2sudmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIodG9DaGVjay52YWx1ZSwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIGlmIChlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyAmJiAhc3RhdGUucGVuZGluZyAmJiBzdGF0ZS5zdGF0dXMgPT09IDIgJiYgIXN0YXRlLnB1cikge1xuICAgICAgaWYgKHF1ZXVlU2l6ZSA9PT0gMCAmJiBjaGVja1F1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0VGljayhwcm9jZXNzQ2hlY2tzKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrUXVldWUucHVzaChzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkIHx8ICFzdGF0ZS5wZW5kaW5nKSByZXR1cm47XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgKytxdWV1ZVNpemU7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7IHByb2Nlc3NRdWV1ZShzdGF0ZSk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKSB7XG4gICAgaWYgKHByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICBpZiAodmFsID09PSBwcm9taXNlKSB7XG4gICAgICAkJHJlamVjdChwcm9taXNlLCAkcU1pbkVycihcbiAgICAgICAgJ3FjeWNsZScsXG4gICAgICAgICdFeHBlY3RlZCBwcm9taXNlIHRvIGJlIHJlc29sdmVkIHdpdGggdmFsdWUgb3RoZXIgdGhhbiBpdHNlbGYgXFwnezB9XFwnJyxcbiAgICAgICAgdmFsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gJCRyZXNvbHZlKHByb21pc2UsIHZhbCkge1xuICAgIHZhciB0aGVuO1xuICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc09iamVjdCh2YWwpIHx8IGlzRnVuY3Rpb24odmFsKSkgdGhlbiA9IHZhbC50aGVuO1xuICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgcHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IC0xO1xuICAgICAgICB0aGVuLmNhbGwodmFsLCBkb1Jlc29sdmUsIGRvUmVqZWN0LCBkb05vdGlmeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlLiQkc3RhdGUudmFsdWUgPSB2YWw7XG4gICAgICAgIHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAxO1xuICAgICAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZShwcm9taXNlLiQkc3RhdGUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRvUmVqZWN0KGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvUmVzb2x2ZSh2YWwpIHtcbiAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkb1JlamVjdCh2YWwpIHtcbiAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICQkcmVqZWN0KHByb21pc2UsIHZhbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRvTm90aWZ5KHByb2dyZXNzKSB7XG4gICAgICBub3RpZnlQcm9taXNlKHByb21pc2UsIHByb2dyZXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbikge1xuICAgIGlmIChwcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47XG4gICAgJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uICQkcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICAgIHByb21pc2UuJCRzdGF0ZS52YWx1ZSA9IHJlYXNvbjtcbiAgICBwcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gMjtcbiAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZShwcm9taXNlLiQkc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5UHJvbWlzZShwcm9taXNlLCBwcm9ncmVzcykge1xuICAgIHZhciBjYWxsYmFja3MgPSBwcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgIGlmICgocHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA8PSAwKSAmJiBjYWxsYmFja3MgJiYgY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjYWxsYmFjaywgcmVzdWx0O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVszXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbm90aWZ5UHJvbWlzZShyZXN1bHQsIGlzRnVuY3Rpb24oY2FsbGJhY2spID8gY2FsbGJhY2socHJvZ3Jlc3MpIDogcHJvZ3Jlc3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyZWplY3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmVcbiAgICogdXNlZCB0byBmb3J3YXJkIHJlamVjdGlvbiBpbiBhIGNoYWluIG9mIHByb21pc2VzLiBJZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgbGFzdCBwcm9taXNlIGluXG4gICAqIGEgcHJvbWlzZSBjaGFpbiwgeW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgaXQuXG4gICAqXG4gICAqIFdoZW4gY29tcGFyaW5nIGRlZmVycmVkcy9wcm9taXNlcyB0byB0aGUgZmFtaWxpYXIgYmVoYXZpb3Igb2YgdHJ5L2NhdGNoL3Rocm93LCB0aGluayBvZlxuICAgKiBgcmVqZWN0YCBhcyB0aGUgYHRocm93YCBrZXl3b3JkIGluIEphdmFTY3JpcHQuIFRoaXMgYWxzbyBtZWFucyB0aGF0IGlmIHlvdSBcImNhdGNoXCIgYW4gZXJyb3IgdmlhXG4gICAqIGEgcHJvbWlzZSBlcnJvciBjYWxsYmFjayBhbmQgeW91IHdhbnQgdG8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHByb21pc2UgZGVyaXZlZCBmcm9tIHRoZVxuICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvIFwicmV0aHJvd1wiIHRoZSBlcnJvciBieSByZXR1cm5pbmcgYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhXG4gICAqIGByZWplY3RgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICogICAgIC8vIHN1Y2Nlc3M6IGRvIHNvbWV0aGluZyBhbmQgcmVzb2x2ZSBwcm9taXNlQlxuICAgKiAgICAgLy8gICAgICAgICAgd2l0aCB0aGUgb2xkIG9yIGEgbmV3IHJlc3VsdFxuICAgKiAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICogICAgIC8vIGVycm9yOiBoYW5kbGUgdGhlIGVycm9yIGlmIHBvc3NpYmxlIGFuZFxuICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSxcbiAgICogICAgIC8vICAgICAgICBvdGhlcndpc2UgZm9yd2FyZCB0aGUgcmVqZWN0aW9uIHRvIHByb21pc2VCXG4gICAqICAgICBpZiAoY2FuSGFuZGxlKHJlYXNvbikpIHtcbiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyXG4gICAqICAgICAgcmV0dXJuIG5ld1Byb21pc2VPclZhbHVlO1xuICAgKiAgICAgfVxuICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsqfSByZWFzb24gQ29uc3RhbnQsIG1lc3NhZ2UsIGV4Y2VwdGlvbiBvciBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWplY3Rpb24gcmVhc29uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3YXMgYWxyZWFkeSByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBgcmVhc29uYC5cbiAgICovXG4gIGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKTtcbiAgICByZWplY3RQcm9taXNlKHJlc3VsdCwgcmVhc29uKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHJlc29sdmVyLCBjYWxsYmFjaykge1xuICAgIHZhciBjYWxsYmFja091dHB1dCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkgY2FsbGJhY2tPdXRwdXQgPSBjYWxsYmFjaygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiByZWplY3QoZSk7XG4gICAgfVxuICAgIGlmIChpc1Byb21pc2VMaWtlKGNhbGxiYWNrT3V0cHV0KSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlcih2YWx1ZSk7XG4gICAgICB9LCByZWplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZXIodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3doZW5cbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCBtaWdodCBvciBtaWdodCBub3QgYmUgYSBwcm9taXNlLCBvciBpZlxuICAgKiB0aGUgcHJvbWlzZSBjb21lcyBmcm9tIGEgc291cmNlIHRoYXQgY2FuJ3QgYmUgdHJ1c3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gd2hlbih2YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgIHZhciByZXN1bHQgPSBuZXcgUHJvbWlzZSgpO1xuICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgdmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQudGhlbihjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NCYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3Jlc29sdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsaWFzIG9mIHtAbGluayBuZy4kcSN3aGVuIHdoZW59IHRvIG1haW50YWluIG5hbWluZyBjb25zaXN0ZW5jeSB3aXRoIEVTNi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuICB2YXIgcmVzb2x2ZSA9IHdoZW47XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjYWxsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21iaW5lcyBtdWx0aXBsZSBwcm9taXNlcyBpbnRvIGEgc2luZ2xlIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFsbCBvZiB0aGUgaW5wdXRcbiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPnxPYmplY3QuPFByb21pc2U+fSBwcm9taXNlcyBBbiBhcnJheSBvciBoYXNoIG9mIHByb21pc2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLFxuICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC5cbiAgICogICBJZiBhbnkgb2YgdGhlIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24sIHRoaXMgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJlc3VsdHMgPSBpc0FycmF5KHByb21pc2VzKSA/IFtdIDoge307XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlLCBrZXkpIHtcbiAgICAgIGNvdW50ZXIrKztcbiAgICAgIHdoZW4ocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKCEoLS1jb3VudGVyKSkgcmVzb2x2ZVByb21pc2UocmVzdWx0LCByZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICByZWplY3RQcm9taXNlKHJlc3VsdCwgcmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvdW50ZXIgPT09IDApIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgcmVzdWx0cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3JhY2VcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb3IgcmVqZWN0cyBhcyBzb29uIGFzIG9uZSBvZiB0aG9zZSBwcm9taXNlc1xuICAgKiByZXNvbHZlcyBvciByZWplY3RzLCB3aXRoIHRoZSB2YWx1ZSBvciByZWFzb24gZnJvbSB0aGF0IHByb21pc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPFByb21pc2U+fE9iamVjdC48UHJvbWlzZT59IHByb21pc2VzIEFuIGFycmF5IG9yIGhhc2ggb2YgcHJvbWlzZXMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBvciByZWplY3RzIGFzIHNvb24gYXMgb25lIG9mIHRoZSBgcHJvbWlzZXNgXG4gICAqIHJlc29sdmVzIG9yIHJlamVjdHMsIHdpdGggdGhlIHZhbHVlIG9yIHJlYXNvbiBmcm9tIHRoYXQgcHJvbWlzZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gcmFjZShwcm9taXNlcykge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICB3aGVuKHByb21pc2UpLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gJFEocmVzb2x2ZXIpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsICdFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgXFwnezB9XFwnJywgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdEZuKHJlYXNvbikge1xuICAgICAgcmVqZWN0UHJvbWlzZShwcm9taXNlLCByZWFzb24pO1xuICAgIH1cblxuICAgIHJlc29sdmVyKHJlc29sdmVGbiwgcmVqZWN0Rm4pO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvLyBMZXQncyBtYWtlIHRoZSBpbnN0YW5jZW9mIG9wZXJhdG9yIHdvcmsgZm9yIHByb21pc2VzLCBzbyB0aGF0XG4gIC8vIGBuZXcgJHEoZm4pIGluc3RhbmNlb2YgJHFgIHdvdWxkIGV2YWx1YXRlIHRvIHRydWUuXG4gICRRLnByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlO1xuXG4gICRRLmRlZmVyID0gZGVmZXI7XG4gICRRLnJlamVjdCA9IHJlamVjdDtcbiAgJFEud2hlbiA9IHdoZW47XG4gICRRLnJlc29sdmUgPSByZXNvbHZlO1xuICAkUS5hbGwgPSBhbGw7XG4gICRRLnJhY2UgPSByYWNlO1xuXG4gIHJldHVybiAkUTtcbn1cblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkJFJBRlByb3ZpZGVyKCkgeyAvL3JBRlxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkd2luZG93LCAkdGltZW91dCkge1xuICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgIHZhciBjYW5jZWxBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgcmFmU3VwcG9ydGVkID0gISFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIHJhZiA9IHJhZlN1cHBvcnRlZFxuICAgICAgPyBmdW5jdGlvbihmbikge1xuICAgICAgICAgIHZhciBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB2YXIgdGltZXIgPSAkdGltZW91dChmbiwgMTYuNjYsIGZhbHNlKTsgLy8gMTAwMCAvIDYwID0gMTYuNjY2XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVyKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgcmFmLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDtcblxuICAgIHJldHVybiByYWY7XG4gIH1dO1xufVxuXG4vKipcbiAqIERFU0lHTiBOT1RFU1xuICpcbiAqIFRoZSBkZXNpZ24gZGVjaXNpb25zIGJlaGluZCB0aGUgc2NvcGUgYXJlIGhlYXZpbHkgZmF2b3JlZCBmb3Igc3BlZWQgYW5kIG1lbW9yeSBjb25zdW1wdGlvbi5cbiAqXG4gKiBUaGUgdHlwaWNhbCB1c2Ugb2Ygc2NvcGUgaXMgdG8gd2F0Y2ggdGhlIGV4cHJlc3Npb25zLCB3aGljaCBtb3N0IG9mIHRoZSB0aW1lIHJldHVybiB0aGUgc2FtZVxuICogdmFsdWUgYXMgbGFzdCB0aW1lIHNvIHdlIG9wdGltaXplIHRoZSBvcGVyYXRpb24uXG4gKlxuICogQ2xvc3VyZXMgY29uc3RydWN0aW9uIGlzIGV4cGVuc2l2ZSBpbiB0ZXJtcyBvZiBzcGVlZCBhcyB3ZWxsIGFzIG1lbW9yeTpcbiAqICAgLSBObyBjbG9zdXJlcywgaW5zdGVhZCB1c2UgcHJvdG90eXBpY2FsIGluaGVyaXRhbmNlIGZvciBBUElcbiAqICAgLSBJbnRlcm5hbCBzdGF0ZSBuZWVkcyB0byBiZSBzdG9yZWQgb24gc2NvcGUgZGlyZWN0bHksIHdoaWNoIG1lYW5zIHRoYXQgcHJpdmF0ZSBzdGF0ZSBpc1xuICogICAgIGV4cG9zZWQgYXMgJCRfX19fIHByb3BlcnRpZXNcbiAqXG4gKiBMb29wIG9wZXJhdGlvbnMgYXJlIG9wdGltaXplZCBieSB1c2luZyB3aGlsZShjb3VudC0tKSB7IC4uLiB9XG4gKiAgIC0gVGhpcyBtZWFucyB0aGF0IGluIG9yZGVyIHRvIGtlZXAgdGhlIHNhbWUgb3JkZXIgb2YgZXhlY3V0aW9uIGFzIGFkZGl0aW9uIHdlIGhhdmUgdG8gYWRkXG4gKiAgICAgaXRlbXMgdG8gdGhlIGFycmF5IGF0IHRoZSBiZWdpbm5pbmcgKHVuc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaClcbiAqXG4gKiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgYW5kIHJlbW92ZWQgb2Z0ZW5cbiAqICAgLSBVc2luZyBhbiBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gdGhlIG1pZGRsZSBhcmUgZXhwZW5zaXZlOyBzbyB3ZSB1c2UgbGlua2VkIGxpc3RzXG4gKlxuICogVGhlcmUgYXJlIGZld2VyIHdhdGNoZXMgdGhhbiBvYnNlcnZlcnMuIFRoaXMgaXMgd2h5IHlvdSBkb24ndCB3YW50IHRoZSBvYnNlcnZlciB0byBiZSBpbXBsZW1lbnRlZFxuICogaW4gdGhlIHNhbWUgd2F5IGFzIHdhdGNoLiBXYXRjaCByZXF1aXJlcyByZXR1cm4gb2YgdGhlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIGV4cGVuc2l2ZVxuICogdG8gY29uc3RydWN0LlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRyb290U2NvcGVQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUHJvdmlkZXIgZm9yIHRoZSAkcm9vdFNjb3BlIHNlcnZpY2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXIjZGlnZXN0VHRsXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBudW1iZXIgb2YgYCRkaWdlc3RgIGl0ZXJhdGlvbnMgdGhlIHNjb3BlIHNob3VsZCBhdHRlbXB0IHRvIGV4ZWN1dGUgYmVmb3JlIGdpdmluZyB1cCBhbmRcbiAqIGFzc3VtaW5nIHRoYXQgdGhlIG1vZGVsIGlzIHVuc3RhYmxlLlxuICpcbiAqIFRoZSBjdXJyZW50IGRlZmF1bHQgaXMgMTAgaXRlcmF0aW9ucy5cbiAqXG4gKiBJbiBjb21wbGV4IGFwcGxpY2F0aW9ucyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGRlcGVuZGVuY2llcyBiZXR3ZWVuIGAkd2F0Y2hgcyB3aWxsIHJlc3VsdCBpblxuICogc2V2ZXJhbCBkaWdlc3QgaXRlcmF0aW9ucy4gSG93ZXZlciBpZiBhbiBhcHBsaWNhdGlvbiBuZWVkcyBtb3JlIHRoYW4gdGhlIGRlZmF1bHQgMTAgZGlnZXN0XG4gKiBpdGVyYXRpb25zIGZvciBpdHMgbW9kZWwgdG8gc3RhYmlsaXplIHRoZW4geW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB3aGF0IGlzIGNhdXNpbmcgdGhlIG1vZGVsIHRvXG4gKiBjb250aW51b3VzbHkgY2hhbmdlIGR1cmluZyB0aGUgZGlnZXN0LlxuICpcbiAqIEluY3JlYXNpbmcgdGhlIFRUTCBjb3VsZCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucywgc28geW91IHNob3VsZCBub3QgY2hhbmdlIGl0IHdpdGhvdXRcbiAqIHByb3BlciBqdXN0aWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGRpZ2VzdCBpdGVyYXRpb25zLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHJvb3RTY29wZVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFdmVyeSBhcHBsaWNhdGlvbiBoYXMgYSBzaW5nbGUgcm9vdCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBkZXNjZW5kYW50IHNjb3BlcyBvZiB0aGUgcm9vdCBzY29wZS4gU2NvcGVzIHByb3ZpZGUgc2VwYXJhdGlvblxuICogYmV0d2VlbiB0aGUgbW9kZWwgYW5kIHRoZSB2aWV3LCB2aWEgYSBtZWNoYW5pc20gZm9yIHdhdGNoaW5nIHRoZSBtb2RlbCBmb3IgY2hhbmdlcy5cbiAqIFRoZXkgYWxzbyBwcm92aWRlIGV2ZW50IGVtaXNzaW9uL2Jyb2FkY2FzdCBhbmQgc3Vic2NyaXB0aW9uIGZhY2lsaXR5LiBTZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uXG4gKi9cbmZ1bmN0aW9uICRSb290U2NvcGVQcm92aWRlcigpIHtcbiAgdmFyIFRUTCA9IDEwO1xuICB2YXIgJHJvb3RTY29wZU1pbkVyciA9IG1pbkVycignJHJvb3RTY29wZScpO1xuICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICB2YXIgYXBwbHlBc3luY0lkID0gbnVsbDtcblxuICB0aGlzLmRpZ2VzdFR0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFRUTCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gVFRMO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2NvcGVDbGFzcyhwYXJlbnQpIHtcbiAgICBmdW5jdGlvbiBDaGlsZFNjb3BlKCkge1xuICAgICAgdGhpcy4kJHdhdGNoZXJzID0gdGhpcy4kJG5leHRTaWJsaW5nID1cbiAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kaWQgPSBuZXh0VWlkKCk7XG4gICAgICB0aGlzLiQkQ2hpbGRTY29wZSA9IG51bGw7XG4gICAgfVxuICAgIENoaWxkU2NvcGUucHJvdG90eXBlID0gcGFyZW50O1xuICAgIHJldHVybiBDaGlsZFNjb3BlO1xuICB9XG5cbiAgdGhpcy4kZ2V0ID0gWyckZXhjZXB0aW9uSGFuZGxlcicsICckcGFyc2UnLCAnJGJyb3dzZXInLFxuICAgICAgZnVuY3Rpb24oJGV4Y2VwdGlvbkhhbmRsZXIsICRwYXJzZSwgJGJyb3dzZXIpIHtcblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3lDaGlsZFNjb3BlKCRldmVudCkge1xuICAgICAgICAkZXZlbnQuY3VycmVudFNjb3BlLiQkZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhblVwU2NvcGUoJHNjb3BlKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IElFIDkgb25seVxuICAgICAgaWYgKG1zaWUgPT09IDkpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgYSBtZW1vcnkgbGVhayBpbiBJRTkgaWYgYWxsIGNoaWxkIHNjb3BlcyBhcmUgbm90IGRpc2Nvbm5lY3RlZFxuICAgICAgICAvLyBjb21wbGV0ZWx5IHdoZW4gYSBzY29wZSBpcyBkZXN0cm95ZWQuIFNvIHRoaXMgY29kZSB3aWxsIHJlY3Vyc2UgdXAgdGhyb3VnaFxuICAgICAgICAvLyBhbGwgdGhpcyBzY29wZXMgY2hpbGRyZW5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gU2VlIGlzc3VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEwNzA2XG4gICAgICAgIGlmICgkc2NvcGUuJCRjaGlsZEhlYWQpIHtcbiAgICAgICAgICBjbGVhblVwU2NvcGUoJHNjb3BlLiQkY2hpbGRIZWFkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHNjb3BlLiQkbmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICBjbGVhblVwU2NvcGUoJHNjb3BlLiQkbmV4dFNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb2RlIGJlbG93IHdvcmtzIGFyb3VuZCBJRTkgYW5kIFY4J3MgbWVtb3J5IGxlYWtzXG4gICAgICAvL1xuICAgICAgLy8gU2VlOlxuICAgICAgLy8gLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MyNjMjZcbiAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNjc5NCNpc3N1ZWNvbW1lbnQtMzg2NDg5MDlcbiAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTFcblxuICAgICAgJHNjb3BlLiRwYXJlbnQgPSAkc2NvcGUuJCRuZXh0U2libGluZyA9ICRzY29wZS4kJHByZXZTaWJsaW5nID0gJHNjb3BlLiQkY2hpbGRIZWFkID1cbiAgICAgICAgICAkc2NvcGUuJCRjaGlsZFRhaWwgPSAkc2NvcGUuJHJvb3QgPSAkc2NvcGUuJCR3YXRjaGVycyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHR5cGVcbiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIHJvb3Qgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUgJHJvb3RTY29wZX0ga2V5IGZyb20gdGhlXG4gICAgICoge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIENoaWxkIHNjb3BlcyBhcmUgY3JlYXRlZCB1c2luZyB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3ICRuZXcoKX0gbWV0aG9kLiAoTW9zdCBzY29wZXMgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSB3aGVuXG4gICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pIFNlZSBhbHNvIHRoZSB7QGxpbmsgZ3VpZGUvc2NvcGUgU2NvcGVzIGd1aWRlfSBmb3JcbiAgICAgKiBhbiBpbi1kZXB0aCBpbnRyb2R1Y3Rpb24gYW5kIHVzYWdlIGV4YW1wbGVzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIEluaGVyaXRhbmNlXG4gICAgICogQSBzY29wZSBjYW4gaW5oZXJpdCBmcm9tIGEgcGFyZW50IHNjb3BlLCBhcyBpbiB0aGlzIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgICAgIHZhciBwYXJlbnQgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcoKTtcblxuICAgICAgICAgcGFyZW50LnNhbHV0YXRpb24gPSBcIkhlbGxvXCI7XG4gICAgICAgICBleHBlY3QoY2hpbGQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcblxuICAgICAgICAgY2hpbGQuc2FsdXRhdGlvbiA9IFwiV2VsY29tZVwiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ1dlbGNvbWUnKTtcbiAgICAgICAgIGV4cGVjdChwYXJlbnQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBgU2NvcGVgIGluIHRlc3RzLCBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIGFyZSBhdmFpbGFibGUgb24gdGhlXG4gICAgICogaW5zdGFuY2VzIG9mIGBTY29wZWAgdHlwZS4gU2VlIHtAbGluayBuZ01vY2suJHJvb3RTY29wZS5TY29wZSBuZ01vY2sgU2NvcGV9IGZvciBhZGRpdGlvbmFsXG4gICAgICogZGV0YWlscy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24oKT49fSBwcm92aWRlcnMgTWFwIG9mIHNlcnZpY2UgZmFjdG9yeSB3aGljaCBuZWVkIHRvIGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj49fSBpbnN0YW5jZUNhY2hlIFByb3ZpZGVzIHByZS1pbnN0YW50aWF0ZWQgc2VydmljZXMgd2hpY2ggc2hvdWxkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQvb3ZlcnJpZGUgc2VydmljZXMgcHJvdmlkZWQgYnkgYHByb3ZpZGVyc2AuIFRoaXMgaXMgaGFuZHlcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdW5pdC10ZXN0aW5nIGFuZCBoYXZpbmcgdGhlIG5lZWQgdG8gb3ZlcnJpZGUgYSBkZWZhdWx0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IE5ld2x5IGNyZWF0ZWQgc2NvcGUuXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTY29wZSgpIHtcbiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgdGhpcy4kJHBoYXNlID0gdGhpcy4kcGFyZW50ID0gdGhpcy4kJHdhdGNoZXJzID1cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCRuZXh0U2libGluZyA9IHRoaXMuJCRwcmV2U2libGluZyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XG4gICAgICB0aGlzLiRyb290ID0gdGhpcztcbiAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lckNvdW50ID0ge307XG4gICAgICB0aGlzLiQkd2F0Y2hlcnNDb3VudCA9IDA7XG4gICAgICB0aGlzLiQkaXNvbGF0ZUJpbmRpbmdzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRpZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVW5pcXVlIHNjb3BlIElEIChtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcpIHVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcGFyZW50XG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBzY29wZS5cbiAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRyb290XG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHJvb3Qgc2NvcGUuXG4gICAgICAgKi9cblxuICAgIFNjb3BlLnByb3RvdHlwZSA9IHtcbiAgICAgIGNvbnN0cnVjdG9yOiBTY29wZSxcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkbmV3XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQ3JlYXRlcyBhIG5ldyBjaGlsZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gICAgICAgKlxuICAgICAgICogVGhlIHBhcmVudCBzY29wZSB3aWxsIHByb3BhZ2F0ZSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGV2ZW50LlxuICAgICAgICogVGhlIHNjb3BlIGNhbiBiZSByZW1vdmVkIGZyb20gdGhlIHNjb3BlIGhpZXJhcmNoeSB1c2luZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfS5cbiAgICAgICAqXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfSBtdXN0IGJlIGNhbGxlZCBvbiBhIHNjb3BlIHdoZW4gaXQgaXNcbiAgICAgICAqIGRlc2lyZWQgZm9yIHRoZSBzY29wZSBhbmQgaXRzIGNoaWxkIHNjb3BlcyB0byBiZSBwZXJtYW5lbnRseSBkZXRhY2hlZCBmcm9tIHRoZSBwYXJlbnQgYW5kXG4gICAgICAgKiB0aHVzIHN0b3AgcGFydGljaXBhdGluZyBpbiBtb2RlbCBjaGFuZ2UgZGV0ZWN0aW9uIGFuZCBsaXN0ZW5lciBub3RpZmljYXRpb24gYnkgaW52b2tpbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc29sYXRlIElmIHRydWUsIHRoZW4gdGhlIHNjb3BlIGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGVcbiAgICAgICAqICAgICAgICAgcGFyZW50IHNjb3BlLiBUaGUgc2NvcGUgaXMgaXNvbGF0ZWQsIGFzIGl0IGNhbiBub3Qgc2VlIHBhcmVudCBzY29wZSBwcm9wZXJ0aWVzLlxuICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMsIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50XG4gICAgICAgKiAgICAgICAgIHN0YXRlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U2NvcGV9IFtwYXJlbnQ9dGhpc10gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBTY29wZWB9IHRoYXQgd2lsbCBiZSB0aGUgYCRwYXJlbnRgXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBuZXdseSBjcmVhdGVkIHNjb3BlLiBEZWZhdWx0cyB0byBgdGhpc2Agc2NvcGUgaWYgbm90IHByb3ZpZGVkLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHVzZWQgd2hlbiBjcmVhdGluZyBhIHRyYW5zY2x1ZGUgc2NvcGUgdG8gY29ycmVjdGx5IHBsYWNlIGl0XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzY29wZSBoaWVyYXJjaHkgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGNvcnJlY3QgcHJvdG90eXBpY2FsXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSwgcGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZDtcblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgdGhpcztcblxuICAgICAgICBpZiAoaXNvbGF0ZSkge1xuICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7XG4gICAgICAgICAgY2hpbGQuJHJvb3QgPSB0aGlzLiRyb290O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE9ubHkgY3JlYXRlIGEgY2hpbGQgc2NvcGUgY2xhc3MgaWYgc29tZWJvZHkgYXNrcyBmb3Igb25lLFxuICAgICAgICAgIC8vIGJ1dCBjYWNoZSBpdCB0byBhbGxvdyB0aGUgVk0gdG8gb3B0aW1pemUgbG9va3Vwcy5cbiAgICAgICAgICBpZiAoIXRoaXMuJCRDaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLiQkQ2hpbGRTY29wZSA9IGNyZWF0ZUNoaWxkU2NvcGVDbGFzcyh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGQgPSBuZXcgdGhpcy4kJENoaWxkU2NvcGUoKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC4kcGFyZW50ID0gcGFyZW50O1xuICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gcGFyZW50LiQkY2hpbGRUYWlsO1xuICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRIZWFkKSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsLiQkbmV4dFNpYmxpbmcgPSBjaGlsZDtcbiAgICAgICAgICBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnQuJCRjaGlsZEhlYWQgPSBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGhlIG5ldyBzY29wZSBpcyBub3QgaXNvbGF0ZWQgb3Igd2UgaW5oZXJpdCBmcm9tIGB0aGlzYCwgYW5kXG4gICAgICAgIC8vIHRoZSBwYXJlbnQgc2NvcGUgaXMgZGVzdHJveWVkLCB0aGUgcHJvcGVydHkgYCQkZGVzdHJveWVkYCBpcyBpbmhlcml0ZWRcbiAgICAgICAgLy8gcHJvdG90eXBpY2FsbHkuIEluIGFsbCBvdGhlciBjYXNlcywgdGhpcyBwcm9wZXJ0eSBuZWVkcyB0byBiZSBzZXRcbiAgICAgICAgLy8gd2hlbiB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZC5cbiAgICAgICAgLy8gVGhlIGxpc3RlbmVyIG5lZWRzIHRvIGJlIGFkZGVkIGFmdGVyIHRoZSBwYXJlbnQgaXMgc2V0XG4gICAgICAgIGlmIChpc29sYXRlIHx8IHBhcmVudCAhPT0gdGhpcykgY2hpbGQuJG9uKCckZGVzdHJveScsIGRlc3Ryb3lDaGlsZFNjb3BlKTtcblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVnaXN0ZXJzIGEgYGxpc3RlbmVyYCBjYWxsYmFjayB0byBiZSBleGVjdXRlZCB3aGVuZXZlciB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XG4gICAgICAgKiAgICRkaWdlc3QoKX0gYW5kIHNob3VsZCByZXR1cm4gdGhlIHZhbHVlIHRoYXQgd2lsbCBiZSB3YXRjaGVkLiAoYHdhdGNoRXhwcmVzc2lvbmAgc2hvdWxkIG5vdCBjaGFuZ2VcbiAgICAgICAqICAgaXRzIHZhbHVlIHdoZW4gZXhlY3V0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCB0aGUgc2FtZSBpbnB1dCBiZWNhdXNlIGl0IG1heSBiZSBleGVjdXRlZCBtdWx0aXBsZVxuICAgICAgICogICB0aW1lcyBieSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0uIFRoYXQgaXMsIGB3YXRjaEV4cHJlc3Npb25gIHNob3VsZCBiZVxuICAgICAgICogICBbaWRlbXBvdGVudF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JZGVtcG90ZW5jZSkuKVxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgb25seSB3aGVuIHRoZSB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGB3YXRjaEV4cHJlc3Npb25gIGFuZCB0aGVcbiAgICAgICAqICAgcHJldmlvdXMgY2FsbCB0byBgd2F0Y2hFeHByZXNzaW9uYCBhcmUgbm90IGVxdWFsICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlIGluaXRpYWwgcnVuLFxuICAgICAgICogICBzZWUgYmVsb3cpLiBJbmVxdWFsaXR5IGlzIGRldGVybWluZWQgYWNjb3JkaW5nIHRvIHJlZmVyZW5jZSBpbmVxdWFsaXR5LFxuICAgICAgICogICBbc3RyaWN0IGNvbXBhcmlzb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Db21wYXJpc29uX09wZXJhdG9ycylcbiAgICAgICAqICAgIHZpYSB0aGUgYCE9PWAgSmF2YXNjcmlwdCBvcGVyYXRvciwgdW5sZXNzIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYFxuICAgICAgICogICAoc2VlIG5leHQgcG9pbnQpXG4gICAgICAgKiAtIFdoZW4gYG9iamVjdEVxdWFsaXR5ID09IHRydWVgLCBpbmVxdWFsaXR5IG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBkZXRlcm1pbmVkXG4gICAgICAgKiAgIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBmdW5jdGlvbi4gVG8gc2F2ZSB0aGUgdmFsdWUgb2YgdGhlIG9iamVjdCBmb3JcbiAgICAgICAqICAgbGF0ZXIgY29tcGFyaXNvbiwgdGhlIHtAbGluayBhbmd1bGFyLmNvcHl9IGZ1bmN0aW9uIGlzIHVzZWQuIFRoaXMgdGhlcmVmb3JlIG1lYW5zIHRoYXRcbiAgICAgICAqICAgd2F0Y2hpbmcgY29tcGxleCBvYmplY3RzIHdpbGwgaGF2ZSBhZHZlcnNlIG1lbW9yeSBhbmQgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLlxuICAgICAgICogLSBUaGlzIHNob3VsZCBub3QgYmUgdXNlZCB0byB3YXRjaCBmb3IgY2hhbmdlcyBpbiBvYmplY3RzIHRoYXQgYXJlXG4gICAgICAgKiAgIG9yIGNvbnRhaW4gW0ZpbGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9GaWxlKSBvYmplY3RzIGR1ZSB0byBsaW1pdGF0aW9ucyB3aXRoIHtAbGluayBhbmd1bGFyLmNvcHkgYGFuZ3VsYXIuY29weWB9LlxuICAgICAgICogLSBUaGUgd2F0Y2ggYGxpc3RlbmVyYCBtYXkgY2hhbmdlIHRoZSBtb2RlbCwgd2hpY2ggbWF5IHRyaWdnZXIgb3RoZXIgYGxpc3RlbmVyYHMgdG8gZmlyZS5cbiAgICAgICAqICAgVGhpcyBpcyBhY2hpZXZlZCBieSByZXJ1bm5pbmcgdGhlIHdhdGNoZXJzIHVudGlsIG5vIGNoYW5nZXMgYXJlIGRldGVjdGVkLiBUaGUgcmVydW5cbiAgICAgICAqICAgaXRlcmF0aW9uIGxpbWl0IGlzIDEwIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcCBkZWFkbG9jay5cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBpcyBjYWxsZWQsXG4gICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aCBubyBgbGlzdGVuZXJgLiAoQmUgcHJlcGFyZWQgZm9yXG4gICAgICAgKiBtdWx0aXBsZSBjYWxscyB0byB5b3VyIGB3YXRjaEV4cHJlc3Npb25gIGJlY2F1c2UgaXQgd2lsbCBleGVjdXRlIG11bHRpcGxlIHRpbWVzIGluIGFcbiAgICAgICAqIHNpbmdsZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlIGlmIGEgY2hhbmdlIGlzIGRldGVjdGVkLilcbiAgICAgICAqXG4gICAgICAgKiBBZnRlciBhIHdhdGNoZXIgaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBzY29wZSwgdGhlIGBsaXN0ZW5lcmAgZm4gaXMgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgKiAodmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmMgJGV2YWxBc3luY30pIHRvIGluaXRpYWxpemUgdGhlXG4gICAgICAgKiB3YXRjaGVyLiBJbiByYXJlIGNhc2VzLCB0aGlzIGlzIHVuZGVzaXJhYmxlIGJlY2F1c2UgdGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aGVuIHRoZSByZXN1bHRcbiAgICAgICAqIG9mIGB3YXRjaEV4cHJlc3Npb25gIGRpZG4ndCBjaGFuZ2UuIFRvIGRldGVjdCB0aGlzIHNjZW5hcmlvIHdpdGhpbiB0aGUgYGxpc3RlbmVyYCBmbiwgeW91XG4gICAgICAgKiBjYW4gY29tcGFyZSB0aGUgYG5ld1ZhbGAgYW5kIGBvbGRWYWxgLiBJZiB0aGVzZSB0d28gdmFsdWVzIGFyZSBpZGVudGljYWwgKGA9PT1gKSB0aGVuIHRoZVxuICAgICAgICogbGlzdGVuZXIgd2FzIGNhbGxlZCBkdWUgdG8gaW5pdGlhbGl6YXRpb24uXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIC8vIGxldCdzIGFzc3VtZSB0aGF0IHNjb3BlIHdhcyBkZXBlbmRlbmN5IGluamVjdGVkIGFzIHRoZSAkcm9vdFNjb3BlXG4gICAgICAgICAgIHZhciBzY29wZSA9ICRyb290U2NvcGU7XG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xuICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpO1xuXG5cblxuICAgICAgICAgICAvLyBVc2luZyBhIGZ1bmN0aW9uIGFzIGEgd2F0Y2hFeHByZXNzaW9uXG4gICAgICAgICAgIHZhciBmb29kO1xuICAgICAgICAgICBzY29wZS5mb29kQ291bnRlciA9IDA7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdmFsdWUgYmVpbmcgd2F0Y2hlZC4gSXQgaXMgY2FsbGVkIGZvciBlYWNoIHR1cm4gb2YgdGhlICRkaWdlc3QgbG9vcFxuICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gZm9vZDsgfSxcbiAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBjaGFuZ2UgbGlzdGVuZXIsIGNhbGxlZCB3aGVuIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBhYm92ZSBmdW5jdGlvbiBjaGFuZ2VzXG4gICAgICAgICAgICAgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICBpZiAoIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSApIHtcbiAgICAgICAgICAgICAgICAgLy8gT25seSBpbmNyZW1lbnQgdGhlIGNvdW50ZXIgaWYgdGhlIHZhbHVlIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSBzY29wZS5mb29kQ291bnRlciArIDE7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICApO1xuICAgICAgICAgICAvLyBObyBkaWdlc3QgaGFzIGJlZW4gcnVuIHNvIHRoZSBjb3VudGVyIHdpbGwgYmUgemVyb1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gUnVuIHRoZSBkaWdlc3QgYnV0IHNpbmNlIGZvb2QgaGFzIG5vdCBjaGFuZ2VkIGNvdW50IHdpbGwgc3RpbGwgYmUgemVyb1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICAvLyBVcGRhdGUgZm9vZCBhbmQgcnVuIGRpZ2VzdC4gIE5vdyB0aGUgY291bnRlciB3aWxsIGluY3JlbWVudFxuICAgICAgICAgICBmb29kID0gJ2NoZWVzZWJ1cmdlcic7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCl8c3RyaW5nKX0gd2F0Y2hFeHByZXNzaW9uIEV4cHJlc3Npb24gdGhhdCBpcyBldmFsdWF0ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQSBjaGFuZ2UgaW4gdGhlIHJldHVybiB2YWx1ZSB0cmlnZ2Vyc1xuICAgICAgICogICAgYSBjYWxsIHRvIHRoZSBgbGlzdGVuZXJgLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBgc2NvcGVgIGFzIGEgcGFyYW1ldGVyLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCwgc2NvcGUpfSBsaXN0ZW5lciBDYWxsYmFjayBjYWxsZWQgd2hlbmV2ZXIgdGhlIHZhbHVlXG4gICAgICAgKiAgICBvZiBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYG5ld1ZhbGAgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBvbGRWYWxgIGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIC0gYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtvYmplY3RFcXVhbGl0eT1mYWxzZV0gQ29tcGFyZSBmb3Igb2JqZWN0IGVxdWFsaXR5IHVzaW5nIHtAbGluayBhbmd1bGFyLmVxdWFsc30gaW5zdGVhZCBvZlxuICAgICAgICogICAgIGNvbXBhcmluZyBmb3IgcmVmZXJlbmNlIGVxdWFsaXR5LlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAqL1xuICAgICAgJHdhdGNoOiBmdW5jdGlvbih3YXRjaEV4cCwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgICAgdmFyIGdldCA9ICRwYXJzZSh3YXRjaEV4cCk7XG5cbiAgICAgICAgaWYgKGdldC4kJHdhdGNoRGVsZWdhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSh0aGlzLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIGdldCwgd2F0Y2hFeHApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMsXG4gICAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMsXG4gICAgICAgICAgICB3YXRjaGVyID0ge1xuICAgICAgICAgICAgICBmbjogbGlzdGVuZXIsXG4gICAgICAgICAgICAgIGxhc3Q6IGluaXRXYXRjaFZhbCxcbiAgICAgICAgICAgICAgZ2V0OiBnZXQsXG4gICAgICAgICAgICAgIGV4cDogcHJldHR5UHJpbnRFeHByZXNzaW9uIHx8IHdhdGNoRXhwLFxuICAgICAgICAgICAgICBlcTogISFvYmplY3RFcXVhbGl0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIHdhdGNoZXIuZm4gPSBub29wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhcnJheSkge1xuICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyA9IFtdO1xuICAgICAgICAgIGFycmF5LiQkZGlnZXN0V2F0Y2hJbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIHVzZSB1bnNoaWZ0IHNpbmNlIHdlIHVzZSBhIHdoaWxlIGxvb3AgaW4gJGRpZ2VzdCBmb3Igc3BlZWQuXG4gICAgICAgIC8vIHRoZSB3aGlsZSBsb29wIHJlYWRzIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgIGFycmF5LnVuc2hpZnQod2F0Y2hlcik7XG4gICAgICAgIGFycmF5LiQkZGlnZXN0V2F0Y2hJbmRleCsrO1xuICAgICAgICBpbmNyZW1lbnRXYXRjaGVyc0NvdW50KHRoaXMsIDEpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2goKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gYXJyYXlSZW1vdmUoYXJyYXksIHdhdGNoZXIpO1xuICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBpbmNyZW1lbnRXYXRjaGVyc0NvdW50KHNjb3BlLCAtMSk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXgpIHtcbiAgICAgICAgICAgICAgYXJyYXkuJCRkaWdlc3RXYXRjaEluZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hHcm91cFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEEgdmFyaWFudCBvZiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdoZXJlIGl0IHdhdGNoZXMgYW4gYXJyYXkgb2YgYHdhdGNoRXhwcmVzc2lvbnNgLlxuICAgICAgICogSWYgYW55IG9uZSBleHByZXNzaW9uIGluIHRoZSBjb2xsZWN0aW9uIGNoYW5nZXMgdGhlIGBsaXN0ZW5lcmAgaXMgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgaXRlbXMgaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBhcmUgb2JzZXJ2ZWQgdmlhIHRoZSBzdGFuZGFyZCBgJHdhdGNoYCBvcGVyYXRpb24uIFRoZWlyIHJldHVyblxuICAgICAgICogICB2YWx1ZXMgYXJlIGV4YW1pbmVkIGZvciBjaGFuZ2VzIG9uIGV2ZXJ5IGNhbGwgdG8gYCRkaWdlc3RgLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGV4cHJlc3Npb24gaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbihzY29wZSk+fSB3YXRjaEV4cHJlc3Npb25zIEFycmF5IG9mIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBpbmRpdmlkdWFsbHlcbiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgYW55XG4gICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzXG4gICAgICAgKiAgICBUaGUgYG5ld1ZhbHVlc2AgYXJyYXkgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICogICAgdGhvc2Ugb2YgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIFRoZSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hHcm91cDogZnVuY3Rpb24od2F0Y2hFeHByZXNzaW9ucywgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgIHZhciBuZXdWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgZGVyZWdpc3RlckZucyA9IFtdO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RSdW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghd2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBObyBleHByZXNzaW9ucyBtZWFucyB3ZSBjYWxsIHRoZSBsaXN0ZW5lciBBU0FQXG4gICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRDYWxsKSBsaXN0ZW5lcihuZXdWYWx1ZXMsIG5ld1ZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgICAgc2hvdWxkQ2FsbCA9IGZhbHNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmVcbiAgICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2god2F0Y2hFeHByZXNzaW9uc1swXSwgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbih2YWx1ZSwgb2xkVmFsdWUsIHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCAodmFsdWUgPT09IG9sZFZhbHVlKSA/IG5ld1ZhbHVlcyA6IG9sZFZhbHVlcywgc2NvcGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaCh3YXRjaEV4cHJlc3Npb25zLCBmdW5jdGlvbihleHByLCBpKSB7XG4gICAgICAgICAgdmFyIHVud2F0Y2hGbiA9IHNlbGYuJHdhdGNoKGV4cHIsIGZ1bmN0aW9uIHdhdGNoR3JvdXBTdWJBY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1tpXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyh3YXRjaEdyb3VwQWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnB1c2godW53YXRjaEZuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbigpIHtcbiAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBmaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsIG9sZFZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgIHdoaWxlIChkZXJlZ2lzdGVyRm5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVyZWdpc3RlckZucy5zaGlmdCgpKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNoYWxsb3cgd2F0Y2hlcyB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kIGZpcmVzIHdoZW5ldmVyIGFueSBvZiB0aGUgcHJvcGVydGllcyBjaGFuZ2VcbiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZ1xuICAgICAgICogdGhlIHByb3BlcnRpZXMpLiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCwgdGhlIGBsaXN0ZW5lcmAgY2FsbGJhY2sgaXMgZmlyZWQuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBoYXZlIGJlZW4gYWRkZWQsIHJlbW92ZWQsIG9yIG1vdmVkLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55dGhpbmcgd2l0aGluIHRoZSBgb2JqYCBoYXMgY2hhbmdlZC4gRXhhbXBsZXMgaW5jbHVkZVxuICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWF0aWFzJywgJ21pc2tvJywgJ2phbWVzJ107XG4gICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7XG5cbiAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXMnLCBmdW5jdGlvbihuZXdOYW1lcywgb2xkTmFtZXMpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcbiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG5cbiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZVxuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKHNjb3BlKX0gb2JqIEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4gVGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQW55IHNoYWxsb3cgY2hhbmdlIHdpdGhpbiB0aGVcbiAgICAgICAqICAgIGNvbGxlY3Rpb24gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld0NvbGxlY3Rpb24sIG9sZENvbGxlY3Rpb24sIHNjb3BlKX0gbGlzdGVuZXIgYSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcbiAgICAgICAqICAgIHdoZW4gYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuXG4gICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb25cbiAgICAgICAqICAgIC0gVGhlIGBvbGRDb2xsZWN0aW9uYCBvYmplY3QgaXMgYSBjb3B5IG9mIHRoZSBmb3JtZXIgY29sbGVjdGlvbiBkYXRhLlxuICAgICAgICogICAgICBEdWUgdG8gcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbnMsIHRoZWBvbGRDb2xsZWN0aW9uYCB2YWx1ZSBpcyBjb21wdXRlZCBvbmx5IGlmIHRoZVxuICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy5cbiAgICAgICAqICAgIC0gVGhlIGBzY29wZWAgYXJndW1lbnQgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZVxuICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcbiAgICAgICAgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yLiRzdGF0ZWZ1bCA9IHRydWU7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZSwgdXBkYXRlZCBvbiBlYWNoIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHRoZSBsYXN0IGRpcnR5LWNoZWNrIHJ1bixcbiAgICAgICAgLy8gdXBkYXRlZCB0byBtYXRjaCBuZXdWYWx1ZSBkdXJpbmcgZGlydHktY2hlY2sgcnVuXG4gICAgICAgIHZhciBvbGRWYWx1ZTtcbiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gd2hlbiB0aGUgbGFzdCBjaGFuZ2UgaGFwcGVuZWRcbiAgICAgICAgdmFyIHZlcnlPbGRWYWx1ZTtcbiAgICAgICAgLy8gb25seSB0cmFjayB2ZXJ5T2xkVmFsdWUgaWYgdGhlIGxpc3RlbmVyIGlzIGFza2luZyBmb3IgaXRcbiAgICAgICAgdmFyIHRyYWNrVmVyeU9sZFZhbHVlID0gKGxpc3RlbmVyLmxlbmd0aCA+IDEpO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0ZWQgPSAwO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdO1xuICAgICAgICB2YXIgaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDtcblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IoX3ZhbHVlKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgdmFyIG5ld0xlbmd0aCwga2V5LCBib3RoTmFOLCBuZXdJdGVtLCBvbGRJdGVtO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyB1bmRlZmluZWQsIHRoZW4gcmV0dXJuIHVuZGVmaW5lZCBhcyB0aGUgd2F0Y2ggbWF5IGJlIGEgb25lLXRpbWUgd2F0Y2hcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgeyAvLyBpZiBwcmltaXRpdmVcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gYXJyYXkgaW50byBhcnJheS5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSBuZXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldO1xuICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVbaV07XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWVbaV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxPYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gd2UgYXJlIHRyYW5zaXRpb25pbmcgZnJvbSBzb21ldGhpbmcgd2hpY2ggd2FzIG5vdCBhbiBvYmplY3QgaW50byBvYmplY3QuXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLlxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG5ld1ZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3TGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyB3ZSB1c2VkIHRvIGhhdmUgbW9yZSBrZXlzLCBuZWVkIHRvIGZpbmQgdGhlbSBhbmQgZGVzdHJveSB0aGVtLlxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkFjdGlvbigpIHtcbiAgICAgICAgICBpZiAoaW5pdFJ1bikge1xuICAgICAgICAgICAgaW5pdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIG5ld1ZhbHVlLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIHZlcnlPbGRWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbWFrZSBhIGNvcHkgZm9yIHRoZSBuZXh0IHRpbWUgYSBjb2xsZWN0aW9uIGlzIGNoYW5nZWRcbiAgICAgICAgICBpZiAodHJhY2tWZXJ5T2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghaXNPYmplY3QobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vcHJpbWl0aXZlXG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3IEFycmF5KG5ld1ZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWVbaV0gPSBuZXdWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgb2JqZWN0XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2tleV0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiR3YXRjaChjaGFuZ2VEZXRlY3RvciwgJHdhdGNoQ29sbGVjdGlvbkFjdGlvbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc30gb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kXG4gICAgICAgKiBpdHMgY2hpbGRyZW4uIEJlY2F1c2UgYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcn0ncyBsaXN0ZW5lciBjYW4gY2hhbmdlXG4gICAgICAgKiB0aGUgbW9kZWwsIHRoZSBgJGRpZ2VzdCgpYCBrZWVwcyBjYWxsaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9XG4gICAgICAgKiB1bnRpbCBubyBtb3JlIGxpc3RlbmVycyBhcmUgZmlyaW5nLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZ2V0IGludG8gYW4gaW5maW5pdGVcbiAgICAgICAqIGxvb3AuIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBgJ01heGltdW0gaXRlcmF0aW9uIGxpbWl0IGV4Y2VlZGVkLidgIGlmIHRoZSBudW1iZXIgb2ZcbiAgICAgICAqIGl0ZXJhdGlvbnMgZXhjZWVkcyAxMC5cbiAgICAgICAqXG4gICAgICAgKiBVc3VhbGx5LCB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpblxuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXIgY29udHJvbGxlcnN9IG9yIGluXG4gICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gICAgICAgKiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluXG4gICAgICAgKiBhIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmV9KSwgd2hpY2ggd2lsbCBmb3JjZSBhIGAkZGlnZXN0KClgLlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCxcbiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdpdGggbm8gYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBJbiB1bml0IHRlc3RzLCB5b3UgbWF5IG5lZWQgdG8gY2FsbCBgJGRpZ2VzdCgpYCB0byBzaW11bGF0ZSB0aGUgc2NvcGUgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIHZhciBzY29wZSA9IC4uLjtcbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7XG4gICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIHRoZSBsaXN0ZW5lciBpcyBhbHdheXMgY2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgJGRpZ2VzdCBsb29wIGFmdGVyIGl0IHdhcyByZWdpc3RlcmVkXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMik7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRkaWdlc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgd2F0Y2gsIHZhbHVlLCBsYXN0LCBmbiwgZ2V0LFxuICAgICAgICAgICAgd2F0Y2hlcnMsXG4gICAgICAgICAgICBkaXJ0eSwgdHRsID0gVFRMLFxuICAgICAgICAgICAgbmV4dCwgY3VycmVudCwgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgIHdhdGNoTG9nID0gW10sXG4gICAgICAgICAgICBsb2dJZHgsIGFzeW5jVGFzaztcblxuICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7XG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgaW4gc3luYyBiZWZvcmUgdGhlIGNhbGwgdG8gJGRpZ2VzdFxuICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUgJiYgYXBwbHlBc3luY0lkICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBzY29wZSwgYW5kICRhcHBseUFzeW5jIGhhcyBzY2hlZHVsZWQgYSBkZWZlcnJlZCAkYXBwbHkoKSwgdGhlblxuICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwoYXBwbHlBc3luY0lkKTtcbiAgICAgICAgICBmbHVzaEFwcGx5QXN5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBkbyB7IC8vIFwid2hpbGUgZGlydHlcIiBsb29wXG4gICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgLy8gSXQncyBzYWZlIGZvciBhc3luY1F1ZXVlUG9zaXRpb24gdG8gYmUgYSBsb2NhbCB2YXJpYWJsZSBoZXJlIGJlY2F1c2UgdGhpcyBsb29wIGNhbid0XG4gICAgICAgICAgLy8gYmUgcmVlbnRlcmVkIHJlY3Vyc2l2ZWx5LiBDYWxsaW5nICRkaWdlc3QgZnJvbSBhIGZ1bmN0aW9uIHBhc3NlZCB0byAkZXZhbEFzeW5jIHdvdWxkXG4gICAgICAgICAgLy8gbGVhZCB0byBhICckZGlnZXN0IGFscmVhZHkgaW4gcHJvZ3Jlc3MnIGVycm9yLlxuICAgICAgICAgIGZvciAodmFyIGFzeW5jUXVldWVQb3NpdGlvbiA9IDA7IGFzeW5jUXVldWVQb3NpdGlvbiA8IGFzeW5jUXVldWUubGVuZ3RoOyBhc3luY1F1ZXVlUG9zaXRpb24rKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXN5bmNUYXNrID0gYXN5bmNRdWV1ZVthc3luY1F1ZXVlUG9zaXRpb25dO1xuICAgICAgICAgICAgICBmbiA9IGFzeW5jVGFzay5mbjtcbiAgICAgICAgICAgICAgZm4oYXN5bmNUYXNrLnNjb3BlLCBhc3luY1Rhc2subG9jYWxzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzeW5jUXVldWUubGVuZ3RoID0gMDtcblxuICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDpcbiAgICAgICAgICBkbyB7IC8vIFwidHJhdmVyc2UgdGhlIHNjb3Blc1wiIGxvb3BcbiAgICAgICAgICAgIGlmICgod2F0Y2hlcnMgPSBjdXJyZW50LiQkd2F0Y2hlcnMpKSB7XG4gICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXNcbiAgICAgICAgICAgICAgd2F0Y2hlcnMuJCRkaWdlc3RXYXRjaEluZGV4ID0gd2F0Y2hlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICB3aGlsZSAod2F0Y2hlcnMuJCRkaWdlc3RXYXRjaEluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1t3YXRjaGVycy4kJGRpZ2VzdFdhdGNoSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgLy8gTW9zdCBjb21tb24gd2F0Y2hlcyBhcmUgb24gcHJpbWl0aXZlcywgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2hvcnRcbiAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHNcbiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBnZXQgPSB3YXRjaC5nZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSBnZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhKHdhdGNoLmVxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlcXVhbHModmFsdWUsIGxhc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoaXNOdW1iZXJOYU4odmFsdWUpICYmIGlzTnVtYmVyTmFOKGxhc3QpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5sYXN0ID0gd2F0Y2guZXEgPyBjb3B5KHZhbHVlLCBudWxsKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIGZuID0gd2F0Y2guZm47XG4gICAgICAgICAgICAgICAgICAgICAgZm4odmFsdWUsICgobGFzdCA9PT0gaW5pdFdhdGNoVmFsKSA/IHZhbHVlIDogbGFzdCksIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh0dGwgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dJZHggPSA0IC0gdHRsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaExvZ1tsb2dJZHhdKSB3YXRjaExvZ1tsb2dJZHhdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXRjaExvZ1tsb2dJZHhdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c6IGlzRnVuY3Rpb24od2F0Y2guZXhwKSA/ICdmbjogJyArICh3YXRjaC5leHAubmFtZSB8fCB3YXRjaC5leHAudG9TdHJpbmcoKSkgOiB3YXRjaC5leHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbDogbGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdhdGNoID09PSBsYXN0RGlydHlXYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBtb3N0IHJlY2VudGx5IGRpcnR5IHdhdGNoZXIgaXMgbm93IGNsZWFuLCBzaG9ydCBjaXJjdWl0IHNpbmNlIHRoZSByZW1haW5pbmcgd2F0Y2hlcnNcbiAgICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIGFscmVhZHkgYmVlbiB0ZXN0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsXG4gICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkYnJvYWRjYXN0XG4gICAgICAgICAgICBpZiAoIShuZXh0ID0gKChjdXJyZW50LiQkd2F0Y2hlcnNDb3VudCAmJiBjdXJyZW50LiQkY2hpbGRIZWFkKSB8fFxuICAgICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IG5leHQpKTtcblxuICAgICAgICAgIC8vIGBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7YCB0YWtlcyB1cyB0byBoZXJlXG5cbiAgICAgICAgICBpZiAoKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKSAmJiAhKHR0bC0tKSkge1xuICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJyxcbiAgICAgICAgICAgICAgICAnezB9ICRkaWdlc3QoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxcbicgK1xuICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsXG4gICAgICAgICAgICAgICAgVFRMLCB3YXRjaExvZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gd2hpbGUgKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKTtcblxuICAgICAgICBjbGVhclBoYXNlKCk7XG5cbiAgICAgICAgLy8gcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gaXNuJ3QgbG9jYWwgaGVyZSBiZWNhdXNlIHRoaXMgbG9vcCBjYW4gYmUgcmVlbnRlcmVkIHJlY3Vyc2l2ZWx5LlxuICAgICAgICB3aGlsZSAocG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gPCBwb3N0RGlnZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZVtwb3N0RGlnZXN0UXVldWVQb3NpdGlvbisrXSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3N0RGlnZXN0UXVldWUubGVuZ3RoID0gcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gPSAwO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgZHVyaW5nIHRoZSAkZGlnZXN0XG4gICAgICAgIC8vIChmb3Igd2hpY2ggbm8gZXZlbnQgaXMgZmlyZWQ7IGUuZy4gdmlhIGBoaXN0b3J5LnB1c2hTdGF0ZSgpYClcbiAgICAgICAgJGJyb3dzZXIuJCRjaGVja1VybENoYW5nZSgpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveVxuICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gc2NvcGUgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBCcm9hZGNhc3RlZCB3aGVuIGEgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbiBhcmUgYmVpbmcgZGVzdHJveWVkLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgY3VycmVudCBzY29wZSAoYW5kIGFsbCBvZiBpdHMgY2hpbGRyZW4pIGZyb20gdGhlIHBhcmVudCBzY29wZS4gUmVtb3ZhbCBpbXBsaWVzXG4gICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSB3aWxsIG5vIGxvbmdlclxuICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGlzIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSBmb3IgbWFuYWdpbmcgdGhlXG4gICAgICAgKiB1bnJvbGxpbmcgb2YgdGhlIGxvb3AuXG4gICAgICAgKlxuICAgICAgICogSnVzdCBiZWZvcmUgYSBzY29wZSBpcyBkZXN0cm95ZWQsIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLlxuICAgICAgICogQXBwbGljYXRpb24gY29kZSBjYW4gcmVnaXN0ZXIgYSBgJGRlc3Ryb3lgIGV2ZW50IGhhbmRsZXIgdGhhdCB3aWxsIGdpdmUgaXQgYSBjaGFuY2UgdG9cbiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cbiAgICAgICRkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZGVzdHJveSBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQuXG4gICAgICAgIGlmICh0aGlzLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG5cbiAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCckZGVzdHJveScpO1xuICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkge1xuICAgICAgICAgIC8vUmVtb3ZlIGhhbmRsZXJzIGF0dGFjaGVkIHRvIHdpbmRvdyB3aGVuICRyb290U2NvcGUgaXMgcmVtb3ZlZFxuICAgICAgICAgICRicm93c2VyLiQkYXBwbGljYXRpb25EZXN0cm95ZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQodGhpcywgLXRoaXMuJCR3YXRjaGVyc0NvdW50KTtcbiAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHRoaXMuJCRsaXN0ZW5lckNvdW50KSB7XG4gICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudCh0aGlzLCB0aGlzLiQkbGlzdGVuZXJDb3VudFtldmVudE5hbWVdLCBldmVudE5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V2ZXIgYWxsIHRoZSByZWZlcmVuY2VzIHRvIHBhcmVudCBzY29wZXMgKGFmdGVyIHRoaXMgY2xlYW51cCwgdGhlIGN1cnJlbnQgc2NvcGUgc2hvdWxkXG4gICAgICAgIC8vIG5vdCBiZSByZXRhaW5lZCBieSBhbnkgb2Ygb3VyIHJlZmVyZW5jZXMgYW5kIHNob3VsZCBiZSBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uKVxuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkSGVhZCA9PT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nO1xuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkVGFpbCA9PT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuICAgICAgICBpZiAodGhpcy4kJHByZXZTaWJsaW5nKSB0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZyA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBsaXN0ZW5lcnMsIHdhdGNoZXJzIGFuZCBhcHBseS9kaWdlc3QgbWV0aG9kc1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gdGhpcy4kZGlnZXN0ID0gdGhpcy4kYXBwbHkgPSB0aGlzLiRldmFsQXN5bmMgPSB0aGlzLiRhcHBseUFzeW5jID0gbm9vcDtcbiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAvLyBEaXNjb25uZWN0IHRoZSBuZXh0IHNpYmxpbmcgdG8gcHJldmVudCBgY2xlYW5VcFNjb3BlYCBkZXN0cm95aW5nIHRob3NlIHRvb1xuICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSBudWxsO1xuICAgICAgICBjbGVhblVwU2NvcGUodGhpcyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuIEFueSBleGNlcHRpb25zIGluXG4gICAgICAgKiB0aGUgZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhclxuICAgICAgICogZXhwcmVzc2lvbnMuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSBuZy4kcm9vdFNjb3BlLlNjb3BlKCk7XG4gICAgICAgICAgIHNjb3BlLmEgPSAxO1xuICAgICAgICAgICBzY29wZS5iID0gMjtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRldmFsOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmNcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZXZhbEFzeW5jYCBtYWtlcyBubyBndWFyYW50ZWVzIGFzIHRvIHdoZW4gdGhlIGBleHByZXNzaW9uYCB3aWxsIGJlIGV4ZWN1dGVkLCBvbmx5XG4gICAgICAgKiB0aGF0OlxuICAgICAgICpcbiAgICAgICAqICAgLSBpdCB3aWxsIGV4ZWN1dGUgYWZ0ZXIgdGhlIGZ1bmN0aW9uIHRoYXQgc2NoZWR1bGVkIHRoZSBldmFsdWF0aW9uIChwcmVmZXJhYmx5IGJlZm9yZSBET01cbiAgICAgICAqICAgICByZW5kZXJpbmcpLlxuICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QgY3ljbGV9IHdpbGwgYmUgcGVyZm9ybWVkIGFmdGVyXG4gICAgICAgKiAgICAgYGV4cHJlc3Npb25gIGV4ZWN1dGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBfX05vdGU6X18gaWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGAkZGlnZXN0YCBjeWNsZSwgYSBuZXcgYCRkaWdlc3RgIGN5Y2xlXG4gICAgICAgKiB3aWxsIGJlIHNjaGVkdWxlZC4gSG93ZXZlciwgaXQgaXMgZW5jb3VyYWdlZCB0byBhbHdheXMgY2FsbCBjb2RlIHRoYXQgY2hhbmdlcyB0aGUgbW9kZWxcbiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKi9cbiAgICAgICRldmFsQXN5bmM6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgb3V0c2lkZSBvZiBhbiAkZGlnZXN0IGxvb3AgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHNjaGVkdWxpbmcgYXN5bmNcbiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgIWFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBmbjogJHBhcnNlKGV4cHIpLCBsb2NhbHM6IGxvY2Fsc30pO1xuICAgICAgfSxcblxuICAgICAgJCRwb3N0RGlnZXN0OiBmdW5jdGlvbihmbikge1xuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHVzaChmbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhclxuICAgICAgICogZnJhbWV3b3JrLiAoRm9yIGV4YW1wbGUgZnJvbSBicm93c2VyIERPTSBldmVudHMsIHNldFRpbWVvdXQsIFhIUiBvciB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMpLlxuICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmVcbiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCBleGVjdXRpbmcgd2F0Y2hlc30uXG4gICAgICAgKlxuICAgICAgICogIyMgTGlmZSBjeWNsZVxuICAgICAgICpcbiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYFxuICAgICAgICogYGBganNcbiAgICAgICAgICAgZnVuY3Rpb24gJGFwcGx5KGV4cHIpIHtcbiAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpO1xuICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAkcm9vdC4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogU2NvcGUncyBgJGFwcGx5KClgIG1ldGhvZCB0cmFuc2l0aW9ucyB0aHJvdWdoIHRoZSBmb2xsb3dpbmcgc3RhZ2VzOlxuICAgICAgICpcbiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsICRldmFsKCl9IG1ldGhvZC5cbiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICogMy4gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaH0gbGlzdGVuZXJzIGFyZSBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGVcbiAgICAgICAqICAgIGV4cHJlc3Npb24gd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRldmFsKGV4cHIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2NoZWR1bGUgdGhlIGludm9jYXRpb24gb2YgJGFwcGx5IHRvIG9jY3VyIGF0IGEgbGF0ZXIgdGltZS4gVGhlIGFjdHVhbCB0aW1lIGRpZmZlcmVuY2VcbiAgICAgICAqIHZhcmllcyBhY3Jvc3MgYnJvd3NlcnMsIGJ1dCBpcyB0eXBpY2FsbHkgYXJvdW5kIH4xMCBtaWxsaXNlY29uZHMuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBxdWV1ZSB1cCBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGljaCBuZWVkIHRvIGJlIGV2YWx1YXRlZCBpbiB0aGUgc2FtZVxuICAgICAgICogZGlnZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cCBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5QXN5bmM6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICAgICAgaWYgKGV4cHIpIHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUucHVzaCgkYXBwbHlBc3luY0V4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIGV4cHIgPSAkcGFyc2UoZXhwcik7XG4gICAgICAgIHNjaGVkdWxlQXBwbHlBc3luYygpO1xuXG4gICAgICAgIGZ1bmN0aW9uICRhcHBseUFzeW5jRXhwcmVzc2lvbigpIHtcbiAgICAgICAgICBzY29wZS4kZXZhbChleHByKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIExpc3RlbnMgb24gZXZlbnRzIG9mIGEgZ2l2ZW4gdHlwZS4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRlbWl0ICRlbWl0fSBmb3JcbiAgICAgICAqIGRpc2N1c3Npb24gb2YgZXZlbnQgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gZm9ybWF0IGlzOiBgZnVuY3Rpb24oZXZlbnQsIGFyZ3MuLi4pYC4gVGhlIGBldmVudGAgb2JqZWN0XG4gICAgICAgKiBwYXNzZWQgaW50byB0aGUgbGlzdGVuZXIgaGFzIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gYHRhcmdldFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIG9uIHdoaWNoIHRoZSBldmVudCB3YXMgYCRlbWl0YC1lZCBvclxuICAgICAgICogICAgIGAkYnJvYWRjYXN0YC1lZC5cbiAgICAgICAqICAgLSBgY3VycmVudFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIHRoYXQgaXMgY3VycmVudGx5IGhhbmRsaW5nIHRoZSBldmVudC4gT25jZSB0aGVcbiAgICAgICAqICAgICBldmVudCBwcm9wYWdhdGVzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSwgdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gbnVsbC5cbiAgICAgICAqICAgLSBgbmFtZWAgLSBge3N0cmluZ31gOiBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgICAqICAgLSBgc3RvcFByb3BhZ2F0aW9uYCAtIGB7ZnVuY3Rpb249fWA6IGNhbGxpbmcgYHN0b3BQcm9wYWdhdGlvbmAgZnVuY3Rpb24gd2lsbCBjYW5jZWxcbiAgICAgICAqICAgICBmdXJ0aGVyIGV2ZW50IHByb3BhZ2F0aW9uIChhdmFpbGFibGUgb25seSBmb3IgZXZlbnRzIHRoYXQgd2VyZSBgJGVtaXRgLWVkKS5cbiAgICAgICAqICAgLSBgcHJldmVudERlZmF1bHRgIC0gYHtmdW5jdGlvbn1gOiBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgc2V0cyBgZGVmYXVsdFByZXZlbnRlZGAgZmxhZ1xuICAgICAgICogICAgIHRvIHRydWUuXG4gICAgICAgKiAgIC0gYGRlZmF1bHRQcmV2ZW50ZWRgIC0gYHtib29sZWFufWA6IHRydWUgaWYgYHByZXZlbnREZWZhdWx0YCB3YXMgY2FsbGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gbGlzdGVuIG9uLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudCwgLi4uYXJncyl9IGxpc3RlbmVyIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICRvbjogZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG5hbWVkTGlzdGVuZXJzID0gdGhpcy4kJGxpc3RlbmVyc1tuYW1lXTtcbiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykge1xuICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV0gPSBuYW1lZExpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHtcbiAgICAgICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0rKztcbiAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5kZXhPZkxpc3RlbmVyID0gbmFtZWRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgaWYgKGluZGV4T2ZMaXN0ZW5lciAhPT0gLTEpIHtcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2luZGV4T2ZMaXN0ZW5lcl0gPSBudWxsO1xuICAgICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudChzZWxmLCAxLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZW1pdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIHVwd2FyZHMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5IG5vdGlmeWluZyB0aGVcbiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGVtaXRgIHdhcyBjYWxsZWQuIEFsbFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAqIG5vdGlmaWVkLiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgdHJhdmVyc2VzIHVwd2FyZHMgdG93YXJkIHRoZSByb290IHNjb3BlIGFuZCBjYWxscyBhbGxcbiAgICAgICAqIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnNcbiAgICAgICAqIGNhbmNlbHMgaXQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCAoc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0pLlxuICAgICAgICovXG4gICAgICAkZW1pdDogZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICB2YXIgZW1wdHkgPSBbXSxcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLFxuICAgICAgICAgICAgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge3N0b3BQcm9wYWdhdGlvbiA9IHRydWU7fSxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBuYW1lZExpc3RlbmVycyA9IHNjb3BlLiQkbGlzdGVuZXJzW25hbWVdIHx8IGVtcHR5O1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG5hbWVkTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vYWxsb3cgYWxsIGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBzY29wZSB0byBydW5cbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vaWYgYW55IGxpc3RlbmVyIG9uIHRoZSBjdXJyZW50IHNjb3BlIHN0b3BzIHByb3BhZ2F0aW9uLCBwcmV2ZW50IGJ1YmJsaW5nXG4gICAgICAgICAgaWYgKHN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy90cmF2ZXJzZSB1cHdhcmRzXG4gICAgICAgICAgc2NvcGUgPSBzY29wZS4kcGFyZW50O1xuICAgICAgICB9IHdoaWxlIChzY29wZSk7XG5cbiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYnJvYWRjYXN0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgZG93bndhcmRzIHRvIGFsbCBjaGlsZCBzY29wZXMgKGFuZCB0aGVpciBjaGlsZHJlbikgbm90aWZ5aW5nIHRoZVxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkYnJvYWRjYXN0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0XG4gICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHByb3BhZ2F0ZXMgdG8gYWxsIGRpcmVjdCBhbmQgaW5kaXJlY3Qgc2NvcGVzIG9mIHRoZSBjdXJyZW50XG4gICAgICAgKiBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCBjYW5ub3QgYmUgY2FuY2VsZWQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBicm9hZGNhc3QuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0LCBzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufVxuICAgICAgICovXG4gICAgICAkYnJvYWRjYXN0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCxcbiAgICAgICAgICAgIG5leHQgPSB0YXJnZXQsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHRhcmdldCxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXRhcmdldC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHJldHVybiBldmVudDtcblxuICAgICAgICB2YXIgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMsIGksIGxlbmd0aDtcblxuICAgICAgICAvL2Rvd24gd2hpbGUgeW91IGNhbiwgdGhlbiB1cCBhbmQgbmV4dCBzaWJsaW5nIG9yIHVwIGFuZCBuZXh0IHNpYmxpbmcgdW50aWwgYmFjayBhdCByb290XG4gICAgICAgIHdoaWxlICgoY3VycmVudCA9IG5leHQpKSB7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDtcbiAgICAgICAgICBsaXN0ZW5lcnMgPSBjdXJyZW50LiQkbGlzdGVuZXJzW25hbWVdIHx8IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdFxuICAgICAgICAgIC8vICh0aG91Z2ggaXQgZGlmZmVycyBkdWUgdG8gaGF2aW5nIHRoZSBleHRyYSBjaGVjayBmb3IgJCRsaXN0ZW5lckNvdW50KVxuICAgICAgICAgIGlmICghKG5leHQgPSAoKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQpIHx8XG4gICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7XG5cbiAgICAvL1RoZSBpbnRlcm5hbCBxdWV1ZXMuIEV4cG9zZSB0aGVtIG9uIHRoZSAkcm9vdFNjb3BlIGZvciBkZWJ1Z2dpbmcvdGVzdGluZyBwdXJwb3Nlcy5cbiAgICB2YXIgYXN5bmNRdWV1ZSA9ICRyb290U2NvcGUuJCRhc3luY1F1ZXVlID0gW107XG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9ICRyb290U2NvcGUuJCRwb3N0RGlnZXN0UXVldWUgPSBbXTtcbiAgICB2YXIgYXBwbHlBc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFwcGx5QXN5bmNRdWV1ZSA9IFtdO1xuXG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uID0gMDtcblxuICAgIHJldHVybiAkcm9vdFNjb3BlO1xuXG5cbiAgICBmdW5jdGlvbiBiZWdpblBoYXNlKHBoYXNlKSB7XG4gICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2lucHJvZycsICd7MH0gYWxyZWFkeSBpbiBwcm9ncmVzcycsICRyb290U2NvcGUuJCRwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IHBoYXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7XG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluY3JlbWVudFdhdGNoZXJzQ291bnQoY3VycmVudCwgY291bnQpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJHdhdGNoZXJzQ291bnQgKz0gY291bnQ7XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlY3JlbWVudExpc3RlbmVyQ291bnQoY3VycmVudCwgY291bnQsIG5hbWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gLT0gY291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuXG4gICAgICogYmVjYXVzZSBpdCdzIHVuaXF1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fVxuXG4gICAgZnVuY3Rpb24gZmx1c2hBcHBseUFzeW5jKCkge1xuICAgICAgd2hpbGUgKGFwcGx5QXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUuc2hpZnQoKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGx5QXN5bmNJZCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVBcHBseUFzeW5jKCkge1xuICAgICAgaWYgKGFwcGx5QXN5bmNJZCA9PT0gbnVsbCkge1xuICAgICAgICBhcHBseUFzeW5jSWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmbHVzaEFwcGx5QXN5bmMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcm9vdEVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSByb290IGVsZW1lbnQgb2YgQW5ndWxhciBhcHBsaWNhdGlvbi4gVGhpcyBpcyBlaXRoZXIgdGhlIGVsZW1lbnQgd2hlcmUge0BsaW5rXG4gKiBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9IHdhcyBkZWNsYXJlZCBvciB0aGUgZWxlbWVudCBwYXNzZWQgaW50b1xuICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfS4gVGhlIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgcm9vdCBlbGVtZW50IG9mIGFwcGxpY2F0aW9uLiBJdCBpcyBhbHNvIHRoZVxuICogbG9jYXRpb24gd2hlcmUgdGhlIGFwcGxpY2F0aW9uJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gc2VydmljZSBnZXRzXG4gKiBwdWJsaXNoZWQsIGFuZCBjYW4gYmUgcmV0cmlldmVkIHVzaW5nIGAkcm9vdEVsZW1lbnQuaW5qZWN0b3IoKWAuXG4gKi9cblxuXG4vLyB0aGUgaW1wbGVtZW50YXRpb24gaXMgaW4gYW5ndWxhci5ib290c3RyYXBcblxuLyoqXG4gKiBAdGhpc1xuICogQGRlc2NyaXB0aW9uXG4gKiBQcml2YXRlIHNlcnZpY2UgdG8gc2FuaXRpemUgdXJpcyBmb3IgbGlua3MgYW5kIGltYWdlcy4gVXNlZCBieSAkY29tcGlsZSBhbmQgJHNhbml0aXplLlxuICovXG5mdW5jdGlvbiAkJFNhbml0aXplVXJpUHJvdmlkZXIoKSB7XG4gIHZhciBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxcbiAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooKGh0dHBzP3xmdHB8ZmlsZXxibG9iKTp8ZGF0YTppbWFnZVxcLykvO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNhbml0aXplVXJpKHVyaSwgaXNJbWFnZSkge1xuICAgICAgdmFyIHJlZ2V4ID0gaXNJbWFnZSA/IGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA6IGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICAgICAgdmFyIG5vcm1hbGl6ZWRWYWw7XG4gICAgICBub3JtYWxpemVkVmFsID0gdXJsUmVzb2x2ZSh1cmkpLmhyZWY7XG4gICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgIHJldHVybiAndW5zYWZlOicgKyBub3JtYWxpemVkVmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVyaTtcbiAgICB9O1xuICB9O1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiBleHBvcnRlZCAkU2NlUHJvdmlkZXIsICRTY2VEZWxlZ2F0ZVByb3ZpZGVyICovXG5cbnZhciAkc2NlTWluRXJyID0gbWluRXJyKCckc2NlJyk7XG5cbnZhciBTQ0VfQ09OVEVYVFMgPSB7XG4gIC8vIEhUTUwgaXMgdXNlZCB3aGVuIHRoZXJlJ3MgSFRNTCByZW5kZXJlZCAoZS5nLiBuZy1iaW5kLWh0bWwsIGlmcmFtZSBzcmNkb2MgYmluZGluZykuXG4gIEhUTUw6ICdodG1sJyxcblxuICAvLyBTdHlsZSBzdGF0ZW1lbnRzIG9yIHN0eWxlc2hlZXRzLiBDdXJyZW50bHkgdW51c2VkIGluIEFuZ3VsYXJKUy5cbiAgQ1NTOiAnY3NzJyxcblxuICAvLyBBbiBVUkwgdXNlZCBpbiBhIGNvbnRleHQgd2hlcmUgaXQgZG9lcyBub3QgcmVmZXIgdG8gYSByZXNvdXJjZSB0aGF0IGxvYWRzIGNvZGUuIEN1cnJlbnRseVxuICAvLyB1bnVzZWQgaW4gQW5ndWxhckpTLlxuICBVUkw6ICd1cmwnLFxuXG4gIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgd2hlcmUgdGhlIHJlZmVycmVkLXRvIHJlc291cmNlIGNvdWxkIGJlIGludGVycHJldGVkIGFzXG4gIC8vIGNvZGUuIChlLmcuIG5nLWluY2x1ZGUsIHNjcmlwdCBzcmMgYmluZGluZywgdGVtcGxhdGVVcmwpXG4gIFJFU09VUkNFX1VSTDogJ3Jlc291cmNlVXJsJyxcblxuICAvLyBTY3JpcHQuIEN1cnJlbnRseSB1bnVzZWQgaW4gQW5ndWxhckpTLlxuICBKUzogJ2pzJ1xufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb2xsb3cuXG5cbnZhciBVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAgPSAvXyhbYS16XSkvZztcblxuZnVuY3Rpb24gc25ha2VUb0NhbWVsKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAsIGZuQ2FtZWxDYXNlUmVwbGFjZSk7XG59XG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXIobWF0Y2hlcikge1xuICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgcmV0dXJuIG1hdGNoZXI7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcobWF0Y2hlcikpIHtcbiAgICAvLyBTdHJpbmdzIG1hdGNoIGV4YWN0bHkgZXhjZXB0IGZvciAyIHdpbGRjYXJkcyAtICcqJyBhbmQgJyoqJy5cbiAgICAvLyAnKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIGV4Y2VwdCB0aG9zZSBmcm9tIHRoZSBzZXQgJzovLj8mJy5cbiAgICAvLyAnKionIG1hdGNoZXMgYW55IGNoYXJhY3RlciAobGlrZSAuKiBpbiBhIFJlZ0V4cCkuXG4gICAgLy8gTW9yZSB0aGFuIDIgKidzIHJhaXNlcyBhbiBlcnJvciBhcyBpdCdzIGlsbCBkZWZpbmVkLlxuICAgIGlmIChtYXRjaGVyLmluZGV4T2YoJyoqKicpID4gLTEpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l3Y2FyZCcsXG4gICAgICAgICAgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTtcbiAgICB9XG4gICAgbWF0Y2hlciA9IGVzY2FwZUZvclJlZ2V4cChtYXRjaGVyKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoL1xcXFxcXCpcXFxcXFwqL2csICcuKicpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgvXFxcXFxcKi9nLCAnW146Ly4/JjtdKicpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIgKyAnJCcpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKG1hdGNoZXIpKSB7XG4gICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuXG4gICAgLy8gTWF0Y2ggZW50aXJlIFVSTCAvIGRpc2FsbG93IHBhcnRpYWwgbWF0Y2hlcy5cbiAgICAvLyBGbGFncyBhcmUgcmVzZXQgKGkuZS4gbm8gZ2xvYmFsLCBpZ25vcmVDYXNlIG9yIG11bHRpbGluZSlcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJHNjZU1pbkVycignaW1hdGNoZXInLFxuICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgXCJzZWxmXCIsIHN0cmluZyBwYXR0ZXJucyBvciBSZWdFeHAgb2JqZWN0cycpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcnMobWF0Y2hlcnMpIHtcbiAgdmFyIGFkanVzdGVkTWF0Y2hlcnMgPSBbXTtcbiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHtcbiAgICBmb3JFYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyKSB7XG4gICAgICBhZGp1c3RlZE1hdGNoZXJzLnB1c2goYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFkanVzdGVkTWF0Y2hlcnM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZURlbGVnYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XG4gKiBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfSBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogRm9yIGFuIG92ZXJ2aWV3IG9mIHRoaXMgc2VydmljZSBhbmQgdGhlIGZ1bmN0aW9ubmFsaXR5IGl0IHByb3ZpZGVzIGluIEFuZ3VsYXJKUywgc2VlIHRoZSBtYWluXG4gKiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZSBTQ0V9LiBUaGUgY3VycmVudCBwYWdlIGlzIHRhcmdldGVkIGZvciBkZXZlbG9wZXJzIHdobyBuZWVkIHRvIGFsdGVyIGhvd1xuICogU0NFIHdvcmtzIGluIHRoZWlyIGFwcGxpY2F0aW9uLCB3aGljaCBzaG91bGRuJ3QgYmUgbmVlZGVkIGluIG1vc3QgY2FzZXMuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogQW5ndWxhckpTIHN0cm9uZ2x5IHJlbGllcyBvbiBjb250ZXh0dWFsIGVzY2FwaW5nIGZvciB0aGUgc2VjdXJpdHkgb2YgYmluZGluZ3M6IGRpc2FibGluZyBvclxuICogbW9kaWZ5aW5nIHRoaXMgbWlnaHQgY2F1c2UgY3Jvc3Mgc2l0ZSBzY3JpcHRpbmcgKFhTUykgdnVsbmVyYWJpbGl0aWVzLiBGb3IgbGlicmFyaWVzIG93bmVycyxcbiAqIGNoYW5nZXMgdG8gdGhpcyBzZXJ2aWNlIHdpbGwgYWxzbyBpbmZsdWVuY2UgdXNlcnMsIHNvIGJlIGV4dHJhIGNhcmVmdWwgYW5kIGRvY3VtZW50IHlvdXIgY2hhbmdlcy5cbiAqIDwvZGl2PlxuICpcbiAqIFR5cGljYWxseSwgeW91IHdvdWxkIGNvbmZpZ3VyZSBvciBvdmVycmlkZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGluc3RlYWQgb2ZcbiAqIHRoZSBgJHNjZWAgc2VydmljZSB0byBjdXN0b21pemUgdGhlIHdheSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyB3b3JrcyBpbiBBbmd1bGFySlMuICBUaGlzIGlzXG4gKiBiZWNhdXNlLCB3aGlsZSB0aGUgYCRzY2VgIHByb3ZpZGVzIG51bWVyb3VzIHNob3J0aGFuZCBtZXRob2RzLCBldGMuLCB5b3UgcmVhbGx5IG9ubHkgbmVlZCB0b1xuICogb3ZlcnJpZGUgMyBjb3JlIGZ1bmN0aW9ucyAoYHRydXN0QXNgLCBgZ2V0VHJ1c3RlZGAgYW5kIGB2YWx1ZU9mYCkgdG8gcmVwbGFjZSB0aGUgd2F5IHRoaW5nc1xuICogd29yayBiZWNhdXNlIGAkc2NlYCBkZWxlZ2F0ZXMgdG8gYCRzY2VEZWxlZ2F0ZWAgZm9yIHRoZXNlIG9wZXJhdGlvbnMuXG4gKlxuICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSB0byBjb25maWd1cmUgdGhpcyBzZXJ2aWNlLlxuICpcbiAqIFRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIGAkc2NlRGVsZWdhdGVgIHNob3VsZCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGggbGl0dGxlIHBhaW4uICBXaGlsZSB5b3VcbiAqIGNhbiBvdmVycmlkZSBpdCBjb21wbGV0ZWx5IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgYCRzY2VgLCB0aGUgY29tbW9uIGNhc2Ugd291bGRcbiAqIGludm9sdmUgY29uZmlndXJpbmcgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gaW5zdGVhZCBieSBzZXR0aW5nXG4gKiB5b3VyIG93biB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIGZvciB0cnVzdGluZyBVUkxzIHVzZWQgZm9yIGxvYWRpbmcgQW5ndWxhckpTIHJlc291cmNlcyBzdWNoIGFzXG4gKiB0ZW1wbGF0ZXMuICBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAqICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGAkc2NlRGVsZWdhdGVQcm92aWRlcmAgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlXG4gKiAkc2NlRGVsZWdhdGUgc2VydmljZX0sIHVzZWQgYXMgYSBkZWxlZ2F0ZSBmb3Ige0BsaW5rIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICpcbiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxuICogdGhhdCB0aGUgVVJMcyB1c2VkIGZvciBzb3VyY2luZyBBbmd1bGFySlMgdGVtcGxhdGVzIGFuZCBvdGhlciBzY3JpcHQtcnVubmluZyBVUkxzIGFyZSBzYWZlIChhbGxcbiAqIHBsYWNlcyB0aGF0IHVzZSB0aGUgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjb250ZXh0KS4gU2VlXG4gKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9XG4gKiBhbmRcbiAqIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH0sXG4gKlxuICogRm9yIHRoZSBnZW5lcmFsIGRldGFpbHMgYWJvdXQgdGhpcyBzZXJ2aWNlIGluIEFuZ3VsYXIsIHJlYWQgdGhlIG1haW4gcGFnZSBmb3Ige0BsaW5rIG5nLiRzY2VcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiAqKkV4YW1wbGUqKjogIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgY2FzZS4gPGEgbmFtZT1cImV4YW1wbGVcIj48L2E+XG4gKlxuICogLSB5b3VyIGFwcCBpcyBob3N0ZWQgYXQgdXJsIGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vYFxuICogLSBidXQgc29tZSBvZiB5b3VyIHRlbXBsYXRlcyBhcmUgaG9zdGVkIG9uIG90aGVyIGRvbWFpbnMgeW91IGNvbnRyb2wgc3VjaCBhc1xuICogICBgaHR0cDovL3NydjAxLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuXG4gKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuXG4gKlxuICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOlxuICpcbiAqIGBgYFxuICogIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAqICAgICAgLy8gQWxsb3cgc2FtZSBvcmlnaW4gcmVzb3VyY2UgbG9hZHMuXG4gKiAgICAgICdzZWxmJyxcbiAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouXG4gKiAgICAgICdodHRwOi8vc3J2Ki5hc3NldHMuZXhhbXBsZS5jb20vKionXG4gKiAgICBdKTtcbiAqXG4gKiAgICAvLyBUaGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0IHNvIHRoZSBvcGVuIHJlZGlyZWN0IGhlcmUgaXMgYmxvY2tlZC5cbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0KFtcbiAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKidcbiAqICAgIF0pO1xuICogIH0pO1xuICogYGBgXG4gKiBOb3RlIHRoYXQgYW4gZW1wdHkgd2hpdGVsaXN0IHdpbGwgYmxvY2sgZXZlcnkgcmVzb3VyY2UgVVJMIGZyb20gYmVpbmcgbG9hZGVkLCBhbmQgd2lsbCByZXF1aXJlXG4gKiB5b3UgdG8gbWFudWFsbHkgbWFyayBlYWNoIG9uZSBhcyB0cnVzdGVkIHdpdGggYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsYC4gSG93ZXZlciwgdGVtcGxhdGVzXG4gKiByZXF1ZXN0ZWQgYnkge0BsaW5rIG5nLiR0ZW1wbGF0ZVJlcXVlc3QgJHRlbXBsYXRlUmVxdWVzdH0gdGhhdCBhcmUgcHJlc2VudCBpblxuICoge0BsaW5rIG5nLiR0ZW1wbGF0ZUNhY2hlICR0ZW1wbGF0ZUNhY2hlfSB3aWxsIG5vdCBnbyB0aHJvdWdoIHRoaXMgY2hlY2suIElmIHlvdSBoYXZlIGEgbWVjaGFuaXNtXG4gKiB0byBwb3B1bGF0ZSB5b3VyIHRlbXBsYXRlcyBpbiB0aGF0IGNhY2hlIGF0IGNvbmZpZyB0aW1lLCB0aGVuIGl0IGlzIGEgZ29vZCBpZGVhIHRvIHJlbW92ZSAnc2VsZidcbiAqIGZyb20gdGhhdCB3aGl0ZWxpc3QuIFRoaXMgaGVscHMgdG8gbWl0aWdhdGUgdGhlIHNlY3VyaXR5IGltcGFjdCBvZiBjZXJ0YWluIHR5cGVzIG9mIGlzc3VlcywgbGlrZVxuICogZm9yIGluc3RhbmNlIGF0dGFja2VyLWNvbnRyb2xsZWQgYG5nLWluY2x1ZGVzYC5cbiAqL1xuXG5mdW5jdGlvbiAkU2NlRGVsZWdhdGVQcm92aWRlcigpIHtcbiAgdGhpcy5TQ0VfQ09OVEVYVFMgPSBTQ0VfQ09OVEVYVFM7XG5cbiAgLy8gUmVzb3VyY2UgVVJMcyBjYW4gYWxzbyBiZSB0cnVzdGVkIGJ5IHBvbGljeS5cbiAgdmFyIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gWydzZWxmJ10sXG4gICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IFtdO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSB3aGl0ZWxpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsV2hpdGVsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX0gVGhlIGN1cnJlbnRseSBzZXQgd2hpdGVsaXN0IGFycmF5LlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cy9HZXRzIHRoZSB3aGl0ZWxpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLlxuICAgKlxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgYFsnc2VsZiddYCBhbGxvd2luZyBvbmx5XG4gICAqIHNhbWUgb3JpZ2luIHJlc291cmNlIHJlcXVlc3RzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogdGhlIGRlZmF1bHQgd2hpdGVsaXN0IG9mICdzZWxmJyBpcyBub3QgcmVjb21tZW5kZWQgaWYgeW91ciBhcHAgc2hhcmVzIGl0cyBvcmlnaW5cbiAgICogd2l0aCBvdGhlciBhcHBzISBJdCBpcyBhIGdvb2QgaWRlYSB0byBsaW1pdCBpdCB0byBvbmx5IHlvdXIgYXBwbGljYXRpb24ncyBkaXJlY3RvcnkuXG4gICAqIDwvZGl2PlxuICAgKi9cbiAgdGhpcy5yZXNvdXJjZVVybFdoaXRlbGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VVcmxXaGl0ZWxpc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5IG9yIG51bGwuICBBIHNuYXBzaG90IG9mIHRoaXMgYXJyYXkgaXMgdXNlZCBzbyBmdXJ0aGVyXG4gICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC48L3A+PHA+XG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LjwvcD48cD5cbiAgICogICAgIFRoZSB0eXBpY2FsIHVzYWdlIGZvciB0aGUgYmxhY2tsaXN0IGlzIHRvICoqYmxvY2tcbiAgICogICAgIFtvcGVuIHJlZGlyZWN0c10oaHR0cDovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MDEuaHRtbCkqKiBzZXJ2ZWQgYnkgeW91ciBkb21haW4gYXNcbiAgICogICAgIHRoZXNlIHdvdWxkIG90aGVyd2lzZSBiZSB0cnVzdGVkIGJ1dCBhY3R1YWxseSByZXR1cm4gY29udGVudCBmcm9tIHRoZSByZWRpcmVjdGVkIGRvbWFpbi5cbiAgICogICAgIDwvcD48cD5cbiAgICogICAgIEZpbmFsbHksICoqdGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCoqIGFuZCBoYXMgdGhlIGZpbmFsIHNheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IFRoZSBjdXJyZW50bHkgc2V0IGJsYWNrbGlzdCBhcnJheS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgYmxhY2tsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIHRoZSBlbXB0eSBhcnJheSAoaS5lLiB0aGVyZVxuICAgKiBpcyBubyBibGFja2xpc3QuKVxuICAgKi9cblxuICB0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuXG4gICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfTtcblxuICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkge1xuICAgICAgaHRtbFNhbml0aXplciA9ICRpbmplY3Rvci5nZXQoJyRzYW5pdGl6ZScpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWF0Y2hVcmwobWF0Y2hlciwgcGFyc2VkVXJsKSB7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgICAgIHJldHVybiB1cmxJc1NhbWVPcmlnaW4ocGFyc2VkVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpXG4gICAgICAgIHJldHVybiAhIW1hdGNoZXIuZXhlYyhwYXJzZWRVcmwuaHJlZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSh1cmwpIHtcbiAgICAgIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKHVybC50b1N0cmluZygpKTtcbiAgICAgIHZhciBpLCBuLCBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBhdCBsZWFzdCBvbmUgaXRlbSBmcm9tIHRoZSB3aGl0ZWxpc3QgYWxsb3dzIHRoaXMgdXJsLlxuICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAobWF0Y2hVcmwocmVzb3VyY2VVcmxXaGl0ZWxpc3RbaV0sIHBhcnNlZFVybCkpIHtcbiAgICAgICAgICBhbGxvd2VkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgbm8gaXRlbSBmcm9tIHRoZSBibGFja2xpc3QgYmxvY2tlZCB0aGlzIHVybC5cbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsQmxhY2tsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgICAgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhvbGRlclR5cGUoQmFzZSkge1xuICAgICAgdmFyIGhvbGRlclR5cGUgPSBmdW5jdGlvbiBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZSkge1xuICAgICAgICB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBpZiAoQmFzZSkge1xuICAgICAgICBob2xkZXJUeXBlLnByb3RvdHlwZSA9IG5ldyBCYXNlKCk7XG4gICAgICB9XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gc2NlVmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH07XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHNjZVRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpLnRvU3RyaW5nKCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGhvbGRlclR5cGU7XG4gICAgfVxuXG4gICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSxcbiAgICAgICAgYnlUeXBlID0ge307XG5cbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuQ1NTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5SRVNPVVJDRV9VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSB0cnVzdGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSBzcGVjaWZpZWQgY29udGV4dC4gVGhpcyB0cnVzdGVkXG4gICAgICogb2JqZWN0IHdpbGwgbGF0ZXIgb24gYmUgdXNlZCBhcy1pcywgd2l0aG91dCBhbnkgc2VjdXJpdHkgY2hlY2ssIGJ5IGJpbmRpbmdzIG9yIGRpcmVjdGl2ZXNcbiAgICAgKiB0aGF0IHJlcXVpcmUgdGhpcyBzZWN1cml0eSBjb250ZXh0LlxuICAgICAqIEZvciBpbnN0YW5jZSwgbWFya2luZyBhIHN0cmluZyBhcyB0cnVzdGVkIGZvciB0aGUgYCRzY2UuSFRNTGAgY29udGV4dCB3aWxsIGVudGlyZWx5IGJ5cGFzc1xuICAgICAqIHRoZSBwb3RlbnRpYWwgYCRzYW5pdGl6ZWAgY2FsbCBpbiBjb3JyZXNwb25kaW5nIGAkc2NlLkhUTUxgIGJpbmRpbmdzIG9yIGRpcmVjdGl2ZXMsIHN1Y2ggYXNcbiAgICAgKiBgbmctYmluZC1odG1sYC4gTm90ZSB0aGF0IGluIG1vc3QgY2FzZXMgeW91IHdvbid0IG5lZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uOiBpZiB5b3UgaGF2ZSB0aGVcbiAgICAgKiBzYW5pdGl6ZXIgbG9hZGVkLCBwYXNzaW5nIHRoZSB2YWx1ZSBpdHNlbGYgd2lsbCByZW5kZXIgYWxsIHRoZSBIVE1MIHRoYXQgZG9lcyBub3QgcG9zZSBhXG4gICAgICogc2VjdXJpdHkgcmlzay5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgZ2V0VHJ1c3RlZH0gZm9yIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgY29uc3VtZSB0aG9zZVxuICAgICAqIHRydXN0ZWQgdmFsdWVzLCBhbmQge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGdlbmVyYWwgZG9jdW1lbnRhdGlvbiBhYm91dCBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UsIGUuZy4gYCRzY2UuVVJMYCxcbiAgICAgKiAgICAgYCRzY2UuUkVTT1VSQ0VfVVJMYCwgYCRzY2UuSFRNTGAsIGAkc2NlLkpTYCBvciBgJHNjZS5DU1NgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkLlxuICAgICAqIEByZXR1cm4geyp9IEEgdHJ1c3RlZCByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZSwgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgZ2l2ZW4gY29udGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVzdEFzKHR5cGUsIHRydXN0ZWRWYWx1ZSkge1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpY29udGV4dCcsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgdmFsdWUgaW4gaW52YWxpZCBjb250ZXh0LiBDb250ZXh0OiB7MH07IFZhbHVlOiB7MX0nLFxuICAgICAgICAgICAgdHlwZSwgdHJ1c3RlZFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cnVzdGVkVmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodHJ1c3RlZFZhbHVlKSB8fCB0cnVzdGVkVmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVzdGVkVmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBBbGwgdGhlIGN1cnJlbnQgY29udGV4dHMgaW4gU0NFX0NPTlRFWFRTIGhhcHBlbiB0byBiZSBzdHJpbmdzLiAgSW4gb3JkZXIgdG8gYXZvaWQgdHJ1c3RpbmdcbiAgICAgIC8vIG11dGFibGUgb2JqZWN0cywgd2UgZW5zdXJlIGhlcmUgdGhhdCB0aGUgdmFsdWUgcGFzc2VkIGluIGlzIGFjdHVhbGx5IGEgc3RyaW5nLlxuICAgICAgaWYgKHR5cGVvZiB0cnVzdGVkVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l0eXBlJyxcbiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSBub24tc3RyaW5nIHZhbHVlIGluIGEgY29udGVudCByZXF1aXJpbmcgYSBzdHJpbmc6IENvbnRleHQ6IHswfScsXG4gICAgICAgICAgICB0eXBlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodHJ1c3RlZFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3ZhbHVlT2ZcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGhhZCBiZWVuIHJldHVybmVkIGJ5IGEgcHJpb3IgY2FsbCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyB0aGUgdmFsdWUgdGhhdCBoYWQgYmVlbiBwYXNzZWQgdG8ge0BsaW5rXG4gICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uXG4gICAgICpcbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBpcyBub3QgYSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHJldHVybmVkIGJ5IHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCBpdCBtdXN0IGJlIHJldHVybmVkIGFzLWlzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9XG4gICAgICogICAgIGNhbGwgb3IgYW55dGhpbmcgZWxzZS5cbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiBgdmFsdWVgIGlzIHRoZSByZXN1bHQgb2Ygc3VjaCBhIGNhbGwuICBPdGhlcndpc2UsIHJldHVybnNcbiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVPZihtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUYWtlcyBhbnkgaW5wdXQsIGFuZCBlaXRoZXIgcmV0dXJucyBhIHZhbHVlIHRoYXQncyBzYWZlIHRvIHVzZSBpbiB0aGUgc3BlY2lmaWVkIGNvbnRleHQsIG9yXG4gICAgICogdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKlxuICAgICAqIEluIHByYWN0aWNlLCB0aGVyZSBhcmUgc2V2ZXJhbCBjYXNlcy4gV2hlbiBnaXZlbiBhIHN0cmluZywgdGhpcyBmdW5jdGlvbiBydW5zIGNoZWNrc1xuICAgICAqIGFuZCBzYW5pdGl6YXRpb24gdG8gbWFrZSBpdCBzYWZlIHdpdGhvdXQgcHJpb3IgYXNzdW1wdGlvbnMuIFdoZW4gZ2l2ZW4gdGhlIHJlc3VsdCBvZiBhIHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwsIGl0IHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWRcbiAgICAgKiB2YWx1ZSBpZiB0aGF0IHZhbHVlJ3MgY29udGV4dCBpcyB2YWxpZCBmb3IgdGhpcyBjYWxsJ3MgY29udGV4dC4gRmluYWxseSwgdGhpcyBmdW5jdGlvbiBjYW5cbiAgICAgKiBhbHNvIHRocm93IHdoZW4gdGhlcmUgaXMgbm8gd2F5IHRvIHR1cm4gYG1heWJlVHJ1c3RlZGAgaW4gYSBzYWZlIHZhbHVlIChlLmcuLCBubyBzYW5pdGl6YXRpb25cbiAgICAgKiBpcyBhdmFpbGFibGUgb3IgcG9zc2libGUuKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkIChzdWNoIGFzIGAkc2NlLkhUTUxgKS5cbiAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwsIG9yIGFueXRoaW5nIGVsc2UgKHdoaWNoIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC4pXG4gICAgICogQHJldHVybiB7Kn0gQSB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIGdpdmVuIGNvbnRleHQsIG9yIHRocm93cyBhblxuICAgICAqICAgICBleGNlcHRpb24gaWYgdGhpcyBpcyBpbXBvc3NpYmxlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWQodHlwZSwgbWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKG1heWJlVHJ1c3RlZCkgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgLy8gSWYgbWF5YmVUcnVzdGVkIGlzIGEgdHJ1c3RlZCBjbGFzcyBpbnN0YW5jZSBvciBzdWJjbGFzcyBpbnN0YW5jZSwgdGhlbiB1bndyYXAgYW5kIHJldHVyblxuICAgICAgLy8gYXMtaXMuXG4gICAgICBpZiAoY29uc3RydWN0b3IgJiYgbWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlLCBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBtYXkgZWl0aGVyIG1ha2UgaXQgc2FmZSwgb3IgdGhyb3cgYW4gZXhjZXB0aW9uLiBUaGlzXG4gICAgICAvLyBkZXBlbmRzIG9uIHRoZSBjb250ZXh0OiBzb21lIGFyZSBzYW5pdGl6YXRpYmxlIChIVE1MKSwgc29tZSB1c2Ugd2hpdGVsaXN0cyAoUkVTT1VSQ0VfVVJMKSxcbiAgICAgIC8vIHNvbWUgYXJlIGltcG9zc2libGUgdG8gZG8gKEpTKS4gVGhpcyBzdGVwIGlzbid0IGltcGxlbWVudGVkIGZvciBDU1MgYW5kIFVSTCwgYXMgQW5ndWxhckpTXG4gICAgICAvLyBoYXMgbm8gY29ycmVzcG9uZGluZyBzaW5rcy5cbiAgICAgIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMKSB7XG4gICAgICAgIC8vIFJFU09VUkNFX1VSTCB1c2VzIGEgd2hpdGVsaXN0LlxuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXG4gICAgICAgICAgICAgICdCbG9ja2VkIGxvYWRpbmcgcmVzb3VyY2UgZnJvbSB1cmwgbm90IGFsbG93ZWQgYnkgJHNjZURlbGVnYXRlIHBvbGljeS4gIFVSTDogezB9JyxcbiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XG4gICAgICAgIC8vIGh0bWxTYW5pdGl6ZXIgdGhyb3dzIGl0cyBvd24gZXJyb3Igd2hlbiBubyBzYW5pdGl6ZXIgaXMgYXZhaWxhYmxlLlxuICAgICAgICByZXR1cm4gaHRtbFNhbml0aXplcihtYXliZVRydXN0ZWQpO1xuICAgICAgfVxuICAgICAgLy8gRGVmYXVsdCBlcnJvciB3aGVuIHRoZSAkc2NlIHNlcnZpY2UgaGFzIG5vIHdheSB0byBtYWtlIHRoZSBpbnB1dCBzYWZlLlxuICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyB0cnVzdEFzOiB0cnVzdEFzLFxuICAgICAgICAgICAgIGdldFRydXN0ZWQ6IGdldFRydXN0ZWQsXG4gICAgICAgICAgICAgdmFsdWVPZjogdmFsdWVPZiB9O1xuICB9XTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZVByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXG4gKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZVxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJHNjZWAgaXMgYSBzZXJ2aWNlIHRoYXQgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgc2VydmljZXMgdG8gQW5ndWxhckpTLlxuICpcbiAqICMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmdcbiAqXG4gKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBpcyBhIG1vZGUgaW4gd2hpY2ggQW5ndWxhckpTIGNvbnN0cmFpbnMgYmluZGluZ3MgdG8gb25seSByZW5kZXJcbiAqIHRydXN0ZWQgdmFsdWVzLiBJdHMgZ29hbCBpcyB0byBhc3Npc3QgaW4gd3JpdGluZyBjb2RlIGluIGEgd2F5IHRoYXQgKGEpIGlzIHNlY3VyZSBieSBkZWZhdWx0LCBhbmRcbiAqIChiKSBtYWtlcyBhdWRpdGluZyBmb3Igc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIHN1Y2ggYXMgWFNTLCBjbGlja2phY2tpbmcsIGV0Yy4gYSBsb3QgZWFzaWVyLlxuICpcbiAqICMjIE92ZXJ2aWV3XG4gKlxuICogVG8gc3lzdGVtYXRpY2FsbHkgYmxvY2sgWFNTIHNlY3VyaXR5IGJ1Z3MsIEFuZ3VsYXJKUyB0cmVhdHMgYWxsIHZhbHVlcyBhcyB1bnRydXN0ZWQgYnkgZGVmYXVsdCBpblxuICogSFRNTCBvciBzZW5zaXRpdmUgVVJMIGJpbmRpbmdzLiBXaGVuIGJpbmRpbmcgdW50cnVzdGVkIHZhbHVlcywgQW5ndWxhckpTIHdpbGwgYXV0b21hdGljYWxseVxuICogcnVuIHNlY3VyaXR5IGNoZWNrcyBvbiB0aGVtIChzYW5pdGl6YXRpb25zLCB3aGl0ZWxpc3RzLCBkZXBlbmRpbmcgb24gY29udGV4dCksIG9yIHRocm93IHdoZW4gaXRcbiAqIGNhbm5vdCBndWFyYW50ZWUgdGhlIHNlY3VyaXR5IG9mIHRoZSByZXN1bHQuIFRoYXQgYmVoYXZpb3IgZGVwZW5kcyBzdHJvbmdseSBvbiBjb250ZXh0czogSFRNTFxuICogY2FuIGJlIHNhbml0aXplZCwgYnV0IHRlbXBsYXRlIFVSTHMgY2Fubm90LCBmb3IgaW5zdGFuY2UuXG4gKlxuICogVG8gaWxsdXN0cmF0ZSB0aGlzLCBjb25zaWRlciB0aGUgYG5nLWJpbmQtaHRtbGAgZGlyZWN0aXZlLiBJdCByZW5kZXJzIGl0cyB2YWx1ZSBkaXJlY3RseSBhcyBIVE1MOlxuICogd2UgY2FsbCB0aGF0IHRoZSAqY29udGV4dCouIFdoZW4gZ2l2ZW4gYW4gdW50cnVzdGVkIGlucHV0LCBBbmd1bGFySlMgd2lsbCBhdHRlbXB0IHRvIHNhbml0aXplIGl0XG4gKiBiZWZvcmUgcmVuZGVyaW5nIGlmIGEgc2FuaXRpemVyIGlzIGF2YWlsYWJsZSwgYW5kIHRocm93IG90aGVyd2lzZS4gVG8gYnlwYXNzIHNhbml0aXphdGlvbiBhbmRcbiAqIHJlbmRlciB0aGUgaW5wdXQgYXMtaXMsIHlvdSB3aWxsIG5lZWQgdG8gbWFyayBpdCBhcyB0cnVzdGVkIGZvciB0aGF0IGNvbnRleHQgYmVmb3JlIGF0dGVtcHRpbmdcbiAqIHRvIGJpbmQgaXQuXG4gKlxuICogQXMgb2YgdmVyc2lvbiAxLjIsIEFuZ3VsYXJKUyBzaGlwcyB3aXRoIFNDRSBlbmFibGVkIGJ5IGRlZmF1bHQuXG4gKlxuICogIyMgSW4gcHJhY3RpY2VcbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gKlxuICogYGBgXG4gKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiIGFyaWEtbGFiZWw9XCJVc2VyIGlucHV0XCI+XG4gKiA8ZGl2IG5nLWJpbmQtaHRtbD1cInVzZXJIdG1sXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRVxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYsIHdoaWNoIHdvdWxkXG4gKiBiZSBhbiBYU1Mgc2VjdXJpdHkgYnVnLiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2dcbiAqIGFydGljbGVzLCBldGMuIHZpYSBiaW5kaW5ncy4gKEhUTUwgaXMganVzdCBvbmUgZXhhbXBsZSBvZiBhIGNvbnRleHQgd2hlcmUgcmVuZGVyaW5nIHVzZXJcbiAqIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlcyBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuKVxuICpcbiAqIEZvciB0aGUgY2FzZSBvZiBIVE1MLCB5b3UgbWlnaHQgdXNlIGEgbGlicmFyeSwgZWl0aGVyIG9uIHRoZSBjbGllbnQgc2lkZSwgb3Igb24gdGhlIHNlcnZlciBzaWRlLFxuICogdG8gc2FuaXRpemUgdW5zYWZlIEhUTUwgYmVmb3JlIGJpbmRpbmcgdG8gdGhlIHZhbHVlIGFuZCByZW5kZXJpbmcgaXQgaW4gdGhlIGRvY3VtZW50LlxuICpcbiAqIEhvdyB3b3VsZCB5b3UgZW5zdXJlIHRoYXQgZXZlcnkgcGxhY2UgdGhhdCB1c2VkIHRoZXNlIHR5cGVzIG9mIGJpbmRpbmdzIHdhcyBib3VuZCB0byBhIHZhbHVlIHRoYXRcbiAqIHdhcyBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5IChvciByZXR1cm5lZCBhcyBzYWZlIGZvciByZW5kZXJpbmcgYnkgeW91ciBzZXJ2ZXI/KSAgSG93IGNhbiB5b3VcbiAqIGVuc3VyZSB0aGF0IHlvdSBkaWRuJ3QgYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgbGluZSB0aGF0IHNhbml0aXplZCB0aGUgdmFsdWUsIG9yIHJlbmFtZWQgc29tZVxuICogcHJvcGVydGllcy9maWVsZHMgYW5kIGZvcmdvdCB0byB1cGRhdGUgdGhlIGJpbmRpbmcgdG8gdGhlIHNhbml0aXplZCB2YWx1ZT9cbiAqXG4gKiBUbyBiZSBzZWN1cmUgYnkgZGVmYXVsdCwgQW5ndWxhckpTIG1ha2VzIHN1cmUgYmluZGluZ3MgZ28gdGhyb3VnaCB0aGF0IHNhbml0aXphdGlvbiwgb3JcbiAqIGFueSBzaW1pbGFyIHZhbGlkYXRpb24gcHJvY2VzcywgdW5sZXNzIHRoZXJlJ3MgYSBnb29kIHJlYXNvbiB0byB0cnVzdCB0aGUgZ2l2ZW4gdmFsdWUgaW4gdGhpc1xuICogY29udGV4dC4gIFRoYXQgdHJ1c3QgaXMgZm9ybWFsaXplZCB3aXRoIGEgZnVuY3Rpb24gY2FsbC4gVGhpcyBtZWFucyB0aGF0IGFzIGEgZGV2ZWxvcGVyLCB5b3VcbiAqIGNhbiBhc3N1bWUgYWxsIHVudHJ1c3RlZCBiaW5kaW5ncyBhcmUgc2FmZS4gVGhlbiwgdG8gYXVkaXQgeW91ciBjb2RlIGZvciBiaW5kaW5nIHNlY3VyaXR5IGlzc3VlcyxcbiAqIHlvdSBqdXN0IG5lZWQgdG8gZW5zdXJlIHRoZSB2YWx1ZXMgeW91IG1hcmsgYXMgdHJ1c3RlZCBpbmRlZWQgYXJlIHNhZmUgLSBiZWNhdXNlIHRoZXkgd2VyZVxuICogcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlciwgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSwgZXRjLiBZb3UgY2FuIG9yZ2FuaXplIHlvdXIgY29kZWJhc2UgdG9cbiAqIGhlbHAgd2l0aCB0aGlzIC0gcGVyaGFwcyBhbGxvd2luZyBvbmx5IHRoZSBmaWxlcyBpbiBhIHNwZWNpZmljIGRpcmVjdG9yeSB0byBkbyB0aGlzLlxuICogRW5zdXJpbmcgdGhhdCB0aGUgaW50ZXJuYWwgQVBJIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuXG4gKiBiZWNvbWVzIGEgbW9yZSBtYW5hZ2VhYmxlIHRhc2suXG4gKlxuICogSW4gdGhlIGNhc2Ugb2YgQW5ndWxhckpTJyBTQ0Ugc2VydmljZSwgb25lIHVzZXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9XG4gKiAoYW5kIHNob3J0aGFuZCBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0sIGV0Yy4pIHRvXG4gKiBidWlsZCB0aGUgdHJ1c3RlZCB2ZXJzaW9ucyBvZiB5b3VyIHZhbHVlcy5cbiAqXG4gKiAjIyBIb3cgZG9lcyBpdCB3b3JrP1xuICpcbiAqIEluIHByaXZpbGVnZWQgY29udGV4dHMsIGRpcmVjdGl2ZXMgYW5kIGNvZGUgd2lsbCBiaW5kIHRvIHRoZSByZXN1bHQgb2Yge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFxuICogJHNjZS5nZXRUcnVzdGVkKGNvbnRleHQsIHZhbHVlKX0gcmF0aGVyIHRoYW4gdG8gdGhlIHZhbHVlIGRpcmVjdGx5LiAgVGhpbmsgb2YgdGhpcyBmdW5jdGlvbiBhc1xuICogYSB3YXkgdG8gZW5mb3JjZSB0aGUgcmVxdWlyZWQgc2VjdXJpdHkgY29udGV4dCBpbiB5b3VyIGRhdGEgc2luay4gRGlyZWN0aXZlcyB1c2Uge0BsaW5rXG4gKiBuZy4kc2NlI3BhcnNlQXMgJHNjZS5wYXJzZUFzfSByYXRoZXIgdGhhbiBgJHBhcnNlYCB0byB3YXRjaCBhdHRyaWJ1dGUgYmluZGluZ3MsIHdoaWNoIHBlcmZvcm1zXG4gKiB0aGUge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9IGJlaGluZCB0aGUgc2NlbmVzIG9uIG5vbi1jb25zdGFudCBsaXRlcmFscy4gQWxzbyxcbiAqIHdoZW4gYmluZGluZyB3aXRob3V0IGRpcmVjdGl2ZXMsIEFuZ3VsYXJKUyB3aWxsIHVuZGVyc3RhbmQgdGhlIGNvbnRleHQgb2YgeW91ciBiaW5kaW5nc1xuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBBcyBhbiBleGFtcGxlLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gdXNlcyB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBc0h0bWwgJHNjZS5wYXJzZUFzSHRtbChiaW5kaW5nIGV4cHJlc3Npb24pfS4gIEhlcmUncyB0aGUgYWN0dWFsIGNvZGUgKHNsaWdodGx5XG4gKiBzaW1wbGlmaWVkKTpcbiAqXG4gKiBgYGBcbiAqIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICogICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAqICAgICBzY29wZS4kd2F0Y2goJHNjZS5wYXJzZUFzSHRtbChhdHRyLm5nQmluZEh0bWwpLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTtcbiAqICAgICB9KTtcbiAqICAgfTtcbiAqIH1dO1xuICogYGBgXG4gKlxuICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzXG4gKlxuICogVGhpcyBhcHBsaWVzIGJvdGggdG8gdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZy1pbmNsdWRlYH0gZGlyZWN0aXZlIGFzIHdlbGwgYXNcbiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBBbmd1bGFyIG9ubHkgbG9hZHMgdGVtcGxhdGVzIGZyb20gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGUgYXBwbGljYXRpb25cbiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gdGhlIHRlbXBsYXRlIFVSTC4gIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBhbmQvb3JcbiAqIHByb3RvY29scywgeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdFxuICogdGhlbX0gb3Ige0BsaW5rIG5nLiRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgaXR9IGludG8gYSB0cnVzdGVkIHZhbHVlLlxuICpcbiAqICpQbGVhc2Ugbm90ZSo6XG4gKiBUaGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IGFwcGx5IGluIGFkZGl0aW9uIHRvIHRoaXMgYW5kIG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseVxuICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpblxuICogd29uJ3Qgd29yayBvbiBhbGwgYnJvd3NlcnMuICBBbHNvLCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGBmaWxlOi8vYCBVUkwgZG9lcyBub3Qgd29yayBvbiBzb21lXG4gKiBicm93c2Vycy5cbiAqXG4gKiAjIyBUaGlzIGZlZWxzIGxpa2UgdG9vIG11Y2ggb3ZlcmhlYWRcbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy5cbiAqXG4gKiBJZiB5b3VyIGV4cHJlc3Npb25zIGFyZSBjb25zdGFudCBsaXRlcmFscywgdGhleSdyZSBhdXRvbWF0aWNhbGx5IHRydXN0ZWQgYW5kIHlvdSBkb24ndCBuZWVkIHRvXG4gKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKGUuZy5cbiAqIGA8ZGl2IG5nLWJpbmQtaHRtbD1cIic8Yj5pbXBsaWNpdGx5IHRydXN0ZWQ8L2I+J1wiPjwvZGl2PmApIGp1c3Qgd29ya3MuIFRoZSBgJHNjZURlbGVnYXRlYCB3aWxsXG4gKiBhbHNvIHVzZSB0aGUgYCRzYW5pdGl6ZWAgc2VydmljZSBpZiBpdCBpcyBhdmFpbGFibGUgd2hlbiBiaW5kaW5nIHVudHJ1c3RlZCB2YWx1ZXMgdG9cbiAqIGAkc2NlLkhUTUxgIGNvbnRleHQuIEFuZ3VsYXJKUyBwcm92aWRlcyBhbiBpbXBsZW1lbnRhdGlvbiBpbiBgYW5ndWxhci1zYW5pdGl6ZS5qc2AsIGFuZCBpZiB5b3VcbiAqIHdpc2ggdG8gdXNlIGl0LCB5b3Ugd2lsbCBhbHNvIG5lZWQgdG8gZGVwZW5kIG9uIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSBgbmdTYW5pdGl6ZWB9IG1vZHVsZSBpblxuICogeW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZFxuICogdGVtcGxhdGVzIGluIGBuZy1pbmNsdWRlYCBmcm9tIHlvdXIgYXBwbGljYXRpb24ncyBkb21haW4gd2l0aG91dCBoYXZpbmcgdG8gZXZlbiBrbm93IGFib3V0IFNDRS5cbiAqIEl0IGJsb2NrcyBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgbG9hZGluZyB0ZW1wbGF0ZXMgb3ZlciBodHRwIGZyb20gYW4gaHR0cHNcbiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0c30gYW5kIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgYmxhY2tsaXN0c30gZm9yIG1hdGNoaW5nIHN1Y2ggVVJMcy5cbiAqXG4gKiBUaGlzIHNpZ25pZmljYW50bHkgcmVkdWNlcyB0aGUgb3ZlcmhlYWQuICBJdCBpcyBmYXIgZWFzaWVyIHRvIHBheSB0aGUgc21hbGwgb3ZlcmhlYWQgYW5kIGhhdmUgYW5cbiAqIGFwcGxpY2F0aW9uIHRoYXQncyBzZWN1cmUgYW5kIGNhbiBiZSBhdWRpdGVkIHRvIHZlcmlmeSB0aGF0IHdpdGggbXVjaCBtb3JlIGVhc2UgdGhhbiBib2x0aW5nXG4gKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLlxuICpcbiAqIDxhIG5hbWU9XCJjb250ZXh0c1wiPjwvYT5cbiAqICMjIFdoYXQgdHJ1c3RlZCBjb250ZXh0IHR5cGVzIGFyZSBzdXBwb3J0ZWQ/XG4gKlxuICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJHNjZS5IVE1MYCAgICAgICAgIHwgRm9yIEhUTUwgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgdXNlcyB0aGlzIGNvbnRleHQgZm9yIGJpbmRpbmdzLiBJZiBhbiB1bnNhZmUgdmFsdWUgaXMgZW5jb3VudGVyZWQsIGFuZCB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZSBpcyBhdmFpbGFibGUgKGltcGxlbWVudGVkIGJ5IHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSBuZ1Nhbml0aXplfSBtb2R1bGUpIHRoaXMgd2lsbCBzYW5pdGl6ZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvci4gfFxuICogfCBgJHNjZS5DU1NgICAgICAgICAgIHwgRm9yIENTUyB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBDdXJyZW50bHksIG5vIGJpbmRpbmdzIHJlcXVpcmUgdGhpcyBjb250ZXh0LiBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqIHwgYCRzY2UuVVJMYCAgICAgICAgICB8IEZvciBVUkxzIHRoYXQgYXJlIHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLiAgQ3VycmVudGx5IHVudXNlZCAoYDxhIGhyZWY9YCwgYDxpbWcgc3JjPWAsIGFuZCBzb21lIG90aGVycyBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zdGl0dXRlIGFuIFNDRSBjb250ZXh0LikgfFxuICogfCBgJHNjZS5SRVNPVVJDRV9VUkxgIHwgRm9yIFVSTHMgdGhhdCBhcmUgbm90IG9ubHkgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MsIGJ1dCB3aG9zZSBjb250ZW50cyBhcmUgYWxzbyBzYWZlIHRvIGluY2x1ZGUgaW4geW91ciBhcHBsaWNhdGlvbi4gIEV4YW1wbGVzIGluY2x1ZGUgYG5nLWluY2x1ZGVgLCBgc3JjYCAvIGBuZ1NyY2AgYmluZGluZ3MgZm9yIHRhZ3Mgb3RoZXIgdGhhbiBgSU1HYCwgYFZJREVPYCwgYEFVRElPYCwgYFNPVVJDRWAsIGFuZCBgVFJBQ0tgIChlLmcuIGBJRlJBTUVgLCBgT0JKRUNUYCwgZXRjLikgIDxicj48YnI+Tm90ZSB0aGF0IGAkc2NlLlJFU09VUkNFX1VSTGAgbWFrZXMgYSBzdHJvbmdlciBzdGF0ZW1lbnQgYWJvdXQgdGhlIFVSTCB0aGFuIGAkc2NlLlVSTGAgZG9lcyAoaXQncyBub3QganVzdCB0aGUgVVJMIHRoYXQgbWF0dGVycywgYnV0IGFsc28gd2hhdCBpcyBhdCB0aGUgZW5kIG9mIGl0KSwgYW5kIHRoZXJlZm9yZSBjb250ZXh0cyByZXF1aXJpbmcgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlJFU09VUkNFX1VSTGAgY2FuIGJlIHVzZWQgYW55d2hlcmUgdGhhdCB2YWx1ZXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBhcmUgcmVxdWlyZWQuIHxcbiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5LCBubyBiaW5kaW5ncyByZXF1aXJlIHRoaXMgY29udGV4dC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICpcbiAqXG4gKiBCZSBhd2FyZSB0aGF0IGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW1cbiAqIHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9LiBUaGVyZSdzIG5vIENTUy0sIFVSTC0sIG9yIEpTLWNvbnRleHQgYmluZGluZ3NcbiAqIGluIEFuZ3VsYXJKUyBjdXJyZW50bHksIHNvIHRoZWlyIGNvcnJlc3BvbmRpbmcgYCRzY2UudHJ1c3RBc2AgZnVuY3Rpb25zIGFyZW4ndCB1c2VmdWwgeWV0LiBUaGlzXG4gKiBtaWdodCBldm9sdmUuXG4gKlxuICogIyMgRm9ybWF0IG9mIGl0ZW1zIGluIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCByZXNvdXJjZVVybFdoaXRlbGlzdH0ve0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IEJsYWNrbGlzdH0gPGEgbmFtZT1cInJlc291cmNlVXJsUGF0dGVybkl0ZW1cIj48L2E+XG4gKlxuICogIEVhY2ggZWxlbWVudCBpbiB0aGVzZSBhcnJheXMgbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgLSAqKidzZWxmJyoqXG4gKiAgICAtIFRoZSBzcGVjaWFsICoqc3RyaW5nKiosIGAnc2VsZidgLCBjYW4gYmUgdXNlZCB0byBtYXRjaCBhZ2FpbnN0IGFsbCBVUkxzIG9mIHRoZSAqKnNhbWVcbiAqICAgICAgZG9tYWluKiogYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVzaW5nIHRoZSAqKnNhbWUgcHJvdG9jb2wqKi5cbiAqICAtICoqU3RyaW5nKiogKGV4Y2VwdCB0aGUgc3BlY2lhbCB2YWx1ZSBgJ3NlbGYnYClcbiAqICAgIC0gVGhlIHN0cmluZyBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGZ1bGwgKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZVxuICogICAgICBiZWluZyB0ZXN0ZWQgKHN1YnN0cmluZyBtYXRjaGVzIGFyZSBub3QgZ29vZCBlbm91Z2guKVxuICogICAgLSBUaGVyZSBhcmUgZXhhY3RseSAqKnR3byB3aWxkY2FyZCBzZXF1ZW5jZXMqKiAtIGAqYCBhbmQgYCoqYC4gIEFsbCBvdGhlciBjaGFyYWN0ZXJzXG4gKiAgICAgIG1hdGNoIHRoZW1zZWx2ZXMuXG4gKiAgICAtIGAqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDZcbiAqICAgICAgY2hhcmFjdGVyczogJ2A6YCcsICdgL2AnLCAnYC5gJywgJ2A/YCcsICdgJmAnIGFuZCAnYDtgJy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZVxuICogICAgICBpbiBhIHdoaXRlbGlzdC5cbiAqICAgIC0gYCoqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgKmFueSogY2hhcmFjdGVyLiAgQXMgc3VjaCwgaXQncyBub3RcbiAqICAgICAgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0XG4gKiAgICAgIG5vdCBoYXZlIGJlZW4gdGhlIGludGVudGlvbi4pICBJdHMgdXNhZ2UgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBwYXRoIGlzIG9rLiAgKGUuZy5cbiAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKVxuICogICAgLSAqQ2F2ZWF0KjogIFdoaWxlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHBvd2VyZnVsIGFuZCBvZmZlciBncmVhdCBmbGV4aWJpbGl0eSwgIHRoZWlyIHN5bnRheFxuICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZFxuICogICAgICBoYXZlIGdvb2QgdGVzdCBjb3ZlcmFnZSkuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYVxuICogICAgICBzbWFsbCBudW1iZXIgb2YgY2FzZXMuICBBIGAuYCBjaGFyYWN0ZXIgaW4gdGhlIHJlZ2V4IHVzZWQgd2hlbiBtYXRjaGluZyB0aGUgc2NoZW1lIG9yIGFcbiAqICAgICAgc3ViZG9tYWluIGNvdWxkIGJlIG1hdGNoZWQgYWdhaW5zdCBhIGA6YCBvciBsaXRlcmFsIGAuYCB0aGF0IHdhcyBsaWtlbHkgbm90IGludGVuZGVkLiAgIEl0XG4gKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9uc1xuICogICAgICBhcyBhIGxhc3QgcmVzb3J0LlxuICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpc1xuICogICAgICBtYXRjaGVkIGFnYWluc3QgdGhlICoqZW50aXJlKiogKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZSBiZWluZyB0ZXN0ZWRcbiAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLlxuICogICAgLSBJZiB5b3UgYXJlIGdlbmVyYXRpbmcgeW91ciBKYXZhU2NyaXB0IGZyb20gc29tZSBvdGhlciB0ZW1wbGF0aW5nIGVuZ2luZSAobm90XG4gKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhblxuICogICAgICBvbmUgbGV2ZWwgb2YgZXNjYXBpbmcgZGVwZW5kaW5nIG9uIHlvdXIgdGVtcGxhdGluZyBlbmdpbmUgYW5kIHRoZSB3YXkgeW91IGludGVycG9sYXRlZFxuICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgRS5nLiBSdWJ5IGhhc1xuICogICAgICBbUmVnZXhwLmVzY2FwZShzdHIpXShodHRwOi8vd3d3LnJ1YnktZG9jLm9yZy9jb3JlLTIuMC4wL1JlZ2V4cC5odG1sI21ldGhvZC1jLWVzY2FwZSlcbiAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlXG4gKiAgICAgIENsb3N1cmUgbGlicmFyeSdzIFtnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUocyldKFxuICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCIgbmFtZT1cInNjZS1zZXJ2aWNlXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJBcHBDb250cm9sbGVyIGFzIG15Q3RybFwiPlxuICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPlxuICogICAgIEJ5IGRlZmF1bHQsIEhUTUwgdGhhdCBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQgKGUuZy4gQWxpY2UncyBjb21tZW50KSBpcyBzYW5pdGl6ZWQgd2hlblxuICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICogICAgIGV4cGxvaXQuXG4gKiAgICAgPGRpdiBjbGFzcz1cIndlbGxcIj5cbiAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICogICAgICAgICA8Yj57e3VzZXJDb21tZW50Lm5hbWV9fTwvYj46XG4gKiAgICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD1cInVzZXJDb21tZW50Lmh0bWxDb21tZW50XCIgY2xhc3M9XCJodG1sQ29tbWVudFwiPjwvc3Bhbj5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRzY2UnLFxuICogICAgICAgZnVuY3Rpb24gQXBwQ29udHJvbGxlcigkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRzY2UpIHtcbiAqICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICogICAgICAgICAkaHR0cC5nZXQoJ3Rlc3RfZGF0YS5qc29uJywge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAqICAgICAgICAgICBzZWxmLnVzZXJDb21tZW50cyA9IHJlc3BvbnNlLmRhdGE7XG4gKiAgICAgICAgIH0pO1xuICogICAgICAgICBzZWxmLmV4cGxpY2l0bHlUcnVzdGVkSHRtbCA9ICRzY2UudHJ1c3RBc0h0bWwoXG4gKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgICB9XSk7XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInRlc3RfZGF0YS5qc29uXCI+XG4gKiBbXG4gKiAgIHsgXCJuYW1lXCI6IFwiQWxpY2VcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6XG4gKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICogICB9LFxuICogICB7IFwibmFtZVwiOiBcIkJvYlwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAqICAgfVxuICogXVxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICogICAgIGl0KCdzaG91bGQgc2FuaXRpemUgdW50cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnLmh0bWxDb21tZW50JykpLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdpbm5lckhUTUwnKSlcbiAqICAgICAgICAgICAudG9CZSgnPHNwYW4+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPicpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIE5PVCBzYW5pdGl6ZSBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZXhwbGljaXRseVRydXN0ZWRIdG1sJykpLmdldEF0dHJpYnV0ZSgnaW5uZXJIVE1MJykpLnRvQmUoXG4gKiAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPVwidGhpcy50ZXh0Q29udGVudD0mcXVvdDtFeHBsaWNpdGx5IHRydXN0ZWQgSFRNTCBieXBhc3NlcyAnICtcbiAqICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqICAgfSk7XG4gKiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqXG4gKiAjIyBDYW4gSSBkaXNhYmxlIFNDRSBjb21wbGV0ZWx5P1xuICpcbiAqIFllcywgeW91IGNhbi4gIEhvd2V2ZXIsIHRoaXMgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuICBTQ0UgZ2l2ZXMgeW91IGEgbG90IG9mIHNlY3VyaXR5IGJlbmVmaXRzXG4gKiBmb3IgbGl0dGxlIGNvZGluZyBvdmVyaGVhZC4gIEl0IHdpbGwgYmUgbXVjaCBoYXJkZXIgdG8gdGFrZSBhbiBTQ0UgZGlzYWJsZWQgYXBwbGljYXRpb24gYW5kXG4gKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0VcbiAqIGZvciBjYXNlcyB3aGVyZSB5b3UgaGF2ZSBhIGxvdCBvZiBleGlzdGluZyBjb2RlIHRoYXQgd2FzIHdyaXR0ZW4gYmVmb3JlIFNDRSB3YXMgaW50cm9kdWNlZCBhbmRcbiAqIHlvdSdyZSBtaWdyYXRpbmcgdGhlbSBhIG1vZHVsZSBhdCBhIHRpbWUuIEFsc28gZG8gbm90ZSB0aGF0IHRoaXMgaXMgYW4gYXBwLXdpZGUgc2V0dGluZywgc28gaWZcbiAqIHlvdSBhcmUgd3JpdGluZyBhIGxpYnJhcnksIHlvdSB3aWxsIGNhdXNlIHNlY3VyaXR5IGJ1Z3MgYXBwbGljYXRpb25zIHVzaW5nIGl0LlxuICpcbiAqIFRoYXQgc2FpZCwgaGVyZSdzIGhvdyB5b3UgY2FuIGNvbXBsZXRlbHkgZGlzYWJsZSBTQ0U6XG4gKlxuICogYGBgXG4gKiBhbmd1bGFyLm1vZHVsZSgnbXlBcHBXaXRoU2NlRGlzYWJsZWRteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZVByb3ZpZGVyKSB7XG4gKiAgIC8vIENvbXBsZXRlbHkgZGlzYWJsZSBTQ0UuICBGb3IgZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBvbmx5IVxuICogICAvLyBEbyBub3QgdXNlIGluIG5ldyBwcm9qZWN0cyBvciBsaWJyYXJpZXMuXG4gKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5cbmZ1bmN0aW9uICRTY2VQcm92aWRlcigpIHtcbiAgdmFyIGVuYWJsZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VQcm92aWRlciNlbmFibGVkXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHByb3ZpZGVkLCB0aGVuIGVuYWJsZXMvZGlzYWJsZXMgU0NFIGFwcGxpY2F0aW9uLXdpZGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9O1xuXG5cbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAqXG4gICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGVcbiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnlcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICpcbiAgICogLSB2YWx1ZU9mKHZhbHVlKVxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWZcbiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAqXG4gICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yXG4gICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluXG4gICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvclxuICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkXG4gICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqXG4gICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICpcbiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgKlxuICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiBJbiBzb21lIGZ1dHVyZSwgd2UgbWF5IG5vdCB1c2VcbiAgICogaW5oZXJpdGFuY2UgYW55bW9yZS4gVGhhdCBpcyBPSyBiZWNhdXNlIG5vIGNvZGUgb3V0c2lkZSBvZiBzY2UuanMgYW5kIHNjZVNwZWNzLmpzIHdvdWxkIG5lZWQgdG9cbiAgICogYmUgYXdhcmUgb2YgdGhpcyBkZXRhaWwuXG4gICAqL1xuXG4gIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRzY2VEZWxlZ2F0ZScsIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICRwYXJzZSwgICAkc2NlRGVsZWdhdGUpIHtcbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAvLyBQcmVyZXE6IEVuc3VyZSB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIElFPDExIHF1aXJrcyBtb2RlLiAgSW4gdGhhdCBtb2RlLCBJRSA8IDExIGFsbG93XG4gICAgLy8gdGhlIFwiZXhwcmVzc2lvbihqYXZhc2NyaXB0IGV4cHJlc3Npb24pXCIgc3ludGF4IHdoaWNoIGlzIGluc2VjdXJlLlxuICAgIGlmIChlbmFibGVkICYmIG1zaWUgPCA4KSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCdpZXF1aXJrcycsXG4gICAgICAgICdTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkb2VzIG5vdCBzdXBwb3J0IEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gPCAxMSBpbiBxdWlya3MgJyArXG4gICAgICAgICdtb2RlLiAgWW91IGNhbiBmaXggdGhpcyBieSBhZGRpbmcgdGhlIHRleHQgPCFkb2N0eXBlIGh0bWw+IHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MICcgK1xuICAgICAgICAnZG9jdW1lbnQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgc2NlID0gc2hhbGxvd0NvcHkoU0NFX0NPTlRFWFRTKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2lzRW5hYmxlZFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuICBJZiB5b3Ugd2FudCB0byBzZXQgdGhlIHZhbHVlLCB5b3VcbiAgICAgKiAgICAgaGF2ZSB0byBkbyBpdCBhdCBtb2R1bGUgY29uZmlnIHRpbWUgb24ge0BsaW5rIG5nLiRzY2VQcm92aWRlciAkc2NlUHJvdmlkZXJ9LlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBTQ0UgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBzY2UuaXNFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICB9O1xuICAgIHNjZS50cnVzdEFzID0gJHNjZURlbGVnYXRlLnRydXN0QXM7XG4gICAgc2NlLmdldFRydXN0ZWQgPSAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZDtcbiAgICBzY2UudmFsdWVPZiA9ICRzY2VEZWxlZ2F0ZS52YWx1ZU9mO1xuXG4gICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICBzY2UudHJ1c3RBcyA9IHNjZS5nZXRUcnVzdGVkID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuICAgICAgc2NlLnZhbHVlT2YgPSBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi4gIFRoaXMgaXMgbGlrZSB7QGxpbmtcbiAgICAgKiBuZy4kcGFyc2UgJHBhcnNlfSBhbmQgaXMgaWRlbnRpY2FsIHdoZW4gdGhlIGV4cHJlc3Npb24gaXMgYSBsaXRlcmFsIGNvbnN0YW50LiAgT3RoZXJ3aXNlLCBpdFxuICAgICAqIHdyYXBzIHRoZSBleHByZXNzaW9uIGluIGEgY2FsbCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZCgqdHlwZSosXG4gICAgICogKnJlc3VsdCopfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG4gICAgc2NlLnBhcnNlQXMgPSBmdW5jdGlvbiBzY2VQYXJzZUFzKHR5cGUsIGV4cHIpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAkcGFyc2UoZXhwcik7XG4gICAgICBpZiAocGFyc2VkLmxpdGVyYWwgJiYgcGFyc2VkLmNvbnN0YW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNjZS5nZXRUcnVzdGVkKHR5cGUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIERlbGVnYXRlcyB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uIEFzIHN1Y2gsIHJldHVybnMgYVxuICAgICAqIHdyYXBwZWQgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB5b3VyIHZhbHVlLCBhbmQgdGhlIHRydXN0IHlvdSBoYXZlIGluIGl0cyBzYWZldHkgZm9yIHRoZSBnaXZlblxuICAgICAqIGNvbnRleHQuIEFuZ3VsYXJKUyBjYW4gdGhlbiB1c2UgdGhhdCB2YWx1ZSBhcy1pcyBpbiBiaW5kaW5ncyBvZiB0aGUgc3BlY2lmaWVkIHNlY3VyZSBjb250ZXh0LlxuICAgICAqIFRoaXMgaXMgdXNlZCBpbiBiaW5kaW5ncyBmb3IgYG5nLWJpbmQtaHRtbGAsIGBuZy1pbmNsdWRlYCwgYW5kIG1vc3QgYHNyY2AgYXR0cmlidXRlXG4gICAgICogaW50ZXJwb2xhdGlvbnMuIFNlZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3Igc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZSwgZS5nLiBgJHNjZS5VUkxgLFxuICAgICAqICAgICBgJHNjZS5SRVNPVVJDRV9VUkxgLCBgJHNjZS5IVE1MYCwgYCRzY2UuSlNgIG9yIGAkc2NlLkNTU2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiB0aGUgY29udGV4dCB5b3Ugc3BlY2lmaWVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0h0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuSFRNTGAgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5IVE1MYCBjb250ZXh0IChsaWtlIGBuZy1iaW5kLWh0bWxgKS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXJrIGFzIHRydXN0ZWQgZm9yIGAkc2NlLkNTU2AgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50XG4gICAgICogICAgIG9mIHlvdXIgYHZhbHVlYCBpbiBgJHNjZS5DU1NgIGNvbnRleHQuIFRoaXMgY29udGV4dCBpcyBjdXJyZW50bHkgdW51c2VkLCBzbyB0aGVyZSBhcmVcbiAgICAgKiAgICAgYWxtb3N0IG5vIHJlYXNvbnMgdG8gdXNlIHRoaXMgZnVuY3Rpb24gc28gZmFyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBjb250ZXh0LlxuICAgICAqIEByZXR1cm4geyp9IEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSB0cnVzdGVkIHZhcmlhbnQgb2YgeW91ciBgdmFsdWVgXG4gICAgICogICAgIGluIGAkc2NlLlVSTGAgY29udGV4dC4gVGhhdCBjb250ZXh0IGlzIGN1cnJlbnRseSB1bnVzZWQsIHNvIHRoZXJlIGFyZSBhbG1vc3Qgbm8gcmVhc29uc1xuICAgICAqICAgICB0byB1c2UgdGhpcyBmdW5jdGlvbiBzbyBmYXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjb250ZXh0LlxuICAgICAqIEByZXR1cm4geyp9IEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSB0cnVzdGVkIHZhcmlhbnQgb2YgeW91ciBgdmFsdWVgXG4gICAgICogICAgIGluIGAkc2NlLlJFU09VUkNFX1VSTGAgY29udGV4dCAodGVtcGxhdGUgVVJMcyBpbiBgbmctaW5jbHVkZWAsIG1vc3QgYHNyY2AgYXR0cmlidXRlXG4gICAgICogICAgIGJpbmRpbmdzLCAuLi4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gbWFyayBhcyB0cnVzdGVkIGZvciBgJHNjZS5KU2AgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5KU2AgY29udGV4dC4gVGhhdCBjb250ZXh0IGlzIGN1cnJlbnRseSB1bnVzZWQsIHNvIHRoZXJlIGFyZSBhbG1vc3Qgbm8gcmVhc29ucyB0b1xuICAgICAqICAgICB1c2UgdGhpcyBmdW5jdGlvbiBzbyBmYXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCxcbiAgICAgKiB0YWtlcyBhbnkgaW5wdXQsIGFuZCBlaXRoZXIgcmV0dXJucyBhIHZhbHVlIHRoYXQncyBzYWZlIHRvIHVzZSBpbiB0aGUgc3BlY2lmaWVkIGNvbnRleHQsXG4gICAgICogb3IgdGhyb3dzIGFuIGV4Y2VwdGlvbi4gVGhpcyBmdW5jdGlvbiBpcyBhd2FyZSBvZiB0cnVzdGVkIHZhbHVlcyBjcmVhdGVkIGJ5IHRoZSBgdHJ1c3RBc2BcbiAgICAgKiBmdW5jdGlvbiBhbmQgaXRzIHNob3J0aGFuZHMsIGFuZCB3aGVuIGNvbnRleHRzIGFyZSBhcHByb3ByaWF0ZSwgcmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlXG4gICAgICogYXMtaXMuIEZpbmFsbHksIHRoaXMgZnVuY3Rpb24gY2FuIGFsc28gdGhyb3cgd2hlbiB0aGVyZSBpcyBubyB3YXkgdG8gdHVybiBgbWF5YmVUcnVzdGVkYCBpbiBhXG4gICAgICogc2FmZSB2YWx1ZSAoZS5nLiwgbm8gc2FuaXRpemF0aW9uIGlzIGF2YWlsYWJsZSBvciBwb3NzaWJsZS4pXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2UudHJ1c3RBc2B9IGNhbGwsIG9yIGFueXRoaW5nIGVsc2UgKHdoaWNoIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC4pXG4gICAgICogQHJldHVybiB7Kn0gQSB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIGdpdmVuIGNvbnRleHQsIG9yIHRocm93cyBhblxuICAgICAqICAgICBleGNlcHRpb24gaWYgdGhpcyBpcyBpbXBvc3NpYmxlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEh0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZENzc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRDc3ModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEpzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0h0bWwoZXhwcmVzc2lvbiBzdHJpbmcpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvLyBTaG9ydGhhbmQgZGVsZWdhdGlvbnMuXG4gICAgdmFyIHBhcnNlID0gc2NlLnBhcnNlQXMsXG4gICAgICAgIGdldFRydXN0ZWQgPSBzY2UuZ2V0VHJ1c3RlZCxcbiAgICAgICAgdHJ1c3RBcyA9IHNjZS50cnVzdEFzO1xuXG4gICAgZm9yRWFjaChTQ0VfQ09OVEVYVFMsIGZ1bmN0aW9uKGVudW1WYWx1ZSwgbmFtZSkge1xuICAgICAgdmFyIGxOYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgICAgc2NlW3NuYWtlVG9DYW1lbCgncGFyc2VfYXNfJyArIGxOYW1lKV0gPSBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHJldHVybiBwYXJzZShlbnVtVmFsdWUsIGV4cHIpO1xuICAgICAgfTtcbiAgICAgIHNjZVtzbmFrZVRvQ2FtZWwoJ2dldF90cnVzdGVkXycgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgc2NlW3NuYWtlVG9DYW1lbCgndHJ1c3RfYXNfJyArIGxOYW1lKV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1c3RBcyhlbnVtVmFsdWUsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2NlO1xuICB9XTtcbn1cblxuLyogZXhwb3J0ZWQgJFNuaWZmZXJQcm92aWRlciAqL1xuXG4vKipcbiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCBcInByaXZhdGVcIiBzZXJ2aWNlICEhIVxuICpcbiAqIEBuYW1lICRzbmlmZmVyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICogQHRoaXNcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGhpc3RvcnkgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IGh0bWw1IGhpc3RvcnkgYXBpID9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdHJhbnNpdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyB0cmFuc2l0aW9uIGV2ZW50cyA/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGFuaW1hdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyBhbmltYXRpb24gZXZlbnRzID9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGVzdGluZyBicm93c2VyJ3MgZmVhdHVyZXMuXG4gKi9cbmZ1bmN0aW9uICRTbmlmZmVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQpIHtcbiAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sXG4gICAgICAgIC8vIENocm9tZSBQYWNrYWdlZCBBcHBzIGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgYGhpc3RvcnkucHVzaFN0YXRlYC5cbiAgICAgICAgLy8gSWYgbm90IHNhbmRib3hlZCwgdGhleSBjYW4gYmUgZGV0ZWN0ZWQgYnkgdGhlIHByZXNlbmNlIG9mIGBjaHJvbWUuYXBwLnJ1bnRpbWVgXG4gICAgICAgIC8vIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcHBzL2FwaV9pbmRleCkuIElmIHNhbmRib3hlZCwgdGhleSBjYW4gYmUgZGV0ZWN0ZWQgYnlcbiAgICAgICAgLy8gdGhlIHByZXNlbmNlIG9mIGFuIGV4dGVuc2lvbiBydW50aW1lIElEIGFuZCB0aGUgYWJzZW5jZSBvZiBvdGhlciBDaHJvbWUgcnVudGltZSBBUElzXG4gICAgICAgIC8vIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcHBzL21hbmlmZXN0L3NhbmRib3gpLlxuICAgICAgICAvLyAoTlcuanMgYXBwcyBoYXZlIGFjY2VzcyB0byBDaHJvbWUgQVBJcywgYnV0IGRvIHN1cHBvcnQgYGhpc3RvcnlgLilcbiAgICAgICAgaXNOdyA9ICR3aW5kb3cubncgJiYgJHdpbmRvdy5udy5wcm9jZXNzLFxuICAgICAgICBpc0Nocm9tZVBhY2thZ2VkQXBwID1cbiAgICAgICAgICAgICFpc053ICYmXG4gICAgICAgICAgICAkd2luZG93LmNocm9tZSAmJlxuICAgICAgICAgICAgKCR3aW5kb3cuY2hyb21lLmFwcCAmJiAkd2luZG93LmNocm9tZS5hcHAucnVudGltZSB8fFxuICAgICAgICAgICAgICAgICEkd2luZG93LmNocm9tZS5hcHAgJiYgJHdpbmRvdy5jaHJvbWUucnVudGltZSAmJiAkd2luZG93LmNocm9tZS5ydW50aW1lLmlkKSxcbiAgICAgICAgaGFzSGlzdG9yeVB1c2hTdGF0ZSA9ICFpc0Nocm9tZVBhY2thZ2VkQXBwICYmICR3aW5kb3cuaGlzdG9yeSAmJiAkd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlLFxuICAgICAgICBhbmRyb2lkID1cbiAgICAgICAgICB0b0ludCgoL2FuZHJvaWQgKFxcZCspLy5leGVjKGxvd2VyY2FzZSgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSksXG4gICAgICAgIGJveGVlID0gL0JveGVlL2kudGVzdCgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCksXG4gICAgICAgIGRvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9LFxuICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuc3R5bGUsXG4gICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsXG4gICAgICAgIGFuaW1hdGlvbnMgPSBmYWxzZTtcblxuICAgIGlmIChib2R5U3R5bGUpIHtcbiAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgPDUsIEJsYWNrYmVycnkgQnJvd3NlciAxMCwgZGVmYXVsdCBDaHJvbWUgaW4gQW5kcm9pZCA0LjQueFxuICAgICAgLy8gTWVudGlvbmVkIGJyb3dzZXJzIG5lZWQgYSAtd2Via2l0LSBwcmVmaXggZm9yIHRyYW5zaXRpb25zICYgYW5pbWF0aW9ucy5cbiAgICAgIHRyYW5zaXRpb25zID0gISEoJ3RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSB8fCAnd2Via2l0VHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKTtcbiAgICAgIGFuaW1hdGlvbnMgPSAhISgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUgfHwgJ3dlYmtpdEFuaW1hdGlvbicgaW4gYm9keVN0eWxlKTtcbiAgICB9XG5cblxuICAgIHJldHVybiB7XG4gICAgICAvLyBBbmRyb2lkIGhhcyBoaXN0b3J5LnB1c2hTdGF0ZSwgYnV0IGl0IGRvZXMgbm90IHVwZGF0ZSBsb2NhdGlvbiBjb3JyZWN0bHlcbiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGF0IGFsbC5cbiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzFcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkwNFxuXG4gICAgICAvLyBvbGRlciB3ZWJraXQgYnJvd3NlciAoNTMzLjkpIG9uIEJveGVlIGJveCBoYXMgZXhhY3RseSB0aGUgc2FtZSBwcm9ibGVtIGFzIEFuZHJvaWQgaGFzXG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhbHNvXG4gICAgICAvLyBXZSBhcmUgcHVycG9zZWZ1bGx5IHVzaW5nIGAhKGFuZHJvaWQgPCA0KWAgdG8gY292ZXIgdGhlIGNhc2Ugd2hlbiBgYW5kcm9pZGAgaXMgdW5kZWZpbmVkXG4gICAgICBoaXN0b3J5OiAhIShoYXNIaXN0b3J5UHVzaFN0YXRlICYmICEoYW5kcm9pZCA8IDQpICYmICFib3hlZSksXG4gICAgICBoYXNFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmVcbiAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yXG4gICAgICAgIC8vIHdoZW4gY3V0IG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQuXG4gICAgICAgIC8vIElFMTArIGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBidXQgaXQgZXJyb25lb3VzbHkgZmlyZXMgdW5kZXIgdmFyaW91cyBzaXR1YXRpb25zLFxuICAgICAgICAvLyBlLmcuIHdoZW4gcGxhY2Vob2xkZXIgY2hhbmdlcywgb3IgYSBmb3JtIGlzIGZvY3VzZWQuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ2lucHV0JyAmJiBtc2llKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50U3VwcG9ydFtldmVudF0pKSB7XG4gICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07XG4gICAgICB9LFxuICAgICAgY3NwOiBjc3AoKSxcbiAgICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgICBhbmRyb2lkOiBhbmRyb2lkXG4gICAgfTtcbiAgfV07XG59XG5cbnZhciAkdGVtcGxhdGVSZXF1ZXN0TWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlZCB0byBjb25maWd1cmUgdGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSB7QGxpbmsgJGh0dHB9IHNlcnZpY2Ugd2hlbiBtYWtpbmcgYSB0ZW1wbGF0ZSByZXF1ZXN0LlxuICpcbiAqIEZvciBleGFtcGxlLCBpdCBjYW4gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgXCJBY2NlcHRcIiBoZWFkZXIgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIsIHdoZW5cbiAqIHJlcXVlc3RpbmcgYSB0ZW1wbGF0ZS5cbiAqL1xuZnVuY3Rpb24gJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyKCkge1xuXG4gIHZhciBodHRwT3B0aW9ucztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkdGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIjaHR0cE9wdGlvbnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUge0BsaW5rICRodHRwfSBzZXJ2aWNlIHdoZW4gbWFraW5nIHRoZSByZXF1ZXN0LlxuICAgKiBZb3UgY2FuIHVzZSB0aGlzIHRvIG92ZXJyaWRlIG9wdGlvbnMgc3VjaCBhcyB0aGUgXCJBY2NlcHRcIiBoZWFkZXIgZm9yIHRlbXBsYXRlIHJlcXVlc3RzLlxuICAgKlxuICAgKiBUaGUge0BsaW5rICR0ZW1wbGF0ZVJlcXVlc3R9IHdpbGwgc2V0IHRoZSBgY2FjaGVgIGFuZCB0aGUgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZVxuICAgKiBvcHRpb25zIGlmIG5vdCBvdmVycmlkZGVuIGhlcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIGZvciB0aGUge0BsaW5rICRodHRwfSBvcHRpb25zLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHtAbGluayAkaHR0cH0gb3B0aW9ucyB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5odHRwT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIGh0dHBPcHRpb25zID0gdmFsO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBodHRwT3B0aW9ucztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGAkdGVtcGxhdGVSZXF1ZXN0YCBzZXJ2aWNlIHJ1bnMgc2VjdXJpdHkgY2hlY2tzIHRoZW4gZG93bmxvYWRzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSB1c2luZ1xuICAgKiBgJGh0dHBgIGFuZCwgdXBvbiBzdWNjZXNzLCBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0XG4gICAqIGZhaWxzIG9yIHRoZSByZXNwb25zZSBkYXRhIG9mIHRoZSBIVFRQIHJlcXVlc3QgaXMgZW1wdHksIGEgYCRjb21waWxlYCBlcnJvciB3aWxsIGJlIHRocm93biAodGhlXG4gICAqIGV4Y2VwdGlvbiBjYW4gYmUgdGh3YXJ0ZWQgYnkgc2V0dGluZyB0aGUgMm5kIHBhcmFtZXRlciBvZiB0aGUgZnVuY3Rpb24gdG8gdHJ1ZSkuIE5vdGUgdGhhdCB0aGVcbiAgICogY29udGVudHMgb2YgYCR0ZW1wbGF0ZUNhY2hlYCBhcmUgdHJ1c3RlZCwgc28gdGhlIGNhbGwgdG8gYCRzY2UuZ2V0VHJ1c3RlZFVybCh0cGwpYCBpcyBvbWl0dGVkXG4gICAqIHdoZW4gYHRwbGAgaXMgb2YgdHlwZSBzdHJpbmcgYW5kIGAkdGVtcGxhdGVDYWNoZWAgaGFzIHRoZSBtYXRjaGluZyBlbnRyeS5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gcGFzcyBjdXN0b20gb3B0aW9ucyB0byB0aGUgYCRodHRwYCBzZXJ2aWNlLCBzdWNoIGFzIHNldHRpbmcgdGhlIEFjY2VwdCBoZWFkZXIgeW91XG4gICAqIGNhbiBjb25maWd1cmUgdGhpcyB2aWEge0BsaW5rICR0ZW1wbGF0ZVJlcXVlc3RQcm92aWRlciNodHRwT3B0aW9uc30uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRSZXNvdXJjZVVybH0gdHBsIFRoZSBIVFRQIHJlcXVlc3QgdGVtcGxhdGUgVVJMXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGlnbm9yZVJlcXVlc3RFcnJvciBXaGV0aGVyIG9yIG5vdCB0byBpZ25vcmUgdGhlIGV4Y2VwdGlvbiB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzIG9yIHRoZSB0ZW1wbGF0ZSBpcyBlbXB0eVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgZm9yIHRoZSBIVFRQIHJlc3BvbnNlIGRhdGEgb2YgdGhlIGdpdmVuIFVSTC5cbiAgICpcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRvdGFsUGVuZGluZ1JlcXVlc3RzIHRvdGFsIGFtb3VudCBvZiBwZW5kaW5nIHRlbXBsYXRlIHJlcXVlc3RzIGJlaW5nIGRvd25sb2FkZWQuXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRodHRwJywgJyRxJywgJyRzY2UnLFxuICAgIGZ1bmN0aW9uKCRleGNlcHRpb25IYW5kbGVyLCAkdGVtcGxhdGVDYWNoZSwgJGh0dHAsICRxLCAkc2NlKSB7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RGbih0cGwsIGlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMrKztcblxuICAgICAgICAvLyBXZSBjb25zaWRlciB0aGUgdGVtcGxhdGUgY2FjaGUgaG9sZHMgb25seSB0cnVzdGVkIHRlbXBsYXRlcywgc29cbiAgICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIGdvIHRocm91Z2ggd2hpdGVsaXN0aW5nIGFnYWluIGZvciBrZXlzIHRoYXQgYWxyZWFkeVxuICAgICAgICAvLyBhcmUgaW5jbHVkZWQgaW4gdGhlcmUuIFRoaXMgYWxzbyBtYWtlcyBBbmd1bGFyIGFjY2VwdCBhbnkgc2NyaXB0XG4gICAgICAgIC8vIGRpcmVjdGl2ZSwgbm8gbWF0dGVyIGl0cyBuYW1lLiBIb3dldmVyLCB3ZSBzdGlsbCBuZWVkIHRvIHVud3JhcCB0cnVzdGVkXG4gICAgICAgIC8vIHR5cGVzLlxuICAgICAgICBpZiAoIWlzU3RyaW5nKHRwbCkgfHwgaXNVbmRlZmluZWQoJHRlbXBsYXRlQ2FjaGUuZ2V0KHRwbCkpKSB7XG4gICAgICAgICAgdHBsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodHBsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2Zvcm1SZXNwb25zZSA9ICRodHRwLmRlZmF1bHRzICYmICRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlO1xuXG4gICAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybVJlc3BvbnNlKSkge1xuICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gdHJhbnNmb3JtUmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZXIgIT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtUmVzcG9uc2UgPT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHRwbCwgZXh0ZW5kKHtcbiAgICAgICAgICAgIGNhY2hlOiAkdGVtcGxhdGVDYWNoZSxcbiAgICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiB0cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICAgIH0sIGh0dHBPcHRpb25zKSlcbiAgICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0cGwsIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKHJlc3ApIHtcbiAgICAgICAgICBpZiAoIWlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICAgICAgcmVzcCA9ICR0ZW1wbGF0ZVJlcXVlc3RNaW5FcnIoJ3RwbG9hZCcsXG4gICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIHRlbXBsYXRlOiB7MH0gKEhUVFAgc3RhdHVzOiB7MX0gezJ9KScsXG4gICAgICAgICAgICAgICAgdHBsLCByZXNwLnN0YXR1cywgcmVzcC5zdGF0dXNUZXh0KTtcblxuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIocmVzcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMgPSAwO1xuXG4gICAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuO1xuICAgIH1cbiAgXTtcbn1cblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckbG9jYXRpb24nLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJGxvY2F0aW9uKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkdGVzdGFiaWxpdHlcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBwcml2YXRlICQkdGVzdGFiaWxpdHkgc2VydmljZSBwcm92aWRlcyBhIGNvbGxlY3Rpb24gb2YgbWV0aG9kcyBmb3IgdXNlIHdoZW4gZGVidWdnaW5nXG4gICAgICogb3IgYnkgYXV0b21hdGVkIHRlc3QgYW5kIGRlYnVnZ2luZyB0b29scy5cbiAgICAgKi9cbiAgICB2YXIgdGVzdGFiaWxpdHkgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZEJpbmRpbmdzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGJvdW5kICh2aWEgbmctYmluZCBvciB7e319KVxuICAgICAqIHRvIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZXhhY3RNYXRjaCBJZiB0cnVlLCBvbmx5IHJldHVybnMgZXhhY3QgbWF0Y2hlc1xuICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uIEZpbHRlcnMgYW5kIHdoaXRlc3BhY2UgYXJlIGlnbm9yZWQuXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZmluZEJpbmRpbmdzID0gZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgb3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmctYmluZGluZycpO1xuICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgIGZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uKGJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGRhdGFCaW5kaW5nID0gYW5ndWxhci5lbGVtZW50KGJpbmRpbmcpLmRhdGEoJyRiaW5kaW5nJyk7XG4gICAgICAgIGlmIChkYXRhQmluZGluZykge1xuICAgICAgICAgIGZvckVhY2goZGF0YUJpbmRpbmcsIGZ1bmN0aW9uKGJpbmRpbmdOYW1lKSB7XG4gICAgICAgICAgICBpZiAob3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgZXNjYXBlRm9yUmVnZXhwKGV4cHJlc3Npb24pICsgJyhcXFxcc3xcXFxcfHwkKScpO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KGJpbmRpbmdOYW1lKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmdOYW1lLmluZGV4T2YoZXhwcmVzc2lvbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZE1vZGVsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB0d28td2F5IGZvdW5kIHZpYSBuZy1tb2RlbCB0b1xuICAgICAqIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBtb2RlbCBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcmVmaXhlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlRXF1YWxzID0gb3B0X2V4YWN0TWF0Y2ggPyAnPScgOiAnKj0nO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZ2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBnZXR0aW5nIHRoZSBsb2NhdGlvbiBpbiBhIGJyb3dzZXIgYWdub3N0aWMgd2F5LiBSZXR1cm5zXG4gICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNzZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIG5hdmlnYXRpbmcgdG8gYSBsb2NhdGlvbiB3aXRob3V0IGRvaW5nIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLFxuICAgICAqICAgICBlLmcuIC9wYXRoP2E9YiNoYXNoKSB0byBnbyB0by5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgaWYgKHVybCAhPT0gJGxvY2F0aW9uLnVybCgpKSB7XG4gICAgICAgICRsb2NhdGlvbi51cmwodXJsKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjd2hlblN0YWJsZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gJHRpbWVvdXQgYW5kICRodHRwIHJlcXVlc3RzIGFyZSBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyhjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHJldHVybiB0ZXN0YWJpbGl0eTtcbiAgfV07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJFRpbWVvdXRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyQkcScsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkcSwgICAkJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcblxuICAgIHZhciBkZWZlcnJlZHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkdGltZW91dFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0VGltZW91dGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIHdyYXBwZWQgaW50byBhIHRyeS9jYXRjaFxuICAgICAgKiBibG9jayBhbmQgZGVsZWdhdGVzIGFueSBleGNlcHRpb25zIHRvXG4gICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICpcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiBjYWxsaW5nIGAkdGltZW91dGAgaXMgYSBwcm9taXNlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW5cbiAgICAgICogdGhlIGRlbGF5IGhhcyBwYXNzZWQgYW5kIHRoZSB0aW1lb3V0IGZ1bmN0aW9uLCBpZiBwcm92aWRlZCwgaXMgZXhlY3V0ZWQuXG4gICAgICAqXG4gICAgICAqIFRvIGNhbmNlbCBhIHRpbWVvdXQgcmVxdWVzdCwgY2FsbCBgJHRpbWVvdXQuY2FuY2VsKHByb21pc2UpYC5cbiAgICAgICpcbiAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kdGltZW91dCBgJHRpbWVvdXQuZmx1c2goKWB9IHRvXG4gICAgICAqIHN5bmNocm9ub3VzbHkgZmx1c2ggdGhlIHF1ZXVlIG9mIGRlZmVycmVkIGZ1bmN0aW9ucy5cbiAgICAgICpcbiAgICAgICogSWYgeW91IG9ubHkgd2FudCBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIHNvbWUgc3BlY2lmaWVkIGRlbGF5XG4gICAgICAqIHRoZW4geW91IGNhbiBjYWxsIGAkdGltZW91dGAgd2l0aG91dCB0aGUgYGZuYCBmdW5jdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQuIFRoZSBwcm9taXNlXG4gICAgICAqICAgd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXQoZm4sIGRlbGF5LCBpbnZva2VBcHBseSkge1xuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICBpbnZva2VBcHBseSA9IGRlbGF5O1xuICAgICAgICBkZWxheSA9IGZuO1xuICAgICAgICBmbiA9IG5vb3A7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gc2xpY2VBcmdzKGFyZ3VtZW50cywgMyksXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSxcbiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICB0aW1lb3V0SWQ7XG5cbiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4uYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDtcbiAgICAgIGRlZmVycmVkc1t0aW1lb3V0SWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICR0aW1lb3V0I2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMsIHRoZSBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtQcm9taXNlPX0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJHRpbWVvdXRgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgICAgKiAgIGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICB0aW1lb3V0LmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7XG4gICAgICAgIC8vIFRpbWVvdXQgY2FuY2VscyBzaG91bGQgbm90IHJlcG9ydCBhbiB1bmhhbmRsZWQgcHJvbWlzZS5cbiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgICAgIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIHJldHVybiAkYnJvd3Nlci5kZWZlci5jYW5jZWwocHJvbWlzZS4kJHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aW1lb3V0O1xuICB9XTtcbn1cblxuLy8gTk9URTogIFRoZSB1c2FnZSBvZiB3aW5kb3cgYW5kIGRvY3VtZW50IGluc3RlYWQgb2YgJHdpbmRvdyBhbmQgJGRvY3VtZW50IGhlcmUgaXNcbi8vIGRlbGliZXJhdGUuICBUaGlzIHNlcnZpY2UgZGVwZW5kcyBvbiB0aGUgc3BlY2lmaWMgYmVoYXZpb3Igb2YgYW5jaG9yIG5vZGVzIGNyZWF0ZWQgYnkgdGhlXG4vLyBicm93c2VyIChyZXNvbHZpbmcgYW5kIHBhcnNpbmcgVVJMcykgdGhhdCBpcyB1bmxpa2VseSB0byBiZSBwcm92aWRlZCBieSBtb2NrIG9iamVjdHMgYW5kXG4vLyBjYXVzZSB1cyB0byBicmVhayB0ZXN0cy4gIEluIGFkZGl0aW9uLCB3aGVuIHRoZSBicm93c2VyIHJlc29sdmVzIGEgVVJMIGZvciBYSFIsIGl0XG4vLyBkb2Vzbid0IGtub3cgYWJvdXQgbW9ja2VkIGxvY2F0aW9ucyBhbmQgcmVzb2x2ZXMgVVJMcyB0byB0aGUgcmVhbCBkb2N1bWVudCAtIHdoaWNoIGlzXG4vLyBleGFjdGx5IHRoZSBiZWhhdmlvciBuZWVkZWQgaGVyZS4gIFRoZXJlIGlzIGxpdHRsZSB2YWx1ZSBpcyBtb2NraW5nIHRoZXNlIG91dCBmb3IgdGhpc1xuLy8gc2VydmljZS5cbnZhciB1cmxQYXJzaW5nTm9kZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG52YXIgb3JpZ2luVXJsID0gdXJsUmVzb2x2ZSh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cblxuLyoqXG4gKlxuICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIG5vbi1JRSBicm93c2Vyc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQXNzaWduaW5nIGEgVVJMIHRvIHRoZSBocmVmIHByb3BlcnR5IG9mIGFuIGFuY2hvciBET00gbm9kZSwgZXZlbiBvbmUgYXR0YWNoZWQgdG8gdGhlIERPTSxcbiAqIHJlc3VsdHMgYm90aCBpbiB0aGUgbm9ybWFsaXppbmcgYW5kIHBhcnNpbmcgb2YgdGhlIFVSTC4gIE5vcm1hbGl6aW5nIG1lYW5zIHRoYXQgYSByZWxhdGl2ZVxuICogVVJMIHdpbGwgYmUgcmVzb2x2ZWQgaW50byBhbiBhYnNvbHV0ZSBVUkwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LlxuICogUGFyc2luZyBtZWFucyB0aGF0IHRoZSBhbmNob3Igbm9kZSdzIGhvc3QsIGhvc3RuYW1lLCBwcm90b2NvbCwgcG9ydCwgcGF0aG5hbWUgYW5kIHJlbGF0ZWRcbiAqIHByb3BlcnRpZXMgYXJlIGFsbCBwb3B1bGF0ZWQgdG8gcmVmbGVjdCB0aGUgbm9ybWFsaXplZCBVUkwuICBUaGlzIGFwcHJvYWNoIGhhcyB3aWRlXG4gKiBjb21wYXRpYmlsaXR5IC0gU2FmYXJpIDErLCBNb3ppbGxhIDErIGV0Yy4gIFNlZVxuICogaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sXG4gKlxuICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIElFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIElFIDw9IDEwIG5vcm1hbGl6ZXMgdGhlIFVSTCB3aGVuIGFzc2lnbmVkIHRvIHRoZSBhbmNob3Igbm9kZSBzaW1pbGFyIHRvIHRoZSBvdGhlclxuICogYnJvd3NlcnMuICBIb3dldmVyLCB0aGUgcGFyc2VkIGNvbXBvbmVudHMgd2lsbCBub3QgYmUgc2V0IGlmIHRoZSBVUkwgYXNzaWduZWQgZGlkIG5vdCBzcGVjaWZ5XG4gKiB0aGVtLiAgKGUuZy4gaWYgeW91IGFzc2lnbiBhLmhyZWYgPSBcImZvb1wiLCB0aGVuIGEucHJvdG9jb2wsIGEuaG9zdCwgZXRjLiB3aWxsIGJlIGVtcHR5LikgIFdlXG4gKiB3b3JrIGFyb3VuZCB0aGF0IGJ5IHBlcmZvcm1pbmcgdGhlIHBhcnNpbmcgaW4gYSAybmQgc3RlcCBieSB0YWtpbmcgYSBwcmV2aW91c2x5IG5vcm1hbGl6ZWRcbiAqIFVSTCAoZS5nLiBieSBhc3NpZ25pbmcgdG8gYS5ocmVmKSBhbmQgYXNzaWduaW5nIGl0IGEuaHJlZiBhZ2Fpbi4gIFRoaXMgY29ycmVjdGx5IHBvcHVsYXRlcyB0aGVcbiAqIHByb3BlcnRpZXMgc3VjaCBhcyBwcm90b2NvbCwgaG9zdG5hbWUsIHBvcnQsIGV0Yy5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICogICBodHRwOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQW5jaG9yRWxlbWVudFxuICogICBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqICAgaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8yOTAyXG4gKiAgIGh0dHA6Ly9qYW1lcy5wYWRvbHNleS5jb20vamF2YXNjcmlwdC9wYXJzaW5nLXVybHMtd2l0aC10aGUtZG9tL1xuICpcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkLlxuICogQGRlc2NyaXB0aW9uIE5vcm1hbGl6ZXMgYW5kIHBhcnNlcyBhIFVSTC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgVVJMIGFzIGEgZGljdGlvbmFyeS5cbiAqXG4gKiAgIHwgbWVtYmVyIG5hbWUgICB8IERlc2NyaXB0aW9uICAgIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGhyZWYgICAgICAgICAgfCBBIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgcHJvdmlkZWQgVVJMIGlmIGl0IHdhcyBub3QgYW4gYWJzb2x1dGUgVVJMIHxcbiAqICAgfCBwcm90b2NvbCAgICAgIHwgVGhlIHByb3RvY29sIGluY2x1ZGluZyB0aGUgdHJhaWxpbmcgY29sb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgIHwgaG9zdCAgICAgICAgICB8IFRoZSBob3N0IGFuZCBwb3J0IChpZiB0aGUgcG9ydCBpcyBub24tZGVmYXVsdCkgb2YgdGhlIG5vcm1hbGl6ZWRVcmwgICAgfFxuICogICB8IHNlYXJjaCAgICAgICAgfCBUaGUgc2VhcmNoIHBhcmFtcywgbWludXMgdGhlIHF1ZXN0aW9uIG1hcmsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgfCBoYXNoICAgICAgICAgIHwgVGhlIGhhc2ggc3RyaW5nLCBtaW51cyB0aGUgaGFzaCBzeW1ib2xcbiAqICAgfCBob3N0bmFtZSAgICAgIHwgVGhlIGhvc3RuYW1lXG4gKiAgIHwgcG9ydCAgICAgICAgICB8IFRoZSBwb3J0LCB3aXRob3V0IFwiOlwiXG4gKiAgIHwgcGF0aG5hbWUgICAgICB8IFRoZSBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggXCIvXCJcbiAqXG4gKi9cbmZ1bmN0aW9uIHVybFJlc29sdmUodXJsKSB7XG4gIHZhciBocmVmID0gdXJsO1xuXG4gIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuICBpZiAobXNpZSkge1xuICAgIC8vIE5vcm1hbGl6ZSBiZWZvcmUgcGFyc2UuICBSZWZlciBJbXBsZW1lbnRhdGlvbiBOb3RlcyBvbiB3aHkgdGhpcyBpc1xuICAgIC8vIGRvbmUgaW4gdHdvIHN0ZXBzIG9uIElFLlxuICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICB9XG5cbiAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICByZXR1cm4ge1xuICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpXG4gICAgICA/IHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICA6ICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gIH07XG59XG5cbi8qKlxuICogUGFyc2UgYSByZXF1ZXN0IFVSTCBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHNhbWUtb3JpZ2luIHJlcXVlc3QgYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVxdWVzdFVybCBUaGUgdXJsIG9mIHRoZSByZXF1ZXN0IGFzIGEgc3RyaW5nIHRoYXQgd2lsbCBiZSByZXNvbHZlZFxuICogb3IgYSBwYXJzZWQgVVJMIG9iamVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIGZvciB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiB1cmxJc1NhbWVPcmlnaW4ocmVxdWVzdFVybCkge1xuICB2YXIgcGFyc2VkID0gKGlzU3RyaW5nKHJlcXVlc3RVcmwpKSA/IHVybFJlc29sdmUocmVxdWVzdFVybCkgOiByZXF1ZXN0VXJsO1xuICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVXJsLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVybC5ob3N0KTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHdpbmRvd1xuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyJ3MgYHdpbmRvd2Agb2JqZWN0LiBXaGlsZSBgd2luZG93YFxuICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZVxuICogaXQgaXMgYSBnbG9iYWwgdmFyaWFibGUuIEluIGFuZ3VsYXIgd2UgYWx3YXlzIHJlZmVyIHRvIGl0IHRocm91Z2ggdGhlXG4gKiBgJHdpbmRvd2Agc2VydmljZSwgc28gaXQgbWF5IGJlIG92ZXJyaWRkZW4sIHJlbW92ZWQgb3IgbW9ja2VkIGZvciB0ZXN0aW5nLlxuICpcbiAqIEV4cHJlc3Npb25zLCBsaWtlIHRoZSBvbmUgZGVmaW5lZCBmb3IgdGhlIGBuZ0NsaWNrYCBkaXJlY3RpdmUgaW4gdGhlIGV4YW1wbGVcbiAqIGJlbG93LCBhcmUgZXZhbHVhdGVkIHdpdGggcmVzcGVjdCB0byB0aGUgY3VycmVudCBzY29wZS4gIFRoZXJlZm9yZSwgdGhlcmUgaXNcbiAqIG5vIHJpc2sgb2YgaW5hZHZlcnRlbnRseSBjb2RpbmcgaW4gYSBkZXBlbmRlbmN5IG9uIGEgZ2xvYmFsIHZhbHVlIGluIHN1Y2ggYW5cbiAqIGV4cHJlc3Npb24uXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIndpbmRvd0V4YW1wbGVcIiBuYW1lPVwid2luZG93LXNlcnZpY2VcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3dpbmRvd0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdykge1xuICAgICAgICAgICAgICRzY29wZS5ncmVldGluZyA9ICdIZWxsbywgV29ybGQhJztcbiAgICAgICAgICAgICAkc2NvcGUuZG9HcmVldGluZyA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGdyZWV0aW5nKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiZ3JlZXRpbmdcIiBhcmlhLWxhYmVsPVwiZ3JlZXRpbmdcIiAvPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImRvR3JlZXRpbmcoZ3JlZXRpbmcpXCI+QUxFUlQ8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGdyZWV0aW5nIGluIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHtcbiAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdncmVldGluZycpKS5zZW5kS2V5cygnSGVsbG8sIEUyRSBUZXN0cycpO1xuICAgICAgIC8vIElmIHdlIGNsaWNrIHRoZSBidXR0b24gaXQgd2lsbCBibG9jayB0aGUgdGVzdCBydW5uZXJcbiAgICAgICAvLyBlbGVtZW50KCc6YnV0dG9uJykuY2xpY2soKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRXaW5kb3dQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpO1xufVxuXG4vKipcbiAqIEBuYW1lICQkY29va2llUmVhZGVyXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIGEgcHJpdmF0ZSBzZXJ2aWNlIGZvciByZWFkaW5nIGNvb2tpZXMgdXNlZCBieSAkaHR0cCBhbmQgbmdDb29raWVzXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBhIGtleS92YWx1ZSBtYXAgb2YgdGhlIGN1cnJlbnQgY29va2llc1xuICovXG5mdW5jdGlvbiAkJENvb2tpZVJlYWRlcigkZG9jdW1lbnQpIHtcbiAgdmFyIHJhd0RvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9O1xuICB2YXIgbGFzdENvb2tpZXMgPSB7fTtcbiAgdmFyIGxhc3RDb29raWVTdHJpbmcgPSAnJztcblxuICBmdW5jdGlvbiBzYWZlR2V0Q29va2llKHJhd0RvY3VtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiByYXdEb2N1bWVudC5jb29raWUgfHwgJyc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNhZmVEZWNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29va2llQXJyYXksIGNvb2tpZSwgaSwgaW5kZXgsIG5hbWU7XG4gICAgdmFyIGN1cnJlbnRDb29raWVTdHJpbmcgPSBzYWZlR2V0Q29va2llKHJhd0RvY3VtZW50KTtcblxuICAgIGlmIChjdXJyZW50Q29va2llU3RyaW5nICE9PSBsYXN0Q29va2llU3RyaW5nKSB7XG4gICAgICBsYXN0Q29va2llU3RyaW5nID0gY3VycmVudENvb2tpZVN0cmluZztcbiAgICAgIGNvb2tpZUFycmF5ID0gbGFzdENvb2tpZVN0cmluZy5zcGxpdCgnOyAnKTtcbiAgICAgIGxhc3RDb29raWVzID0ge307XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb29raWVBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTtcbiAgICAgICAgaW5kZXggPSBjb29raWUuaW5kZXhPZignPScpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7IC8vaWdub3JlIG5hbWVsZXNzIGNvb2tpZXNcbiAgICAgICAgICBuYW1lID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKDAsIGluZGV4KSk7XG4gICAgICAgICAgLy8gdGhlIGZpcnN0IHZhbHVlIHRoYXQgaXMgc2VlbiBmb3IgYSBjb29raWUgaXMgdGhlIG1vc3RcbiAgICAgICAgICAvLyBzcGVjaWZpYyBvbmUuICB2YWx1ZXMgZm9yIHRoZSBzYW1lIGNvb2tpZSBuYW1lIHRoYXRcbiAgICAgICAgICAvLyBmb2xsb3cgYXJlIGZvciBsZXNzIHNwZWNpZmljIHBhdGhzLlxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChsYXN0Q29va2llc1tuYW1lXSkpIHtcbiAgICAgICAgICAgIGxhc3RDb29raWVzW25hbWVdID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKGluZGV4ICsgMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFzdENvb2tpZXM7XG4gIH07XG59XG5cbiQkQ29va2llUmVhZGVyLiRpbmplY3QgPSBbJyRkb2N1bWVudCddO1xuXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICQkQ29va2llUmVhZGVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9ICQkQ29va2llUmVhZGVyO1xufVxuXG4vKiBnbG9iYWwgY3VycmVuY3lGaWx0ZXI6IHRydWUsXG4gZGF0ZUZpbHRlcjogdHJ1ZSxcbiBmaWx0ZXJGaWx0ZXI6IHRydWUsXG4ganNvbkZpbHRlcjogdHJ1ZSxcbiBsaW1pdFRvRmlsdGVyOiB0cnVlLFxuIGxvd2VyY2FzZUZpbHRlcjogdHJ1ZSxcbiBudW1iZXJGaWx0ZXI6IHRydWUsXG4gb3JkZXJCeUZpbHRlcjogdHJ1ZSxcbiB1cHBlcmNhc2VGaWx0ZXI6IHRydWUsXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRmaWx0ZXJQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRmlsdGVycyBhcmUganVzdCBmdW5jdGlvbnMgd2hpY2ggdHJhbnNmb3JtIGlucHV0IHRvIGFuIG91dHB1dC4gSG93ZXZlciBmaWx0ZXJzIG5lZWQgdG8gYmVcbiAqIERlcGVuZGVuY3kgSW5qZWN0ZWQuIFRvIGFjaGlldmUgdGhpcyBhIGZpbHRlciBkZWZpbml0aW9uIGNvbnNpc3RzIG9mIGEgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCBpc1xuICogYW5ub3RhdGVkIHdpdGggZGVwZW5kZW5jaWVzIGFuZCBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYSBmaWx0ZXIgZnVuY3Rpb24uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gKiBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICogeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gKiAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICogPC9kaXY+XG4gKlxuICogYGBganNcbiAqICAgLy8gRmlsdGVyIHJlZ2lzdHJhdGlvblxuICogICBmdW5jdGlvbiBNeU1vZHVsZSgkcHJvdmlkZSwgJGZpbHRlclByb3ZpZGVyKSB7XG4gKiAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBpbmplY3Rpb24gKG5vdCBhbHdheXMgbmVlZGVkKVxuICogICAgICRwcm92aWRlLnZhbHVlKCdncmVldCcsIGZ1bmN0aW9uKG5hbWUpe1xuICogICAgICAgcmV0dXJuICdIZWxsbyAnICsgbmFtZSArICchJztcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy8gcmVnaXN0ZXIgYSBmaWx0ZXIgZmFjdG9yeSB3aGljaCB1c2VzIHRoZVxuICogICAgIC8vIGdyZWV0IHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgREkuXG4gKiAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdncmVldCcsIGZ1bmN0aW9uKGdyZWV0KXtcbiAqICAgICAgIC8vIHJldHVybiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHVzZXMgdGhlIGdyZWV0IHNlcnZpY2VcbiAqICAgICAgIC8vIHRvIGdlbmVyYXRlIHNhbHV0YXRpb25cbiAqICAgICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7XG4gKiAgICAgICAgIC8vIGZpbHRlcnMgbmVlZCB0byBiZSBmb3JnaXZpbmcgc28gY2hlY2sgaW5wdXQgdmFsaWRpdHlcbiAqICAgICAgICAgcmV0dXJuIHRleHQgJiYgZ3JlZXQodGV4dCkgfHwgdGV4dDtcbiAqICAgICAgIH07XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBmaWx0ZXIgZnVuY3Rpb24gaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGluamVjdG9yYCB1bmRlciB0aGUgZmlsdGVyIG5hbWUgc3VmZml4IHdpdGhcbiAqIGBGaWx0ZXJgLlxuICpcbiAqIGBgYGpzXG4gKiAgIGl0KCdzaG91bGQgYmUgdGhlIHNhbWUgaW5zdGFuY2UnLCBpbmplY3QoXG4gKiAgICAgZnVuY3Rpb24oJGZpbHRlclByb3ZpZGVyKSB7XG4gKiAgICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ3JldmVyc2UnLCBmdW5jdGlvbigpe1xuICogICAgICAgICByZXR1cm4gLi4uO1xuICogICAgICAgfSk7XG4gKiAgICAgfSxcbiAqICAgICBmdW5jdGlvbigkZmlsdGVyLCByZXZlcnNlRmlsdGVyKSB7XG4gKiAgICAgICBleHBlY3QoJGZpbHRlcigncmV2ZXJzZScpKS50b0JlKHJldmVyc2VGaWx0ZXIpO1xuICogICAgIH0pO1xuICogYGBgXG4gKlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyBhbmd1bGFyIGZpbHRlcnMgd29yaywgYW5kIGhvdyB0byBjcmVhdGUgeW91ciBvd24gZmlsdGVycywgc2VlXG4gKiB7QGxpbmsgZ3VpZGUvZmlsdGVyIEZpbHRlcnN9IGluIHRoZSBBbmd1bGFyIERldmVsb3BlciBHdWlkZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBGaWx0ZXJzIGFyZSB1c2VkIGZvciBmb3JtYXR0aW5nIGRhdGEgZGlzcGxheWVkIHRvIHRoZSB1c2VyLlxuICpcbiAqIFRoZXkgY2FuIGJlIHVzZWQgaW4gdmlldyB0ZW1wbGF0ZXMsIGNvbnRyb2xsZXJzIG9yIHNlcnZpY2VzLkFuZ3VsYXIgY29tZXNcbiAqIHdpdGggYSBjb2xsZWN0aW9uIG9mIFtidWlsdC1pbiBmaWx0ZXJzXShhcGkvbmcvZmlsdGVyKSwgYnV0IGl0IGlzIGVhc3kgdG9cbiAqIGRlZmluZSB5b3VyIG93biBhcyB3ZWxsLlxuICpcbiAqIFRoZSBnZW5lcmFsIHN5bnRheCBpbiB0ZW1wbGF0ZXMgaXMgYXMgZm9sbG93czpcbiAqXG4gKiBgYGBodG1sXG4gKiB7eyBleHByZXNzaW9uIFt8IGZpbHRlcl9uYW1lWzpwYXJhbWV0ZXJfdmFsdWVdIC4uLiBdIH19XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24gdG8gcmV0cmlldmVcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIiRmaWx0ZXJcIiBtb2R1bGU9XCJmaWx0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkN0cmxcIj5cbiAgICAgICAgPGgzPnt7IG9yaWdpbmFsVGV4dCB9fTwvaDM+XG4gICAgICAgIDxoMz57eyBmaWx0ZXJlZFRleHQgfX08L2gzPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2ZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgIC5jb250cm9sbGVyKCdNYWluQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikge1xuICAgICAgICAkc2NvcGUub3JpZ2luYWxUZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgJHNjb3BlLmZpbHRlcmVkVGV4dCA9ICRmaWx0ZXIoJ3VwcGVyY2FzZScpKCRzY29wZS5vcmlnaW5hbFRleHQpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAgKi9cbiRGaWx0ZXJQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZSddO1xuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkRmlsdGVyUHJvdmlkZXIoJHByb3ZpZGUpIHtcbiAgdmFyIHN1ZmZpeCA9ICdGaWx0ZXInO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRmaWx0ZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uLCBvciBhbiBvYmplY3QgbWFwIG9mIGZpbHRlcnMgd2hlcmVcbiAgICogICAgdGhlIGtleXMgYXJlIHRoZSBmaWx0ZXIgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmaWx0ZXIgZmFjdG9yaWVzLlxuICAgKlxuICAgKiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAgICAqKk5vdGU6KiogRmlsdGVyIG5hbWVzIG11c3QgYmUgdmFsaWQgYW5ndWxhciB7QGxpbmsgZXhwcmVzc2lvbn0gaWRlbnRpZmllcnMsIHN1Y2ggYXMgYHVwcGVyY2FzZWAgb3IgYG9yZGVyQnlgLlxuICAgKiAgICBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICAgKiAgICB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAgICogICAgKGBteWFwcF9zdWJzZWN0aW9uX2ZpbHRlcnhgKS5cbiAgICogICAgPC9kaXY+XG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmYWN0b3J5IElmIHRoZSBmaXJzdCBhcmd1bWVudCB3YXMgYSBzdHJpbmcsIGEgZmFjdG9yeSBmdW5jdGlvbiBmb3IgdGhlIGZpbHRlciB0byBiZSByZWdpc3RlcmVkLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZSwgb3IgaWYgYSBtYXAgb2YgZmlsdGVycyB3YXMgcHJvdmlkZWQgdGhlbiBhIG1hcFxuICAgKiAgICBvZiB0aGUgcmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2VzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVnaXN0ZXIobmFtZSwgZmFjdG9yeSkge1xuICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgdmFyIGZpbHRlcnMgPSB7fTtcbiAgICAgIGZvckVhY2gobmFtZSwgZnVuY3Rpb24oZmlsdGVyLCBrZXkpIHtcbiAgICAgICAgZmlsdGVyc1trZXldID0gcmVnaXN0ZXIoa2V5LCBmaWx0ZXIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmlsdGVycztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICRwcm92aWRlLmZhY3RvcnkobmFtZSArIHN1ZmZpeCwgZmFjdG9yeSk7XG4gICAgfVxuICB9XG4gIHRoaXMucmVnaXN0ZXIgPSByZWdpc3RlcjtcblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gJGluamVjdG9yLmdldChuYW1lICsgc3VmZml4KTtcbiAgICB9O1xuICB9XTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyogZ2xvYmFsXG4gICAgY3VycmVuY3lGaWx0ZXI6IGZhbHNlLFxuICAgIGRhdGVGaWx0ZXI6IGZhbHNlLFxuICAgIGZpbHRlckZpbHRlcjogZmFsc2UsXG4gICAganNvbkZpbHRlcjogZmFsc2UsXG4gICAgbGltaXRUb0ZpbHRlcjogZmFsc2UsXG4gICAgbG93ZXJjYXNlRmlsdGVyOiBmYWxzZSxcbiAgICBudW1iZXJGaWx0ZXI6IGZhbHNlLFxuICAgIG9yZGVyQnlGaWx0ZXI6IGZhbHNlLFxuICAgIHVwcGVyY2FzZUZpbHRlcjogZmFsc2VcbiAgKi9cblxuICByZWdpc3RlcignY3VycmVuY3knLCBjdXJyZW5jeUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdkYXRlJywgZGF0ZUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdmaWx0ZXInLCBmaWx0ZXJGaWx0ZXIpO1xuICByZWdpc3RlcignanNvbicsIGpzb25GaWx0ZXIpO1xuICByZWdpc3RlcignbGltaXRUbycsIGxpbWl0VG9GaWx0ZXIpO1xuICByZWdpc3RlcignbG93ZXJjYXNlJywgbG93ZXJjYXNlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ251bWJlcicsIG51bWJlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdvcmRlckJ5Jywgb3JkZXJCeUZpbHRlcik7XG4gIHJlZ2lzdGVyKCd1cHBlcmNhc2UnLCB1cHBlcmNhc2VGaWx0ZXIpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGZpbHRlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlbGVjdHMgYSBzdWJzZXQgb2YgaXRlbXMgZnJvbSBgYXJyYXlgIGFuZCByZXR1cm5zIGl0IGFzIGEgbmV3IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3VyY2UgYXJyYXkuXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogICAqKk5vdGUqKjogSWYgdGhlIGFycmF5IGNvbnRhaW5zIG9iamVjdHMgdGhhdCByZWZlcmVuY2UgdGhlbXNlbHZlcywgZmlsdGVyaW5nIGlzIG5vdCBwb3NzaWJsZS5cbiAqIDwvZGl2PlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fGZ1bmN0aW9uKCl9IGV4cHJlc3Npb24gVGhlIHByZWRpY2F0ZSB0byBiZSB1c2VkIGZvciBzZWxlY3RpbmcgaXRlbXMgZnJvbVxuICogICBgYXJyYXlgLlxuICpcbiAqICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgIC0gYHN0cmluZ2A6IFRoZSBzdHJpbmcgaXMgdXNlZCBmb3IgbWF0Y2hpbmcgYWdhaW5zdCB0aGUgY29udGVudHMgb2YgdGhlIGBhcnJheWAuIEFsbCBzdHJpbmdzIG9yXG4gKiAgICAgb2JqZWN0cyB3aXRoIHN0cmluZyBwcm9wZXJ0aWVzIGluIGBhcnJheWAgdGhhdCBtYXRjaCB0aGlzIHN0cmluZyB3aWxsIGJlIHJldHVybmVkLiBUaGlzIGFsc29cbiAqICAgICBhcHBsaWVzIHRvIG5lc3RlZCBvYmplY3QgcHJvcGVydGllcy5cbiAqICAgICBUaGUgcHJlZGljYXRlIGNhbiBiZSBuZWdhdGVkIGJ5IHByZWZpeGluZyB0aGUgc3RyaW5nIHdpdGggYCFgLlxuICpcbiAqICAgLSBgT2JqZWN0YDogQSBwYXR0ZXJuIG9iamVjdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgc3BlY2lmaWMgcHJvcGVydGllcyBvbiBvYmplY3RzIGNvbnRhaW5lZFxuICogICAgIGJ5IGBhcnJheWAuIEZvciBleGFtcGxlIGB7bmFtZTpcIk1cIiwgcGhvbmU6XCIxXCJ9YCBwcmVkaWNhdGUgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXNcbiAqICAgICB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYCBjb250YWluaW5nIFwiTVwiIGFuZCBwcm9wZXJ0eSBgcGhvbmVgIGNvbnRhaW5pbmcgXCIxXCIuIEEgc3BlY2lhbFxuICogICAgIHByb3BlcnR5IG5hbWUgKGAkYCBieSBkZWZhdWx0KSBjYW4gYmUgdXNlZCAoZS5nLiBhcyBpbiBgeyQ6IFwidGV4dFwifWApIHRvIGFjY2VwdCBhIG1hdGNoXG4gKiAgICAgYWdhaW5zdCBhbnkgcHJvcGVydHkgb2YgdGhlIG9iamVjdCBvciBpdHMgbmVzdGVkIG9iamVjdCBwcm9wZXJ0aWVzLiBUaGF0J3MgZXF1aXZhbGVudCB0byB0aGVcbiAqICAgICBzaW1wbGUgc3Vic3RyaW5nIG1hdGNoIHdpdGggYSBgc3RyaW5nYCBhcyBkZXNjcmliZWQgYWJvdmUuIFRoZSBzcGVjaWFsIHByb3BlcnR5IG5hbWUgY2FuIGJlXG4gKiAgICAgb3ZlcndyaXR0ZW4sIHVzaW5nIHRoZSBgYW55UHJvcGVydHlLZXlgIHBhcmFtZXRlci5cbiAqICAgICBUaGUgcHJlZGljYXRlIGNhbiBiZSBuZWdhdGVkIGJ5IHByZWZpeGluZyB0aGUgc3RyaW5nIHdpdGggYCFgLlxuICogICAgIEZvciBleGFtcGxlIGB7bmFtZTogXCIhTVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgXG4gKiAgICAgbm90IGNvbnRhaW5pbmcgXCJNXCIuXG4gKlxuICogICAgIE5vdGUgdGhhdCBhIG5hbWVkIHByb3BlcnR5IHdpbGwgbWF0Y2ggcHJvcGVydGllcyBvbiB0aGUgc2FtZSBsZXZlbCBvbmx5LCB3aGlsZSB0aGUgc3BlY2lhbFxuICogICAgIGAkYCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb3IgZGVlcGVyLiBFLmcuIGFuIGFycmF5IGl0ZW0gbGlrZVxuICogICAgIGB7bmFtZToge2ZpcnN0OiAnSm9obicsIGxhc3Q6ICdEb2UnfX1gIHdpbGwgKipub3QqKiBiZSBtYXRjaGVkIGJ5IGB7bmFtZTogJ0pvaG4nfWAsIGJ1dFxuICogICAgICoqd2lsbCoqIGJlIG1hdGNoZWQgYnkgYHskOiAnSm9obid9YC5cbiAqXG4gKiAgIC0gYGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgYXJyYXkpYDogQSBwcmVkaWNhdGUgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gd3JpdGUgYXJiaXRyYXJ5IGZpbHRlcnMuXG4gKiAgICAgVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSwgd2l0aCB0aGUgZWxlbWVudCwgaXRzIGluZGV4LCBhbmRcbiAqICAgICB0aGUgZW50aXJlIGFycmF5IGl0c2VsZiBhcyBhcmd1bWVudHMuXG4gKlxuICogICAgIFRoZSBmaW5hbCByZXN1bHQgaXMgYW4gYXJyYXkgb2YgdGhvc2UgZWxlbWVudHMgdGhhdCB0aGUgcHJlZGljYXRlIHJldHVybmVkIHRydWUgZm9yLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCl8dHJ1ZXxmYWxzZX0gW2NvbXBhcmF0b3JdIENvbXBhcmF0b3Igd2hpY2ggaXMgdXNlZCBpblxuICogICAgIGRldGVybWluaW5nIGlmIHZhbHVlcyByZXRyaWV2ZWQgdXNpbmcgYGV4cHJlc3Npb25gICh3aGVuIGl0IGlzIG5vdCBhIGZ1bmN0aW9uKSBzaG91bGQgYmVcbiAqICAgICBjb25zaWRlcmVkIGEgbWF0Y2ggYmFzZWQgb24gdGhlIHRoZSBleHBlY3RlZCB2YWx1ZSAoZnJvbSB0aGUgZmlsdGVyIGV4cHJlc3Npb24pIGFuZCBhY3R1YWxcbiAqICAgICB2YWx1ZSAoZnJvbSB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSkuXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZClgOlxuICogICAgIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGdpdmVuIHRoZSBvYmplY3QgdmFsdWUgYW5kIHRoZSBwcmVkaWNhdGUgdmFsdWUgdG8gY29tcGFyZSBhbmRcbiAqICAgICBzaG91bGQgcmV0dXJuIHRydWUgaWYgYm90aCB2YWx1ZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgZXF1YWwuXG4gKlxuICogICAtIGB0cnVlYDogQSBzaG9ydGhhbmQgZm9yIGBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7IHJldHVybiBhbmd1bGFyLmVxdWFscyhhY3R1YWwsIGV4cGVjdGVkKX1gLlxuICogICAgIFRoaXMgaXMgZXNzZW50aWFsbHkgc3RyaWN0IGNvbXBhcmlzb24gb2YgZXhwZWN0ZWQgYW5kIGFjdHVhbC5cbiAqXG4gKiAgIC0gYGZhbHNlYDogQSBzaG9ydCBoYW5kIGZvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbG9vayBmb3IgYSBzdWJzdHJpbmcgbWF0Y2ggaW4gYSBjYXNlXG4gKiAgICAgaW5zZW5zaXRpdmUgd2F5LiBQcmltaXRpdmUgdmFsdWVzIGFyZSBjb252ZXJ0ZWQgdG8gc3RyaW5ncy4gT2JqZWN0cyBhcmUgbm90IGNvbXBhcmVkIGFnYWluc3RcbiAqICAgICBwcmltaXRpdmVzLCB1bmxlc3MgdGhleSBoYXZlIGEgY3VzdG9tIGB0b1N0cmluZ2AgbWV0aG9kIChlLmcuIGBEYXRlYCBvYmplY3RzKS5cbiAqXG4gKlxuICogICBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYW55UHJvcGVydHlLZXldIFRoZSBzcGVjaWFsIHByb3BlcnR5IG5hbWUgdGhhdCBtYXRjaGVzIGFnYWluc3QgYW55IHByb3BlcnR5LlxuICogICAgIEJ5IGRlZmF1bHQgYCRgLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiZmlsdGVyLWZpbHRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctaW5pdD1cImZyaWVuZHMgPSBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyNzYnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonODAwLUJJRy1NQVJZJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWV0dGUnLCBwaG9uZTonNTU1LTU2NzgnfV1cIj48L2Rpdj5cblxuICAgICAgIDxsYWJlbD5TZWFyY2g6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaFRleHRcIj48L2xhYmVsPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaFRleHRSZXN1bHRzXCI+XG4gICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj5cbiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2hUZXh0XCI+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgIDwvdGFibGU+XG4gICAgICAgPGhyPlxuICAgICAgIDxsYWJlbD5Bbnk6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC4kXCI+PC9sYWJlbD4gPGJyPlxuICAgICAgIDxsYWJlbD5OYW1lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+UGhvbmUgb25seSA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2gucGhvbmVcIj48L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+RXF1YWxpdHkgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic3RyaWN0XCI+PC9sYWJlbD48YnI+XG4gICAgICAgPHRhYmxlIGlkPVwic2VhcmNoT2JqUmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kT2JqIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoOnN0cmljdFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgZXhwZWN0RnJpZW5kTmFtZXMgPSBmdW5jdGlvbihleHBlY3RlZE5hbWVzLCBrZXkpIHtcbiAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKGtleSArICcgaW4gZnJpZW5kcycpLmNvbHVtbihrZXkgKyAnLm5hbWUnKSkudGhlbihmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24od2QsIGkpIHtcbiAgICAgICAgICAgICBleHBlY3Qod2QuZ2V0VGV4dCgpKS50b01hdGNoKGV4cGVjdGVkTmFtZXNbaV0pO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgIH0pO1xuICAgICAgIH07XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBhY3Jvc3MgYWxsIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoVGV4dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaFRleHQnKSk7XG4gICAgICAgICBzZWFyY2hUZXh0LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCdtJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdBZGFtJ10sICdmcmllbmQnKTtcblxuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnNzYnKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSm9obicsICdKdWxpZSddLCAnZnJpZW5kJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBpbiBzcGVjaWZpYyBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHByZWRpY2F0ZSBvYmplY3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hBbnkgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2guJCcpKTtcbiAgICAgICAgIHNlYXJjaEFueS5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoQW55LnNlbmRLZXlzKCdpJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdKdWxpZScsICdKdWxpZXR0ZSddLCAnZnJpZW5kT2JqJyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCB1c2UgYSBlcXVhbCBjb21wYXJpc29uIHdoZW4gY29tcGFyYXRvciBpcyB0cnVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoTmFtZSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC5uYW1lJykpO1xuICAgICAgICAgdmFyIHN0cmljdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3N0cmljdCcpKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuc2VuZEtleXMoJ0p1bGllJyk7XG4gICAgICAgICBzdHJpY3QuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSnVsaWUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuZnVuY3Rpb24gZmlsdGVyRmlsdGVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5KSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShhcnJheSkpIHtcbiAgICAgIGlmIChhcnJheSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG1pbkVycignZmlsdGVyJykoJ25vdGFycmF5JywgJ0V4cGVjdGVkIGFycmF5IGJ1dCByZWNlaXZlZDogezB9JywgYXJyYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFueVByb3BlcnR5S2V5ID0gYW55UHJvcGVydHlLZXkgfHwgJyQnO1xuICAgIHZhciBleHByZXNzaW9uVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwcmVzc2lvbik7XG4gICAgdmFyIHByZWRpY2F0ZUZuO1xuICAgIHZhciBtYXRjaEFnYWluc3RBbnlQcm9wO1xuXG4gICAgc3dpdGNoIChleHByZXNzaW9uVHlwZSkge1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBwcmVkaWNhdGVGbiA9IGV4cHJlc3Npb247XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdudWxsJzpcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBtYXRjaEFnYWluc3RBbnlQcm9wID0gdHJ1ZTtcbiAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcHJlZGljYXRlRm4gPSBjcmVhdGVQcmVkaWNhdGVGbihleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyYXksIHByZWRpY2F0ZUZuKTtcbiAgfTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgYGZpbHRlckZpbHRlcmBcbmZ1bmN0aW9uIGNyZWF0ZVByZWRpY2F0ZUZuKGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKSB7XG4gIHZhciBzaG91bGRNYXRjaFByaW1pdGl2ZXMgPSBpc09iamVjdChleHByZXNzaW9uKSAmJiAoYW55UHJvcGVydHlLZXkgaW4gZXhwcmVzc2lvbik7XG4gIHZhciBwcmVkaWNhdGVGbjtcblxuICBpZiAoY29tcGFyYXRvciA9PT0gdHJ1ZSkge1xuICAgIGNvbXBhcmF0b3IgPSBlcXVhbHM7XG4gIH0gZWxzZSBpZiAoIWlzRnVuY3Rpb24oY29tcGFyYXRvcikpIHtcbiAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKGFjdHVhbCkpIHtcbiAgICAgICAgLy8gTm8gc3Vic3RyaW5nIG1hdGNoaW5nIGFnYWluc3QgYHVuZGVmaW5lZGBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKChhY3R1YWwgPT09IG51bGwpIHx8IChleHBlY3RlZCA9PT0gbnVsbCkpIHtcbiAgICAgICAgLy8gTm8gc3Vic3RyaW5nIG1hdGNoaW5nIGFnYWluc3QgYG51bGxgOyBvbmx5IG1hdGNoIGFnYWluc3QgYG51bGxgXG4gICAgICAgIHJldHVybiBhY3R1YWwgPT09IGV4cGVjdGVkO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KGV4cGVjdGVkKSB8fCAoaXNPYmplY3QoYWN0dWFsKSAmJiAhaGFzQ3VzdG9tVG9TdHJpbmcoYWN0dWFsKSkpIHtcbiAgICAgICAgLy8gU2hvdWxkIG5vdCBjb21wYXJlIHByaW1pdGl2ZXMgYWdhaW5zdCBvYmplY3RzLCB1bmxlc3MgdGhleSBoYXZlIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGFjdHVhbCA9IGxvd2VyY2FzZSgnJyArIGFjdHVhbCk7XG4gICAgICBleHBlY3RlZCA9IGxvd2VyY2FzZSgnJyArIGV4cGVjdGVkKTtcbiAgICAgIHJldHVybiBhY3R1YWwuaW5kZXhPZihleHBlY3RlZCkgIT09IC0xO1xuICAgIH07XG4gIH1cblxuICBwcmVkaWNhdGVGbiA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoc2hvdWxkTWF0Y2hQcmltaXRpdmVzICYmICFpc09iamVjdChpdGVtKSkge1xuICAgICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb25bYW55UHJvcGVydHlLZXldLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICB9O1xuXG4gIHJldHVybiBwcmVkaWNhdGVGbjtcbn1cblxuZnVuY3Rpb24gZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3AsIGRvbnRNYXRjaFdob2xlT2JqZWN0KSB7XG4gIHZhciBhY3R1YWxUeXBlID0gZ2V0VHlwZUZvckZpbHRlcihhY3R1YWwpO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZUZvckZpbHRlcihleHBlY3RlZCk7XG5cbiAgaWYgKChleHBlY3RlZFR5cGUgPT09ICdzdHJpbmcnKSAmJiAoZXhwZWN0ZWQuY2hhckF0KDApID09PSAnIScpKSB7XG4gICAgcmV0dXJuICFkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLnN1YnN0cmluZygxKSwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoYWN0dWFsKSkge1xuICAgIC8vIEluIGNhc2UgYGFjdHVhbGAgaXMgYW4gYXJyYXksIGNvbnNpZGVyIGl0IGEgbWF0Y2hcbiAgICAvLyBpZiBBTlkgb2YgaXQncyBpdGVtcyBtYXRjaGVzIGBleHBlY3RlZGBcbiAgICByZXR1cm4gYWN0dWFsLnNvbWUoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gICAgfSk7XG4gIH1cblxuICBzd2l0Y2ggKGFjdHVhbFR5cGUpIHtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgdmFyIGtleTtcbiAgICAgIGlmIChtYXRjaEFnYWluc3RBbnlQcm9wKSB7XG4gICAgICAgIGZvciAoa2V5IGluIGFjdHVhbCkge1xuICAgICAgICAgIC8vIFVuZGVyIGNlcnRhaW4sIHJhcmUsIGNpcmN1bXN0YW5jZXMsIGtleSBtYXkgbm90IGJlIGEgc3RyaW5nIGFuZCBgY2hhckF0YCB3aWxsIGJlIHVuZGVmaW5lZFxuICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTU2NDRcbiAgICAgICAgICBpZiAoa2V5LmNoYXJBdCAmJiAoa2V5LmNoYXJBdCgwKSAhPT0gJyQnKSAmJlxuICAgICAgICAgICAgICBkZWVwQ29tcGFyZShhY3R1YWxba2V5XSwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb250TWF0Y2hXaG9sZU9iamVjdCA/IGZhbHNlIDogZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKGtleSBpbiBleHBlY3RlZCkge1xuICAgICAgICAgIHZhciBleHBlY3RlZFZhbCA9IGV4cGVjdGVkW2tleV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRWYWwpIHx8IGlzVW5kZWZpbmVkKGV4cGVjdGVkVmFsKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1hdGNoQW55UHJvcGVydHkgPSBrZXkgPT09IGFueVByb3BlcnR5S2V5O1xuICAgICAgICAgIHZhciBhY3R1YWxWYWwgPSBtYXRjaEFueVByb3BlcnR5ID8gYWN0dWFsIDogYWN0dWFsW2tleV07XG4gICAgICAgICAgaWYgKCFkZWVwQ29tcGFyZShhY3R1YWxWYWwsIGV4cGVjdGVkVmFsLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBbnlQcm9wZXJ0eSwgbWF0Y2hBbnlQcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyYXRvcihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgICAgIH1cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBjb21wYXJhdG9yKGFjdHVhbCwgZXhwZWN0ZWQpO1xuICB9XG59XG5cbi8vIFVzZWQgZm9yIGVhc2lseSBkaWZmZXJlbnRpYXRpbmcgYmV0d2VlbiBgbnVsbGAgYW5kIGFjdHVhbCBgb2JqZWN0YFxuZnVuY3Rpb24gZ2V0VHlwZUZvckZpbHRlcih2YWwpIHtcbiAgcmV0dXJuICh2YWwgPT09IG51bGwpID8gJ251bGwnIDogdHlwZW9mIHZhbDtcbn1cblxudmFyIE1BWF9ESUdJVFMgPSAyMjtcbnZhciBERUNJTUFMX1NFUCA9ICcuJztcbnZhciBaRVJPX0NIQVIgPSAnMCc7XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgY3VycmVuY3lcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIGEgY3VycmVuY3kgKGllICQxLDIzNC41NikuIFdoZW4gbm8gY3VycmVuY3kgc3ltYm9sIGlzIHByb3ZpZGVkLCBkZWZhdWx0XG4gKiBzeW1ib2wgZm9yIGN1cnJlbnQgbG9jYWxlIGlzIHVzZWQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBJbnB1dCB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZz19IHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuXG4gKiBAcGFyYW0ge251bWJlcj19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIGFtb3VudCB0bywgZGVmYXVsdHMgdG8gZGVmYXVsdCBtYXggZnJhY3Rpb24gc2l6ZSBmb3IgY3VycmVudCBsb2NhbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBudW1iZXIuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJjdXJyZW5jeUV4YW1wbGVcIiBuYW1lPVwiY3VycmVuY3ktZmlsdGVyXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXJyZW5jeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuYW1vdW50ID0gMTIzNC41NjtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwiYW1vdW50XCIgYXJpYS1sYWJlbD1cImFtb3VudFwiPiA8YnI+XG4gICAgICAgICBkZWZhdWx0IGN1cnJlbmN5IHN5bWJvbCAoJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktZGVmYXVsdFwiPnt7YW1vdW50IHwgY3VycmVuY3l9fTwvc3Bhbj48YnI+XG4gICAgICAgICBjdXN0b20gY3VycmVuY3kgaWRlbnRpZmllciAoVVNEJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktY3VzdG9tXCI+e3thbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIn19PC9zcGFuPjxicj5cbiAgICAgICAgIG5vIGZyYWN0aW9ucyAoMCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktbm8tZnJhY3Rpb25zXCI+e3thbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIjowfX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgaW5pdCB3aXRoIDEyMzQuNTYnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnJDEsMjM0LjU2Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktY3VzdG9tJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM0LjU2Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktbm8tZnJhY3Rpb25zJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM1Jyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09PSAnc2FmYXJpJykge1xuICAgICAgICAgICAvLyBTYWZhcmkgZG9lcyBub3QgdW5kZXJzdGFuZCB0aGUgbWludXMga2V5LiBTZWVcbiAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNDgxXG4gICAgICAgICAgIHJldHVybjtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnYW1vdW50JykpLnNlbmRLZXlzKCctMTIzNCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCctJDEsMjM0LjAwJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktY3VzdG9tJykpLmdldFRleHQoKSkudG9CZSgnLVVTRCQxLDIzNC4wMCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5jdXJyZW5jeUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBjdXJyZW5jeUZpbHRlcigkbG9jYWxlKSB7XG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcbiAgcmV0dXJuIGZ1bmN0aW9uKGFtb3VudCwgY3VycmVuY3lTeW1ib2wsIGZyYWN0aW9uU2l6ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZChjdXJyZW5jeVN5bWJvbCkpIHtcbiAgICAgIGN1cnJlbmN5U3ltYm9sID0gZm9ybWF0cy5DVVJSRU5DWV9TWU07XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGZyYWN0aW9uU2l6ZSkpIHtcbiAgICAgIGZyYWN0aW9uU2l6ZSA9IGZvcm1hdHMuUEFUVEVSTlNbMV0ubWF4RnJhYztcbiAgICB9XG5cbiAgICAvLyBpZiBudWxsIG9yIHVuZGVmaW5lZCBwYXNzIGl0IHRocm91Z2hcbiAgICByZXR1cm4gKGFtb3VudCA9PSBudWxsKVxuICAgICAgICA/IGFtb3VudFxuICAgICAgICA6IGZvcm1hdE51bWJlcihhbW91bnQsIGZvcm1hdHMuUEFUVEVSTlNbMV0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLCBmcmFjdGlvblNpemUpLlxuICAgICAgICAgICAgcmVwbGFjZSgvXFx1MDBBNC9nLCBjdXJyZW5jeVN5bWJvbCk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbnVtYmVyXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyB0ZXh0LlxuICpcbiAqIElmIHRoZSBpbnB1dCBpcyBudWxsIG9yIHVuZGVmaW5lZCwgaXQgd2lsbCBqdXN0IGJlIHJldHVybmVkLlxuICogSWYgdGhlIGlucHV0IGlzIGluZmluaXRlIChJbmZpbml0eSBvciAtSW5maW5pdHkpLCB0aGUgSW5maW5pdHkgc3ltYm9sICfiiJ4nIG9yICct4oieJyBpcyByZXR1cm5lZCwgcmVzcGVjdGl2ZWx5LlxuICogSWYgdGhlIGlucHV0IGlzIG5vdCBhIG51bWJlciBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIE51bWJlciB0byBmb3JtYXQuXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIG51bWJlciB0by5cbiAqIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkIHRoZW4gdGhlIGZyYWN0aW9uIHNpemUgaXMgY29tcHV0ZWQgZnJvbSB0aGUgY3VycmVudCBsb2NhbGUncyBudW1iZXJcbiAqIGZvcm1hdHRpbmcgcGF0dGVybi4gSW4gdGhlIGNhc2Ugb2YgdGhlIGRlZmF1bHQgbG9jYWxlLCBpdCB3aWxsIGJlIDMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOdW1iZXIgcm91bmRlZCB0byBgZnJhY3Rpb25TaXplYCBhcHByb3ByaWF0ZWx5IGZvcm1hdHRlZCBiYXNlZCBvbiB0aGUgY3VycmVudFxuICogICAgICAgICAgICAgICAgICAgbG9jYWxlIChlLmcuLCBpbiB0aGUgZW5fVVMgbG9jYWxlIGl0IHdpbGwgaGF2ZSBcIi5cIiBhcyB0aGUgZGVjaW1hbCBzZXBhcmF0b3IgYW5kXG4gKiAgICAgICAgICAgICAgICAgICBpbmNsdWRlIFwiLFwiIGdyb3VwIHNlcGFyYXRvcnMgYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdCkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIm51bWJlckZpbHRlckV4YW1wbGVcIiBuYW1lPVwibnVtYmVyLWZpbHRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRmlsdGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS52YWwgPSAxMjM0LjU2Nzg5O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5FbnRlciBudW1iZXI6IDxpbnB1dCBuZy1tb2RlbD0ndmFsJz48L2xhYmVsPjxicj5cbiAgICAgICAgIERlZmF1bHQgZm9ybWF0dGluZzogPHNwYW4gaWQ9J251bWJlci1kZWZhdWx0Jz57e3ZhbCB8IG51bWJlcn19PC9zcGFuPjxicj5cbiAgICAgICAgIE5vIGZyYWN0aW9uczogPHNwYW4+e3t2YWwgfCBudW1iZXI6MH19PC9zcGFuPjxicj5cbiAgICAgICAgIE5lZ2F0aXZlIG51bWJlcjogPHNwYW4+e3stdmFsIHwgbnVtYmVyOjR9fTwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgbnVtYmVycycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMSwyMzQuNTY4Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM1Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkuZ2V0VGV4dCgpKS50b0JlKCctMSwyMzQuNTY3OScpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsJykpLnNlbmRLZXlzKCczMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMywzNzQuMzMzJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkuZ2V0VGV4dCgpKS50b0JlKCctMywzNzQuMzMzMCcpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xubnVtYmVyRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIG51bWJlckZpbHRlcigkbG9jYWxlKSB7XG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcbiAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgZnJhY3Rpb25TaXplKSB7XG5cbiAgICAvLyBpZiBudWxsIG9yIHVuZGVmaW5lZCBwYXNzIGl0IHRocm91Z2hcbiAgICByZXR1cm4gKG51bWJlciA9PSBudWxsKVxuICAgICAgICA/IG51bWJlclxuICAgICAgICA6IGZvcm1hdE51bWJlcihudW1iZXIsIGZvcm1hdHMuUEFUVEVSTlNbMF0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLFxuICAgICAgICAgICAgICAgICAgICAgICBmcmFjdGlvblNpemUpO1xuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGEgbnVtYmVyIChhcyBhIHN0cmluZykgaW50byB0aHJlZSBjb21wb25lbnRzIHRoYXQgY2FuIGJlIHVzZWRcbiAqIGZvciBmb3JtYXR0aW5nIHRoZSBudW1iZXIuXG4gKlxuICogKFNpZ25pZmljYW50IGJpdHMgb2YgdGhpcyBwYXJzZSBhbGdvcml0aG0gY2FtZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWtlTWNsL2JpZy5qcy8pXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBudW1TdHIgVGhlIG51bWJlciB0byBwYXJzZVxuICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3QgZGVzY3JpYmluZyB0aGlzIG51bWJlciwgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKiAgLSBkIDogYW4gYXJyYXkgb2YgZGlnaXRzIGNvbnRhaW5pbmcgbGVhZGluZyB6ZXJvcyBhcyBuZWNlc3NhcnlcbiAqICAtIGkgOiB0aGUgbnVtYmVyIG9mIHRoZSBkaWdpdHMgaW4gYGRgIHRoYXQgYXJlIHRvIHRoZSBsZWZ0IG9mIHRoZSBkZWNpbWFsIHBvaW50XG4gKiAgLSBlIDogdGhlIGV4cG9uZW50IGZvciBudW1iZXJzIHRoYXQgd291bGQgbmVlZCBtb3JlIHRoYW4gYE1BWF9ESUdJVFNgIGRpZ2l0cyBpbiBgZGBcbiAqXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKG51bVN0cikge1xuICB2YXIgZXhwb25lbnQgPSAwLCBkaWdpdHMsIG51bWJlck9mSW50ZWdlckRpZ2l0cztcbiAgdmFyIGksIGosIHplcm9zO1xuXG4gIC8vIERlY2ltYWwgcG9pbnQ/XG4gIGlmICgobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gbnVtU3RyLmluZGV4T2YoREVDSU1BTF9TRVApKSA+IC0xKSB7XG4gICAgbnVtU3RyID0gbnVtU3RyLnJlcGxhY2UoREVDSU1BTF9TRVAsICcnKTtcbiAgfVxuXG4gIC8vIEV4cG9uZW50aWFsIGZvcm0/XG4gIGlmICgoaSA9IG51bVN0ci5zZWFyY2goL2UvaSkpID4gMCkge1xuICAgIC8vIFdvcmsgb3V0IHRoZSBleHBvbmVudC5cbiAgICBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIDwgMCkgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gaTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgKz0gK251bVN0ci5zbGljZShpICsgMSk7XG4gICAgbnVtU3RyID0gbnVtU3RyLnN1YnN0cmluZygwLCBpKTtcbiAgfSBlbHNlIGlmIChudW1iZXJPZkludGVnZXJEaWdpdHMgPCAwKSB7XG4gICAgLy8gVGhlcmUgd2FzIG5vIGRlY2ltYWwgcG9pbnQgb3IgZXhwb25lbnQgc28gaXQgaXMgYW4gaW50ZWdlci5cbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSBudW1TdHIubGVuZ3RoO1xuICB9XG5cbiAgLy8gQ291bnQgdGhlIG51bWJlciBvZiBsZWFkaW5nIHplcm9zLlxuICBmb3IgKGkgPSAwOyBudW1TdHIuY2hhckF0KGkpID09PSBaRVJPX0NIQVI7IGkrKykgeyAvKiBlbXB0eSAqLyB9XG5cbiAgaWYgKGkgPT09ICh6ZXJvcyA9IG51bVN0ci5sZW5ndGgpKSB7XG4gICAgLy8gVGhlIGRpZ2l0cyBhcmUgYWxsIHplcm8uXG4gICAgZGlnaXRzID0gWzBdO1xuICAgIG51bWJlck9mSW50ZWdlckRpZ2l0cyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ291bnQgdGhlIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvc1xuICAgIHplcm9zLS07XG4gICAgd2hpbGUgKG51bVN0ci5jaGFyQXQoemVyb3MpID09PSBaRVJPX0NIQVIpIHplcm9zLS07XG5cbiAgICAvLyBUcmFpbGluZyB6ZXJvcyBhcmUgaW5zaWduaWZpY2FudCBzbyBpZ25vcmUgdGhlbVxuICAgIG51bWJlck9mSW50ZWdlckRpZ2l0cyAtPSBpO1xuICAgIGRpZ2l0cyA9IFtdO1xuICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIGFycmF5IG9mIGRpZ2l0cyB3aXRob3V0IGxlYWRpbmcvdHJhaWxpbmcgemVyb3MuXG4gICAgZm9yIChqID0gMDsgaSA8PSB6ZXJvczsgaSsrLCBqKyspIHtcbiAgICAgIGRpZ2l0c1tqXSA9ICtudW1TdHIuY2hhckF0KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZSBudW1iZXIgb3ZlcmZsb3dzIHRoZSBtYXhpbXVtIGFsbG93ZWQgZGlnaXRzIHRoZW4gdXNlIGFuIGV4cG9uZW50LlxuICBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID4gTUFYX0RJR0lUUykge1xuICAgIGRpZ2l0cyA9IGRpZ2l0cy5zcGxpY2UoMCwgTUFYX0RJR0lUUyAtIDEpO1xuICAgIGV4cG9uZW50ID0gbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIC0gMTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSAxO1xuICB9XG5cbiAgcmV0dXJuIHsgZDogZGlnaXRzLCBlOiBleHBvbmVudCwgaTogbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIH07XG59XG5cbi8qKlxuICogUm91bmQgdGhlIHBhcnNlZCBudW1iZXIgdG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAqIFRoaXMgZnVuY3Rpb24gY2hhbmdlZCB0aGUgcGFyc2VkTnVtYmVyIGluLXBsYWNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kTnVtYmVyKHBhcnNlZE51bWJlciwgZnJhY3Rpb25TaXplLCBtaW5GcmFjLCBtYXhGcmFjKSB7XG4gICAgdmFyIGRpZ2l0cyA9IHBhcnNlZE51bWJlci5kO1xuICAgIHZhciBmcmFjdGlvbkxlbiA9IGRpZ2l0cy5sZW5ndGggLSBwYXJzZWROdW1iZXIuaTtcblxuICAgIC8vIGRldGVybWluZSBmcmFjdGlvblNpemUgaWYgaXQgaXMgbm90IHNwZWNpZmllZDsgYCtmcmFjdGlvblNpemVgIGNvbnZlcnRzIGl0IHRvIGEgbnVtYmVyXG4gICAgZnJhY3Rpb25TaXplID0gKGlzVW5kZWZpbmVkKGZyYWN0aW9uU2l6ZSkpID8gTWF0aC5taW4oTWF0aC5tYXgobWluRnJhYywgZnJhY3Rpb25MZW4pLCBtYXhGcmFjKSA6ICtmcmFjdGlvblNpemU7XG5cbiAgICAvLyBUaGUgaW5kZXggb2YgdGhlIGRpZ2l0IHRvIHdoZXJlIHJvdW5kaW5nIGlzIHRvIG9jY3VyXG4gICAgdmFyIHJvdW5kQXQgPSBmcmFjdGlvblNpemUgKyBwYXJzZWROdW1iZXIuaTtcbiAgICB2YXIgZGlnaXQgPSBkaWdpdHNbcm91bmRBdF07XG5cbiAgICBpZiAocm91bmRBdCA+IDApIHtcbiAgICAgIC8vIERyb3AgZnJhY3Rpb25hbCBkaWdpdHMgYmV5b25kIGByb3VuZEF0YFxuICAgICAgZGlnaXRzLnNwbGljZShNYXRoLm1heChwYXJzZWROdW1iZXIuaSwgcm91bmRBdCkpO1xuXG4gICAgICAvLyBTZXQgbm9uLWZyYWN0aW9uYWwgZGlnaXRzIGJleW9uZCBgcm91bmRBdGAgdG8gMFxuICAgICAgZm9yICh2YXIgaiA9IHJvdW5kQXQ7IGogPCBkaWdpdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZGlnaXRzW2pdID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugcm91bmRlZCB0byB6ZXJvIHNvIHJlc2V0IHRoZSBwYXJzZWROdW1iZXJcbiAgICAgIGZyYWN0aW9uTGVuID0gTWF0aC5tYXgoMCwgZnJhY3Rpb25MZW4pO1xuICAgICAgcGFyc2VkTnVtYmVyLmkgPSAxO1xuICAgICAgZGlnaXRzLmxlbmd0aCA9IE1hdGgubWF4KDEsIHJvdW5kQXQgPSBmcmFjdGlvblNpemUgKyAxKTtcbiAgICAgIGRpZ2l0c1swXSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHJvdW5kQXQ7IGkrKykgZGlnaXRzW2ldID0gMDtcbiAgICB9XG5cbiAgICBpZiAoZGlnaXQgPj0gNSkge1xuICAgICAgaWYgKHJvdW5kQXQgLSAxIDwgMCkge1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA+IHJvdW5kQXQ7IGstLSkge1xuICAgICAgICAgIGRpZ2l0cy51bnNoaWZ0KDApO1xuICAgICAgICAgIHBhcnNlZE51bWJlci5pKys7XG4gICAgICAgIH1cbiAgICAgICAgZGlnaXRzLnVuc2hpZnQoMSk7XG4gICAgICAgIHBhcnNlZE51bWJlci5pKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaWdpdHNbcm91bmRBdCAtIDFdKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUGFkIG91dCB3aXRoIHplcm9zIHRvIGdldCB0aGUgcmVxdWlyZWQgZnJhY3Rpb24gbGVuZ3RoXG4gICAgZm9yICg7IGZyYWN0aW9uTGVuIDwgTWF0aC5tYXgoMCwgZnJhY3Rpb25TaXplKTsgZnJhY3Rpb25MZW4rKykgZGlnaXRzLnB1c2goMCk7XG5cblxuICAgIC8vIERvIGFueSBjYXJyeWluZywgZS5nLiBhIGRpZ2l0IHdhcyByb3VuZGVkIHVwIHRvIDEwXG4gICAgdmFyIGNhcnJ5ID0gZGlnaXRzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKGNhcnJ5LCBkLCBpLCBkaWdpdHMpIHtcbiAgICAgIGQgPSBkICsgY2Fycnk7XG4gICAgICBkaWdpdHNbaV0gPSBkICUgMTA7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihkIC8gMTApO1xuICAgIH0sIDApO1xuICAgIGlmIChjYXJyeSkge1xuICAgICAgZGlnaXRzLnVuc2hpZnQoY2FycnkpO1xuICAgICAgcGFyc2VkTnVtYmVyLmkrKztcbiAgICB9XG59XG5cbi8qKlxuICogRm9ybWF0IGEgbnVtYmVyIGludG8gYSBzdHJpbmdcbiAqIEBwYXJhbSAge251bWJlcn0gbnVtYmVyICAgICAgIFRoZSBudW1iZXIgdG8gZm9ybWF0XG4gKiBAcGFyYW0gIHt7XG4gKiAgICAgICAgICAgbWluRnJhYywgLy8gdGhlIG1pbmltdW0gbnVtYmVyIG9mIGRpZ2l0cyByZXF1aXJlZCBpbiB0aGUgZnJhY3Rpb24gcGFydCBvZiB0aGUgbnVtYmVyXG4gKiAgICAgICAgICAgbWF4RnJhYywgLy8gdGhlIG1heGltdW0gbnVtYmVyIG9mIGRpZ2l0cyByZXF1aXJlZCBpbiB0aGUgZnJhY3Rpb24gcGFydCBvZiB0aGUgbnVtYmVyXG4gKiAgICAgICAgICAgZ1NpemUsICAgLy8gbnVtYmVyIG9mIGRpZ2l0cyBpbiBlYWNoIGdyb3VwIG9mIHNlcGFyYXRlZCBkaWdpdHNcbiAqICAgICAgICAgICBsZ1NpemUsICAvLyBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBsYXN0IGdyb3VwIG9mIGRpZ2l0cyBiZWZvcmUgdGhlIGRlY2ltYWwgc2VwYXJhdG9yXG4gKiAgICAgICAgICAgbmVnUHJlLCAgLy8gdGhlIHN0cmluZyB0byBnbyBpbiBmcm9udCBvZiBhIG5lZ2F0aXZlIG51bWJlciAoZS5nLiBgLWAgb3IgYChgKSlcbiAqICAgICAgICAgICBwb3NQcmUsICAvLyB0aGUgc3RyaW5nIHRvIGdvIGluIGZyb250IG9mIGEgcG9zaXRpdmUgbnVtYmVyXG4gKiAgICAgICAgICAgbmVnU3VmLCAgLy8gdGhlIHN0cmluZyB0byBnbyBhZnRlciBhIG5lZ2F0aXZlIG51bWJlciAoZS5nLiBgKWApXG4gKiAgICAgICAgICAgcG9zU3VmICAgLy8gdGhlIHN0cmluZyB0byBnbyBhZnRlciBhIHBvc2l0aXZlIG51bWJlclxuICogICAgICAgICB9fSBwYXR0ZXJuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwU2VwICAgICBUaGUgc3RyaW5nIHRvIHNlcGFyYXRlIGdyb3VwcyBvZiBudW1iZXIgKGUuZy4gYCxgKVxuICogQHBhcmFtICB7c3RyaW5nfSBkZWNpbWFsU2VwICAgVGhlIHN0cmluZyB0byBhY3QgYXMgdGhlIGRlY2ltYWwgc2VwYXJhdG9yIChlLmcuIGAuYClcbiAqIEBwYXJhbSAge1t0eXBlXX0gZnJhY3Rpb25TaXplIFRoZSBzaXplIG9mIHRoZSBmcmFjdGlvbmFsIHBhcnQgb2YgdGhlIG51bWJlclxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgVGhlIG51bWJlciBmb3JtYXR0ZWQgYXMgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bWJlciwgcGF0dGVybiwgZ3JvdXBTZXAsIGRlY2ltYWxTZXAsIGZyYWN0aW9uU2l6ZSkge1xuXG4gIGlmICghKGlzU3RyaW5nKG51bWJlcikgfHwgaXNOdW1iZXIobnVtYmVyKSkgfHwgaXNOYU4obnVtYmVyKSkgcmV0dXJuICcnO1xuXG4gIHZhciBpc0luZmluaXR5ID0gIWlzRmluaXRlKG51bWJlcik7XG4gIHZhciBpc1plcm8gPSBmYWxzZTtcbiAgdmFyIG51bVN0ciA9IE1hdGguYWJzKG51bWJlcikgKyAnJyxcbiAgICAgIGZvcm1hdHRlZFRleHQgPSAnJyxcbiAgICAgIHBhcnNlZE51bWJlcjtcblxuICBpZiAoaXNJbmZpbml0eSkge1xuICAgIGZvcm1hdHRlZFRleHQgPSAnXFx1MjIxZSc7XG4gIH0gZWxzZSB7XG4gICAgcGFyc2VkTnVtYmVyID0gcGFyc2UobnVtU3RyKTtcblxuICAgIHJvdW5kTnVtYmVyKHBhcnNlZE51bWJlciwgZnJhY3Rpb25TaXplLCBwYXR0ZXJuLm1pbkZyYWMsIHBhdHRlcm4ubWF4RnJhYyk7XG5cbiAgICB2YXIgZGlnaXRzID0gcGFyc2VkTnVtYmVyLmQ7XG4gICAgdmFyIGludGVnZXJMZW4gPSBwYXJzZWROdW1iZXIuaTtcbiAgICB2YXIgZXhwb25lbnQgPSBwYXJzZWROdW1iZXIuZTtcbiAgICB2YXIgZGVjaW1hbHMgPSBbXTtcbiAgICBpc1plcm8gPSBkaWdpdHMucmVkdWNlKGZ1bmN0aW9uKGlzWmVybywgZCkgeyByZXR1cm4gaXNaZXJvICYmICFkOyB9LCB0cnVlKTtcblxuICAgIC8vIHBhZCB6ZXJvcyBmb3Igc21hbGwgbnVtYmVyc1xuICAgIHdoaWxlIChpbnRlZ2VyTGVuIDwgMCkge1xuICAgICAgZGlnaXRzLnVuc2hpZnQoMCk7XG4gICAgICBpbnRlZ2VyTGVuKys7XG4gICAgfVxuXG4gICAgLy8gZXh0cmFjdCBkZWNpbWFscyBkaWdpdHNcbiAgICBpZiAoaW50ZWdlckxlbiA+IDApIHtcbiAgICAgIGRlY2ltYWxzID0gZGlnaXRzLnNwbGljZShpbnRlZ2VyTGVuLCBkaWdpdHMubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjaW1hbHMgPSBkaWdpdHM7XG4gICAgICBkaWdpdHMgPSBbMF07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IHRoZSBpbnRlZ2VyIGRpZ2l0cyB3aXRoIGdyb3VwaW5nIHNlcGFyYXRvcnNcbiAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgaWYgKGRpZ2l0cy5sZW5ndGggPj0gcGF0dGVybi5sZ1NpemUpIHtcbiAgICAgIGdyb3Vwcy51bnNoaWZ0KGRpZ2l0cy5zcGxpY2UoLXBhdHRlcm4ubGdTaXplLCBkaWdpdHMubGVuZ3RoKS5qb2luKCcnKSk7XG4gICAgfVxuICAgIHdoaWxlIChkaWdpdHMubGVuZ3RoID4gcGF0dGVybi5nU2l6ZSkge1xuICAgICAgZ3JvdXBzLnVuc2hpZnQoZGlnaXRzLnNwbGljZSgtcGF0dGVybi5nU2l6ZSwgZGlnaXRzLmxlbmd0aCkuam9pbignJykpO1xuICAgIH1cbiAgICBpZiAoZGlnaXRzLmxlbmd0aCkge1xuICAgICAgZ3JvdXBzLnVuc2hpZnQoZGlnaXRzLmpvaW4oJycpKTtcbiAgICB9XG4gICAgZm9ybWF0dGVkVGV4dCA9IGdyb3Vwcy5qb2luKGdyb3VwU2VwKTtcblxuICAgIC8vIGFwcGVuZCB0aGUgZGVjaW1hbCBkaWdpdHNcbiAgICBpZiAoZGVjaW1hbHMubGVuZ3RoKSB7XG4gICAgICBmb3JtYXR0ZWRUZXh0ICs9IGRlY2ltYWxTZXAgKyBkZWNpbWFscy5qb2luKCcnKTtcbiAgICB9XG5cbiAgICBpZiAoZXhwb25lbnQpIHtcbiAgICAgIGZvcm1hdHRlZFRleHQgKz0gJ2UrJyArIGV4cG9uZW50O1xuICAgIH1cbiAgfVxuICBpZiAobnVtYmVyIDwgMCAmJiAhaXNaZXJvKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4ubmVnUHJlICsgZm9ybWF0dGVkVGV4dCArIHBhdHRlcm4ubmVnU3VmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXR0ZXJuLnBvc1ByZSArIGZvcm1hdHRlZFRleHQgKyBwYXR0ZXJuLnBvc1N1ZjtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYWROdW1iZXIobnVtLCBkaWdpdHMsIHRyaW0sIG5lZ1dyYXApIHtcbiAgdmFyIG5lZyA9ICcnO1xuICBpZiAobnVtIDwgMCB8fCAobmVnV3JhcCAmJiBudW0gPD0gMCkpIHtcbiAgICBpZiAobmVnV3JhcCkge1xuICAgICAgbnVtID0gLW51bSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bSA9IC1udW07XG4gICAgICBuZWcgPSAnLSc7XG4gICAgfVxuICB9XG4gIG51bSA9ICcnICsgbnVtO1xuICB3aGlsZSAobnVtLmxlbmd0aCA8IGRpZ2l0cykgbnVtID0gWkVST19DSEFSICsgbnVtO1xuICBpZiAodHJpbSkge1xuICAgIG51bSA9IG51bS5zdWJzdHIobnVtLmxlbmd0aCAtIGRpZ2l0cyk7XG4gIH1cbiAgcmV0dXJuIG5lZyArIG51bTtcbn1cblxuXG5mdW5jdGlvbiBkYXRlR2V0dGVyKG5hbWUsIHNpemUsIG9mZnNldCwgdHJpbSwgbmVnV3JhcCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICBpZiAob2Zmc2V0ID4gMCB8fCB2YWx1ZSA+IC1vZmZzZXQpIHtcbiAgICAgIHZhbHVlICs9IG9mZnNldDtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSAwICYmIG9mZnNldCA9PT0gLTEyKSB2YWx1ZSA9IDEyO1xuICAgIHJldHVybiBwYWROdW1iZXIodmFsdWUsIHNpemUsIHRyaW0sIG5lZ1dyYXApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkYXRlU3RyR2V0dGVyKG5hbWUsIHNob3J0Rm9ybSwgc3RhbmRBbG9uZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0cykge1xuICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpO1xuICAgIHZhciBwcm9wUHJlZml4ID0gKHN0YW5kQWxvbmUgPyAnU1RBTkRBTE9ORScgOiAnJykgKyAoc2hvcnRGb3JtID8gJ1NIT1JUJyA6ICcnKTtcbiAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHByb3BQcmVmaXggKyBuYW1lKTtcblxuICAgIHJldHVybiBmb3JtYXRzW2dldF1bdmFsdWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0aW1lWm9uZUdldHRlcihkYXRlLCBmb3JtYXRzLCBvZmZzZXQpIHtcbiAgdmFyIHpvbmUgPSAtMSAqIG9mZnNldDtcbiAgdmFyIHBhZGRlZFpvbmUgPSAoem9uZSA+PSAwKSA/ICcrJyA6ICcnO1xuXG4gIHBhZGRlZFpvbmUgKz0gcGFkTnVtYmVyKE1hdGhbem9uZSA+IDAgPyAnZmxvb3InIDogJ2NlaWwnXSh6b25lIC8gNjApLCAyKSArXG4gICAgICAgICAgICAgICAgcGFkTnVtYmVyKE1hdGguYWJzKHpvbmUgJSA2MCksIDIpO1xuXG4gIHJldHVybiBwYWRkZWRab25lO1xufVxuXG5mdW5jdGlvbiBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKHllYXIpIHtcbiAgICAvLyAwID0gaW5kZXggb2YgSmFudWFyeVxuICAgIHZhciBkYXlPZldlZWtPbkZpcnN0ID0gKG5ldyBEYXRlKHllYXIsIDAsIDEpKS5nZXREYXkoKTtcbiAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXkgKCsxIHRvIGFjY291bnQgZm9yIDFzdCA9IDUpXG4gICAgLy8gMTEgPSBpbmRleCBvZiAqbmV4dCogVGh1cnNkYXkgKCsxIGFjY291bnQgZm9yIDFzdCA9IDEyKVxuICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCAoKGRheU9mV2Vla09uRmlyc3QgPD0gNCkgPyA1IDogMTIpIC0gZGF5T2ZXZWVrT25GaXJzdCk7XG59XG5cbmZ1bmN0aW9uIGdldFRodXJzZGF5VGhpc1dlZWsoZGF0ZXRpbWUpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZXRpbWUuZ2V0RnVsbFllYXIoKSwgZGF0ZXRpbWUuZ2V0TW9udGgoKSxcbiAgICAgIC8vIDQgPSBpbmRleCBvZiBUaHVyc2RheVxuICAgICAgZGF0ZXRpbWUuZ2V0RGF0ZSgpICsgKDQgLSBkYXRldGltZS5nZXREYXkoKSkpO1xufVxuXG5mdW5jdGlvbiB3ZWVrR2V0dGVyKHNpemUpIHtcbiAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKSxcbiAgICAgICAgIHRoaXNUaHVycyA9IGdldFRodXJzZGF5VGhpc1dlZWsoZGF0ZSk7XG5cbiAgICAgIHZhciBkaWZmID0gK3RoaXNUaHVycyAtICtmaXJzdFRodXJzLFxuICAgICAgICAgcmVzdWx0ID0gMSArIE1hdGgucm91bmQoZGlmZiAvIDYuMDQ4ZTgpOyAvLyA2LjA0OGU4IG1zIHBlciB3ZWVrXG5cbiAgICAgIHJldHVybiBwYWROdW1iZXIocmVzdWx0LCBzaXplKTtcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGFtcG1HZXR0ZXIoZGF0ZSwgZm9ybWF0cykge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpIDwgMTIgPyBmb3JtYXRzLkFNUE1TWzBdIDogZm9ybWF0cy5BTVBNU1sxXTtcbn1cblxuZnVuY3Rpb24gZXJhR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKSA8PSAwID8gZm9ybWF0cy5FUkFTWzBdIDogZm9ybWF0cy5FUkFTWzFdO1xufVxuXG5mdW5jdGlvbiBsb25nRXJhR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKSA8PSAwID8gZm9ybWF0cy5FUkFOQU1FU1swXSA6IGZvcm1hdHMuRVJBTkFNRVNbMV07XG59XG5cbnZhciBEQVRFX0ZPUk1BVFMgPSB7XG4gIHl5eXk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgNCwgMCwgZmFsc2UsIHRydWUpLFxuICAgIHl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDIsIDAsIHRydWUsIHRydWUpLFxuICAgICB5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDEsIDAsIGZhbHNlLCB0cnVlKSxcbiAgTU1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnKSxcbiAgIE1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnLCB0cnVlKSxcbiAgICBNTTogZGF0ZUdldHRlcignTW9udGgnLCAyLCAxKSxcbiAgICAgTTogZGF0ZUdldHRlcignTW9udGgnLCAxLCAxKSxcbiAgTExMTDogZGF0ZVN0ckdldHRlcignTW9udGgnLCBmYWxzZSwgdHJ1ZSksXG4gICAgZGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAyKSxcbiAgICAgZDogZGF0ZUdldHRlcignRGF0ZScsIDEpLFxuICAgIEhIOiBkYXRlR2V0dGVyKCdIb3VycycsIDIpLFxuICAgICBIOiBkYXRlR2V0dGVyKCdIb3VycycsIDEpLFxuICAgIGhoOiBkYXRlR2V0dGVyKCdIb3VycycsIDIsIC0xMiksXG4gICAgIGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMSwgLTEyKSxcbiAgICBtbTogZGF0ZUdldHRlcignTWludXRlcycsIDIpLFxuICAgICBtOiBkYXRlR2V0dGVyKCdNaW51dGVzJywgMSksXG4gICAgc3M6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAyKSxcbiAgICAgczogZGF0ZUdldHRlcignU2Vjb25kcycsIDEpLFxuICAgICAvLyB3aGlsZSBJU08gODYwMSByZXF1aXJlcyBmcmFjdGlvbnMgdG8gYmUgcHJlZml4ZWQgd2l0aCBgLmAgb3IgYCxgXG4gICAgIC8vIHdlIGNhbiBiZSBqdXN0IHNhZmVseSByZWx5IG9uIHVzaW5nIGBzc3NgIHNpbmNlIHdlIGN1cnJlbnRseSBkb24ndCBzdXBwb3J0IHNpbmdsZSBvciB0d28gZGlnaXQgZnJhY3Rpb25zXG4gICBzc3M6IGRhdGVHZXR0ZXIoJ01pbGxpc2Vjb25kcycsIDMpLFxuICBFRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknKSxcbiAgIEVFRTogZGF0ZVN0ckdldHRlcignRGF5JywgdHJ1ZSksXG4gICAgIGE6IGFtcG1HZXR0ZXIsXG4gICAgIFo6IHRpbWVab25lR2V0dGVyLFxuICAgIHd3OiB3ZWVrR2V0dGVyKDIpLFxuICAgICB3OiB3ZWVrR2V0dGVyKDEpLFxuICAgICBHOiBlcmFHZXR0ZXIsXG4gICAgIEdHOiBlcmFHZXR0ZXIsXG4gICAgIEdHRzogZXJhR2V0dGVyLFxuICAgICBHR0dHOiBsb25nRXJhR2V0dGVyXG59O1xuXG52YXIgREFURV9GT1JNQVRTX1NQTElUID0gLygoPzpbXnlNTGRIaG1zYVpFd0cnXSspfCg/OicoPzpbXiddfCcnKSonKXwoPzpFK3x5K3xNK3xMK3xkK3xIK3xoK3xtK3xzK3xhfFp8Ryt8dyspKShbXFxzXFxTXSopLyxcbiAgICBOVU1CRVJfU1RSSU5HID0gL14tP1xcZCskLztcblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBkYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogICBGb3JtYXRzIGBkYXRlYCB0byBhIHN0cmluZyBiYXNlZCBvbiB0aGUgcmVxdWVzdGVkIGBmb3JtYXRgLlxuICpcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGVsZW1lbnRzOlxuICpcbiAqICAgKiBgJ3l5eXknYDogNCBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyIChlLmcuIEFEIDEgPT4gMDAwMSwgQUQgMjAxMCA9PiAyMDEwKVxuICogICAqIGAneXknYDogMiBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBwYWRkZWQgKDAwLTk5KS4gKGUuZy4gQUQgMjAwMSA9PiAwMSwgQUQgMjAxMCA9PiAxMClcbiAqICAgKiBgJ3knYDogMSBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBlLmcuIChBRCAxID0+IDEsIEFEIDE5OSA9PiAxOTkpXG4gKiAgICogYCdNTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbnVhcnktRGVjZW1iZXIpXG4gKiAgICogYCdNTU0nYDogTW9udGggaW4geWVhciAoSmFuLURlYylcbiAqICAgKiBgJ01NJ2A6IE1vbnRoIGluIHllYXIsIHBhZGRlZCAoMDEtMTIpXG4gKiAgICogYCdNJ2A6IE1vbnRoIGluIHllYXIgKDEtMTIpXG4gKiAgICogYCdMTExMJ2A6IFN0YW5kLWFsb25lIG1vbnRoIGluIHllYXIgKEphbnVhcnktRGVjZW1iZXIpXG4gKiAgICogYCdkZCdgOiBEYXkgaW4gbW9udGgsIHBhZGRlZCAoMDEtMzEpXG4gKiAgICogYCdkJ2A6IERheSBpbiBtb250aCAoMS0zMSlcbiAqICAgKiBgJ0VFRUUnYDogRGF5IGluIFdlZWssKFN1bmRheS1TYXR1cmRheSlcbiAqICAgKiBgJ0VFRSdgOiBEYXkgaW4gV2VlaywgKFN1bi1TYXQpXG4gKiAgICogYCdISCdgOiBIb3VyIGluIGRheSwgcGFkZGVkICgwMC0yMylcbiAqICAgKiBgJ0gnYDogSG91ciBpbiBkYXkgKDAtMjMpXG4gKiAgICogYCdoaCdgOiBIb3VyIGluIEFNL1BNLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnaCdgOiBIb3VyIGluIEFNL1BNLCAoMS0xMilcbiAqICAgKiBgJ21tJ2A6IE1pbnV0ZSBpbiBob3VyLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAnbSdgOiBNaW51dGUgaW4gaG91ciAoMC01OSlcbiAqICAgKiBgJ3NzJ2A6IFNlY29uZCBpbiBtaW51dGUsIHBhZGRlZCAoMDAtNTkpXG4gKiAgICogYCdzJ2A6IFNlY29uZCBpbiBtaW51dGUgKDAtNTkpXG4gKiAgICogYCdzc3MnYDogTWlsbGlzZWNvbmQgaW4gc2Vjb25kLCBwYWRkZWQgKDAwMC05OTkpXG4gKiAgICogYCdhJ2A6IEFNL1BNIG1hcmtlclxuICogICAqIGAnWidgOiA0IGRpZ2l0ICgrc2lnbikgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRpbWV6b25lIG9mZnNldCAoLTEyMDAtKzEyMDApXG4gKiAgICogYCd3dydgOiBXZWVrIG9mIHllYXIsIHBhZGRlZCAoMDAtNTMpLiBXZWVrIDAxIGlzIHRoZSB3ZWVrIHdpdGggdGhlIGZpcnN0IFRodXJzZGF5IG9mIHRoZSB5ZWFyXG4gKiAgICogYCd3J2A6IFdlZWsgb2YgeWVhciAoMC01MykuIFdlZWsgMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICogICAqIGAnRydgLCBgJ0dHJ2AsIGAnR0dHJ2A6IFRoZSBhYmJyZXZpYXRlZCBmb3JtIG9mIHRoZSBlcmEgc3RyaW5nIChlLmcuICdBRCcpXG4gKiAgICogYCdHR0dHJ2A6IFRoZSBsb25nIGZvcm0gb2YgdGhlIGVyYSBzdHJpbmcgKGUuZy4gJ0Fubm8gRG9taW5pJylcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYWxzbyBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcmVkZWZpbmVkXG4gKiAgIHtAbGluayBndWlkZS9pMThuIGxvY2FsaXphYmxlIGZvcm1hdHN9OlxuICpcbiAqICAgKiBgJ21lZGl1bSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHkgaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZVxuICogICAgIChlLmcuIFNlcCAzLCAyMDEwIDEyOjA1OjA4IFBNKVxuICogICAqIGAnc2hvcnQnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSBoOm1tIGEnYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiA5LzMvMTAgMTI6MDUgUE0pXG4gKiAgICogYCdmdWxsRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnRUVFRSwgTU1NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGVcbiAqICAgICAoZS5nLiBGcmlkYXksIFNlcHRlbWJlciAzLCAyMDEwKVxuICogICAqIGAnbG9uZ0RhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcHRlbWJlciAzLCAyMDEwKVxuICogICAqIGAnbWVkaXVtRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXAgMywgMjAxMClcbiAqICAgKiBgJ3Nob3J0RGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5J2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiA5LzMvMTApXG4gKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IFBNKVxuICogICAqIGAnc2hvcnRUaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1IFBNKVxuICpcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIGVzY2FwZWQgYnkgc3Vycm91bmRpbmcgd2l0aCBzaW5nbGUgcXVvdGVzIChlLmcuXG4gKiAgIGBcImggJ2luIHRoZSBtb3JuaW5nJ1wiYCkuIEluIG9yZGVyIHRvIG91dHB1dCBhIHNpbmdsZSBxdW90ZSwgZXNjYXBlIGl0IC0gaS5lLiwgdHdvIHNpbmdsZSBxdW90ZXMgaW4gYSBzZXF1ZW5jZVxuICogICAoZS5nLiBgXCJoICdvJydjbG9jaydcImApLlxuICpcbiAqICAgQW55IG90aGVyIGNoYXJhY3RlcnMgaW4gdGhlIGBmb3JtYXRgIHN0cmluZyB3aWxsIGJlIG91dHB1dCBhcy1pcy5cbiAqXG4gKiBAcGFyYW0geyhEYXRlfG51bWJlcnxzdHJpbmcpfSBkYXRlIERhdGUgdG8gZm9ybWF0IGVpdGhlciBhcyBEYXRlIG9iamVjdCwgbWlsbGlzZWNvbmRzIChzdHJpbmcgb3JcbiAqICAgIG51bWJlcikgb3IgdmFyaW91cyBJU08gODYwMSBkYXRldGltZSBzdHJpbmcgZm9ybWF0cyAoZS5nLiB5eXl5LU1NLWRkVEhIOm1tOnNzLnNzc1ogYW5kIGl0c1xuICogICAgc2hvcnRlciB2ZXJzaW9ucyBsaWtlIHl5eXktTU0tZGRUSEg6bW1aLCB5eXl5LU1NLWRkIG9yIHl5eXlNTWRkVEhIbW1zc1opLiBJZiBubyB0aW1lem9uZSBpc1xuICogICAgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaW5wdXQsIHRoZSB0aW1lIGlzIGNvbnNpZGVyZWQgdG8gYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICogQHBhcmFtIHtzdHJpbmc9fSBmb3JtYXQgRm9ybWF0dGluZyBydWxlcyAoc2VlIERlc2NyaXB0aW9uKS4gSWYgbm90IHNwZWNpZmllZCxcbiAqICAgIGBtZWRpdW1EYXRlYCBpcyB1c2VkLlxuICogQHBhcmFtIHtzdHJpbmc9fSB0aW1lem9uZSBUaW1lem9uZSB0byBiZSB1c2VkIGZvciBmb3JtYXR0aW5nLiBJdCB1bmRlcnN0YW5kcyBVVEMvR01UIGFuZCB0aGVcbiAqICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgIGV4YW1wbGUsIGAnKzA0MzAnYCAoNCBob3VycywgMzAgbWludXRlcyBlYXN0IG9mIHRoZSBHcmVlbndpY2ggbWVyaWRpYW4pXG4gKiAgICBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIgd2lsbCBiZSB1c2VkLlxuICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIHN0cmluZyBvciB0aGUgaW5wdXQgaWYgaW5wdXQgaXMgbm90IHJlY29nbml6ZWQgYXMgZGF0ZS9taWxsaXMuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJmaWx0ZXItZGF0ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+OlxuICAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj48YnI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSd9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOlwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXCJ9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOlwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXCJ9fTwvc3Bhbj48YnI+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goL09jdCAyXFxkLCAyMDEwIFxcZHsxLDJ9OlxcZHsyfTpcXGR7Mn0gKEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIjEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvMjAxMC0xMC0yXFxkIFxcZHsyfTpcXGR7Mn06XFxkezJ9ICgtfFxcKyk/XFxkezR9Lyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzEwXFwvMlxcZFxcLzIwMTAgQCBcXGR7MSwyfTpcXGR7Mn0oQU18UE0pLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcXFwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXFxcIlwiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzEwXFwvMlxcZFxcLzIwMTAgYXQgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmRhdGVGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gZGF0ZUZpbHRlcigkbG9jYWxlKSB7XG5cblxuICB2YXIgUl9JU084NjAxX1NUUiA9IC9eKFxcZHs0fSktPyhcXGRcXGQpLT8oXFxkXFxkKSg/OlQoXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86XFwuKFxcZCspKT8pPyk/KFp8KFsrLV0pKFxcZFxcZCk6PyhcXGRcXGQpKT8pPyQvO1xuICAgICAgICAgICAgICAgICAgICAgLy8gMSAgICAgICAgMiAgICAgICAzICAgICAgICAgNCAgICAgICAgICA1ICAgICAgICAgIDYgICAgICAgICAgNyAgICAgICAgICA4ICA5ICAgICAxMCAgICAgIDExXG4gIGZ1bmN0aW9uIGpzb25TdHJpbmdUb0RhdGUoc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICgobWF0Y2ggPSBzdHJpbmcubWF0Y2goUl9JU084NjAxX1NUUikpKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApLFxuICAgICAgICAgIHR6SG91ciA9IDAsXG4gICAgICAgICAgdHpNaW4gID0gMCxcbiAgICAgICAgICBkYXRlU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0Z1bGxZZWFyIDogZGF0ZS5zZXRGdWxsWWVhcixcbiAgICAgICAgICB0aW1lU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0hvdXJzIDogZGF0ZS5zZXRIb3VycztcblxuICAgICAgaWYgKG1hdGNoWzldKSB7XG4gICAgICAgIHR6SG91ciA9IHRvSW50KG1hdGNoWzldICsgbWF0Y2hbMTBdKTtcbiAgICAgICAgdHpNaW4gPSB0b0ludChtYXRjaFs5XSArIG1hdGNoWzExXSk7XG4gICAgICB9XG4gICAgICBkYXRlU2V0dGVyLmNhbGwoZGF0ZSwgdG9JbnQobWF0Y2hbMV0pLCB0b0ludChtYXRjaFsyXSkgLSAxLCB0b0ludChtYXRjaFszXSkpO1xuICAgICAgdmFyIGggPSB0b0ludChtYXRjaFs0XSB8fCAwKSAtIHR6SG91cjtcbiAgICAgIHZhciBtID0gdG9JbnQobWF0Y2hbNV0gfHwgMCkgLSB0ek1pbjtcbiAgICAgIHZhciBzID0gdG9JbnQobWF0Y2hbNl0gfHwgMCk7XG4gICAgICB2YXIgbXMgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoJzAuJyArIChtYXRjaFs3XSB8fCAwKSkgKiAxMDAwKTtcbiAgICAgIHRpbWVTZXR0ZXIuY2FsbChkYXRlLCBoLCBtLCBzLCBtcyk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuXG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCwgdGltZXpvbmUpIHtcbiAgICB2YXIgdGV4dCA9ICcnLFxuICAgICAgICBwYXJ0cyA9IFtdLFxuICAgICAgICBmbiwgbWF0Y2g7XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJ21lZGl1bURhdGUnO1xuICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDtcbiAgICBpZiAoaXNTdHJpbmcoZGF0ZSkpIHtcbiAgICAgIGRhdGUgPSBOVU1CRVJfU1RSSU5HLnRlc3QoZGF0ZSkgPyB0b0ludChkYXRlKSA6IGpzb25TdHJpbmdUb0RhdGUoZGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKGRhdGUpKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0RhdGUoZGF0ZSkgfHwgIWlzRmluaXRlKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgd2hpbGUgKGZvcm1hdCkge1xuICAgICAgbWF0Y2ggPSBEQVRFX0ZPUk1BVFNfU1BMSVQuZXhlYyhmb3JtYXQpO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHBhcnRzID0gY29uY2F0KHBhcnRzLCBtYXRjaCwgMSk7XG4gICAgICAgIGZvcm1hdCA9IHBhcnRzLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMucHVzaChmb3JtYXQpO1xuICAgICAgICBmb3JtYXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkYXRlVGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgaWYgKHRpbWV6b25lKSB7XG4gICAgICBkYXRlVGltZXpvbmVPZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBkYXRlVGltZXpvbmVPZmZzZXQpO1xuICAgICAgZGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUsIHRydWUpO1xuICAgIH1cbiAgICBmb3JFYWNoKHBhcnRzLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgZm4gPSBEQVRFX0ZPUk1BVFNbdmFsdWVdO1xuICAgICAgdGV4dCArPSBmbiA/IGZuKGRhdGUsICRsb2NhbGUuREFURVRJTUVfRk9STUFUUywgZGF0ZVRpbWV6b25lT2Zmc2V0KVxuICAgICAgICAgICAgICAgICA6IHZhbHVlID09PSAnXFwnXFwnJyA/ICdcXCcnIDogdmFsdWUucmVwbGFjZSgvKF4nfCckKS9nLCAnJykucmVwbGFjZSgvJycvZywgJ1xcJycpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBqc29uXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogICBBbGxvd3MgeW91IHRvIGNvbnZlcnQgYSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIEpTT04gc3RyaW5nLlxuICpcbiAqICAgVGhpcyBmaWx0ZXIgaXMgbW9zdGx5IHVzZWZ1bCBmb3IgZGVidWdnaW5nLiBXaGVuIHVzaW5nIHRoZSBkb3VibGUgY3VybHkge3t2YWx1ZX19IG5vdGF0aW9uXG4gKiAgIHRoZSBiaW5kaW5nIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIEpTT04uXG4gKlxuICogQHBhcmFtIHsqfSBvYmplY3QgQW55IEphdmFTY3JpcHQgb2JqZWN0IChpbmNsdWRpbmcgYXJyYXlzIGFuZCBwcmltaXRpdmUgdHlwZXMpIHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc3BhY2luZyBUaGUgbnVtYmVyIG9mIHNwYWNlcyB0byB1c2UgcGVyIGluZGVudGF0aW9uLCBkZWZhdWx0cyB0byAyLlxuICogQHJldHVybnMge3N0cmluZ30gSlNPTiBzdHJpbmcuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiZmlsdGVyLWpzb25cIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cHJlIGlkPVwiZGVmYXVsdC1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT5cbiAgICAgICA8cHJlIGlkPVwiY3VzdG9tLXNwYWNpbmdcIj57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbjo0IH19PC9wcmU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQganNvbmlmeSBmaWx0ZXJlZCBvYmplY3RzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGVmYXVsdC1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuIHsyfVwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1c3RvbS1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuIHs0fVwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICovXG5mdW5jdGlvbiBqc29uRmlsdGVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBzcGFjaW5nKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHNwYWNpbmcpKSB7XG4gICAgICAgIHNwYWNpbmcgPSAyO1xuICAgIH1cbiAgICByZXR1cm4gdG9Kc29uKG9iamVjdCwgc3BhY2luZyk7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBsb3dlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlXG4gKi9cbnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1cHBlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIudXBwZXJjYXNlXG4gKi9cbnZhciB1cHBlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKHVwcGVyY2FzZSk7XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbGltaXRUb1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgb3Igc3RyaW5nIGNvbnRhaW5pbmcgb25seSBhIHNwZWNpZmllZCBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBlbGVtZW50cyBhcmVcbiAqIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyLCBhcyBzcGVjaWZpZWQgYnlcbiAqIHRoZSB2YWx1ZSBhbmQgc2lnbiAocG9zaXRpdmUgb3IgbmVnYXRpdmUpIG9mIGBsaW1pdGAuIE90aGVyIGFycmF5LWxpa2Ugb2JqZWN0cyBhcmUgYWxzbyBzdXBwb3J0ZWRcbiAqIChlLmcuIGFycmF5IHN1YmNsYXNzZXMsIE5vZGVMaXN0cywganFMaXRlL2pRdWVyeSBjb2xsZWN0aW9ucyBldGMpLiBJZiBhIG51bWJlciBpcyB1c2VkIGFzIGlucHV0LFxuICogaXQgaXMgY29udmVydGVkIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8QXJyYXlMaWtlfHN0cmluZ3xudW1iZXJ9IGlucHV0IC0gQXJyYXkvYXJyYXktbGlrZSwgc3RyaW5nIG9yIG51bWJlciB0byBiZSBsaW1pdGVkLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsaW1pdCAtIFRoZSBsZW5ndGggb2YgdGhlIHJldHVybmVkIGFycmF5IG9yIHN0cmluZy4gSWYgdGhlIGBsaW1pdGAgbnVtYmVyXG4gKiAgICAgaXMgcG9zaXRpdmUsIGBsaW1pdGAgbnVtYmVyIG9mIGl0ZW1zIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZyBhcmUgY29waWVkLlxuICogICAgIElmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIGBsaW1pdGAgbnVtYmVyICBvZiBpdGVtcyBmcm9tIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheS9zdHJpbmdcbiAqICAgICBhcmUgY29waWVkLiBUaGUgYGxpbWl0YCB3aWxsIGJlIHRyaW1tZWQgaWYgaXQgZXhjZWVkcyBgYXJyYXkubGVuZ3RoYC4gSWYgYGxpbWl0YCBpcyB1bmRlZmluZWQsXG4gKiAgICAgdGhlIGlucHV0IHdpbGwgYmUgcmV0dXJuZWQgdW5jaGFuZ2VkLlxuICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBiZWdpbiAtIEluZGV4IGF0IHdoaWNoIHRvIGJlZ2luIGxpbWl0YXRpb24uIEFzIGEgbmVnYXRpdmUgaW5kZXgsXG4gKiAgICAgYGJlZ2luYCBpbmRpY2F0ZXMgYW4gb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgaW5wdXRgLiBEZWZhdWx0cyB0byBgMGAuXG4gKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfSBBIG5ldyBzdWItYXJyYXkgb3Igc3Vic3RyaW5nIG9mIGxlbmd0aCBgbGltaXRgIG9yIGxlc3MgaWYgdGhlIGlucHV0IGhhZFxuICogICAgIGxlc3MgdGhhbiBgbGltaXRgIGVsZW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsaW1pdFRvRXhhbXBsZVwiIG5hbWU9XCJsaW1pdC10by1maWx0ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpbWl0VG9FeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLm51bWJlcnMgPSBbMSwyLDMsNCw1LDYsNyw4LDldO1xuICAgICAgICAgICAgICRzY29wZS5sZXR0ZXJzID0gXCJhYmNkZWZnaGlcIjtcbiAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlciA9IDIzNDU0MzIzNDI7XG4gICAgICAgICAgICAgJHNjb3BlLm51bUxpbWl0ID0gMztcbiAgICAgICAgICAgICAkc2NvcGUubGV0dGVyTGltaXQgPSAzO1xuICAgICAgICAgICAgICRzY29wZS5sb25nTnVtYmVyTGltaXQgPSAzO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bnVtYmVyc319IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibnVtTGltaXRcIj5cbiAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8cD5PdXRwdXQgbnVtYmVyczoge3sgbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQgfX08L3A+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e2xldHRlcnN9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cImxldHRlckxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IGxldHRlcnM6IHt7IGxldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0IH19PC9wPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tsb25nTnVtYmVyfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsb25nTnVtYmVyTGltaXRcIj5cbiAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8cD5PdXRwdXQgbG9uZyBudW1iZXI6IHt7IGxvbmdOdW1iZXIgfCBsaW1pdFRvOmxvbmdOdW1iZXJMaW1pdCB9fTwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIG51bUxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdudW1MaW1pdCcpKTtcbiAgICAgICB2YXIgbGV0dGVyTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xldHRlckxpbWl0JykpO1xuICAgICAgIHZhciBsb25nTnVtYmVyTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xvbmdOdW1iZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZE51bWJlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ251bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTGV0dGVycyA9IGVsZW1lbnQoYnkuYmluZGluZygnbGV0dGVycyB8IGxpbWl0VG86bGV0dGVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWRMb25nTnVtYmVyID0gZWxlbWVudChieS5iaW5kaW5nKCdsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxpbWl0IHRoZSBudW1iZXIgYXJyYXkgdG8gZmlyc3QgdGhyZWUgaXRlbXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChudW1MaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxldHRlckxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7XG4gICAgICAgICBleHBlY3QobG9uZ051bWJlckxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzEsMiwzXScpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWRMZXR0ZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxldHRlcnM6IGFiYycpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAyMzQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIC8vIFRoZXJlIGlzIGEgYnVnIGluIHNhZmFyaSBhbmQgcHJvdHJhY3RvciB0aGF0IGRvZXNuJ3QgbGlrZSB0aGUgbWludXMga2V5XG4gICAgICAgLy8gaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIG91dHB1dCB3aGVuIC0zIGlzIGVudGVyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAvLyAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAvLyAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgLy8gICBsZXR0ZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBsZXR0ZXJMaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgbG9uZ051bWJlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFs3LDgsOV0nKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBnaGknKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMzQyJyk7XG4gICAgICAgLy8gfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIG5vdCBleGNlZWQgdGhlIG1heGltdW0gc2l6ZSBvZiBpbnB1dCBhcnJheScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgbnVtTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbnVtTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBsZXR0ZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICBsZXR0ZXJMaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTtcbiAgICAgICAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzEsMiwzLDQsNSw2LDcsOCw5XScpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWRMZXR0ZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxldHRlcnM6IGFiY2RlZmdoaScpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAyMzQ1NDMyMzQyJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiovXG5mdW5jdGlvbiBsaW1pdFRvRmlsdGVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGxpbWl0LCBiZWdpbikge1xuICAgIGlmIChNYXRoLmFicyhOdW1iZXIobGltaXQpKSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIGxpbWl0ID0gTnVtYmVyKGxpbWl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGltaXQgPSB0b0ludChsaW1pdCk7XG4gICAgfVxuICAgIGlmIChpc051bWJlck5hTihsaW1pdCkpIHJldHVybiBpbnB1dDtcblxuICAgIGlmIChpc051bWJlcihpbnB1dCkpIGlucHV0ID0gaW5wdXQudG9TdHJpbmcoKTtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuXG4gICAgYmVnaW4gPSAoIWJlZ2luIHx8IGlzTmFOKGJlZ2luKSkgPyAwIDogdG9JbnQoYmVnaW4pO1xuICAgIGJlZ2luID0gKGJlZ2luIDwgMCkgPyBNYXRoLm1heCgwLCBpbnB1dC5sZW5ndGggKyBiZWdpbikgOiBiZWdpbjtcblxuICAgIGlmIChsaW1pdCA+PSAwKSB7XG4gICAgICByZXR1cm4gc2xpY2VGbihpbnB1dCwgYmVnaW4sIGJlZ2luICsgbGltaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYmVnaW4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNsaWNlRm4oaW5wdXQsIGxpbWl0LCBpbnB1dC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNsaWNlRm4oaW5wdXQsIE1hdGgubWF4KDAsIGJlZ2luICsgbGltaXQpLCBiZWdpbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzbGljZUZuKGlucHV0LCBiZWdpbiwgZW5kKSB7XG4gIGlmIChpc1N0cmluZyhpbnB1dCkpIHJldHVybiBpbnB1dC5zbGljZShiZWdpbiwgZW5kKTtcblxuICByZXR1cm4gc2xpY2UuY2FsbChpbnB1dCwgYmVnaW4sIGVuZCk7XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgb3JkZXJCeVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgaXRlbXMgZnJvbSB0aGUgc3BlY2lmaWVkIGBjb2xsZWN0aW9uYCwgb3JkZXJlZCBieSBhIGBjb21wYXJhdG9yYFxuICogZnVuY3Rpb24gYmFzZWQgb24gdGhlIHZhbHVlcyBjb21wdXRlZCB1c2luZyB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYFt7aWQ6ICdmb28nfSwge2lkOiAnYmFyJ31dIHwgb3JkZXJCeTonaWQnYCB3b3VsZCByZXN1bHQgaW5cbiAqIGBbe2lkOiAnYmFyJ30sIHtpZDogJ2Zvbyd9XWAuXG4gKlxuICogVGhlIGBjb2xsZWN0aW9uYCBjYW4gYmUgYW4gQXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgKGUuZy4gTm9kZUxpc3QsIGpRdWVyeSBvYmplY3QsIFR5cGVkQXJyYXksXG4gKiBTdHJpbmcsIGV0YykuXG4gKlxuICogVGhlIGBleHByZXNzaW9uYCBjYW4gYmUgYSBzaW5nbGUgcHJlZGljYXRlLCBvciBhIGxpc3Qgb2YgcHJlZGljYXRlcyBlYWNoIHNlcnZpbmcgYXMgYSB0aWUtYnJlYWtlclxuICogZm9yIHRoZSBwcmVjZWRpbmcgb25lLiBUaGUgYGV4cHJlc3Npb25gIGlzIGV2YWx1YXRlZCBhZ2FpbnN0IGVhY2ggaXRlbSBhbmQgdGhlIG91dHB1dCBpcyB1c2VkXG4gKiBmb3IgY29tcGFyaW5nIHdpdGggb3RoZXIgaXRlbXMuXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgdGhlIHNvcnRpbmcgb3JkZXIgYnkgc2V0dGluZyBgcmV2ZXJzZWAgdG8gYHRydWVgLiBCeSBkZWZhdWx0LCBpdGVtcyBhcmUgc29ydGVkIGluXG4gKiBhc2NlbmRpbmcgb3JkZXIuXG4gKlxuICogVGhlIGNvbXBhcmlzb24gaXMgZG9uZSB1c2luZyB0aGUgYGNvbXBhcmF0b3JgIGZ1bmN0aW9uLiBJZiBub25lIGlzIHNwZWNpZmllZCwgYSBkZWZhdWx0LCBidWlsdC1pblxuICogY29tcGFyYXRvciBpcyB1c2VkIChzZWUgYmVsb3cgZm9yIGRldGFpbHMgLSBpbiBhIG51dHNoZWxsLCBpdCBjb21wYXJlcyBudW1iZXJzIG51bWVyaWNhbGx5IGFuZFxuICogc3RyaW5ncyBhbHBoYWJldGljYWxseSkuXG4gKlxuICogIyMjIFVuZGVyIHRoZSBob29kXG4gKlxuICogT3JkZXJpbmcgdGhlIHNwZWNpZmllZCBgY29sbGVjdGlvbmAgaGFwcGVucyBpbiB0d28gcGhhc2VzOlxuICpcbiAqIDEuIEFsbCBpdGVtcyBhcmUgcGFzc2VkIHRocm91Z2ggdGhlIHByZWRpY2F0ZSAob3IgcHJlZGljYXRlcyksIGFuZCB0aGUgcmV0dXJuZWQgdmFsdWVzIGFyZSBzYXZlZFxuICogICAgYWxvbmcgd2l0aCB0aGVpciB0eXBlIChgc3RyaW5nYCwgYG51bWJlcmAgZXRjKS4gRm9yIGV4YW1wbGUsIGFuIGl0ZW0gYHtsYWJlbDogJ2Zvbyd9YCwgcGFzc2VkXG4gKiAgICB0aHJvdWdoIGEgcHJlZGljYXRlIHRoYXQgZXh0cmFjdHMgdGhlIHZhbHVlIG9mIHRoZSBgbGFiZWxgIHByb3BlcnR5LCB3b3VsZCBiZSB0cmFuc2Zvcm1lZCB0bzpcbiAqICAgIGBgYFxuICogICAge1xuICogICAgICB2YWx1ZTogJ2ZvbycsXG4gKiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICogICAgICBpbmRleDogLi4uXG4gKiAgICB9XG4gKiAgICBgYGBcbiAqIDIuIFRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc29ydCB0aGUgaXRlbXMsIGJhc2VkIG9uIHRoZSBkZXJpdmVkIHZhbHVlcywgdHlwZXMgYW5kXG4gKiAgICBpbmRpY2VzLlxuICpcbiAqIElmIHlvdSB1c2UgYSBjdXN0b20gY29tcGFyYXRvciwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBwYWlycyBvZiBvYmplY3RzIG9mIHRoZSBmb3JtXG4gKiBge3ZhbHVlOiAuLi4sIHR5cGU6ICcuLi4nLCBpbmRleDogLi4ufWAgYW5kIGlzIGV4cGVjdGVkIHRvIHJldHVybiBgMGAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWFsXG4gKiAoYXMgZmFyIGFzIHRoZSBjb21wYXJhdG9yIGlzIGNvbmNlcm5lZCksIGAtMWAgaWYgdGhlIDFzdCBvbmUgc2hvdWxkIGJlIHJhbmtlZCBoaWdoZXIgdGhhbiB0aGVcbiAqIHNlY29uZCwgb3IgYDFgIG90aGVyd2lzZS5cbiAqXG4gKiBJbiBvcmRlciB0byBlbnN1cmUgdGhhdCB0aGUgc29ydGluZyB3aWxsIGJlIGRldGVybWluaXN0aWMgYWNyb3NzIHBsYXRmb3JtcywgaWYgbm9uZSBvZiB0aGVcbiAqIHNwZWNpZmllZCBwcmVkaWNhdGVzIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byBpdGVtcywgYG9yZGVyQnlgIHdpbGwgYXV0b21hdGljYWxseSBpbnRyb2R1Y2UgYVxuICogZHVtbXkgcHJlZGljYXRlIHRoYXQgcmV0dXJucyB0aGUgaXRlbSdzIGluZGV4IGFzIGB2YWx1ZWAuXG4gKiAoSWYgeW91IGFyZSB1c2luZyBhIGN1c3RvbSBjb21wYXJhdG9yLCBtYWtlIHN1cmUgaXQgY2FuIGhhbmRsZSB0aGlzIHByZWRpY2F0ZSBhcyB3ZWxsLilcbiAqXG4gKiBGaW5hbGx5LCBpbiBhbiBhdHRlbXB0IHRvIHNpbXBsaWZ5IHRoaW5ncywgaWYgYSBwcmVkaWNhdGUgcmV0dXJucyBhbiBvYmplY3QgYXMgdGhlIGV4dHJhY3RlZFxuICogdmFsdWUgZm9yIGFuIGl0ZW0sIGBvcmRlckJ5YCB3aWxsIHRyeSB0byBjb252ZXJ0IHRoYXQgb2JqZWN0IHRvIGEgcHJpbWl0aXZlIHZhbHVlLCBiZWZvcmUgcGFzc2luZ1xuICogaXQgdG8gdGhlIGNvbXBhcmF0b3IuIFRoZSBmb2xsb3dpbmcgcnVsZXMgZ292ZXJuIHRoZSBjb252ZXJzaW9uOlxuICpcbiAqIDEuIElmIHRoZSBvYmplY3QgaGFzIGEgYHZhbHVlT2YoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhIHByaW1pdGl2ZSwgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlXG4gKiAgICB1c2VkIGluc3RlYWQuPGJyIC8+XG4gKiAgICAoSWYgdGhlIG9iamVjdCBoYXMgYSBgdmFsdWVPZigpYCBtZXRob2QgdGhhdCByZXR1cm5zIGFub3RoZXIgb2JqZWN0LCB0aGVuIHRoZSByZXR1cm5lZCBvYmplY3RcbiAqICAgIHdpbGwgYmUgdXNlZCBpbiBzdWJzZXF1ZW50IHN0ZXBzLilcbiAqIDIuIElmIHRoZSBvYmplY3QgaGFzIGEgY3VzdG9tIGB0b1N0cmluZygpYCBtZXRob2QgKGkuZS4gbm90IHRoZSBvbmUgaW5oZXJpdGVkIGZyb20gYE9iamVjdGApIHRoYXRcbiAqICAgIHJldHVybnMgYSBwcmltaXRpdmUsIGl0cyByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuPGJyIC8+XG4gKiAgICAoSWYgdGhlIG9iamVjdCBoYXMgYSBgdG9TdHJpbmcoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbm90aGVyIG9iamVjdCwgdGhlbiB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gKiAgICB3aWxsIGJlIHVzZWQgaW4gc3Vic2VxdWVudCBzdGVwcy4pXG4gKiAzLiBObyBjb252ZXJzaW9uOyB0aGUgb2JqZWN0IGl0c2VsZiBpcyB1c2VkLlxuICpcbiAqICMjIyBUaGUgZGVmYXVsdCBjb21wYXJhdG9yXG4gKlxuICogVGhlIGRlZmF1bHQsIGJ1aWx0LWluIGNvbXBhcmF0b3Igc2hvdWxkIGJlIHN1ZmZpY2llbnQgZm9yIG1vc3QgdXNlY2FzZXMuIEluIHNob3J0LCBpdCBjb21wYXJlc1xuICogbnVtYmVycyBudW1lcmljYWxseSwgc3RyaW5ncyBhbHBoYWJldGljYWxseSAoYW5kIGNhc2UtaW5zZW5zaXRpdmVseSksIGZvciBvYmplY3RzIGZhbGxzIGJhY2sgdG9cbiAqIHVzaW5nIHRoZWlyIGluZGV4IGluIHRoZSBvcmlnaW5hbCBjb2xsZWN0aW9uLCBhbmQgc29ydHMgdmFsdWVzIG9mIGRpZmZlcmVudCB0eXBlcyBieSB0eXBlLlxuICpcbiAqIE1vcmUgc3BlY2lmaWNhbGx5LCBpdCBmb2xsb3dzIHRoZXNlIHN0ZXBzIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgb3JkZXIgb2YgaXRlbXM6XG4gKlxuICogMS4gSWYgdGhlIGNvbXBhcmVkIHZhbHVlcyBhcmUgb2YgZGlmZmVyZW50IHR5cGVzLCBjb21wYXJlIHRoZSB0eXBlcyB0aGVtc2VsdmVzIGFscGhhYmV0aWNhbGx5LlxuICogMi4gSWYgYm90aCB2YWx1ZXMgYXJlIG9mIHR5cGUgYHN0cmluZ2AsIGNvbXBhcmUgdGhlbSBhbHBoYWJldGljYWxseSBpbiBhIGNhc2UtIGFuZFxuICogICAgbG9jYWxlLWluc2Vuc2l0aXZlIHdheS5cbiAqIDMuIElmIGJvdGggdmFsdWVzIGFyZSBvYmplY3RzLCBjb21wYXJlIHRoZWlyIGluZGljZXMgaW5zdGVhZC5cbiAqIDQuIE90aGVyd2lzZSwgcmV0dXJuOlxuICogICAgLSAgYDBgLCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVhbCAoYnkgc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb24sIGkuZS4gdXNpbmcgYD09PWApLlxuICogICAgLSBgLTFgLCBpZiB0aGUgMXN0IHZhbHVlIGlzIFwibGVzcyB0aGFuXCIgdGhlIDJuZCB2YWx1ZSAoY29tcGFyZWQgdXNpbmcgdGhlIGA8YCBvcGVyYXRvcikuXG4gKiAgICAtICBgMWAsIG90aGVyd2lzZS5cbiAqXG4gKiAqKk5vdGU6KiogSWYgeW91IG5vdGljZSBudW1iZXJzIG5vdCBiZWluZyBzb3J0ZWQgYXMgZXhwZWN0ZWQsIG1ha2Ugc3VyZSB0aGV5IGFyZSBhY3R1YWxseSBiZWluZ1xuICogICAgICAgICAgIHNhdmVkIGFzIG51bWJlcnMgYW5kIG5vdCBzdHJpbmdzLlxuICogKipOb3RlOioqIEZvciB0aGUgcHVycG9zZSBvZiBzb3J0aW5nLCBgbnVsbGAgdmFsdWVzIGFyZSB0cmVhdGVkIGFzIHRoZSBzdHJpbmcgYCdudWxsJ2AgKGkuZS5cbiAqICAgICAgICAgICBgdHlwZTogJ3N0cmluZydgLCBgdmFsdWU6ICdudWxsJ2ApLiBUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIHNvcnQgb3JkZXIgcmVsYXRpdmUgdG9cbiAqICAgICAgICAgICBvdGhlciB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheXxBcnJheUxpa2V9IGNvbGxlY3Rpb24gLSBUaGUgY29sbGVjdGlvbiAoYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QpIHRvIHNvcnQuXG4gKiBAcGFyYW0geyhGdW5jdGlvbnxzdHJpbmd8QXJyYXkuPEZ1bmN0aW9ufHN0cmluZz4pPX0gZXhwcmVzc2lvbiAtIEEgcHJlZGljYXRlIChvciBsaXN0IG9mXG4gKiAgICBwcmVkaWNhdGVzKSB0byBiZSB1c2VkIGJ5IHRoZSBjb21wYXJhdG9yIHRvIGRldGVybWluZSB0aGUgb3JkZXIgb2YgZWxlbWVudHMuXG4gKlxuICogICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgICAtIGBGdW5jdGlvbmA6IEEgZ2V0dGVyIGZ1bmN0aW9uLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggZWFjaCBpdGVtIGFzIGFyZ3VtZW50IGFuZFxuICogICAgICB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZy5cbiAqICAgIC0gYHN0cmluZ2A6IEFuIEFuZ3VsYXIgZXhwcmVzc2lvbi4gVGhpcyBleHByZXNzaW9uIHdpbGwgYmUgZXZhbHVhdGVkIGFnYWluc3QgZWFjaCBpdGVtIGFuZCB0aGVcbiAqICAgICAgcmVzdWx0IHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZy4gRm9yIGV4YW1wbGUsIHVzZSBgJ2xhYmVsJ2AgdG8gc29ydCBieSBhIHByb3BlcnR5IGNhbGxlZFxuICogICAgICBgbGFiZWxgIG9yIGAnbGFiZWwuc3Vic3RyaW5nKDAsIDMpJ2AgdG8gc29ydCBieSB0aGUgZmlyc3QgMyBjaGFyYWN0ZXJzIG9mIHRoZSBgbGFiZWxgXG4gKiAgICAgIHByb3BlcnR5LjxiciAvPlxuICogICAgICAoVGhlIHJlc3VsdCBvZiBhIGNvbnN0YW50IGV4cHJlc3Npb24gaXMgaW50ZXJwcmV0ZWQgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvIGJlIHVzZWQgZm9yXG4gKiAgICAgIGNvbXBhcmlzb24uIEZvciBleGFtcGxlLCB1c2UgYCdcInNwZWNpYWwgbmFtZVwiJ2AgKG5vdGUgdGhlIGV4dHJhIHBhaXIgb2YgcXVvdGVzKSB0byBzb3J0IGJ5IGFcbiAqICAgICAgcHJvcGVydHkgY2FsbGVkIGBzcGVjaWFsIG5hbWVgLik8YnIgLz5cbiAqICAgICAgQW4gZXhwcmVzc2lvbiBjYW4gYmUgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCB0aGUgc29ydGluZyBkaXJlY3Rpb24sXG4gKiAgICAgIGFzY2VuZGluZyBvciBkZXNjZW5kaW5nLiBGb3IgZXhhbXBsZSwgYCcrbGFiZWwnYCBvciBgJy1sYWJlbCdgLiBJZiBubyBwcm9wZXJ0eSBpcyBwcm92aWRlZCxcbiAqICAgICAgKGUuZy4gYCcrJ2Agb3IgYCctJ2ApLCB0aGUgY29sbGVjdGlvbiBlbGVtZW50IGl0c2VsZiBpcyB1c2VkIGluIGNvbXBhcmlzb25zLlxuICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBhbmQvb3Igc3RyaW5nIHByZWRpY2F0ZXMuIElmIGEgcHJlZGljYXRlIGNhbm5vdCBkZXRlcm1pbmUgdGhlXG4gKiAgICAgIHJlbGF0aXZlIG9yZGVyIG9mIHR3byBpdGVtcywgdGhlIG5leHQgcHJlZGljYXRlIGlzIHVzZWQgYXMgYSB0aWUtYnJlYWtlci5cbiAqXG4gKiAqKk5vdGU6KiogSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSAtIElmIGB0cnVlYCwgcmV2ZXJzZSB0aGUgc29ydGluZyBvcmRlci5cbiAqIEBwYXJhbSB7KEZ1bmN0aW9uKT19IGNvbXBhcmF0b3IgLSBUaGUgY29tcGFyYXRvciBmdW5jdGlvbiB1c2VkIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgb3JkZXIgb2ZcbiAqICAgIHZhbHVlIHBhaXJzLiBJZiBvbWl0dGVkLCB0aGUgYnVpbHQtaW4gY29tcGFyYXRvciB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHJldHVybnMge0FycmF5fSAtIFRoZSBzb3J0ZWQgYXJyYXkuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgT3JkZXJpbmcgYSB0YWJsZSB3aXRoIGBuZ1JlcGVhdGBcbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgYSBzaW1wbGUge0BsaW5rIG5nUmVwZWF0IG5nUmVwZWF0fSwgd2hlcmUgdGhlIGRhdGEgaXMgc29ydGVkIGJ5XG4gKiBhZ2UgaW4gZGVzY2VuZGluZyBvcmRlciAoZXhwcmVzc2lvbiBpcyBzZXQgdG8gYCctYWdlJ2ApLiBUaGUgYGNvbXBhcmF0b3JgIGlzIG5vdCBzZXQsIHdoaWNoIG1lYW5zXG4gKiBpdCBkZWZhdWx0cyB0byB0aGUgYnVpbHQtaW4gY29tcGFyYXRvci5cbiAqXG4gICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1zdGF0aWNcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTFcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgIDx0aD5QaG9uZSBOdW1iZXI8L3RoPlxuICAgICAgICAgICAgIDx0aD5BZ2U8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OictYWdlJ1wiPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgPC90YWJsZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlMScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAgICAge25hbWU6ICdKb2huJywgICBwaG9uZTogJzU1NS0xMjEyJywgIGFnZTogMTB9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgcGhvbmU6ICc1NTUtOTg3NicsICBhZ2U6IDE5fSxcbiAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAge25hbWU6ICdBZGFtJywgICBwaG9uZTogJzU1NS01Njc4JywgIGFnZTogMzV9LFxuICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgcGhvbmU6ICc1NTUtODc2NScsICBhZ2U6IDI5fVxuICAgICAgICAgICBdO1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuZnJpZW5kcyB7XG4gICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgIH1cblxuICAgICAgIC5mcmllbmRzIHRoIHtcbiAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgICAgICB9XG4gICAgICAgLmZyaWVuZHMgdGQsIC5mcmllbmRzIHRoIHtcbiAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQ7XG4gICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICB9XG4gICAgICAgLmZyaWVuZHMgdGQ6Zmlyc3QtY2hpbGQsIC5mcmllbmRzIHRoOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgIGJvcmRlci1sZWZ0OiBub25lO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgLy8gRWxlbWVudCBsb2NhdG9yc1xuICAgICAgIHZhciBuYW1lcyA9IGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IGFnZSBpbiByZXZlcnNlIG9yZGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnTWlrZScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ01hcnknKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoNCkuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqIDxociAvPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQ2hhbmdpbmcgcGFyYW1ldGVycyBkeW5hbWljYWxseVxuICpcbiAqIEFsbCBwYXJhbWV0ZXJzIGNhbiBiZSBjaGFuZ2VkIGR5bmFtaWNhbGx5LiBUaGUgbmV4dCBleGFtcGxlIHNob3dzIGhvdyB5b3UgY2FuIG1ha2UgdGhlIGNvbHVtbnMgb2ZcbiAqIGEgdGFibGUgc29ydGFibGUsIGJ5IGJpbmRpbmcgdGhlIGBleHByZXNzaW9uYCBhbmQgYHJldmVyc2VgIHBhcmFtZXRlcnMgdG8gc2NvcGUgcHJvcGVydGllcy5cbiAqXG4gICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1keW5hbWljXCIgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGUyXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwcmU+U29ydCBieSA9IHt7cHJvcGVydHlOYW1lfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPlxuICAgICAgICAgPGhyLz5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJwcm9wZXJ0eU5hbWUgPSBudWxsOyByZXZlcnNlID0gZmFsc2VcIj5TZXQgdG8gdW5zb3J0ZWQ8L2J1dHRvbj5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCduYW1lJylcIj5OYW1lPC9idXR0b24+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICduYW1lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgncGhvbmUnKVwiPlBob25lIE51bWJlcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAncGhvbmUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTogcmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCdhZ2UnKVwiPkFnZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnYWdlJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6cHJvcGVydHlOYW1lOnJldmVyc2VcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTInLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgIHZhciBmcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgcGhvbmU6ICc1NTUtMTIxMicsICBhZ2U6IDEwfSxcbiAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIHBob25lOiAnNTU1LTk4NzYnLCAgYWdlOiAxOX0sXG4gICAgICAgICAgICAge25hbWU6ICdNaWtlJywgICBwaG9uZTogJzU1NS00MzIxJywgIGFnZTogMjF9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgcGhvbmU6ICc1NTUtNTY3OCcsICBhZ2U6IDM1fSxcbiAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIHBob25lOiAnNTU1LTg3NjUnLCAgYWdlOiAyOX1cbiAgICAgICAgICAgXTtcblxuICAgICAgICAgICAkc2NvcGUucHJvcGVydHlOYW1lID0gJ2FnZSc7XG4gICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBmcmllbmRzO1xuXG4gICAgICAgICAgICRzY29wZS5zb3J0QnkgPSBmdW5jdGlvbihwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9ICgkc2NvcGUucHJvcGVydHlOYW1lID09PSBwcm9wZXJ0eU5hbWUpID8gISRzY29wZS5yZXZlcnNlIDogZmFsc2U7XG4gICAgICAgICAgICAgJHNjb3BlLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG5cbiAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInOyAgIC8vIEJMQUNLIFVQLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICAgIC5zb3J0b3JkZXIucmV2ZXJzZTphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWJjJzsgICAvLyBCTEFDSyBET1dOLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgdmFyIHVuc29ydEJ1dHRvbiA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ3Vuc29ydGVkJykpO1xuICAgICAgIHZhciBuYW1lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnTmFtZScpKTtcbiAgICAgICB2YXIgcGhvbmVIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdQaG9uZScpKTtcbiAgICAgICB2YXIgYWdlSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnQWdlJykpO1xuICAgICAgIHZhciBmaXJzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdygwKSk7XG4gICAgICAgdmFyIGxhc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coNCkpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgYnkgc29tZSBwcm9wZXJ0eSwgd2hlbiBjbGlja2luZyBvbiB0aGUgY29sdW1uIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgcGhvbmVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG5cbiAgICAgICAgIG5hbWVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGluIHJldmVyc2Ugb3JkZXIsIHdoZW4gY2xpY2tpbmcgb24gdGhlIHNhbWUgY29sdW1uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgb3JkZXIsIHdoZW4gY2xpY2tpbmcgXCJTZXQgdG8gdW5zb3J0ZWRcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgdW5zb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICogPGhyIC8+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBVc2luZyBgb3JkZXJCeWAgaW5zaWRlIGEgY29udHJvbGxlclxuICpcbiAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gY2FsbCB0aGUgYG9yZGVyQnlgIGZpbHRlciBtYW51YWxseSwgYnkgaW5qZWN0aW5nIGBvcmRlckJ5RmlsdGVyYCwgYW5kXG4gKiBjYWxsaW5nIGl0IHdpdGggdGhlIGRlc2lyZWQgcGFyYW1ldGVycy4gKEFsdGVybmF0aXZlbHksIHlvdSBjb3VsZCBpbmplY3QgdGhlIGAkZmlsdGVyYCBmYWN0b3J5XG4gKiBhbmQgcmV0cmlldmUgdGhlIGBvcmRlckJ5YCBmaWx0ZXIgd2l0aCBgJGZpbHRlcignb3JkZXJCeScpYC4pXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktY2FsbC1tYW51YWxseVwiIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlM1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cHJlPlNvcnQgYnkgPSB7e3Byb3BlcnR5TmFtZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KG51bGwpXCI+U2V0IHRvIHVuc29ydGVkPC9idXR0b24+XG4gICAgICAgICA8aHIvPlxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnbmFtZScpXCI+TmFtZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnbmFtZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ3Bob25lJylcIj5QaG9uZSBOdW1iZXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ3Bob25lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnYWdlJylcIj5BZ2U8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ2FnZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHNcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTMnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ29yZGVyQnlGaWx0ZXInLCBmdW5jdGlvbigkc2NvcGUsIG9yZGVyQnkpIHtcbiAgICAgICAgICAgdmFyIGZyaWVuZHMgPSBbXG4gICAgICAgICAgICAge25hbWU6ICdKb2huJywgICBwaG9uZTogJzU1NS0xMjEyJywgIGFnZTogMTB9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgcGhvbmU6ICc1NTUtOTg3NicsICBhZ2U6IDE5fSxcbiAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAge25hbWU6ICdBZGFtJywgICBwaG9uZTogJzU1NS01Njc4JywgIGFnZTogMzV9LFxuICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgcGhvbmU6ICc1NTUtODc2NScsICBhZ2U6IDI5fVxuICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSAnYWdlJztcbiAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IG9yZGVyQnkoZnJpZW5kcywgJHNjb3BlLnByb3BlcnR5TmFtZSwgJHNjb3BlLnJldmVyc2UpO1xuXG4gICAgICAgICAgICRzY29wZS5zb3J0QnkgPSBmdW5jdGlvbihwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9IChwcm9wZXJ0eU5hbWUgIT09IG51bGwgJiYgJHNjb3BlLnByb3BlcnR5TmFtZSA9PT0gcHJvcGVydHlOYW1lKVxuICAgICAgICAgICAgICAgICA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBvcmRlckJ5KGZyaWVuZHMsICRzY29wZS5wcm9wZXJ0eU5hbWUsICRzY29wZS5yZXZlcnNlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG5cbiAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInOyAgIC8vIEJMQUNLIFVQLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICAgIC5zb3J0b3JkZXIucmV2ZXJzZTphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWJjJzsgICAvLyBCTEFDSyBET1dOLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgdmFyIHVuc29ydEJ1dHRvbiA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ3Vuc29ydGVkJykpO1xuICAgICAgIHZhciBuYW1lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnTmFtZScpKTtcbiAgICAgICB2YXIgcGhvbmVIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdQaG9uZScpKTtcbiAgICAgICB2YXIgYWdlSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnQWdlJykpO1xuICAgICAgIHZhciBmaXJzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdygwKSk7XG4gICAgICAgdmFyIGxhc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coNCkpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgYnkgc29tZSBwcm9wZXJ0eSwgd2hlbiBjbGlja2luZyBvbiB0aGUgY29sdW1uIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgcGhvbmVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG5cbiAgICAgICAgIG5hbWVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGluIHJldmVyc2Ugb3JkZXIsIHdoZW4gY2xpY2tpbmcgb24gdGhlIHNhbWUgY29sdW1uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgb3JkZXIsIHdoZW4gY2xpY2tpbmcgXCJTZXQgdG8gdW5zb3J0ZWRcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgdW5zb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICogPGhyIC8+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBVc2luZyBhIGN1c3RvbSBjb21wYXJhdG9yXG4gKlxuICogSWYgeW91IGhhdmUgdmVyeSBzcGVjaWZpYyByZXF1aXJlbWVudHMgYWJvdXQgdGhlIHdheSBpdGVtcyBhcmUgc29ydGVkLCB5b3UgY2FuIHBhc3MgeW91ciBvd25cbiAqIGNvbXBhcmF0b3IgZnVuY3Rpb24uIEZvciBleGFtcGxlLCB5b3UgbWlnaHQgbmVlZCB0byBjb21wYXJlIHNvbWUgc3RyaW5ncyBpbiBhIGxvY2FsZS1zZW5zaXRpdmVcbiAqIHdheS4gKFdoZW4gc3BlY2lmeWluZyBhIGN1c3RvbSBjb21wYXJhdG9yLCB5b3UgYWxzbyBuZWVkIHRvIHBhc3MgYSB2YWx1ZSBmb3IgdGhlIGByZXZlcnNlYFxuICogYXJndW1lbnQgLSBwYXNzaW5nIGBmYWxzZWAgcmV0YWlucyB0aGUgZGVmYXVsdCBzb3J0aW5nIG9yZGVyLCBpLmUuIGFzY2VuZGluZy4pXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktY3VzdG9tLWNvbXBhcmF0b3JcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZyaWVuZHMtY29udGFpbmVyIGN1c3RvbS1jb21wYXJhdG9yXCI+XG4gICAgICAgICAgIDxoMz5Mb2NhbGUtc2Vuc2l0aXZlIENvbXBhcmF0b3I8L2gzPlxuICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgICAgPHRoPkZhdm9yaXRlIExldHRlcjwvdGg+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OidmYXZvcml0ZUxldHRlcic6ZmFsc2U6bG9jYWxlU2Vuc2l0aXZlQ29tcGFyYXRvclwiPlxuICAgICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuZmF2b3JpdGVMZXR0ZXJ9fTwvdGQ+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZyaWVuZHMtY29udGFpbmVyIGRlZmF1bHQtY29tcGFyYXRvclwiPlxuICAgICAgICAgICA8aDM+RGVmYXVsdCBDb21wYXJhdG9yPC9oMz5cbiAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICAgIDx0aD5GYXZvcml0ZSBMZXR0ZXI8L3RoPlxuICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonZmF2b3JpdGVMZXR0ZXInXCI+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5mYXZvcml0ZUxldHRlcn19PC90ZD5cbiAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTQnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS5mcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgZmF2b3JpdGVMZXR0ZXI6ICfDhCd9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgZmF2b3JpdGVMZXR0ZXI6ICfDnCd9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWlrZScsICAgZmF2b3JpdGVMZXR0ZXI6ICfDlid9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgZmF2b3JpdGVMZXR0ZXI6ICdIJ30sXG4gICAgICAgICAgICAge25hbWU6ICdKdWxpZScsICBmYXZvcml0ZUxldHRlcjogJ1onfVxuICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICRzY29wZS5sb2NhbGVTZW5zaXRpdmVDb21wYXJhdG9yID0gZnVuY3Rpb24odjEsIHYyKSB7XG4gICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgZ2V0IHN0cmluZ3MsIGp1c3QgY29tcGFyZSBieSBpbmRleFxuICAgICAgICAgICAgIGlmICh2MS50eXBlICE9PSAnc3RyaW5nJyB8fCB2Mi50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgcmV0dXJuICh2MS5pbmRleCA8IHYyLmluZGV4KSA/IC0xIDogMTtcbiAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAvLyBDb21wYXJlIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHksIHRha2luZyBsb2NhbGUgaW50byBhY2NvdW50XG4gICAgICAgICAgICAgcmV0dXJuIHYxLnZhbHVlLmxvY2FsZUNvbXBhcmUodjIudmFsdWUpO1xuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuZnJpZW5kcy1jb250YWluZXIge1xuICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgbWFyZ2luOiAwIDMwcHg7XG4gICAgICAgfVxuXG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIC8vIEVsZW1lbnQgbG9jYXRvcnNcbiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5jc3MoJy5jdXN0b20tY29tcGFyYXRvcicpKTtcbiAgICAgICB2YXIgbmFtZXMgPSBjb250YWluZXIuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IGZhdm9yaXRlIGxldHRlciAoaW4gY29ycmVjdCBhbHBoYWJldGljYWwgb3JkZXIpJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoMikuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnTWFyeScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCg0KS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbm9yZGVyQnlGaWx0ZXIuJGluamVjdCA9IFsnJHBhcnNlJ107XG5mdW5jdGlvbiBvcmRlckJ5RmlsdGVyKCRwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlciwgY29tcGFyZUZuKSB7XG5cbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIGFycmF5O1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICB0aHJvdyBtaW5FcnIoJ29yZGVyQnknKSgnbm90YXJyYXknLCAnRXhwZWN0ZWQgYXJyYXkgYnV0IHJlY2VpdmVkOiB7MH0nLCBhcnJheSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KHNvcnRQcmVkaWNhdGUpKSB7IHNvcnRQcmVkaWNhdGUgPSBbc29ydFByZWRpY2F0ZV07IH1cbiAgICBpZiAoc29ydFByZWRpY2F0ZS5sZW5ndGggPT09IDApIHsgc29ydFByZWRpY2F0ZSA9IFsnKyddOyB9XG5cbiAgICB2YXIgcHJlZGljYXRlcyA9IHByb2Nlc3NQcmVkaWNhdGVzKHNvcnRQcmVkaWNhdGUpO1xuXG4gICAgdmFyIGRlc2NlbmRpbmcgPSByZXZlcnNlT3JkZXIgPyAtMSA6IDE7XG5cbiAgICAvLyBEZWZpbmUgdGhlIGBjb21wYXJlKClgIGZ1bmN0aW9uLiBVc2UgYSBkZWZhdWx0IGNvbXBhcmF0b3IgaWYgbm9uZSBpcyBzcGVjaWZpZWQuXG4gICAgdmFyIGNvbXBhcmUgPSBpc0Z1bmN0aW9uKGNvbXBhcmVGbikgPyBjb21wYXJlRm4gOiBkZWZhdWx0Q29tcGFyZTtcblxuICAgIC8vIFRoZSBuZXh0IHRocmVlIGxpbmVzIGFyZSBhIHZlcnNpb24gb2YgYSBTd2FydHppYW4gVHJhbnNmb3JtIGlkaW9tIGZyb20gUGVybFxuICAgIC8vIChzb21ldGltZXMgY2FsbGVkIHRoZSBEZWNvcmF0ZS1Tb3J0LVVuZGVjb3JhdGUgaWRpb20pXG4gICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NjaHdhcnR6aWFuX3RyYW5zZm9ybVxuICAgIHZhciBjb21wYXJlVmFsdWVzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFycmF5LCBnZXRDb21wYXJpc29uT2JqZWN0KTtcbiAgICBjb21wYXJlVmFsdWVzLnNvcnQoZG9Db21wYXJpc29uKTtcbiAgICBhcnJheSA9IGNvbXBhcmVWYWx1ZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGl0ZW0udmFsdWU7IH0pO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGFyaXNvbk9iamVjdCh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIC8vIE5PVEU6IFdlIGFyZSBhZGRpbmcgYW4gZXh0cmEgYHRpZUJyZWFrZXJgIHZhbHVlIGJhc2VkIG9uIHRoZSBlbGVtZW50J3MgaW5kZXguXG4gICAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBrZWVwIHRoZSBzb3J0IHN0YWJsZSB3aGVuIG5vbmUgb2YgdGhlIGlucHV0IHByZWRpY2F0ZXMgY2FuXG4gICAgICAvLyBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byBlbGVtZW50cy5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgdGllQnJlYWtlcjoge3ZhbHVlOiBpbmRleCwgdHlwZTogJ251bWJlcicsIGluZGV4OiBpbmRleH0sXG4gICAgICAgIHByZWRpY2F0ZVZhbHVlczogcHJlZGljYXRlcy5tYXAoZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFByZWRpY2F0ZVZhbHVlKHByZWRpY2F0ZS5nZXQodmFsdWUpLCBpbmRleCk7XG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvQ29tcGFyaXNvbih2MSwgdjIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHByZWRpY2F0ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZSh2MS5wcmVkaWNhdGVWYWx1ZXNbaV0sIHYyLnByZWRpY2F0ZVZhbHVlc1tpXSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogcHJlZGljYXRlc1tpXS5kZXNjZW5kaW5nICogZGVzY2VuZGluZztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcGFyZSh2MS50aWVCcmVha2VyLCB2Mi50aWVCcmVha2VyKSAqIGRlc2NlbmRpbmc7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NQcmVkaWNhdGVzKHNvcnRQcmVkaWNhdGVzKSB7XG4gICAgcmV0dXJuIHNvcnRQcmVkaWNhdGVzLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBkZXNjZW5kaW5nID0gMSwgZ2V0ID0gaWRlbnRpdHk7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHByZWRpY2F0ZSkpIHtcbiAgICAgICAgZ2V0ID0gcHJlZGljYXRlO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7XG4gICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PT0gJysnIHx8IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT09ICctJykpIHtcbiAgICAgICAgICBkZXNjZW5kaW5nID0gcHJlZGljYXRlLmNoYXJBdCgwKSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY2F0ZSAhPT0gJycpIHtcbiAgICAgICAgICBnZXQgPSAkcGFyc2UocHJlZGljYXRlKTtcbiAgICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gZ2V0KCk7XG4gICAgICAgICAgICBnZXQgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7Z2V0OiBnZXQsIGRlc2NlbmRpbmc6IGRlc2NlbmRpbmd9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzogLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnYm9vbGVhbic6IC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9iamVjdFZhbHVlKHZhbHVlKSB7XG4gICAgLy8gSWYgYHZhbHVlT2ZgIGlzIGEgdmFsaWQgZnVuY3Rpb24gdXNlIHRoYXRcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZS52YWx1ZU9mKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIC8vIElmIGB0b1N0cmluZ2AgaXMgYSB2YWxpZCBmdW5jdGlvbiBhbmQgbm90IHRoZSBvbmUgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAgdXNlIHRoYXRcbiAgICBpZiAoaGFzQ3VzdG9tVG9TdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UHJlZGljYXRlVmFsdWUodmFsdWUsIGluZGV4KSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICB0eXBlID0gJ3N0cmluZyc7XG4gICAgICB2YWx1ZSA9ICdudWxsJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWx1ZSA9IG9iamVjdFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIHR5cGU6IHR5cGUsIGluZGV4OiBpbmRleH07XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyZSh2MSwgdjIpIHtcbiAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICB2YXIgdHlwZTEgPSB2MS50eXBlO1xuICAgIHZhciB0eXBlMiA9IHYyLnR5cGU7XG5cbiAgICBpZiAodHlwZTEgPT09IHR5cGUyKSB7XG4gICAgICB2YXIgdmFsdWUxID0gdjEudmFsdWU7XG4gICAgICB2YXIgdmFsdWUyID0gdjIudmFsdWU7XG5cbiAgICAgIGlmICh0eXBlMSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQ29tcGFyZSBzdHJpbmdzIGNhc2UtaW5zZW5zaXRpdmVseVxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZTEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFsdWUyID0gdmFsdWUyLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUxID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBGb3IgYmFzaWMgb2JqZWN0cywgdXNlIHRoZSBwb3NpdGlvbiBvZiB0aGUgb2JqZWN0XG4gICAgICAgIC8vIGluIHRoZSBjb2xsZWN0aW9uIGluc3RlYWQgb2YgdGhlIHZhbHVlXG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZTEpKSB2YWx1ZTEgPSB2MS5pbmRleDtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlMikpIHZhbHVlMiA9IHYyLmluZGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUxICE9PSB2YWx1ZTIpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWUxIDwgdmFsdWUyID8gLTEgOiAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0eXBlMSA8IHR5cGUyID8gLTEgOiAxO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbmdEaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHtcbiAgICBkaXJlY3RpdmUgPSB7XG4gICAgICBsaW5rOiBkaXJlY3RpdmVcbiAgICB9O1xuICB9XG4gIGRpcmVjdGl2ZS5yZXN0cmljdCA9IGRpcmVjdGl2ZS5yZXN0cmljdCB8fCAnQUMnO1xuICByZXR1cm4gdmFsdWVGbihkaXJlY3RpdmUpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIGFcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNb2RpZmllcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgaHRtbCBhIHRhZyBzbyB0aGF0IHRoZSBkZWZhdWx0IGFjdGlvbiBpcyBwcmV2ZW50ZWQgd2hlblxuICogdGhlIGhyZWYgYXR0cmlidXRlIGlzIGVtcHR5LlxuICpcbiAqIEZvciBkeW5hbWljYWxseSBjcmVhdGluZyBgaHJlZmAgYXR0cmlidXRlcyBmb3IgYSB0YWdzLCBzZWUgdGhlIHtAbGluayBuZy5uZ0hyZWYgYG5nSHJlZmB9IGRpcmVjdGl2ZS5cbiAqL1xudmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgIC8vIElmIHRoZSBsaW5rZWQgZWxlbWVudCBpcyBub3QgYW4gYW5jaG9yIHRhZyBhbnltb3JlLCBkbyBub3RoaW5nXG4gICAgICAgIGlmIChlbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdhJykgcmV0dXJuO1xuXG4gICAgICAgIC8vIFNWR0FFbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUsIGJ1dCByYXRoZXIgdGhlICd4bGlua0hyZWYnIGF0dHJpYnV0ZS5cbiAgICAgICAgdmFyIGhyZWYgPSB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJyA/XG4gICAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnIDogJ2hyZWYnO1xuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBocmVmIHVybCwgdGhlbiBkb24ndCBuYXZpZ2F0ZSBhbnl3aGVyZS5cbiAgICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cihocmVmKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSHJlZlxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGFuIGhyZWYgYXR0cmlidXRlIHdpbGxcbiAqIG1ha2UgdGhlIGxpbmsgZ28gdG8gdGhlIHdyb25nIFVSTCBpZiB0aGUgdXNlciBjbGlja3MgaXQgYmVmb3JlXG4gKiBBbmd1bGFyIGhhcyBhIGNoYW5jZSB0byByZXBsYWNlIHRoZSBge3toYXNofX1gIG1hcmt1cCB3aXRoIGl0c1xuICogdmFsdWUuIFVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIG1hcmt1cCB0aGUgbGluayB3aWxsIGJlIGJyb2tlblxuICogYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlXG4gKiBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSB3cm9uZyB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBuZy1ocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBBXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ0hyZWYgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgdmFyaW91cyBjb21iaW5hdGlvbnMgb2YgYGhyZWZgLCBgbmctaHJlZmAgYW5kIGBuZy1jbGlja2AgYXR0cmlidXRlc1xuICogaW4gbGlua3MgYW5kIHRoZWlyIGRpZmZlcmVudCBiZWhhdmlvcnM6XG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nLWhyZWZcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbHVlXCIgLz48YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTFcIiBocmVmIG5nLWNsaWNrPVwidmFsdWUgPSAxXCI+bGluayAxPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstMlwiIGhyZWY9XCJcIiBuZy1jbGljaz1cInZhbHVlID0gMlwiPmxpbmsgMjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTNcIiBuZy1ocmVmPVwiL3t7JzEyMyd9fVwiPmxpbmsgMzwvYT4gKGxpbmssIHJlbG9hZCEpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay00XCIgaHJlZj1cIlwiIG5hbWU9XCJ4eFwiIG5nLWNsaWNrPVwidmFsdWUgPSA0XCI+YW5jaG9yPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNVwiIG5hbWU9XCJ4eHhcIiBuZy1jbGljaz1cInZhbHVlID0gNVwiPmFuY2hvcjwvYT4gKG5vIGxpbmspPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay02XCIgbmctaHJlZj1cInt7dmFsdWV9fVwiPmxpbms8L2E+IChsaW5rLCBjaGFuZ2UgbG9jYXRpb24pXG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgd2l0aG91dCB2YWx1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMScpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzEnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0xJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTInKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcyJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBhbmQgY2hhbmdlIHVybCB3aGVuIG5nLWhyZWYgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9NYXRjaCgvXFwvMTIzJC8pO1xuXG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0zJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuXG5cbiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzEyMyQvKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDUwMDAsICdwYWdlIHNob3VsZCBuYXZpZ2F0ZSB0byAvMTIzJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nIGFuZCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzQnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay00JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gbm8gaHJlZiBidXQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc1Jyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNScpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZShudWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBvbmx5IGNoYW5nZSB1cmwgd2hlbiBvbmx5IG5nLWhyZWYnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5jbGVhcigpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLnNlbmRLZXlzKCc2Jyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNicpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9NYXRjaCgvXFwvNiQvKTtcblxuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNicpKS5jbGljaygpO1xuXG4gICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHVzZSBicm93c2VyLmRyaXZlciB0byBnZXQgdGhlIGJhc2Ugd2ViZHJpdmVyLlxuICAgICAgICAgIGJyb3dzZXIud2FpdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVybC5tYXRjaCgvXFwvNiQvKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDUwMDAsICdwYWdlIHNob3VsZCBuYXZpZ2F0ZSB0byAvNicpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1NyY1xuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY2AgYXR0cmlidXRlIGRvZXNuJ3RcbiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWxcbiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxuICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY2AgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgc3JjPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCIgYWx0PVwiRGVzY3JpcHRpb25cIi8+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIG5nLXNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiIGFsdD1cIkRlc2NyaXB0aW9uXCIgLz5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IElNR1xuICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdTcmMgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTcmNzZXRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNzZXRgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNzZXRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIHNyY3NldD1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeFwiIGFsdD1cIkRlc2NyaXB0aW9uXCIvPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBuZy1zcmNzZXQ9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMnhcIiBhbHQ9XCJEZXNjcmlwdGlvblwiIC8+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBJTUdcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3Jjc2V0IGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRGlzYWJsZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgc2V0cyB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgKHR5cGljYWxseSBhIGZvcm0gY29udHJvbCxcbiAqIGUuZy4gYGlucHV0YCwgYGJ1dHRvbmAsIGBzZWxlY3RgIGV0Yy4pIGlmIHRoZVxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW5zaWRlIGBuZ0Rpc2FibGVkYCBldmFsdWF0ZXMgdG8gdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYGRpc2FibGVkYFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctZGlzYWJsZWRcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DbGljayBtZSB0byB0b2dnbGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxidXR0b24gbmctbW9kZWw9XCJidXR0b25cIiBuZy1kaXNhYmxlZD1cImNoZWNrZWRcIj5CdXR0b248L2J1dHRvbj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDaGVja2VkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0cyB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ0NoZWNrZWRgIGlzIHRydXRoeS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBkaXJlY3RpdmUgc2hvdWxkIG5vdCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGgge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSxcbiAqIGFzIHRoaXMgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvci5cbiAqXG4gKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBjaGVja2VkYFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctY2hlY2tlZFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIGNoZWNrIGJvdGg6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm1hc3RlclwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgPGlucHV0IGlkPVwiY2hlY2tTbGF2ZVwiIHR5cGU9XCJjaGVja2JveFwiIG5nLWNoZWNrZWQ9XCJtYXN0ZXJcIiBhcmlhLWxhYmVsPVwiU2xhdmUgaW5wdXRcIj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBib3RoIGNoZWNrQm94ZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnbWFzdGVyJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IElOUFVUXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hlY2tlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdSZWFkb25seVxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBgcmVhZG9ubHlgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ1JlYWRvbmx5YCBpcyB0cnV0aHkuXG4gKiBOb3RlIHRoYXQgYHJlYWRvbmx5YCBhcHBsaWVzIG9ubHkgdG8gYGlucHV0YCBlbGVtZW50cyB3aXRoIHNwZWNpZmljIHR5cGVzLiBbU2VlIHRoZSBpbnB1dCBkb2NzIG9uXG4gKiBNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNhdHRyLXJlYWRvbmx5KSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGByZWFkb25seWBcbiAqIGF0dHJpYnV0ZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nLXJlYWRvbmx5XCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgdG8gbWFrZSB0ZXh0IHJlYWRvbmx5OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1yZWFkb25seT1cImNoZWNrZWRcIiB2YWx1ZT1cIkknbSBBbmd1bGFyXCIgYXJpYS1sYWJlbD1cIlJlYWRvbmx5IGZpZWxkXCIgLz5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgcmVhZG9ubHkgYXR0cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9XCJ0ZXh0XCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9XCJ0ZXh0XCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdSZWFkb25seSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJyZWFkb25seVwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU2VsZWN0ZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgYHNlbGVjdGVkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQsIGlmIHRoZSBleHByZXNzaW9uIGluc2lkZSBgbmdTZWxlY3RlZGAgaXMgdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYHNlbGVjdGVkYFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgKipOb3RlOioqIGBuZ1NlbGVjdGVkYCBkb2VzIG5vdCBpbnRlcmFjdCB3aXRoIHRoZSBgc2VsZWN0YCBhbmQgYG5nTW9kZWxgIGRpcmVjdGl2ZXMsIGl0IG9ubHlcbiAqICAgc2V0cyB0aGUgYHNlbGVjdGVkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuIElmIHlvdSBhcmUgdXNpbmcgYG5nTW9kZWxgIG9uIHRoZSBzZWxlY3QsIHlvdVxuICogICBzaG91bGQgbm90IHVzZSBgbmdTZWxlY3RlZGAgb24gdGhlIG9wdGlvbnMsIGFzIGBuZ01vZGVsYCB3aWxsIHNldCB0aGUgc2VsZWN0IHZhbHVlIGFuZFxuICogICBzZWxlY3RlZCBvcHRpb25zLlxuICogPC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctc2VsZWN0ZWRcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBzZWxlY3Q6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8c2VsZWN0IGFyaWEtbGFiZWw9XCJuZ1NlbGVjdGVkIGRlbW9cIj5cbiAgICAgICAgICA8b3B0aW9uPkhlbGxvITwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gaWQ9XCJncmVldFwiIG5nLXNlbGVjdGVkPVwic2VsZWN0ZWRcIj5HcmVldGluZ3MhPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBHcmVldGluZ3MhJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2dyZWV0JykpLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc2VsZWN0ZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBPUFRJT05cbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTZWxlY3RlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJzZWxlY3RlZFwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ09wZW5cbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgYG9wZW5gIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ09wZW5gIGlzIHRydXRoeS5cbiAqXG4gKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBvcGVuYFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogIyMgQSBub3RlIGFib3V0IGJyb3dzZXIgY29tcGF0aWJpbGl0eVxuICpcbiAqIEVkZ2UsIEZpcmVmb3gsIGFuZCBJbnRlcm5ldCBFeHBsb3JlciBkbyBub3Qgc3VwcG9ydCB0aGUgYGRldGFpbHNgIGVsZW1lbnQsIGl0IGlzXG4gKiByZWNvbW1lbmRlZCB0byB1c2Uge0BsaW5rIG5nLm5nU2hvd30gYW5kIHtAbGluayBuZy5uZ0hpZGV9IGluc3RlYWQuXG4gKlxuICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cIm5nLW9wZW5cIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGxhYmVsPkNoZWNrIG1lIGNoZWNrIG11bHRpcGxlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJvcGVuXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICAgPGRldGFpbHMgaWQ9XCJkZXRhaWxzXCIgbmctb3Blbj1cIm9wZW5cIj5cbiAgICAgICAgICAgIDxzdW1tYXJ5PlNob3cvSGlkZSBtZTwvc3VtbWFyeT5cbiAgICAgICAgIDwvZGV0YWlscz5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgb3BlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ29wZW4nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RldGFpbHMnKSkuZ2V0QXR0cmlidXRlKCdvcGVuJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IERFVEFJTFNcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdPcGVuIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcIm9wZW5cIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cbnZhciBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyA9IHt9O1xuXG4vLyBib29sZWFuIGF0dHJzIGFyZSBldmFsdWF0ZWRcbmZvckVhY2goQk9PTEVBTl9BVFRSLCBmdW5jdGlvbihwcm9wTmFtZSwgYXR0ck5hbWUpIHtcbiAgLy8gYmluZGluZyB0byBtdWx0aXBsZSBpcyBub3Qgc3VwcG9ydGVkXG4gIGlmIChwcm9wTmFtZSA9PT0gJ211bHRpcGxlJykgcmV0dXJuO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICBzY29wZS4kd2F0Y2goYXR0cltub3JtYWxpemVkXSwgZnVuY3Rpb24gbmdCb29sZWFuQXR0cldhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICBhdHRyLiRzZXQoYXR0ck5hbWUsICEhdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIHZhciBsaW5rRm4gPSBkZWZhdWx0TGlua0ZuO1xuXG4gIGlmIChwcm9wTmFtZSA9PT0gJ2NoZWNrZWQnKSB7XG4gICAgbGlua0ZuID0gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIC8vIGVuc3VyaW5nIG5nQ2hlY2tlZCBkb2Vzbid0IGludGVyZmVyZSB3aXRoIG5nTW9kZWwgd2hlbiBib3RoIGFyZSBzZXQgb24gdGhlIHNhbWUgaW5wdXRcbiAgICAgIGlmIChhdHRyLm5nTW9kZWwgIT09IGF0dHJbbm9ybWFsaXplZF0pIHtcbiAgICAgICAgZGVmYXVsdExpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgbGluazogbGlua0ZuXG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vLyBhbGlhc2VkIGlucHV0IGF0dHJzIGFyZSBldmFsdWF0ZWRcbmZvckVhY2goQUxJQVNFRF9BVFRSLCBmdW5jdGlvbihodG1sQXR0ciwgbmdBdHRyKSB7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25nQXR0cl0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIC8vc3BlY2lhbCBjYXNlIG5nUGF0dGVybiB3aGVuIGEgbGl0ZXJhbCByZWd1bGFyIGV4cHJlc3Npb24gdmFsdWVcbiAgICAgICAgLy9pcyB1c2VkIGFzIHRoZSBleHByZXNzaW9uICh0aGlzIHdheSB3ZSBkb24ndCBoYXZlIHRvIHdhdGNoIGFueXRoaW5nKS5cbiAgICAgICAgaWYgKG5nQXR0ciA9PT0gJ25nUGF0dGVybicgJiYgYXR0ci5uZ1BhdHRlcm4uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBhdHRyLm5nUGF0dGVybi5tYXRjaChSRUdFWF9TVFJJTkdfUkVHRVhQKTtcbiAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGF0dHIuJHNldCgnbmdQYXR0ZXJuJywgbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cltuZ0F0dHJdLCBmdW5jdGlvbiBuZ0F0dHJBbGlhc1dhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgYXR0ci4kc2V0KG5nQXR0ciwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8vIG5nLXNyYywgbmctc3Jjc2V0LCBuZy1ocmVmIGFyZSBpbnRlcnBvbGF0ZWRcbmZvckVhY2goWydzcmMnLCAnc3Jjc2V0JywgJ2hyZWYnXSwgZnVuY3Rpb24oYXR0ck5hbWUpIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiA5OSwgLy8gaXQgbmVlZHMgdG8gcnVuIGFmdGVyIHRoZSBhdHRyaWJ1dGVzIGFyZSBpbnRlcnBvbGF0ZWRcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IGF0dHJOYW1lLFxuICAgICAgICAgICAgbmFtZSA9IGF0dHJOYW1lO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnICYmXG4gICAgICAgICAgICB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykge1xuICAgICAgICAgIG5hbWUgPSAneGxpbmtIcmVmJztcbiAgICAgICAgICBhdHRyLiRhdHRyW25hbWVdID0gJ3hsaW5rOmhyZWYnO1xuICAgICAgICAgIHByb3BOYW1lID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGF0dHIuJG9ic2VydmUobm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdocmVmJykge1xuICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIHZhbHVlKTtcblxuICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuICAgICAgICAgIC8vIE9uIElFLCBpZiBcIm5nOnNyY1wiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCBcInNyY1wiIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgLy8gdGhlbiBjYWxsaW5nIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCAnZm9vJykgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHNldCB0aGUgcHJvcGVydHkgYXMgd2VsbCB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICAgICAgICAvLyBXZSB1c2UgYXR0clthdHRyTmFtZV0gdmFsdWUgc2luY2UgJHNldCBjYW4gc2FuaXRpemUgdGhlIHVybC5cbiAgICAgICAgICBpZiAobXNpZSAmJiBwcm9wTmFtZSkgZWxlbWVudC5wcm9wKHByb3BOYW1lLCBhdHRyW25hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vKiBnbG9iYWwgLW51bGxGb3JtQ3RybCwgLVBFTkRJTkdfQ0xBU1MsIC1TVUJNSVRURURfQ0xBU1NcbiAqL1xudmFyIG51bGxGb3JtQ3RybCA9IHtcbiAgJGFkZENvbnRyb2w6IG5vb3AsXG4gICQkcmVuYW1lQ29udHJvbDogbnVsbEZvcm1SZW5hbWVDb250cm9sLFxuICAkcmVtb3ZlQ29udHJvbDogbm9vcCxcbiAgJHNldFZhbGlkaXR5OiBub29wLFxuICAkc2V0RGlydHk6IG5vb3AsXG4gICRzZXRQcmlzdGluZTogbm9vcCxcbiAgJHNldFN1Ym1pdHRlZDogbm9vcFxufSxcblBFTkRJTkdfQ0xBU1MgPSAnbmctcGVuZGluZycsXG5TVUJNSVRURURfQ0xBU1MgPSAnbmctc3VibWl0dGVkJztcblxuZnVuY3Rpb24gbnVsbEZvcm1SZW5hbWVDb250cm9sKGNvbnRyb2wsIG5hbWUpIHtcbiAgY29udHJvbC4kbmFtZSA9IG5hbWU7XG59XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0geWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgYWxsIG9mIHRoZSBjb250YWluaW5nIGZvcm1zIGFuZCBjb250cm9scyBhcmUgdmFsaWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGNvbnRhaW5pbmcgY29udHJvbCBvciBmb3JtIGlzIGludmFsaWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwZW5kaW5nIFRydWUgaWYgYXQgbGVhc3Qgb25lIGNvbnRhaW5pbmcgY29udHJvbCBvciBmb3JtIGlzIHBlbmRpbmcuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRzdWJtaXR0ZWQgVHJ1ZSBpZiB1c2VyIGhhcyBzdWJtaXR0ZWQgdGhlIGZvcm0gZXZlbiBpZiBpdHMgaW52YWxpZC5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIElzIGFuIG9iamVjdCBoYXNoLCBjb250YWluaW5nIHJlZmVyZW5jZXMgdG8gY29udHJvbHMgb3JcbiAqICBmb3JtcyB3aXRoIGZhaWxpbmcgdmFsaWRhdG9ycywgd2hlcmU6XG4gKlxuICogIC0ga2V5cyBhcmUgdmFsaWRhdGlvbiB0b2tlbnMgKGVycm9yIG5hbWVzKSxcbiAqICAtIHZhbHVlcyBhcmUgYXJyYXlzIG9mIGNvbnRyb2xzIG9yIGZvcm1zIHRoYXQgaGF2ZSBhIGZhaWxpbmcgdmFsaWRhdG9yIGZvciBnaXZlbiBlcnJvciBuYW1lLlxuICpcbiAqICBCdWlsdC1pbiB2YWxpZGF0aW9uIHRva2VuczpcbiAqXG4gKiAgLSBgZW1haWxgXG4gKiAgLSBgbWF4YFxuICogIC0gYG1heGxlbmd0aGBcbiAqICAtIGBtaW5gXG4gKiAgLSBgbWlubGVuZ3RoYFxuICogIC0gYG51bWJlcmBcbiAqICAtIGBwYXR0ZXJuYFxuICogIC0gYHJlcXVpcmVkYFxuICogIC0gYHVybGBcbiAqICAtIGBkYXRlYFxuICogIC0gYGRhdGV0aW1lbG9jYWxgXG4gKiAgLSBgdGltZWBcbiAqICAtIGB3ZWVrYFxuICogIC0gYG1vbnRoYFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYEZvcm1Db250cm9sbGVyYCBrZWVwcyB0cmFjayBvZiBhbGwgaXRzIGNvbnRyb2xzIGFuZCBuZXN0ZWQgZm9ybXMgYXMgd2VsbCBhcyB0aGUgc3RhdGUgb2YgdGhlbSxcbiAqIHN1Y2ggYXMgYmVpbmcgdmFsaWQvaW52YWxpZCBvciBkaXJ0eS9wcmlzdGluZS5cbiAqXG4gKiBFYWNoIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfSBkaXJlY3RpdmUgY3JlYXRlcyBhbiBpbnN0YW5jZVxuICogb2YgYEZvcm1Db250cm9sbGVyYC5cbiAqXG4gKi9cbi8vYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG5Gb3JtQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCcsICckYXR0cnMnLCAnJHNjb3BlJywgJyRhbmltYXRlJywgJyRpbnRlcnBvbGF0ZSddO1xuZnVuY3Rpb24gRm9ybUNvbnRyb2xsZXIoJGVsZW1lbnQsICRhdHRycywgJHNjb3BlLCAkYW5pbWF0ZSwgJGludGVycG9sYXRlKSB7XG4gIHRoaXMuJCRjb250cm9scyA9IFtdO1xuXG4gIC8vIGluaXQgc3RhdGVcbiAgdGhpcy4kZXJyb3IgPSB7fTtcbiAgdGhpcy4kJHN1Y2Nlc3MgPSB7fTtcbiAgdGhpcy4kcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgdGhpcy4kbmFtZSA9ICRpbnRlcnBvbGF0ZSgkYXR0cnMubmFtZSB8fCAkYXR0cnMubmdGb3JtIHx8ICcnKSgkc2NvcGUpO1xuICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gIHRoaXMuJHZhbGlkID0gdHJ1ZTtcbiAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xuICB0aGlzLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG5cbiAgdGhpcy4kJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgdGhpcy4kJGFuaW1hdGUgPSAkYW5pbWF0ZTtcblxuICBzZXR1cFZhbGlkaXR5KHRoaXMpO1xufVxuXG5Gb3JtQ29udHJvbGxlci5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSb2xsYmFjayBhbGwgZm9ybSBjb250cm9scyBwZW5kaW5nIHVwZGF0ZXMgdG8gdGhlIGAkbW9kZWxWYWx1ZWAuXG4gICAqXG4gICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZVxuICAgKiBldmVudCBkZWZpbmVkIGluIGBuZy1tb2RlbC1vcHRpb25zYC4gVGhpcyBtZXRob2QgaXMgdHlwaWNhbGx5IG5lZWRlZCBieSB0aGUgcmVzZXQgYnV0dG9uIG9mXG4gICAqIGEgZm9ybSB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHBlbmQgdXBkYXRlcy5cbiAgICovXG4gICRyb2xsYmFja1ZpZXdWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaCh0aGlzLiQkY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21taXQgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gICRjb21taXRWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2godGhpcy4kJGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRhZGRDb250cm9sXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sIGNvbnRyb2wgb2JqZWN0LCBlaXRoZXIgYSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlcn0gb3IgYW5cbiAgICoge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJ9XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBhIGNvbnRyb2wgd2l0aCB0aGUgZm9ybS4gSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5XG4gICAqIHdoZW4gdGhleSBhcmUgbGlua2VkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRyb2wgd2lsbCBub3QgYmUgcmVmbGVjdGVkIG9uIHRoZSBuZXcgcGFyZW50IGZvcm0uIFRoaXNcbiAgICogaXMgbm90IGFuIGlzc3VlIHdpdGggbm9ybWFsIHVzZSwgYXMgZnJlc2hseSBjb21waWxlZCBhbmQgbGlua2VkIGNvbnRyb2xzIGFyZSBpbiBhIGAkcHJpc3RpbmVgXG4gICAqIHN0YXRlLlxuICAgKlxuICAgKiBIb3dldmVyLCBpZiB0aGUgbWV0aG9kIGlzIHVzZWQgcHJvZ3JhbW1hdGljYWxseSwgZm9yIGV4YW1wbGUgYnkgYWRkaW5nIGR5bmFtaWNhbGx5IGNyZWF0ZWQgY29udHJvbHMsXG4gICAqIG9yIGNvbnRyb2xzIHRoYXQgaGF2ZSBiZWVuIHByZXZpb3VzbHkgcmVtb3ZlZCB3aXRob3V0IGRlc3Ryb3lpbmcgdGhlaXIgY29ycmVzcG9uZGluZyBET00gZWxlbWVudCxcbiAgICogaXQncyB0aGUgZGV2ZWxvcGVycyByZXNwb25zaWJpbGl0eSB0byBtYWtlIHN1cmUgdGhlIGN1cnJlbnQgc3RhdGUgcHJvcGFnYXRlcyB0byB0aGUgcGFyZW50IGZvcm0uXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpZiBhbiBpbnB1dCBjb250cm9sIGlzIGFkZGVkIHRoYXQgaXMgYWxyZWFkeSBgJGRpcnR5YCBhbmQgaGFzIGAkZXJyb3JgIHByb3BlcnRpZXMsXG4gICAqIGNhbGxpbmcgYCRzZXREaXJ0eSgpYCBhbmQgYCR2YWxpZGF0ZSgpYCBhZnRlcndhcmRzIHdpbGwgcHJvcGFnYXRlIHRoZSBzdGF0ZSB0byB0aGUgcGFyZW50IGZvcm0uXG4gICAqL1xuICAkYWRkQ29udHJvbDogZnVuY3Rpb24oY29udHJvbCkge1xuICAgIC8vIEJyZWFraW5nIGNoYW5nZSAtIGJlZm9yZSwgaW5wdXRzIHdob3NlIG5hbWUgd2FzIFwiaGFzT3duUHJvcGVydHlcIiB3ZXJlIHF1aWV0bHkgaWdub3JlZFxuICAgIC8vIGFuZCBub3QgYWRkZWQgdG8gdGhlIHNjb3BlLiAgTm93IHdlIHRocm93IGFuIGVycm9yLlxuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KGNvbnRyb2wuJG5hbWUsICdpbnB1dCcpO1xuICAgIHRoaXMuJCRjb250cm9scy5wdXNoKGNvbnRyb2wpO1xuXG4gICAgaWYgKGNvbnRyb2wuJG5hbWUpIHtcbiAgICAgIHRoaXNbY29udHJvbC4kbmFtZV0gPSBjb250cm9sO1xuICAgIH1cblxuICAgIGNvbnRyb2wuJCRwYXJlbnRGb3JtID0gdGhpcztcbiAgfSxcblxuICAvLyBQcml2YXRlIEFQSTogcmVuYW1lIGEgZm9ybSBjb250cm9sXG4gICQkcmVuYW1lQ29udHJvbDogZnVuY3Rpb24oY29udHJvbCwgbmV3TmFtZSkge1xuICAgIHZhciBvbGROYW1lID0gY29udHJvbC4kbmFtZTtcblxuICAgIGlmICh0aGlzW29sZE5hbWVdID09PSBjb250cm9sKSB7XG4gICAgICBkZWxldGUgdGhpc1tvbGROYW1lXTtcbiAgICB9XG4gICAgdGhpc1tuZXdOYW1lXSA9IGNvbnRyb2w7XG4gICAgY29udHJvbC4kbmFtZSA9IG5ld05hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcmVtb3ZlQ29udHJvbFxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbCBjb250cm9sIG9iamVjdCwgZWl0aGVyIGEge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXJ9IG9yIGFuXG4gICAqIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyfVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVyZWdpc3RlciBhIGNvbnRyb2wgZnJvbSB0aGUgZm9ybS5cbiAgICpcbiAgICogSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhleSBhcmUgZGVzdHJveWVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgb25seSB0aGUgcmVtb3ZlZCBjb250cm9sJ3MgdmFsaWRhdGlvbiBzdGF0ZSAoYCRlcnJvcnNgZXRjLikgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlXG4gICAqIGZvcm0uIGAkZGlydHlgLCBgJHN1Ym1pdHRlZGAgc3RhdGVzIHdpbGwgbm90IGJlIGNoYW5nZWQsIGJlY2F1c2UgdGhlIGV4cGVjdGVkIGJlaGF2aW9yIGNhbiBiZVxuICAgKiBkaWZmZXJlbnQgZnJvbSBjYXNlIHRvIGNhc2UuIEZvciBleGFtcGxlLCByZW1vdmluZyB0aGUgb25seSBgJGRpcnR5YCBjb250cm9sIGZyb20gYSBmb3JtIG1heSBvclxuICAgKiBtYXkgbm90IG1lYW4gdGhhdCB0aGUgZm9ybSBpcyBzdGlsbCBgJGRpcnR5YC5cbiAgICovXG4gICRyZW1vdmVDb250cm9sOiBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgaWYgKGNvbnRyb2wuJG5hbWUgJiYgdGhpc1tjb250cm9sLiRuYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgZGVsZXRlIHRoaXNbY29udHJvbC4kbmFtZV07XG4gICAgfVxuICAgIGZvckVhY2godGhpcy4kcGVuZGluZywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgIHRoaXMuJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0sIHRoaXMpO1xuICAgIGZvckVhY2godGhpcy4kZXJyb3IsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICB0aGlzLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9LCB0aGlzKTtcbiAgICBmb3JFYWNoKHRoaXMuJCRzdWNjZXNzLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgdGhpcy4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSwgdGhpcyk7XG5cbiAgICBhcnJheVJlbW92ZSh0aGlzLiQkY29udHJvbHMsIGNvbnRyb2wpO1xuICAgIGNvbnRyb2wuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldERpcnR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGEgZGlydHkgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gYWRkIHRoZSAnbmctZGlydHknIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gdG8gYSBkaXJ0eVxuICAgKiBzdGF0ZSAobmctZGlydHkgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy5cbiAgICovXG4gICRzZXREaXJ0eTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIHRoaXMuJGRpcnR5ID0gdHJ1ZTtcbiAgICB0aGlzLiRwcmlzdGluZSA9IGZhbHNlO1xuICAgIHRoaXMuJCRwYXJlbnRGb3JtLiRzZXREaXJ0eSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFByaXN0aW5lXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2V0cyB0aGUgZm9ybSdzIGAkcHJpc3RpbmVgIHN0YXRlIHRvIHRydWUsIHRoZSBgJGRpcnR5YCBzdGF0ZSB0byBmYWxzZSwgcmVtb3Zlc1xuICAgKiB0aGUgYG5nLWRpcnR5YCBjbGFzcyBhbmQgYWRkcyB0aGUgYG5nLXByaXN0aW5lYCBjbGFzcy4gQWRkaXRpb25hbGx5LCBpdCBzZXRzIHRoZSBgJHN1Ym1pdHRlZGBcbiAgICogc3RhdGUgdG8gZmFsc2UuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gYWxsIHRoZSBjb250cm9scyBjb250YWluZWQgaW4gdGhpcyBmb3JtLlxuICAgKlxuICAgKiBTZXR0aW5nIGEgZm9ybSBiYWNrIHRvIGEgcHJpc3RpbmUgc3RhdGUgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gd2Ugd2FudCB0byAncmV1c2UnIGEgZm9ybSBhZnRlclxuICAgKiBzYXZpbmcgb3IgcmVzZXR0aW5nIGl0LlxuICAgKi9cbiAgJHNldFByaXN0aW5lOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MsIERJUlRZX0NMQVNTICsgJyAnICsgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgICB0aGlzLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICBmb3JFYWNoKHRoaXMuJCRjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kc2V0UHJpc3RpbmUoKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy10b3VjaGVkJyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIGNvbnRyb2xzIHRvIHRoZWlyXG4gICAqIHVudG91Y2hlZCBzdGF0ZSAobmctdW50b3VjaGVkIGNsYXNzKS5cbiAgICpcbiAgICogU2V0dGluZyBhIGZvcm0gY29udHJvbHMgYmFjayB0byB0aGVpciB1bnRvdWNoZWQgc3RhdGUgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gc2V0dGluZyB0aGUgZm9ybVxuICAgKiBiYWNrIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICovXG4gICRzZXRVbnRvdWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2godGhpcy4kJGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRzZXRVbnRvdWNoZWQoKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRTdWJtaXR0ZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHN1Ym1pdHRlZCBzdGF0ZS5cbiAgICovXG4gICRzZXRTdWJtaXR0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBTVUJNSVRURURfQ0xBU1MpO1xuICAgIHRoaXMuJHN1Ym1pdHRlZCA9IHRydWU7XG4gICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldFN1Ym1pdHRlZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXRzIHRoZSB2YWxpZGl0eSBvZiBhIGZvcm0gY29udHJvbC5cbiAqXG4gKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy5cbiAqL1xuYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICBjbGF6ejogRm9ybUNvbnRyb2xsZXIsXG4gIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgIHZhciBsaXN0ID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICBpZiAoIWxpc3QpIHtcbiAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBbY29udHJvbGxlcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihjb250cm9sbGVyKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgbGlzdC5wdXNoKGNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2xsZXIpIHtcbiAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5UmVtb3ZlKGxpc3QsIGNvbnRyb2xsZXIpO1xuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Zvcm1cbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTFxuICogZG9lcyBub3QgYWxsb3cgbmVzdGluZyBvZiBmb3JtIGVsZW1lbnRzLiBJdCBpcyB1c2VmdWwgdG8gbmVzdCBmb3JtcywgZm9yIGV4YW1wbGUgaWYgdGhlIHZhbGlkaXR5IG9mIGFcbiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxuICpcbiAqIE5vdGU6IHRoZSBwdXJwb3NlIG9mIGBuZ0Zvcm1gIGlzIHRvIGdyb3VwIGNvbnRyb2xzLFxuICogYnV0IG5vdCB0byBiZSBhIHJlcGxhY2VtZW50IGZvciB0aGUgYDxmb3JtPmAgdGFnIHdpdGggYWxsIG9mIGl0cyBjYXBhYmlsaXRpZXNcbiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICpcbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBmb3JtXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgaW5zdGFudGlhdGVzXG4gKiB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciBGb3JtQ29udHJvbGxlcn0uXG4gKlxuICogSWYgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyXG4gKiB0aGlzIG5hbWUuXG4gKlxuICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9XG4gKlxuICogSW4gQW5ndWxhciwgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSwgd2hpY2ggYmVoYXZlcyBpZGVudGljYWxseSB0b1xuICogYGZvcm1gIGJ1dCBjYW4gYmUgbmVzdGVkLiBOZXN0ZWQgZm9ybXMgY2FuIGJlIHVzZWZ1bCwgZm9yIGV4YW1wbGUsIGlmIHRoZSB2YWxpZGl0eSBvZiBhIHN1Yi1ncm91cFxuICogb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiAjIENTUyBjbGFzc2VzXG4gKiAgLSBgbmctdmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyB2YWxpZC5cbiAqICAtIGBuZy1pbnZhbGlkYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgaW52YWxpZC5cbiAqICAtIGBuZy1wZW5kaW5nYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcGVuZGluZy5cbiAqICAtIGBuZy1wcmlzdGluZWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHByaXN0aW5lLlxuICogIC0gYG5nLWRpcnR5YCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgZGlydHkuXG4gKiAgLSBgbmctc3VibWl0dGVkYCBpcyBzZXQgaWYgdGhlIGZvcm0gd2FzIHN1Ym1pdHRlZC5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKlxuICogIyBTdWJtaXR0aW5nIGEgZm9ybSBhbmQgcHJldmVudGluZyB0aGUgZGVmYXVsdCBhY3Rpb25cbiAqXG4gKiBTaW5jZSB0aGUgcm9sZSBvZiBmb3JtcyBpbiBjbGllbnQtc2lkZSBBbmd1bGFyIGFwcGxpY2F0aW9ucyBpcyBkaWZmZXJlbnQgdGhhbiBpbiBjbGFzc2ljYWxcbiAqIHJvdW5kdHJpcCBhcHBzLCBpdCBpcyBkZXNpcmFibGUgZm9yIHRoZSBicm93c2VyIG5vdCB0byB0cmFuc2xhdGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbnRvIGEgZnVsbFxuICogcGFnZSByZWxvYWQgdGhhdCBzZW5kcyB0aGUgZGF0YSB0byB0aGUgc2VydmVyLiBJbnN0ZWFkIHNvbWUgamF2YXNjcmlwdCBsb2dpYyBzaG91bGQgYmUgdHJpZ2dlcmVkXG4gKiB0byBoYW5kbGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbiBhbiBhcHBsaWNhdGlvbi1zcGVjaWZpYyB3YXkuXG4gKlxuICogRm9yIHRoaXMgcmVhc29uLCBBbmd1bGFyIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAoZm9ybSBzdWJtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIpIHVubGVzcyB0aGVcbiAqIGA8Zm9ybT5gIGVsZW1lbnQgaGFzIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBzcGVjaWZpZWQuXG4gKlxuICogWW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgdHdvIHdheXMgdG8gc3BlY2lmeSB3aGF0IGphdmFzY3JpcHQgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlblxuICogYSBmb3JtIGlzIHN1Ym1pdHRlZDpcbiAqXG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9IGRpcmVjdGl2ZSBvbiB0aGUgZm9ybSBlbGVtZW50XG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmUgb24gdGhlIGZpcnN0XG4gICogIGJ1dHRvbiBvciBpbnB1dCBmaWVsZCBvZiB0eXBlIHN1Ym1pdCAoaW5wdXRbdHlwZT1zdWJtaXRdKVxuICpcbiAqIFRvIHByZXZlbnQgZG91YmxlIGV4ZWN1dGlvbiBvZiB0aGUgaGFuZGxlciwgdXNlIG9ubHkgb25lIG9mIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fVxuICogb3Ige0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZXMuXG4gKiBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmb3JtIHN1Ym1pc3Npb24gcnVsZXMgaW4gdGhlIEhUTUwgc3BlY2lmaWNhdGlvbjpcbiAqXG4gKiAtIElmIGEgZm9ybSBoYXMgb25seSBvbmUgaW5wdXQgZmllbGQgdGhlbiBoaXR0aW5nIGVudGVyIGluIHRoaXMgZmllbGQgdHJpZ2dlcnMgZm9ybSBzdWJtaXRcbiAqIChgbmdTdWJtaXRgKVxuICogLSBpZiBhIGZvcm0gaGFzIDIrIGlucHV0IGZpZWxkcyBhbmQgbm8gYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbiBoaXR0aW5nIGVudGVyXG4gKiBkb2Vzbid0IHRyaWdnZXIgc3VibWl0XG4gKiAtIGlmIGEgZm9ybSBoYXMgb25lIG9yIG1vcmUgaW5wdXQgZmllbGRzIGFuZCBvbmUgb3IgbW9yZSBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuXG4gKiBoaXR0aW5nIGVudGVyIGluIGFueSBvZiB0aGUgaW5wdXQgZmllbGRzIHdpbGwgdHJpZ2dlciB0aGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgKmZpcnN0KiBidXR0b24gb3JcbiAqIGlucHV0W3R5cGU9c3VibWl0XSAoYG5nQ2xpY2tgKSAqYW5kKiBhIHN1Ym1pdCBoYW5kbGVyIG9uIHRoZSBlbmNsb3NpbmcgZm9ybSAoYG5nU3VibWl0YClcbiAqXG4gKiBBbnkgcGVuZGluZyBgbmdNb2RlbE9wdGlvbnNgIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgdHJpZ2dlcmVkIHdoZW4gYW55IG9mIHRoZSBhc3NvY2lhdGVkIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqIFRoZXNlIGNsYXNzZXMgYXJlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55XG4gKiBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgd2l0aGluIHRoZSBmb3JtLiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgc2ltaWxhciB0byBob3dcbiAqIHRoZXkgd29yayBpbiBuZ0NsYXNzIGFuZCBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsXG4gKiBhcyBKUyBhbmltYXRpb25zLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIHNpbXBsZSB3YXkgdG8gdXRpbGl6ZSBDU1MgdHJhbnNpdGlvbnMgdG8gc3R5bGUgYSBmb3JtIGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktZm9ybSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAqIH1cbiAqIC5teS1mb3JtLm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctZm9ybVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAubXktZm9ybS5uZy1pbnZhbGlkIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRm9ybUNvbnRyb2xsZXJcIiBjbGFzcz1cIm15LWZvcm1cIj5cbiAgICAgICAgIHVzZXJUeXBlOiA8aW5wdXQgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1c2VyVHlwZVwiIHJlcXVpcmVkPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPjxicj5cbiAgICAgICAgIDxjb2RlPnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxicj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIHVzZXJJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXJUeXBlJykpO1xuXG4gICAgICAgICAgdXNlcklucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3VzZXJUeXBlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gKi9cbnZhciBmb3JtRGlyZWN0aXZlRmFjdG9yeSA9IGZ1bmN0aW9uKGlzTmdGb3JtKSB7XG4gIHJldHVybiBbJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcGFyc2UpIHtcbiAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHtcbiAgICAgIG5hbWU6ICdmb3JtJyxcbiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLFxuICAgICAgcmVxdWlyZTogWydmb3JtJywgJ15eP2Zvcm0nXSwgLy9maXJzdCBpcyB0aGUgZm9ybSdzIG93biBjdHJsLCBzZWNvbmQgaXMgYW4gb3B0aW9uYWwgcGFyZW50IGZvcm1cbiAgICAgIGNvbnRyb2xsZXI6IEZvcm1Db250cm9sbGVyLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdGb3JtQ29tcGlsZShmb3JtRWxlbWVudCwgYXR0cikge1xuICAgICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICAgIGZvcm1FbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgICAgdmFyIG5hbWVBdHRyID0gYXR0ci5uYW1lID8gJ25hbWUnIDogKGlzTmdGb3JtICYmIGF0dHIubmdGb3JtID8gJ25nRm9ybScgOiBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nRm9ybVByZUxpbmsoc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjdHJsc1swXTtcblxuICAgICAgICAgICAgLy8gaWYgYGFjdGlvbmAgYXR0ciBpcyBub3QgcHJlc2VudCBvbiB0aGUgZm9ybSwgcHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gKHN1Ym1pc3Npb24pXG4gICAgICAgICAgICBpZiAoISgnYWN0aW9uJyBpbiBhdHRyKSkge1xuICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAvLyBhY3Rpb24gaXMgbm90IHByZXZlbnRlZC4gc2VlICMxMjM4XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsXG4gICAgICAgICAgICAgIC8vIHBhZ2UgcmVsb2FkIGlmIHRoZSBmb3JtIHdhcyBkZXN0cm95ZWQgYnkgc3VibWlzc2lvbiBvZiB0aGUgZm9ybSB2aWEgYSBjbGljayBoYW5kbGVyXG4gICAgICAgICAgICAgIC8vIG9uIGEgYnV0dG9uIGluIHRoZSBmb3JtLiBMb29rcyBsaWtlIGFuIElFOSBzcGVjaWZpYyBidWcuXG4gICAgICAgICAgICAgIHZhciBoYW5kbGVGb3JtU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgZm9ybUVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuXG4gICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhXG4gICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgZm9ybUVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRGb3JtQ3RybCA9IGN0cmxzWzFdIHx8IGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtO1xuICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJGFkZENvbnRyb2woY29udHJvbGxlcik7XG5cbiAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBuYW1lQXR0ciA/IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKSA6IG5vb3A7XG5cbiAgICAgICAgICAgIGlmIChuYW1lQXR0cikge1xuICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICBhdHRyLiRvYnNlcnZlKG5hbWVBdHRyLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyLiRuYW1lID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kJHJlbmFtZUNvbnRyb2woY29udHJvbGxlciwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIHNldHRlciA9IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1EaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXR0ZXIoZXhwcmVzc2lvbikge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7XG4gICAgICAgIC8vY3JlYXRlIGFuIGFzc2lnbmFibGUgZXhwcmVzc2lvbiwgc28gZm9ybXMgd2l0aCBhbiBlbXB0eSBuYW1lIGNhbiBiZSByZW5hbWVkIGxhdGVyXG4gICAgICAgIHJldHVybiAkcGFyc2UoJ3RoaXNbXCJcIl0nKS5hc3NpZ247XG4gICAgICB9XG4gICAgICByZXR1cm4gJHBhcnNlKGV4cHJlc3Npb24pLmFzc2lnbiB8fCBub29wO1xuICAgIH1cbiAgfV07XG59O1xuXG52YXIgZm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KCk7XG52YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7XG5cblxuXG4vLyBoZWxwZXIgbWV0aG9kc1xuZnVuY3Rpb24gc2V0dXBWYWxpZGl0eShpbnN0YW5jZSkge1xuICBpbnN0YW5jZS4kJGNsYXNzQ2FjaGUgPSB7fTtcbiAgaW5zdGFuY2UuJCRjbGFzc0NhY2hlW0lOVkFMSURfQ0xBU1NdID0gIShpbnN0YW5jZS4kJGNsYXNzQ2FjaGVbVkFMSURfQ0xBU1NdID0gaW5zdGFuY2UuJCRlbGVtZW50Lmhhc0NsYXNzKFZBTElEX0NMQVNTKSk7XG59XG5mdW5jdGlvbiBhZGRTZXRWYWxpZGl0eU1ldGhvZChjb250ZXh0KSB7XG4gIHZhciBjbGF6eiA9IGNvbnRleHQuY2xhenosXG4gICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgIHVuc2V0ID0gY29udGV4dC51bnNldDtcblxuICBjbGF6ei5wcm90b3R5cGUuJHNldFZhbGlkaXR5ID0gZnVuY3Rpb24odmFsaWRhdGlvbkVycm9yS2V5LCBzdGF0ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChpc1VuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgIGNyZWF0ZUFuZFNldCh0aGlzLCAnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnNldEFuZENsZWFudXAodGhpcywgJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgaWYgKCFpc0Jvb2xlYW4oc3RhdGUpKSB7XG4gICAgICB1bnNldCh0aGlzLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIHVuc2V0KHRoaXMuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgdW5zZXQodGhpcy4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHNldCh0aGlzLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldCh0aGlzLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgdW5zZXQodGhpcy4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLiRwZW5kaW5nKSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyh0aGlzLCBQRU5ESU5HX0NMQVNTLCB0cnVlKTtcbiAgICAgIHRoaXMuJHZhbGlkID0gdGhpcy4kaW52YWxpZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgJycsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyh0aGlzLCBQRU5ESU5HX0NMQVNTLCBmYWxzZSk7XG4gICAgICB0aGlzLiR2YWxpZCA9IGlzT2JqZWN0RW1wdHkodGhpcy4kZXJyb3IpO1xuICAgICAgdGhpcy4kaW52YWxpZCA9ICF0aGlzLiR2YWxpZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgJycsIHRoaXMuJHZhbGlkKTtcbiAgICB9XG5cbiAgICAvLyByZS1yZWFkIHRoZSBzdGF0ZSBhcyB0aGUgc2V0L3Vuc2V0IG1ldGhvZHMgY291bGQgaGF2ZVxuICAgIC8vIGNvbWJpbmVkIHN0YXRlIGluIHRoaXMuJGVycm9yW3ZhbGlkYXRpb25FcnJvcl0gKHVzZWQgZm9yIGZvcm1zKSxcbiAgICAvLyB3aGVyZSBzZXR0aW5nL3Vuc2V0dGluZyBvbmx5IGluY3JlbWVudHMvZGVjcmVtZW50cyB0aGUgdmFsdWUsXG4gICAgLy8gYW5kIGRvZXMgbm90IHJlcGxhY2UgaXQuXG4gICAgdmFyIGNvbWJpbmVkU3RhdGU7XG4gICAgaWYgKHRoaXMuJHBlbmRpbmcgJiYgdGhpcy4kcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kJHN1Y2Nlc3NbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlKTtcbiAgICB0aGlzLiQkcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlLCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVBbmRTZXQoY3RybCwgbmFtZSwgdmFsdWUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoIWN0cmxbbmFtZV0pIHtcbiAgICAgIGN0cmxbbmFtZV0gPSB7fTtcbiAgICB9XG4gICAgc2V0KGN0cmxbbmFtZV0sIHZhbHVlLCBjb250cm9sbGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2V0QW5kQ2xlYW51cChjdHJsLCBuYW1lLCB2YWx1ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChjdHJsW25hbWVdKSB7XG4gICAgICB1bnNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIGlmIChpc09iamVjdEVtcHR5KGN0cmxbbmFtZV0pKSB7XG4gICAgICBjdHJsW25hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIGNsYXNzTmFtZSwgc3dpdGNoVmFsdWUpIHtcbiAgICBpZiAoc3dpdGNoVmFsdWUgJiYgIWN0cmwuJCRjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgIGN0cmwuJCRhbmltYXRlLmFkZENsYXNzKGN0cmwuJCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghc3dpdGNoVmFsdWUgJiYgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSkge1xuICAgICAgY3RybC4kJGFuaW1hdGUucmVtb3ZlQ2xhc3MoY3RybC4kJGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICBjdHJsLiQkY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyhjdHJsLCB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnO1xuXG4gICAgY2FjaGVkVG9nZ2xlQ2xhc3MoY3RybCwgVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IHRydWUpO1xuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIElOVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyogZ2xvYmFsXG4gIFZBTElEX0NMQVNTOiBmYWxzZSxcbiAgSU5WQUxJRF9DTEFTUzogZmFsc2UsXG4gIFBSSVNUSU5FX0NMQVNTOiBmYWxzZSxcbiAgRElSVFlfQ0xBU1M6IGZhbHNlLFxuICBuZ01vZGVsTWluRXJyOiBmYWxzZVxuKi9cblxuLy8gUmVnZXggY29kZSB3YXMgaW5pdGlhbGx5IG9idGFpbmVkIGZyb20gU08gcHJpb3IgdG8gbW9kaWZpY2F0aW9uOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTQzMDcwL2phdmFzY3JpcHQtcmVnZXgtaXNvLWRhdGV0aW1lI2Fuc3dlci0zMTQzMjMxXG52YXIgSVNPX0RBVEVfUkVHRVhQID0gL15cXGR7NCx9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKD86WystXVswLTJdXFxkOlswLTVdXFxkfFopJC87XG4vLyBTZWUgdmFsaWQgVVJMcyBpbiBSRkMzOTg3IChodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg3KVxuLy8gTm90ZTogV2UgYXJlIGJlaW5nIG1vcmUgbGVuaWVudCwgYmVjYXVzZSBicm93c2VycyBhcmUgdG9vLlxuLy8gICAxLiBTY2hlbWVcbi8vICAgMi4gU2xhc2hlc1xuLy8gICAzLiBVc2VybmFtZVxuLy8gICA0LiBQYXNzd29yZFxuLy8gICA1LiBIb3N0bmFtZVxuLy8gICA2LiBQb3J0XG4vLyAgIDcuIFBhdGhcbi8vICAgOC4gUXVlcnlcbi8vICAgOS4gRnJhZ21lbnRcbi8vICAgICAgICAgICAgICAgICAxMTExMTExMTExMTExMTExIDIyMiAgIDMzMzMzMyAgICA0NDQ0NCAgICAgICAgNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTUgICAgIDY2NiAgICAgNzc3Nzc3NzcgICAgIDg4ODg4ODggICAgIDk5OVxudmFyIFVSTF9SRUdFWFAgPSAvXlthLXpdW2EtelxcZC4rLV0qOlxcLyooPzpbXjpAXSsoPzo6W15AXSspP0ApPyg/OlteXFxzOi8/I10rfFxcW1thLWZcXGQ6XStdKSg/OjpcXGQrKT8oPzpcXC9bXj8jXSopPyg/OlxcP1teI10qKT8oPzojLiopPyQvaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG52YXIgRU1BSUxfUkVHRVhQID0gL14oPz0uezEsMjU0fSQpKD89LnsxLDY0fUApWy0hIyQlJicqKy8wLTk9P0EtWl5fYGEtent8fX5dKyhcXC5bLSEjJCUmJyorLzAtOT0/QS1aXl9gYS16e3x9fl0rKSpAW0EtWmEtejAtOV0oW0EtWmEtejAtOS1dezAsNjF9W0EtWmEtejAtOV0pPyhcXC5bQS1aYS16MC05XShbQS1aYS16MC05LV17MCw2MX1bQS1aYS16MC05XSk/KSokLztcbnZhciBOVU1CRVJfUkVHRVhQID0gL15cXHMqKC18XFwrKT8oXFxkK3woXFxkKihcXC5cXGQqKSkpKFtlRV1bKy1dP1xcZCspP1xccyokLztcbnZhciBEQVRFX1JFR0VYUCA9IC9eKFxcZHs0LH0pLShcXGR7Mn0pLShcXGR7Mn0pJC87XG52YXIgREFURVRJTUVMT0NBTF9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkXFxkKS0oXFxkXFxkKVQoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLztcbnZhciBXRUVLX1JFR0VYUCA9IC9eKFxcZHs0LH0pLVcoXFxkXFxkKSQvO1xudmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxcZHs0LH0pLShcXGRcXGQpJC87XG52YXIgVElNRV9SRUdFWFAgPSAvXihcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKFxcLlxcZHsxLDN9KT8pPyQvO1xuXG52YXIgUEFSVElBTF9WQUxJREFUSU9OX0VWRU5UUyA9ICdrZXlkb3duIHdoZWVsIG1vdXNlZG93bic7XG52YXIgUEFSVElBTF9WQUxJREFUSU9OX1RZUEVTID0gY3JlYXRlTWFwKCk7XG5mb3JFYWNoKCdkYXRlLGRhdGV0aW1lLWxvY2FsLG1vbnRoLHRpbWUsd2Vlaycuc3BsaXQoJywnKSwgZnVuY3Rpb24odHlwZSkge1xuICBQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gPSB0cnVlO1xufSk7XG5cbnZhciBpbnB1dFR5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0ZXh0XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gICAqICAgIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAgICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAgICogICAgaW5wdXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwidGV4dC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ0ZXh0SW5wdXRFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndGV4dElucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2d1ZXN0JyxcbiAgICAgICAgICAgICAgICAgd29yZDogL15cXHMqXFx3KlxccyokL1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlNpbmdsZSB3b3JkOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS50ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgbmctcGF0dGVybj1cImV4YW1wbGUud29yZFwiIHJlcXVpcmVkIG5nLXRyaW09XCJmYWxzZVwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuXCI+XG4gICAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxjb2RlPnRleHQgPSB7e2V4YW1wbGUudGV4dH19PC9jb2RlPjxici8+XG4gICAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbXVsdGkgd29yZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdoZWxsbyB3b3JsZCcpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0ZXh0JzogdGV4dElucHV0VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICAqIEBuYW1lIGlucHV0W2RhdGVdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJbnB1dCB3aXRoIGRhdGUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgICogZGF0ZSBmb3JtYXQgKHl5eXktTU0tZGQpLCBmb3IgZXhhbXBsZTogYDIwMDktMDEtMDZgLiBTaW5jZSBtYW55XG4gICAgICogbW9kZXJuIGJyb3dzZXJzIGRvIG5vdCB5ZXQgc3VwcG9ydCB0aGlzIGlucHV0IHR5cGUsIGl0IGlzIGltcG9ydGFudCB0byBwcm92aWRlIGN1ZXMgdG8gdXNlcnMgb24gdGhlXG4gICAgICogZXhwZWN0ZWQgaW5wdXQgZm9ybWF0IHZpYSBhIHBsYWNlaG9sZGVyIG9yIGxhYmVsLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgICAqICAgdmFsaWQgSVNPIGRhdGUgc3RyaW5nICh5eXl5LU1NLWRkKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzIGF0dHJpYnV0ZVxuICAgICAqICAgKGUuZy4gYG1pbj1cInt7bWluRGF0ZSB8IGRhdGU6J3l5eXktTU0tZGQnfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDVcbiAgICAgKiAgIGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZVxuICAgICAqICAgYSB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXMgYXR0cmlidXRlXG4gICAgICogICAoZS5nLiBgbWF4PVwie3ttYXhEYXRlIHwgZGF0ZToneXl5eS1NTS1kZCd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNVxuICAgICAqICAgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyBkYXRlIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gZGF0ZSBzdHJpbmdcbiAgICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJkYXRlLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVJbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlSW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMjIpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRcIiBtaW49XCIyMDEzLTAxLTAxXCIgbWF4PVwiMjAxMy0xMi0zMVwiIHJlcXVpcmVkIC8+XG4gICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRlXCI+XG4gICAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCInKSk7XG4gICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMC0yMicpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMScpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgICAqL1xuICAnZGF0ZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGUnLCBEQVRFX1JFR0VYUCxcbiAgICAgICAgIGNyZWF0ZURhdGVQYXJzZXIoREFURV9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCddKSxcbiAgICAgICAgICd5eXl5LU1NLWRkJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFtkYXRldGltZS1sb2NhbF1cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggZGF0ZXRpbWUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgKiBsb2NhbCBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDIwMTAtMTItMjhUMTQ6NTc6MDBgLlxuICAgICpcbiAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICpcbiAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb25cbiAgICAqICAgaW5zaWRlIHRoaXMgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbkRhdGV0aW1lTG9jYWwgfCBkYXRlOid5eXl5LU1NLWRkVEhIOm1tOnNzJ319XCJgKS5cbiAgICAqICAgTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvblxuICAgICogICBpbnNpZGUgdGhpcyBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4RGF0ZXRpbWVMb2NhbCB8IGRhdGU6J3l5eXktTU0tZGRUSEg6bW06c3MnfX1cImApLlxuICAgICogICBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgdG8gdGhlIERhdGUgLyBJU08gZGF0ZXRpbWUgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSB0byB0aGUgRGF0ZSAvIElTTyBkYXRldGltZSBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImRhdGV0aW1lbG9jYWwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMCwgMTEsIDI4LCAxNCwgNTcpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIGRhdGUgYmV0d2VlbiBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRUSEg6bW06c3NcIiBtaW49XCIyMDAxLTAxLTAxVDAwOjAwOjAwXCIgbWF4PVwiMjAxMy0xMi0zMVQwMDowMDowMFwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZXRpbWVsb2NhbFwiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMC0xMi0yOFQxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnZGF0ZXRpbWUtbG9jYWwnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRldGltZWxvY2FsJywgREFURVRJTUVMT0NBTF9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVUSU1FTE9DQUxfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnLCAnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAgJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0aW1lXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCB0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgdGltZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIGxvY2FsIHRpbWUgZm9ybWF0IChISDptbTpzcyksIGZvciBleGFtcGxlOiBgMTQ6NTc6MDBgLiBNb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuIFRoaXMgYmluZGluZyB3aWxsIGFsd2F5cyBvdXRwdXQgYVxuICAgKiBEYXRlIG9iamVjdCB0byB0aGUgbW9kZWwgb2YgSmFudWFyeSAxLCAxOTcwLCBvciBsb2NhbCBkYXRlIGBuZXcgRGF0ZSgxOTcwLCAwLCAxLCBISCwgbW0sIHNzKWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluVGltZSB8IGRhdGU6J0hIOm1tOnNzJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhUaW1lIHwgZGF0ZTonSEg6bW06c3MnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJ0aW1lLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRpbWVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMTk3MCwgMCwgMSwgMTQsIDU3LCAwKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSB0aW1lIGJldHdlZW4gOGFtIGFuZCA1cG06PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0aW1lXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJISDptbTpzc1wiIG1pbj1cIjA4OjAwOjAwXCIgbWF4PVwiMTc6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnRpbWVcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTQ6NTc6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIzOjU5OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcbiAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0aW1lJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgndGltZScsIFRJTUVfUkVHRVhQLFxuICAgICAgY3JlYXRlRGF0ZVBhcnNlcihUSU1FX1JFR0VYUCwgWydISCcsICdtbScsICdzcycsICdzc3MnXSksXG4gICAgICdISDptbTpzcy5zc3MnKSxcblxuICAgLyoqXG4gICAgKiBAbmdkb2MgaW5wdXRcbiAgICAqIEBuYW1lIGlucHV0W3dlZWtdXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBJbnB1dCB3aXRoIHdlZWstb2YtdGhlLXllYXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24gdG8gRGF0ZS4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAqIHRoZSBIVE1MNSB3ZWVrIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAqIHdlZWsgZm9ybWF0ICh5eXl5LVcjIyksIGZvciBleGFtcGxlOiBgMjAxMy1XMDJgLlxuICAgICpcbiAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICpcbiAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAqICAgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbldlZWsgfCBkYXRlOid5eXl5LVd3dyd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkXG4gICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAqICAgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heFdlZWsgfCBkYXRlOid5eXl5LVd3dyd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkXG4gICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gd2VlayBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwid2Vlay1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ3ZWVrRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3dlZWtFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgMCwgMylcbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgICA8L3NjcmlwdD5cbiAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsPlBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzpcbiAgICAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwid2Vla1wiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWVlZWS1XIyNcIiBtaW49XCIyMDEyLVczMlwiXG4gICAgICAgICAgICAgICAgIG1heD1cIjIwMTMtVzUyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci53ZWVrXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtVzAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMDE1LVcwMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnd2Vlayc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3dlZWsnLCBXRUVLX1JFR0VYUCwgd2Vla1BhcnNlciwgJ3l5eXktV3d3JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFttb250aF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggbW9udGggdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAqIHRoZSBIVE1MNSBtb250aCBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSksIGZvciBleGFtcGxlOiBgMjAwOS0wMWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIElmIHRoZSBtb2RlbCBpcyBub3Qgc2V0IHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGgsIHRoZSBuZXh0IHZpZXcgdG8gbW9kZWwgdXBkYXRlIHdpbGwgc2V0IGl0XG4gICAqIHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGguXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluTW9udGggfCBkYXRlOid5eXl5LU1NJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhNb250aCB8IGRhdGU6J3l5eXktTU0nfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm1vbnRoLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm1vbnRoRXhhbXBsZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdtb250aEV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAxKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIG1vbnRoIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwibW9udGhcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTVwiIG1pbj1cIjIwMTMtMDFcIiBtYXg9XCIyMDEzLTEyXCIgcmVxdWlyZWQgLz5cbiAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubW9udGhcIj5cbiAgICAgICAgICAgIE5vdCBhIHZhbGlkIG1vbnRoITwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbW9udGgnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdtb250aCcsIE1PTlRIX1JFR0VYUCxcbiAgICAgY3JlYXRlRGF0ZVBhcnNlcihNT05USF9SRUdFWFAsIFsneXl5eScsICdNTSddKSxcbiAgICAgJ3l5eXktTU0nKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W251bWJlcl1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb25cbiAgICogZXJyb3IgaWYgbm90IGEgdmFsaWQgbnVtYmVyLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgb2YgdHlwZSBgbnVtYmVyYCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBCZSBhd2FyZSB0aGF0IGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBudW1iZXIgaXMgbm90IGVub3VnaC4gU2VlIHRoZSB7QGxpbmsgbmdNb2RlbDpudW1mbXR9XG4gICAqIGVycm9yIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGFuIGV4YW1wbGUgb2YgaG93IHRvIGNvbnZlcnQgeW91ciBtb2RlbCBpZiBuZWNlc3NhcnkuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiAjIyBJc3N1ZXMgd2l0aCBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb25cbiAgICpcbiAgICogSW4gYnJvd3NlcnMgdGhhdCBmb2xsb3cgdGhlXG4gICAqIFtIVE1MNSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI251bWJlci1zdGF0ZS0lMjh0eXBlPW51bWJlciUyOSksXG4gICAqIGBpbnB1dFtudW1iZXJdYCBkb2VzIG5vdCB3b3JrIGFzIGV4cGVjdGVkIHdpdGgge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfS5cbiAgICogSWYgYSBub24tbnVtYmVyIGlzIGVudGVyZWQgaW4gdGhlIGlucHV0LCB0aGUgYnJvd3NlciB3aWxsIHJlcG9ydCB0aGUgdmFsdWUgYXMgYW4gZW1wdHkgc3RyaW5nLFxuICAgKiB3aGljaCBtZWFucyB0aGUgdmlldyAvIG1vZGVsIHZhbHVlcyBpbiBgbmdNb2RlbGAgYW5kIHN1YnNlcXVlbnRseSB0aGUgc2NvcGUgdmFsdWVcbiAgICogd2lsbCBhbHNvIGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nTWluIExpa2UgYG1pbmAsIHNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbmdNaW5gLFxuICAgKiAgICBidXQgZG9lcyBub3QgdHJpZ2dlciBIVE1MNSBuYXRpdmUgdmFsaWRhdGlvbi4gVGFrZXMgYW4gZXhwcmVzc2lvbi5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ01heCBMaWtlIGBtYXhgLCBzZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG5nTWF4YCxcbiAgICogICAgYnV0IGRvZXMgbm90IHRyaWdnZXIgSFRNTDUgbmF0aXZlIHZhbGlkYXRpb24uIFRha2VzIGFuIGV4cHJlc3Npb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc3RlcCBTZXRzIHRoZSBgc3RlcGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgZG9lcyBub3QgZml0IHRoZSBgc3RlcGAgY29uc3RyYWludC5cbiAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1N0ZXAgTGlrZSBgc3RlcGAsIHNldHMgdGhlIGBzdGVwYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBkb2VzIG5vdCBmaXQgdGhlIGBuZ1N0ZXBgIGNvbnN0cmFpbnQsXG4gICAqICAgIGJ1dCBkb2VzIG5vdCB0cmlnZ2VyIEhUTUw1IG5hdGl2ZSB2YWxpZGF0aW9uLiBUYWtlcyBhbiBleHByZXNzaW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJudW1iZXItaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwibnVtYmVyRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHZhbHVlOiAxMlxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPk51bWJlcjpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIiBtYXg9XCI5OVwiIHJlcXVpcmVkPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLm51bWJlclwiPlxuICAgICAgICAgICAgICAgTm90IHZhbGlkIG51bWJlciE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWV9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEyJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ251bWJlcic6IG51bWJlcklucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdXJsXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGV4dCBpbnB1dCB3aXRoIFVSTCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgdXJsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgY29udGVudCBpcyBub3QgYVxuICAgKiB2YWxpZCBVUkwuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICoqTm90ZToqKiBgaW5wdXRbdXJsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIHVybHMgdGhhdCBpcyBkZXJpdmVkIGZyb20gdGhlIHJlZ2V4XG4gICAqIHVzZWQgaW4gQ2hyb21pdW0uIElmIHlvdSBuZWVkIHN0cmljdGVyIHZhbGlkYXRpb24sIHlvdSBjYW4gdXNlIGBuZy1wYXR0ZXJuYCBvciBtb2RpZnlcbiAgICogdGhlIGJ1aWx0LWluIHZhbGlkYXRvcnMgKHNlZSB0aGUge0BsaW5rIGd1aWRlL2Zvcm1zIEZvcm1zIGd1aWRlfSlcbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJ1cmwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidXJsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3VybEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnVybCA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2h0dHA6Ly9nb29nbGUuY29tJ1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlVSTDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInVybFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXJsLnRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci51cmxcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3VybC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IudXJsID0ge3shIW15Rm9ybS4kZXJyb3IudXJsfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndXJsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VybC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignaHR0cDovL2dvb2dsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3VybCc6IHVybElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgKiBhZGRyZXNzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W2VtYWlsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIGVtYWlsIGFkZHJlc3NlcyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiAoZS5nLiByZXF1aXJpbmcgYSB0b3AtbGV2ZWwgZG9tYWluKSwgeW91IGNhblxuICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICAgKiAgICBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImVtYWlsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImVtYWlsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VtYWlsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZW1haWwgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdtZUBleGFtcGxlLmNvbSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgICA8bGFiZWw+RW1haWw6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJlbWFpbC50ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5lbWFpbFwiPlxuICAgICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3tlbWFpbC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLmVtYWlsID0ge3shIW15Rm9ybS4kZXJyb3IuZW1haWx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2VtYWlsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2VtYWlsLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdtZUBleGFtcGxlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCd4eHgnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbcmFkaW9dXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBgbmdNb2RlbGAgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqICAgIE5vdGUgdGhhdCBgdmFsdWVgIG9ubHkgc3VwcG9ydHMgYHN0cmluZ2AgdmFsdWVzLCBpLmUuIHRoZSBzY29wZSBtb2RlbCBuZWVkcyB0byBiZSBhIHN0cmluZyxcbiAgICogICAgdG9vLiBVc2UgYG5nVmFsdWVgIGlmIHlvdSBuZWVkIGNvbXBsZXggbW9kZWxzIChgbnVtYmVyYCwgYG9iamVjdGAsIC4uLikuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ1ZhbHVlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byB3aGljaCBgbmdNb2RlbGAgd2lsbCBiZSBiZSBzZXQgd2hlbiB0aGUgcmFkaW9cbiAgICogICAgaXMgc2VsZWN0ZWQuIFNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIGlmIHlvdSBuZWVkXG4gICAqICAgIGEgbm9uLXN0cmluZyBgbmdNb2RlbGAgKGBib29sZWFuYCwgYGFycmF5YCwgLi4uKS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYWRpby1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJyYWRpb0V4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYWRpb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0ge1xuICAgICAgICAgICAgICAgICBuYW1lOiAnYmx1ZSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAkc2NvcGUuc3BlY2lhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICBcImlkXCI6IFwiMTIzNDVcIixcbiAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImdyZWVuXCJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvci5uYW1lXCIgdmFsdWU9XCJyZWRcIj5cbiAgICAgICAgICAgICBSZWRcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCI+XG4gICAgICAgICAgICAgR3JlZW5cbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwiYmx1ZVwiPlxuICAgICAgICAgICAgIEJsdWVcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8dHQ+Y29sb3IgPSB7e2NvbG9yLm5hbWUgfCBqc29ufX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dHMgPSBlbGVtZW50LmFsbChieS5tb2RlbCgnY29sb3IubmFtZScpKTtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3IubmFtZScpKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdibHVlJyk7XG5cbiAgICAgICAgICAgIGlucHV0cy5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbigncmVkJyk7XG5cbiAgICAgICAgICAgIGlucHV0cy5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3JlZW4nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3JhZGlvJzogcmFkaW9JbnB1dFR5cGUsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtyYW5nZV1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIE5hdGl2ZSByYW5nZSBpbnB1dCB3aXRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgZm9yIHRoZSByYW5nZSBpbnB1dCBtdXN0IGFsd2F5cyBiZSBhIGBOdW1iZXJgLlxuICAgKlxuICAgKiBJRTkgYW5kIG90aGVyIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgdGhlIGByYW5nZWAgdHlwZSBmYWxsIGJhY2tcbiAgICogdG8gYSB0ZXh0IGlucHV0IHdpdGhvdXQgYW55IGRlZmF1bHQgdmFsdWVzIGZvciBgbWluYCwgYG1heGAgYW5kIGBzdGVwYC4gTW9kZWwgYmluZGluZyxcbiAgICogdmFsaWRhdGlvbiBhbmQgbnVtYmVyIHBhcnNpbmcgYXJlIG5ldmVydGhlbGVzcyBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCByYW5nZSAobGF0ZXN0IENocm9tZSwgU2FmYXJpLCBGaXJlZm94LCBFZGdlKSB0cmVhdCBgaW5wdXRbcmFuZ2VdYFxuICAgKiBpbiBhIHdheSB0aGF0IG5ldmVyIGFsbG93cyB0aGUgaW5wdXQgdG8gaG9sZCBhbiBpbnZhbGlkIHZhbHVlLiBUaGF0IG1lYW5zOlxuICAgKiAtIGFueSBub24tbnVtZXJpY2FsIHZhbHVlIGlzIHNldCB0byBgKG1heCArIG1pbikgLyAyYC5cbiAgICogLSBhbnkgbnVtZXJpY2FsIHZhbHVlIHRoYXQgaXMgbGVzcyB0aGFuIHRoZSBjdXJyZW50IG1pbiB2YWwsIG9yIGdyZWF0ZXIgdGhhbiB0aGUgY3VycmVudCBtYXggdmFsXG4gICAqIGlzIHNldCB0byB0aGUgbWluIC8gbWF4IHZhbCByZXNwZWN0aXZlbHkuXG4gICAqIC0gYWRkaXRpb25hbGx5LCB0aGUgY3VycmVudCBgc3RlcGAgaXMgcmVzcGVjdGVkLCBzbyB0aGUgbmVhcmVzdCB2YWx1ZSB0aGF0IHNhdGlzZmllcyBhIHN0ZXBcbiAgICogaXMgdXNlZC5cbiAgICpcbiAgICogU2VlIHRoZSBbSFRNTCBTcGVjIG9uIGlucHV0W3R5cGU9cmFuZ2VdXShodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCNyYW5nZS1zdGF0ZS0odHlwZT1yYW5nZSkpXG4gICAqIGZvciBtb3JlIGluZm8uXG4gICAqXG4gICAqIFRoaXMgaGFzIHRoZSBmb2xsb3dpbmcgY29uc2VxdWVuY2VzIGZvciBBbmd1bGFyOlxuICAgKlxuICAgKiBTaW5jZSB0aGUgZWxlbWVudCB2YWx1ZSBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgbW9kZWwgdmFsdWUsIGEgcmFuZ2UgaW5wdXRcbiAgICogd2lsbCBzZXQgdGhlIGJvdW5kIG5nTW9kZWwgZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgdGhhdCB0aGUgYnJvd3NlciBoYXMgc2V0IGZvciB0aGVcbiAgICogaW5wdXQgZWxlbWVudC4gRm9yIGV4YW1wbGUsIGluIHRoZSBmb2xsb3dpbmcgaW5wdXQgYDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBuZy1tb2RlbD1cIm1vZGVsLnZhbHVlXCI+YCxcbiAgICogaWYgdGhlIGFwcGxpY2F0aW9uIHNldHMgYG1vZGVsLnZhbHVlID0gbnVsbGAsIHRoZSBicm93c2VyIHdpbGwgc2V0IHRoZSBpbnB1dCB0byBgJzUwJ2AuXG4gICAqIEFuZ3VsYXIgd2lsbCB0aGVuIHNldCB0aGUgbW9kZWwgdG8gYDUwYCwgdG8gcHJldmVudCBpbnB1dCBhbmQgbW9kZWwgdmFsdWUgYmVpbmcgb3V0IG9mIHN5bmMuXG4gICAqXG4gICAqIFRoYXQgbWVhbnMgdGhlIG1vZGVsIGZvciByYW5nZSB3aWxsIGltbWVkaWF0ZWx5IGJlIHNldCB0byBgNTBgIGFmdGVyIGBuZ01vZGVsYCBoYXMgYmVlblxuICAgKiBpbml0aWFsaXplZC4gSXQgYWxzbyBtZWFucyBhIHJhbmdlIGlucHV0IGNhbiBuZXZlciBoYXZlIHRoZSByZXF1aXJlZCBlcnJvci5cbiAgICpcbiAgICogVGhpcyBkb2VzIG5vdCBvbmx5IGFmZmVjdCBjaGFuZ2VzIHRvIHRoZSBtb2RlbCB2YWx1ZSwgYnV0IGFsc28gdG8gdGhlIHZhbHVlcyBvZiB0aGUgYG1pbmAsXG4gICAqIGBtYXhgLCBhbmQgYHN0ZXBgIGF0dHJpYnV0ZXMuIFdoZW4gdGhlc2UgY2hhbmdlIGluIGEgd2F5IHRoYXQgd2lsbCBjYXVzZSB0aGUgYnJvd3NlciB0byBtb2RpZnlcbiAgICogdGhlIGlucHV0IHZhbHVlLCBBbmd1bGFyIHdpbGwgYWxzbyB1cGRhdGUgdGhlIG1vZGVsIHZhbHVlLlxuICAgKlxuICAgKiBBdXRvbWF0aWMgdmFsdWUgYWRqdXN0bWVudCBhbHNvIG1lYW5zIHRoYXQgYSByYW5nZSBpbnB1dCBlbGVtZW50IGNhbiBuZXZlciBoYXZlIHRoZSBgcmVxdWlyZWRgLFxuICAgKiBgbWluYCwgb3IgYG1heGAgZXJyb3JzLlxuICAgKlxuICAgKiBIb3dldmVyLCBgc3RlcGAgaXMgY3VycmVudGx5IG9ubHkgZnVsbHkgaW1wbGVtZW50ZWQgYnkgRmlyZWZveC4gT3RoZXIgYnJvd3NlcnMgaGF2ZSBwcm9ibGVtc1xuICAgKiB3aGVuIHRoZSBzdGVwIHZhbHVlIGNoYW5nZXMgZHluYW1pY2FsbHkgLSB0aGV5IGRvIG5vdCBhZGp1c3QgdGhlIGVsZW1lbnQgdmFsdWUgY29ycmVjdGx5LCBidXRcbiAgICogaW5zdGVhZCBtYXkgc2V0IHRoZSBgc3RlcE1pc21hdGNoYCBlcnJvci4gSWYgdGhhdCdzIHRoZSBjYXNlLCB0aGUgQW5ndWxhciB3aWxsIHNldCB0aGUgYHN0ZXBgXG4gICAqIGVycm9yIG9uIHRoZSBpbnB1dCwgYW5kIHNldCB0aGUgbW9kZWwgdG8gYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgaW5wdXRbcmFuZ2VdYCBpcyBub3QgY29tcGF0aWJsZSB3aXRoYG5nTWF4YCwgYG5nTWluYCwgYW5kIGBuZ1N0ZXBgLCBiZWNhdXNlIHRoZXkgZG9cbiAgICogbm90IHNldCB0aGUgYG1pbmAgYW5kIGBtYXhgIGF0dHJpYnV0ZXMsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGJyb3dzZXIgd29uJ3QgYXV0b21hdGljYWxseSBhZGp1c3RcbiAgICogdGhlIGlucHV0IHZhbHVlIGJhc2VkIG9uIHRoZWlyIHZhbHVlcywgYW5kIHdpbGwgYWx3YXlzIGFzc3VtZSBtaW4gPSAwLCBtYXggPSAxMDAsIGFuZCBzdGVwID0gMS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9ICBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXJcbiAgICogICAgICAgICAgICAgICAgICB0aGFuIGBtaW5gLiBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWF4YC5cbiAgICogICAgICAgICAgICAgICAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0ZXAgU2V0cyB0aGUgYHN0ZXBgIHZhbGlkYXRpb24gdG8gZW5zdXJlIHRoYXQgdGhlIHZhbHVlIGVudGVyZWQgbWF0Y2hlcyB0aGUgYHN0ZXBgXG4gICAqICAgICAgICAgICAgICAgICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbmdNb2RlbCB2YWx1ZSBjaGFuZ2VzIGR1ZVxuICAgKiAgICAgICAgICAgICAgICAgIHRvIHVzZXIgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdDaGVja2VkIElmIHRoZSBleHByZXNzaW9uIGlzIHRydXRoeSwgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC4gKipOb3RlKiogOiBgbmdDaGVja2VkYCBzaG91bGQgbm90IGJlIHVzZWQgYWxvbmdzaWRlIGBuZ01vZGVsYC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgQ2hlY2tvdXQge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NoZWNrZWQgbmdDaGVja2VkfSBmb3IgdXNhZ2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwicmFuZ2UtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwicmFuZ2VFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYW5nZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSA3NTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWluID0gMTA7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1heCA9IDkwO1xuICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuXG4gICAgICAgICAgICBNb2RlbCBhcyByYW5nZTogPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJyYW5nZVwiIG5nLW1vZGVsPVwidmFsdWVcIiBtaW49XCJ7e21pbn19XCIgIG1heD1cInt7bWF4fX1cIj5cbiAgICAgICAgICAgIDxocj5cbiAgICAgICAgICAgIE1vZGVsIGFzIG51bWJlcjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInZhbHVlXCI+PGJyPlxuICAgICAgICAgICAgTWluOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWluXCI+PGJyPlxuICAgICAgICAgICAgTWF4OiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4XCI+PGJyPlxuICAgICAgICAgICAgdmFsdWUgPSA8Y29kZT57e3ZhbHVlfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kdmFsaWQgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICAgbXlGb3JtLnJhbmdlLiRlcnJvciA9IDxjb2RlPnt7bXlGb3JtLnJhbmdlLiRlcnJvcn19PC9jb2RlPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuXG4gICAqICMjIFJhbmdlIElucHV0IHdpdGggbmdNaW4gJiBuZ01heCBhdHRyaWJ1dGVzXG5cbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYW5nZS1pbnB1dC1kaXJlY3RpdmUtbmdcIiBtb2R1bGU9XCJyYW5nZUV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3JhbmdlRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IDc1O1xuICAgICAgICAgICAgICAgICRzY29wZS5taW4gPSAxMDtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWF4ID0gOTA7XG4gICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICBNb2RlbCBhcyByYW5nZTogPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJyYW5nZVwiIG5nLW1vZGVsPVwidmFsdWVcIiBuZy1taW49XCJtaW5cIiBuZy1tYXg9XCJtYXhcIj5cbiAgICAgICAgICAgIDxocj5cbiAgICAgICAgICAgIE1vZGVsIGFzIG51bWJlcjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInZhbHVlXCI+PGJyPlxuICAgICAgICAgICAgTWluOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWluXCI+PGJyPlxuICAgICAgICAgICAgTWF4OiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4XCI+PGJyPlxuICAgICAgICAgICAgdmFsdWUgPSA8Y29kZT57e3ZhbHVlfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kdmFsaWQgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICAgbXlGb3JtLnJhbmdlLiRlcnJvciA9IDxjb2RlPnt7bXlGb3JtLnJhbmdlLiRlcnJvcn19PC9jb2RlPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuXG4gICAqL1xuICAncmFuZ2UnOiByYW5nZUlucHV0VHlwZSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W2NoZWNrYm94XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCBjaGVja2JveC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nVHJ1ZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiY2hlY2tib3gtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hlY2tib3hFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hlY2tib3hFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlMSA6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWUyIDogJ1lFUydcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlZhbHVlMTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMVwiPlxuICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgIDxsYWJlbD5WYWx1ZTI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTJcIlxuICAgICAgICAgICAgICAgICAgICBuZy10cnVlLXZhbHVlPVwiJ1lFUydcIiBuZy1mYWxzZS12YWx1ZT1cIidOTydcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUxID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTtcblxuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSkuY2xpY2soKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdOTycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSxcblxuICAnaGlkZGVuJzogbm9vcCxcbiAgJ2J1dHRvbic6IG5vb3AsXG4gICdzdWJtaXQnOiBub29wLFxuICAncmVzZXQnOiBub29wLFxuICAnZmlsZSc6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpIHtcbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xufVxuXG5mdW5jdGlvbiBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTtcblxuICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXR0aW5nIGludGVybWVkaWF0ZSB0ZXh0IGJ1ZmZlcixcbiAgLy8gaG9sZCB0aGUgbGlzdGVuZXIgdW50aWwgY29tcG9zaXRpb24gaXMgZG9uZS5cbiAgLy8gTW9yZSBhYm91dCBjb21wb3NpdGlvbiBldmVudHM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Db21wb3NpdGlvbkV2ZW50XG4gIGlmICghJHNuaWZmZXIuYW5kcm9pZCkge1xuICAgIHZhciBjb21wb3NpbmcgPSBmYWxzZTtcblxuICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uc3RhcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHRpbWVvdXQ7XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjb21wb3NpbmcpIHJldHVybjtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbCgpLFxuICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWVcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcbiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBjb250cm9sIGlzIHN1ZmZlcmluZyBmcm9tIGJhZCBpbnB1dCAoZHVlIHRvIG5hdGl2ZSB2YWxpZGF0b3JzKSwgYnJvd3NlcnMgZGlzY2FyZCBpdHNcbiAgICAvLyB2YWx1ZSwgc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIChieSBjYWxsaW5nICRzZXRWaWV3VmFsdWUgYWdhaW4pIGV2ZW4gaWYgdGhlXG4gICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcbiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0XG4gIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWZlckxpc3RlbmVyID0gZnVuY3Rpb24oZXYsIGlucHV0LCBvcmlnVmFsdWUpIHtcbiAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICB0aW1lb3V0ID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgaWYgKCFpbnB1dCB8fCBpbnB1dC52YWx1ZSAhPT0gb3JpZ1ZhbHVlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihldik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZWxlbWVudC5vbigna2V5ZG93bicsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgIC8vIGlnbm9yZVxuICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3NcbiAgICAgIGlmIChrZXkgPT09IDkxIHx8ICgxNSA8IGtleSAmJiBrZXkgPCAxOSkgfHwgKDM3IDw9IGtleSAmJiBrZXkgPD0gNDApKSByZXR1cm47XG5cbiAgICAgIGRlZmVyTGlzdGVuZXIoZXZlbnQsIHRoaXMsIHRoaXMudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgXCJwYXN0ZVwiIGFuZCBcImN1dFwiIGV2ZW50cyB0byBjYXRjaCBpdFxuICAgIGlmICgkc25pZmZlci5oYXNFdmVudCgncGFzdGUnKSkge1xuICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdXNlciBwYXN0ZSBpbnRvIGlucHV0IHVzaW5nIG1vdXNlIG9uIG9sZGVyIGJyb3dzZXJcbiAgLy8gb3IgZm9ybSBhdXRvY29tcGxldGUgb24gbmV3ZXIgYnJvd3Nlciwgd2UgbmVlZCBcImNoYW5nZVwiIGV2ZW50IHRvIGNhdGNoIGl0XG4gIGVsZW1lbnQub24oJ2NoYW5nZScsIGxpc3RlbmVyKTtcblxuICAvLyBTb21lIG5hdGl2ZSBpbnB1dCB0eXBlcyAoZGF0ZS1mYW1pbHkpIGhhdmUgdGhlIGFiaWxpdHkgdG8gY2hhbmdlIHZhbGlkaXR5IHdpdGhvdXRcbiAgLy8gZmlyaW5nIGFueSBpbnB1dC9jaGFuZ2UgZXZlbnRzLlxuICAvLyBGb3IgdGhlc2UgZXZlbnQgdHlwZXMsIHdoZW4gbmF0aXZlIHZhbGlkYXRvcnMgYXJlIHByZXNlbnQgYW5kIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSB0eXBlLFxuICAvLyBjaGVjayBmb3IgdmFsaWRpdHkgY2hhbmdlcyBvbiB2YXJpb3VzIERPTSBldmVudHMuXG4gIGlmIChQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMgJiYgdHlwZSA9PT0gYXR0ci50eXBlKSB7XG4gICAgZWxlbWVudC5vbihQQVJUSUFMX1ZBTElEQVRJT05fRVZFTlRTLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oZXYpIHtcbiAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICB2YXIgdmFsaWRpdHkgPSB0aGlzW1ZBTElESVRZX1NUQVRFX1BST1BFUlRZXTtcbiAgICAgICAgdmFyIG9yaWdCYWRJbnB1dCA9IHZhbGlkaXR5LmJhZElucHV0O1xuICAgICAgICB2YXIgb3JpZ1R5cGVNaXNtYXRjaCA9IHZhbGlkaXR5LnR5cGVNaXNtYXRjaDtcbiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICh2YWxpZGl0eS5iYWRJbnB1dCAhPT0gb3JpZ0JhZElucHV0IHx8IHZhbGlkaXR5LnR5cGVNaXNtYXRjaCAhPT0gb3JpZ1R5cGVNaXNtYXRjaCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBGaXJlZm94IHZhbGlkYXRpb24gIzEyMTAyLlxuICAgIHZhciB2YWx1ZSA9IGN0cmwuJGlzRW1wdHkoY3RybC4kdmlld1ZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlO1xuICAgIGlmIChlbGVtZW50LnZhbCgpICE9PSB2YWx1ZSkge1xuICAgICAgZWxlbWVudC52YWwodmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla1BhcnNlcihpc29XZWVrLCBleGlzdGluZ0RhdGUpIHtcbiAgaWYgKGlzRGF0ZShpc29XZWVrKSkge1xuICAgIHJldHVybiBpc29XZWVrO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGlzb1dlZWspKSB7XG4gICAgV0VFS19SRUdFWFAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgcGFydHMgPSBXRUVLX1JFR0VYUC5leGVjKGlzb1dlZWspO1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgdmFyIHllYXIgPSArcGFydHNbMV0sXG4gICAgICAgICAgd2VlayA9ICtwYXJ0c1syXSxcbiAgICAgICAgICBob3VycyA9IDAsXG4gICAgICAgICAgbWludXRlcyA9IDAsXG4gICAgICAgICAgc2Vjb25kcyA9IDAsXG4gICAgICAgICAgbWlsbGlzZWNvbmRzID0gMCxcbiAgICAgICAgICBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSxcbiAgICAgICAgICBhZGREYXlzID0gKHdlZWsgLSAxKSAqIDc7XG5cbiAgICAgIGlmIChleGlzdGluZ0RhdGUpIHtcbiAgICAgICAgaG91cnMgPSBleGlzdGluZ0RhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgbWludXRlcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIHNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBtaWxsaXNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCBmaXJzdFRodXJzLmdldERhdGUoKSArIGFkZERheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBOYU47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIocmVnZXhwLCBtYXBwaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihpc28sIGRhdGUpIHtcbiAgICB2YXIgcGFydHMsIG1hcDtcblxuICAgIGlmIChpc0RhdGUoaXNvKSkge1xuICAgICAgcmV0dXJuIGlzbztcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoaXNvKSkge1xuICAgICAgLy8gV2hlbiBhIGRhdGUgaXMgSlNPTidpZmllZCB0byB3cmFwcyBpdHNlbGYgaW5zaWRlIG9mIGFuIGV4dHJhXG4gICAgICAvLyBzZXQgb2YgZG91YmxlIHF1b3Rlcy4gVGhpcyBtYWtlcyB0aGUgZGF0ZSBwYXJzaW5nIGNvZGUgdW5hYmxlXG4gICAgICAvLyB0byBtYXRjaCB0aGUgZGF0ZSBzdHJpbmcgYW5kIHBhcnNlIGl0IGFzIGEgZGF0ZS5cbiAgICAgIGlmIChpc28uY2hhckF0KDApID09PSAnXCInICYmIGlzby5jaGFyQXQoaXNvLmxlbmd0aCAtIDEpID09PSAnXCInKSB7XG4gICAgICAgIGlzbyA9IGlzby5zdWJzdHJpbmcoMSwgaXNvLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKElTT19EQVRFX1JFR0VYUC50ZXN0KGlzbykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlzbyk7XG4gICAgICB9XG4gICAgICByZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgIHBhcnRzID0gcmVnZXhwLmV4ZWMoaXNvKTtcblxuICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgTU06IGRhdGUuZ2V0TW9udGgoKSArIDEsXG4gICAgICAgICAgICBkZDogZGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICBISDogZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgbW06IGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgc3M6IGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgc3NzOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwMFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwID0geyB5eXl5OiAxOTcwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCwgc3M6IDAsIHNzczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPCBtYXBwaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgbWFwW21hcHBpbmdbaW5kZXhdXSA9ICtwYXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShtYXAueXl5eSwgbWFwLk1NIC0gMSwgbWFwLmRkLCBtYXAuSEgsIG1hcC5tbSwgbWFwLnNzIHx8IDAsIG1hcC5zc3MgKiAxMDAwIHx8IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBOYU47XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVJbnB1dFR5cGUodHlwZSwgcmVnZXhwLCBwYXJzZURhdGUsIGZvcm1hdCkge1xuICByZXR1cm4gZnVuY3Rpb24gZHluYW1pY0RhdGVJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlcikge1xuICAgIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gICAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgICB2YXIgdGltZXpvbmUgPSBjdHJsICYmIGN0cmwuJG9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpO1xuICAgIHZhciBwcmV2aW91c0RhdGU7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9IHR5cGU7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHJlZ2V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAvLyBOb3RlOiBXZSBjYW5ub3QgcmVhZCBjdHJsLiRtb2RlbFZhbHVlLCBhcyB0aGVyZSBtaWdodCBiZSBhIGRpZmZlcmVudFxuICAgICAgICAvLyBwYXJzZXIvZm9ybWF0dGVyIGluIHRoZSBwcm9jZXNzaW5nIGNoYWluIHNvIHRoYXQgdGhlIG1vZGVsXG4gICAgICAgIC8vIGNvbnRhaW5zIHNvbWUgZGlmZmVyZW50IGRhdGEgZm9ybWF0IVxuICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgcHJldmlvdXNEYXRlKTtcbiAgICAgICAgaWYgKHRpbWV6b25lKSB7XG4gICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocGFyc2VkRGF0ZSwgdGltZXpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ2RhdGVmbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBkYXRlJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmFsaWREYXRlKHZhbHVlKSkge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHByZXZpb3VzRGF0ZSAmJiB0aW1lem9uZSkge1xuICAgICAgICAgIHByZXZpb3VzRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocHJldmlvdXNEYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKSh2YWx1ZSwgZm9ybWF0LCB0aW1lem9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7XG4gICAgICB2YXIgbWluVmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPj0gbWluVmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtaW5WYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICB2YXIgbWF4VmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPD0gbWF4VmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtYXhWYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgICAgLy8gSW52YWxpZCBEYXRlOiBnZXRUaW1lKCkgcmV0dXJucyBOYU5cbiAgICAgIHJldHVybiB2YWx1ZSAmJiAhKHZhbHVlLmdldFRpbWUgJiYgdmFsdWUuZ2V0VGltZSgpICE9PSB2YWx1ZS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKSB7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgIWlzRGF0ZSh2YWwpID8gcGFyc2VEYXRlKHZhbCkgfHwgdW5kZWZpbmVkIDogdmFsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgdmFyIG5hdGl2ZVZhbGlkYXRpb24gPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyA9IGlzT2JqZWN0KG5vZGUudmFsaWRpdHkpO1xuICBpZiAobmF0aXZlVmFsaWRhdGlvbikge1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgIHJldHVybiB2YWxpZGl0eS5iYWRJbnB1dCB8fCB2YWxpZGl0eS50eXBlTWlzbWF0Y2ggPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudW1iZXJGb3JtYXR0ZXJQYXJzZXIoY3RybCkge1xuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdudW1iZXInO1xuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9KTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWN0cmwuJGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdudW1mbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBudW1iZXInLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpIHtcbiAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpO1xuICB9XG4gIHJldHVybiAhaXNOdW1iZXJOYU4odmFsKSA/IHZhbCA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXJJbnRlZ2VyKG51bSkge1xuICAvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDYzNjUzNi9ob3ctdG8tY2hlY2staWYtYS12YXJpYWJsZS1pcy1hbi1pbnRlZ2VyLWluLWphdmFzY3JpcHQjMTQ3OTQwNjZcbiAgLy8gKG1pbnVzIHRoZSBhc3N1bXB0aW9uIHRoYXQgYG51bWAgaXMgYSBudW1iZXIpXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgcmV0dXJuIChudW0gfCAwKSA9PT0gbnVtO1xufVxuXG5mdW5jdGlvbiBjb3VudERlY2ltYWxzKG51bSkge1xuICB2YXIgbnVtU3RyaW5nID0gbnVtLnRvU3RyaW5nKCk7XG4gIHZhciBkZWNpbWFsU3ltYm9sSW5kZXggPSBudW1TdHJpbmcuaW5kZXhPZignLicpO1xuXG4gIGlmIChkZWNpbWFsU3ltYm9sSW5kZXggPT09IC0xKSB7XG4gICAgaWYgKC0xIDwgbnVtICYmIG51bSA8IDEpIHtcbiAgICAgIC8vIEl0IG1heSBiZSBpbiB0aGUgZXhwb25lbnRpYWwgbm90YXRpb24gZm9ybWF0IChgMWUtWGApXG4gICAgICB2YXIgbWF0Y2ggPSAvZS0oXFxkKykkLy5leGVjKG51bVN0cmluZyk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBudW1TdHJpbmcubGVuZ3RoIC0gZGVjaW1hbFN5bWJvbEluZGV4IC0gMTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBzdGVwQmFzZSwgc3RlcCkge1xuICAvLyBBdCB0aGlzIHBvaW50IGBzdGVwQmFzZWAgYW5kIGBzdGVwYCBhcmUgZXhwZWN0ZWQgdG8gYmUgbm9uLU5hTiB2YWx1ZXNcbiAgLy8gYW5kIGB2aWV3VmFsdWVgIGlzIGV4cGVjdGVkIHRvIGJlIGEgdmFsaWQgc3RyaW5naWZpZWQgbnVtYmVyLlxuICB2YXIgdmFsdWUgPSBOdW1iZXIodmlld1ZhbHVlKTtcblxuICB2YXIgaXNOb25JbnRlZ2VyVmFsdWUgPSAhaXNOdW1iZXJJbnRlZ2VyKHZhbHVlKTtcbiAgdmFyIGlzTm9uSW50ZWdlclN0ZXBCYXNlID0gIWlzTnVtYmVySW50ZWdlcihzdGVwQmFzZSk7XG4gIHZhciBpc05vbkludGVnZXJTdGVwID0gIWlzTnVtYmVySW50ZWdlcihzdGVwKTtcblxuICAvLyBEdWUgdG8gbGltaXRhdGlvbnMgaW4gRmxvYXRpbmcgUG9pbnQgQXJpdGhtZXRpYyAoZS5nLiBgMC4zIC0gMC4yICE9PSAwLjFgIG9yXG4gIC8vIGAwLjUgJSAwLjEgIT09IDBgKSwgd2UgbmVlZCB0byBjb252ZXJ0IGFsbCBudW1iZXJzIHRvIGludGVnZXJzLlxuICBpZiAoaXNOb25JbnRlZ2VyVmFsdWUgfHwgaXNOb25JbnRlZ2VyU3RlcEJhc2UgfHwgaXNOb25JbnRlZ2VyU3RlcCkge1xuICAgIHZhciB2YWx1ZURlY2ltYWxzID0gaXNOb25JbnRlZ2VyVmFsdWUgPyBjb3VudERlY2ltYWxzKHZhbHVlKSA6IDA7XG4gICAgdmFyIHN0ZXBCYXNlRGVjaW1hbHMgPSBpc05vbkludGVnZXJTdGVwQmFzZSA/IGNvdW50RGVjaW1hbHMoc3RlcEJhc2UpIDogMDtcbiAgICB2YXIgc3RlcERlY2ltYWxzID0gaXNOb25JbnRlZ2VyU3RlcCA/IGNvdW50RGVjaW1hbHMoc3RlcCkgOiAwO1xuXG4gICAgdmFyIGRlY2ltYWxDb3VudCA9IE1hdGgubWF4KHZhbHVlRGVjaW1hbHMsIHN0ZXBCYXNlRGVjaW1hbHMsIHN0ZXBEZWNpbWFscyk7XG4gICAgdmFyIG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGVjaW1hbENvdW50KTtcblxuICAgIHZhbHVlID0gdmFsdWUgKiBtdWx0aXBsaWVyO1xuICAgIHN0ZXBCYXNlID0gc3RlcEJhc2UgKiBtdWx0aXBsaWVyO1xuICAgIHN0ZXAgPSBzdGVwICogbXVsdGlwbGllcjtcblxuICAgIGlmIChpc05vbkludGVnZXJWYWx1ZSkgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBpZiAoaXNOb25JbnRlZ2VyU3RlcEJhc2UpIHN0ZXBCYXNlID0gTWF0aC5yb3VuZChzdGVwQmFzZSk7XG4gICAgaWYgKGlzTm9uSW50ZWdlclN0ZXApIHN0ZXAgPSBNYXRoLnJvdW5kKHN0ZXApO1xuICB9XG5cbiAgcmV0dXJuICh2YWx1ZSAtIHN0ZXBCYXNlKSAlIHN0ZXAgPT09IDA7XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIG51bWJlckZvcm1hdHRlclBhcnNlcihjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICB2YXIgbWluVmFsO1xuICB2YXIgbWF4VmFsO1xuXG4gIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2YWx1ZSA+PSBtaW5WYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgbWluVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1heFZhbCkgfHwgdmFsdWUgPD0gbWF4VmFsO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzRGVmaW5lZChhdHRyLnN0ZXApIHx8IGF0dHIubmdTdGVwKSB7XG4gICAgdmFyIHN0ZXBWYWw7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5zdGVwID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHN0ZXBWYWwpIHx8XG4gICAgICAgICAgICAgaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBtaW5WYWwgfHwgMCwgc3RlcFZhbCk7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ3N0ZXAnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHN0ZXBWYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIG51bWJlckZvcm1hdHRlclBhcnNlcihjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICB2YXIgc3VwcG9ydHNSYW5nZSA9IGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzICYmIGVsZW1lbnRbMF0udHlwZSA9PT0gJ3JhbmdlJyxcbiAgICAgIG1pblZhbCA9IHN1cHBvcnRzUmFuZ2UgPyAwIDogdW5kZWZpbmVkLFxuICAgICAgbWF4VmFsID0gc3VwcG9ydHNSYW5nZSA/IDEwMCA6IHVuZGVmaW5lZCxcbiAgICAgIHN0ZXBWYWwgPSBzdXBwb3J0c1JhbmdlID8gMSA6IHVuZGVmaW5lZCxcbiAgICAgIHZhbGlkaXR5ID0gZWxlbWVudFswXS52YWxpZGl0eSxcbiAgICAgIGhhc01pbkF0dHIgPSBpc0RlZmluZWQoYXR0ci5taW4pLFxuICAgICAgaGFzTWF4QXR0ciA9IGlzRGVmaW5lZChhdHRyLm1heCksXG4gICAgICBoYXNTdGVwQXR0ciA9IGlzRGVmaW5lZChhdHRyLnN0ZXApO1xuXG4gIHZhciBvcmlnaW5hbFJlbmRlciA9IGN0cmwuJHJlbmRlcjtcblxuICBjdHJsLiRyZW5kZXIgPSBzdXBwb3J0c1JhbmdlICYmIGlzRGVmaW5lZCh2YWxpZGl0eS5yYW5nZVVuZGVyZmxvdykgJiYgaXNEZWZpbmVkKHZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpID9cbiAgICAvL0Jyb3dzZXJzIHRoYXQgaW1wbGVtZW50IHJhbmdlIHdpbGwgc2V0IHRoZXNlIHZhbHVlcyBhdXRvbWF0aWNhbGx5LCBidXQgcmVhZGluZyB0aGUgYWRqdXN0ZWQgdmFsdWVzIGFmdGVyXG4gICAgLy8kcmVuZGVyIHdvdWxkIGNhdXNlIHRoZSBtaW4gLyBtYXggdmFsaWRhdG9ycyB0byBiZSBhcHBsaWVkIHdpdGggdGhlIHdyb25nIHZhbHVlXG4gICAgZnVuY3Rpb24gcmFuZ2VSZW5kZXIoKSB7XG4gICAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQudmFsKCkpO1xuICAgIH0gOlxuICAgIG9yaWdpbmFsUmVuZGVyO1xuXG4gIGlmIChoYXNNaW5BdHRyKSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBzdXBwb3J0c1JhbmdlID9cbiAgICAgIC8vIFNpbmNlIGFsbCBicm93c2VycyBzZXQgdGhlIGlucHV0IHRvIGEgdmFsaWQgdmFsdWUsIHdlIGRvbid0IG5lZWQgdG8gY2hlY2sgdmFsaWRpdHlcbiAgICAgIGZ1bmN0aW9uIG5vb3BNaW5WYWxpZGF0b3IoKSB7IHJldHVybiB0cnVlOyB9IDpcbiAgICAgIC8vIG5vbi1zdXBwb3J0IGJyb3dzZXJzIHZhbGlkYXRlIHRoZSBtaW4gdmFsXG4gICAgICBmdW5jdGlvbiBtaW5WYWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2aWV3VmFsdWUgPj0gbWluVmFsO1xuICAgICAgfTtcblxuICAgIHNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyKCdtaW4nLCBtaW5DaGFuZ2UpO1xuICB9XG5cbiAgaWYgKGhhc01heEF0dHIpIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IHN1cHBvcnRzUmFuZ2UgP1xuICAgICAgLy8gU2luY2UgYWxsIGJyb3dzZXJzIHNldCB0aGUgaW5wdXQgdG8gYSB2YWxpZCB2YWx1ZSwgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayB2YWxpZGl0eVxuICAgICAgZnVuY3Rpb24gbm9vcE1heFZhbGlkYXRvcigpIHsgcmV0dXJuIHRydWU7IH0gOlxuICAgICAgLy8gbm9uLXN1cHBvcnQgYnJvd3NlcnMgdmFsaWRhdGUgdGhlIG1heCB2YWxcbiAgICAgIGZ1bmN0aW9uIG1heFZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZpZXdWYWx1ZSA8PSBtYXhWYWw7XG4gICAgICB9O1xuXG4gICAgc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoJ21heCcsIG1heENoYW5nZSk7XG4gIH1cblxuICBpZiAoaGFzU3RlcEF0dHIpIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLnN0ZXAgPSBzdXBwb3J0c1JhbmdlID9cbiAgICAgIGZ1bmN0aW9uIG5hdGl2ZVN0ZXBWYWxpZGF0b3IoKSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSwgb25seSBGRiBpbXBsZW1lbnRzIHRoZSBzcGVjIG9uIHN0ZXAgY2hhbmdlIGNvcnJlY3RseSAoaS5lLiBhZGp1c3RpbmcgdGhlXG4gICAgICAgIC8vIGlucHV0IGVsZW1lbnQgdmFsdWUgdG8gYSB2YWxpZCB2YWx1ZSkuIEl0J3MgcG9zc2libGUgdGhhdCBvdGhlciBicm93c2VycyBzZXQgdGhlIHN0ZXBNaXNtYXRjaFxuICAgICAgICAvLyB2YWxpZGl0eSBlcnJvciBpbnN0ZWFkLCBzbyB3ZSBjYW4gYXQgbGVhc3QgcmVwb3J0IGFuIGVycm9yIGluIHRoYXQgY2FzZS5cbiAgICAgICAgcmV0dXJuICF2YWxpZGl0eS5zdGVwTWlzbWF0Y2g7XG4gICAgICB9IDpcbiAgICAgIC8vIG5nU3RlcCBkb2Vzbid0IHNldCB0aGUgc2V0cCBhdHRyLCBzbyB0aGUgYnJvd3NlciBkb2Vzbid0IGFkanVzdCB0aGUgaW5wdXQgdmFsdWUgYXMgc2V0dGluZyBzdGVwIHdvdWxkXG4gICAgICBmdW5jdGlvbiBzdGVwVmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHN0ZXBWYWwpIHx8XG4gICAgICAgICAgICAgICBpc1ZhbGlkRm9yU3RlcCh2aWV3VmFsdWUsIG1pblZhbCB8fCAwLCBzdGVwVmFsKTtcbiAgICAgIH07XG5cbiAgICBzZXRJbml0aWFsVmFsdWVBbmRPYnNlcnZlcignc3RlcCcsIHN0ZXBDaGFuZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoaHRtbEF0dHJOYW1lLCBjaGFuZ2VGbikge1xuICAgIC8vIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzIHNldCB0aGUgYXR0cmlidXRlIHZhbHVlIG9ubHkgYWZ0ZXIgYSBkaWdlc3QsIGJ1dCB3ZSBuZWVkIHRoZVxuICAgIC8vIGF0dHJpYnV0ZSB2YWx1ZSB3aGVuIHRoZSBpbnB1dCBpcyBmaXJzdCByZW5kZXJlZCwgc28gdGhhdCB0aGUgYnJvd3NlciBjYW4gYWRqdXN0IHRoZVxuICAgIC8vIGlucHV0IHZhbHVlIGJhc2VkIG9uIHRoZSBtaW4vbWF4IHZhbHVlXG4gICAgZWxlbWVudC5hdHRyKGh0bWxBdHRyTmFtZSwgYXR0cltodG1sQXR0ck5hbWVdKTtcbiAgICBhdHRyLiRvYnNlcnZlKGh0bWxBdHRyTmFtZSwgY2hhbmdlRm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWluQ2hhbmdlKHZhbCkge1xuICAgIG1pblZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlck5hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c1JhbmdlKSB7XG4gICAgICB2YXIgZWxWYWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgLy8gSUUxMSBkb2Vzbid0IHNldCB0aGUgZWwgdmFsIGNvcnJlY3RseSBpZiB0aGUgbWluVmFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCB2YWx1ZVxuICAgICAgaWYgKG1pblZhbCA+IGVsVmFsKSB7XG4gICAgICAgIGVsVmFsID0gbWluVmFsO1xuICAgICAgICBlbGVtZW50LnZhbChlbFZhbCk7XG4gICAgICB9XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWF4Q2hhbmdlKHZhbCkge1xuICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlck5hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c1JhbmdlKSB7XG4gICAgICB2YXIgZWxWYWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgLy8gSUUxMSBkb2Vzbid0IHNldCB0aGUgZWwgdmFsIGNvcnJlY3RseSBpZiB0aGUgbWF4VmFsIGlzIGxlc3MgdGhhbiB0aGUgZWxlbWVudCB2YWx1ZVxuICAgICAgaWYgKG1heFZhbCA8IGVsVmFsKSB7XG4gICAgICAgIGVsZW1lbnQudmFsKG1heFZhbCk7XG4gICAgICAgIC8vIElFMTEgYW5kIENocm9tZSBkb24ndCBzZXQgdGhlIHZhbHVlIHRvIHRoZSBtaW5WYWwgd2hlbiBtYXggPCBtaW5cbiAgICAgICAgZWxWYWwgPSBtYXhWYWwgPCBtaW5WYWwgPyBtaW5WYWwgOiBtYXhWYWw7XG4gICAgICB9XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RlcENoYW5nZSh2YWwpIHtcbiAgICBzdGVwVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgLy8gaWdub3JlIGNoYW5nZXMgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKGlzTnVtYmVyTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU29tZSBicm93c2VycyBkb24ndCBhZGp1c3QgdGhlIGlucHV0IHZhbHVlIGNvcnJlY3RseSwgYnV0IHNldCB0aGUgc3RlcE1pc21hdGNoIGVycm9yXG4gICAgaWYgKHN1cHBvcnRzUmFuZ2UgJiYgY3RybC4kdmlld1ZhbHVlICE9PSBlbGVtZW50LnZhbCgpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudC52YWwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXJsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvblxuICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICd1cmwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLnVybCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBVUkxfUkVHRVhQLnRlc3QodmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbWFpbElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnZW1haWwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLmVtYWlsID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IEVNQUlMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmFkaW9JbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgdmFyIGRvVHJpbSA9ICFhdHRyLm5nVHJpbSB8fCB0cmltKGF0dHIubmdUcmltKSAhPT0gJ2ZhbHNlJztcbiAgLy8gbWFrZSB0aGUgbmFtZSB1bmlxdWUsIGlmIG5vdCBkZWZpbmVkXG4gIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7XG4gICAgZWxlbWVudC5hdHRyKCduYW1lJywgbmV4dFVpZCgpKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgdmFyIHZhbHVlO1xuICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHtcbiAgICAgIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICAgIGlmIChkb1RyaW0pIHtcbiAgICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXYgJiYgZXYudHlwZSk7XG4gICAgfVxuICB9O1xuXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgaWYgKGRvVHJpbSkge1xuICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICB9XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gKHZhbHVlID09PSBjdHJsLiR2aWV3VmFsdWUpO1xuICB9O1xuXG4gIGF0dHIuJG9ic2VydmUoJ3ZhbHVlJywgY3RybC4kcmVuZGVyKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBjb250ZXh0LCBuYW1lLCBleHByZXNzaW9uLCBmYWxsYmFjaykge1xuICB2YXIgcGFyc2VGbjtcbiAgaWYgKGlzRGVmaW5lZChleHByZXNzaW9uKSkge1xuICAgIHBhcnNlRm4gPSAkcGFyc2UoZXhwcmVzc2lvbik7XG4gICAgaWYgKCFwYXJzZUZuLmNvbnN0YW50KSB7XG4gICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdjb25zdGV4cHInLCAnRXhwZWN0ZWQgY29uc3RhbnQgZXhwcmVzc2lvbiBmb3IgYHswfWAsIGJ1dCBzYXcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdgezF9YC4nLCBuYW1lLCBleHByZXNzaW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRm4oY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBjaGVja2JveElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgdmFyIHRydWVWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ1RydWVWYWx1ZScsIGF0dHIubmdUcnVlVmFsdWUsIHRydWUpO1xuICB2YXIgZmFsc2VWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ0ZhbHNlVmFsdWUnLCBhdHRyLm5nRmFsc2VWYWx1ZSwgZmFsc2UpO1xuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnRbMF0uY2hlY2tlZCwgZXYgJiYgZXYudHlwZSk7XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gY3RybC4kdmlld1ZhbHVlO1xuICB9O1xuXG4gIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCBgJGlzRW1wdHlgIGJlY2F1c2UgdGhlICR2aWV3VmFsdWUgb2YgYW4gZW1wdHkgY2hlY2tib3ggaXMgYWx3YXlzIHNldCB0byBgZmFsc2VgXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgcGFyc2VyIGJlbG93LCB3aGljaCBjb21wYXJlcyB0aGUgYCRtb2RlbFZhbHVlYCB3aXRoIGB0cnVlVmFsdWVgIHRvIGNvbnZlcnRcbiAgLy8gaXQgdG8gYSBib29sZWFuLlxuICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGZhbHNlO1xuICB9O1xuXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlcXVhbHModmFsdWUsIHRydWVWYWx1ZSk7XG4gIH0pO1xuXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdGV4dGFyZWFcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uXG4gKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXQgZWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICogICAgbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICogICAgYWNjb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqIFdoZW4gc3BlY2lmeWluZyB0aGUgYHBsYWNlaG9sZGVyYCBhdHRyaWJ1dGUgb2YgYDx0ZXh0YXJlYT5gLCBJbnRlcm5ldCBFeHBsb3JlciB3aWxsIHRlbXBvcmFyaWx5XG4gKiBpbnNlcnQgdGhlIHBsYWNlaG9sZGVyIHZhbHVlIGFzIHRoZSB0ZXh0YXJlYSdzIGNvbnRlbnQuIElmIHRoZSBwbGFjZWhvbGRlciB2YWx1ZSBjb250YWluc1xuICogaW50ZXJwb2xhdGlvbiAoYHt7IC4uLiB9fWApLCBhbiBlcnJvciB3aWxsIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZSB3aGVuIEFuZ3VsYXIgdHJpZXMgdG8gdXBkYXRlXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGJ5LXRoZW4tcmVtb3ZlZCB0ZXh0IG5vZGUuIFRoaXMgZG9lc24ndCBhZmZlY3QgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlXG4gKiB0ZXh0YXJlYSwgYnV0IGNhbiBiZSB1bmRlc2lyYWJsZS5cbiAqXG4gKiBZb3UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgSW50ZXJuZXQgRXhwbG9yZXIgaXNzdWUgYnkgdXNpbmcgYG5nLWF0dHItcGxhY2Vob2xkZXJgIGluc3RlYWQgb2ZcbiAqIGBwbGFjZWhvbGRlcmAgb24gdGV4dGFyZWFzLCB3aGVuZXZlciB5b3UgbmVlZCBpbnRlcnBvbGF0aW9uIGluIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS4gWW91IGNhblxuICogZmluZCBtb3JlIGRldGFpbHMgb24gYG5nQXR0cmAgaW4gdGhlXG4gKiBbSW50ZXJwb2xhdGlvbl0oZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzKSBzZWN0aW9uIG9mIHRoZVxuICogRGV2ZWxvcGVyIEd1aWRlLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBpbnB1dFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sLiBXaGVuIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LCBpdCBwcm92aWRlcyBkYXRhLWJpbmRpbmcsXG4gKiBpbnB1dCBzdGF0ZSBjb250cm9sLCBhbmQgdmFsaWRhdGlvbi5cbiAqIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcyBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuXG4gKiBTcGVjaWZpY2FsbHksIGRhdGEgYmluZGluZyBhbmQgZXZlbnQgaGFuZGxpbmcgdmlhIGBuZy1tb2RlbGAgaXMgdW5zdXBwb3J0ZWQgZm9yIGBpbnB1dFtmaWxlXWAuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1JlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaWYgc2V0IHRvIHRydWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gKiAgICBtaW5sZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2YgYW55XG4gKiAgICBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gKiAgICB2YWx1ZSBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiAgICBhY2NvdW50LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAqICAgIGlucHV0LlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICBVc2VyIG5hbWU6XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgTGFzdCBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cInVzZXIubGFzdFwiXG4gICAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cIjNcIiBuZy1tYXhsZW5ndGg9XCIxMFwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aFwiPlxuICAgICAgICAgICAgICAgVG9vIGxvbmchPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDx0dD51c2VyID0ge3t1c2VyfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kZXJyb3IgPSB7e215Rm9ybS51c2VyTmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IubWF4bGVuZ3RoID0ge3shIW15Rm9ybS4kZXJyb3IubWF4bGVuZ3RofX08L3R0Pjxici8+XG4gICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB1c2VyID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ3VzZXInKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpO1xuICAgICAgICB2YXIgbGFzdE5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lRXJyb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSk7XG4gICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpO1xuICAgICAgICB2YXIgdXNlckxhc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubGFzdCcpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xuICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwiLFwibGFzdFwiOlwiXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCd4eCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21pbmxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsb25nZXIgdGhhbiBtYXggbGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJ3NvbWUgcmlkaWN1bG91c2x5IGxvbmcgbmFtZScpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsXG4gICAgZnVuY3Rpb24oJGJyb3dzZXIsICRzbmlmZmVyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICBpZiAoY3RybHNbMF0pIHtcbiAgICAgICAgICAoaW5wdXRUeXBlW2xvd2VyY2FzZShhdHRyLnR5cGUpXSB8fCBpbnB1dFR5cGUudGV4dCkoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzWzBdLCAkc25pZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuXG5cbnZhciBDT05TVEFOVF9WQUxVRV9SRUdFWFAgPSAvXih0cnVlfGZhbHNlfFxcZCspJC87XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJpbmRzIHRoZSBnaXZlbiBleHByZXNzaW9uIHRvIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBJdCBpcyBtYWlubHkgdXNlZCBvbiB7QGxpbmsgaW5wdXRbcmFkaW9dIGBpbnB1dFtyYWRpb11gfSBhbmQgb3B0aW9uIGVsZW1lbnRzLFxuICogc28gdGhhdCB3aGVuIHRoZSBlbGVtZW50IGlzIHNlbGVjdGVkLCB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBvZiB0aGF0IGVsZW1lbnQgKG9yIGl0c1xuICoge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gcGFyZW50IGVsZW1lbnQpIGlzIHNldCB0byB0aGUgYm91bmQgdmFsdWUuIEl0IGlzIGVzcGVjaWFsbHkgdXNlZnVsXG4gKiBmb3IgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIGxpc3RzIHVzaW5nIHtAbGluayBuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2hvd24gYmVsb3cuXG4gKlxuICogSXQgY2FuIGFsc28gYmUgdXNlZCB0byBhY2hpZXZlIG9uZS13YXkgYmluZGluZyBvZiBhIGdpdmVuIGV4cHJlc3Npb24gdG8gYW4gaW5wdXQgZWxlbWVudFxuICogc3VjaCBhcyBhbiBgaW5wdXRbdGV4dF1gIG9yIGEgYHRleHRhcmVhYCwgd2hlbiB0aGF0IGVsZW1lbnQgZG9lcyBub3QgdXNlIG5nTW9kZWwuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdWYWx1ZSBhbmd1bGFyIGV4cHJlc3Npb24sIHdob3NlIHZhbHVlIHdpbGwgYmUgYm91bmQgdG8gdGhlIGB2YWx1ZWAgYXR0cmlidXRlXG4gKiBhbmQgYHZhbHVlYCBwcm9wZXJ0eSBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZ1ZhbHVlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cInZhbHVlRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsncGl6emEnLCAndW5pY29ybnMnLCAncm9ib3RzJ107XG4gICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj5cbiAgICAgICAgICAgIDxsYWJlbCBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCIgZm9yPVwie3tuYW1lfX1cIj5cbiAgICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIm15LmZhdm9yaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgIG5nLXZhbHVlPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICBpZD1cInt7bmFtZX19XCJcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJmYXZvcml0ZVwiPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgZmF2b3JpdGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215LmZhdm9yaXRlJykpO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigndW5pY29ybnMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXkuZmF2b3JpdGUnKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCdwaXp6YScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiAgaW5wdXRzIHVzZSB0aGUgdmFsdWUgYXR0cmlidXRlIGFzIHRoZWlyIGRlZmF1bHQgdmFsdWUgaWYgdGhlIHZhbHVlIHByb3BlcnR5IGlzIG5vdCBzZXQuXG4gICAqICBPbmNlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBoYXMgYmVlbiBzZXQgKGJ5IGFkZGluZyBpbnB1dCksIGl0IHdpbGwgbm90IHJlYWN0IHRvIGNoYW5nZXMgdG9cbiAgICogIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgYW55bW9yZS4gU2V0dGluZyBib3RoIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHkgZml4ZXMgdGhpcyBiZWhhdmlvciwgYW5kXG4gICAqICBtYWtlcyBpdCBwb3NzaWJsZSB0byB1c2UgbmdWYWx1ZSBhcyBhIHNvcnQgb2Ygb25lLXdheSBiaW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudFZhbHVlKGVsZW1lbnQsIGF0dHIsIHZhbHVlKSB7XG4gICAgLy8gU3VwcG9ydDogSUU5IG9ubHlcbiAgICAvLyBJbiBJRTkgdmFsdWVzIGFyZSBjb252ZXJ0ZWQgdG8gc3RyaW5nIChlLmcuIGBpbnB1dC52YWx1ZSA9IG51bGxgIHJlc3VsdHMgaW4gYGlucHV0LnZhbHVlID09PSAnbnVsbCdgKS5cbiAgICB2YXIgcHJvcFZhbHVlID0gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogKG1zaWUgPT09IDkpID8gJycgOiBudWxsO1xuICAgIGVsZW1lbnQucHJvcCgndmFsdWUnLCBwcm9wVmFsdWUpO1xuICAgIGF0dHIuJHNldCgndmFsdWUnLCB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHtcbiAgICAgIGlmIChDT05TVEFOVF9WQUxVRV9SRUdFWFAudGVzdCh0cGxBdHRyLm5nVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlQ29uc3RhbnRMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZS4kZXZhbChhdHRyLm5nVmFsdWUpO1xuICAgICAgICAgIHVwZGF0ZUVsZW1lbnRWYWx1ZShlbG0sIGF0dHIsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlTGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdXBkYXRlRWxlbWVudFZhbHVlKGVsbSwgYXR0ciwgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCaW5kXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdCaW5kYCBhdHRyaWJ1dGUgdGVsbHMgQW5ndWxhciB0byByZXBsYWNlIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHNwZWNpZmllZCBIVE1MIGVsZW1lbnRcbiAqIHdpdGggdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gZXhwcmVzc2lvbiwgYW5kIHRvIHVwZGF0ZSB0aGUgdGV4dCBjb250ZW50IHdoZW4gdGhlIHZhbHVlIG9mIHRoYXRcbiAqIGV4cHJlc3Npb24gY2hhbmdlcy5cbiAqXG4gKiBUeXBpY2FsbHksIHlvdSBkb24ndCB1c2UgYG5nQmluZGAgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHlvdSB1c2UgdGhlIGRvdWJsZSBjdXJseSBtYXJrdXAgbGlrZVxuICogYHt7IGV4cHJlc3Npb24gfX1gIHdoaWNoIGlzIHNpbWlsYXIgYnV0IGxlc3MgdmVyYm9zZS5cbiAqXG4gKiBJdCBpcyBwcmVmZXJhYmxlIHRvIHVzZSBgbmdCaW5kYCBpbnN0ZWFkIG9mIGB7eyBleHByZXNzaW9uIH19YCBpZiBhIHRlbXBsYXRlIGlzIG1vbWVudGFyaWx5XG4gKiBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgaW4gaXRzIHJhdyBzdGF0ZSBiZWZvcmUgQW5ndWxhciBjb21waWxlcyBpdC4gU2luY2UgYG5nQmluZGAgaXMgYW5cbiAqIGVsZW1lbnQgYXR0cmlidXRlLCBpdCBtYWtlcyB0aGUgYmluZGluZ3MgaW52aXNpYmxlIHRvIHRoZSB1c2VyIHdoaWxlIHRoZSBwYWdlIGlzIGxvYWRpbmcuXG4gKlxuICogQW4gYWx0ZXJuYXRpdmUgc29sdXRpb24gdG8gdGhpcyBwcm9ibGVtIHdvdWxkIGJlIHVzaW5nIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrIG5nQ2xvYWt9IGRpcmVjdGl2ZS5cbiAqXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogRW50ZXIgYSBuYW1lIGluIHRoZSBMaXZlIFByZXZpZXcgdGV4dCBib3g7IHRoZSBncmVldGluZyBiZWxvdyB0aGUgdGV4dCBib3ggY2hhbmdlcyBpbnN0YW50bHkuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiIG5hbWU9XCJuZy1iaW5kXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5FbnRlciBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9XCJuYW1lXCI+PC9zcGFuPiFcbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd3b3JsZCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZENvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uIG5nQmluZFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcbiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS5cbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXG4gKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiIG5hbWU9XCJuZy1iaW5kLXRlbXBsYXRlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5zYWx1dGF0aW9uID0gJ0hlbGxvJztcbiAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8bGFiZWw+U2FsdXRhdGlvbjogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzYWx1dGF0aW9uXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgPHByZSBuZy1iaW5kLXRlbXBsYXRlPVwie3tzYWx1dGF0aW9ufX0ge3tuYW1lfX0hXCI+PC9wcmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25FbGVtID0gZWxlbWVudChieS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25JbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NhbHV0YXRpb24nKSk7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnSGVsbG8gV29ybGQhJyk7XG5cbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5jbGVhcigpO1xuICAgICAgICAgc2FsdXRhdGlvbklucHV0LnNlbmRLZXlzKCdHcmVldGluZ3MnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd1c2VyJyk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0dyZWV0aW5ncyB1c2VyIScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJGludGVycG9sYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kVGVtcGxhdGVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBhdHRyLiRvYnNlcnZlKCduZ0JpbmRUZW1wbGF0ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGlzVW5kZWZpbmVkKHZhbHVlKSA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZEh0bWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlcyB0aGUgZXhwcmVzc2lvbiBhbmQgaW5zZXJ0cyB0aGUgcmVzdWx0aW5nIEhUTUwgaW50byB0aGUgZWxlbWVudCBpbiBhIHNlY3VyZSB3YXkuIEJ5IGRlZmF1bHQsXG4gKiB0aGUgcmVzdWx0aW5nIEhUTUwgY29udGVudCB3aWxsIGJlIHNhbml0aXplZCB1c2luZyB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZS5cbiAqIFRvIHV0aWxpemUgdGhpcyBmdW5jdGlvbmFsaXR5LCBlbnN1cmUgdGhhdCBgJHNhbml0aXplYCBpcyBhdmFpbGFibGUsIGZvciBleGFtcGxlLCBieSBpbmNsdWRpbmcge0BsaW5rXG4gKiBuZ1Nhbml0aXplfSBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcyAobm90IGluIGNvcmUgQW5ndWxhcikuIEluIG9yZGVyIHRvIHVzZSB7QGxpbmsgbmdTYW5pdGl6ZX1cbiAqIGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzLCB5b3UgbmVlZCB0byBpbmNsdWRlIFwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIGluIHlvdXIgYXBwbGljYXRpb24uXG4gKlxuICogWW91IG1heSBhbHNvIGJ5cGFzcyBzYW5pdGl6YXRpb24gZm9yIHZhbHVlcyB5b3Uga25vdyBhcmUgc2FmZS4gVG8gZG8gc28sIGJpbmQgdG9cbiAqIGFuIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZSB2aWEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGVcbiAqIHVuZGVyIHtAbGluayBuZy4kc2NlI3Nob3ctbWUtYW4tZXhhbXBsZS11c2luZy1zY2UtIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiBOb3RlOiBJZiBhIGAkc2FuaXRpemVgIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUgYW5kIHRoZSBib3VuZCB2YWx1ZSBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQsIHlvdVxuICogd2lsbCBoYXZlIGFuIGV4Y2VwdGlvbiAoaW5zdGVhZCBvZiBhbiBleHBsb2l0LilcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kSHRtbCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kSHRtbEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIG5hbWU9XCJuZy1iaW5kLWh0bWxcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8cCBuZy1iaW5kLWh0bWw9XCJteUhUTUxcIj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRIdG1sRXhhbXBsZScsIFsnbmdTYW5pdGl6ZSddKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLm15SFRNTCA9XG4gICAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggJyArXG4gICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiPmxpbmtzITwvYT4gYW5kIG90aGVyIDxlbT5zdHVmZjwvZW0+JztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQtaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbXlIVE1MJykpLmdldFRleHQoKSkudG9CZShcbiAgICAgICAgICAgICAnSSBhbSBhbiBIVE1Mc3RyaW5nIHdpdGggbGlua3MhIGFuZCBvdGhlciBzdHVmZicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgJyRwYXJzZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRzY2UsICRwYXJzZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZEh0bWxDb21waWxlKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgIHZhciBuZ0JpbmRIdG1sR2V0dGVyID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sKTtcbiAgICAgIHZhciBuZ0JpbmRIdG1sV2F0Y2ggPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwsIGZ1bmN0aW9uIHNjZVZhbHVlT2YodmFsKSB7XG4gICAgICAgIC8vIFVud3JhcCB0aGUgdmFsdWUgdG8gY29tcGFyZSB0aGUgYWN0dWFsIGlubmVyIHNhZmUgdmFsdWUsIG5vdCB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICAgIHJldHVybiAkc2NlLnZhbHVlT2YodmFsKTtcbiAgICAgIH0pO1xuICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModEVsZW1lbnQpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kSHRtbExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZEh0bWwpO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChuZ0JpbmRIdG1sV2F0Y2gsIGZ1bmN0aW9uIG5nQmluZEh0bWxXYXRjaEFjdGlvbigpIHtcbiAgICAgICAgICAvLyBUaGUgd2F0Y2hlZCB2YWx1ZSBpcyB0aGUgdW53cmFwcGVkIHZhbHVlLiBUbyBhdm9pZCByZS1lc2NhcGluZywgdXNlIHRoZSBkaXJlY3QgZ2V0dGVyLlxuICAgICAgICAgIHZhciB2YWx1ZSA9IG5nQmluZEh0bWxHZXR0ZXIoc2NvcGUpO1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NoYW5nZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXZhbHVhdGUgdGhlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC5cbiAqIFRoZSBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCBpbW1lZGlhdGVseSwgdW5saWtlIHRoZSBKYXZhU2NyaXB0IG9uY2hhbmdlIGV2ZW50XG4gKiB3aGljaCBvbmx5IHRyaWdnZXJzIGF0IHRoZSBlbmQgb2YgYSBjaGFuZ2UgKHVzdWFsbHksIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoZVxuICogZm9ybSBlbGVtZW50IG9yIHByZXNzZXMgdGhlIHJldHVybiBrZXkpLlxuICpcbiAqIFRoZSBgbmdDaGFuZ2VgIGV4cHJlc3Npb24gaXMgb25seSBldmFsdWF0ZWQgd2hlbiBhIGNoYW5nZSBpbiB0aGUgaW5wdXQgdmFsdWUgY2F1c2VzXG4gKiBhIG5ldyB2YWx1ZSB0byBiZSBjb21taXR0ZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqIEl0IHdpbGwgbm90IGJlIGV2YWx1YXRlZDpcbiAqICogaWYgdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGAkcGFyc2Vyc2AgdHJhbnNmb3JtYXRpb24gcGlwZWxpbmUgaGFzIG5vdCBjaGFuZ2VkXG4gKiAqIGlmIHRoZSBpbnB1dCBoYXMgY29udGludWVkIHRvIGJlIGludmFsaWQgc2luY2UgdGhlIG1vZGVsIHdpbGwgc3RheSBgbnVsbGBcbiAqICogaWYgdGhlIG1vZGVsIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgbm90IGJ5IGEgY2hhbmdlIHRvIHRoZSBpbnB1dCB2YWx1ZVxuICpcbiAqXG4gKiBOb3RlLCB0aGlzIGRpcmVjdGl2ZSByZXF1aXJlcyBgbmdNb2RlbGAgdG8gYmUgcHJlc2VudC5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoYW5nZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uIGNoYW5nZVxuICogaW4gaW5wdXQgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NoYW5nZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGFuZ2VFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGFuZ2VFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIgPSAwO1xuICogICAgICAgICAgICRzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICRzY29wZS5jb3VudGVyKys7XG4gKiAgICAgICAgICAgfTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBuZy1jaGFuZ2U9XCJjaGFuZ2UoKVwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUxXCIgLz5cbiAqICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbmZpcm1lZFwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUyXCIgLz5cbiAqICAgICAgIDxsYWJlbCBmb3I9XCJuZy1jaGFuZ2UtZXhhbXBsZTJcIj5Db25maXJtZWQ8L2xhYmVsPjxiciAvPlxuICogICAgICAgPHR0PmRlYnVnID0ge3tjb25maXJtZWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgIDx0dD5jb3VudGVyID0ge3tjb3VudGVyfX08L3R0Pjxici8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5iaW5kaW5nKCdjb3VudGVyJykpO1xuICogICAgIHZhciBkZWJ1ZyA9IGVsZW1lbnQoYnkuYmluZGluZygnY29uZmlybWVkJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqXG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTEnKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMScpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgbm90IGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGVsZW1lbnQoYnkuaWQoJ25nLWNoYW5nZS1leGFtcGxlMicpKS5jbGljaygpO1xuXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnQScsXG4gIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICBjdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS4kZXZhbChhdHRyLm5nQ2hhbmdlKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qIGV4cG9ydGVkXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlXG4qL1xuXG5mdW5jdGlvbiBjbGFzc0RpcmVjdGl2ZShuYW1lLCBzZWxlY3Rvcikge1xuICBuYW1lID0gJ25nQ2xhc3MnICsgbmFtZTtcbiAgdmFyIGluZGV4V2F0Y2hFeHByZXNzaW9uO1xuXG4gIHJldHVybiBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0FDJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBjbGFzc0NvdW50cyA9IGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJyk7XG4gICAgICAgIHZhciBvbGRNb2R1bG8gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkQ2xhc3NTdHJpbmc7XG5cbiAgICAgICAgaWYgKCFjbGFzc0NvdW50cykge1xuICAgICAgICAgIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eVxuICAgICAgICAgIC8vIG5hbWVzIGluIE9iamVjdC5wcm90b3R5cGVcbiAgICAgICAgICBjbGFzc0NvdW50cyA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJywgY2xhc3NDb3VudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWUgIT09ICduZ0NsYXNzJykge1xuICAgICAgICAgIGlmICghaW5kZXhXYXRjaEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGluZGV4V2F0Y2hFeHByZXNzaW9uID0gJHBhcnNlKCckaW5kZXgnLCBmdW5jdGlvbiBtb2R1bG9Ud28oJGluZGV4KSB7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgICAgICAgIHJldHVybiAkaW5kZXggJiAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGluZGV4V2F0Y2hFeHByZXNzaW9uLCBuZ0NsYXNzSW5kZXhXYXRjaEFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJbbmFtZV0sIHRvQ2xhc3NTdHJpbmcpLCBuZ0NsYXNzV2F0Y2hBY3Rpb24pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFkZENsYXNzZXMoY2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICBjbGFzc1N0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHNwbGl0KGNsYXNzU3RyaW5nKSwgMSk7XG4gICAgICAgICAgYXR0ci4kYWRkQ2xhc3MoY2xhc3NTdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcyhjbGFzc1N0cmluZykge1xuICAgICAgICAgIGNsYXNzU3RyaW5nID0gZGlnZXN0Q2xhc3NDb3VudHMoc3BsaXQoY2xhc3NTdHJpbmcpLCAtMSk7XG4gICAgICAgICAgYXR0ci4kcmVtb3ZlQ2xhc3MoY2xhc3NTdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ2xhc3NlcyhvbGRDbGFzc1N0cmluZywgbmV3Q2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICB2YXIgb2xkQ2xhc3NBcnJheSA9IHNwbGl0KG9sZENsYXNzU3RyaW5nKTtcbiAgICAgICAgICB2YXIgbmV3Q2xhc3NBcnJheSA9IHNwbGl0KG5ld0NsYXNzU3RyaW5nKTtcblxuICAgICAgICAgIHZhciB0b1JlbW92ZUFycmF5ID0gYXJyYXlEaWZmZXJlbmNlKG9sZENsYXNzQXJyYXksIG5ld0NsYXNzQXJyYXkpO1xuICAgICAgICAgIHZhciB0b0FkZEFycmF5ID0gYXJyYXlEaWZmZXJlbmNlKG5ld0NsYXNzQXJyYXksIG9sZENsYXNzQXJyYXkpO1xuXG4gICAgICAgICAgdmFyIHRvUmVtb3ZlU3RyaW5nID0gZGlnZXN0Q2xhc3NDb3VudHModG9SZW1vdmVBcnJheSwgLTEpO1xuICAgICAgICAgIHZhciB0b0FkZFN0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHRvQWRkQXJyYXksIDEpO1xuXG4gICAgICAgICAgYXR0ci4kYWRkQ2xhc3ModG9BZGRTdHJpbmcpO1xuICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKHRvUmVtb3ZlU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzQXJyYXksIGNvdW50KSB7XG4gICAgICAgICAgdmFyIGNsYXNzZXNUb1VwZGF0ZSA9IFtdO1xuXG4gICAgICAgICAgZm9yRWFjaChjbGFzc0FycmF5LCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDAgfHwgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgICBjbGFzc0NvdW50c1tjbGFzc05hbWVdID0gKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gfHwgMCkgKyBjb3VudDtcbiAgICAgICAgICAgICAgaWYgKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPT09ICsoY291bnQgPiAwKSkge1xuICAgICAgICAgICAgICAgIGNsYXNzZXNUb1VwZGF0ZS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBjbGFzc2VzVG9VcGRhdGUuam9pbignICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc0luZGV4V2F0Y2hBY3Rpb24obmV3TW9kdWxvKSB7XG4gICAgICAgICAgLy8gVGhpcyB3YXRjaC1hY3Rpb24gc2hvdWxkIHJ1biBiZWZvcmUgdGhlIGBuZ0NsYXNzV2F0Y2hBY3Rpb24oKWAsIHRodXMgaXRcbiAgICAgICAgICAvLyBhZGRzL3JlbW92ZXMgYG9sZENsYXNzU3RyaW5nYC4gSWYgdGhlIGBuZ0NsYXNzYCBleHByZXNzaW9uIGhhcyBjaGFuZ2VkIGFzIHdlbGwsIHRoZVxuICAgICAgICAgIC8vIGBuZ0NsYXNzV2F0Y2hBY3Rpb24oKWAgd2lsbCB1cGRhdGUgdGhlIGNsYXNzZXMuXG4gICAgICAgICAgaWYgKG5ld01vZHVsbyA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGFkZENsYXNzZXMob2xkQ2xhc3NTdHJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzc2VzKG9sZENsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvbGRNb2R1bG8gPSBuZXdNb2R1bG87XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuZ0NsYXNzV2F0Y2hBY3Rpb24obmV3Q2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICAvLyBXaGVuIHVzaW5nIGEgb25lLXRpbWUgYmluZGluZyB0aGUgbmV3Q2xhc3NTdHJpbmcgd2lsbCByZXR1cm5cbiAgICAgICAgICAvLyB0aGUgcHJlLWludGVyY2VwdG9yIHZhbHVlIHVudGlsIHRoZSBvbmUtdGltZSBpcyBjb21wbGV0ZVxuICAgICAgICAgIGlmICghaXNTdHJpbmcobmV3Q2xhc3NTdHJpbmcpKSB7XG4gICAgICAgICAgICBuZXdDbGFzc1N0cmluZyA9IHRvQ2xhc3NTdHJpbmcobmV3Q2xhc3NTdHJpbmcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvbGRNb2R1bG8gPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB1cGRhdGVDbGFzc2VzKG9sZENsYXNzU3RyaW5nLCBuZXdDbGFzc1N0cmluZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2xkQ2xhc3NTdHJpbmcgPSBuZXdDbGFzc1N0cmluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4gIC8vIEhlbHBlcnNcbiAgZnVuY3Rpb24gYXJyYXlEaWZmZXJlbmNlKHRva2VuczEsIHRva2VuczIpIHtcbiAgICBpZiAoIXRva2VuczEgfHwgIXRva2VuczEubGVuZ3RoKSByZXR1cm4gW107XG4gICAgaWYgKCF0b2tlbnMyIHx8ICF0b2tlbnMyLmxlbmd0aCkgcmV0dXJuIHRva2VuczE7XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBvdXRlcjpcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHRva2VuID09PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjtcbiAgICAgIH1cbiAgICAgIHZhbHVlcy5wdXNoKHRva2VuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gc3BsaXQoY2xhc3NTdHJpbmcpIHtcbiAgICByZXR1cm4gY2xhc3NTdHJpbmcgJiYgY2xhc3NTdHJpbmcuc3BsaXQoJyAnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvQ2xhc3NTdHJpbmcoY2xhc3NWYWx1ZSkge1xuICAgIHZhciBjbGFzc1N0cmluZyA9IGNsYXNzVmFsdWU7XG5cbiAgICBpZiAoaXNBcnJheShjbGFzc1ZhbHVlKSkge1xuICAgICAgY2xhc3NTdHJpbmcgPSBjbGFzc1ZhbHVlLm1hcCh0b0NsYXNzU3RyaW5nKS5qb2luKCcgJyk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChjbGFzc1ZhbHVlKSkge1xuICAgICAgY2xhc3NTdHJpbmcgPSBPYmplY3Qua2V5cyhjbGFzc1ZhbHVlKS5cbiAgICAgICAgZmlsdGVyKGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gY2xhc3NWYWx1ZVtrZXldOyB9KS5cbiAgICAgICAgam9pbignICcpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc1N0cmluZztcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBkeW5hbWljYWxseSBzZXQgQ1NTIGNsYXNzZXMgb24gYW4gSFRNTCBlbGVtZW50IGJ5IGRhdGFiaW5kaW5nXG4gKiBhbiBleHByZXNzaW9uIHRoYXQgcmVwcmVzZW50cyBhbGwgY2xhc3NlcyB0byBiZSBhZGRlZC5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIG9wZXJhdGVzIGluIHRocmVlIGRpZmZlcmVudCB3YXlzLCBkZXBlbmRpbmcgb24gd2hpY2ggb2YgdGhyZWUgdHlwZXMgdGhlIGV4cHJlc3Npb25cbiAqIGV2YWx1YXRlcyB0bzpcbiAqXG4gKiAxLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZSBzdHJpbmcgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzc1xuICogbmFtZXMuXG4gKlxuICogMi4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIG9iamVjdCwgdGhlbiBmb3IgZWFjaCBrZXktdmFsdWUgcGFpciBvZiB0aGVcbiAqIG9iamVjdCB3aXRoIGEgdHJ1dGh5IHZhbHVlIHRoZSBjb3JyZXNwb25kaW5nIGtleSBpcyB1c2VkIGFzIGEgY2xhc3MgbmFtZS5cbiAqXG4gKiAzLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gYXJyYXksIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkgc2hvdWxkIGVpdGhlciBiZSBhIHN0cmluZyBhcyBpblxuICogdHlwZSAxIG9yIGFuIG9iamVjdCBhcyBpbiB0eXBlIDIuIFRoaXMgbWVhbnMgdGhhdCB5b3UgY2FuIG1peCBzdHJpbmdzIGFuZCBvYmplY3RzIHRvZ2V0aGVyIGluIGFuIGFycmF5XG4gKiB0byBnaXZlIHlvdSBtb3JlIGNvbnRyb2wgb3ZlciB3aGF0IENTUyBjbGFzc2VzIGFwcGVhci4gU2VlIHRoZSBjb2RlIGJlbG93IGZvciBhbiBleGFtcGxlIG9mIHRoaXMuXG4gKlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuXG4gKlxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gYXJlIHRoZVxuICogbmV3IGNsYXNzZXMgYWRkZWQuXG4gKlxuICogQGtub3duSXNzdWVcbiAqIFlvdSBzaG91bGQgbm90IHVzZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9ufSBpbiB0aGUgdmFsdWUgb2YgdGhlIGBjbGFzc2BcbiAqIGF0dHJpYnV0ZSwgd2hlbiB1c2luZyB0aGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50LlxuICogU2VlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uI2tub3duLWlzc3VlcyBoZXJlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2FkZENsYXNzIGFkZENsYXNzfSAgICAgICB8IGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50ICAgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgcmVtb3ZlQ2xhc3N9IHwganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCB8XG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzc1xuICogICBuYW1lcywgYW4gYXJyYXksIG9yIGEgbWFwIG9mIGNsYXNzIG5hbWVzIHRvIGJvb2xlYW4gdmFsdWVzLiBJbiB0aGUgY2FzZSBvZiBhIG1hcCwgdGhlXG4gKiAgIG5hbWVzIG9mIHRoZSBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlcyBhcmUgdHJ1dGh5IHdpbGwgYmUgYWRkZWQgYXMgY3NzIGNsYXNzZXMgdG8gdGhlXG4gKiAgIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGUgRXhhbXBsZSB0aGF0IGRlbW9uc3RyYXRlcyBiYXNpYyBiaW5kaW5ncyB2aWEgbmdDbGFzcyBkaXJlY3RpdmUuXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3NcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIntzdHJpa2U6IGRlbGV0ZWQsIGJvbGQ6IGltcG9ydGFudCwgJ2hhcy1lcnJvcic6IGVycm9yfVwiPk1hcCBTeW50YXggRXhhbXBsZTwvcD5cbiAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiZGVsZXRlZFwiPlxuICAgICAgICAgIGRlbGV0ZWQgKGFwcGx5IFwic3RyaWtlXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImltcG9ydGFudFwiPlxuICAgICAgICAgIGltcG9ydGFudCAoYXBwbHkgXCJib2xkXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImVycm9yXCI+XG4gICAgICAgICAgZXJyb3IgKGFwcGx5IFwiaGFzLWVycm9yXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJzdHlsZVwiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzdHlsZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCBzdHJpa2UgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIltzdHlsZTEsIHN0eWxlMiwgc3R5bGUzXVwiPlVzaW5nIEFycmF5IFN5bnRheDwvcD5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTFcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTJcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAyXCI+PGJyPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlM1wiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIDNcIj48YnI+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwiW3N0eWxlNCwge29yYW5nZTogd2FybmluZ31dXCI+VXNpbmcgQXJyYXkgYW5kIE1hcCBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGU0XCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2VcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlXCI+PGJyPlxuICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJ3YXJuaW5nXCI+IHdhcm5pbmcgKGFwcGx5IFwib3JhbmdlXCIgY2xhc3MpPC9sYWJlbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLnN0cmlrZSB7XG4gICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuICAgICAgIH1cbiAgICAgICAuYm9sZCB7XG4gICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgIH1cbiAgICAgICAucmVkIHtcbiAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICB9XG4gICAgICAgLmhhcy1lcnJvciB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcbiAgICAgICB9XG4gICAgICAgLm9yYW5nZSB7XG4gICAgICAgICAgIGNvbG9yOiBvcmFuZ2U7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgcHMgPSBlbGVtZW50LmFsbChieS5jc3MoJ3AnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHRoZSBjbGFzcycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9ib2xkLyk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9oYXMtZXJyb3IvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnaW1wb3J0YW50JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2JvbGQvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnZXJyb3InKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvaGFzLWVycm9yLyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHN0cmluZyBleGFtcGxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ3JlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IGV4YW1wbGUgc2hvdWxkIGhhdmUgMyBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDIpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTEnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMicpKS5zZW5kS2V5cygnc3RyaWtlJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTMnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgyKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ2JvbGQgc3RyaWtlIHJlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IHdpdGggbWFwIGV4YW1wbGUgc2hvdWxkIGhhdmUgMiBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTQnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3dhcm5pbmcnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIG9yYW5nZScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cbiAgICMjIEFuaW1hdGlvbnNcblxuICAgVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgbmdDbGFzcy5cblxuICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWNsYXNzXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJzZXRidG5cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXRcIiBuZy1jbGljaz1cIm15VmFyPSdteS1jbGFzcydcIj5cbiAgICAgIDxpbnB1dCBpZD1cImNsZWFyYnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15VmFyPScnXCI+XG4gICAgICA8YnI+XG4gICAgICA8c3BhbiBjbGFzcz1cImJhc2UtY2xhc3NcIiBuZy1jbGFzcz1cIm15VmFyXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5iYXNlLWNsYXNzIHtcbiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICB9XG5cbiAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgZm9udC1zaXplOjNlbTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ3NldGJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2NsZWFyYnRuJykpLmNsaWNrKCk7XG5cbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cblxuXG4gICAjIyBuZ0NsYXNzIGFuZCBwcmUtZXhpc3RpbmcgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zXG4gICBUaGUgbmdDbGFzcyBkaXJlY3RpdmUgc3RpbGwgc3VwcG9ydHMgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIGV2ZW4gaWYgdGhleSBkbyBub3QgZm9sbG93IHRoZSBuZ0FuaW1hdGUgQ1NTIG5hbWluZyBzdHJ1Y3R1cmUuXG4gICBVcG9uIGFuaW1hdGlvbiBuZ0FuaW1hdGUgd2lsbCBhcHBseSBzdXBwbGVtZW50YXJ5IENTUyBjbGFzc2VzIHRvIHRyYWNrIHRoZSBzdGFydCBhbmQgZW5kIG9mIGFuIGFuaW1hdGlvbiwgYnV0IHRoaXMgd2lsbCBub3QgaGluZGVyXG4gICBhbnkgcHJlLWV4aXN0aW5nIENTUyB0cmFuc2l0aW9ucyBhbHJlYWR5IG9uIHRoZSBlbGVtZW50LiBUbyBnZXQgYW4gaWRlYSBvZiB3aGF0IGhhcHBlbnMgZHVyaW5nIGEgY2xhc3MtYmFzZWQgYW5pbWF0aW9uLCBiZSBzdXJlXG4gICB0byB2aWV3IHRoZSBzdGVwIGJ5IHN0ZXAgZGV0YWlscyBvZiB7QGxpbmsgJGFuaW1hdGUjYWRkQ2xhc3MgJGFuaW1hdGUuYWRkQ2xhc3N9IGFuZFxuICAge0BsaW5rICRhbmltYXRlI3JlbW92ZUNsYXNzICRhbmltYXRlLnJlbW92ZUNsYXNzfS5cbiAqL1xudmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc09kZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc09kZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XG4gKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3Mtb2RkXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICogICByZXN1bHQgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jbGFzcy1ldmVuXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Nsb2FrXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGlzIHVzZWQgdG8gcHJldmVudCB0aGUgQW5ndWxhciBodG1sIHRlbXBsYXRlIGZyb20gYmVpbmcgYnJpZWZseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgKHVuY29tcGlsZWQpIGZvcm0gd2hpbGUgeW91ciBhcHBsaWNhdGlvbiBpcyBsb2FkaW5nLiBVc2UgdGhpc1xuICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBgPGJvZHk+YCBlbGVtZW50LCBidXQgdGhlIHByZWZlcnJlZCB1c2FnZSBpcyB0byBhcHBseVxuICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZ1xuICogb2YgdGhlIGJyb3dzZXIgdmlldy5cbiAqXG4gKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kXG4gKiBgYW5ndWxhci5taW4uanNgLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgY3NzXG4gKiBbbmdcXDpjbG9ha10sIFtuZy1jbG9ha10sIFtkYXRhLW5nLWNsb2FrXSwgW3gtbmctY2xvYWtdLCAubmctY2xvYWssIC54LW5nLWNsb2FrIHtcbiAqICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdFxuICogYXJlIHRhZ2dlZCB3aXRoIHRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBlbmNvdW50ZXJzIHRoaXMgZGlyZWN0aXZlXG4gKiBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSBpdCBkZWxldGVzIHRoZSBgbmdDbG9ha2AgZWxlbWVudCBhdHRyaWJ1dGUsIG1ha2luZ1xuICogdGhlIGNvbXBpbGVkIGVsZW1lbnQgdmlzaWJsZS5cbiAqXG4gKiBGb3IgdGhlIGJlc3QgcmVzdWx0LCB0aGUgYGFuZ3VsYXIuanNgIHNjcmlwdCBtdXN0IGJlIGxvYWRlZCBpbiB0aGUgaGVhZCBzZWN0aW9uIG9mIHRoZSBodG1sXG4gKiBkb2N1bWVudDsgYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIGFib3ZlIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV4dGVybmFsIHN0eWxlc2hlZXQgb2YgdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsb2FrXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTFcIiBuZy1jbG9haz57eyAnaGVsbG8nIH19PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTJcIiBjbGFzcz1cIm5nLWNsb2FrXCI+e3sgJ3dvcmxkJyB9fTwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIHJlbW92ZSB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlIGFuZCBjc3MgY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUxJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUyJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xudmFyIG5nQ2xvYWtEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICBhdHRyLiRzZXQoJ25nQ2xvYWsnLCB1bmRlZmluZWQpO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWNsb2FrJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ29udHJvbGxlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBhdHRhY2hlcyBhIGNvbnRyb2xsZXIgY2xhc3MgdG8gdGhlIHZpZXcuIFRoaXMgaXMgYSBrZXkgYXNwZWN0IG9mIGhvdyBhbmd1bGFyXG4gKiBzdXBwb3J0cyB0aGUgcHJpbmNpcGxlcyBiZWhpbmQgdGhlIE1vZGVsLVZpZXctQ29udHJvbGxlciBkZXNpZ24gcGF0dGVybi5cbiAqXG4gKiBNVkMgY29tcG9uZW50cyBpbiBhbmd1bGFyOlxuICpcbiAqICogTW9kZWwg4oCUIE1vZGVscyBhcmUgdGhlIHByb3BlcnRpZXMgb2YgYSBzY29wZTsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NIHdoZXJlIHNjb3BlIHByb3BlcnRpZXNcbiAqICAgYXJlIGFjY2Vzc2VkIHRocm91Z2ggYmluZGluZ3MuXG4gKiAqIFZpZXcg4oCUIFRoZSB0ZW1wbGF0ZSAoSFRNTCB3aXRoIGRhdGEgYmluZGluZ3MpIHRoYXQgaXMgcmVuZGVyZWQgaW50byB0aGUgVmlldy5cbiAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgY29udGFpbnMgYnVzaW5lc3NcbiAqICAgbG9naWMgYmVoaW5kIHRoZSBhcHBsaWNhdGlvbiB0byBkZWNvcmF0ZSB0aGUgc2NvcGUgd2l0aCBmdW5jdGlvbnMgYW5kIHZhbHVlc1xuICpcbiAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYXR0YWNoIGNvbnRyb2xsZXJzIHRvIHRoZSBET00gYnkgZGVjbGFyaW5nIGl0IGluIGEgcm91dGUgZGVmaW5pdGlvblxuICogdmlhIHRoZSB7QGxpbmsgbmdSb3V0ZS4kcm91dGUgJHJvdXRlfSBzZXJ2aWNlLiBBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIGRlY2xhcmUgdGhlIGNvbnRyb2xsZXJcbiAqIGFnYWluIHVzaW5nIGBuZy1jb250cm9sbGVyYCBpbiB0aGUgdGVtcGxhdGUgaXRzZWxmLiAgVGhpcyB3aWxsIGNhdXNlIHRoZSBjb250cm9sbGVyIHRvIGJlIGF0dGFjaGVkXG4gKiBhbmQgZXhlY3V0ZWQgdHdpY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA1MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb250cm9sbGVyIE5hbWUgb2YgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIGN1cnJlbnRcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyICRjb250cm9sbGVyUHJvdmlkZXJ9IG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XG4gKiB0aGF0IG9uIHRoZSBjdXJyZW50IHNjb3BlIGV2YWx1YXRlcyB0byBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIFRoZSBjb250cm9sbGVyIGluc3RhbmNlIGNhbiBiZSBwdWJsaXNoZWQgaW50byBhIHNjb3BlIHByb3BlcnR5IGJ5IHNwZWNpZnlpbmdcbiAqIGBuZy1jb250cm9sbGVyPVwiYXMgcHJvcGVydHlOYW1lXCJgLlxuICpcbiAqIElmIHRoZSBjdXJyZW50IGAkY29udHJvbGxlclByb3ZpZGVyYCBpcyBjb25maWd1cmVkIHRvIHVzZSBnbG9iYWxzICh2aWFcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscyBgJGNvbnRyb2xsZXJQcm92aWRlci5hbGxvd0dsb2JhbHMoKWAgfSksIHRoaXMgbWF5XG4gKiBhbHNvIGJlIHRoZSBuYW1lIG9mIGEgZ2xvYmFsbHkgYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiAoZGVwcmVjYXRlZCwgbm90IHJlY29tbWVuZGVkKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhIHNpbXBsZSBmb3JtIGZvciBlZGl0aW5nIHVzZXIgY29udGFjdCBpbmZvcm1hdGlvbi4gQWRkaW5nLCByZW1vdmluZywgY2xlYXJpbmcsIGFuZFxuICogZ3JlZXRpbmcgYXJlIG1ldGhvZHMgZGVjbGFyZWQgb24gdGhlIGNvbnRyb2xsZXIgKHNlZSBzb3VyY2UgdGFiKS4gVGhlc2UgbWV0aG9kcyBjYW5cbiAqIGVhc2lseSBiZSBjYWxsZWQgZnJvbSB0aGUgYW5ndWxhciBtYXJrdXAuIEFueSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZFxuICogaW4gdGhlIFZpZXcgd2l0aG91dCB0aGUgbmVlZCBmb3IgYSBtYW51YWwgdXBkYXRlLlxuICpcbiAqIFR3byBkaWZmZXJlbnQgZGVjbGFyYXRpb24gc3R5bGVzIGFyZSBpbmNsdWRlZCBiZWxvdzpcbiAqXG4gKiAqIG9uZSBiaW5kcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGRpcmVjdGx5IG9udG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgYHRoaXNgOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzXCJgXG4gKiAqIG9uZSBpbmplY3RzIGAkc2NvcGVgIGludG8gdGhlIGNvbnRyb2xsZXI6XG4gKiBgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcImBcbiAqXG4gKiBUaGUgc2Vjb25kIG9wdGlvbiBpcyBtb3JlIGNvbW1vbiBpbiB0aGUgQW5ndWxhciBjb21tdW5pdHksIGFuZCBpcyBnZW5lcmFsbHkgdXNlZCBpbiBib2lsZXJwbGF0ZXNcbiAqIGFuZCBpbiB0aGlzIGd1aWRlLiBIb3dldmVyLCB0aGVyZSBhcmUgYWR2YW50YWdlcyB0byBiaW5kaW5nIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXJcbiAqIGFuZCBhdm9pZGluZyBzY29wZS5cbiAqXG4gKiAqIFVzaW5nIGBjb250cm9sbGVyIGFzYCBtYWtlcyBpdCBvYnZpb3VzIHdoaWNoIGNvbnRyb2xsZXIgeW91IGFyZSBhY2Nlc3NpbmcgaW4gdGhlIHRlbXBsYXRlIHdoZW5cbiAqIG11bHRpcGxlIGNvbnRyb2xsZXJzIGFwcGx5IHRvIGFuIGVsZW1lbnQuXG4gKiAqIElmIHlvdSBhcmUgd3JpdGluZyB5b3VyIGNvbnRyb2xsZXJzIGFzIGNsYXNzZXMgeW91IGhhdmUgZWFzaWVyIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBhbmRcbiAqIG1ldGhvZHMsIHdoaWNoIHdpbGwgYXBwZWFyIG9uIHRoZSBzY29wZSwgZnJvbSBpbnNpZGUgdGhlIGNvbnRyb2xsZXIgY29kZS5cbiAqICogU2luY2UgdGhlcmUgaXMgYWx3YXlzIGEgYC5gIGluIHRoZSBiaW5kaW5ncywgeW91IGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgcHJvdG90eXBhbFxuICogaW5oZXJpdGFuY2UgbWFza2luZyBwcmltaXRpdmVzLlxuICpcbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIGBjb250cm9sbGVyIGFzYCBzeW50YXguXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlckFzXCIgbW9kdWxlPVwiY29udHJvbGxlckFzRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGRpdiBpZD1cImN0cmwtYXMtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiPlxuICogICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZXR0aW5ncy5uYW1lXCIvPjwvbGFiZWw+XG4gKiAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5ncmVldCgpXCI+Z3JlZXQ8L2J1dHRvbj48YnIvPlxuICogICAgICBDb250YWN0OlxuICogICAgICA8dWw+XG4gKiAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHNcIj5cbiAqICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBhcmlhLWxhYmVsPVwiQ29udGFjdCBtZXRob2RcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XG4gKiAgICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29udGFjdC52YWx1ZVwiIGFyaWEtbGFiZWxsZWRieT1cInNlbGVjdF97eyRpbmRleH19XCIgLz5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5jbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYnV0dG9uPlxuICogICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNldHRpbmdzLnJlbW92ZUNvbnRhY3QoY29udGFjdClcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICogICAgICAgIDwvbGk+XG4gKiAgICAgICAgPGxpPjxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5hZGRDb250YWN0KClcIj5hZGQ8L2J1dHRvbj48L2xpPlxuICogICAgIDwvdWw+XG4gKiAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckFzRXhhbXBsZScsIFtdKVxuICogICAgICAuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyMScsIFNldHRpbmdzQ29udHJvbGxlcjEpO1xuICpcbiAqICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjEoKSB7XG4gKiAgICAgIHRoaXMubmFtZSA9ICdKb2huIFNtaXRoJztcbiAqICAgICAgdGhpcy5jb250YWN0cyA9IFtcbiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAqICAgICAgICB7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICdqb2huLnNtaXRoQGV4YW1wbGUub3JnJ31cbiAqICAgICAgXTtcbiAqICAgIH1cbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgfTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1hcy1leG1wbCcpKTtcbiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKlxuICogICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJycpO1xuICpcbiAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBcImF0dGFjaCB0byBgJHNjb3BlYFwiIHN0eWxlIG9mIGNvbnRyb2xsZXIuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBpZD1cImN0cmwtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiPlxuICogICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+PC9sYWJlbD5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICBDb250YWN0OlxuICogICAgIDx1bD5cbiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIgYXJpYS1sYWJlbGxlZGJ5PVwic2VsZWN0X3t7JGluZGV4fX1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlbW92ZUNvbnRhY3QoY29udGFjdClcIj5YPC9idXR0b24+XG4gKiAgICAgICA8L2xpPlxuICogICAgICAgPGxpPlsgPGJ1dHRvbiBuZy1jbGljaz1cImFkZENvbnRhY3QoKVwiPmFkZDwvYnV0dG9uPiBdPC9saT5cbiAqICAgIDwvdWw+XG4gKiAgIDwvZGl2PlxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7XG4gKlxuICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICogICAgICRzY29wZS5uYW1lID0gJ0pvaG4gU21pdGgnO1xuICogICAgICRzY29wZS5jb250YWN0cyA9IFtcbiAqICAgICAgIHt0eXBlOidwaG9uZScsIHZhbHVlOic0MDggNTU1IDEyMTInfSxcbiAqICAgICAgIHt0eXBlOidlbWFpbCcsIHZhbHVlOidqb2huLnNtaXRoQGV4YW1wbGUub3JnJ31cbiAqICAgICBdO1xuICpcbiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgIGFsZXJ0KCRzY29wZS5uYW1lKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICAgfTtcbiAqICAgfVxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtZXhtcGwnKSk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICogICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgIH0pO1xuICogIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuXG4gKi9cbnZhciBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUgPSBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnQCcsXG4gICAgcHJpb3JpdHk6IDUwMFxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDc3BcbiAqXG4gKiBAcmVzdHJpY3QgQVxuICogQGVsZW1lbnQgQU5ZXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBbmd1bGFyIGhhcyBzb21lIGZlYXR1cmVzIHRoYXQgY2FuIGNvbmZsaWN0IHdpdGggY2VydGFpbiByZXN0cmljdGlvbnMgdGhhdCBhcmUgYXBwbGllZCB3aGVuIHVzaW5nXG4gKiBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgcnVsZXMuXG4gKlxuICogSWYgeW91IGludGVuZCB0byBpbXBsZW1lbnQgQ1NQIHdpdGggdGhlc2UgcnVsZXMgdGhlbiB5b3UgbXVzdCB0ZWxsIEFuZ3VsYXIgbm90IHRvIHVzZSB0aGVzZVxuICogZmVhdHVyZXMuXG4gKlxuICogVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBkZXZlbG9waW5nIHRoaW5ncyBsaWtlIEdvb2dsZSBDaHJvbWUgRXh0ZW5zaW9ucyBvciBVbml2ZXJzYWwgV2luZG93cyBBcHBzLlxuICpcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGRlZmF1bHQgcnVsZXMgaW4gQ1NQIGFmZmVjdCBBbmd1bGFyOlxuICpcbiAqICogVGhlIHVzZSBvZiBgZXZhbCgpYCwgYEZ1bmN0aW9uKHN0cmluZylgIGFuZCBzaW1pbGFyIGZ1bmN0aW9ucyB0byBkeW5hbWljYWxseSBjcmVhdGUgYW5kIGV4ZWN1dGVcbiAqIGNvZGUgZnJvbSBzdHJpbmdzIGlzIGZvcmJpZGRlbi4gQW5ndWxhciBtYWtlcyB1c2Ugb2YgdGhpcyBpbiB0aGUge0BsaW5rICRwYXJzZX0gc2VydmljZSB0b1xuICogcHJvdmlkZSBhIDMwJSBpbmNyZWFzZSBpbiB0aGUgc3BlZWQgb2YgZXZhbHVhdGluZyBBbmd1bGFyIGV4cHJlc3Npb25zLiAoVGhpcyBDU1AgcnVsZSBjYW4gYmVcbiAqIGRpc2FibGVkIHdpdGggdGhlIENTUCBrZXl3b3JkIGB1bnNhZmUtZXZhbGAsIGJ1dCBpdCBpcyBnZW5lcmFsbHkgbm90IHJlY29tbWVuZGVkIGFzIGl0IHdvdWxkXG4gKiB3ZWFrZW4gdGhlIHByb3RlY3Rpb25zIG9mZmVyZWQgYnkgQ1NQLilcbiAqXG4gKiAqIFRoZSB1c2Ugb2YgaW5saW5lIHJlc291cmNlcywgc3VjaCBhcyBpbmxpbmUgYDxzY3JpcHQ+YCBhbmQgYDxzdHlsZT5gIGVsZW1lbnRzLCBhcmUgZm9yYmlkZGVuLlxuICogVGhpcyBwcmV2ZW50cyBhcHBzIGZyb20gaW5qZWN0aW5nIGN1c3RvbSBzdHlsZXMgZGlyZWN0bHkgaW50byB0aGUgZG9jdW1lbnQuIEFuZ3VsYXIgbWFrZXMgdXNlIG9mXG4gKiB0aGlzIHRvIGluY2x1ZGUgc29tZSBDU1MgcnVsZXMgKGUuZy4ge0BsaW5rIG5nQ2xvYWt9IGFuZCB7QGxpbmsgbmdIaWRlfSkuIFRvIG1ha2UgdGhlc2VcbiAqIGRpcmVjdGl2ZXMgd29yayB3aGVuIGEgQ1NQIHJ1bGUgaXMgYmxvY2tpbmcgaW5saW5lIHN0eWxlcywgeW91IG11c3QgbGluayB0byB0aGUgYGFuZ3VsYXItY3NwLmNzc2BcbiAqIGluIHlvdXIgSFRNTCBtYW51YWxseS4gKFRoaXMgQ1NQIHJ1bGUgY2FuIGJlIGRpc2FibGVkIHdpdGggdGhlIENTUCBrZXl3b3JkIGB1bnNhZmUtaW5saW5lYCwgYnV0XG4gKiBpdCBpcyBnZW5lcmFsbHkgbm90IHJlY29tbWVuZGVkIGFzIGl0IHdvdWxkIHdlYWtlbiB0aGUgcHJvdGVjdGlvbnMgb2ZmZXJlZCBieSBDU1AuKVxuICpcbiAqIElmIHlvdSBkbyBub3QgcHJvdmlkZSBgbmdDc3BgIHRoZW4gQW5ndWxhciB0cmllcyB0byBhdXRvZGV0ZWN0IGlmIENTUCBpcyBibG9ja2luZyBkeW5hbWljIGNvZGVcbiAqIGNyZWF0aW9uIGZyb20gc3RyaW5ncyAoZS5nLiwgYHVuc2FmZS1ldmFsYCBub3Qgc3BlY2lmaWVkIGluIENTUCBoZWFkZXIpIGFuZCBhdXRvbWF0aWNhbGx5XG4gKiBkZWFjdGl2YXRlcyB0aGlzIGZlYXR1cmUgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UuIFRoaXMgYXV0b2RldGVjdGlvbiwgaG93ZXZlciwgdHJpZ2dlcnMgYVxuICogQ1NQIGVycm9yIHRvIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZTpcbiAqXG4gKiBgYGBcbiAqIFJlZnVzZWQgdG8gZXZhbHVhdGUgYSBzdHJpbmcgYXMgSmF2YVNjcmlwdCBiZWNhdXNlICd1bnNhZmUtZXZhbCcgaXMgbm90IGFuIGFsbG93ZWQgc291cmNlIG9mXG4gKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIuIE5vdGUgdGhhdFxuICogJ3NjcmlwdC1zcmMnIHdhcyBub3QgZXhwbGljaXRseSBzZXQsIHNvICdkZWZhdWx0LXNyYycgaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxuICogYGBgXG4gKlxuICogVGhpcyBlcnJvciBpcyBoYXJtbGVzcyBidXQgYW5ub3lpbmcuIFRvIHByZXZlbnQgdGhlIGVycm9yIGZyb20gc2hvd2luZyB1cCwgcHV0IHRoZSBgbmdDc3BgXG4gKiBkaXJlY3RpdmUgb24gYW4gZWxlbWVudCBvZiB0aGUgSFRNTCBkb2N1bWVudCB0aGF0IGFwcGVhcnMgYmVmb3JlIHRoZSBgPHNjcmlwdD5gIHRhZyB0aGF0IGxvYWRzXG4gKiB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuXG4gKlxuICogKk5vdGU6IFRoaXMgZGlyZWN0aXZlIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBgbmctY3NwYCBhbmQgYGRhdGEtbmctY3NwYCBhdHRyaWJ1dGUgZm9ybS4qXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHdoaWNoIG9mIHRoZSBDU1AgcmVsYXRlZCBBbmd1bGFyIGZlYXR1cmVzIHNob3VsZCBiZSBkZWFjdGl2YXRlZCBieSBwcm92aWRpbmdcbiAqIGEgdmFsdWUgZm9yIHRoZSBgbmctY3NwYCBhdHRyaWJ1dGUuIFRoZSBvcHRpb25zIGFyZSBhcyBmb2xsb3dzOlxuICpcbiAqICogbm8taW5saW5lLXN0eWxlOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBpbmplY3RpbmcgQ1NTIHN0eWxlcyBpbnRvIHRoZSBET01cbiAqXG4gKiAqIG5vLXVuc2FmZS1ldmFsOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBvcHRpbWl6aW5nICRwYXJzZSB3aXRoIHVuc2FmZSBldmFsIG9mIHN0cmluZ3NcbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGVzZSB2YWx1ZXMgaW4gdGhlIGZvbGxvd2luZyBjb21iaW5hdGlvbnM6XG4gKlxuICpcbiAqICogTm8gZGVjbGFyYXRpb24gbWVhbnMgdGhhdCBBbmd1bGFyIHdpbGwgYXNzdW1lIHRoYXQgeW91IGNhbiBkbyBpbmxpbmUgc3R5bGVzLCBidXQgaXQgd2lsbCBkb1xuICogYSBydW50aW1lIGNoZWNrIGZvciB1bnNhZmUtZXZhbC4gRS5nLiBgPGJvZHk+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91c1xuICogdmVyc2lvbnMgb2YgQW5ndWxhci5cbiAqXG4gKiAqIEEgc2ltcGxlIGBuZy1jc3BgIChvciBgZGF0YS1uZy1jc3BgKSBhdHRyaWJ1dGUgd2lsbCB0ZWxsIEFuZ3VsYXIgdG8gZGVhY3RpdmF0ZSBib3RoIGlubGluZVxuICogc3R5bGVzIGFuZCB1bnNhZmUgZXZhbC4gRS5nLiBgPGJvZHkgbmctY3NwPmAuIFRoaXMgaXMgYmFja3dhcmRseSBjb21wYXRpYmxlIHdpdGggcHJldmlvdXNcbiAqIHZlcnNpb25zIG9mIEFuZ3VsYXIuXG4gKlxuICogKiBTcGVjaWZ5aW5nIG9ubHkgYG5vLXVuc2FmZS1ldmFsYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgdXNlIGV2YWwsIGJ1dCB0aGF0IHdlIGNhblxuICogaW5qZWN0IGlubGluZSBzdHlsZXMuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLXVuc2FmZS1ldmFsXCI+YC5cbiAqXG4gKiAqIFNwZWNpZnlpbmcgb25seSBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0IHN0eWxlcywgYnV0IHRoYXQgd2UgY2FuXG4gKiBydW4gZXZhbCAtIG5vIGF1dG9tYXRpYyBjaGVjayBmb3IgdW5zYWZlIGV2YWwgd2lsbCBvY2N1ci4gRS5nLiBgPGJvZHkgbmctY3NwPVwibm8taW5saW5lLXN0eWxlXCI+YFxuICpcbiAqICogU3BlY2lmeWluZyBib3RoIGBuby11bnNhZmUtZXZhbGAgYW5kIGBuby1pbmxpbmUtc3R5bGVgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCBpbmplY3RcbiAqIHN0eWxlcyBub3IgdXNlIGV2YWwsIHdoaWNoIGlzIHRoZSBzYW1lIGFzIGFuIGVtcHR5OiBuZy1jc3AuXG4gKiBFLmcuYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZTtuby11bnNhZmUtZXZhbFwiPmBcbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gICBgYGBodG1sXG4gICAgIDwhZG9jdHlwZSBodG1sPlxuICAgICA8aHRtbCBuZy1hcHAgbmctY3NwPlxuICAgICAuLi5cbiAgICAgLi4uXG4gICAgIDwvaHRtbD5cbiAgIGBgYFxuICAqIEBleGFtcGxlXG4gICAgICA8IS0tIE5vdGU6IHRoZSBgLmNzcGAgc3VmZml4IGluIHRoZSBleGFtcGxlIG5hbWUgdHJpZ2dlcnMgQ1NQIG1vZGUgaW4gb3VyIGh0dHAgc2VydmVyISAtLT5cbiAgICAgIDxleGFtcGxlIG5hbWU9XCJleGFtcGxlLmNzcFwiIG1vZHVsZT1cImNzcEV4YW1wbGVcIiBuZy1jc3A9XCJ0cnVlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkNvbnRyb2xsZXIgYXMgY3RybFwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImN0cmwuaW5jKClcIiBpZD1cImluY1wiPkluY3JlbWVudDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBpZD1cImNvdW50ZXJcIj5cbiAgICAgICAgICAgICAgICB7e2N0cmwuY291bnRlcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5ldmlsKClcIiBpZD1cImV2aWxcIj5FdmlsPC9idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGlkPVwiZXZpbEVycm9yXCI+XG4gICAgICAgICAgICAgICAge3tjdHJsLmV2aWxFcnJvcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NzcEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuZXZpbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXZhbCgnMSsyJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2aWxFcnJvciA9IGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHV0aWwsIHdlYmRyaXZlcjtcblxuICAgICAgICAgIHZhciBpbmNCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbmMnKSk7XG4gICAgICAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmlkKCdjb3VudGVyJykpO1xuICAgICAgICAgIHZhciBldmlsQnRuID0gZWxlbWVudChieS5pZCgnZXZpbCcpKTtcbiAgICAgICAgICB2YXIgZXZpbEVycm9yID0gZWxlbWVudChieS5pZCgnZXZpbEVycm9yJykpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5tYW5hZ2UoKS5sb2dzKCkuZ2V0KCdicm93c2VyJykudGhlbihmdW5jdGlvbihicm93c2VyTG9nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBicm93c2VyTG9nLmZpbHRlcihmdW5jdGlvbihsb2dFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dFbnRyeS5sZXZlbC52YWx1ZSA+IHdlYmRyaXZlci5sb2dnaW5nLkxldmVsLldBUk5JTkcudmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7XG4gICAgICAgICAgICBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdE5vRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChmaWx0ZXJlZExvZy5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgICAgIGlmIChmaWx0ZXJlZExvZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYnJvd3NlciBjb25zb2xlIGVycm9yczogJyArIHV0aWwuaW5zcGVjdChmaWx0ZXJlZExvZykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3RFcnJvcihyZWdleCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBmaWx0ZXJlZExvZy5mb3JFYWNoKGZ1bmN0aW9uKGxvZykge1xuICAgICAgICAgICAgICAgIGlmIChsb2cubWVzc2FnZS5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBhbiBlcnJvciB0aGF0IG1hdGNoZXMgJyArIHJlZ2V4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4gICAgICAgICAgICB3ZWJkcml2ZXIgPSByZXF1aXJlKCdzZWxlbml1bS13ZWJkcml2ZXInKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEZvciBub3csIHdlIG9ubHkgdGVzdCBvbiBDaHJvbWUsXG4gICAgICAgICAgLy8gYXMgU2FmYXJpIGRvZXMgbm90IGxvYWQgdGhlIHBhZ2Ugd2l0aCBQcm90cmFjdG9yJ3MgaW5qZWN0ZWQgc2NyaXB0cyxcbiAgICAgICAgICAvLyBhbmQgRmlyZWZveCB3ZWJkcml2ZXIgYWx3YXlzIGRpc2FibGVzIGNvbnRlbnQgc2VjdXJpdHkgcG9saWN5ICgjNjM1OClcbiAgICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciAhPT0gJ2Nocm9tZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjbGVhciBlcnJvcnMgc28gd2UgYXJlIG5vdCBkZXBlbmRlbnQgb24gcHJldmlvdXMgdGVzdHNcbiAgICAgICAgICAgIGNsZWFyRXJyb3JzKCk7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSBhcyB0aGUgcGFnZSBpcyBhbHJlYWR5IGxvYWRlZCB3aGVuXG4gICAgICAgICAgICAvLyB3ZSBjb21lIGhlcmVcbiAgICAgICAgICAgIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICBicm93c2VyLmdldCh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBleHBlY3ROb0Vycm9ycygpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSBleHByZXNzaW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcwJyk7XG4gICAgICAgICAgICBpbmNCdG4uY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW5kIHJlcG9ydCBhbiBlcnJvciB3aGVuIHVzaW5nIFwiZXZhbFwiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBldmlsQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoZXZpbEVycm9yLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICAgIGV4cGVjdEVycm9yKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICovXG5cbi8vIGBuZ0NzcGAgaXMgbm90IGltcGxlbWVudGVkIGFzIGEgcHJvcGVyIGRpcmVjdGl2ZSBhbnkgbW9yZSwgYmVjYXVzZSB3ZSBuZWVkIGl0IGJlIHByb2Nlc3NlZCB3aGlsZVxuLy8gd2UgYm9vdHN0cmFwIHRoZSBhcHAgKGJlZm9yZSBgJHBhcnNlYCBpcyBpbnN0YW50aWF0ZWQpLiBGb3IgdGhpcyByZWFzb24sIHdlIGp1c3QgaGF2ZSB0aGUgYGNzcCgpYFxuLy8gZm4gdGhhdCBsb29rcyBmb3IgdGhlIGBuZy1jc3BgIGF0dHJpYnV0ZSBhbnl3aGVyZSBpbiB0aGUgY3VycmVudCBkb2MuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGlja1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5nQ2xpY2sgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlblxuICogYW4gZWxlbWVudCBpcyBjbGlja2VkLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjbGljay4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jbGlja1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxzcGFuPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICA8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcxJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuLypcbiAqIEEgY29sbGVjdGlvbiBvZiBkaXJlY3RpdmVzIHRoYXQgYWxsb3dzIGNyZWF0aW9uIG9mIGN1c3RvbSBldmVudCBoYW5kbGVycyB0aGF0IGFyZSBkZWZpbmVkIGFzXG4gKiBhbmd1bGFyIGV4cHJlc3Npb25zIGFuZCBhcmUgY29tcGlsZWQgYW5kIGV4ZWN1dGVkIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS5cbiAqL1xudmFyIG5nRXZlbnREaXJlY3RpdmVzID0ge307XG5cbi8vIEZvciBldmVudHMgdGhhdCBtaWdodCBmaXJlIHN5bmNocm9ub3VzbHkgZHVyaW5nIERPTSBtYW5pcHVsYXRpb25cbi8vIHdlIG5lZWQgdG8gZXhlY3V0ZSB0aGVpciBldmVudCBoYW5kbGVycyBhc3luY2hyb25vdXNseSB1c2luZyAkZXZhbEFzeW5jLFxuLy8gc28gdGhhdCB0aGV5IGFyZSBub3QgZXhlY3V0ZWQgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLlxudmFyIGZvcmNlQXN5bmNFdmVudHMgPSB7XG4gICdibHVyJzogdHJ1ZSxcbiAgJ2ZvY3VzJzogdHJ1ZVxufTtcbmZvckVhY2goXG4gICdjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2Vtb3ZlIG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBrZXlkb3duIGtleXVwIGtleXByZXNzIHN1Ym1pdCBmb2N1cyBibHVyIGNvcHkgY3V0IHBhc3RlJy5zcGxpdCgnICcpLFxuICBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGV2ZW50TmFtZSk7XG4gICAgbmdFdmVudERpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBbJyRwYXJzZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigkZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgIC8vIE5PVEU6XG4gICAgICAgICAgLy8gV2UgZXhwb3NlIHRoZSBwb3dlcmZ1bCBgJGV2ZW50YCBvYmplY3Qgb24gdGhlIHNjb3BlIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBXaW5kb3csXG4gICAgICAgICAgLy8gZXRjLiBUaGlzIGlzIE9LLCBiZWNhdXNlIGV4cHJlc3Npb25zIGFyZSBub3Qgc2FuZGJveGVkIGFueSBtb3JlIChhbmQgdGhlIGV4cHJlc3Npb25cbiAgICAgICAgICAvLyBzYW5kYm94IHdhcyBuZXZlciBtZWFudCB0byBiZSBhIHNlY3VyaXR5IGZlYXR1cmUgYW55d2F5KS5cbiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nRXZlbnRIYW5kbGVyKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6IGV2ZW50fSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChmb3JjZUFzeW5jRXZlbnRzW2V2ZW50TmFtZV0gJiYgJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XTtcbiAgfVxuKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0RibGNsaWNrXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nRGJsY2xpY2tgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGEgZGJsY2xpY2sgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0RibGNsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGEgZGJsY2xpY2suIChUaGUgRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWRibGNsaWNrXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLWRibGNsaWNrPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIGRvdWJsZSBjbGljaylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2Vkb3duXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdNb3VzZWRvd24gZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vkb3duIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2Vkb3duLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlZG93blwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWRvd249XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gbW91c2UgZG93bilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2V1cFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2V1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZXVwLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNldXBcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2V1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSB1cClcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlb3ZlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VvdmVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW92ZXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VvdmVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlb3ZlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW92ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBpcyBvdmVyKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWVudGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWVudGVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWVudGVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlZW50ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VlbnRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWVudGVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgZW50ZXJzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWxlYXZlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWxlYXZlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWxlYXZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbGVhdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VsZWF2ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW1vdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZW1vdmVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vtb3ZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbW92ZXMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5ZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleWRvd25cIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5dXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleXVwXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX1cblxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiZXZlbnQ9JGV2ZW50XCI+XG4gICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD5cbiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXByZXNzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAqIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1rZXlwcmVzc1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IHByZXNzIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N1Ym1pdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICpcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAqIGBkYXRhLWFjdGlvbmAsIG9yIGB4LWFjdGlvbmAgYXR0cmlidXRlcy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlIFwiZG91YmxlLXN1Ym1pc3Npb25cIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kXG4gKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlXG4gKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbGVtZW50IGZvcm1cbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic3VibWl0RXhhbXBsZVwiIG5hbWU9XCJuZy1zdWJtaXRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzdWJtaXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5saXN0ID0gW107XG4gICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICgkc2NvcGUudGV4dCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnB1c2godGhpcy50ZXh0KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmctc3VibWl0PVwic3VibWl0KClcIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgRW50ZXIgdGV4dCBhbmQgaGl0IGVudGVyOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInRleHRcIiBuYW1lPVwidGV4dFwiIC8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgaWQ9XCJzdWJtaXRcIiB2YWx1ZT1cIlN1Ym1pdFwiIC8+XG4gICAgICAgIDxwcmU+bGlzdD17e2xpc3R9fTwvcHJlPlxuICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN1Ym1pdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3Q9W10nKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCcnKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIGlnbm9yZSBlbXB0eSBzdHJpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdGb2N1c1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gZm9jdXMgZXZlbnQuXG4gKlxuICogTm90ZTogQXMgdGhlIGBmb2N1c2AgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSB3aGVuIGNhbGxpbmcgYGlucHV0LmZvY3VzKClgXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdGb2N1cyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBmb2N1cy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmx1clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYmx1ciBldmVudC5cbiAqXG4gKiBBIFtibHVyIGV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvYmx1cikgZmlyZXMgd2hlblxuICogYW4gZWxlbWVudCBoYXMgbG9zdCBmb2N1cy5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGJsdXJgIGV2ZW50IGlzIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgYWxzbyBkdXJpbmcgRE9NIG1hbmlwdWxhdGlvbnNcbiAqIChlLmcuIHJlbW92aW5nIGEgZm9jdXNzZWQgaW5wdXQpLFxuICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAqIGR1cmluZyBhbiBgJGFwcGx5YCB0byBlbnN1cmUgYSBjb25zaXN0ZW50IHN0YXRlLlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmx1ciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBibHVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDb3B5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjb3B5IGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29weSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjb3B5LiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNvcHlcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjb3BpZWQ6IHt7Y29waWVkfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0N1dCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY3V0XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctY3V0PVwiY3V0PXRydWVcIiBuZy1pbml0PVwiY3V0PWZhbHNlOyB2YWx1ZT0nY3V0IG1lJ1wiIG5nLW1vZGVsPVwidmFsdWVcIj5cbiAgICAgIGN1dDoge3tjdXR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Bhc3RlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBwYXN0ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Bhc3RlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIHBhc3RlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLXBhc3RlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctcGFzdGU9XCJwYXN0ZT10cnVlXCIgbmctaW5pdD1cInBhc3RlPWZhbHNlXCIgcGxhY2Vob2xkZXI9J3Bhc3RlIGhlcmUnPlxuICAgICAgcGFzdGVkOiB7e3Bhc3RlfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJZlxuICogQHJlc3RyaWN0IEFcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJZmAgZGlyZWN0aXZlIHJlbW92ZXMgb3IgcmVjcmVhdGVzIGEgcG9ydGlvbiBvZiB0aGUgRE9NIHRyZWUgYmFzZWQgb24gYW5cbiAqIHtleHByZXNzaW9ufS4gSWYgdGhlIGV4cHJlc3Npb24gYXNzaWduZWQgdG8gYG5nSWZgIGV2YWx1YXRlcyB0byBhIGZhbHNlXG4gKiB2YWx1ZSB0aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLCBvdGhlcndpc2UgYSBjbG9uZSBvZiB0aGVcbiAqIGVsZW1lbnQgaXMgcmVpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gKlxuICogYG5nSWZgIGRpZmZlcnMgZnJvbSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgaW4gdGhhdCBgbmdJZmAgY29tcGxldGVseSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgdGhlXG4gKiBlbGVtZW50IGluIHRoZSBET00gcmF0aGVyIHRoYW4gY2hhbmdpbmcgaXRzIHZpc2liaWxpdHkgdmlhIHRoZSBgZGlzcGxheWAgY3NzIHByb3BlcnR5LiAgQSBjb21tb25cbiAqIGNhc2Ugd2hlbiB0aGlzIGRpZmZlcmVuY2UgaXMgc2lnbmlmaWNhbnQgaXMgd2hlbiB1c2luZyBjc3Mgc2VsZWN0b3JzIHRoYXQgcmVseSBvbiBhbiBlbGVtZW50J3NcbiAqIHBvc2l0aW9uIHdpdGhpbiB0aGUgRE9NLCBzdWNoIGFzIHRoZSBgOmZpcnN0LWNoaWxkYCBvciBgOmxhc3QtY2hpbGRgIHBzZXVkby1jbGFzc2VzLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCB1c2luZyBgbmdJZmAgaXRzIHNjb3BlIGlzIGRlc3Ryb3llZCBhbmQgYSBuZXcgc2NvcGVcbiAqIGlzIGNyZWF0ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZXN0b3JlZC4gIFRoZSBzY29wZSBjcmVhdGVkIHdpdGhpbiBgbmdJZmAgaW5oZXJpdHMgZnJvbVxuICogaXRzIHBhcmVudCBzY29wZSB1c2luZ1xuICogW3Byb3RvdHlwYWwgaW5oZXJpdGFuY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcyNqYXZhc2NyaXB0LXByb3RvdHlwYWwtaW5oZXJpdGFuY2UpLlxuICogQW4gaW1wb3J0YW50IGltcGxpY2F0aW9uIG9mIHRoaXMgaXMgaWYgYG5nTW9kZWxgIGlzIHVzZWQgd2l0aGluIGBuZ0lmYCB0byBiaW5kIHRvXG4gKiBhIGphdmFzY3JpcHQgcHJpbWl0aXZlIGRlZmluZWQgaW4gdGhlIHBhcmVudCBzY29wZS4gSW4gdGhpcyBjYXNlIGFueSBtb2RpZmljYXRpb25zIG1hZGUgdG8gdGhlXG4gKiB2YXJpYWJsZSB3aXRoaW4gdGhlIGNoaWxkIHNjb3BlIHdpbGwgb3ZlcnJpZGUgKGhpZGUpIHRoZSB2YWx1ZSBpbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqIEFsc28sIGBuZ0lmYCByZWNyZWF0ZXMgZWxlbWVudHMgdXNpbmcgdGhlaXIgY29tcGlsZWQgc3RhdGUuIEFuIGV4YW1wbGUgb2YgdGhpcyBiZWhhdmlvclxuICogaXMgaWYgYW4gZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZSBpcyBkaXJlY3RseSBtb2RpZmllZCBhZnRlciBpdCdzIGNvbXBpbGVkLCB1c2luZyBzb21ldGhpbmcgbGlrZVxuICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnRcbiAqIHRoZSBhZGRlZCBjbGFzcyB3aWxsIGJlIGxvc3QgYmVjYXVzZSB0aGUgb3JpZ2luYWwgY29tcGlsZWQgc3RhdGUgaXMgdXNlZCB0byByZWdlbmVyYXRlIHRoZSBlbGVtZW50LlxuICpcbiAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgdG8gYW5pbWF0ZSB0aGUgYGVudGVyYFxuICogYW5kIGBsZWF2ZWAgZWZmZWN0cy5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IGp1c3QgYWZ0ZXIgdGhlIGBuZ0lmYCBjb250ZW50cyBjaGFuZ2UgYW5kIGEgbmV3IERPTSBlbGVtZW50IGlzIGNyZWF0ZWQgYW5kIGluamVjdGVkIGludG8gdGhlIGBuZ0lmYCBjb250YWluZXIgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbGVhdmUgbGVhdmV9ICB8IGp1c3QgYmVmb3JlIHRoZSBgbmdJZmAgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHxcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDYwMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0lmIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBmYWxzeSB0aGVuXG4gKiAgICAgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZS4gSWYgaXQgaXMgdHJ1dGh5IGEgY29weSBvZiB0aGUgY29tcGlsZWRcbiAqICAgICBlbGVtZW50IGlzIGFkZGVkIHRvIHRoZSBET00gdHJlZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaWZcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGxhYmVsPkNsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgbmctaW5pdD1cImNoZWNrZWQ9dHJ1ZVwiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgU2hvdyB3aGVuIGNoZWNrZWQ6XG4gICAgICA8c3BhbiBuZy1pZj1cImNoZWNrZWRcIiBjbGFzcz1cImFuaW1hdGUtaWZcIj5cbiAgICAgICAgVGhpcyBpcyByZW1vdmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHVuY2hlY2tlZC5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1pZiB7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsIC5hbmltYXRlLWlmLm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjE7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0lmRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRhbmltYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDYwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgYmxvY2ssIGNoaWxkU2NvcGUsIHByZXZpb3VzRWxlbWVudHM7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJGF0dHIubmdJZiwgZnVuY3Rpb24gbmdJZldhdGNoQWN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSwgbmV3U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdJZicsICRhdHRyLm5nSWYpO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2sgPSB7XG4gICAgICAgICAgICAgICAgICBjbG9uZTogY2xvbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCAkZWxlbWVudC5wYXJlbnQoKSwgJGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50cykuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbmNsdWRlXG4gKiBAcmVzdHJpY3QgRUNBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgVVJMIGlzIHJlc3RyaWN0ZWQgdG8gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGVcbiAqIGFwcGxpY2F0aW9uIGRvY3VtZW50LiBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiBpdC4gVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIHByb3RvY29sc1xuICogeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvclxuICoge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgdGhlbX0gYXMgdHJ1c3RlZCB2YWx1ZXMuIFJlZmVyIHRvIEFuZ3VsYXIncyB7QGxpbmtcbiAqIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmd9LlxuICpcbiAqIEluIGFkZGl0aW9uLCB0aGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gKiBGb3IgZXhhbXBsZSwgYG5nSW5jbHVkZWAgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yIGBmaWxlOi8vYFxuICogYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IHdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgb24gdGhlIG5ldyBpbmNsdWRlIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCB3aGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIG9uIHRoZSBvbGQgaW5jbHVkZSB8XG4gKlxuICogVGhlIGVudGVyIGFuZCBsZWF2ZSBhbmltYXRpb24gb2NjdXIgY29uY3VycmVudGx5LlxuICpcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDQwMFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCxcbiAqICAgICAgICAgICAgICAgICBtYWtlIHN1cmUgeW91IHdyYXAgaXQgaW4gKipzaW5nbGUqKiBxdW90ZXMsIGUuZy4gYHNyYz1cIidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJ1wiYC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiBhIG5ldyBwYXJ0aWFsIGlzIGxvYWRlZC5cbiAqICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgICAgICAgICAgICAgICAgKipOb3RlOioqIFdoZW4gdXNpbmcgb25sb2FkIG9uIFNWRyBlbGVtZW50cyBpbiBJRTExLCB0aGUgYnJvd3NlciB3aWxsIHRyeSB0byBjYWxsXG4gKiAgICAgICAgICAgICAgICAgIGEgZnVuY3Rpb24gd2l0aCB0aGUgbmFtZSBvbiB0aGUgd2luZG93IGVsZW1lbnQsIHdoaWNoIHdpbGwgdXN1YWxseSB0aHJvdyBhXG4gKiAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gaXMgdW5kZWZpbmVkXCIgZXJyb3IuIFRvIGZpeCB0aGlzLCB5b3UgY2FuIGluc3RlYWQgdXNlIGBkYXRhLW9ubG9hZGAgb3IgYVxuICogICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgZm9ybSB0aGF0IHtAbGluayBndWlkZS9kaXJlY3RpdmUjbm9ybWFsaXphdGlvbiBtYXRjaGVzfSBgb25sb2FkYC5cbiAqICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFxuICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSBjb250ZW50IGlzIGxvYWRlZC5cbiAqXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIHNldCB3aXRob3V0IHZhbHVlLCBlbmFibGUgc2Nyb2xsaW5nLlxuICogICAgICAgICAgICAgICAgICAtIE90aGVyd2lzZSBlbmFibGUgc2Nyb2xsaW5nIG9ubHkgaWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydXRoeSB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJpbmNsdWRlRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1pbmNsdWRlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwidGVtcGxhdGVcIiBuZy1vcHRpb25zPVwidC5uYW1lIGZvciB0IGluIHRlbXBsYXRlc1wiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+KGJsYW5rKTwvb3B0aW9uPlxuICAgICAgIDwvc2VsZWN0PlxuICAgICAgIHVybCBvZiB0aGUgdGVtcGxhdGU6IDxjb2RlPnt7dGVtcGxhdGUudXJsfX08L2NvZGU+XG4gICAgICAgPGhyLz5cbiAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZS1hbmltYXRlXCIgbmctaW5jbHVkZT1cInRlbXBsYXRlLnVybFwiPjwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2luY2x1ZGVFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGVzID1cbiAgICAgICAgICAgIFt7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ30sXG4gICAgICAgICAgICAgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9XTtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdO1xuICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwidGVtcGxhdGUxLmh0bWxcIj5cbiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWxcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMi5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLnNsaWRlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlIHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciwgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG5cbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGJvdHRvbTowO1xuICAgICAgICBkaXNwbGF5OmJsb2NrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyIHtcbiAgICAgICAgdG9wOi01MHB4O1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICB0b3A6NTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRlbXBsYXRlU2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgndGVtcGxhdGUnKSk7XG4gICAgICB2YXIgaW5jbHVkZUVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLWluY2x1ZGVdJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUxLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTIuaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODBcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAgIC8vIEZpcmVmb3ggY2FuJ3QgaGFuZGxlIHVzaW5nIHNlbGVjdHNcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uaXNQcmVzZW50KCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50TG9hZGVkXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdJbmNsdWRlIHNjb3BlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVsb2FkZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRFcnJvclxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgd2hlbiBhIHRlbXBsYXRlIEhUVFAgcmVxdWVzdCB5aWVsZHMgYW4gZXJyb25lb3VzIHJlc3BvbnNlIChzdGF0dXMgPCAyMDAgfHwgc3RhdHVzID4gMjk5KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xudmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlUmVxdWVzdCcsICckYW5jaG9yU2Nyb2xsJywgJyRhbmltYXRlJyxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCR0ZW1wbGF0ZVJlcXVlc3QsICAgJGFuY2hvclNjcm9sbCwgICAkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICBwcmlvcml0eTogNDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIHNyY0V4cCA9IGF0dHIubmdJbmNsdWRlIHx8IGF0dHIuc3JjLFxuICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLFxuICAgICAgICAgIGF1dG9TY3JvbGxFeHAgPSBhdHRyLmF1dG9zY3JvbGw7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgY2hhbmdlQ291bnRlciA9IDAsXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUsXG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQsXG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudDtcblxuICAgICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShjdXJyZW50RWxlbWVudCkuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgIT09IGZhbHNlKSBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7XG4gICAgICAgICAgdmFyIGFmdGVyQW5pbWF0aW9uID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UgJiYgaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmXG4gICAgICAgICAgICAgICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHtcbiAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyO1xuXG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgICAgLy9jb250ZW50cyBhbmQgc2NvcGUgY2FuIGJlIGNsZWFuZWQgdXAuXG4gICAgICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNyYywgdHJ1ZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHNvIGxpbmsgYWxsIGNoaWxkcmVuIG9mIG5nLWluY2x1ZGUgdGhhdCB3ZXJlIGNvbnRhaW5lZCBpbiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgLy8gaHRtbC4gSWYgdGhhdCBjb250ZW50IGNvbnRhaW5zIGNvbnRyb2xsZXJzLCAuLi4gdGhleSBjb3VsZCBwb2xsdXRlL2NoYW5nZSB0aGUgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLWluY2x1ZGUgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbid0IHJlbW92ZSB0aGVtIGluIHRoZSBjbG9uZUF0dGNoRm4gb2YgJHRyYW5zY2x1ZGUgYXMgdGhhdFxuICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgYmVmb3JlIGxpbmtpbmcgdGhlIGNvbnRlbnQsIHdoaWNoIHdvdWxkIGFwcGx5IGNoaWxkXG4gICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLlxuICAgICAgICAgICAgICB2YXIgY2xvbmUgPSAkdHJhbnNjbHVkZShuZXdTY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50KS5kb25lKGFmdGVyQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbChvbmxvYWRFeHApO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudEVycm9yJywgc3JjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkJywgc3JjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8vIFRoaXMgZGlyZWN0aXZlIGlzIGNhbGxlZCBkdXJpbmcgdGhlICR0cmFuc2NsdWRlIGNhbGwgb2YgdGhlIGZpcnN0IGBuZ0luY2x1ZGVgIGRpcmVjdGl2ZS5cbi8vIEl0IHdpbGwgcmVwbGFjZSBhbmQgY29tcGlsZSB0aGUgY29udGVudCBvZiB0aGUgZWxlbWVudCB3aXRoIHRoZSBsb2FkZWQgdGVtcGxhdGUuXG4vLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHNvIHRoYXQgdGhlIGVsZW1lbnQgY29udGVudCBpcyBhbHJlYWR5IGZpbGxlZCB3aGVuXG4vLyB0aGUgbGluayBmdW5jdGlvbiBvZiBhbm90aGVyIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIG5nSW5jbHVkZVxuLy8gaXMgY2FsbGVkLlxudmFyIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlID0gWyckY29tcGlsZScsXG4gIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICAgIHByaW9yaXR5OiAtNDAwLFxuICAgICAgcmVxdWlyZTogJ25nSW5jbHVkZScsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICh0b1N0cmluZy5jYWxsKCRlbGVtZW50WzBdKS5tYXRjaCgvU1ZHLykpIHtcbiAgICAgICAgICAvLyBXZWJLaXQ6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzU2OTggLS0tIFNWRyBlbGVtZW50cyBkbyBub3RcbiAgICAgICAgICAvLyBzdXBwb3J0IGlubmVySFRNTCwgc28gZGV0ZWN0IHRoaXMgaGVyZSBhbmQgdHJ5IHRvIGdlbmVyYXRlIHRoZSBjb250ZW50c1xuICAgICAgICAgIC8vIHNwZWNpYWxseS5cbiAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICRjb21waWxlKGpxTGl0ZUJ1aWxkRnJhZ21lbnQoY3RybC50ZW1wbGF0ZSwgd2luZG93LmRvY3VtZW50KS5jaGlsZE5vZGVzKShzY29wZSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gbmFtZXNwYWNlQWRhcHRlZENsb25lKGNsb25lKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0sIHtmdXR1cmVQYXJlbnRFbGVtZW50OiAkZWxlbWVudH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50Lmh0bWwoY3RybC50ZW1wbGF0ZSk7XG4gICAgICAgICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0luaXRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0luaXRgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGV2YWx1YXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlXG4gKiBjdXJyZW50IHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhYnVzZWQgdG8gYWRkIHVubmVjZXNzYXJ5IGFtb3VudHMgb2YgbG9naWMgaW50byB5b3VyIHRlbXBsYXRlcy5cbiAqIFRoZXJlIGFyZSBvbmx5IGEgZmV3IGFwcHJvcHJpYXRlIHVzZXMgb2YgYG5nSW5pdGAsIHN1Y2ggYXMgZm9yIGFsaWFzaW5nIHNwZWNpYWwgcHJvcGVydGllcyBvZlxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2VlbiBpbiB0aGUgZGVtbyBiZWxvdzsgYW5kIGZvciBpbmplY3RpbmcgZGF0YSB2aWFcbiAqIHNlcnZlciBzaWRlIHNjcmlwdGluZy4gQmVzaWRlcyB0aGVzZSBmZXcgY2FzZXMsIHlvdSBzaG91bGQgdXNlIHtAbGluayBndWlkZS9jb250cm9sbGVyIGNvbnRyb2xsZXJzfVxuICogcmF0aGVyIHRoYW4gYG5nSW5pdGAgdG8gaW5pdGlhbGl6ZSB2YWx1ZXMgb24gYSBzY29wZS5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIGEge0BsaW5rIG5nLiRmaWx0ZXIgYGZpbHRlcmB9LCBtYWtlXG4gKiBzdXJlIHlvdSBoYXZlIHBhcmVudGhlc2VzIHRvIGVuc3VyZSBjb3JyZWN0IG9wZXJhdG9yIHByZWNlZGVuY2U6XG4gKiA8cHJlIGNsYXNzPVwicHJldHR5cHJpbnRcIj5cbiAqIGA8ZGl2IG5nLWluaXQ9XCJ0ZXN0MSA9ICgkaW5kZXggfCB0b1N0cmluZylcIj48L2Rpdj5gXG4gKiA8L3ByZT5cbiAqIDwvZGl2PlxuICpcbiAqIEBwcmlvcml0eSA0NTBcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCIgbmFtZT1cIm5nLWluaXRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxzY3JpcHQ+XG4gICAgIGFuZ3VsYXIubW9kdWxlKCdpbml0RXhhbXBsZScsIFtdKVxuICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAkc2NvcGUubGlzdCA9IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXTtcbiAgICAgICB9XSk7XG4gICA8L3NjcmlwdD5cbiAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgIDxkaXYgbmctcmVwZWF0PVwiaW5uZXJMaXN0IGluIGxpc3RcIiBuZy1pbml0PVwib3V0ZXJJbmRleCA9ICRpbmRleFwiPlxuICAgICAgIDxkaXYgbmctcmVwZWF0PVwidmFsdWUgaW4gaW5uZXJMaXN0XCIgbmctaW5pdD1cImlubmVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImV4YW1wbGUtaW5pdFwiPmxpc3RbIHt7b3V0ZXJJbmRleH19IF1bIHt7aW5uZXJJbmRleH19IF0gPSB7e3ZhbHVlfX07PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGFsaWFzIGluZGV4IHBvc2l0aW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudC5hbGwoYnkuY3NzKCcuZXhhbXBsZS1pbml0JykpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgwKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDAgXVsgMCBdID0gYTsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDEgXSA9IGI7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAwIF0gPSBjOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMSBdID0gZDsnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBwcmlvcml0eTogNDUwLFxuICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdJbml0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0xpc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRleHQgaW5wdXQgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIGEgZGVsaW1pdGVkIHN0cmluZyBhbmQgYW4gYXJyYXkgb2Ygc3RyaW5ncy4gVGhlIGRlZmF1bHRcbiAqIGRlbGltaXRlciBpcyBhIGNvbW1hIGZvbGxvd2VkIGJ5IGEgc3BhY2UgLSBlcXVpdmFsZW50IHRvIGBuZy1saXN0PVwiLCBcImAuIFlvdSBjYW4gc3BlY2lmeSBhIGN1c3RvbVxuICogZGVsaW1pdGVyIGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG5nTGlzdGAgYXR0cmlidXRlIC0gZm9yIGV4YW1wbGUsIGBuZy1saXN0PVwiIHwgXCJgLlxuICpcbiAqIFRoZSBiZWhhdmlvdXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyBhZmZlY3RlZCBieSB0aGUgdXNlIG9mIHRoZSBgbmdUcmltYCBhdHRyaWJ1dGUuXG4gKiAqIElmIGBuZ1RyaW1gIGlzIHNldCB0byBgXCJmYWxzZVwiYCB0aGVuIHdoaXRlc3BhY2UgYXJvdW5kIGJvdGggdGhlIHNlcGFyYXRvciBhbmQgZWFjaFxuICogICBsaXN0IGl0ZW0gaXMgcmVzcGVjdGVkLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBvZiB0aGUgZGlyZWN0aXZlIGlzIHJlc3BvbnNpYmxlIGZvclxuICogICBkZWFsaW5nIHdpdGggd2hpdGVzcGFjZSBidXQgYWxzbyBhbGxvd3MgeW91IHRvIHVzZSB3aGl0ZXNwYWNlIGFzIGEgZGVsaW1pdGVyLCBzdWNoIGFzIGFcbiAqICAgdGFiIG9yIG5ld2xpbmUgY2hhcmFjdGVyLlxuICogKiBPdGhlcndpc2Ugd2hpdGVzcGFjZSBhcm91bmQgdGhlIGRlbGltaXRlciBpcyBpZ25vcmVkIHdoZW4gc3BsaXR0aW5nIChhbHRob3VnaCBpdCBpcyByZXNwZWN0ZWRcbiAqICAgd2hlbiBqb2luaW5nIHRoZSBsaXN0IGl0ZW1zIGJhY2sgdG9nZXRoZXIpIGFuZCB3aGl0ZXNwYWNlIGFyb3VuZCBlYWNoIGxpc3QgaXRlbSBpcyBzdHJpcHBlZFxuICogICBiZWZvcmUgaXQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqICMjIyBFeGFtcGxlIHdpdGggVmFsaWRhdGlvblxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlXCIgbW9kdWxlPVwibGlzdEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgICBhbmd1bGFyLm1vZHVsZSgnbGlzdEV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydtb3JwaGV1cycsICduZW8nLCAndHJpbml0eSddO1xuICogICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICA8bGFiZWw+TGlzdDogPGlucHV0IG5hbWU9XCJuYW1lc0lucHV0XCIgbmctbW9kZWw9XCJuYW1lc1wiIG5nLWxpc3QgcmVxdWlyZWQ+PC9sYWJlbD5cbiAqICAgICAgPHNwYW4gcm9sZT1cImFsZXJ0XCI+XG4gKiAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAqICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gKiAgICAgIDwvc3Bhbj5cbiAqICAgICAgPGJyPlxuICogICAgICA8dHQ+bmFtZXMgPSB7e25hbWVzfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICogICAgIDwvZm9ybT5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgdmFyIGxpc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWVzJykpO1xuICogICAgIHZhciBuYW1lcyA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCduYW1lcycpKTtcbiAqICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCcpKTtcbiAqICAgICB2YXIgZXJyb3IgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5lcnJvcicpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcIm1vcnBoZXVzXCIsXCJuZW9cIixcInRyaW5pdHlcIl0nKTtcbiAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLnRvQmUoJ25vbmUnKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBsaXN0SW5wdXQuY2xlYXIoKTtcbiAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnJyk7XG4gKlxuICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS5ub3QudG9CZSgnbm9uZScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogIyMjIEV4YW1wbGUgLSBzcGxpdHRpbmcgb24gbmV3bGluZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTGlzdC1kaXJlY3RpdmUtbmV3bGluZXNcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cImxpc3RcIiBuZy1saXN0PVwiJiMxMDtcIiBuZy10cmltPVwiZmFsc2VcIj48L3RleHRhcmVhPlxuICogICAgPHByZT57eyBsaXN0IHwganNvbiB9fTwvcHJlPlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICBpdChcInNob3VsZCBzcGxpdCB0aGUgdGV4dCBieSBuZXdsaW5lc1wiLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsaXN0JykpO1xuICogICAgICAgdmFyIG91dHB1dCA9IGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCB8IGpzb24nKSk7XG4gKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJ2FiY1xcbmRlZlxcbmdoaScpO1xuICogICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQ29udGFpbignW1xcbiAgXCJhYmNcIixcXG4gIFwiZGVmXCIsXFxuICBcImdoaVwiXFxuXScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdMaXN0IG9wdGlvbmFsIGRlbGltaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHNwbGl0IHRoZSB2YWx1ZS5cbiAqL1xudmFyIG5nTGlzdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICAgIHZhciBuZ0xpc3QgPSBhdHRyLm5nTGlzdCB8fCAnLCAnO1xuICAgICAgdmFyIHRyaW1WYWx1ZXMgPSBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJztcbiAgICAgIHZhciBzZXBhcmF0b3IgPSB0cmltVmFsdWVzID8gdHJpbShuZ0xpc3QpIDogbmdMaXN0O1xuXG4gICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbih2aWV3VmFsdWUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBpcyBpbnZhbGlkIChzYXkgcmVxdWlyZWQgYnV0IGVtcHR5KSBpdCB3aWxsIGJlIGB1bmRlZmluZWRgXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2aWV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcblxuICAgICAgICBpZiAodmlld1ZhbHVlKSB7XG4gICAgICAgICAgZm9yRWFjaCh2aWV3VmFsdWUuc3BsaXQoc2VwYXJhdG9yKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkgbGlzdC5wdXNoKHRyaW1WYWx1ZXMgPyB0cmltKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfTtcblxuICAgICAgY3RybC4kcGFyc2Vycy5wdXNoKHBhcnNlKTtcbiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUuam9pbihuZ0xpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgJGlzRW1wdHkgYmVjYXVzZSBhbiBlbXB0eSBhcnJheSBtZWFucyB0aGUgaW5wdXQgaXMgZW1wdHkuXG4gICAgICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKiBnbG9iYWwgVkFMSURfQ0xBU1M6IHRydWUsXG4gIElOVkFMSURfQ0xBU1M6IHRydWUsXG4gIFBSSVNUSU5FX0NMQVNTOiB0cnVlLFxuICBESVJUWV9DTEFTUzogdHJ1ZSxcbiAgVU5UT1VDSEVEX0NMQVNTOiB0cnVlLFxuICBUT1VDSEVEX0NMQVNTOiB0cnVlLFxuICBQRU5ESU5HX0NMQVNTOiB0cnVlLFxuICBhZGRTZXRWYWxpZGl0eU1ldGhvZDogdHJ1ZSxcbiAgc2V0dXBWYWxpZGl0eTogdHJ1ZSxcbiAgZGVmYXVsdE1vZGVsT3B0aW9uczogZmFsc2VcbiovXG5cblxudmFyIFZBTElEX0NMQVNTID0gJ25nLXZhbGlkJyxcbiAgICBJTlZBTElEX0NMQVNTID0gJ25nLWludmFsaWQnLFxuICAgIFBSSVNUSU5FX0NMQVNTID0gJ25nLXByaXN0aW5lJyxcbiAgICBESVJUWV9DTEFTUyA9ICduZy1kaXJ0eScsXG4gICAgVU5UT1VDSEVEX0NMQVNTID0gJ25nLXVudG91Y2hlZCcsXG4gICAgVE9VQ0hFRF9DTEFTUyA9ICduZy10b3VjaGVkJyxcbiAgICBFTVBUWV9DTEFTUyA9ICduZy1lbXB0eScsXG4gICAgTk9UX0VNUFRZX0NMQVNTID0gJ25nLW5vdC1lbXB0eSc7XG5cbnZhciBuZ01vZGVsTWluRXJyID0gbWluRXJyKCduZ01vZGVsJyk7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkgeyp9ICR2aWV3VmFsdWUgVGhlIGFjdHVhbCB2YWx1ZSBmcm9tIHRoZSBjb250cm9sJ3Mgdmlldy4gRm9yIGBpbnB1dGAgZWxlbWVudHMsIHRoaXMgaXMgYVxuICogU3RyaW5nLiBTZWUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZX0gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoZW4gdGhlICR2aWV3VmFsdWVcbiAqIGlzIHNldC5cbiAqXG4gKiBAcHJvcGVydHkgeyp9ICRtb2RlbFZhbHVlIFRoZSB2YWx1ZSBpbiB0aGUgbW9kZWwgdGhhdCB0aGUgY29udHJvbCBpcyBib3VuZCB0by5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRwYXJzZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICogIHRoZSBjb250cm9sIHVwZGF0ZXMgdGhlIG5nTW9kZWxDb250cm9sbGVyIHdpdGggYSBuZXcge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZVxuICAgIGAkdmlld1ZhbHVlYH0gZnJvbSB0aGUgRE9NLCB1c3VhbGx5IHZpYSB1c2VyIGlucHV0LlxuICAgIFNlZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0Vmlld1ZhbHVlIGAkc2V0Vmlld1ZhbHVlKClgfSBmb3IgYSBkZXRhaWxlZCBsaWZlY3ljbGUgZXhwbGFuYXRpb24uXG4gICAgTm90ZSB0aGF0IHRoZSBgJHBhcnNlcnNgIGFyZSBub3QgY2FsbGVkIHdoZW4gdGhlIGJvdW5kIG5nTW9kZWwgZXhwcmVzc2lvbiBjaGFuZ2VzIHByb2dyYW1tYXRpY2FsbHkuXG5cbiAgVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmdcbiAgICBpdHMgcmV0dXJuIHZhbHVlIHRocm91Z2ggdG8gdGhlIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyBmb3J3YXJkZWQgdG8gdGhlXG4gICAge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYCR2YWxpZGF0b3JzYH0gY29sbGVjdGlvbi5cblxuICBQYXJzZXJzIGFyZSB1c2VkIHRvIHNhbml0aXplIC8gY29udmVydCB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZVxuICAgIGAkdmlld1ZhbHVlYH0uXG5cbiAgUmV0dXJuaW5nIGB1bmRlZmluZWRgIGZyb20gYSBwYXJzZXIgbWVhbnMgYSBwYXJzZSBlcnJvciBvY2N1cnJlZC4gSW4gdGhhdCBjYXNlLFxuICAgIG5vIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IHdpbGwgcnVuIGFuZCB0aGUgYG5nTW9kZWxgXG4gICAgd2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH1cbiAgICBpcyBzZXQgdG8gYHRydWVgLiBUaGUgcGFyc2UgZXJyb3IgaXMgc3RvcmVkIGluIGBuZ01vZGVsLiRlcnJvci5wYXJzZWAuXG5cbiAgVGhpcyBzaW1wbGUgZXhhbXBsZSBzaG93cyBhIHBhcnNlciB0aGF0IHdvdWxkIGNvbnZlcnQgdGV4dCBpbnB1dCB2YWx1ZSB0byBsb3dlcmNhc2U6XG4gKiBgYGBqc1xuICogZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAqICAgaWYgKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gKiAgIH1cbiAqIH1cbiAqIG5nTW9kZWxDb250cm9sbGVyLiRwYXJzZXJzLnB1c2gocGFyc2UpO1xuICogYGBgXG5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRmb3JtYXR0ZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICAgIHRoZSBib3VuZCBuZ01vZGVsIGV4cHJlc3Npb24gY2hhbmdlcyBwcm9ncmFtbWF0aWNhbGx5LiBUaGUgYCRmb3JtYXR0ZXJzYCBhcmUgbm90IGNhbGxlZCB3aGVuIHRoZVxuICAgIHZhbHVlIG9mIHRoZSBjb250cm9sIGlzIGNoYW5nZWQgYnkgdXNlciBpbnRlcmFjdGlvbi5cblxuICBGb3JtYXR0ZXJzIGFyZSB1c2VkIHRvIGZvcm1hdCAvIGNvbnZlcnQgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRtb2RlbFZhbHVlXG4gICAgYCRtb2RlbFZhbHVlYH0gZm9yIGRpc3BsYXkgaW4gdGhlIGNvbnRyb2wuXG5cbiAgVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIHJldmVyc2UgYXJyYXkgb3JkZXIsIGVhY2ggcGFzc2luZyB0aGUgdmFsdWUgdGhyb3VnaCB0byB0aGVcbiAgICBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgdXNlZCBhcyB0aGUgYWN0dWFsIERPTSB2YWx1ZS5cblxuICBUaGlzIHNpbXBsZSBleGFtcGxlIHNob3dzIGEgZm9ybWF0dGVyIHRoYXQgd291bGQgY29udmVydCB0aGUgbW9kZWwgdmFsdWUgdG8gdXBwZXJjYXNlOlxuXG4gKiBgYGBqc1xuICogZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gKiAgIGlmICh2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICogICB9XG4gKiB9XG4gKiBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0KTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJHZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRvcnMgdGhhdCBhcmUgYXBwbGllZFxuICogICAgICB3aGVuZXZlciB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gVGhlIGtleSB2YWx1ZSB3aXRoaW4gdGhlIG9iamVjdCByZWZlcnMgdG8gdGhlIG5hbWUgb2YgdGhlXG4gKiAgICAgIHZhbGlkYXRvciB3aGlsZSB0aGUgZnVuY3Rpb24gcmVmZXJzIHRvIHRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbi4gVGhlIHZhbGlkYXRpb24gb3BlcmF0aW9uIGlzXG4gKiAgICAgIHByb3ZpZGVkIHdpdGggdGhlIG1vZGVsIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHRydWUgb3IgZmFsc2UgdmFsdWUgZGVwZW5kaW5nXG4gKiAgICAgIG9uIHRoZSByZXNwb25zZSBvZiB0aGF0IHZhbGlkYXRpb24uXG4gKlxuICogYGBganNcbiAqIG5nTW9kZWwuJHZhbGlkYXRvcnMudmFsaWRDaGFyYWN0ZXJzID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICogICByZXR1cm4gL1swLTldKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9bYS16XSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvW0EtWl0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1xcVysvLnRlc3QodmFsdWUpO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJGFzeW5jVmFsaWRhdG9ycyBBIGNvbGxlY3Rpb24gb2YgdmFsaWRhdGlvbnMgdGhhdCBhcmUgZXhwZWN0ZWQgdG9cbiAqICAgICAgcGVyZm9ybSBhbiBhc3luY2hyb25vdXMgdmFsaWRhdGlvbiAoZS5nLiBhIEhUVFAgcmVxdWVzdCkuIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgcHJvdmlkZWRcbiAqICAgICAgaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgcHJvbWlzZSB3aGVuIGl0IGlzIHJ1biBkdXJpbmcgdGhlIG1vZGVsIHZhbGlkYXRpb24gcHJvY2Vzcy4gT25jZSB0aGUgcHJvbWlzZVxuICogICAgICBpcyBkZWxpdmVyZWQgdGhlbiB0aGUgdmFsaWRhdGlvbiBzdGF0dXMgd2lsbCBiZSBzZXQgdG8gdHJ1ZSB3aGVuIGZ1bGZpbGxlZCBhbmQgZmFsc2Ugd2hlbiByZWplY3RlZC5cbiAqICAgICAgV2hlbiB0aGUgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYXJlIHRyaWdnZXJlZCwgZWFjaCBvZiB0aGUgdmFsaWRhdG9ycyB3aWxsIHJ1biBpbiBwYXJhbGxlbCBhbmQgdGhlIG1vZGVsXG4gKiAgICAgIHZhbHVlIHdpbGwgb25seSBiZSB1cGRhdGVkIG9uY2UgYWxsIHZhbGlkYXRvcnMgaGF2ZSBiZWVuIGZ1bGZpbGxlZC4gQXMgbG9uZyBhcyBhbiBhc3luY2hyb25vdXMgdmFsaWRhdG9yXG4gKiAgICAgIGlzIHVuZnVsZmlsbGVkLCBpdHMga2V5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXJzIGAkcGVuZGluZ2AgcHJvcGVydHkuIEFsc28sIGFsbCBhc3luY2hyb25vdXMgdmFsaWRhdG9yc1xuICogICAgICB3aWxsIG9ubHkgcnVuIG9uY2UgYWxsIHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgaGF2ZSBwYXNzZWQuXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCBpZiAkaHR0cCBpcyB1c2VkIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRoYXQgdGhlIHNlcnZlciByZXR1cm5zIGEgc3VjY2VzcyBIVFRQIHJlc3BvbnNlIGNvZGVcbiAqIGluIG9yZGVyIHRvIGZ1bGZpbGwgdGhlIHZhbGlkYXRpb24gYW5kIGEgc3RhdHVzIGxldmVsIG9mIGA0eHhgIGluIG9yZGVyIHRvIHJlamVjdCB0aGUgdmFsaWRhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzLnVuaXF1ZVVzZXJuYW1lID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICpcbiAqICAgLy8gTG9va3VwIHVzZXIgYnkgdXNlcm5hbWVcbiAqICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy8nICsgdmFsdWUpLlxuICogICAgICB0aGVuKGZ1bmN0aW9uIHJlc29sdmVkKCkge1xuICogICAgICAgIC8vdXNlcm5hbWUgZXhpc3RzLCB0aGlzIG1lYW5zIHZhbGlkYXRpb24gZmFpbHNcbiAqICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdleGlzdHMnKTtcbiAqICAgICAgfSwgZnVuY3Rpb24gcmVqZWN0ZWQoKSB7XG4gKiAgICAgICAgLy91c2VybmFtZSBkb2VzIG5vdCBleGlzdCwgdGhlcmVmb3JlIHRoaXMgdmFsaWRhdGlvbiBwYXNzZXNcbiAqICAgICAgICByZXR1cm4gdHJ1ZTtcbiAqICAgICAgfSk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkdmlld0NoYW5nZUxpc3RlbmVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSB3aGVuZXZlciB0aGVcbiAqICAgICB2aWV3IHZhbHVlIGhhcyBjaGFuZ2VkLiBJdCBpcyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuXG4gKiAgICAgVGhpcyBjYW4gYmUgdXNlZCBpbiBwbGFjZSBvZiBhZGRpdGlvbmFsICR3YXRjaGVzIGFnYWluc3QgdGhlIG1vZGVsIHZhbHVlLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgZmFpbGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gJHBlbmRpbmcgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgcGVuZGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdW50b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbm90IGxvc3QgZm9jdXMgeWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdG91Y2hlZCBUcnVlIGlmIGNvbnRyb2wgaGFzIGxvc3QgZm9jdXMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wgeWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgdGhlcmUgaXMgbm8gZXJyb3IuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGVycm9yIG9uIHRoZSBjb250cm9sLlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICRuYW1lIFRoZSBuYW1lIGF0dHJpYnV0ZSBvZiB0aGUgY29udHJvbC5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgTmdNb2RlbENvbnRyb2xsZXJgIHByb3ZpZGVzIEFQSSBmb3IgdGhlIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gZGlyZWN0aXZlLlxuICogVGhlIGNvbnRyb2xsZXIgY29udGFpbnMgc2VydmljZXMgZm9yIGRhdGEtYmluZGluZywgdmFsaWRhdGlvbiwgQ1NTIHVwZGF0ZXMsIGFuZCB2YWx1ZSBmb3JtYXR0aW5nXG4gKiBhbmQgcGFyc2luZy4gSXQgcHVycG9zZWZ1bGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvclxuICogbGlzdGVuaW5nIHRvIERPTSBldmVudHMuXG4gKiBTdWNoIERPTSByZWxhdGVkIGxvZ2ljIHNob3VsZCBiZSBwcm92aWRlZCBieSBvdGhlciBkaXJlY3RpdmVzIHdoaWNoIG1ha2UgdXNlIG9mXG4gKiBgTmdNb2RlbENvbnRyb2xsZXJgIGZvciBkYXRhLWJpbmRpbmcgdG8gY29udHJvbCBlbGVtZW50cy5cbiAqIEFuZ3VsYXIgcHJvdmlkZXMgdGhpcyBET00gbG9naWMgZm9yIG1vc3Qge0BsaW5rIGlucHV0IGBpbnB1dGB9IGVsZW1lbnRzLlxuICogQXQgdGhlIGVuZCBvZiB0aGlzIHBhZ2UgeW91IGNhbiBmaW5kIGEge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjY3VzdG9tLWNvbnRyb2wtZXhhbXBsZVxuICogY3VzdG9tIGNvbnRyb2wgZXhhbXBsZX0gdGhhdCB1c2VzIGBuZ01vZGVsQ29udHJvbGxlcmAgdG8gYmluZCB0byBgY29udGVudGVkaXRhYmxlYCBlbGVtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIEN1c3RvbSBDb250cm9sIEV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ01vZGVsQ29udHJvbGxlcmAgd2l0aCBhIGN1c3RvbSBjb250cm9sIHRvIGFjaGlldmVcbiAqIGRhdGEtYmluZGluZy4gTm90aWNlIGhvdyBkaWZmZXJlbnQgZGlyZWN0aXZlcyAoYGNvbnRlbnRlZGl0YWJsZWAsIGBuZy1tb2RlbGAsIGFuZCBgcmVxdWlyZWRgKVxuICogY29sbGFib3JhdGUgdG9nZXRoZXIgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCByZXN1bHQuXG4gKlxuICogYGNvbnRlbnRlZGl0YWJsZWAgaXMgYW4gSFRNTDUgYXR0cmlidXRlLCB3aGljaCB0ZWxscyB0aGUgYnJvd3NlciB0byBsZXQgdGhlIGVsZW1lbnRcbiAqIGNvbnRlbnRzIGJlIGVkaXRlZCBpbiBwbGFjZSBieSB0aGUgdXNlci5cbiAqXG4gKiBXZSBhcmUgdXNpbmcgdGhlIHtAbGluayBuZy5zZXJ2aWNlOiRzY2UgJHNjZX0gc2VydmljZSBoZXJlIGFuZCBpbmNsdWRlIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9XG4gKiBtb2R1bGUgdG8gYXV0b21hdGljYWxseSByZW1vdmUgXCJiYWRcIiBjb250ZW50IGxpa2UgaW5saW5lIGV2ZW50IGxpc3RlbmVyIChlLmcuIGA8c3BhbiBvbmNsaWNrPVwiLi4uXCI+YCkuXG4gKiBIb3dldmVyLCBhcyB3ZSBhcmUgdXNpbmcgYCRzY2VgIHRoZSBtb2RlbCBjYW4gc3RpbGwgZGVjaWRlIHRvIHByb3ZpZGUgdW5zYWZlIGNvbnRlbnQgaWYgaXQgbWFya3NcbiAqIHRoYXQgY29udGVudCB1c2luZyB0aGUgYCRzY2VgIHNlcnZpY2UuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIk5nTW9kZWxDb250cm9sbGVyXCIgbW9kdWxlPVwiY3VzdG9tQ29udHJvbFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgW2NvbnRlbnRlZGl0YWJsZV0ge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDIwcHg7XG4gICAgICB9XG5cbiAgICAgIC5uZy1pbnZhbGlkIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xuICAgICAgfVxuXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXN0b21Db250cm9sJywgWyduZ1Nhbml0aXplJ10pLlxuICAgICAgICBkaXJlY3RpdmUoJ2NvbnRlbnRlZGl0YWJsZScsIFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZVxuICAgICAgICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJywgLy8gZ2V0IGEgaG9sZCBvZiBOZ01vZGVsQ29udHJvbGxlclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICAgIGlmICghbmdNb2RlbCkgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG5cbiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjaGFuZ2UgZXZlbnRzIHRvIGVuYWJsZSBiaW5kaW5nXG4gICAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhyZWFkKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlYWQoKTsgLy8gaW5pdGlhbGl6ZVxuXG4gICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBlbGVtZW50Lmh0bWwoKTtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGNsZWFyIHRoZSBjb250ZW50IGVkaXRhYmxlIHRoZSBicm93c2VyIGxlYXZlcyBhIDxicj4gYmVoaW5kXG4gICAgICAgICAgICAgICAgLy8gSWYgc3RyaXAtYnIgYXR0cmlidXRlIGlzIHByb3ZpZGVkIHRoZW4gd2Ugc3RyaXAgdGhpcyBvdXRcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnMuc3RyaXBCciAmJiBodG1sID09PSAnPGJyPicpIHtcbiAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGh0bWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlXG4gICAgICAgICAgICBuYW1lPVwibXlXaWRnZXRcIiBuZy1tb2RlbD1cInVzZXJDb250ZW50XCJcbiAgICAgICAgICAgIHN0cmlwLWJyPVwidHJ1ZVwiXG4gICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+XG4gICAgICAgIDxzcGFuIG5nLXNob3c9XCJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPlxuICAgICAgIDxocj5cbiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ1c2VyQ29udGVudFwiIGFyaWEtbGFiZWw9XCJEeW5hbWljIHRleHRhcmVhXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdzYWZhcmknIHx8IGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAvLyBTYWZhcmlEcml2ZXIgY2FuJ3QgaGFuZGxlIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAvLyBhbmQgRmlyZWZveCBkcml2ZXIgY2FuJ3QgY2xlYXIgY29udGVudGVkaXRhYmxlcyB2ZXJ5IHdlbGxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoYnkuY3NzKCdbY29udGVudGVkaXRhYmxlXScpKTtcbiAgICAgIHZhciBjb250ZW50ID0gJ0NoYW5nZSBtZSEnO1xuXG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbChjb250ZW50KTtcblxuICAgICAgY29udGVudEVkaXRhYmxlLmNsZWFyKCk7XG4gICAgICBjb250ZW50RWRpdGFibGUuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbCgnJyk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pO1xuICAgIH0pO1xuICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICovXG5OZ01vZGVsQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcScsICckaW50ZXJwb2xhdGUnXTtcbmZ1bmN0aW9uIE5nTW9kZWxDb250cm9sbGVyKCRzY29wZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRhdHRyLCAkZWxlbWVudCwgJHBhcnNlLCAkYW5pbWF0ZSwgJHRpbWVvdXQsICRxLCAkaW50ZXJwb2xhdGUpIHtcbiAgdGhpcy4kdmlld1ZhbHVlID0gTnVtYmVyLk5hTjtcbiAgdGhpcy4kbW9kZWxWYWx1ZSA9IE51bWJlci5OYU47XG4gIHRoaXMuJCRyYXdNb2RlbFZhbHVlID0gdW5kZWZpbmVkOyAvLyBzdG9yZXMgdGhlIHBhcnNlZCBtb2RlbFZhbHVlIC8gbW9kZWwgc2V0IGZyb20gc2NvcGUgcmVnYXJkbGVzcyBvZiB2YWxpZGl0eS5cbiAgdGhpcy4kdmFsaWRhdG9ycyA9IHt9O1xuICB0aGlzLiRhc3luY1ZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kcGFyc2VycyA9IFtdO1xuICB0aGlzLiRmb3JtYXR0ZXJzID0gW107XG4gIHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgdGhpcy4kdG91Y2hlZCA9IGZhbHNlO1xuICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gIHRoaXMuJHZhbGlkID0gdHJ1ZTtcbiAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xuICB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJCRzdWNjZXNzID0ge307IC8vIGtlZXAgdmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJHBlbmRpbmcgPSB1bmRlZmluZWQ7IC8vIGtlZXAgcGVuZGluZyBrZXlzIGhlcmVcbiAgdGhpcy4kbmFtZSA9ICRpbnRlcnBvbGF0ZSgkYXR0ci5uYW1lIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTtcbiAgdGhpcy4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG4gIHRoaXMuJG9wdGlvbnMgPSBkZWZhdWx0TW9kZWxPcHRpb25zO1xuXG4gIHRoaXMuJCRwYXJzZWROZ01vZGVsID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpO1xuICB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbiA9IHRoaXMuJCRwYXJzZWROZ01vZGVsLmFzc2lnbjtcbiAgdGhpcy4kJG5nTW9kZWxHZXQgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbDtcbiAgdGhpcy4kJG5nTW9kZWxTZXQgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbjtcbiAgdGhpcy4kJHBlbmRpbmdEZWJvdW5jZSA9IG51bGw7XG4gIHRoaXMuJCRwYXJzZXJWYWxpZCA9IHVuZGVmaW5lZDtcblxuICB0aGlzLiQkY3VycmVudFZhbGlkYXRpb25SdW5JZCA9IDA7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTU4MzNcbiAgLy8gUHJldmVudCBgJCRzY29wZWAgZnJvbSBiZWluZyBpdGVyYXRlZCBvdmVyIGJ5IGBjb3B5YCB3aGVuIE5nTW9kZWxDb250cm9sbGVyIGlzIGRlZXAgd2F0Y2hlZFxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJyQkc2NvcGUnLCB7dmFsdWU6ICRzY29wZX0pO1xuICB0aGlzLiQkYXR0ciA9ICRhdHRyO1xuICB0aGlzLiQkZWxlbWVudCA9ICRlbGVtZW50O1xuICB0aGlzLiQkYW5pbWF0ZSA9ICRhbmltYXRlO1xuICB0aGlzLiQkdGltZW91dCA9ICR0aW1lb3V0O1xuICB0aGlzLiQkcGFyc2UgPSAkcGFyc2U7XG4gIHRoaXMuJCRxID0gJHE7XG4gIHRoaXMuJCRleGNlcHRpb25IYW5kbGVyID0gJGV4Y2VwdGlvbkhhbmRsZXI7XG5cbiAgc2V0dXBWYWxpZGl0eSh0aGlzKTtcbiAgc2V0dXBNb2RlbFdhdGNoZXIodGhpcyk7XG59XG5cbk5nTW9kZWxDb250cm9sbGVyLnByb3RvdHlwZSA9IHtcbiAgJCRpbml0R2V0dGVyU2V0dGVyczogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdnZXR0ZXJTZXR0ZXInKSkge1xuICAgICAgdmFyIGludm9rZU1vZGVsR2V0dGVyID0gdGhpcy4kJHBhcnNlKHRoaXMuJCRhdHRyLm5nTW9kZWwgKyAnKCknKSxcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlciA9IHRoaXMuJCRwYXJzZSh0aGlzLiQkYXR0ci5uZ01vZGVsICsgJygkJCRwKScpO1xuXG4gICAgICB0aGlzLiQkbmdNb2RlbEdldCA9IGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IHRoaXMuJCRwYXJzZWROZ01vZGVsKCRzY29wZSk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgbW9kZWxWYWx1ZSA9IGludm9rZU1vZGVsR2V0dGVyKCRzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gICAgICB9O1xuICAgICAgdGhpcy4kJG5nTW9kZWxTZXQgPSBmdW5jdGlvbigkc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMuJCRwYXJzZWROZ01vZGVsKCRzY29wZSkpKSB7XG4gICAgICAgICAgaW52b2tlTW9kZWxTZXR0ZXIoJHNjb3BlLCB7JCQkcDogbmV3VmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbigkc2NvcGUsIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLiQkcGFyc2VkTmdNb2RlbC5hc3NpZ24pIHtcbiAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsICdFeHByZXNzaW9uIFxcJ3swfVxcJyBpcyBub24tYXNzaWduYWJsZS4gRWxlbWVudDogezF9JyxcbiAgICAgICAgICB0aGlzLiQkYXR0ci5uZ01vZGVsLCBzdGFydGluZ1RhZyh0aGlzLiQkZWxlbWVudCkpO1xuICAgIH1cbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJlbmRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXcgbmVlZHMgdG8gYmUgdXBkYXRlZC4gSXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgdXNlciBvZiB0aGUgbmctbW9kZWxcbiAgICogZGlyZWN0aXZlIHdpbGwgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBUaGUgYCRyZW5kZXIoKWAgbWV0aG9kIGlzIGludm9rZWQgaW4gdGhlIGZvbGxvd2luZyBzaXR1YXRpb25zOlxuICAgKlxuICAgKiAqIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgaXMgY2FsbGVkLiAgSWYgd2UgYXJlIHJvbGxpbmcgYmFjayB0aGUgdmlldyB2YWx1ZSB0byB0aGUgbGFzdFxuICAgKiAgIGNvbW1pdHRlZCB2YWx1ZSB0aGVuIGAkcmVuZGVyKClgIGlzIGNhbGxlZCB0byB1cGRhdGUgdGhlIGlucHV0IGNvbnRyb2wuXG4gICAqICogVGhlIHZhbHVlIHJlZmVyZW5jZWQgYnkgYG5nLW1vZGVsYCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIGJvdGggdGhlIGAkbW9kZWxWYWx1ZWAgYW5kXG4gICAqICAgdGhlIGAkdmlld1ZhbHVlYCBhcmUgZGlmZmVyZW50IGZyb20gbGFzdCB0aW1lLlxuICAgKlxuICAgKiBTaW5jZSBgbmctbW9kZWxgIGRvZXMgbm90IGRvIGEgZGVlcCB3YXRjaCwgYCRyZW5kZXIoKWAgaXMgb25seSBpbnZva2VkIGlmIHRoZSB2YWx1ZXMgb2ZcbiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgZnJvbSB0aGVpciBwcmV2aW91cyB2YWx1ZXMuIElmIGAkbW9kZWxWYWx1ZWBcbiAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCBpZiB5b3Ugb25seSBjaGFuZ2UgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0cy5cbiAgICovXG4gICRyZW5kZXI6IG5vb3AsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgb2YgYW4gaW5wdXQgaXMgZW1wdHkuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgdGhlIHJlcXVpcmVkIGRpcmVjdGl2ZSBkb2VzIHRoaXMgdG8gd29yayBvdXQgaWYgdGhlIGlucHV0IGhhcyBkYXRhIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgYCRpc0VtcHR5YCBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAsIGAnJ2AsIGBudWxsYCBvciBgTmFOYC5cbiAgICpcbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGZvciBpbnB1dCBkaXJlY3RpdmVzIHdob3NlIGNvbmNlcHQgb2YgYmVpbmcgZW1wdHkgaXMgZGlmZmVyZW50IGZyb20gdGhlXG4gICAqIGRlZmF1bHQuIFRoZSBgY2hlY2tib3hJbnB1dFR5cGVgIGRpcmVjdGl2ZSBkb2VzIHRoaXMgYmVjYXVzZSBpbiBpdHMgY2FzZSBhIHZhbHVlIG9mIGBmYWxzZWBcbiAgICogaW1wbGllcyBlbXB0eS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGlucHV0IHRvIGNoZWNrIGZvciBlbXB0aW5lc3MuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgXCJlbXB0eVwiLlxuICAgKi9cbiAgJGlzRW1wdHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTtcbiAgfSxcblxuICAkJHVwZGF0ZUVtcHR5Q2xhc3NlczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy4kaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuJCRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBOT1RfRU1QVFlfQ0xBU1MpO1xuICAgICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIEVNUFRZX0NMQVNTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIEVNUFRZX0NMQVNTKTtcbiAgICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBOT1RfRU1QVFlfQ0xBU1MpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRQcmlzdGluZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lXG4gICAqIHN0YXRlIChgbmctcHJpc3RpbmVgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHByaXN0aW5lIHdoZW4gdGhlIGNvbnRyb2xcbiAgICogaGFzIG5vdCBiZWVuIGNoYW5nZWQgZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgJHNldFByaXN0aW5lOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIGRpcnR5IHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXByaXN0aW5lYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eVxuICAgKiBzdGF0ZSAoYG5nLWRpcnR5YCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBkaXJ0eSB3aGVuIHRoZSBjb250cm9sIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgJHNldERpcnR5OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRkaXJ0eSA9IHRydWU7XG4gICAgdGhpcy4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VW50b3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdW50b3VjaGVkIHN0YXRlIChgbmctdW50b3VjaGVkYCBjbGFzcykuIFVwb24gY29tcGlsYXRpb24sIGEgbW9kZWwgaXMgc2V0IGFzIHVudG91Y2hlZFxuICAgKiBieSBkZWZhdWx0LCBob3dldmVyIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSB0aGF0IHN0YXRlIGlmIHRoZSBtb2RlbCBoYXNcbiAgICogYWxyZWFkeSBiZWVuIHRvdWNoZWQgYnkgdGhlIHVzZXIuXG4gICAqL1xuICAkc2V0VW50b3VjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiR0b3VjaGVkID0gZmFsc2U7XG4gICAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgVU5UT1VDSEVEX0NMQVNTLCBUT1VDSEVEX0NMQVNTKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRUb3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB0b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXVudG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdG91Y2hlZCBzdGF0ZSAoYG5nLXRvdWNoZWRgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHRvdWNoZWQgd2hlbiB0aGUgdXNlciBoYXNcbiAgICogZmlyc3QgZm9jdXNlZCB0aGUgY29udHJvbCBlbGVtZW50IGFuZCB0aGVuIHNoaWZ0ZWQgZm9jdXMgYXdheSBmcm9tIHRoZSBjb250cm9sIChibHVyIGV2ZW50KS5cbiAgICovXG4gICRzZXRUb3VjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiR0b3VjaGVkID0gdHJ1ZTtcbiAgICB0aGlzLiR1bnRvdWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgVE9VQ0hFRF9DTEFTUywgVU5UT1VDSEVEX0NMQVNTKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VsIGFuIHVwZGF0ZSBhbmQgcmVzZXQgdGhlIGlucHV0IGVsZW1lbnQncyB2YWx1ZSB0byBwcmV2ZW50IGFuIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYCxcbiAgICogd2hpY2ggbWF5IGJlIGNhdXNlZCBieSBhIHBlbmRpbmcgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIHNvbWVcbiAgICogZnV0dXJlIGV2ZW50LlxuICAgKlxuICAgKiBJZiB5b3UgaGF2ZSBhbiBpbnB1dCB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHNldCB1cCBkZWJvdW5jZWQgdXBkYXRlcyBvciB1cGRhdGVzIHRoYXRcbiAgICogZGVwZW5kIG9uIHNwZWNpYWwgZXZlbnRzIHN1Y2ggYXMgYGJsdXJgLCB0aGVyZSBjYW4gYmUgYSBwZXJpb2Qgd2hlbiB0aGUgYCR2aWV3VmFsdWVgIGlzIG91dCBvZlxuICAgKiBzeW5jIHdpdGggdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBJbiB0aGlzIGNhc2UsIHlvdSBjYW4gdXNlIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgdG8gbWFudWFsbHkgY2FuY2VsIHRoZSBkZWJvdW5jZWQgLyBmdXR1cmUgdXBkYXRlXG4gICAqIGFuZCByZXNldCB0aGUgaW5wdXQgdG8gdGhlIGxhc3QgY29tbWl0dGVkIHZpZXcgdmFsdWUuXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdGhhdCB5b3UgcnVuIGludG8gZGlmZmljdWx0aWVzIGlmIHlvdSB0cnkgdG8gdXBkYXRlIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYFxuICAgKiBwcm9ncmFtbWF0aWNhbGx5IGJlZm9yZSB0aGVzZSBkZWJvdW5jZWQvZnV0dXJlIGV2ZW50cyBoYXZlIHJlc29sdmVkL29jY3VycmVkLCBiZWNhdXNlIEFuZ3VsYXInc1xuICAgKiBkaXJ0eSBjaGVja2luZyBtZWNoYW5pc20gaXMgbm90IGFibGUgdG8gdGVsbCB3aGV0aGVyIHRoZSBtb2RlbCBoYXMgYWN0dWFsbHkgY2hhbmdlZCBvciBub3QuXG4gICAqXG4gICAqIFRoZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBwcm9ncmFtbWF0aWNhbGx5IGNoYW5naW5nIHRoZSBtb2RlbCBvZiBhblxuICAgKiBpbnB1dCB3aGljaCBtYXkgaGF2ZSBzdWNoIGV2ZW50cyBwZW5kaW5nLiBUaGlzIGlzIGltcG9ydGFudCBpbiBvcmRlciB0byBtYWtlIHN1cmUgdGhhdCB0aGVcbiAgICogaW5wdXQgZmllbGQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIG5ldyBtb2RlbCB2YWx1ZSBhbmQgYW55IHBlbmRpbmcgb3BlcmF0aW9ucyBhcmUgY2FuY2VsbGVkLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmctbW9kZWwtY2FuY2VsLXVwZGF0ZVwiIG1vZHVsZT1cImNhbmNlbC11cGRhdGUtZXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdjYW5jZWwtdXBkYXRlLWV4YW1wbGUnLCBbXSlcbiAgICpcbiAgICogICAgIC5jb250cm9sbGVyKCdDYW5jZWxVcGRhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgJHNjb3BlLm1vZGVsID0ge3ZhbHVlMTogJycsIHZhbHVlMjogJyd9O1xuICAgKlxuICAgKiAgICAgICAkc2NvcGUuc2V0RW1wdHkgPSBmdW5jdGlvbihlLCB2YWx1ZSwgcm9sbGJhY2spIHtcbiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgKiAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgKiAgICAgICAgICAgaWYgKHJvbGxiYWNrKSB7XG4gICAqICAgICAgICAgICAgICRzY29wZS5teUZvcm1bdmFsdWVdLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgKiAgICAgICAgICAgfVxuICAgKiAgICAgICAgICAgJHNjb3BlLm1vZGVsW3ZhbHVlXSA9ICcnO1xuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfTtcbiAgICogICAgIH1dKTtcbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNhbmNlbFVwZGF0ZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICAgPHA+Qm90aCBvZiB0aGVzZSBpbnB1dHMgYXJlIG9ubHkgdXBkYXRlZCBpZiB0aGV5IGFyZSBibHVycmVkLiBIaXR0aW5nIGVzY2FwZSBzaG91bGRcbiAgICogICAgICAgZW1wdHkgdGhlbS4gRm9sbG93IHRoZXNlIHN0ZXBzIGFuZCBvYnNlcnZlIHRoZSBkaWZmZXJlbmNlOjwvcD5cbiAgICogICAgICAgPG9sPlxuICAgKiAgICAgICAgIDxsaT5UeXBlIHNvbWV0aGluZyBpbiB0aGUgaW5wdXQuIFlvdSB3aWxsIHNlZSB0aGF0IHRoZSBtb2RlbCBpcyBub3QgeWV0IHVwZGF0ZWQ8L2xpPlxuICAgKiAgICAgICAgIDxsaT5QcmVzcyB0aGUgRXNjYXBlIGtleS5cbiAgICogICAgICAgICAgIDxvbD5cbiAgICogICAgICAgICAgICAgPGxpPiBJbiB0aGUgZmlyc3QgZXhhbXBsZSwgbm90aGluZyBoYXBwZW5zLCBiZWNhdXNlIHRoZSBtb2RlbCBpcyBhbHJlYWR5ICcnLCBhbmQgbm9cbiAgICogICAgICAgICAgICAgdXBkYXRlIGlzIGRldGVjdGVkLiBJZiB5b3UgYmx1ciB0aGUgaW5wdXQsIHRoZSBtb2RlbCB3aWxsIGJlIHNldCB0byB0aGUgY3VycmVudCB2aWV3LlxuICAgKiAgICAgICAgICAgICA8L2xpPlxuICAgKiAgICAgICAgICAgICA8bGk+IEluIHRoZSBzZWNvbmQgZXhhbXBsZSwgdGhlIHBlbmRpbmcgdXBkYXRlIGlzIGNhbmNlbGxlZCwgYW5kIHRoZSBpbnB1dCBpcyBzZXQgYmFja1xuICAgKiAgICAgICAgICAgICB0byB0aGUgbGFzdCBjb21taXR0ZWQgdmlldyB2YWx1ZSAoJycpLiBCbHVycmluZyB0aGUgaW5wdXQgZG9lcyBub3RoaW5nLlxuICAgKiAgICAgICAgICAgICA8L2xpPlxuICAgKiAgICAgICAgICAgPC9vbD5cbiAgICogICAgICAgICA8L2xpPlxuICAgKiAgICAgICA8L29sPlxuICAgKlxuICAgKiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCI+XG4gICAqICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjFcIj5XaXRob3V0ICRyb2xsYmFja1ZpZXdWYWx1ZSgpOjwvcD5cbiAgICogICAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUxXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24xXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTFcIlxuICAgKiAgICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJzZXRFbXB0eSgkZXZlbnQsICd2YWx1ZTEnKVwiPlxuICAgKiAgICAgICAgICAgdmFsdWUxOiBcInt7IG1vZGVsLnZhbHVlMSB9fVwiXG4gICAqICAgICAgICAgPC9kaXY+XG4gICAqXG4gICAqICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjJcIj5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpOjwvcD5cbiAgICogICAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUyXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24yXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTJcIlxuICAgKiAgICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJzZXRFbXB0eSgkZXZlbnQsICd2YWx1ZTInLCB0cnVlKVwiPlxuICAgKiAgICAgICAgICAgdmFsdWUyOiBcInt7IG1vZGVsLnZhbHVlMiB9fVwiXG4gICAqICAgICAgICAgPC9kaXY+XG4gICAqICAgICAgIDwvZm9ybT5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpdjpudGgtY2hpbGQoMSkge1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzBweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqL1xuICAkcm9sbGJhY2tWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCR0aW1lb3V0LmNhbmNlbCh0aGlzLiQkcGVuZGluZ0RlYm91bmNlKTtcbiAgICB0aGlzLiR2aWV3VmFsdWUgPSB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB0aGlzLiRyZW5kZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUnVucyBlYWNoIG9mIHRoZSByZWdpc3RlcmVkIHZhbGlkYXRvcnMgKGZpcnN0IHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYW5kIHRoZW5cbiAgICogYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMpLlxuICAgKiBJZiB0aGUgdmFsaWRpdHkgY2hhbmdlcyB0byBpbnZhbGlkLCB0aGUgbW9kZWwgd2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAsXG4gICAqIHVubGVzcyB7QGxpbmsgbmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zLmFsbG93SW52YWxpZGB9IGlzIGB0cnVlYC5cbiAgICogSWYgdGhlIHZhbGlkaXR5IGNoYW5nZXMgdG8gdmFsaWQsIGl0IHdpbGwgc2V0IHRoZSBtb2RlbCB0byB0aGUgbGFzdCBhdmFpbGFibGUgdmFsaWRcbiAgICogYCRtb2RlbFZhbHVlYCwgaS5lLiBlaXRoZXIgdGhlIGxhc3QgcGFyc2VkIHZhbHVlIG9yIHRoZSBsYXN0IHZhbHVlIHNldCBmcm9tIHRoZSBzY29wZS5cbiAgICovXG4gICR2YWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gaWdub3JlICR2YWxpZGF0ZSBiZWZvcmUgbW9kZWwgaXMgaW5pdGlhbGl6ZWRcbiAgICBpZiAoaXNOdW1iZXJOYU4odGhpcy4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld1ZhbHVlID0gdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgLy8gTm90ZTogd2UgdXNlIHRoZSAkJHJhd01vZGVsVmFsdWUgYXMgJG1vZGVsVmFsdWUgbWlnaHQgaGF2ZSBiZWVuXG4gICAgLy8gc2V0IHRvIHVuZGVmaW5lZCBkdXJpbmcgYSB2aWV3IC0+IG1vZGVsIHVwZGF0ZSB0aGF0IGZvdW5kIHZhbGlkYXRpb25cbiAgICAvLyBlcnJvcnMuIFdlIGNhbid0IHBhcnNlIHRoZSB2aWV3IGhlcmUsIHNpbmNlIHRoYXQgY291bGQgY2hhbmdlXG4gICAgLy8gdGhlIG1vZGVsIGFsdGhvdWdoIG5laXRoZXIgdmlld1ZhbHVlIG5vciB0aGUgbW9kZWwgb24gdGhlIHNjb3BlIGNoYW5nZWRcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHRoaXMuJCRyYXdNb2RlbFZhbHVlO1xuXG4gICAgdmFyIHByZXZWYWxpZCA9IHRoaXMuJHZhbGlkO1xuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IHRoaXMuJG1vZGVsVmFsdWU7XG5cbiAgICB2YXIgYWxsb3dJbnZhbGlkID0gdGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2FsbG93SW52YWxpZCcpO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHtcbiAgICAgIC8vIElmIHRoZXJlIHdhcyBubyBjaGFuZ2UgaW4gdmFsaWRpdHksIGRvbid0IHVwZGF0ZSB0aGUgbW9kZWxcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgY2hhbmdpbmcgYW4gaW52YWxpZCBtb2RlbFZhbHVlIHRvIHVuZGVmaW5lZFxuICAgICAgaWYgKCFhbGxvd0ludmFsaWQgJiYgcHJldlZhbGlkICE9PSBhbGxWYWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayB0aGlzLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIHRoYXQuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoYXQuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgICAgdGhhdC4kJHdyaXRlTW9kZWxUb1Njb3BlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAkJHJ1blZhbGlkYXRvcnM6IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZG9uZUNhbGxiYWNrKSB7XG4gICAgdGhpcy4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQrKztcbiAgICB2YXIgbG9jYWxWYWxpZGF0aW9uUnVuSWQgPSB0aGlzLiQkY3VycmVudFZhbGlkYXRpb25SdW5JZDtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3JcbiAgICBpZiAoIXByb2Nlc3NQYXJzZUVycm9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkpIHtcbiAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1BhcnNlRXJyb3JzKCkge1xuICAgICAgdmFyIGVycm9yS2V5ID0gdGhhdC4kJHBhcnNlck5hbWUgfHwgJ3BhcnNlJztcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGF0LiQkcGFyc2VyVmFsaWQpKSB7XG4gICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhhdC4kJHBhcnNlclZhbGlkKSB7XG4gICAgICAgICAgZm9yRWFjaCh0aGF0LiR2YWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3JFYWNoKHRoYXQuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHRoZSBwYXJzZSBlcnJvciBsYXN0LCB0byBwcmV2ZW50IHVuc2V0dGluZyBpdCwgc2hvdWxkIGEgJHZhbGlkYXRvcnMga2V5ID09IHBhcnNlck5hbWVcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIHRoYXQuJCRwYXJzZXJWYWxpZCk7XG4gICAgICAgIHJldHVybiB0aGF0LiQkcGFyc2VyVmFsaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICB2YXIgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKHRoYXQuJHZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gQm9vbGVhbih2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSk7XG4gICAgICAgIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSBzeW5jVmFsaWRhdG9yc1ZhbGlkICYmIHJlc3VsdDtcbiAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFzeW5jVmFsaWRhdG9yc1ZhbGlkKSB7XG4gICAgICAgIGZvckVhY2godGhhdC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQXN5bmNWYWxpZGF0b3JzKCkge1xuICAgICAgdmFyIHZhbGlkYXRvclByb21pc2VzID0gW107XG4gICAgICB2YXIgYWxsVmFsaWQgPSB0cnVlO1xuICAgICAgZm9yRWFjaCh0aGF0LiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpO1xuICAgICAgICBpZiAoIWlzUHJvbWlzZUxpa2UocHJvbWlzZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdub3Byb21pc2UnLFxuICAgICAgICAgICAgJ0V4cGVjdGVkIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgdG8gcmV0dXJuIGEgcHJvbWlzZSBidXQgZ290IFxcJ3swfVxcJyBpbnN0ZWFkLicsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHRydWUpO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhbGxWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIGZhbHNlKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXZhbGlkYXRvclByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICB2YWxpZGF0aW9uRG9uZSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoYXQuJCRxLmFsbCh2YWxpZGF0b3JQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCk7XG4gICAgICAgIH0sIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gdGhhdC4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcbiAgICAgICAgdGhhdC4kc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGlvbkRvbmUoYWxsVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gdGhhdC4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcblxuICAgICAgICBkb25lQ2FsbGJhY2soYWxsVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhIHBlbmRpbmcgdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIHRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gICRjb21taXRWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSB0aGlzLiR2aWV3VmFsdWU7XG5cbiAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG5cbiAgICAvLyBJZiB0aGUgdmlldyB2YWx1ZSBoYXMgbm90IGNoYW5nZWQgdGhlbiB3ZSBzaG91bGQganVzdCBleGl0LCBleGNlcHQgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXNcbiAgICAvLyBhIG5hdGl2ZSB2YWxpZGF0b3Igb24gdGhlIGVsZW1lbnQuIEluIHRoaXMgY2FzZSB0aGUgdmFsaWRhdGlvbiBzdGF0ZSBtYXkgaGF2ZSBjaGFuZ2VkIGV2ZW4gdGhvdWdoXG4gICAgLy8gdGhlIHZpZXdWYWx1ZSBoYXMgc3RheWVkIGVtcHR5LlxuICAgIGlmICh0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9PT0gdmlld1ZhbHVlICYmICh2aWV3VmFsdWUgIT09ICcnIHx8ICF0aGlzLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgIHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuXG4gICAgLy8gY2hhbmdlIHRvIGRpcnR5XG4gICAgaWYgKHRoaXMuJHByaXN0aW5lKSB7XG4gICAgICB0aGlzLiRzZXREaXJ0eSgpO1xuICAgIH1cbiAgICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSgpO1xuICB9LFxuXG4gICQkcGFyc2VBbmRWYWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXdWYWx1ZSA9IHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIHZhciBtb2RlbFZhbHVlID0gdmlld1ZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHRoaXMuJCRwYXJzZXJWYWxpZCA9IGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpID8gdW5kZWZpbmVkIDogdHJ1ZTtcblxuICAgIGlmICh0aGlzLiQkcGFyc2VyVmFsaWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy4kcGFyc2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb2RlbFZhbHVlID0gdGhpcy4kcGFyc2Vyc1tpXShtb2RlbFZhbHVlKTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy4kJHBhcnNlclZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyTmFOKHRoaXMuJG1vZGVsVmFsdWUpKSB7XG4gICAgICAvLyB0aGlzLiRtb2RlbFZhbHVlIGhhcyBub3QgYmVlbiB0b3VjaGVkIHlldC4uLlxuICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IHRoaXMuJCRuZ01vZGVsR2V0KHRoaXMuJCRzY29wZSk7XG4gICAgfVxuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IHRoaXMuJG1vZGVsVmFsdWU7XG4gICAgdmFyIGFsbG93SW52YWxpZCA9IHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdhbGxvd0ludmFsaWQnKTtcbiAgICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG5cbiAgICBpZiAoYWxsb3dJbnZhbGlkKSB7XG4gICAgICB0aGlzLiRtb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgfVxuXG4gICAgLy8gUGFzcyB0aGUgJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlIGhlcmUsIGJlY2F1c2UgdGhlIGNhY2hlZCB2aWV3VmFsdWUgbWlnaHQgYmUgb3V0IG9mIGRhdGUuXG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIGUuZy4gJHNldFZpZXdWYWx1ZSBpcyBjYWxsZWQgZnJvbSBpbnNpZGUgYSBwYXJzZXJcbiAgICB0aGlzLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHtcbiAgICAgIGlmICghYWxsb3dJbnZhbGlkKSB7XG4gICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIHRoaXMuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAvLyB0aGF0IGp1c3QgY2FsbCAkc2V0VmFsaWRpdHkgYW5kIG5lZWQgdGhlIG1vZGVsIHZhbHVlXG4gICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgdGhhdC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgd3JpdGVUb01vZGVsSWZOZWVkZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCkge1xuICAgICAgaWYgKHRoYXQuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgIHRoYXQuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAkJHdyaXRlTW9kZWxUb1Njb3BlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkbmdNb2RlbFNldCh0aGlzLiQkc2NvcGUsIHRoaXMuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2godGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgICAgdGhpcy4kJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVcGRhdGUgdGhlIHZpZXcgdmFsdWUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhIGNvbnRyb2wgd2FudHMgdG8gY2hhbmdlIHRoZSB2aWV3IHZhbHVlOyB0eXBpY2FsbHksXG4gICAqIHRoaXMgaXMgZG9uZSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9XG4gICAqIGRpcmVjdGl2ZSBjYWxscyBpdCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgY2hhbmdlcyBhbmQge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fVxuICAgKiBjYWxscyBpdCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogV2hlbiBgJHNldFZpZXdWYWx1ZWAgaXMgY2FsbGVkLCB0aGUgbmV3IGB2YWx1ZWAgd2lsbCBiZSBzdGFnZWQgZm9yIGNvbW1pdHRpbmcgdGhyb3VnaCB0aGUgYCRwYXJzZXJzYFxuICAgKiBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIElmIHRoZXJlIGFyZSBubyBzcGVjaWFsIHtAbGluayBuZ01vZGVsT3B0aW9uc30gc3BlY2lmaWVkIHRoZW4gdGhlIHN0YWdlZFxuICAgKiB2YWx1ZSBpcyBzZW50IGRpcmVjdGx5IGZvciBwcm9jZXNzaW5nIHRocm91Z2ggdGhlIGAkcGFyc2Vyc2AgcGlwZWxpbmUuIEFmdGVyIHRoaXMsIHRoZSBgJHZhbGlkYXRvcnNgIGFuZFxuICAgKiBgJGFzeW5jVmFsaWRhdG9yc2AgYXJlIGNhbGxlZCBhbmQgdGhlIHZhbHVlIGlzIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYC5cbiAgICogRmluYWxseSwgdGhlIHZhbHVlIGlzIHNldCB0byB0aGUgKipleHByZXNzaW9uKiogc3BlY2lmaWVkIGluIHRoZSBgbmctbW9kZWxgIGF0dHJpYnV0ZSBhbmRcbiAgICogYWxsIHRoZSByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMsIGluIHRoZSBgJHZpZXdDaGFuZ2VMaXN0ZW5lcnNgIGxpc3QgYXJlIGNhbGxlZC5cbiAgICpcbiAgICogSW4gY2FzZSB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBgdXBkYXRlT25gXG4gICAqIGFuZCB0aGUgYGRlZmF1bHRgIHRyaWdnZXIgaXMgbm90IGxpc3RlZCwgYWxsIHRob3NlIGFjdGlvbnMgd2lsbCByZW1haW4gcGVuZGluZyB1bnRpbCBvbmUgb2YgdGhlXG4gICAqIGB1cGRhdGVPbmAgZXZlbnRzIGlzIHRyaWdnZXJlZCBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEFsbCB0aGVzZSBhY3Rpb25zIHdpbGwgYmUgZGVib3VuY2VkIGlmIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfVxuICAgKiBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGEgY3VzdG9tIGRlYm91bmNlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqIE5vdGUgdGhhdCBhIGAkZGlnZXN0YCBpcyBvbmx5IHRyaWdnZXJlZCBvbmNlIHRoZSBgdXBkYXRlT25gIGV2ZW50cyBhcmUgZmlyZWQsIG9yIGlmIGBkZWJvdW5jZWBcbiAgICogaXMgc3BlY2lmaWVkLCBvbmNlIHRoZSB0aW1lciBydW5zIG91dC5cbiAgICpcbiAgICogV2hlbiB1c2VkIHdpdGggc3RhbmRhcmQgaW5wdXRzLCB0aGUgdmlldyB2YWx1ZSB3aWxsIGFsd2F5cyBiZSBhIHN0cmluZyAod2hpY2ggaXMgaW4gc29tZSBjYXNlc1xuICAgKiBwYXJzZWQgaW50byBhbm90aGVyIHR5cGUsIHN1Y2ggYXMgYSBgRGF0ZWAgb2JqZWN0IGZvciBgaW5wdXRbZGF0ZV1gLilcbiAgICogSG93ZXZlciwgY3VzdG9tIGNvbnRyb2xzIG1pZ2h0IGFsc28gcGFzcyBvYmplY3RzIHRvIHRoaXMgbWV0aG9kLiBJbiB0aGlzIGNhc2UsIHdlIHNob3VsZCBtYWtlXG4gICAqIGEgY29weSBvZiB0aGUgb2JqZWN0IGJlZm9yZSBwYXNzaW5nIGl0IHRvIGAkc2V0Vmlld1ZhbHVlYC4gVGhpcyBpcyBiZWNhdXNlIGBuZ01vZGVsYCBkb2VzIG5vdFxuICAgKiBwZXJmb3JtIGEgZGVlcCB3YXRjaCBvZiBvYmplY3RzLCBpdCBvbmx5IGxvb2tzIGZvciBhIGNoYW5nZSBvZiBpZGVudGl0eS4gSWYgeW91IG9ubHkgY2hhbmdlXG4gICAqIHRoZSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IHRoZW4gbmdNb2RlbCB3aWxsIG5vdCByZWFsaXplIHRoYXQgdGhlIG9iamVjdCBoYXMgY2hhbmdlZCBhbmRcbiAgICogd2lsbCBub3QgaW52b2tlIHRoZSBgJHBhcnNlcnNgIGFuZCBgJHZhbGlkYXRvcnNgIHBpcGVsaW5lcy4gRm9yIHRoaXMgcmVhc29uLCB5b3Ugc2hvdWxkXG4gICAqIG5vdCBjaGFuZ2UgcHJvcGVydGllcyBvZiB0aGUgY29weSBvbmNlIGl0IGhhcyBiZWVuIHBhc3NlZCB0byBgJHNldFZpZXdWYWx1ZWAuXG4gICAqIE90aGVyd2lzZSB5b3UgbWF5IGNhdXNlIHRoZSBtb2RlbCB2YWx1ZSBvbiB0aGUgc2NvcGUgdG8gY2hhbmdlIGluY29ycmVjdGx5LlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgKiBJbiBhbnkgY2FzZSwgdGhlIHZhbHVlIHBhc3NlZCB0byB0aGUgbWV0aG9kIHNob3VsZCBhbHdheXMgcmVmbGVjdCB0aGUgY3VycmVudCB2YWx1ZVxuICAgKiBvZiB0aGUgY29udHJvbC4gRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgY2FsbGluZyBgJHNldFZpZXdWYWx1ZWAgZm9yIGFuIGlucHV0IGVsZW1lbnQsXG4gICAqIHlvdSBzaG91bGQgcGFzcyB0aGUgaW5wdXQgRE9NIHZhbHVlLiBPdGhlcndpc2UsIHRoZSBjb250cm9sIGFuZCB0aGUgc2NvcGUgbW9kZWwgYmVjb21lXG4gICAqIG91dCBvZiBzeW5jLiBJdCdzIGFsc28gaW1wb3J0YW50IHRvIG5vdGUgdGhhdCBgJHNldFZpZXdWYWx1ZWAgZG9lcyBub3QgY2FsbCBgJHJlbmRlcmAgb3IgY2hhbmdlXG4gICAqIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlIGluIGFueSB3YXkuIElmIHdlIHdhbnQgdG8gY2hhbmdlIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlXG4gICAqIHByb2dyYW1tYXRpY2FsbHksIHdlIHNob3VsZCB1cGRhdGUgdGhlIGBuZ01vZGVsYCBzY29wZSBleHByZXNzaW9uLiBJdHMgbmV3IHZhbHVlIHdpbGwgYmVcbiAgICogcGlja2VkIHVwIGJ5IHRoZSBtb2RlbCBjb250cm9sbGVyLCB3aGljaCB3aWxsIHJ1biBpdCB0aHJvdWdoIHRoZSBgJGZvcm1hdHRlcnNgLCBgJHJlbmRlcmAgaXRcbiAgICogdG8gdXBkYXRlIHRoZSBET00sIGFuZCBmaW5hbGx5IGNhbGwgYCR2YWxpZGF0ZWAgb24gaXQuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIGZyb20gdGhlIHZpZXcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmlnZ2VyIEV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUuXG4gICAqL1xuICAkc2V0Vmlld1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgdHJpZ2dlcikge1xuICAgIHRoaXMuJHZpZXdWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLiRvcHRpb25zLmdldE9wdGlvbigndXBkYXRlT25EZWZhdWx0JykpIHtcbiAgICAgIHRoaXMuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCh0cmlnZ2VyKTtcbiAgICB9XG4gIH0sXG5cbiAgJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdDogZnVuY3Rpb24odHJpZ2dlcikge1xuICAgIHZhciBkZWJvdW5jZURlbGF5ID0gdGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2RlYm91bmNlJyk7XG5cbiAgICBpZiAoaXNOdW1iZXIoZGVib3VuY2VEZWxheVt0cmlnZ2VyXSkpIHtcbiAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZURlbGF5W3RyaWdnZXJdO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VEZWxheVsnZGVmYXVsdCddKSkge1xuICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlRGVsYXlbJ2RlZmF1bHQnXTtcbiAgICB9XG5cbiAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIGlmIChkZWJvdW5jZURlbGF5ID4gMCkgeyAvLyB0aGlzIGZhaWxzIGlmIGRlYm91bmNlRGVsYXkgaXMgYW4gb2JqZWN0XG4gICAgICB0aGlzLiQkcGVuZGluZ0RlYm91bmNlID0gdGhpcy4kJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoYXQuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSwgZGVib3VuY2VEZWxheSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLiQkc2NvcGUuJHJvb3QuJCRwaGFzZSkge1xuICAgICAgdGhpcy4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJCRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoYXQuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJG92ZXJyaWRlTW9kZWxPcHRpb25zXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPdmVycmlkZSB0aGUgY3VycmVudCBtb2RlbCBvcHRpb25zIHNldHRpbmdzIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqXG4gICAqIFRoZSBwcmV2aW91cyBgTW9kZWxPcHRpb25zYCB2YWx1ZSB3aWxsIG5vdCBiZSBtb2RpZmllZC4gSW5zdGVhZCwgYVxuICAgKiBuZXcgYE1vZGVsT3B0aW9uc2Agb2JqZWN0IHdpbGwgaW5oZXJpdCBmcm9tIHRoZSBwcmV2aW91cyBvbmUgb3ZlcnJpZGluZ1xuICAgKiBvciBpbmhlcml0aW5nIHNldHRpbmdzIHRoYXQgYXJlIGRlZmluZWQgaW4gdGhlIGdpdmVuIHBhcmFtZXRlci5cbiAgICpcbiAgICogU2VlIHtAbGluayBuZ01vZGVsT3B0aW9uc30gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgb3B0aW9ucyBjYW4gYmUgc3BlY2lmaWVkXG4gICAqIGFuZCBob3cgbW9kZWwgb3B0aW9uIGluaGVyaXRhbmNlIHdvcmtzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhIGhhc2ggb2Ygc2V0dGluZ3MgdG8gb3ZlcnJpZGUgdGhlIHByZXZpb3VzIG9wdGlvbnNcbiAgICpcbiAgICovXG4gICRvdmVycmlkZU1vZGVsT3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuJG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zLmNyZWF0ZUNoaWxkKG9wdGlvbnMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzZXR1cE1vZGVsV2F0Y2hlcihjdHJsKSB7XG4gIC8vIG1vZGVsIC0+IHZhbHVlXG4gIC8vIE5vdGU6IHdlIGNhbm5vdCB1c2UgYSBub3JtYWwgc2NvcGUuJHdhdGNoIGFzIHdlIHdhbnQgdG8gZGV0ZWN0IHRoZSBmb2xsb3dpbmc6XG4gIC8vIDEuIHNjb3BlIHZhbHVlIGlzICdhJ1xuICAvLyAyLiB1c2VyIGVudGVycyAnYidcbiAgLy8gMy4gbmctY2hhbmdlIGtpY2tzIGluIGFuZCByZXZlcnRzIHNjb3BlIHZhbHVlIHRvICdhJ1xuICAvLyAgICAtPiBzY29wZSB2YWx1ZSBkaWQgbm90IGNoYW5nZSBzaW5jZSB0aGUgbGFzdCBkaWdlc3QgYXNcbiAgLy8gICAgICAgbmctY2hhbmdlIGV4ZWN1dGVzIGluIGFwcGx5IHBoYXNlXG4gIC8vIDQuIHZpZXcgc2hvdWxkIGJlIGNoYW5nZWQgYmFjayB0byAnYSdcbiAgY3RybC4kJHNjb3BlLiR3YXRjaChmdW5jdGlvbiBuZ01vZGVsV2F0Y2goc2NvcGUpIHtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IGN0cmwuJCRuZ01vZGVsR2V0KHNjb3BlKTtcblxuICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luY1xuICAgIC8vIFRPRE8ocGVyZik6IHdoeSBub3QgbW92ZSB0aGlzIHRvIHRoZSBhY3Rpb24gZm4/XG4gICAgaWYgKG1vZGVsVmFsdWUgIT09IGN0cmwuJG1vZGVsVmFsdWUgJiZcbiAgICAgICAvLyBjaGVja3MgZm9yIE5hTiBpcyBuZWVkZWQgdG8gYWxsb3cgc2V0dGluZyB0aGUgbW9kZWwgdG8gTmFOIHdoZW4gdGhlcmUncyBhbiBhc3luY1ZhbGlkYXRvclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgKGN0cmwuJG1vZGVsVmFsdWUgPT09IGN0cmwuJG1vZGVsVmFsdWUgfHwgbW9kZWxWYWx1ZSA9PT0gbW9kZWxWYWx1ZSlcbiAgICApIHtcbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICBjdHJsLiQkcGFyc2VyVmFsaWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycyxcbiAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcblxuICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3aGlsZSAoaWR4LS0pIHtcbiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2aWV3VmFsdWUpIHtcbiAgICAgICAgY3RybC4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgICAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgICAgY3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgLy8gSXQgaXMgcG9zc2libGUgdGhhdCBtb2RlbCBhbmQgdmlldyB2YWx1ZSBoYXZlIGJlZW4gdXBkYXRlZCBkdXJpbmcgcmVuZGVyXG4gICAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKGN0cmwuJG1vZGVsVmFsdWUsIGN0cmwuJHZpZXdWYWx1ZSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZ5IHRoZSBmb3JtLlxuICpcbiAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgd2l0aGluICRwYXJzZXJzLyRmb3JtYXR0ZXJzIG9yIGEgY3VzdG9tIHZhbGlkYXRpb24gaW1wbGVtZW50YXRpb24uXG4gKiBIb3dldmVyLCBpbiBtb3N0IGNhc2VzIGl0IHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIHVzZSB0aGUgYG5nTW9kZWwuJHZhbGlkYXRvcnNgIGFuZFxuICogYG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9yc2AgY29sbGVjdGlvbnMgd2hpY2ggd2lsbCBjYWxsIGAkc2V0VmFsaWRpdHlgIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGJlIGFzc2lnbmVkXG4gKiAgICAgICAgdG8gZWl0aGVyIGAkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XWAgb3IgYCRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV1gXG4gKiAgICAgICAgKGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2ApLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSBmb3IgZGF0YS1iaW5kaW5nLlxuICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2VcbiAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYFxuICogICAgICAgIGNsYXNzIGFuZCBjYW4gYmUgYm91bmQgdG8gYXMgIGB7e3NvbWVGb3JtLnNvbWVDb250cm9sLiRlcnJvci5teUVycm9yfX1gIC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWYWxpZCBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGlzIHZhbGlkICh0cnVlKSwgaW52YWxpZCAoZmFsc2UpLCBwZW5kaW5nICh1bmRlZmluZWQpLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIG9yIHNraXBwZWQgKG51bGwpLiBQZW5kaW5nIGlzIHVzZWQgZm9yIHVuZnVsZmlsbGVkIGAkYXN5bmNWYWxpZGF0b3JzYC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBTa2lwcGVkIGlzIHVzZWQgYnkgQW5ndWxhciB3aGVuIHZhbGlkYXRvcnMgZG8gbm90IHJ1biBiZWNhdXNlIG9mIHBhcnNlIGVycm9ycyBhbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIGAkYXN5bmNWYWxpZGF0b3JzYCBkbyBub3QgcnVuIGJlY2F1c2UgYW55IG9mIHRoZSBgJHZhbGlkYXRvcnNgIGZhaWxlZC5cbiAqL1xuYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICBjbGF6ejogTmdNb2RlbENvbnRyb2xsZXIsXG4gIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIG9iamVjdFtwcm9wZXJ0eV0gPSB0cnVlO1xuICB9LFxuICB1bnNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICB9XG59KTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW9kZWxcbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHByaW9yaXR5IDFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlIGJpbmRzIGFuIGBpbnB1dGAsYHNlbGVjdGAsIGB0ZXh0YXJlYWAgKG9yIGN1c3RvbSBmb3JtIGNvbnRyb2wpIHRvIGFcbiAqIHByb3BlcnR5IG9uIHRoZSBzY29wZSB1c2luZyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBOZ01vZGVsQ29udHJvbGxlcn0sXG4gKiB3aGljaCBpcyBjcmVhdGVkIGFuZCBleHBvc2VkIGJ5IHRoaXMgZGlyZWN0aXZlLlxuICpcbiAqIGBuZ01vZGVsYCBpcyByZXNwb25zaWJsZSBmb3I6XG4gKlxuICogLSBCaW5kaW5nIHRoZSB2aWV3IGludG8gdGhlIG1vZGVsLCB3aGljaCBvdGhlciBkaXJlY3RpdmVzIHN1Y2ggYXMgYGlucHV0YCwgYHRleHRhcmVhYCBvciBgc2VsZWN0YFxuICogICByZXF1aXJlLlxuICogLSBQcm92aWRpbmcgdmFsaWRhdGlvbiBiZWhhdmlvciAoaS5lLiByZXF1aXJlZCwgbnVtYmVyLCBlbWFpbCwgdXJsKS5cbiAqIC0gS2VlcGluZyB0aGUgc3RhdGUgb2YgdGhlIGNvbnRyb2wgKHZhbGlkL2ludmFsaWQsIGRpcnR5L3ByaXN0aW5lLCB0b3VjaGVkL3VudG91Y2hlZCwgdmFsaWRhdGlvbiBlcnJvcnMpLlxuICogLSBTZXR0aW5nIHJlbGF0ZWQgY3NzIGNsYXNzZXMgb24gdGhlIGVsZW1lbnQgKGBuZy12YWxpZGAsIGBuZy1pbnZhbGlkYCwgYG5nLWRpcnR5YCwgYG5nLXByaXN0aW5lYCwgYG5nLXRvdWNoZWRgLFxuICogICBgbmctdW50b3VjaGVkYCwgYG5nLWVtcHR5YCwgYG5nLW5vdC1lbXB0eWApIGluY2x1ZGluZyBhbmltYXRpb25zLlxuICogLSBSZWdpc3RlcmluZyB0aGUgY29udHJvbCB3aXRoIGl0cyBwYXJlbnQge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19LlxuICpcbiAqIE5vdGU6IGBuZ01vZGVsYCB3aWxsIHRyeSB0byBiaW5kIHRvIHRoZSBwcm9wZXJ0eSBnaXZlbiBieSBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uIG9uIHRoZVxuICogY3VycmVudCBzY29wZS4gSWYgdGhlIHByb3BlcnR5IGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBvbiB0aGlzIHNjb3BlLCBpdCB3aWxsIGJlIGNyZWF0ZWRcbiAqIGltcGxpY2l0bHkgYW5kIGFkZGVkIHRvIHRoZSBzY29wZS5cbiAqXG4gKiBGb3IgYmVzdCBwcmFjdGljZXMgb24gdXNpbmcgYG5nTW9kZWxgLCBzZWU6XG4gKlxuICogIC0gW1VuZGVyc3RhbmRpbmcgU2NvcGVzXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3dpa2kvVW5kZXJzdGFuZGluZy1TY29wZXMpXG4gKlxuICogRm9yIGJhc2ljIGV4YW1wbGVzLCBob3cgdG8gdXNlIGBuZ01vZGVsYCwgc2VlOlxuICpcbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9XG4gKiAgICAtIHtAbGluayBpbnB1dFt0ZXh0XSB0ZXh0fVxuICogICAgLSB7QGxpbmsgaW5wdXRbY2hlY2tib3hdIGNoZWNrYm94fVxuICogICAgLSB7QGxpbmsgaW5wdXRbcmFkaW9dIHJhZGlvfVxuICogICAgLSB7QGxpbmsgaW5wdXRbbnVtYmVyXSBudW1iZXJ9XG4gKiAgICAtIHtAbGluayBpbnB1dFtlbWFpbF0gZW1haWx9XG4gKiAgICAtIHtAbGluayBpbnB1dFt1cmxdIHVybH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2RhdGVdIGRhdGV9XG4gKiAgICAtIHtAbGluayBpbnB1dFtkYXRldGltZS1sb2NhbF0gZGF0ZXRpbWUtbG9jYWx9XG4gKiAgICAtIHtAbGluayBpbnB1dFt0aW1lXSB0aW1lfVxuICogICAgLSB7QGxpbmsgaW5wdXRbbW9udGhdIG1vbnRofVxuICogICAgLSB7QGxpbmsgaW5wdXRbd2Vla10gd2Vla31cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6dGV4dGFyZWEgdGV4dGFyZWF9XG4gKlxuICogIyBDb21wbGV4IE1vZGVscyAob2JqZWN0cyBvciBjb2xsZWN0aW9ucylcbiAqXG4gKiBCeSBkZWZhdWx0LCBgbmdNb2RlbGAgd2F0Y2hlcyB0aGUgbW9kZWwgYnkgcmVmZXJlbmNlLCBub3QgdmFsdWUuIFRoaXMgaXMgaW1wb3J0YW50IHRvIGtub3cgd2hlblxuICogYmluZGluZyBpbnB1dHMgdG8gbW9kZWxzIHRoYXQgYXJlIG9iamVjdHMgKGUuZy4gYERhdGVgKSBvciBjb2xsZWN0aW9ucyAoZS5nLiBhcnJheXMpLiBJZiBvbmx5IHByb3BlcnRpZXMgb2YgdGhlXG4gKiBvYmplY3Qgb3IgY29sbGVjdGlvbiBjaGFuZ2UsIGBuZ01vZGVsYCB3aWxsIG5vdCBiZSBub3RpZmllZCBhbmQgc28gdGhlIGlucHV0IHdpbGwgbm90IGJlICByZS1yZW5kZXJlZC5cbiAqXG4gKiBUaGUgbW9kZWwgbXVzdCBiZSBhc3NpZ25lZCBhbiBlbnRpcmVseSBuZXcgb2JqZWN0IG9yIGNvbGxlY3Rpb24gYmVmb3JlIGEgcmUtcmVuZGVyaW5nIHdpbGwgb2NjdXIuXG4gKlxuICogU29tZSBkaXJlY3RpdmVzIGhhdmUgb3B0aW9ucyB0aGF0IHdpbGwgY2F1c2UgdGhlbSB0byB1c2UgYSBjdXN0b20gYCR3YXRjaENvbGxlY3Rpb25gIG9uIHRoZSBtb2RlbCBleHByZXNzaW9uXG4gKiAtIGZvciBleGFtcGxlLCBgbmdPcHRpb25zYCB3aWxsIGRvIHNvIHdoZW4gYSBgdHJhY2sgYnlgIGNsYXVzZSBpcyBpbmNsdWRlZCBpbiB0aGUgY29tcHJlaGVuc2lvbiBleHByZXNzaW9uIG9yXG4gKiBpZiB0aGUgc2VsZWN0IGlzIGdpdmVuIHRoZSBgbXVsdGlwbGVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBUaGUgYCR3YXRjaENvbGxlY3Rpb24oKWAgbWV0aG9kIG9ubHkgZG9lcyBhIHNoYWxsb3cgY29tcGFyaXNvbiwgbWVhbmluZyB0aGF0IGNoYW5naW5nIHByb3BlcnRpZXMgZGVlcGVyIHRoYW4gdGhlXG4gKiBmaXJzdCBsZXZlbCBvZiB0aGUgb2JqZWN0IChvciBvbmx5IGNoYW5naW5nIHRoZSBwcm9wZXJ0aWVzIG9mIGFuIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24gaWYgaXQncyBhbiBhcnJheSkgd2lsbCBzdGlsbFxuICogbm90IHRyaWdnZXIgYSByZS1yZW5kZXJpbmcgb2YgdGhlIG1vZGVsLlxuICpcbiAqICMgQ1NTIGNsYXNzZXNcbiAqIFRoZSBmb2xsb3dpbmcgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkIG9uIHRoZSBhc3NvY2lhdGVkIGlucHV0L3NlbGVjdC90ZXh0YXJlYSBlbGVtZW50XG4gKiBkZXBlbmRpbmcgb24gdGhlIHZhbGlkaXR5IG9mIHRoZSBtb2RlbC5cbiAqXG4gKiAgLSBgbmctdmFsaWRgOiB0aGUgbW9kZWwgaXMgdmFsaWRcbiAqICAtIGBuZy1pbnZhbGlkYDogdGhlIG1vZGVsIGlzIGludmFsaWRcbiAqICAtIGBuZy12YWxpZC1ba2V5XWA6IGZvciBlYWNoIHZhbGlkIGtleSBhZGRlZCBieSBgJHNldFZhbGlkaXR5YFxuICogIC0gYG5nLWludmFsaWQtW2tleV1gOiBmb3IgZWFjaCBpbnZhbGlkIGtleSBhZGRlZCBieSBgJHNldFZhbGlkaXR5YFxuICogIC0gYG5nLXByaXN0aW5lYDogdGhlIGNvbnRyb2wgaGFzbid0IGJlZW4gaW50ZXJhY3RlZCB3aXRoIHlldFxuICogIC0gYG5nLWRpcnR5YDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gaW50ZXJhY3RlZCB3aXRoXG4gKiAgLSBgbmctdG91Y2hlZGA6IHRoZSBjb250cm9sIGhhcyBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy11bnRvdWNoZWRgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBibHVycmVkXG4gKiAgLSBgbmctcGVuZGluZ2A6IGFueSBgJGFzeW5jVmFsaWRhdG9yc2AgYXJlIHVuZnVsZmlsbGVkXG4gKiAgLSBgbmctZW1wdHlgOiB0aGUgdmlldyBkb2VzIG5vdCBjb250YWluIGEgdmFsdWUgb3IgdGhlIHZhbHVlIGlzIGRlZW1lZCBcImVtcHR5XCIsIGFzIGRlZmluZWRcbiAqICAgICBieSB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJGlzRW1wdHl9IG1ldGhvZFxuICogIC0gYG5nLW5vdC1lbXB0eWA6IHRoZSB2aWV3IGNvbnRhaW5zIGEgbm9uLWVtcHR5IHZhbHVlXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQgbmdBbmltYXRlIGNhbiBkZXRlY3QgZWFjaCBvZiB0aGVzZSBjbGFzc2VzIHdoZW4gYWRkZWQgYW5kIHJlbW92ZWQuXG4gKlxuICogIyMgQW5pbWF0aW9uIEhvb2tzXG4gKlxuICogQW5pbWF0aW9ucyB3aXRoaW4gbW9kZWxzIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkXG4gKiBvbiB0aGUgaW5wdXQgZWxlbWVudCB3aGljaCBpcyBhdHRhY2hlZCB0byB0aGUgbW9kZWwuIFRoZXNlIGNsYXNzZXMgaW5jbHVkZTogYC5uZy1wcmlzdGluZWAsIGAubmctZGlydHlgLFxuICogYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnkgb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIG9uIHRoZSBtb2RlbCBpdHNlbGYuXG4gKiBUaGUgYW5pbWF0aW9ucyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2l0aGluIG5nTW9kZWwgYXJlIHNpbWlsYXIgdG8gaG93IHRoZXkgd29yayBpbiBuZ0NsYXNzIGFuZFxuICogYW5pbWF0aW9ucyBjYW4gYmUgaG9va2VkIGludG8gdXNpbmcgQ1NTIHRyYW5zaXRpb25zLCBrZXlmcmFtZXMgYXMgd2VsbCBhcyBKUyBhbmltYXRpb25zLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIHNpbXBsZSB3YXkgdG8gdXRpbGl6ZSBDU1MgdHJhbnNpdGlvbnMgdG8gc3R5bGUgYW4gaW5wdXQgZWxlbWVudFxuICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDpcbiAqXG4gKiA8cHJlPlxuICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlXG4gKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnNcbiAqIC5teS1pbnB1dCB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAqIH1cbiAqIC5teS1pbnB1dC5uZy1pbnZhbGlkIHtcbiAqICAgYmFja2dyb3VuZDogcmVkO1xuICogICBjb2xvcjp3aGl0ZTtcbiAqIH1cbiAqIDwvcHJlPlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiIG5hbWU9XCJuZy1tb2RlbFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLnZhbCA9ICcxJztcbiAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPHN0eWxlPlxuICAgICAgICAgLm15LWlucHV0IHtcbiAgICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgfVxuICAgICAgICAgLm15LWlucHV0Lm5nLWludmFsaWQge1xuICAgICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgICAgYmFja2dyb3VuZDogcmVkO1xuICAgICAgICAgfVxuICAgICAgIDwvc3R5bGU+XG4gICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uXCI+XG4gICAgICAgIFVwZGF0ZSBpbnB1dCB0byBzZWUgdHJhbnNpdGlvbnMgd2hlbiB2YWxpZC9pbnZhbGlkLlxuICAgICAgICBJbnRlZ2VyIGlzIGEgdmFsaWQgdmFsdWUuXG4gICAgICAgPC9wPlxuICAgICAgIDxmb3JtIG5hbWU9XCJ0ZXN0Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidmFsXCIgbmctcGF0dGVybj1cIi9eXFxkKyQvXCIgbmFtZT1cImFuaW1cIiBjbGFzcz1cIm15LWlucHV0XCJcbiAgICAgICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXREZXNjcmlwdGlvblwiIC8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogIyMgQmluZGluZyB0byBhIGdldHRlci9zZXR0ZXJcbiAqXG4gKiBTb21ldGltZXMgaXQncyBoZWxwZnVsIHRvIGJpbmQgYG5nTW9kZWxgIHRvIGEgZ2V0dGVyL3NldHRlciBmdW5jdGlvbi4gIEEgZ2V0dGVyL3NldHRlciBpcyBhXG4gKiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCB6ZXJvIGFyZ3VtZW50cywgYW5kIHNldHNcbiAqIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJndW1lbnQuIEl0J3Mgc29tZXRpbWVzIHVzZWZ1bCB0byB1c2UgdGhpc1xuICogZm9yIG1vZGVscyB0aGF0IGhhdmUgYW4gaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gdGhhdCdzIGRpZmZlcmVudCBmcm9tIHdoYXQgdGhlIG1vZGVsIGV4cG9zZXNcbiAqIHRvIHRoZSB2aWV3LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2U6KiogSXQncyBiZXN0IHRvIGtlZXAgZ2V0dGVycyBmYXN0IGJlY2F1c2UgQW5ndWxhciBpcyBsaWtlbHkgdG8gY2FsbCB0aGVtIG1vcmVcbiAqIGZyZXF1ZW50bHkgdGhhbiBvdGhlciBwYXJ0cyBvZiB5b3VyIGNvZGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBZb3UgdXNlIHRoaXMgYmVoYXZpb3IgYnkgYWRkaW5nIGBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiYCB0byBhbiBlbGVtZW50IHRoYXRcbiAqIGhhcyBgbmctbW9kZWxgIGF0dGFjaGVkIHRvIGl0LiBZb3UgY2FuIGFsc28gYWRkIGBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiYCB0b1xuICogYSBgPGZvcm0+YCwgd2hpY2ggd2lsbCBlbmFibGUgdGhpcyBiZWhhdmlvciBmb3IgYWxsIGA8aW5wdXQ+YHMgd2l0aGluIGl0LiBTZWVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zYH0gZm9yIG1vcmUuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYG5nTW9kZWxgIHdpdGggYSBnZXR0ZXIvc2V0dGVyOlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbC1nZXR0ZXItc2V0dGVyXCIgbW9kdWxlPVwiZ2V0dGVyU2V0dGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICAgPGxhYmVsPk5hbWU6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8L2Zvcm0+XG4gICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAgICAgICAgICRzY29wZS51c2VyID0ge1xuICAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uKG5ld05hbWUpIHtcbiAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG5ld05hbWUgY2FuIGJlIHVuZGVmaW5lZCBmb3IgdHdvIHJlYXNvbnM6XG4gICAgICAgICAgICAgIC8vIDEuIEJlY2F1c2UgaXQgaXMgY2FsbGVkIGFzIGEgZ2V0dGVyIGFuZCB0aHVzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAvLyAyLiBCZWNhdXNlIHRoZSBwcm9wZXJ0eSBzaG91bGQgYWN0dWFsbHkgYmUgc2V0IHRvIHVuZGVmaW5lZC4gVGhpcyBoYXBwZW5zIGUuZy4gaWYgdGhlXG4gICAgICAgICAgICAgIC8vICAgIGlucHV0IGlzIGludmFsaWRcbiAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoX25hbWUgPSBuZXdOYW1lKSA6IF9uYW1lO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbmdNb2RlbERpcmVjdGl2ZSA9IFsnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRyb290U2NvcGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdeP2Zvcm0nLCAnXj9uZ01vZGVsT3B0aW9ucyddLFxuICAgIGNvbnRyb2xsZXI6IE5nTW9kZWxDb250cm9sbGVyLFxuICAgIC8vIFByZWxpbmsgbmVlZHMgdG8gcnVuIGJlZm9yZSBhbnkgaW5wdXQgZGlyZWN0aXZlXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gc2V0IHRoZSBOZ01vZGVsT3B0aW9ucyBpbiBOZ01vZGVsQ29udHJvbGxlclxuICAgIC8vIGJlZm9yZSBhbnlvbmUgZWxzZSB1c2VzIGl0LlxuICAgIHByaW9yaXR5OiAxLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nTW9kZWxDb21waWxlKGVsZW1lbnQpIHtcbiAgICAgIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2xcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFVOVE9VQ0hFRF9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nTW9kZWxQcmVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXSxcbiAgICAgICAgICAgICAgZm9ybUN0cmwgPSBjdHJsc1sxXSB8fCBtb2RlbEN0cmwuJCRwYXJlbnRGb3JtLFxuICAgICAgICAgICAgICBvcHRpb25zQ3RybCA9IGN0cmxzWzJdO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnNDdHJsKSB7XG4gICAgICAgICAgICBtb2RlbEN0cmwuJG9wdGlvbnMgPSBvcHRpb25zQ3RybC4kb3B0aW9ucztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtb2RlbEN0cmwuJCRpbml0R2V0dGVyU2V0dGVycygpO1xuXG4gICAgICAgICAgLy8gbm90aWZ5IG90aGVycywgZXNwZWNpYWxseSBwYXJlbnQgZm9ybXNcbiAgICAgICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpO1xuXG4gICAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiRuYW1lICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBtb2RlbEN0cmwuJCRwYXJlbnRGb3JtLiQkcmVuYW1lQ29udHJvbChtb2RlbEN0cmwsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kJHBhcmVudEZvcm0uJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdDogZnVuY3Rpb24gbmdNb2RlbFBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTtcbiAgICAgICAgICBpZiAobW9kZWxDdHJsLiRvcHRpb25zLmdldE9wdGlvbigndXBkYXRlT24nKSkge1xuICAgICAgICAgICAgZWxlbWVudC5vbihtb2RlbEN0cmwuJG9wdGlvbnMuZ2V0T3B0aW9uKCd1cGRhdGVPbicpLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICBtb2RlbEN0cmwuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdChldiAmJiBldi50eXBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIHNldFRvdWNoZWQoKSB7XG4gICAgICAgICAgICBtb2RlbEN0cmwuJHNldFRvdWNoZWQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50Lm9uKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiR0b3VjaGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhzZXRUb3VjaGVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNjb3BlLiRhcHBseShzZXRUb3VjaGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyogZXhwb3J0ZWQgZGVmYXVsdE1vZGVsT3B0aW9ucyAqL1xudmFyIGRlZmF1bHRNb2RlbE9wdGlvbnM7XG52YXIgREVGQVVMVF9SRUdFWFAgPSAvKFxccyt8XilkZWZhdWx0KFxccyt8JCkvO1xuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBNb2RlbE9wdGlvbnNcbiAqIEBkZXNjcmlwdGlvblxuICogQSBjb250YWluZXIgZm9yIHRoZSBvcHRpb25zIHNldCBieSB0aGUge0BsaW5rIG5nTW9kZWxPcHRpb25zfSBkaXJlY3RpdmVcbiAqL1xuZnVuY3Rpb24gTW9kZWxPcHRpb25zKG9wdGlvbnMpIHtcbiAgdGhpcy4kJG9wdGlvbnMgPSBvcHRpb25zO1xufVxuXG5Nb2RlbE9wdGlvbnMucHJvdG90eXBlID0ge1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIE1vZGVsT3B0aW9ucyNnZXRPcHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIG9wdGlvbiB0byByZXRyaWV2ZVxuICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIG9mIHRoZSBvcHRpb25cbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBvcHRpb25cbiAgICovXG4gIGdldE9wdGlvbjogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLiQkb3B0aW9uc1tuYW1lXTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBNb2RlbE9wdGlvbnMjY3JlYXRlQ2hpbGRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYSBoYXNoIG9mIG9wdGlvbnMgZm9yIHRoZSBuZXcgY2hpbGQgdGhhdCB3aWxsIG92ZXJyaWRlIHRoZSBwYXJlbnQncyBvcHRpb25zXG4gICAqIEByZXR1cm4ge01vZGVsT3B0aW9uc30gYSBuZXcgYE1vZGVsT3B0aW9uc2Agb2JqZWN0IGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXG4gICAqL1xuICBjcmVhdGVDaGlsZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBpbmhlcml0QWxsID0gZmFsc2U7XG5cbiAgICAvLyBtYWtlIGEgc2hhbGxvdyBjb3B5XG4gICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cbiAgICAvLyBJbmhlcml0IG9wdGlvbnMgZnJvbSB0aGUgcGFyZW50IGlmIHNwZWNpZmllZCBieSB0aGUgdmFsdWUgYFwiJGluaGVyaXRcImBcbiAgICBmb3JFYWNoKG9wdGlvbnMsIC8qIEB0aGlzICovIGZ1bmN0aW9uKG9wdGlvbiwga2V5KSB7XG4gICAgICBpZiAob3B0aW9uID09PSAnJGluaGVyaXQnKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICcqJykge1xuICAgICAgICAgIGluaGVyaXRBbGwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHRoaXMuJCRvcHRpb25zW2tleV07XG4gICAgICAgICAgLy8gYHVwZGF0ZU9uYCBpcyBzcGVjaWFsIHNvIHdlIG11c3QgYWxzbyBpbmhlcml0IHRoZSBgdXBkYXRlT25EZWZhdWx0YCBvcHRpb25cbiAgICAgICAgICBpZiAoa2V5ID09PSAndXBkYXRlT24nKSB7XG4gICAgICAgICAgICBvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRoaXMuJCRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrZXkgPT09ICd1cGRhdGVPbicpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgYHVwZGF0ZU9uYCBwcm9wZXJ0eSBjb250YWlucyB0aGUgYGRlZmF1bHRgIGV2ZW50IHRoZW4gd2UgaGF2ZSB0byByZW1vdmVcbiAgICAgICAgICAvLyBpdCBmcm9tIHRoZSBldmVudCBsaXN0IGFuZCBzZXQgdGhlIGB1cGRhdGVPbkRlZmF1bHRgIGZsYWcuXG4gICAgICAgICAgb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgICBvcHRpb25zW2tleV0gPSB0cmltKG9wdGlvbi5yZXBsYWNlKERFRkFVTFRfUkVHRVhQLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiAnICc7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG5cbiAgICBpZiAoaW5oZXJpdEFsbCkge1xuICAgICAgLy8gV2UgaGF2ZSBhIHByb3BlcnR5IG9mIHRoZSBmb3JtOiBgXCIqXCI6IFwiJGluaGVyaXRcImBcbiAgICAgIGRlbGV0ZSBvcHRpb25zWycqJ107XG4gICAgICBkZWZhdWx0cyhvcHRpb25zLCB0aGlzLiQkb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSBhZGQgaW4gYW55IG1pc3NpbmcgZGVmYXVsdHNcbiAgICBkZWZhdWx0cyhvcHRpb25zLCBkZWZhdWx0TW9kZWxPcHRpb25zLiQkb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gbmV3IE1vZGVsT3B0aW9ucyhvcHRpb25zKTtcbiAgfVxufTtcblxuXG5kZWZhdWx0TW9kZWxPcHRpb25zID0gbmV3IE1vZGVsT3B0aW9ucyh7XG4gIHVwZGF0ZU9uOiAnJyxcbiAgdXBkYXRlT25EZWZhdWx0OiB0cnVlLFxuICBkZWJvdW5jZTogMCxcbiAgZ2V0dGVyU2V0dGVyOiBmYWxzZSxcbiAgYWxsb3dJbnZhbGlkOiBmYWxzZSxcbiAgdGltZXpvbmU6IG51bGxcbn0pO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbE9wdGlvbnNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gbW9kaWZ5IHRoZSBiZWhhdmlvdXIgb2Yge0BsaW5rIG5nTW9kZWx9IGRpcmVjdGl2ZXMgd2l0aGluIHlvdXJcbiAqIGFwcGxpY2F0aW9uLiBZb3UgY2FuIHNwZWNpZnkgYW4gYG5nTW9kZWxPcHRpb25zYCBkaXJlY3RpdmUgb24gYW55IGVsZW1lbnQuIEFsbCB7QGxpbmsgbmdNb2RlbH1cbiAqIGRpcmVjdGl2ZXMgd2lsbCB1c2UgdGhlIG9wdGlvbnMgb2YgdGhlaXIgbmVhcmVzdCBgbmdNb2RlbE9wdGlvbnNgIGFuY2VzdG9yLlxuICpcbiAqIFRoZSBgbmdNb2RlbE9wdGlvbnNgIHNldHRpbmdzIGFyZSBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGRpcmVjdGl2ZSBhc1xuICogYW4gQW5ndWxhciBleHByZXNzaW9uLiBUaGlzIGV4cHJlc3Npb24gc2hvdWxkIGV2YWx1YXRlIHRvIGFuIG9iamVjdCwgd2hvc2UgcHJvcGVydGllcyBjb250YWluXG4gKiB0aGUgc2V0dGluZ3MuIEZvciBleGFtcGxlOiBgPGRpdiBcIm5nLW1vZGVsLW9wdGlvbnNcIj1cInsgZGVib3VuY2U6IDEwMCB9XCJgLlxuICpcbiAqICMjIEluaGVyaXRpbmcgT3B0aW9uc1xuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSB0aGF0IGFuIGBuZ01vZGVsT3B0aW9uc2Agc2V0dGluZyBzaG91bGQgYmUgaW5oZXJpdGVkIGZyb20gYSBwYXJlbnQgYG5nTW9kZWxPcHRpb25zYFxuICogZGlyZWN0aXZlIGJ5IGdpdmluZyBpdCB0aGUgdmFsdWUgb2YgYFwiJGluaGVyaXRcImAuXG4gKiBUaGVuIGl0IHdpbGwgaW5oZXJpdCB0aGF0IHNldHRpbmcgZnJvbSB0aGUgZmlyc3QgYG5nTW9kZWxPcHRpb25zYCBkaXJlY3RpdmUgZm91bmQgYnkgdHJhdmVyc2luZyB1cCB0aGVcbiAqIERPTSB0cmVlLiBJZiB0aGVyZSBpcyBubyBhbmNlc3RvciBlbGVtZW50IGNvbnRhaW5pbmcgYW4gYG5nTW9kZWxPcHRpb25zYCBkaXJlY3RpdmUgdGhlbiBkZWZhdWx0IHNldHRpbmdzXG4gKiB3aWxsIGJlIHVzZWQuXG4gKlxuICogRm9yIGV4YW1wbGUgZ2l2ZW4gdGhlIGZvbGxvd2luZyBmcmFnbWVudCBvZiBIVE1MXG4gKlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctbW9kZWwtb3B0aW9ucz1cInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMjAwIH1cIj5cbiAqICAgPGZvcm0gbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJywgYWxsb3dJbnZhbGlkOiAnJGluaGVyaXQnIH1cIj5cbiAqICAgICA8aW5wdXQgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdkZWZhdWx0JywgYWxsb3dJbnZhbGlkOiAnJGluaGVyaXQnIH1cIiAvPlxuICogICA8L2Zvcm0+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBoYXZlIHRoZSBmb2xsb3dpbmcgc2V0dGluZ3NcbiAqXG4gKiBgYGBqc1xuICogeyBhbGxvd0ludmFsaWQ6IHRydWUsIHVwZGF0ZU9uOiAnZGVmYXVsdCcsIGRlYm91bmNlOiAwIH1cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IHRoZSBgZGVib3VuY2VgIHNldHRpbmcgd2FzIG5vdCBpbmhlcml0ZWQgYW5kIHVzZWQgdGhlIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgdGhhdCBhbGwgdW5kZWZpbmVkIHNldHRpbmdzIGFyZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBmcm9tIGFuIGFuY2VzdG9yIGJ5XG4gKiBpbmNsdWRpbmcgYSBwcm9wZXJ0eSB3aXRoIGtleSBvZiBgXCIqXCJgIGFuZCB2YWx1ZSBvZiBgXCIkaW5oZXJpdFwiYC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBnaXZlbiB0aGUgZm9sbG93aW5nIGZyYWdtZW50IG9mIEhUTUxcbiAqXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1tb2RlbC1vcHRpb25zPVwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAyMDAgfVwiPlxuICogICA8Zm9ybSBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInLCBcIipcIjogJyRpbmhlcml0JyB9XCI+XG4gKiAgICAgPGlucHV0IG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnZGVmYXVsdCcsIFwiKlwiOiAnJGluaGVyaXQnIH1cIiAvPlxuICogICA8L2Zvcm0+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBoYXZlIHRoZSBmb2xsb3dpbmcgc2V0dGluZ3NcbiAqXG4gKiBgYGBqc1xuICogeyBhbGxvd0ludmFsaWQ6IHRydWUsIHVwZGF0ZU9uOiAnZGVmYXVsdCcsIGRlYm91bmNlOiAyMDAgfVxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgdGhlIGBkZWJvdW5jZWAgc2V0dGluZyBub3cgaW5oZXJpdHMgdGhlIHZhbHVlIGZyb20gdGhlIG91dGVyIGA8ZGl2PmAgZWxlbWVudC5cbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgcmV1c2FibGUgY29tcG9uZW50IHRoZW4geW91IHNob3VsZCBiZSBjYXJlZnVsIHdoZW4gdXNpbmcgYFwiKlwiOiBcIiRpbmhlcml0XCJgXG4gKiBzaW5jZSB5b3UgbWF5IGluYWR2ZXJ0ZW50bHkgaW5oZXJpdCBhIHNldHRpbmcgaW4gdGhlIGZ1dHVyZSB0aGF0IGNoYW5nZXMgdGhlIGJlaGF2aW9yIG9mIHlvdXIgY29tcG9uZW50LlxuICpcbiAqXG4gKiAjIyBUcmlnZ2VyaW5nIGFuZCBkZWJvdW5jaW5nIG1vZGVsIHVwZGF0ZXNcbiAqXG4gKiBUaGUgYHVwZGF0ZU9uYCBhbmQgYGRlYm91bmNlYCBwcm9wZXJ0aWVzIGFsbG93IHlvdSB0byBzcGVjaWZ5IGEgY3VzdG9tIGxpc3Qgb2YgZXZlbnRzIHRoYXQgd2lsbFxuICogdHJpZ2dlciBhIG1vZGVsIHVwZGF0ZSBhbmQvb3IgYSBkZWJvdW5jaW5nIGRlbGF5IHNvIHRoYXQgdGhlIGFjdHVhbCB1cGRhdGUgb25seSB0YWtlcyBwbGFjZSB3aGVuXG4gKiBhIHRpbWVyIGV4cGlyZXM7IHRoaXMgdGltZXIgd2lsbCBiZSByZXNldCBhZnRlciBhbm90aGVyIGNoYW5nZSB0YWtlcyBwbGFjZS5cbiAqXG4gKiBHaXZlbiB0aGUgbmF0dXJlIG9mIGBuZ01vZGVsT3B0aW9uc2AsIHRoZSB2YWx1ZSBkaXNwbGF5ZWQgaW5zaWRlIGlucHV0IGZpZWxkcyBpbiB0aGUgdmlldyBtaWdodFxuICogYmUgZGlmZmVyZW50IGZyb20gdGhlIHZhbHVlIGluIHRoZSBhY3R1YWwgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgdXBkYXRlIHRoZSBtb2RlbCB5b3VcbiAqIHNob3VsZCBhbHNvIGludm9rZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWV9IG9uIHRoZSByZWxldmFudCBpbnB1dCBmaWVsZCBpblxuICogb3JkZXIgdG8gbWFrZSBzdXJlIGl0IGlzIHN5bmNocm9uaXplZCB3aXRoIHRoZSBtb2RlbCBhbmQgdGhhdCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBUaGUgZWFzaWVzdCB3YXkgdG8gcmVmZXJlbmNlIHRoZSBjb250cm9sJ3Mge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlfVxuICogbWV0aG9kIGlzIGJ5IG1ha2luZyBzdXJlIHRoZSBpbnB1dCBpcyBwbGFjZWQgaW5zaWRlIGEgZm9ybSB0aGF0IGhhcyBhIGBuYW1lYCBhdHRyaWJ1dGUuIFRoaXMgaXNcbiAqIGltcG9ydGFudCBiZWNhdXNlIGBmb3JtYCBjb250cm9sbGVycyBhcmUgcHVibGlzaGVkIHRvIHRoZSByZWxhdGVkIHNjb3BlIHVuZGVyIHRoZSBuYW1lIGluIHRoZWlyXG4gKiBgbmFtZWAgYXR0cmlidXRlLlxuICpcbiAqIEFueSBwZW5kaW5nIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXMgc3VibWl0dGVkIHZpYSB0aGVcbiAqIGBzdWJtaXRgIGV2ZW50LiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAqIHRvIGhhdmUgYWNjZXNzIHRvIHRoZSB1cGRhdGVkIG1vZGVsLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gb3ZlcnJpZGUgaW1tZWRpYXRlIHVwZGF0ZXMuIENoYW5nZXMgb24gdGhlIGlucHV0cyB3aXRoaW4gdGhlXG4gKiBmb3JtIHdpbGwgdXBkYXRlIHRoZSBtb2RlbCBvbmx5IHdoZW4gdGhlIGNvbnRyb2wgbG9zZXMgZm9jdXMgKGJsdXIgZXZlbnQpLiBJZiBgZXNjYXBlYCBrZXkgaXNcbiAqIHByZXNzZWQgd2hpbGUgdGhlIGlucHV0IGZpZWxkIGlzIGZvY3VzZWQsIHRoZSB2YWx1ZSBpcyByZXNldCB0byB0aGUgdmFsdWUgaW4gdGhlIGN1cnJlbnQgbW9kZWwuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1ibHVyXCIgbW9kdWxlPVwib3B0aW9uc0V4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbD5cbiAqICAgICAgICAgICBOYW1lOlxuICogICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gKiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAqICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCJcbiAqICAgICAgICAgICAgICAgICAgbmcta2V5dXA9XCJjYW5jZWwoJGV2ZW50KVwiIC8+XG4gKiAgICAgICAgIDwvbGFiZWw+PGJyIC8+XG4gKiAgICAgICAgIDxsYWJlbD5cbiAqICAgICAgICAgICBPdGhlciBkYXRhOlxuICogICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5kYXRhXCIgLz5cbiAqICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ29wdGlvbnNFeGFtcGxlJywgW10pXG4gKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ3NheScsIGRhdGE6ICcnIH07XG4gKlxuICogICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICogICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7XG4gKiAgICAgICAgICAgICAkc2NvcGUudXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICB9O1xuICogICAgICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXIubmFtZScpKTtcbiAqICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLm5hbWUnKSk7XG4gKiAgICAgdmFyIG90aGVyID0gZWxlbWVudChieS5tb2RlbCgndXNlci5kYXRhJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGFsbG93IGN1c3RvbSBldmVudHMnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTtcbiAqICAgICAgIGlucHV0LmNsaWNrKCk7XG4gKiAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXknKTtcbiAqICAgICAgIG90aGVyLmNsaWNrKCk7XG4gKiAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXkgaGVsbG8nKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCAkcm9sbGJhY2tWaWV3VmFsdWUgd2hlbiBtb2RlbCBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBpbnB1dC5zZW5kS2V5cygnIGhlbGxvJyk7XG4gKiAgICAgICBleHBlY3QoaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCdzYXkgaGVsbG8nKTtcbiAqICAgICAgIGlucHV0LnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkVTQ0FQRSk7XG4gKiAgICAgICBleHBlY3QoaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCdzYXknKTtcbiAqICAgICAgIG90aGVyLmNsaWNrKCk7XG4gKiAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXknKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIFRoZSBuZXh0IGV4YW1wbGUgc2hvd3MgaG93IHRvIGRlYm91bmNlIG1vZGVsIGNoYW5nZXMuIE1vZGVsIHdpbGwgYmUgdXBkYXRlZCBvbmx5IDEgc2VjIGFmdGVyIGxhc3QgY2hhbmdlLlxuICogSWYgdGhlIGBDbGVhcmAgYnV0dG9uIGlzIHByZXNzZWQsIGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkIGFuZCB0aGUgdmFsdWUgYmVjb21lcyBlbXB0eS5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWRlYm91bmNlXCIgbW9kdWxlPVwib3B0aW9uc0V4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gKiAgICAgICAgIE5hbWU6XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gKiAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gKiAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBkZWJvdW5jZTogMTAwMCB9XCIgLz5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpOyB1c2VyLm5hbWU9JydcIj5DbGVhcjwvYnV0dG9uPjxiciAvPlxuICogICAgICAgPC9mb3JtPlxuICogICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnc2F5JyB9O1xuICogICAgICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogIyMgTW9kZWwgdXBkYXRlcyBhbmQgdmFsaWRhdGlvblxuICpcbiAqIFRoZSBkZWZhdWx0IGJlaGF2aW91ciBpbiBgbmdNb2RlbGAgaXMgdGhhdCB0aGUgbW9kZWwgdmFsdWUgaXMgc2V0IHRvIGB1bmRlZmluZWRgIHdoZW4gdGhlXG4gKiB2YWxpZGF0aW9uIGRldGVybWluZXMgdGhhdCB0aGUgdmFsdWUgaXMgaW52YWxpZC4gQnkgc2V0dGluZyB0aGUgYGFsbG93SW52YWxpZGAgcHJvcGVydHkgdG8gdHJ1ZSxcbiAqIHRoZSBtb2RlbCB3aWxsIHN0aWxsIGJlIHVwZGF0ZWQgZXZlbiBpZiB0aGUgdmFsdWUgaXMgaW52YWxpZC5cbiAqXG4gKlxuICogIyMgQ29ubmVjdGluZyB0byB0aGUgc2NvcGVcbiAqXG4gKiBCeSBzZXR0aW5nIHRoZSBgZ2V0dGVyU2V0dGVyYCBwcm9wZXJ0eSB0byB0cnVlIHlvdSBhcmUgdGVsbGluZyBuZ01vZGVsIHRoYXQgdGhlIGBuZ01vZGVsYCBleHByZXNzaW9uXG4gKiBvbiB0aGUgc2NvcGUgcmVmZXJzIHRvIGEgXCJnZXR0ZXIvc2V0dGVyXCIgZnVuY3Rpb24gcmF0aGVyIHRoYW4gdGhlIHZhbHVlIGl0c2VsZi5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGJpbmQgdG8gZ2V0dGVyL3NldHRlcnM6XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1nZXR0ZXItc2V0dGVyXCIgbW9kdWxlPVwiZ2V0dGVyU2V0dGVyRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsPlxuICogICAgICAgICAgIE5hbWU6XG4gKiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAqICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICogICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gKiAgICAgICAgIDwvbGFiZWw+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSlcbiAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gKiAgICAgICAgICRzY29wZS51c2VyID0ge1xuICogICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uKG5ld05hbWUpIHtcbiAqICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZChuZXdOYW1lKSA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICB9O1xuICogICAgICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqICMjIFNwZWNpZnlpbmcgdGltZXpvbmVzXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHRoZSB0aW1lem9uZSB0aGF0IGRhdGUvdGltZSBpbnB1dCBkaXJlY3RpdmVzIGV4cGVjdCBieSBwcm92aWRpbmcgaXRzIG5hbWUgaW4gdGhlXG4gKiBgdGltZXpvbmVgIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZ01vZGVsT3B0aW9ucyBvcHRpb25zIHRvIGFwcGx5IHRvIHtAbGluayBuZ01vZGVsfSBkaXJlY3RpdmVzIG9uIHRoaXMgZWxlbWVudCBhbmRcbiAqICAgYW5kIGl0cyBkZXNjZW5kZW50cy4gVmFsaWQga2V5cyBhcmU6XG4gKiAgIC0gYHVwZGF0ZU9uYDogc3RyaW5nIHNwZWNpZnlpbmcgd2hpY2ggZXZlbnQgc2hvdWxkIHRoZSBpbnB1dCBiZSBib3VuZCB0by4gWW91IGNhbiBzZXQgc2V2ZXJhbFxuICogICAgIGV2ZW50cyB1c2luZyBhbiBzcGFjZSBkZWxpbWl0ZWQgbGlzdC4gVGhlcmUgaXMgYSBzcGVjaWFsIGV2ZW50IGNhbGxlZCBgZGVmYXVsdGAgdGhhdFxuICogICAgIG1hdGNoZXMgdGhlIGRlZmF1bHQgZXZlbnRzIGJlbG9uZ2luZyB0byB0aGUgY29udHJvbC5cbiAqICAgLSBgZGVib3VuY2VgOiBpbnRlZ2VyIHZhbHVlIHdoaWNoIGNvbnRhaW5zIHRoZSBkZWJvdW5jZSBtb2RlbCB1cGRhdGUgdmFsdWUgaW4gbWlsbGlzZWNvbmRzLiBBXG4gKiAgICAgdmFsdWUgb2YgMCB0cmlnZ2VycyBhbiBpbW1lZGlhdGUgdXBkYXRlLiBJZiBhbiBvYmplY3QgaXMgc3VwcGxpZWQgaW5zdGVhZCwgeW91IGNhbiBzcGVjaWZ5IGFcbiAqICAgICBjdXN0b20gdmFsdWUgZm9yIGVhY2ggZXZlbnQuIEZvciBleGFtcGxlOlxuICogICAgIGBgYFxuICogICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7XG4gKiAgICAgICB1cGRhdGVPbjogJ2RlZmF1bHQgYmx1cicsXG4gKiAgICAgICBkZWJvdW5jZTogeyAnZGVmYXVsdCc6IDUwMCwgJ2JsdXInOiAwIH1cbiAqICAgICB9XCJcbiAqICAgICBgYGBcbiAqICAgLSBgYWxsb3dJbnZhbGlkYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgY2FuIGJlIHNldCB3aXRoIHZhbHVlcyB0aGF0IGRpZFxuICogICAgIG5vdCB2YWxpZGF0ZSBjb3JyZWN0bHkgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBzZXR0aW5nIHRoZSBtb2RlbCB0byB1bmRlZmluZWQuXG4gKiAgIC0gYGdldHRlclNldHRlcmA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byB0cmVhdCBmdW5jdGlvbnMgYm91bmQgdG9cbiAqICAgICBgbmdNb2RlbGAgYXMgZ2V0dGVycy9zZXR0ZXJzLlxuICogICAtIGB0aW1lem9uZWA6IERlZmluZXMgdGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBmb3JcbiAqICAgICBgPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5gLCBgPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5gLCAuLi4gLiBJdCB1bmRlcnN0YW5kcyBVVEMvR01UIGFuZCB0aGVcbiAqICAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gKiAgICAgZXhhbXBsZSwgYCcrMDQzMCdgICg0IGhvdXJzLCAzMCBtaW51dGVzIGVhc3Qgb2YgdGhlIEdyZWVud2ljaCBtZXJpZGlhbilcbiAqICAgICBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIgd2lsbCBiZSB1c2VkLlxuICpcbiAqL1xudmFyIG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIE5nTW9kZWxPcHRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckYXR0cnMnLCAnJHNjb3BlJ107XG4gIGZ1bmN0aW9uIE5nTW9kZWxPcHRpb25zQ29udHJvbGxlcigkYXR0cnMsICRzY29wZSkge1xuICAgIHRoaXMuJCRhdHRycyA9ICRhdHRycztcbiAgICB0aGlzLiQkc2NvcGUgPSAkc2NvcGU7XG4gIH1cbiAgTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyLnByb3RvdHlwZSA9IHtcbiAgICAkb25Jbml0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYXJlbnRPcHRpb25zID0gdGhpcy5wYXJlbnRDdHJsID8gdGhpcy5wYXJlbnRDdHJsLiRvcHRpb25zIDogZGVmYXVsdE1vZGVsT3B0aW9ucztcbiAgICAgIHZhciBtb2RlbE9wdGlvbnNEZWZpbml0aW9uID0gdGhpcy4kJHNjb3BlLiRldmFsKHRoaXMuJCRhdHRycy5uZ01vZGVsT3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuJG9wdGlvbnMgPSBwYXJlbnRPcHRpb25zLmNyZWF0ZUNoaWxkKG1vZGVsT3B0aW9uc0RlZmluaXRpb24pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgLy8gbmdNb2RlbE9wdGlvbnMgbmVlZHMgdG8gcnVuIGJlZm9yZSBuZ01vZGVsIGFuZCBpbnB1dCBkaXJlY3RpdmVzXG4gICAgcHJpb3JpdHk6IDEwLFxuICAgIHJlcXVpcmU6IHtwYXJlbnRDdHJsOiAnP15ebmdNb2RlbE9wdGlvbnMnfSxcbiAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6IE5nTW9kZWxPcHRpb25zQ29udHJvbGxlclxuICB9O1xufTtcblxuXG4vLyBzaGFsbG93IGNvcHkgb3ZlciB2YWx1ZXMgZnJvbSBgc3JjYCB0aGF0IGFyZSBub3QgYWxyZWFkeSBzcGVjaWZpZWQgb24gYGRzdGBcbmZ1bmN0aW9uIGRlZmF1bHRzKGRzdCwgc3JjKSB7XG4gIGZvckVhY2goc3JjLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgaWYgKCFpc0RlZmluZWQoZHN0W2tleV0pKSB7XG4gICAgICBkc3Rba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdOb25CaW5kYWJsZVxuICogQHJlc3RyaWN0IEFDXG4gKiBAcHJpb3JpdHkgMTAwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ05vbkJpbmRhYmxlYCBkaXJlY3RpdmUgdGVsbHMgQW5ndWxhciBub3QgdG8gY29tcGlsZSBvciBiaW5kIHRoZSBjb250ZW50cyBvZiB0aGUgY3VycmVudFxuICogRE9NIGVsZW1lbnQuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSBlbGVtZW50IGNvbnRhaW5zIHdoYXQgYXBwZWFycyB0byBiZSBBbmd1bGFyIGRpcmVjdGl2ZXMgYW5kXG4gKiBiaW5kaW5ncyBidXQgd2hpY2ggc2hvdWxkIGJlIGlnbm9yZWQgYnkgQW5ndWxhci4gVGhpcyBjb3VsZCBiZSB0aGUgY2FzZSBpZiB5b3UgaGF2ZSBhIHNpdGUgdGhhdFxuICogZGlzcGxheXMgc25pcHBldHMgb2YgY29kZSwgZm9yIGluc3RhbmNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICpcbiAqIEBleGFtcGxlXG4gKiBJbiB0aGlzIGV4YW1wbGUgdGhlcmUgYXJlIHR3byBsb2NhdGlvbnMgd2hlcmUgYSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiaW5kaW5nIChge3t9fWApIGlzIHByZXNlbnQsXG4gKiBidXQgdGhlIG9uZSB3cmFwcGVkIGluIGBuZ05vbkJpbmRhYmxlYCBpcyBsZWZ0IGFsb25lLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nLW5vbi1iaW5kYWJsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGRpdj5Ob3JtYWw6IHt7MSArIDJ9fTwvZGl2PlxuICAgICAgICA8ZGl2IG5nLW5vbi1iaW5kYWJsZT5JZ25vcmVkOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW5vbi1iaW5kYWJsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnMSArIDInKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJ2RpdicpKS5sYXN0KCkuZ2V0VGV4dCgpKS50b01hdGNoKC8xIFxcKyAyLyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdOb25CaW5kYWJsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsgdGVybWluYWw6IHRydWUsIHByaW9yaXR5OiAxMDAwIH0pO1xuXG4vKiBleHBvcnRlZCBuZ09wdGlvbnNEaXJlY3RpdmUgKi9cblxuLyogZ2xvYmFsIGpxTGl0ZVJlbW92ZSAqL1xuXG52YXIgbmdPcHRpb25zTWluRXJyID0gbWluRXJyKCduZ09wdGlvbnMnKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ09wdGlvbnNcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGBuZ09wdGlvbnNgIGF0dHJpYnV0ZSBjYW4gYmUgdXNlZCB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBhIGxpc3Qgb2YgYDxvcHRpb24+YFxuICogZWxlbWVudHMgZm9yIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQgdXNpbmcgdGhlIGFycmF5IG9yIG9iamVjdCBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZVxuICogYG5nT3B0aW9uc2AgY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLlxuICpcbiAqIEluIG1hbnkgY2FzZXMsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGNhbiBiZSB1c2VkIG9uIGA8b3B0aW9uPmAgZWxlbWVudHMgaW5zdGVhZCBvZlxuICogYG5nT3B0aW9uc2AgdG8gYWNoaWV2ZSBhIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzOlxuICogLSBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvblxuICogLSByZWR1Y2VkIG1lbW9yeSBjb25zdW1wdGlvbiBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2VcbiAqIC0gaW5jcmVhc2VkIHJlbmRlciBzcGVlZCBieSBjcmVhdGluZyB0aGUgb3B0aW9ucyBpbiBhIGRvY3VtZW50RnJhZ21lbnQgaW5zdGVhZCBvZiBpbmRpdmlkdWFsbHlcbiAqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIGFycmF5IGVsZW1lbnQgb3Igb2JqZWN0IHByb3BlcnR5XG4gKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxuICogZGlyZWN0aXZlLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiAjIyBDb21wbGV4IE1vZGVscyAob2JqZWN0cyBvciBjb2xsZWN0aW9ucylcbiAqXG4gKiBCeSBkZWZhdWx0LCBgbmdNb2RlbGAgd2F0Y2hlcyB0aGUgbW9kZWwgYnkgcmVmZXJlbmNlLCBub3QgdmFsdWUuIFRoaXMgaXMgaW1wb3J0YW50IHRvIGtub3cgd2hlblxuICogYmluZGluZyB0aGUgc2VsZWN0IHRvIGEgbW9kZWwgdGhhdCBpcyBhbiBvYmplY3Qgb3IgYSBjb2xsZWN0aW9uLlxuICpcbiAqIE9uZSBpc3N1ZSBvY2N1cnMgaWYgeW91IHdhbnQgdG8gcHJlc2VsZWN0IGFuIG9wdGlvbi4gRm9yIGV4YW1wbGUsIGlmIHlvdSBzZXRcbiAqIHRoZSBtb2RlbCB0byBhbiBvYmplY3QgdGhhdCBpcyBlcXVhbCB0byBhbiBvYmplY3QgaW4geW91ciBjb2xsZWN0aW9uLCBgbmdPcHRpb25zYCB3b24ndCBiZSBhYmxlIHRvIHNldCB0aGUgc2VsZWN0aW9uLFxuICogYmVjYXVzZSB0aGUgb2JqZWN0cyBhcmUgbm90IGlkZW50aWNhbC4gU28gYnkgZGVmYXVsdCwgeW91IHNob3VsZCBhbHdheXMgcmVmZXJlbmNlIHRoZSBpdGVtIGluIHlvdXIgY29sbGVjdGlvblxuICogZm9yIHByZXNlbGVjdGlvbnMsIGUuZy46IGAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuY29sbGVjdGlvblszXWAuXG4gKlxuICogQW5vdGhlciBzb2x1dGlvbiBpcyB0byB1c2UgYSBgdHJhY2sgYnlgIGNsYXVzZSwgYmVjYXVzZSB0aGVuIGBuZ09wdGlvbnNgIHdpbGwgdHJhY2sgdGhlIGlkZW50aXR5XG4gKiBvZiB0aGUgaXRlbSBub3QgYnkgcmVmZXJlbmNlLCBidXQgYnkgdGhlIHJlc3VsdCBvZiB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLiBGb3IgZXhhbXBsZSwgaWYgeW91clxuICogY29sbGVjdGlvbiBpdGVtcyBoYXZlIGFuIGlkIHByb3BlcnR5LCB5b3Ugd291bGQgYHRyYWNrIGJ5IGl0ZW0uaWRgLlxuICpcbiAqIEEgZGlmZmVyZW50IGlzc3VlIHdpdGggb2JqZWN0cyBvciBjb2xsZWN0aW9ucyBpcyB0aGF0IG5nTW9kZWwgd29uJ3QgZGV0ZWN0IGlmIGFuIG9iamVjdCBwcm9wZXJ0eSBvclxuICogYSBjb2xsZWN0aW9uIGl0ZW0gY2hhbmdlcy4gRm9yIHRoYXQgcmVhc29uLCBgbmdPcHRpb25zYCBhZGRpdGlvbmFsbHkgd2F0Y2hlcyB0aGUgbW9kZWwgdXNpbmdcbiAqIGAkd2F0Y2hDb2xsZWN0aW9uYCwgd2hlbiB0aGUgZXhwcmVzc2lvbiBjb250YWlucyBhIGB0cmFjayBieWAgY2xhdXNlIG9yIHRoZSB0aGUgc2VsZWN0IGhhcyB0aGUgYG11bHRpcGxlYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGFsbG93cyBuZ09wdGlvbnMgdG8gdHJpZ2dlciBhIHJlLXJlbmRlcmluZyBvZiB0aGUgb3B0aW9ucyBldmVuIGlmIHRoZSBhY3R1YWwgb2JqZWN0L2NvbGxlY3Rpb25cbiAqIGhhcyBub3QgY2hhbmdlZCBpZGVudGl0eSwgYnV0IG9ubHkgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0IG9yIGFuIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcy5cbiAqXG4gKiBOb3RlIHRoYXQgYCR3YXRjaENvbGxlY3Rpb25gIGRvZXMgYSBzaGFsbG93IGNvbXBhcmlzb24gb2YgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCAob3IgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uXG4gKiBpZiB0aGUgbW9kZWwgaXMgYW4gYXJyYXkpLiBUaGlzIG1lYW5zIHRoYXQgY2hhbmdpbmcgYSBwcm9wZXJ0eSBkZWVwZXIgdGhhbiB0aGUgZmlyc3QgbGV2ZWwgaW5zaWRlIHRoZVxuICogb2JqZWN0L2NvbGxlY3Rpb24gd2lsbCBub3QgdHJpZ2dlciBhIHJlLXJlbmRlcmluZy5cbiAqXG4gKiAjIyBgc2VsZWN0YCAqKmBhc2AqKlxuICpcbiAqIFVzaW5nIGBzZWxlY3RgICoqYGFzYCoqIHdpbGwgYmluZCB0aGUgcmVzdWx0IG9mIHRoZSBgc2VsZWN0YCBleHByZXNzaW9uIHRvIHRoZSBtb2RlbCwgYnV0XG4gKiB0aGUgdmFsdWUgb2YgdGhlIGA8c2VsZWN0PmAgYW5kIGA8b3B0aW9uPmAgaHRtbCBlbGVtZW50cyB3aWxsIGJlIGVpdGhlciB0aGUgaW5kZXggKGZvciBhcnJheSBkYXRhIHNvdXJjZXMpXG4gKiBvciBwcm9wZXJ0eSBuYW1lIChmb3Igb2JqZWN0IGRhdGEgc291cmNlcykgb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgY29sbGVjdGlvbi4gSWYgYSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uXG4gKiBpcyB1c2VkLCB0aGUgcmVzdWx0IG9mIHRoYXQgZXhwcmVzc2lvbiB3aWxsIGJlIHNldCBhcyB0aGUgdmFsdWUgb2YgdGhlIGBvcHRpb25gIGFuZCBgc2VsZWN0YCBlbGVtZW50cy5cbiAqXG4gKlxuICogIyMjIGBzZWxlY3RgICoqYGFzYCoqIGFuZCAqKmB0cmFjayBieWAqKlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiBCZSBjYXJlZnVsIHdoZW4gdXNpbmcgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqIGluIHRoZSBzYW1lIGV4cHJlc3Npb24uXG4gKiA8L2Rpdj5cbiAqXG4gKiBHaXZlbiB0aGlzIGFycmF5IG9mIGl0ZW1zIG9uIHRoZSAkc2NvcGU6XG4gKlxuICogYGBganNcbiAqICRzY29wZS5pdGVtcyA9IFt7XG4gKiAgIGlkOiAxLFxuICogICBsYWJlbDogJ2FMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2FTdWJJdGVtJyB9XG4gKiB9LCB7XG4gKiAgIGlkOiAyLFxuICogICBsYWJlbDogJ2JMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2JTdWJJdGVtJyB9XG4gKiB9XTtcbiAqIGBgYFxuICpcbiAqIFRoaXMgd2lsbCB3b3JrOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzZWxlY3Qgbmctb3B0aW9ucz1cIml0ZW0gYXMgaXRlbS5sYWJlbCBmb3IgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkXCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjwvc2VsZWN0PlxuICogYGBgXG4gKiBgYGBqc1xuICogJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLml0ZW1zWzBdO1xuICogYGBgXG4gKlxuICogYnV0IHRoaXMgd2lsbCBub3Qgd29yazpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c2VsZWN0IG5nLW9wdGlvbnM9XCJpdGVtLnN1Ykl0ZW0gYXMgaXRlbS5sYWJlbCBmb3IgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkXCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjwvc2VsZWN0PlxuICogYGBgXG4gKiBgYGBqc1xuICogJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLml0ZW1zWzBdLnN1Ykl0ZW07XG4gKiBgYGBcbiAqXG4gKiBJbiBib3RoIGV4YW1wbGVzLCB0aGUgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBpcyBhcHBsaWVkIHN1Y2Nlc3NmdWxseSB0byBlYWNoIGBpdGVtYCBpbiB0aGVcbiAqIGBpdGVtc2AgYXJyYXkuIEJlY2F1c2UgdGhlIHNlbGVjdGVkIG9wdGlvbiBoYXMgYmVlbiBzZXQgcHJvZ3JhbW1hdGljYWxseSBpbiB0aGUgY29udHJvbGxlciwgdGhlXG4gKiAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGlzIGFsc28gYXBwbGllZCB0byB0aGUgYG5nTW9kZWxgIHZhbHVlLiBJbiB0aGUgZmlyc3QgZXhhbXBsZSwgdGhlXG4gKiBgbmdNb2RlbGAgdmFsdWUgaXMgYGl0ZW1zWzBdYCBhbmQgdGhlICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGBpdGVtc1swXS5pZGAgd2l0aFxuICogbm8gaXNzdWUuIEluIHRoZSBzZWNvbmQgZXhhbXBsZSwgdGhlIGBuZ01vZGVsYCB2YWx1ZSBpcyBgaXRlbXNbMF0uc3ViSXRlbWAgYW5kIHRoZSAqKmB0cmFjayBieWAqKlxuICogZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYGl0ZW1zWzBdLnN1Ykl0ZW0uaWRgICh3aGljaCBpcyB1bmRlZmluZWQpLiBBcyBhIHJlc3VsdCwgdGhlIG1vZGVsIHZhbHVlXG4gKiBpcyBub3QgbWF0Y2hlZCBhZ2FpbnN0IGFueSBgPG9wdGlvbj5gIGFuZCB0aGUgYDxzZWxlY3Q+YCBhcHBlYXJzIGFzIGhhdmluZyBubyBzZWxlY3RlZCB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBBbmd1bGFySlMgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge2NvbXByZWhlbnNpb25fZXhwcmVzc2lvbn0gbmdPcHRpb25zIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1zOlxuICpcbiAqICAgKiBmb3IgYXJyYXkgZGF0YSBzb3VyY2VzOlxuICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGRpc2FibGUgd2hlbmAqKiBgZGlzYWJsZWAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgXG4gKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgfCBvcmRlckJ5OmBvcmRlcmV4cHJgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgXG4gKiAgICAgICAgKGZvciBpbmNsdWRpbmcgYSBmaWx0ZXIgd2l0aCBgdHJhY2sgYnlgKVxuICogICAqIGZvciBvYmplY3QgZGF0YSBzb3VyY2VzOlxuICogICAgICogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yIChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYFxuICogICAgICAgICAqKmBmb3JgIGAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKlxuICogV2hlcmU6XG4gKlxuICogICAqIGBhcnJheWAgLyBgb2JqZWN0YDogYW4gZXhwcmVzc2lvbiB3aGljaCBldmFsdWF0ZXMgdG8gYW4gYXJyYXkgLyBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogICAqIGB2YWx1ZWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gZWFjaCBpdGVtIGluIHRoZSBgYXJyYXlgIG9yIGVhY2ggcHJvcGVydHkgdmFsdWVcbiAqICAgICAgb2YgYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi5cbiAqICAgKiBga2V5YDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBhIHByb3BlcnR5IG5hbWUgaW4gYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi5cbiAqICAgKiBgbGFiZWxgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHRoZSBsYWJlbCBmb3IgYDxvcHRpb24+YCBlbGVtZW50LiBUaGVcbiAqICAgICBgZXhwcmVzc2lvbmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGUgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuXG4gKiAgICogYHNlbGVjdGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIG9mIHRoZSBwYXJlbnQgYDxzZWxlY3Q+YFxuICogICAgICBlbGVtZW50LiBJZiBub3Qgc3BlY2lmaWVkLCBgc2VsZWN0YCBleHByZXNzaW9uIHdpbGwgZGVmYXVsdCB0byBgdmFsdWVgLlxuICogICAqIGBncm91cGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBncm91cCBvcHRpb25zIHVzaW5nIHRoZSBgPG9wdGdyb3VwPmBcbiAqICAgICAgRE9NIGVsZW1lbnQuXG4gKiAgICogYGRpc2FibGVgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHVzZWQgdG8gZGlzYWJsZSB0aGUgcmVuZGVyZWQgYDxvcHRpb24+YFxuICogICAgICBlbGVtZW50LiBSZXR1cm4gYHRydWVgIHRvIGRpc2FibGUuXG4gKiAgICogYHRyYWNrZXhwcmA6IFVzZWQgd2hlbiB3b3JraW5nIHdpdGggYW4gYXJyYXkgb2Ygb2JqZWN0cy4gVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZVxuICogICAgICB1c2VkIHRvIGlkZW50aWZ5IHRoZSBvYmplY3RzIGluIHRoZSBhcnJheS4gVGhlIGB0cmFja2V4cHJgIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlXG4gKiAgICAgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuIFdpdGggdGhpcyB0aGUgc2VsZWN0aW9uIGlzIHByZXNlcnZlZFxuICogICAgICBldmVuIHdoZW4gdGhlIG9wdGlvbnMgYXJlIHJlY3JlYXRlZCAoZS5nLiByZWxvYWRlZCBmcm9tIHRoZSBzZXJ2ZXIpLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBUaGUgY29udHJvbCBpcyBjb25zaWRlcmVkIHZhbGlkIG9ubHkgaWYgdmFsdWUgaXMgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0F0dHJTaXplIHNldHMgdGhlIHNpemUgb2YgdGhlIHNlbGVjdCBlbGVtZW50IGR5bmFtaWNhbGx5LiBVc2VzIHRoZVxuICoge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24jLW5nYXR0ci1mb3ItYmluZGluZy10by1hcmJpdHJhcnktYXR0cmlidXRlcyBuZ0F0dHJ9IGRpcmVjdGl2ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG1vZHVsZT1cInNlbGVjdEV4YW1wbGVcIiBuYW1lPVwic2VsZWN0XCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2VsZWN0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29sb3JzID0gW1xuICAgICAgICAgICAgICB7bmFtZTonYmxhY2snLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTond2hpdGUnLCBzaGFkZTonbGlnaHQnLCBub3RBbk9wdGlvbjogdHJ1ZX0sXG4gICAgICAgICAgICAgIHtuYW1lOidyZWQnLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJywgbm90QW5PcHRpb246IHRydWV9LFxuICAgICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0Jywgbm90QW5PcHRpb246IGZhbHNlfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICRzY29wZS5teUNvbG9yID0gJHNjb3BlLmNvbG9yc1syXTsgLy8gcmVkXG4gICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGkgbmctcmVwZWF0PVwiY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJjb2xvci5uYW1lXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbG9yLm5vdEFuT3B0aW9uXCI+IERpc2FibGVkPzwvbGFiZWw+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcnMuc3BsaWNlKCRpbmRleCwgMSlcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9ycy5wdXNoKHt9KVwiPmFkZDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgPGxhYmVsPkNvbG9yIChudWxsIG5vdCBhbGxvd2VkKTpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPjwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgKG51bGwgYWxsb3dlZCk6XG4gICAgICAgICAgPHNwYW4gIGNsYXNzPVwibnVsbGFibGVcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0gY2hvb3NlIGNvbG9yIC0tPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L3NwYW4+PC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPGxhYmVsPkNvbG9yIGdyb3VwZWQgYnkgc2hhZGU6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGdyb3VwIGJ5IGNvbG9yLnNoYWRlIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDxsYWJlbD5Db2xvciBncm91cGVkIGJ5IHNoYWRlLCB3aXRoIHNvbWUgZGlzYWJsZWQ6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiXG4gICAgICAgICAgICAgICAgICBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBkaXNhYmxlIHdoZW4gY29sb3Iubm90QW5PcHRpb24gZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuXG5cblxuICAgICAgICAgIFNlbGVjdCA8YnV0dG9uIG5nLWNsaWNrPVwibXlDb2xvciA9IHsgbmFtZTonbm90IGluIGxpc3QnLCBzaGFkZTogJ290aGVyJyB9XCI+Ym9ndXM8L2J1dHRvbj4uXG4gICAgICAgICAgPGJyLz5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICAgIEN1cnJlbnRseSBzZWxlY3RlZDoge3sge3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9IH19XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4XCJcbiAgICAgICAgICAgICAgIG5nLXN0eWxlPVwieydiYWNrZ3JvdW5kLWNvbG9yJzpteUNvbG9yLm5hbWV9XCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ3JlZCcpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXlDb2xvcicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdibGFjaycpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdudWxsJyk7XG4gICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuLy8gICAgICAgICAgICAgICAgICAgICAvLzAwMDAxMTExMTExMTExMDAwMDAwMDAwMDAyMjIyMjIyMjIyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzMzMzMzMzMzMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0NDQ0NDQ0NDQ0NDAwMDAwMDAwMDAwMDA1NTU1NTU1NTU1NTU1MDAwMDAwMDAwNjY2NjY2NjY2NjY2NjAwMDAwMDA3Nzc3Nzc3Nzc3Nzc3MDAwMDAwMDAwMDAwMDAwODg4ODg4ODg4ODAwMDAwMDAwMDAwMDAwMDAwMDA5OTk5OTk5OTk5XG52YXIgTkdfT1BUSU9OU19SRUdFWFAgPSAvXlxccyooW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrZ3JvdXBcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrZGlzYWJsZVxccyt3aGVuXFxzKyhbXFxzXFxTXSs/KSk/XFxzK2ZvclxccysoPzooWyRcXHddWyRcXHddKil8KD86XFwoXFxzKihbJFxcd11bJFxcd10qKVxccyosXFxzKihbJFxcd11bJFxcd10qKVxccypcXCkpKVxccytpblxccysoW1xcc1xcU10rPykoPzpcXHMrdHJhY2tcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT8kLztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE6IHZhbHVlIGV4cHJlc3Npb24gKHZhbHVlRm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAyOiBsYWJlbCBleHByZXNzaW9uIChkaXNwbGF5Rm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAzOiBncm91cCBieSBleHByZXNzaW9uIChncm91cEJ5Rm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA0OiBkaXNhYmxlIHdoZW4gZXhwcmVzc2lvbiAoZGlzYWJsZVdoZW5GbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDU6IGFycmF5IGl0ZW0gdmFyaWFibGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNjogb2JqZWN0IGl0ZW0ga2V5IHZhcmlhYmxlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDc6IG9iamVjdCBpdGVtIHZhbHVlIHZhcmlhYmxlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDg6IGNvbGxlY3Rpb24gZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gOTogdHJhY2sgYnkgZXhwcmVzc2lvblxuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5cbnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRkb2N1bWVudCcsICckcGFyc2UnLCBmdW5jdGlvbigkY29tcGlsZSwgJGRvY3VtZW50LCAkcGFyc2UpIHtcblxuICBmdW5jdGlvbiBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKG9wdGlvbnNFeHAsIHNlbGVjdEVsZW1lbnQsIHNjb3BlKSB7XG5cbiAgICB2YXIgbWF0Y2ggPSBvcHRpb25zRXhwLm1hdGNoKE5HX09QVElPTlNfUkVHRVhQKTtcbiAgICBpZiAoIShtYXRjaCkpIHtcbiAgICAgIHRocm93IG5nT3B0aW9uc01pbkVycignaWV4cCcsXG4gICAgICAgICdFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgJyArXG4gICAgICAgICdcXCdfc2VsZWN0XyAoYXMgX2xhYmVsXyk/IGZvciAoX2tleV8sKT9fdmFsdWVfIGluIF9jb2xsZWN0aW9uX1xcJycgK1xuICAgICAgICAnIGJ1dCBnb3QgXFwnezB9XFwnLiBFbGVtZW50OiB7MX0nLFxuICAgICAgICBvcHRpb25zRXhwLCBzdGFydGluZ1RhZyhzZWxlY3RFbGVtZW50KSk7XG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCB0aGUgcGFydHMgZnJvbSB0aGUgbmdPcHRpb25zIGV4cHJlc3Npb25cblxuICAgIC8vIFRoZSB2YXJpYWJsZSBuYW1lIGZvciB0aGUgdmFsdWUgb2YgdGhlIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb25cbiAgICB2YXIgdmFsdWVOYW1lID0gbWF0Y2hbNV0gfHwgbWF0Y2hbN107XG4gICAgLy8gVGhlIHZhcmlhYmxlIG5hbWUgZm9yIHRoZSBrZXkgb2YgdGhlIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb25cbiAgICB2YXIga2V5TmFtZSA9IG1hdGNoWzZdO1xuXG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGdlbmVyYXRlcyB0aGUgdmlld1ZhbHVlIGZvciBhbiBvcHRpb24gaWYgdGhlcmUgaXMgYSBsYWJlbCBleHByZXNzaW9uXG4gICAgdmFyIHNlbGVjdEFzID0gLyBhcyAvLnRlc3QobWF0Y2hbMF0pICYmIG1hdGNoWzFdO1xuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIHRvIHRyYWNrIHRoZSBpZCBvZiBlYWNoIG9iamVjdCBpbiB0aGUgb3B0aW9ucyBjb2xsZWN0aW9uXG4gICAgdmFyIHRyYWNrQnkgPSBtYXRjaFs5XTtcbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgZ2VuZXJhdGVzIHRoZSB2aWV3VmFsdWUgZm9yIGFuIG9wdGlvbiBpZiB0aGVyZSBpcyBubyBsYWJlbCBleHByZXNzaW9uXG4gICAgdmFyIHZhbHVlRm4gPSAkcGFyc2UobWF0Y2hbMl0gPyBtYXRjaFsxXSA6IHZhbHVlTmFtZSk7XG4gICAgdmFyIHNlbGVjdEFzRm4gPSBzZWxlY3RBcyAmJiAkcGFyc2Uoc2VsZWN0QXMpO1xuICAgIHZhciB2aWV3VmFsdWVGbiA9IHNlbGVjdEFzRm4gfHwgdmFsdWVGbjtcbiAgICB2YXIgdHJhY2tCeUZuID0gdHJhY2tCeSAmJiAkcGFyc2UodHJhY2tCeSk7XG5cbiAgICAvLyBHZXQgdGhlIHZhbHVlIGJ5IHdoaWNoIHdlIGFyZSBnb2luZyB0byB0cmFjayB0aGUgb3B0aW9uXG4gICAgLy8gaWYgd2UgaGF2ZSBhIHRyYWNrRm4gdGhlbiB1c2UgdGhhdCAocGFzc2luZyBzY29wZSBhbmQgbG9jYWxzKVxuICAgIC8vIG90aGVyd2lzZSBqdXN0IGhhc2ggdGhlIGdpdmVuIHZpZXdWYWx1ZVxuICAgIHZhciBnZXRUcmFja0J5VmFsdWVGbiA9IHRyYWNrQnkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24odmFsdWUsIGxvY2FscykgeyByZXR1cm4gdHJhY2tCeUZuKHNjb3BlLCBsb2NhbHMpOyB9IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEhhc2hPZlZhbHVlKHZhbHVlKSB7IHJldHVybiBoYXNoS2V5KHZhbHVlKTsgfTtcbiAgICB2YXIgZ2V0VHJhY2tCeVZhbHVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmV0dXJuIGdldFRyYWNrQnlWYWx1ZUZuKHZhbHVlLCBnZXRMb2NhbHModmFsdWUsIGtleSkpO1xuICAgIH07XG5cbiAgICB2YXIgZGlzcGxheUZuID0gJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKTtcbiAgICB2YXIgZ3JvdXBCeUZuID0gJHBhcnNlKG1hdGNoWzNdIHx8ICcnKTtcbiAgICB2YXIgZGlzYWJsZVdoZW5GbiA9ICRwYXJzZShtYXRjaFs0XSB8fCAnJyk7XG4gICAgdmFyIHZhbHVlc0ZuID0gJHBhcnNlKG1hdGNoWzhdKTtcblxuICAgIHZhciBsb2NhbHMgPSB7fTtcbiAgICB2YXIgZ2V0TG9jYWxzID0ga2V5TmFtZSA/IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIGxvY2Fsc1trZXlOYW1lXSA9IGtleTtcbiAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gbG9jYWxzO1xuICAgIH0gOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBsb2NhbHM7XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gT3B0aW9uKHNlbGVjdFZhbHVlLCB2aWV3VmFsdWUsIGxhYmVsLCBncm91cCwgZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2VsZWN0VmFsdWUgPSBzZWxlY3RWYWx1ZTtcbiAgICAgIHRoaXMudmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKSB7XG4gICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cztcblxuICAgICAgaWYgKCFrZXlOYW1lICYmIGlzQXJyYXlMaWtlKG9wdGlvblZhbHVlcykpIHtcbiAgICAgICAgb3B0aW9uVmFsdWVzS2V5cyA9IG9wdGlvblZhbHVlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBpbiBlbnVtZXJhdGlvbiBvcmRlciwgdW5zb3J0ZWRcbiAgICAgICAgb3B0aW9uVmFsdWVzS2V5cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpdGVtS2V5IGluIG9wdGlvblZhbHVlcykge1xuICAgICAgICAgIGlmIChvcHRpb25WYWx1ZXMuaGFzT3duUHJvcGVydHkoaXRlbUtleSkgJiYgaXRlbUtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgICAgb3B0aW9uVmFsdWVzS2V5cy5wdXNoKGl0ZW1LZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvblZhbHVlc0tleXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYWNrQnk6IHRyYWNrQnksXG4gICAgICBnZXRUcmFja0J5VmFsdWU6IGdldFRyYWNrQnlWYWx1ZSxcbiAgICAgIGdldFdhdGNoYWJsZXM6ICRwYXJzZSh2YWx1ZXNGbiwgZnVuY3Rpb24ob3B0aW9uVmFsdWVzKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGNvbGxlY3Rpb24gb2YgdGhpbmdzIHRoYXQgd2Ugd291bGQgbGlrZSB0byB3YXRjaCAod2F0Y2hlZEFycmF5KVxuICAgICAgICAvLyBzbyB0aGF0IHRoZXkgY2FuIGFsbCBiZSB3YXRjaGVkIHVzaW5nIGEgc2luZ2xlICR3YXRjaENvbGxlY3Rpb25cbiAgICAgICAgLy8gdGhhdCBvbmx5IHJ1bnMgdGhlIGhhbmRsZXIgb25jZSBpZiBhbnl0aGluZyBjaGFuZ2VzXG4gICAgICAgIHZhciB3YXRjaGVkQXJyYXkgPSBbXTtcbiAgICAgICAgb3B0aW9uVmFsdWVzID0gb3B0aW9uVmFsdWVzIHx8IFtdO1xuXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzID0gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzTGVuZ3RoID0gb3B0aW9uVmFsdWVzS2V5cy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBvcHRpb25WYWx1ZXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICB2YXIga2V5ID0gKG9wdGlvblZhbHVlcyA9PT0gb3B0aW9uVmFsdWVzS2V5cykgPyBpbmRleCA6IG9wdGlvblZhbHVlc0tleXNbaW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvblZhbHVlc1trZXldO1xuXG4gICAgICAgICAgdmFyIGxvY2FscyA9IGdldExvY2Fscyh2YWx1ZSwga2V5KTtcbiAgICAgICAgICB2YXIgc2VsZWN0VmFsdWUgPSBnZXRUcmFja0J5VmFsdWVGbih2YWx1ZSwgbG9jYWxzKTtcbiAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChzZWxlY3RWYWx1ZSk7XG5cbiAgICAgICAgICAvLyBPbmx5IG5lZWQgdG8gd2F0Y2ggdGhlIGRpc3BsYXlGbiBpZiB0aGVyZSBpcyBhIHNwZWNpZmljIGxhYmVsIGV4cHJlc3Npb25cbiAgICAgICAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgIHZhciBsYWJlbCA9IGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgIHdhdGNoZWRBcnJheS5wdXNoKGxhYmVsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBPbmx5IG5lZWQgdG8gd2F0Y2ggdGhlIGRpc2FibGVXaGVuRm4gaWYgdGhlcmUgaXMgYSBzcGVjaWZpYyBkaXNhYmxlIGV4cHJlc3Npb25cbiAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgIHZhciBkaXNhYmxlV2hlbiA9IGRpc2FibGVXaGVuRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChkaXNhYmxlV2hlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3YXRjaGVkQXJyYXk7XG4gICAgICB9KSxcblxuICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIG9wdGlvbkl0ZW1zID0gW107XG4gICAgICAgIHZhciBzZWxlY3RWYWx1ZU1hcCA9IHt9O1xuXG4gICAgICAgIC8vIFRoZSBvcHRpb24gdmFsdWVzIHdlcmUgYWxyZWFkeSBjb21wdXRlZCBpbiB0aGUgYGdldFdhdGNoYWJsZXNgIGZuLFxuICAgICAgICAvLyB3aGljaCBtdXN0IGhhdmUgYmVlbiBjYWxsZWQgdG8gdHJpZ2dlciBgZ2V0T3B0aW9uc2BcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlcyA9IHZhbHVlc0ZuKHNjb3BlKSB8fCBbXTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXMgPSBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcyk7XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNMZW5ndGggPSBvcHRpb25WYWx1ZXNLZXlzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9uVmFsdWVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IChvcHRpb25WYWx1ZXMgPT09IG9wdGlvblZhbHVlc0tleXMpID8gaW5kZXggOiBvcHRpb25WYWx1ZXNLZXlzW2luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25WYWx1ZXNba2V5XTtcbiAgICAgICAgICB2YXIgbG9jYWxzID0gZ2V0TG9jYWxzKHZhbHVlLCBrZXkpO1xuICAgICAgICAgIHZhciB2aWV3VmFsdWUgPSB2aWV3VmFsdWVGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgc2VsZWN0VmFsdWUgPSBnZXRUcmFja0J5VmFsdWVGbih2aWV3VmFsdWUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGxhYmVsID0gZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBncm91cCA9IGdyb3VwQnlGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBkaXNhYmxlV2hlbkZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBvcHRpb25JdGVtID0gbmV3IE9wdGlvbihzZWxlY3RWYWx1ZSwgdmlld1ZhbHVlLCBsYWJlbCwgZ3JvdXAsIGRpc2FibGVkKTtcblxuICAgICAgICAgIG9wdGlvbkl0ZW1zLnB1c2gob3B0aW9uSXRlbSk7XG4gICAgICAgICAgc2VsZWN0VmFsdWVNYXBbc2VsZWN0VmFsdWVdID0gb3B0aW9uSXRlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXRlbXM6IG9wdGlvbkl0ZW1zLFxuICAgICAgICAgIHNlbGVjdFZhbHVlTWFwOiBzZWxlY3RWYWx1ZU1hcCxcbiAgICAgICAgICBnZXRPcHRpb25Gcm9tVmlld1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdFZhbHVlTWFwW2dldFRyYWNrQnlWYWx1ZSh2YWx1ZSldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbjogZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdmlld1ZhbHVlIGNvdWxkIGJlIGFuIG9iamVjdCB0aGF0IG1heSBiZSBtdXRhdGVkIGJ5IHRoZSBhcHBsaWNhdGlvbixcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gbWFrZSBhIGNvcHkgYW5kIG5vdCByZXR1cm4gdGhlIHJlZmVyZW5jZSB0byB0aGUgdmFsdWUgb24gdGhlIG9wdGlvbi5cbiAgICAgICAgICAgIHJldHVybiB0cmFja0J5ID8gY29weShvcHRpb24udmlld1ZhbHVlKSA6IG9wdGlvbi52aWV3VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuXG4gIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICB2YXIgb3B0aW9uVGVtcGxhdGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyksXG4gICAgICBvcHRHcm91cFRlbXBsYXRlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGdyb3VwJyk7XG5cbiAgICBmdW5jdGlvbiBuZ09wdGlvbnNQb3N0TGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgdmFyIG11bHRpcGxlID0gYXR0ci5tdWx0aXBsZTtcblxuICAgICAgLy8gVGhlIGVtcHR5T3B0aW9uIGFsbG93cyB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIHRvIHByb3ZpZGUgdGhlaXIgb3duIGN1c3RvbSBcImVtcHR5XCJcbiAgICAgIC8vIG9wdGlvbiB3aGVuIHRoZSB2aWV3VmFsdWUgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb24gdmFsdWVzLlxuICAgICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkcmVuID0gc2VsZWN0RWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24gPSBjaGlsZHJlbi5lcShpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcHJvdmlkZWRFbXB0eU9wdGlvbiA9ICEhc2VsZWN0Q3RybC5lbXB0eU9wdGlvbjtcblxuICAgICAgdmFyIHVua25vd25PcHRpb24gPSBqcUxpdGUob3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICB1bmtub3duT3B0aW9uLnZhbCgnPycpO1xuXG4gICAgICB2YXIgb3B0aW9ucztcbiAgICAgIHZhciBuZ09wdGlvbnMgPSBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKGF0dHIubmdPcHRpb25zLCBzZWxlY3RFbGVtZW50LCBzY29wZSk7XG4gICAgICAvLyBUaGlzIHN0b3JlcyB0aGUgbmV3bHkgY3JlYXRlZCBvcHRpb25zIGJlZm9yZSB0aGV5IGFyZSBhcHBlbmRlZCB0byB0aGUgc2VsZWN0LlxuICAgICAgLy8gU2luY2UgdGhlIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIGZyYWdtZW50IHdoZW4gaXQgaXMgYXBwZW5kZWQsXG4gICAgICAvLyB3ZSBvbmx5IG5lZWQgdG8gY3JlYXRlIGl0IG9uY2UuXG4gICAgICB2YXIgbGlzdEZyYWdtZW50ID0gJGRvY3VtZW50WzBdLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgLy8gT3ZlcndyaXRlIHRoZSBpbXBsZW1lbnRhdGlvbi4gbmdPcHRpb25zIGRvZXNuJ3QgdXNlIGhhc2hlc1xuICAgICAgc2VsZWN0Q3RybC5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gJz8nO1xuICAgICAgfTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBjb250cm9sbGVyIG1ldGhvZHMgZm9yIG11bHRpcGxlIHNlbGVjdGFibGUgb3B0aW9uc1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTmdPcHRpb25zVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWRPcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3NlbGVjdEVsZW1lbnQudmFsKCldO1xuICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLmdldE9wdGlvbkZyb21WaWV3VmFsdWUodmFsdWUpO1xuXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlIGZyb20gdGhlIHByZXZpb3VzbHkgc2VsZWN0ZWQgb3B0aW9uXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBzY3JlZW4gcmVhZGVycyBtaWdodCBnZXQgY29uZnVzZWRcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRPcHRpb24pIHNlbGVjdGVkT3B0aW9uLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgLy8gRG9uJ3QgdXBkYXRlIHRoZSBvcHRpb24gd2hlbiBpdCBpcyBhbHJlYWR5IHNlbGVjdGVkLlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIHRoZSBicm93c2VyIHdpbGwgc2VsZWN0IHRoZSBmaXJzdCBvcHRpb24gYnkgZGVmYXVsdC4gSW4gdGhhdCBjYXNlLFxuICAgICAgICAgICAgLy8gbW9zdCBwcm9wZXJ0aWVzIGFyZSBzZXQgYXV0b21hdGljYWxseSAtIGV4Y2VwdCB0aGUgYHNlbGVjdGVkYCBhdHRyaWJ1dGUsIHdoaWNoIHdlXG4gICAgICAgICAgICAvLyBzZXQgYWx3YXlzXG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RFbGVtZW50WzBdLnZhbHVlICE9PSBvcHRpb24uc2VsZWN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwudW5zZWxlY3RFbXB0eU9wdGlvbigpO1xuXG4gICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnRbMF0udmFsdWUgPSBvcHRpb24uc2VsZWN0VmFsdWU7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChwcm92aWRlZEVtcHR5T3B0aW9uKSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwuc2VsZWN0RW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0Q3RybC51bmtub3duT3B0aW9uLnBhcmVudCgpLmxlbmd0aCkge1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLnVwZGF0ZVVua25vd25PcHRpb24odmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW5kZXJVbmtub3duT3B0aW9uKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTmdPcHRpb25zVmFsdWUoKSB7XG5cbiAgICAgICAgICB2YXIgc2VsZWN0ZWRPcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3NlbGVjdEVsZW1lbnQudmFsKCldO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uICYmICFzZWxlY3RlZE9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgc2VsZWN0Q3RybC51bnNlbGVjdEVtcHR5T3B0aW9uKCk7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmdldFZpZXdWYWx1ZUZyb21PcHRpb24oc2VsZWN0ZWRPcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgdXNpbmcgYHRyYWNrIGJ5YCB0aGVuIHdlIG11c3Qgd2F0Y2ggdGhlIHRyYWNrZWQgdmFsdWUgb24gdGhlIG1vZGVsXG4gICAgICAgIC8vIHNpbmNlIG5nTW9kZWwgb25seSB3YXRjaGVzIGZvciBvYmplY3QgaWRlbnRpdHkgY2hhbmdlXG4gICAgICAgIC8vIEZJWE1FOiBXaGVuIGEgdXNlciBzZWxlY3RzIGFuIG9wdGlvbiwgdGhpcyB3YXRjaCB3aWxsIGZpcmUgbmVlZGxlc3NseVxuICAgICAgICBpZiAobmdPcHRpb25zLnRyYWNrQnkpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIG5nT3B0aW9ucy5nZXRUcmFja0J5VmFsdWUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSk7IH0sXG4gICAgICAgICAgICBmdW5jdGlvbigpIHsgbmdNb2RlbEN0cmwuJHJlbmRlcigpOyB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTmdPcHRpb25zTXVsdGlwbGUodmFsdWVzKSB7XG4gICAgICAgICAgLy8gT25seSBzZXQgYDxvcHRpb24+LnNlbGVjdGVkYCBpZiBuZWNlc3NhcnksIGluIG9yZGVyIHRvIHByZXZlbnQgc29tZSBicm93c2VycyBmcm9tXG4gICAgICAgICAgLy8gc2Nyb2xsaW5nIHRvIGA8b3B0aW9uPmAgZWxlbWVudHMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50J3Mgdmlld3BvcnQuXG5cbiAgICAgICAgICB2YXIgc2VsZWN0ZWRPcHRpb25zID0gdmFsdWVzICYmIHZhbHVlcy5tYXAoZ2V0QW5kVXBkYXRlU2VsZWN0ZWRPcHRpb24pIHx8IFtdO1xuXG4gICAgICAgICAgb3B0aW9ucy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkICYmICFpbmNsdWRlcyhzZWxlY3RlZE9wdGlvbnMsIG9wdGlvbikpIHtcbiAgICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIHNlbGVjdEN0cmwucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZE5nT3B0aW9uc011bHRpcGxlKCkge1xuICAgICAgICAgIHZhciBzZWxlY3RlZFZhbHVlcyA9IHNlbGVjdEVsZW1lbnQudmFsKCkgfHwgW10sXG4gICAgICAgICAgICAgIHNlbGVjdGlvbnMgPSBbXTtcblxuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRWYWx1ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5zZWxlY3RWYWx1ZU1hcFt2YWx1ZV07XG4gICAgICAgICAgICBpZiAob3B0aW9uICYmICFvcHRpb24uZGlzYWJsZWQpIHNlbGVjdGlvbnMucHVzaChvcHRpb25zLmdldFZpZXdWYWx1ZUZyb21PcHRpb24ob3B0aW9uKSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gc2VsZWN0aW9ucztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgdXNpbmcgYHRyYWNrIGJ5YCB0aGVuIHdlIG11c3Qgd2F0Y2ggdGhlc2UgdHJhY2tlZCB2YWx1ZXMgb24gdGhlIG1vZGVsXG4gICAgICAgIC8vIHNpbmNlIG5nTW9kZWwgb25seSB3YXRjaGVzIGZvciBvYmplY3QgaWRlbnRpdHkgY2hhbmdlXG4gICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSkge1xuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZ09wdGlvbnMuZ2V0VHJhY2tCeVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvdmlkZWRFbXB0eU9wdGlvbikge1xuXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGJlZm9yZSBjYWxsaW5nIHNlbGVjdEVsZW1lbnQuZW1wdHkoKSBiZWNhdXNlIG90aGVyd2lzZSBJRSB3aWxsXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgbGFiZWwgZnJvbSB0aGUgZWxlbWVudC4gd3RmP1xuICAgICAgICBzZWxlY3RDdHJsLmVtcHR5T3B0aW9uLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIGNvbXBpbGUgdGhlIGVsZW1lbnQgc2luY2UgdGhlcmUgbWlnaHQgYmUgYmluZGluZ3MgaW4gaXRcbiAgICAgICAgJGNvbXBpbGUoc2VsZWN0Q3RybC5lbXB0eU9wdGlvbikoc2NvcGUpO1xuXG4gICAgICAgIGlmIChzZWxlY3RDdHJsLmVtcHR5T3B0aW9uWzBdLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCkge1xuICAgICAgICAgIC8vIFRoaXMgbWVhbnMgdGhlIGVtcHR5IG9wdGlvbiBoYXMgY3VycmVudGx5IG5vIGFjdHVhbCBET00gbm9kZSwgcHJvYmFibHkgYmVjYXVzZVxuICAgICAgICAgIC8vIGl0IGhhcyBiZWVuIG1vZGlmaWVkIGJ5IGEgdHJhbnNjbHVzaW9uIGRpcmVjdGl2ZS5cbiAgICAgICAgICBzZWxlY3RDdHJsLmhhc0VtcHR5T3B0aW9uID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBSZWRlZmluZSB0aGUgcmVnaXN0ZXJPcHRpb24gZnVuY3Rpb24sIHdoaWNoIHdpbGwgY2F0Y2hcbiAgICAgICAgICAvLyBvcHRpb25zIHRoYXQgYXJlIGFkZGVkIGJ5IG5nSWYgZXRjLiAocmVuZGVyaW5nIG9mIHRoZSBub2RlIGlzIGFzeW5jIGJlY2F1c2Ugb2ZcbiAgICAgICAgICAvLyBsYXp5IHRyYW5zY2x1c2lvbilcbiAgICAgICAgICBzZWxlY3RDdHJsLnJlZ2lzdGVyT3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uU2NvcGUsIG9wdGlvbkVsKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uRWwudmFsKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLmVtcHR5T3B0aW9uID0gb3B0aW9uRWw7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7XG4gICAgICAgICAgICAgIC8vIFRoaXMgZW5zdXJlcyB0aGUgbmV3IGVtcHR5IG9wdGlvbiBpcyBzZWxlY3RlZCBpZiBwcmV2aW91c2x5IG5vIG9wdGlvbiB3YXMgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgICAgICAgIG9wdGlvbkVsLm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZWxlY3RDdHJsLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjbGFzcywgd2hpY2ggaXMgYWRkZWQgYXV0b21hdGljYWxseSBiZWNhdXNlIHdlIHJlY29tcGlsZSB0aGUgZWxlbWVudCBhbmQgaXRcbiAgICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290XG4gICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIHNlbGVjdEVsZW1lbnQuZW1wdHkoKTtcblxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGhlcmUgdG8gZW5zdXJlIHRoYXQgdGhlIG9wdGlvbnMgb2JqZWN0IGlzIGRlZmluZWRcbiAgICAgIC8vIHdoZW4gd2UgZmlyc3QgaGl0IGl0IGluIHdyaXRlTmdPcHRpb25zVmFsdWVcbiAgICAgIHVwZGF0ZU9wdGlvbnMoKTtcblxuICAgICAgLy8gV2Ugd2lsbCByZS1yZW5kZXIgdGhlIG9wdGlvbiBlbGVtZW50cyBpZiB0aGUgb3B0aW9uIHZhbHVlcyBvciBsYWJlbHMgY2hhbmdlXG4gICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKG5nT3B0aW9ucy5nZXRXYXRjaGFibGVzLCB1cGRhdGVPcHRpb25zKTtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgICAgIGZ1bmN0aW9uIGFkZE9wdGlvbkVsZW1lbnQob3B0aW9uLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIG9wdGlvbkVsZW1lbnQgPSBvcHRpb25UZW1wbGF0ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQob3B0aW9uRWxlbWVudCk7XG4gICAgICAgIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBvcHRpb25FbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0QW5kVXBkYXRlU2VsZWN0ZWRPcHRpb24odmlld1ZhbHVlKSB7XG4gICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLmdldE9wdGlvbkZyb21WaWV3VmFsdWUodmlld1ZhbHVlKTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBvcHRpb24gJiYgb3B0aW9uLmVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuc2VsZWN0ZWQpIGVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBlbGVtZW50KSB7XG4gICAgICAgIG9wdGlvbi5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IG9wdGlvbi5kaXNhYmxlZDtcbiAgICAgICAgLy8gTk9URTogVGhlIGxhYmVsIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgdmFsdWUsIG90aGVyd2lzZSBJRTEwLzExL0VER0UgY3JlYXRlIHVucmVzcG9uc2l2ZVxuICAgICAgICAvLyBzZWxlY3RzIGluIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcyB3aGVuIG11bHRpcGxlIHNlbGVjdHMgYXJlIG5leHQgdG8gZWFjaCBvdGhlciBhbmQgZGlzcGxheVxuICAgICAgICAvLyB0aGUgb3B0aW9uIGxpc3QgaW4gbGlzdGJveCBzdHlsZSwgaS5lLiB0aGUgc2VsZWN0IGlzIFttdWx0aXBsZV0sIG9yIHNwZWNpZmllcyBhIFtzaXplXS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzExMzE0IGZvciBtb3JlIGluZm8uXG4gICAgICAgIC8vIFRoaXMgaXMgdW5mb3J0dW5hdGVseSB1bnRlc3RhYmxlIHdpdGggdW5pdCAvIGUyZSB0ZXN0c1xuICAgICAgICBpZiAob3B0aW9uLmxhYmVsICE9PSBlbGVtZW50LmxhYmVsKSB7XG4gICAgICAgICAgZWxlbWVudC5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBvcHRpb24uc2VsZWN0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gb3B0aW9ucyAmJiBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuXG4gICAgICAgIC8vIFdlIG11c3QgcmVtb3ZlIGFsbCBjdXJyZW50IG9wdGlvbnMsIGJ1dCBjYW5ub3Qgc2ltcGx5IHNldCBpbm5lckhUTUwgPSBudWxsXG4gICAgICAgIC8vIHNpbmNlIHRoZSBwcm92aWRlZEVtcHR5T3B0aW9uIG1pZ2h0IGhhdmUgYW4gbmdJZiBvbiBpdCB0aGF0IGluc2VydHMgY29tbWVudHMgd2hpY2ggd2VcbiAgICAgICAgLy8gbXVzdCBwcmVzZXJ2ZS5cbiAgICAgICAgLy8gSW5zdGVhZCwgaXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IG9wdGlvbiBlbGVtZW50cyBhbmQgcmVtb3ZlIHRoZW0gb3IgdGhlaXIgb3B0Z3JvdXBcbiAgICAgICAgLy8gcGFyZW50c1xuICAgICAgICBpZiAob3B0aW9ucykge1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IG9wdGlvbnMuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb24uZ3JvdXApKSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG5nT3B0aW9ucy5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgdmFyIGdyb3VwRWxlbWVudE1hcCA9IHt9O1xuXG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBlbXB0eSBvcHRpb24gaXMgYWx3YXlzIHRoZXJlIGlmIGl0IHdhcyBleHBsaWNpdGx5IHByb3ZpZGVkXG4gICAgICAgIGlmIChwcm92aWRlZEVtcHR5T3B0aW9uKSB7XG4gICAgICAgICAgc2VsZWN0RWxlbWVudC5wcmVwZW5kKHNlbGVjdEN0cmwuZW1wdHlPcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIGFkZE9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICB2YXIgZ3JvdXBFbGVtZW50O1xuXG4gICAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb24uZ3JvdXApKSB7XG5cbiAgICAgICAgICAgIC8vIFRoaXMgb3B0aW9uIGlzIHRvIGxpdmUgaW4gYSBncm91cFxuICAgICAgICAgICAgLy8gU2VlIGlmIHdlIGhhdmUgYWxyZWFkeSBjcmVhdGVkIHRoaXMgZ3JvdXBcbiAgICAgICAgICAgIGdyb3VwRWxlbWVudCA9IGdyb3VwRWxlbWVudE1hcFtvcHRpb24uZ3JvdXBdO1xuXG4gICAgICAgICAgICBpZiAoIWdyb3VwRWxlbWVudCkge1xuXG4gICAgICAgICAgICAgIGdyb3VwRWxlbWVudCA9IG9wdEdyb3VwVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgbGlzdEZyYWdtZW50LmFwcGVuZENoaWxkKGdyb3VwRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBsYWJlbCBvbiB0aGUgZ3JvdXAgZWxlbWVudFxuICAgICAgICAgICAgICAvLyBcIm51bGxcIiBpcyBzcGVjaWFsIGNhc2VkIGJlY2F1c2Ugb2YgU2FmYXJpXG4gICAgICAgICAgICAgIGdyb3VwRWxlbWVudC5sYWJlbCA9IG9wdGlvbi5ncm91cCA9PT0gbnVsbCA/ICdudWxsJyA6IG9wdGlvbi5ncm91cDtcblxuICAgICAgICAgICAgICAvLyBTdG9yZSBpdCBmb3IgdXNlIGxhdGVyXG4gICAgICAgICAgICAgIGdyb3VwRWxlbWVudE1hcFtvcHRpb24uZ3JvdXBdID0gZ3JvdXBFbGVtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGRPcHRpb25FbGVtZW50KG9wdGlvbiwgZ3JvdXBFbGVtZW50KTtcblxuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIFRoaXMgb3B0aW9uIGlzIG5vdCBpbiBhIGdyb3VwXG4gICAgICAgICAgICBhZGRPcHRpb25FbGVtZW50KG9wdGlvbiwgbGlzdEZyYWdtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnRbMF0uYXBwZW5kQ2hpbGQobGlzdEZyYWdtZW50KTtcblxuICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCBkdWUgdG8gdGhlIHVwZGF0ZSB0byB0aGUgb3B0aW9uc1xuICAgICAgICBpZiAoIW5nTW9kZWxDdHJsLiRpc0VtcHR5KHByZXZpb3VzVmFsdWUpKSB7XG4gICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IHNlbGVjdEN0cmwucmVhZFZhbHVlKCk7XG4gICAgICAgICAgdmFyIGlzTm90UHJpbWl0aXZlID0gbmdPcHRpb25zLnRyYWNrQnkgfHwgbXVsdGlwbGU7XG4gICAgICAgICAgaWYgKGlzTm90UHJpbWl0aXZlID8gIWVxdWFscyhwcmV2aW91c1ZhbHVlLCBuZXh0VmFsdWUpIDogcHJldmlvdXNWYWx1ZSAhPT0gbmV4dFZhbHVlKSB7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICduZ01vZGVsJ10sXG4gICAgbGluazoge1xuICAgICAgcHJlOiBmdW5jdGlvbiBuZ09wdGlvbnNQcmVMaW5rKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAvLyBEZWFjdGl2YXRlIHRoZSBTZWxlY3RDb250cm9sbGVyLnJlZ2lzdGVyIG1ldGhvZCB0byBwcmV2ZW50XG4gICAgICAgIC8vIG9wdGlvbiBkaXJlY3RpdmVzIGZyb20gYWNjaWRlbnRhbGx5IHJlZ2lzdGVyaW5nIHRoZW1zZWx2ZXNcbiAgICAgICAgLy8gKGFuZCB1bndhbnRlZCAkZGVzdHJveSBoYW5kbGVycyBldGMuKVxuICAgICAgICBjdHJsc1swXS5yZWdpc3Rlck9wdGlvbiA9IG5vb3A7XG4gICAgICB9LFxuICAgICAgcG9zdDogbmdPcHRpb25zUG9zdExpbmtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1BsdXJhbGl6ZVxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgbmdQbHVyYWxpemVgIGlzIGEgZGlyZWN0aXZlIHRoYXQgZGlzcGxheXMgbWVzc2FnZXMgYWNjb3JkaW5nIHRvIGVuLVVTIGxvY2FsaXphdGlvbiBydWxlcy5cbiAqIFRoZXNlIHJ1bGVzIGFyZSBidW5kbGVkIHdpdGggYW5ndWxhci5qcywgYnV0IGNhbiBiZSBvdmVycmlkZGVuXG4gKiAoc2VlIHtAbGluayBndWlkZS9pMThuIEFuZ3VsYXIgaTE4bn0gZGV2IGd1aWRlKS4gWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBkaXJlY3RpdmVcbiAqIGJ5IHNwZWNpZnlpbmcgdGhlIG1hcHBpbmdzIGJldHdlZW5cbiAqIFtwbHVyYWwgY2F0ZWdvcmllc10oaHR0cDovL3VuaWNvZGUub3JnL3JlcG9zL2NsZHItdG1wL3RydW5rL2RpZmYvc3VwcGxlbWVudGFsL2xhbmd1YWdlX3BsdXJhbF9ydWxlcy5odG1sKVxuICogYW5kIHRoZSBzdHJpbmdzIHRvIGJlIGRpc3BsYXllZC5cbiAqXG4gKiAjIFBsdXJhbCBjYXRlZ29yaWVzIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXNcbiAqIFRoZXJlIGFyZSB0d29cbiAqIFtwbHVyYWwgY2F0ZWdvcmllc10oaHR0cDovL3VuaWNvZGUub3JnL3JlcG9zL2NsZHItdG1wL3RydW5rL2RpZmYvc3VwcGxlbWVudGFsL2xhbmd1YWdlX3BsdXJhbF9ydWxlcy5odG1sKVxuICogaW4gQW5ndWxhcidzIGRlZmF1bHQgZW4tVVMgbG9jYWxlOiBcIm9uZVwiIGFuZCBcIm90aGVyXCIuXG4gKlxuICogV2hpbGUgYSBwbHVyYWwgY2F0ZWdvcnkgbWF5IG1hdGNoIG1hbnkgbnVtYmVycyAoZm9yIGV4YW1wbGUsIGluIGVuLVVTIGxvY2FsZSwgXCJvdGhlclwiIGNhbiBtYXRjaFxuICogYW55IG51bWJlciB0aGF0IGlzIG5vdCAxKSwgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgY2FuIG9ubHkgbWF0Y2ggb25lIG51bWJlci4gRm9yIGV4YW1wbGUsIHRoZVxuICogZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yIFwiM1wiIG1hdGNoZXMgdGhlIG51bWJlciAzLiBUaGVyZSBhcmUgZXhhbXBsZXMgb2YgcGx1cmFsIGNhdGVnb3JpZXNcbiAqIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXMgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGlzIGRvY3VtZW50YXRpb24uXG4gKlxuICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZVxuICogWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBieSBwcm92aWRpbmcgMiBhdHRyaWJ1dGVzOiBgY291bnRgIGFuZCBgd2hlbmAuXG4gKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhdHRyaWJ1dGUsIGBvZmZzZXRgLlxuICpcbiAqIFRoZSB2YWx1ZSBvZiB0aGUgYGNvdW50YCBhdHRyaWJ1dGUgY2FuIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvblxuICogQW5ndWxhciBleHByZXNzaW9ufTsgdGhlc2UgYXJlIGV2YWx1YXRlZCBvbiB0aGUgY3VycmVudCBzY29wZSBmb3IgaXRzIGJvdW5kIHZhbHVlLlxuICpcbiAqIFRoZSBgd2hlbmAgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgbWFwcGluZ3MgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcmllcyBhbmQgdGhlIGFjdHVhbFxuICogc3RyaW5nIHRvIGJlIGRpc3BsYXllZC4gVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3QuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjb25maWd1cmUgbmdQbHVyYWxpemU6XG4gKlxuICogYGBgaHRtbFxuICogPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCJcbiAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gKiA8L25nLXBsdXJhbGl6ZT5cbiAqYGBgXG4gKlxuICogSW4gdGhlIGV4YW1wbGUsIGBcIjA6IE5vYm9keSBpcyB2aWV3aW5nLlwiYCBpcyBhbiBleHBsaWNpdCBudW1iZXIgcnVsZS4gSWYgeW91IGRpZCBub3RcbiAqIHNwZWNpZnkgdGhpcyBydWxlLCAwIHdvdWxkIGJlIG1hdGNoZWQgdG8gdGhlIFwib3RoZXJcIiBjYXRlZ29yeSBhbmQgXCIwIHBlb3BsZSBhcmUgdmlld2luZ1wiXG4gKiB3b3VsZCBiZSBzaG93biBpbnN0ZWFkIG9mIFwiTm9ib2R5IGlzIHZpZXdpbmdcIi4gWW91IGNhbiBzcGVjaWZ5IGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGZvclxuICogb3RoZXIgbnVtYmVycywgZm9yIGV4YW1wbGUgMTIsIHNvIHRoYXQgaW5zdGVhZCBvZiBzaG93aW5nIFwiMTIgcGVvcGxlIGFyZSB2aWV3aW5nXCIsIHlvdSBjYW5cbiAqIHNob3cgXCJhIGRvemVuIHBlb3BsZSBhcmUgdmlld2luZ1wiLlxuICpcbiAqIFlvdSBjYW4gdXNlIGEgc2V0IG9mIGNsb3NlZCBicmFjZXMgKGB7fWApIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHRoZSBudW1iZXIgdGhhdCB5b3Ugd2FudCBzdWJzdGl0dXRlZFxuICogaW50byBwbHVyYWxpemVkIHN0cmluZ3MuIEluIHRoZSBwcmV2aW91cyBleGFtcGxlLCBBbmd1bGFyIHdpbGwgcmVwbGFjZSBge31gIHdpdGhcbiAqIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT5ge3twZXJzb25Db3VudH19YDwvc3Bhbj4uIFRoZSBjbG9zZWQgYnJhY2VzIGB7fWAgaXMgYSBwbGFjZWhvbGRlclxuICogZm9yIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57e251bWJlckV4cHJlc3Npb259fTwvc3Bhbj4uXG4gKlxuICogSWYgbm8gcnVsZSBpcyBkZWZpbmVkIGZvciBhIGNhdGVnb3J5LCB0aGVuIGFuIGVtcHR5IHN0cmluZyBpcyBkaXNwbGF5ZWQgYW5kIGEgd2FybmluZyBpcyBnZW5lcmF0ZWQuXG4gKiBOb3RlIHRoYXQgc29tZSBsb2NhbGVzIGRlZmluZSBtb3JlIGNhdGVnb3JpZXMgdGhhbiBgb25lYCBhbmQgYG90aGVyYC4gRm9yIGV4YW1wbGUsIGZyLWZyIGRlZmluZXMgYGZld2AgYW5kIGBtYW55YC5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplIHdpdGggb2Zmc2V0XG4gKiBUaGUgYG9mZnNldGAgYXR0cmlidXRlIGFsbG93cyBmdXJ0aGVyIGN1c3RvbWl6YXRpb24gb2YgcGx1cmFsaXplZCB0ZXh0LCB3aGljaCBjYW4gcmVzdWx0IGluXG4gKiBhIGJldHRlciB1c2VyIGV4cGVyaWVuY2UuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mIHRoZSBtZXNzYWdlIFwiNCBwZW9wbGUgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudFwiLFxuICogeW91IG1pZ2h0IGRpc3BsYXkgXCJKb2huLCBLYXRlIGFuZCAyIG90aGVycyBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIuXG4gKiBUaGUgb2Zmc2V0IGF0dHJpYnV0ZSBhbGxvd3MgeW91IHRvIG9mZnNldCBhIG51bWJlciBieSBhbnkgZGVzaXJlZCB2YWx1ZS5cbiAqIExldCdzIHRha2UgYSBsb29rIGF0IGFuIGV4YW1wbGU6XG4gKlxuICogYGBgaHRtbFxuICogPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAqICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gKiA8L25nLXBsdXJhbGl6ZT5cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IHdlIGFyZSBzdGlsbCB1c2luZyB0d28gcGx1cmFsIGNhdGVnb3JpZXMob25lLCBvdGhlciksIGJ1dCB3ZSBhZGRlZFxuICogdGhyZWUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIDAsIDEgYW5kIDIuXG4gKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCBcIkpvaG4gaXMgdmlld2luZ1wiIHdpbGwgYmUgc2hvd24uXG4gKiBXaGVuIHRocmVlIHBlb3BsZSB2aWV3IHRoZSBkb2N1bWVudCwgbm8gZXhwbGljaXQgbnVtYmVyIHJ1bGUgaXMgZm91bmQsIHNvXG4gKiBhbiBvZmZzZXQgb2YgMiBpcyB0YWtlbiBvZmYgMywgYW5kIEFuZ3VsYXIgdXNlcyAxIHRvIGRlY2lkZSB0aGUgcGx1cmFsIGNhdGVnb3J5LlxuICogSW4gdGhpcyBjYXNlLCBwbHVyYWwgY2F0ZWdvcnkgJ29uZScgaXMgbWF0Y2hlZCBhbmQgXCJKb2huLCBNYXJ5IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nXCJcbiAqIGlzIHNob3duLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIHlvdSBzcGVjaWZ5IG9mZnNldHMsIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvclxuICogbnVtYmVycyBmcm9tIDAgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgb2Zmc2V0LiBJZiB5b3UgdXNlIGFuIG9mZnNldCBvZiAzLCBmb3IgZXhhbXBsZSxcbiAqIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvciAwLCAxLCAyIGFuZCAzLiBZb3UgbXVzdCBhbHNvIHByb3ZpZGUgcGx1cmFsIHN0cmluZ3MgZm9yXG4gKiBwbHVyYWwgY2F0ZWdvcmllcyBcIm9uZVwiIGFuZCBcIm90aGVyXCIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8ZXhwcmVzc2lvbn0gY291bnQgVGhlIHZhcmlhYmxlIHRvIGJlIGJvdW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHdoZW4gVGhlIG1hcHBpbmcgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcnkgdG8gaXRzIGNvcnJlc3BvbmRpbmcgc3RyaW5ncy5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBkZWR1Y3QgZnJvbSB0aGUgdG90YWwgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwicGx1cmFsaXplRXhhbXBsZVwiIG5hbWU9XCJuZy1wbHVyYWxpemVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3BsdXJhbGl6ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb24xID0gJ0lnb3InO1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uMiA9ICdNaXNrbyc7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb25Db3VudCA9IDE7XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxsYWJlbD5QZXJzb24gMTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjFcIiB2YWx1ZT1cIklnb3JcIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+UGVyc29uIDI6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb24yXCIgdmFsdWU9XCJNaXNrb1wiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxsYWJlbD5OdW1iZXIgb2YgUGVvcGxlOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uQ291bnRcIiB2YWx1ZT1cIjFcIiAvPjwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBzaW1wbGUgcGx1cmFsaXphdGlvbiBydWxlcyBmb3IgZW4gbG9jYWxlIC0tLT5cbiAgICAgICAgICBXaXRob3V0IE9mZnNldDpcbiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT48YnI+XG5cbiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggb2Zmc2V0IC0tLT5cbiAgICAgICAgICBXaXRoIE9mZnNldCgyKTpcbiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICAgICAgICAgIDwvbmctcGx1cmFsaXplPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGNvcnJlY3QgcGx1cmFsaXplZCBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgd2l0aG91dE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgwKTtcbiAgICAgICAgICB2YXIgd2l0aE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgxKTtcbiAgICAgICAgICB2YXIgY291bnRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbkNvdW50JykpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcxIHBlcnNvbiBpcyB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBpcyB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzAnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcyJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBhbmQgTWlza28gYXJlIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMycpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCczIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzQnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnNCBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHNob3cgZGF0YS1ib3VuZCBuYW1lcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpO1xuICAgICAgICAgIHZhciBwZXJzb25Db3VudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbkNvdW50JykpO1xuICAgICAgICAgIHZhciBwZXJzb24xID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uMScpKTtcbiAgICAgICAgICB2YXIgcGVyc29uMiA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjInKSk7XG4gICAgICAgICAgcGVyc29uQ291bnQuY2xlYXIoKTtcbiAgICAgICAgICBwZXJzb25Db3VudC5zZW5kS2V5cygnNCcpO1xuICAgICAgICAgIHBlcnNvbjEuY2xlYXIoKTtcbiAgICAgICAgICBwZXJzb24xLnNlbmRLZXlzKCdEaScpO1xuICAgICAgICAgIHBlcnNvbjIuY2xlYXIoKTtcbiAgICAgICAgICBwZXJzb24yLnNlbmRLZXlzKCdWb2p0YScpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnRGksIFZvanRhIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdQbHVyYWxpemVEaXJlY3RpdmUgPSBbJyRsb2NhbGUnLCAnJGludGVycG9sYXRlJywgJyRsb2cnLCBmdW5jdGlvbigkbG9jYWxlLCAkaW50ZXJwb2xhdGUsICRsb2cpIHtcbiAgdmFyIEJSQUNFID0gL3t9L2csXG4gICAgICBJU19XSEVOID0gL153aGVuKE1pbnVzKT8oLispJC87XG5cbiAgcmV0dXJuIHtcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsXG4gICAgICAgICAgd2hlbkV4cCA9IGF0dHIuJGF0dHIud2hlbiAmJiBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci53aGVuKSwgLy8gd2UgaGF2ZSB7e319IGluIGF0dHJzXG4gICAgICAgICAgb2Zmc2V0ID0gYXR0ci5vZmZzZXQgfHwgMCxcbiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApIHx8IHt9LFxuICAgICAgICAgIHdoZW5zRXhwRm5zID0ge30sXG4gICAgICAgICAgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgICAgYnJhY2VSZXBsYWNlbWVudCA9IHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsgb2Zmc2V0ICsgZW5kU3ltYm9sLFxuICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IGFuZ3VsYXIubm9vcCxcbiAgICAgICAgICBsYXN0Q291bnQ7XG5cbiAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgICB2YXIgdG1wTWF0Y2ggPSBJU19XSEVOLmV4ZWMoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgIGlmICh0bXBNYXRjaCkge1xuICAgICAgICAgIHZhciB3aGVuS2V5ID0gKHRtcE1hdGNoWzFdID8gJy0nIDogJycpICsgbG93ZXJjYXNlKHRtcE1hdGNoWzJdKTtcbiAgICAgICAgICB3aGVuc1t3aGVuS2V5XSA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHtcbiAgICAgICAgd2hlbnNFeHBGbnNba2V5XSA9ICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIGJyYWNlUmVwbGFjZW1lbnQpKTtcblxuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiR3YXRjaChudW1iZXJFeHAsIGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2hBY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIHZhciBjb3VudCA9IHBhcnNlRmxvYXQobmV3VmFsKTtcbiAgICAgICAgdmFyIGNvdW50SXNOYU4gPSBpc051bWJlck5hTihjb3VudCk7XG5cbiAgICAgICAgaWYgKCFjb3VudElzTmFOICYmICEoY291bnQgaW4gd2hlbnMpKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgc3VjaCBhcyAxLCAyLCAzLi4uIGlzIGRlZmluZWQsIGp1c3QgdXNlIGl0LlxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaXQgYWdhaW5zdCBwbHVyYWxpemF0aW9uIHJ1bGVzIGluICRsb2NhbGUgc2VydmljZS5cbiAgICAgICAgICBjb3VudCA9ICRsb2NhbGUucGx1cmFsQ2F0KGNvdW50IC0gb2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGJvdGggYGNvdW50YCBhbmQgYGxhc3RDb3VudGAgYXJlIE5hTiwgd2UgZG9uJ3QgbmVlZCB0byByZS1yZWdpc3RlciBhIHdhdGNoLlxuICAgICAgICAvLyBJbiBKUyBgTmFOICE9PSBOYU5gLCBzbyB3ZSBoYXZlIHRvIGV4cGxpY2l0bHkgY2hlY2suXG4gICAgICAgIGlmICgoY291bnQgIT09IGxhc3RDb3VudCkgJiYgIShjb3VudElzTmFOICYmIGlzTnVtYmVyTmFOKGxhc3RDb3VudCkpKSB7XG4gICAgICAgICAgd2F0Y2hSZW1vdmVyKCk7XG4gICAgICAgICAgdmFyIHdoZW5FeHBGbiA9IHdoZW5zRXhwRm5zW2NvdW50XTtcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQod2hlbkV4cEZuKSkge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICRsb2cuZGVidWcoJ25nUGx1cmFsaXplOiBubyBydWxlIGRlZmluZWQgZm9yIFxcJycgKyBjb3VudCArICdcXCcgaW4gJyArIHdoZW5FeHApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2F0Y2hSZW1vdmVyID0gbm9vcDtcbiAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnRUZXh0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IHNjb3BlLiR3YXRjaCh3aGVuRXhwRm4sIHVwZGF0ZUVsZW1lbnRUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdENvdW50ID0gY291bnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVFbGVtZW50VGV4dChuZXdUZXh0KSB7XG4gICAgICAgIGVsZW1lbnQudGV4dChuZXdUZXh0IHx8ICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuLyogZXhwb3J0ZWQgbmdSZXBlYXREaXJlY3RpdmUgKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlcGVhdFxuICogQG11bHRpRWxlbWVudFxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdSZXBlYXRgIGRpcmVjdGl2ZSBpbnN0YW50aWF0ZXMgYSB0ZW1wbGF0ZSBvbmNlIHBlciBpdGVtIGZyb20gYSBjb2xsZWN0aW9uLiBFYWNoIHRlbXBsYXRlXG4gKiBpbnN0YW5jZSBnZXRzIGl0cyBvd24gc2NvcGUsIHdoZXJlIHRoZSBnaXZlbiBsb29wIHZhcmlhYmxlIGlzIHNldCB0byB0aGUgY3VycmVudCBjb2xsZWN0aW9uIGl0ZW0sXG4gKiBhbmQgYCRpbmRleGAgaXMgc2V0IHRvIHRoZSBpdGVtIGluZGV4IG9yIGtleS5cbiAqXG4gKiBTcGVjaWFsIHByb3BlcnRpZXMgYXJlIGV4cG9zZWQgb24gdGhlIGxvY2FsIHNjb3BlIG9mIGVhY2ggdGVtcGxhdGUgaW5zdGFuY2UsIGluY2x1ZGluZzpcbiAqXG4gKiB8IFZhcmlhYmxlICB8IFR5cGUgICAgICAgICAgICB8IERldGFpbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IGAkaW5kZXhgICB8IHtAdHlwZSBudW1iZXJ9ICB8IGl0ZXJhdG9yIG9mZnNldCBvZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCAoMC4ubGVuZ3RoLTEpICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAkZmlyc3RgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgZmlyc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAkbWlkZGxlYCB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiB8XG4gKiB8IGAkbGFzdGAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgbGFzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAkZXZlbmAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIGV2ZW4gKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICB8XG4gKiB8IGAkb2RkYCAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIG9kZCAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgICB8XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICAgQ3JlYXRpbmcgYWxpYXNlcyBmb3IgdGhlc2UgcHJvcGVydGllcyBpcyBwb3NzaWJsZSB3aXRoIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbml0IGBuZ0luaXRgfS5cbiAqICAgVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4sIGZvciBpbnN0YW5jZSwgbmVzdGluZyBuZ1JlcGVhdHMuXG4gKiA8L2Rpdj5cbiAqXG4gKlxuICogIyBJdGVyYXRpbmcgb3ZlciBvYmplY3QgcHJvcGVydGllc1xuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGdldCBgbmdSZXBlYXRgIHRvIGl0ZXJhdGUgb3ZlciB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgdXNpbmcgdGhlIGZvbGxvd2luZ1xuICogc3ludGF4OlxuICpcbiAqIGBgYGpzXG4gKiA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBteU9ialwiPiAuLi4gPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBIb3dldmVyLCB0aGVyZSBhcmUgYSBmZXcgbGltaXRhdGlvbnMgY29tcGFyZWQgdG8gYXJyYXkgaXRlcmF0aW9uOlxuICpcbiAqIC0gVGhlIEphdmFTY3JpcHQgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBkZWZpbmUgdGhlIG9yZGVyIG9mIGtleXNcbiAqICAgcmV0dXJuZWQgZm9yIGFuIG9iamVjdCwgc28gQW5ndWxhciByZWxpZXMgb24gdGhlIG9yZGVyIHJldHVybmVkIGJ5IHRoZSBicm93c2VyXG4gKiAgIHdoZW4gcnVubmluZyBgZm9yIGtleSBpbiBteU9iamAuIEJyb3dzZXJzIGdlbmVyYWxseSBmb2xsb3cgdGhlIHN0cmF0ZWd5IG9mIHByb3ZpZGluZ1xuICogICBrZXlzIGluIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHdlcmUgZGVmaW5lZCwgYWx0aG91Z2ggdGhlcmUgYXJlIGV4Y2VwdGlvbnMgd2hlbiBrZXlzIGFyZSBkZWxldGVkXG4gKiAgIGFuZCByZWluc3RhdGVkLiBTZWUgdGhlXG4gKiAgIFtNRE4gcGFnZSBvbiBgZGVsZXRlYCBmb3IgbW9yZSBpbmZvXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvZGVsZXRlI0Nyb3NzLWJyb3dzZXJfbm90ZXMpLlxuICpcbiAqIC0gYG5nUmVwZWF0YCB3aWxsIHNpbGVudGx5ICppZ25vcmUqIG9iamVjdCBrZXlzIHN0YXJ0aW5nIHdpdGggYCRgLCBiZWNhdXNlXG4gKiAgIGl0J3MgYSBwcmVmaXggdXNlZCBieSBBbmd1bGFyIGZvciBwdWJsaWMgKGAkYCkgYW5kIHByaXZhdGUgKGAkJGApIHByb3BlcnRpZXMuXG4gKlxuICogLSBUaGUgYnVpbHQtaW4gZmlsdGVycyB7QGxpbmsgbmcub3JkZXJCeSBvcmRlckJ5fSBhbmQge0BsaW5rIG5nLmZpbHRlciBmaWx0ZXJ9IGRvIG5vdCB3b3JrIHdpdGhcbiAqICAgb2JqZWN0cywgYW5kIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdXNlZCB3aXRoIG9uZS5cbiAqXG4gKiBJZiB5b3UgYXJlIGhpdHRpbmcgYW55IG9mIHRoZXNlIGxpbWl0YXRpb25zLCB0aGUgcmVjb21tZW5kZWQgd29ya2Fyb3VuZCBpcyB0byBjb252ZXJ0IHlvdXIgb2JqZWN0IGludG8gYW4gYXJyYXlcbiAqIHRoYXQgaXMgc29ydGVkIGludG8gdGhlIG9yZGVyIHRoYXQgeW91IHByZWZlciBiZWZvcmUgcHJvdmlkaW5nIGl0IHRvIGBuZ1JlcGVhdGAuIFlvdSBjb3VsZFxuICogZG8gdGhpcyB3aXRoIGEgZmlsdGVyIHN1Y2ggYXMgW3RvQXJyYXlGaWx0ZXJdKGh0dHA6Ly9uZ21vZHVsZXMub3JnL21vZHVsZXMvYW5ndWxhci10b0FycmF5RmlsdGVyKVxuICogb3IgaW1wbGVtZW50IGEgYCR3YXRjaGAgb24gdGhlIG9iamVjdCB5b3Vyc2VsZi5cbiAqXG4gKlxuICogIyBUcmFja2luZyBhbmQgRHVwbGljYXRlc1xuICpcbiAqIGBuZ1JlcGVhdGAgdXNlcyB7QGxpbmsgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hDb2xsZWN0aW9uICR3YXRjaENvbGxlY3Rpb259IHRvIGRldGVjdCBjaGFuZ2VzIGluXG4gKiB0aGUgY29sbGVjdGlvbi4gV2hlbiBhIGNoYW5nZSBoYXBwZW5zLCBgbmdSZXBlYXRgIHRoZW4gbWFrZXMgdGhlIGNvcnJlc3BvbmRpbmcgY2hhbmdlcyB0byB0aGUgRE9NOlxuICpcbiAqICogV2hlbiBhbiBpdGVtIGlzIGFkZGVkLCBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgaXMgYWRkZWQgdG8gdGhlIERPTS5cbiAqICogV2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQsIGl0cyB0ZW1wbGF0ZSBpbnN0YW5jZSBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAqICogV2hlbiBpdGVtcyBhcmUgcmVvcmRlcmVkLCB0aGVpciByZXNwZWN0aXZlIHRlbXBsYXRlcyBhcmUgcmVvcmRlcmVkIGluIHRoZSBET00uXG4gKlxuICogVG8gbWluaW1pemUgY3JlYXRpb24gb2YgRE9NIGVsZW1lbnRzLCBgbmdSZXBlYXRgIHVzZXMgYSBmdW5jdGlvblxuICogdG8gXCJrZWVwIHRyYWNrXCIgb2YgYWxsIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBlbGVtZW50cy5cbiAqIEZvciBleGFtcGxlLCBpZiBhbiBpdGVtIGlzIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uLCBgbmdSZXBlYXRgIHdpbGwga25vdyB0aGF0IGFsbCBvdGhlciBpdGVtc1xuICogYWxyZWFkeSBoYXZlIERPTSBlbGVtZW50cywgYW5kIHdpbGwgbm90IHJlLXJlbmRlciB0aGVtLlxuICpcbiAqIFRoZSBkZWZhdWx0IHRyYWNraW5nIGZ1bmN0aW9uICh3aGljaCB0cmFja3MgaXRlbXMgYnkgdGhlaXIgaWRlbnRpdHkpIGRvZXMgbm90IGFsbG93XG4gKiBkdXBsaWNhdGUgaXRlbXMgaW4gYXJyYXlzLiBUaGlzIGlzIGJlY2F1c2Ugd2hlbiB0aGVyZSBhcmUgZHVwbGljYXRlcywgaXQgaXMgbm90IHBvc3NpYmxlXG4gKiB0byBtYWludGFpbiBhIG9uZS10by1vbmUgbWFwcGluZyBiZXR3ZWVuIGNvbGxlY3Rpb24gaXRlbXMgYW5kIERPTSBlbGVtZW50cy5cbiAqXG4gKiBJZiB5b3UgZG8gbmVlZCB0byByZXBlYXQgZHVwbGljYXRlIGl0ZW1zLCB5b3UgY2FuIHN1YnN0aXR1dGUgdGhlIGRlZmF1bHQgdHJhY2tpbmcgYmVoYXZpb3JcbiAqIHdpdGggeW91ciBvd24gdXNpbmcgdGhlIGB0cmFjayBieWAgZXhwcmVzc2lvbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgeW91IG1heSB0cmFjayBpdGVtcyBieSB0aGUgaW5kZXggb2YgZWFjaCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLCB1c2luZyB0aGVcbiAqIHNwZWNpYWwgc2NvcGUgcHJvcGVydHkgYCRpbmRleGA6XG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm4gaW4gWzQyLCA0MiwgNDMsIDQzXSB0cmFjayBieSAkaW5kZXhcIj5cbiAqICAgICAge3tufX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogWW91IG1heSBhbHNvIHVzZSBhcmJpdHJhcnkgZXhwcmVzc2lvbnMgaW4gYHRyYWNrIGJ5YCwgaW5jbHVkaW5nIHJlZmVyZW5jZXMgdG8gY3VzdG9tIGZ1bmN0aW9uc1xuICogb24gdGhlIHNjb3BlOlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJuIGluIFs0MiwgNDIsIDQzLCA0M10gdHJhY2sgYnkgbXlUcmFja2luZ0Z1bmN0aW9uKG4pXCI+XG4gKiAgICAgIHt7bn19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+XG4gKiBJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBvYmplY3RzIHRoYXQgaGF2ZSBhIHVuaXF1ZSBpZGVudGlmaWVyIHByb3BlcnR5LCB5b3Ugc2hvdWxkIHRyYWNrXG4gKiBieSB0aGlzIGlkZW50aWZpZXIgaW5zdGVhZCBvZiB0aGUgb2JqZWN0IGluc3RhbmNlLiBTaG91bGQgeW91IHJlbG9hZCB5b3VyIGRhdGEgbGF0ZXIsIGBuZ1JlcGVhdGBcbiAqIHdpbGwgbm90IGhhdmUgdG8gcmVidWlsZCB0aGUgRE9NIGVsZW1lbnRzIGZvciBpdGVtcyBpdCBoYXMgYWxyZWFkeSByZW5kZXJlZCwgZXZlbiBpZiB0aGVcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiBoYXZlIGJlZW4gc3Vic3RpdHV0ZWQgZm9yIG5ldyBvbmVzLiBGb3IgbGFyZ2UgY29sbGVjdGlvbnMsXG4gKiB0aGlzIHNpZ25pZmljYW50bHkgaW1wcm92ZXMgcmVuZGVyaW5nIHBlcmZvcm1hbmNlLiBJZiB5b3UgZG9uJ3QgaGF2ZSBhIHVuaXF1ZSBpZGVudGlmaWVyLFxuICogYHRyYWNrIGJ5ICRpbmRleGAgY2FuIGFsc28gcHJvdmlkZSBhIHBlcmZvcm1hbmNlIGJvb3N0LlxuICogPC9kaXY+XG4gKlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJtb2RlbCBpbiBjb2xsZWN0aW9uIHRyYWNrIGJ5IG1vZGVsLmlkXCI+XG4gKiAgICAgIHt7bW9kZWwubmFtZX19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIDxiciAvPlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqIEF2b2lkIHVzaW5nIGB0cmFjayBieSAkaW5kZXhgIHdoZW4gdGhlIHJlcGVhdGVkIHRlbXBsYXRlIGNvbnRhaW5zXG4gKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiNvbmUtdGltZS1iaW5kaW5nIG9uZS10aW1lIGJpbmRpbmdzfS4gSW4gc3VjaCBjYXNlcywgdGhlIGBudGhgIERPTVxuICogZWxlbWVudCB3aWxsIGFsd2F5cyBiZSBtYXRjaGVkIHdpdGggdGhlIGBudGhgIGl0ZW0gb2YgdGhlIGFycmF5LCBzbyB0aGUgYmluZGluZ3Mgb24gdGhhdCBlbGVtZW50XG4gKiB3aWxsIG5vdCBiZSB1cGRhdGVkIGV2ZW4gd2hlbiB0aGUgY29ycmVzcG9uZGluZyBpdGVtIGNoYW5nZXMsIGVzc2VudGlhbGx5IGNhdXNpbmcgdGhlIHZpZXcgdG8gZ2V0XG4gKiBvdXQtb2Ytc3luYyB3aXRoIHRoZSB1bmRlcmx5aW5nIGRhdGEuXG4gKiA8L2Rpdj5cbiAqXG4gKiBXaGVuIG5vIGB0cmFjayBieWAgZXhwcmVzc2lvbiBpcyBwcm92aWRlZCwgaXQgaXMgZXF1aXZhbGVudCB0byB0cmFja2luZyBieSB0aGUgYnVpbHQtaW5cbiAqIGAkaWRgIGZ1bmN0aW9uLCB3aGljaCB0cmFja3MgaXRlbXMgYnkgdGhlaXIgaWRlbnRpdHk6XG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm9iaiBpbiBjb2xsZWN0aW9uIHRyYWNrIGJ5ICRpZChvYmopXCI+XG4gKiAgICAgIHt7b2JqLnByb3B9fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiA8YnIgLz5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogYHRyYWNrIGJ5YCBtdXN0IGFsd2F5cyBiZSB0aGUgbGFzdCBleHByZXNzaW9uOlxuICogPC9kaXY+XG4gKiBgYGBcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibW9kZWwgaW4gY29sbGVjdGlvbiB8IG9yZGVyQnk6ICdpZCcgYXMgZmlsdGVyZWRfcmVzdWx0IHRyYWNrIGJ5IG1vZGVsLmlkXCI+XG4gKiAgICAgIHt7bW9kZWwubmFtZX19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqXG4gKiAjIFNwZWNpYWwgcmVwZWF0IHN0YXJ0IGFuZCBlbmQgcG9pbnRzXG4gKiBUbyByZXBlYXQgYSBzZXJpZXMgb2YgZWxlbWVudHMgaW5zdGVhZCBvZiBqdXN0IG9uZSBwYXJlbnQgZWxlbWVudCwgbmdSZXBlYXQgKGFzIHdlbGwgYXMgb3RoZXIgbmcgZGlyZWN0aXZlcykgc3VwcG9ydHMgZXh0ZW5kaW5nXG4gKiB0aGUgcmFuZ2Ugb2YgdGhlIHJlcGVhdGVyIGJ5IGRlZmluaW5nIGV4cGxpY2l0IHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGJ5IHVzaW5nICoqbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmctcmVwZWF0LWVuZCoqIHJlc3BlY3RpdmVseS5cbiAqIFRoZSAqKm5nLXJlcGVhdC1zdGFydCoqIGRpcmVjdGl2ZSB3b3JrcyB0aGUgc2FtZSBhcyAqKm5nLXJlcGVhdCoqLCBidXQgd2lsbCByZXBlYXQgYWxsIHRoZSBIVE1MIGNvZGUgKGluY2x1ZGluZyB0aGUgdGFnIGl0J3MgZGVmaW5lZCBvbilcbiAqIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGVuZGluZyBIVE1MIHRhZyB3aGVyZSAqKm5nLXJlcGVhdC1lbmQqKiBpcyBwbGFjZWQuXG4gKlxuICogVGhlIGV4YW1wbGUgYmVsb3cgbWFrZXMgdXNlIG9mIHRoaXMgZmVhdHVyZTpcbiAqIGBgYGh0bWxcbiAqICAgPGhlYWRlciBuZy1yZXBlYXQtc3RhcnQ9XCJpdGVtIGluIGl0ZW1zXCI+XG4gKiAgICAgSGVhZGVyIHt7IGl0ZW0gfX1cbiAqICAgPC9oZWFkZXI+XG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XG4gKiAgICAgQm9keSB7eyBpdGVtIH19XG4gKiAgIDwvZGl2PlxuICogICA8Zm9vdGVyIG5nLXJlcGVhdC1lbmQ+XG4gKiAgICAgRm9vdGVyIHt7IGl0ZW0gfX1cbiAqICAgPC9mb290ZXI+XG4gKiBgYGBcbiAqXG4gKiBBbmQgd2l0aCBhbiBpbnB1dCBvZiB7QHR5cGUgWydBJywnQiddfSBmb3IgdGhlIGl0ZW1zIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgb3V0cHV0IHdpbGwgZXZhbHVhdGUgdG86XG4gKiBgYGBodG1sXG4gKiAgIDxoZWFkZXI+XG4gKiAgICAgSGVhZGVyIEFcbiAqICAgPC9oZWFkZXI+XG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XG4gKiAgICAgQm9keSBBXG4gKiAgIDwvZGl2PlxuICogICA8Zm9vdGVyPlxuICogICAgIEZvb3RlciBBXG4gKiAgIDwvZm9vdGVyPlxuICogICA8aGVhZGVyPlxuICogICAgIEhlYWRlciBCXG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkgQlxuICogICA8L2Rpdj5cbiAqICAgPGZvb3Rlcj5cbiAqICAgICBGb290ZXIgQlxuICogICA8L2Zvb3Rlcj5cbiAqIGBgYFxuICpcbiAqIFRoZSBjdXN0b20gc3RhcnQgYW5kIGVuZCBwb2ludHMgZm9yIG5nUmVwZWF0IGFsc28gc3VwcG9ydCBhbGwgb3RoZXIgSFRNTCBkaXJlY3RpdmUgc3ludGF4IGZsYXZvcnMgcHJvdmlkZWQgaW4gQW5ndWxhckpTIChzdWNoXG4gKiBhcyAqKmRhdGEtbmctcmVwZWF0LXN0YXJ0KiosICoqeC1uZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZzpyZXBlYXQtc3RhcnQqKikuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9IHwgd2hlbiBhIG5ldyBpdGVtIGlzIGFkZGVkIHRvIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyByZXZlYWxlZCBhZnRlciBhIGZpbHRlciB8XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNsZWF2ZSBsZWF2ZX0gfCB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXQgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbW92ZSBtb3ZlIH0gfCB3aGVuIGFuIGFkamFjZW50IGl0ZW0gaXMgZmlsdGVyZWQgb3V0IGNhdXNpbmcgYSByZW9yZGVyIG9yIHdoZW4gdGhlIGl0ZW0gY29udGVudHMgYXJlIHJlb3JkZXJlZCB8XG4gKlxuICogU2VlIHRoZSBleGFtcGxlIGJlbG93IGZvciBkZWZpbmluZyBDU1MgYW5pbWF0aW9ucyB3aXRoIG5nUmVwZWF0LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTAwMFxuICogQHBhcmFtIHtyZXBlYXRfZXhwcmVzc2lvbn0gbmdSZXBlYXQgVGhlIGV4cHJlc3Npb24gaW5kaWNhdGluZyBob3cgdG8gZW51bWVyYXRlIGEgY29sbGVjdGlvbi4gVGhlc2VcbiAqICAgZm9ybWF0cyBhcmUgY3VycmVudGx5IHN1cHBvcnRlZDpcbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYFxuICogICAgIGlzIGEgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGFsYnVtIGluIGFydGlzdC5hbGJ1bXNgLlxuICpcbiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycyxcbiAqICAgICBhbmQgYGV4cHJlc3Npb25gIGlzIHRoZSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gdHJhY2sgYnkgdHJhY2tpbmdfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIHRyYWNraW5nIGV4cHJlc3Npb25cbiAqICAgICB3aGljaCBjYW4gYmUgdXNlZCB0byBhc3NvY2lhdGUgdGhlIG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gd2l0aCB0aGUgRE9NIGVsZW1lbnRzLiBJZiBubyB0cmFja2luZyBleHByZXNzaW9uXG4gKiAgICAgaXMgc3BlY2lmaWVkLCBuZy1yZXBlYXQgYXNzb2NpYXRlcyBlbGVtZW50cyBieSBpZGVudGl0eS4gSXQgaXMgYW4gZXJyb3IgdG8gaGF2ZVxuICogICAgIG1vcmUgdGhhbiBvbmUgdHJhY2tpbmcgZXhwcmVzc2lvbiB2YWx1ZSByZXNvbHZlIHRvIHRoZSBzYW1lIGtleS4gKFRoaXMgd291bGQgbWVhbiB0aGF0IHR3byBkaXN0aW5jdCBvYmplY3RzIGFyZVxuICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLilcbiAqXG4gKiAgICAgTm90ZSB0aGF0IHRoZSB0cmFja2luZyBleHByZXNzaW9uIG11c3QgY29tZSBsYXN0LCBhZnRlciBhbnkgZmlsdGVycywgYW5kIHRoZSBhbGlhcyBleHByZXNzaW9uLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXNgIGlzIGVxdWl2YWxlbnQgdG8gYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIERPTSBlbGVtZW50c1xuICogICAgIHdpbGwgYmUgYXNzb2NpYXRlZCBieSBpdGVtIGlkZW50aXR5IGluIHRoZSBhcnJheS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIEEgYnVpbHQgaW4gYCRpZCgpYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYSB1bmlxdWVcbiAqICAgICBgJCRoYXNoS2V5YCBwcm9wZXJ0eSB0byBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LiBUaGlzIHByb3BlcnR5IGlzIHRoZW4gdXNlZCBhcyBhIGtleSB0byBhc3NvY2lhdGVkIERPTSBlbGVtZW50c1xuICogICAgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBpbiB0aGUgYXJyYXkgYnkgaWRlbnRpdHkuIE1vdmluZyB0aGUgc2FtZSBvYmplY3QgaW4gYXJyYXkgd291bGQgbW92ZSB0aGUgRE9NXG4gKiAgICAgZWxlbWVudCBpbiB0aGUgc2FtZSB3YXkgaW4gdGhlIERPTS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgdHlwaWNhbCBwYXR0ZXJuIHdoZW4gdGhlIGl0ZW1zIGNvbWUgZnJvbSB0aGUgZGF0YWJhc2UuIEluIHRoaXNcbiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYFxuICogICAgIHByb3BlcnR5IGlzIHNhbWUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXJcbiAqICAgICB0byBpdGVtcyBpbiBjb25qdW5jdGlvbiB3aXRoIGEgdHJhY2tpbmcgZXhwcmVzc2lvbi5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gYXMgYWxpYXNfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGFsaWFzIGV4cHJlc3Npb24gd2hpY2ggd2lsbCB0aGVuIHN0b3JlIHRoZVxuICogICAgIGludGVybWVkaWF0ZSByZXN1bHRzIG9mIHRoZSByZXBlYXRlciBhZnRlciB0aGUgZmlsdGVycyBoYXZlIGJlZW4gYXBwbGllZC4gVHlwaWNhbGx5IHRoaXMgaXMgdXNlZCB0byByZW5kZXIgYSBzcGVjaWFsIG1lc3NhZ2VcbiAqICAgICB3aGVuIGEgZmlsdGVyIGlzIGFjdGl2ZSBvbiB0aGUgcmVwZWF0ZXIsIGJ1dCB0aGUgZmlsdGVyZWQgcmVzdWx0IHNldCBpcyBlbXB0eS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyOnggYXMgcmVzdWx0c2Agd2lsbCBzdG9yZSB0aGUgZnJhZ21lbnQgb2YgdGhlIHJlcGVhdGVkIGl0ZW1zIGFzIGByZXN1bHRzYCwgYnV0IG9ubHkgYWZ0ZXJcbiAqICAgICB0aGUgaXRlbXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCB0aHJvdWdoIHRoZSBmaWx0ZXIuXG4gKlxuICogICAgIFBsZWFzZSBub3RlIHRoYXQgYGFzIFt2YXJpYWJsZSBuYW1lXSBpcyBub3QgYW4gb3BlcmF0b3IgYnV0IHJhdGhlciBhIHBhcnQgb2YgbmdSZXBlYXQgbWljcm8tc3ludGF4IHNvIGl0IGNhbiBiZSB1c2VkIG9ubHkgYXQgdGhlIGVuZFxuICogICAgIChhbmQgbm90IGFzIG9wZXJhdG9yLCBpbnNpZGUgYW4gZXhwcmVzc2lvbikuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlciA6IHggfCBvcmRlckJ5IDogb3JkZXIgfCBsaW1pdFRvIDogbGltaXQgYXMgcmVzdWx0c2AgLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgdXNlcyBgbmdSZXBlYXRgIHRvIGRpc3BsYXkgYSBsaXN0IG9mIHBlb3BsZS4gQSBmaWx0ZXIgaXMgdXNlZCB0byByZXN0cmljdCB0aGUgZGlzcGxheWVkXG4gKiByZXN1bHRzIGJ5IG5hbWUgb3IgYnkgYWdlLiBOZXcgKGVudGVyaW5nKSBhbmQgcmVtb3ZlZCAobGVhdmluZykgaXRlbXMgYXJlIGFuaW1hdGVkLlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ1JlcGVhdFwiIG5hbWU9XCJuZ1JlcGVhdFwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1yZXBlYXRcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwicmVwZWF0Q29udHJvbGxlclwiPlxuICAgICAgICBJIGhhdmUge3tmcmllbmRzLmxlbmd0aH19IGZyaWVuZHMuIFRoZXkgYXJlOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInNlYXJjaFwiIG5nLW1vZGVsPVwicVwiIHBsYWNlaG9sZGVyPVwiZmlsdGVyIGZyaWVuZHMuLi5cIiBhcmlhLWxhYmVsPVwiZmlsdGVyIGZyaWVuZHNcIiAvPlxuICAgICAgICA8dWwgY2xhc3M9XCJleGFtcGxlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpxIGFzIHJlc3VsdHNcIj5cbiAgICAgICAgICAgIFt7eyRpbmRleCArIDF9fV0ge3tmcmllbmQubmFtZX19IHdobyBpcyB7e2ZyaWVuZC5hZ2V9fSB5ZWFycyBvbGQuXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGkgY2xhc3M9XCJhbmltYXRlLXJlcGVhdFwiIG5nLWlmPVwicmVzdWx0cy5sZW5ndGggPT09IDBcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+Tm8gcmVzdWx0cyBmb3VuZC4uLjwvc3Ryb25nPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUmVwZWF0JywgWyduZ0FuaW1hdGUnXSkuY29udHJvbGxlcigncmVwZWF0Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IFtcbiAgICAgICAgICB7bmFtZTonSm9obicsIGFnZToyNSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAgICB7bmFtZTonSmVzc2llJywgYWdlOjMwLCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAgICB7bmFtZTonSm9oYW5uYScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAge25hbWU6J0pveScsIGFnZToxNSwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAge25hbWU6J01hcnknLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidQZXRlcicsIGFnZTo5NSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAgICB7bmFtZTonU2ViYXN0aWFuJywgYWdlOjUwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICAgIHtuYW1lOidFcmlrYScsIGFnZToyNywgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAge25hbWU6J1BhdHJpY2snLCBhZ2U6NDAsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAge25hbWU6J1NhbWFudGhhJywgYWdlOjYwLCBnZW5kZXI6J2dpcmwnfVxuICAgICAgICBdO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBsaXN0LXN0eWxlOm5vbmU7XG4gICAgICAgIG1hcmdpbjowO1xuICAgICAgICBwYWRkaW5nOjAgMTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0IHtcbiAgICAgICAgbGluZS1oZWlnaHQ6MzBweDtcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlciB7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgICAgbWF4LWhlaWdodDowO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZS5uZy1tb3ZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjE7XG4gICAgICAgIG1heC1oZWlnaHQ6MzBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIGZyaWVuZHMgPSBlbGVtZW50LmFsbChieS5yZXBlYXRlcignZnJpZW5kIGluIGZyaWVuZHMnKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcmVuZGVyIGluaXRpYWwgZGF0YSBzZXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBKb2huIHdobyBpcyAyNSB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgxKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1syXSBKZXNzaWUgd2hvIGlzIDMwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzEwXSBTYW1hbnRoYSB3aG8gaXMgNjAgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdmcmllbmRzLmxlbmd0aCcpKS5nZXRUZXh0KCkpXG4gICAgICAgICAgICAudG9NYXRjaChcIkkgaGF2ZSAxMCBmcmllbmRzLiBUaGV5IGFyZTpcIik7XG4gICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlIHJlcGVhdGVyIHdoZW4gZmlsdGVyIHByZWRpY2F0ZSBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5jb3VudCgpKS50b0JlKDEwKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgncScpKS5zZW5kS2V5cygnbWEnKTtcblxuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgyKTtcbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBNYXJ5IHdobyBpcyAyOCB5ZWFycyBvbGQuJyk7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5sYXN0KCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1JlcGVhdERpcmVjdGl2ZSA9IFsnJHBhcnNlJywgJyRhbmltYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJHBhcnNlLCAkYW5pbWF0ZSwgJGNvbXBpbGUpIHtcbiAgdmFyIE5HX1JFTU9WRUQgPSAnJCROR19SRU1PVkVEJztcbiAgdmFyIG5nUmVwZWF0TWluRXJyID0gbWluRXJyKCduZ1JlcGVhdCcpO1xuXG4gIHZhciB1cGRhdGVTY29wZSA9IGZ1bmN0aW9uKHNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBhcnJheUxlbmd0aCkge1xuICAgIC8vIFRPRE8ocGVyZik6IGdlbmVyYXRlIHNldHRlcnMgdG8gc2hhdmUgb2ZmIH40MG1zIG9yIDEtMS41JVxuICAgIHNjb3BlW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTtcbiAgICBpZiAoa2V5SWRlbnRpZmllcikgc2NvcGVba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgc2NvcGUuJGluZGV4ID0gaW5kZXg7XG4gICAgc2NvcGUuJGZpcnN0ID0gKGluZGV4ID09PSAwKTtcbiAgICBzY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGFycmF5TGVuZ3RoIC0gMSkpO1xuICAgIHNjb3BlLiRtaWRkbGUgPSAhKHNjb3BlLiRmaXJzdCB8fCBzY29wZS4kbGFzdCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICBzY29wZS4kb2RkID0gIShzY29wZS4kZXZlbiA9IChpbmRleCAmIDEpID09PSAwKTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tTdGFydCA9IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgcmV0dXJuIGJsb2NrLmNsb25lWzBdO1xuICB9O1xuXG4gIHZhciBnZXRCbG9ja0VuZCA9IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgcmV0dXJuIGJsb2NrLmNsb25lW2Jsb2NrLmNsb25lLmxlbmd0aCAtIDFdO1xuICB9O1xuXG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDEwMDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgJCR0bGI6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdSZXBlYXRDb21waWxlKCRlbGVtZW50LCAkYXR0cikge1xuICAgICAgdmFyIGV4cHJlc3Npb24gPSAkYXR0ci5uZ1JlcGVhdDtcbiAgICAgIHZhciBuZ1JlcGVhdEVuZENvbW1lbnQgPSAkY29tcGlsZS4kJGNyZWF0ZUNvbW1lbnQoJ2VuZCBuZ1JlcGVhdCcsIGV4cHJlc3Npb24pO1xuXG4gICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eXFxzKihbXFxzXFxTXSs/KVxccytpblxccysoW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrdHJhY2tcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT9cXHMqJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpZXhwJywgJ0V4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiBcXCdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fWyB0cmFjayBieSBfaWRfXVxcJyBidXQgZ290IFxcJ3swfVxcJy4nLFxuICAgICAgICAgICAgZXhwcmVzc2lvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaHMgPSBtYXRjaFsxXTtcbiAgICAgIHZhciByaHMgPSBtYXRjaFsyXTtcbiAgICAgIHZhciBhbGlhc0FzID0gbWF0Y2hbM107XG4gICAgICB2YXIgdHJhY2tCeUV4cCA9IG1hdGNoWzRdO1xuXG4gICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihcXHMqWyRcXHddKyl8XFwoXFxzKihbJFxcd10rKVxccyosXFxzKihbJFxcd10rKVxccypcXCkpJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpaWRleHAnLCAnXFwnX2l0ZW1fXFwnIGluIFxcJ19pdGVtXyBpbiBfY29sbGVjdGlvbl9cXCcgc2hvdWxkIGJlIGFuIGlkZW50aWZpZXIgb3IgXFwnKF9rZXlfLCBfdmFsdWVfKVxcJyBleHByZXNzaW9uLCBidXQgZ290IFxcJ3swfVxcJy4nLFxuICAgICAgICAgICAgbGhzKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZUlkZW50aWZpZXIgPSBtYXRjaFszXSB8fCBtYXRjaFsxXTtcbiAgICAgIHZhciBrZXlJZGVudGlmaWVyID0gbWF0Y2hbMl07XG5cbiAgICAgIGlmIChhbGlhc0FzICYmICghL15bJGEtekEtWl9dWyRhLXpBLVowLTlfXSokLy50ZXN0KGFsaWFzQXMpIHx8XG4gICAgICAgICAgL14obnVsbHx1bmRlZmluZWR8dGhpc3xcXCRpbmRleHxcXCRmaXJzdHxcXCRtaWRkbGV8XFwkbGFzdHxcXCRldmVufFxcJG9kZHxcXCRwYXJlbnR8XFwkcm9vdHxcXCRpZCkkLy50ZXN0KGFsaWFzQXMpKSkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignYmFkaWRlbnQnLCAnYWxpYXMgXFwnezB9XFwnIGlzIGludmFsaWQgLS0tIG11c3QgYmUgYSB2YWxpZCBKUyBpZGVudGlmaWVyIHdoaWNoIGlzIG5vdCBhIHJlc2VydmVkIG5hbWUuJyxcbiAgICAgICAgICBhbGlhc0FzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYWNrQnlFeHBHZXR0ZXIsIHRyYWNrQnlJZEV4cEZuLCB0cmFja0J5SWRBcnJheUZuLCB0cmFja0J5SWRPYmpGbjtcbiAgICAgIHZhciBoYXNoRm5Mb2NhbHMgPSB7JGlkOiBoYXNoS2V5fTtcblxuICAgICAgaWYgKHRyYWNrQnlFeHApIHtcbiAgICAgICAgdHJhY2tCeUV4cEdldHRlciA9ICRwYXJzZSh0cmFja0J5RXhwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGhhc2hLZXkodmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICB0cmFja0J5SWRPYmpGbiA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1JlcGVhdExpbmsoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG5cbiAgICAgICAgaWYgKHRyYWNrQnlFeHBHZXR0ZXIpIHtcbiAgICAgICAgICB0cmFja0J5SWRFeHBGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBhc3NpZ24ga2V5LCB2YWx1ZSwgYW5kICRpbmRleCB0byB0aGUgbG9jYWxzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCBpbiBoYXNoIGZ1bmN0aW9uc1xuICAgICAgICAgICAgaWYgKGtleUlkZW50aWZpZXIpIGhhc2hGbkxvY2Fsc1trZXlJZGVudGlmaWVyXSA9IGtleTtcbiAgICAgICAgICAgIGhhc2hGbkxvY2Fsc1t2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHMuJGluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeUV4cEdldHRlcigkc2NvcGUsIGhhc2hGbkxvY2Fscyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlXG4gICAgICAgIC8vIGl0ZXJhdG9yLCBhbmQgdGhlIHZhbHVlIGlzIG9iamVjdHMgd2l0aCBmb2xsb3dpbmcgcHJvcGVydGllcy5cbiAgICAgICAgLy8gICAtIHNjb3BlOiBib3VuZCBzY29wZVxuICAgICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC5cbiAgICAgICAgLy8gICAtIGluZGV4OiBwb3NpdGlvblxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBhcmUgdXNpbmcgbm8tcHJvdG8gb2JqZWN0IHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBndWFyZCBhZ2FpbnN0IGluaGVyaXRlZCBwcm9wcyB2aWFcbiAgICAgICAgLy8gaGFzT3duUHJvcGVydHkuXG4gICAgICAgIHZhciBsYXN0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKTtcblxuICAgICAgICAvL3dhdGNoIHByb3BzXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKHJocywgZnVuY3Rpb24gbmdSZXBlYXRBY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBpbmRleCwgbGVuZ3RoLFxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSAkZWxlbWVudFswXSwgICAgIC8vIG5vZGUgdGhhdCBjbG9uZWQgbm9kZXMgc2hvdWxkIGJlIGluc2VydGVkIGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZWQgdG8gdGhlIGNvbW1lbnQgbm9kZSBhbmNob3JcbiAgICAgICAgICAgICAgbmV4dE5vZGUsXG4gICAgICAgICAgICAgIC8vIFNhbWUgYXMgbGFzdEJsb2NrTWFwIGJ1dCBpdCBoYXMgdGhlIGN1cnJlbnQgc3RhdGUuIEl0IHdpbGwgYmVjb21lIHRoZVxuICAgICAgICAgICAgICAvLyBsYXN0QmxvY2tNYXAgb24gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCxcbiAgICAgICAgICAgICAga2V5LCB2YWx1ZSwgLy8ga2V5L3ZhbHVlIG9mIGl0ZXJhdGlvblxuICAgICAgICAgICAgICB0cmFja0J5SWQsXG4gICAgICAgICAgICAgIHRyYWNrQnlJZEZuLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyxcbiAgICAgICAgICAgICAgYmxvY2ssICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyLFxuICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlO1xuXG4gICAgICAgICAgaWYgKGFsaWFzQXMpIHtcbiAgICAgICAgICAgICRzY29wZVthbGlhc0FzXSA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZEFycmF5Rm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkT2JqRm47XG4gICAgICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbGxlY3Rpb24sIGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cy5wdXNoKGl0ZW1LZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCA9IGNvbGxlY3Rpb25LZXlzLmxlbmd0aDtcbiAgICAgICAgICBuZXh0QmxvY2tPcmRlciA9IG5ldyBBcnJheShjb2xsZWN0aW9uTGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGxvY2F0ZSBleGlzdGluZyBpdGVtc1xuICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgdHJhY2tCeUlkID0gdHJhY2tCeUlkRm4oa2V5LCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGxhc3RCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGZvdW5kIHByZXZpb3VzbHkgc2VlbiBibG9ja1xuICAgICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xuICAgICAgICAgICAgICBkZWxldGUgbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSkge1xuICAgICAgICAgICAgICAvLyBpZiBjb2xsaXNpb24gZGV0ZWN0ZWQuIHJlc3RvcmUgbGFzdEJsb2NrTWFwIGFuZCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5zY29wZSkgbGFzdEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2R1cGVzJyxcbiAgICAgICAgICAgICAgICAgICdEdXBsaWNhdGVzIGluIGEgcmVwZWF0ZXIgYXJlIG5vdCBhbGxvd2VkLiBVc2UgXFwndHJhY2sgYnlcXCcgZXhwcmVzc2lvbiB0byBzcGVjaWZ5IHVuaXF1ZSBrZXlzLiBSZXBlYXRlcjogezB9LCBEdXBsaWNhdGUga2V5OiB7MX0sIER1cGxpY2F0ZSB2YWx1ZTogezJ9JyxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sIHRyYWNrQnlJZCwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IG5ldmVyIGJlZm9yZSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IHtpZDogdHJhY2tCeUlkLCBzY29wZTogdW5kZWZpbmVkLCBjbG9uZTogdW5kZWZpbmVkfTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlbW92ZSBsZWZ0b3ZlciBpdGVtc1xuICAgICAgICAgIGZvciAodmFyIGJsb2NrS2V5IGluIGxhc3RCbG9ja01hcCkge1xuICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbYmxvY2tLZXldO1xuICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZSA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpO1xuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxlbWVudHNUb1JlbW92ZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHNUb1JlbW92ZVswXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBlbGVtZW50IHdhcyBub3QgcmVtb3ZlZCB5ZXQgYmVjYXVzZSBvZiBwZW5kaW5nIGFuaW1hdGlvbiwgbWFyayBpdCBhcyBkZWxldGVkXG4gICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIGlnbm9yZSBpdCBsYXRlclxuICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZVtpbmRleF1bTkdfUkVNT1ZFRF0gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5zY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgZm9yRWFjaCBmb3IgcGVyZiByZWFzb25zICh0cnlpbmcgdG8gYXZvaWQgI2NhbGwpXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICBibG9jayA9IG5leHRCbG9ja09yZGVyW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKGJsb2NrLnNjb3BlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlXG4gICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudFxuXG4gICAgICAgICAgICAgIG5leHROb2RlID0gcHJldmlvdXNOb2RlO1xuXG4gICAgICAgICAgICAgIC8vIHNraXAgbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBwZW5kaW5nIHJlbW92YWwgdmlhIGxlYXZlIGFuaW1hdGlvblxuICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgfSB3aGlsZSAobmV4dE5vZGUgJiYgbmV4dE5vZGVbTkdfUkVNT1ZFRF0pO1xuXG4gICAgICAgICAgICAgIGlmIChnZXRCbG9ja1N0YXJ0KGJsb2NrKSAhPT0gbmV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBpdGVtIHdoaWNoIGdvdCBtb3ZlZFxuICAgICAgICAgICAgICAgICRhbmltYXRlLm1vdmUoZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSksIG51bGwsIHByZXZpb3VzTm9kZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gZ2V0QmxvY2tFbmQoYmxvY2spO1xuICAgICAgICAgICAgICB1cGRhdGVTY29wZShibG9jay5zY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBuZXcgaXRlbSB3aGljaCB3ZSBkb24ndCBrbm93IGFib3V0XG4gICAgICAgICAgICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uIG5nUmVwZWF0VHJhbnNjbHVkZShjbG9uZSwgc2NvcGUpIHtcbiAgICAgICAgICAgICAgICBibG9jay5zY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2Nsb25lLXZzLWNyZWF0ZWNvbW1lbnRcbiAgICAgICAgICAgICAgICB2YXIgZW5kTm9kZSA9IG5nUmVwZWF0RW5kQ29tbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGVuZE5vZGU7XG5cbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgbnVsbCwgcHJldmlvdXNOb2RlKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBlbmROb2RlO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2suY2xvbmUgPSBjbG9uZTtcbiAgICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdEJsb2NrTWFwID0gbmV4dEJsb2NrTWFwO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBOR19ISURFX0NMQVNTID0gJ25nLWhpZGUnO1xudmFyIE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MgPSAnbmctaGlkZS1hbmltYXRlJztcbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTaG93XG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU2hvd2AgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb24gcHJvdmlkZWQgdG9cbiAqIHRoZSBgbmdTaG93YCBhdHRyaWJ1dGUuXG4gKlxuICogVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZyB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC5cbiAqIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkIGluIEFuZ3VsYXJKUyBhbmQgc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhblxuICogYCFpbXBvcnRhbnRgIGZsYWcpLiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIEhUTUwgZmlsZSAoc2VlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgaHRtbFxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT5cbiAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIj48L2Rpdj5cbiAqXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgZmFsc3kgKGVsZW1lbnQgaXMgaGlkZGVuKSAtLT5cbiAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIiBjbGFzcz1cIm5nLWhpZGVcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgZmFsc3kgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWRcbiAqIHRvIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIHRydXRoeSwgdGhlIGAubmctaGlkZWBcbiAqIENTUyBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgY2F1c2luZyB0aGUgZWxlbWVudCBub3QgdG8gYXBwZWFyIGhpZGRlbi5cbiAqXG4gKiAjIyBXaHkgaXMgYCFpbXBvcnRhbnRgIHVzZWQ/XG4gKlxuICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5IGAhaW1wb3J0YW50YCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGVcbiAqIGAubmctaGlkZWAgc2VsZWN0b3IgY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzXG4gKiBzaW1wbGUgYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXJcbiAqIHZpc2libGUuIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICpcbiAqIEJ5IHVzaW5nIGAhaW1wb3J0YW50YCwgdGhlIHNob3cgYW5kIGhpZGUgYmVoYXZpb3Igd2lsbCB3b3JrIGFzIGV4cGVjdGVkIGRlc3BpdGUgYW55IGNsYXNoIGJldHdlZW5cbiAqIENTUyBzZWxlY3RvciBzcGVjaWZpY2l0eSAod2hlbiBgIWltcG9ydGFudGAgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhXG4gKiBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGUgc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYVxuICogbWF0dGVyIG9mIHVzaW5nIGAhaW1wb3J0YW50YCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXG4gKlxuICogIyMjIE92ZXJyaWRpbmcgYC5uZy1oaWRlYFxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBgLm5nLWhpZGVgIGNsYXNzIHdpbGwgc3R5bGUgdGhlIGVsZW1lbnQgd2l0aCBgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50YC4gSWYgeW91XG4gKiB3aXNoIHRvIGNoYW5nZSB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIGBuZ1Nob3dgL2BuZ0hpZGVgLCB5b3UgY2FuIHNpbXBseSBvdmVyd3JpdGUgdGhlIHN0eWxlcyBmb3JcbiAqIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gTm90ZSB0aGF0IHRoZSBzZWxlY3RvciB0aGF0IG5lZWRzIHRvIGJlIHVzZWQgaXMgYWN0dWFsbHlcbiAqIGAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSlgIHRvIGNvcGUgd2l0aCBleHRyYSBhbmltYXRpb24gY2xhc3NlcyB0aGF0IGNhbiBiZSBhZGRlZC5cbiAqXG4gKiBgYGBjc3NcbiAqIC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKSB7XG4gKiAgIC8mIzQyOyBUaGVzZSBhcmUganVzdCBhbHRlcm5hdGl2ZSB3YXlzIG9mIGhpZGluZyBhbiBlbGVtZW50ICYjNDI7L1xuICogICBkaXNwbGF5OiBibG9jayFpbXBvcnRhbnQ7XG4gKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqICAgdG9wOiAtOTk5OXB4O1xuICogICBsZWZ0OiAtOTk5OXB4O1xuICogfVxuICogYGBgXG4gKlxuICogQnkgZGVmYXVsdCB5b3UgZG9uJ3QgbmVlZCB0byBvdmVycmlkZSBhbnl0aGluZyBpbiBDU1MgYW5kIHRoZSBhbmltYXRpb25zIHdpbGwgd29yayBhcm91bmQgdGhlXG4gKiBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nU2hvd2BcbiAqXG4gKiBBbmltYXRpb25zIGluIGBuZ1Nob3dgL2BuZ0hpZGVgIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlXG4gKiBkaXJlY3RpdmUgZXhwcmVzc2lvbiBpcyB0cnVlIGFuZCBmYWxzZS4gVGhpcyBzeXN0ZW0gd29ya3MgbGlrZSB0aGUgYW5pbWF0aW9uIHN5c3RlbSBwcmVzZW50IHdpdGhcbiAqIGBuZ0NsYXNzYCBleGNlcHQgdGhhdCB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgdGhlIGAhaW1wb3J0YW50YCBmbGFnIHRvIG92ZXJyaWRlIHRoZSBkaXNwbGF5XG4gKiBwcm9wZXJ0eSBzbyB0aGF0IHRoZSBlbGVtZW50cyBhcmUgbm90IGFjdHVhbGx5IGhpZGRlbiBkdXJpbmcgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyBBIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UuICYjNDI7L1xuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAqICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgbGluZWFyO1xuICogfVxuICpcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUgeyAuLi4gfVxuICogYGBgXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQsIGFzIG9mIEFuZ3VsYXJKUyB2ZXJzaW9uIDEuMywgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXkgcHJvcGVydHlcbiAqIHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzIC0gbmdBbmltYXRlIHdpbGwgYXV0b21hdGljYWxseSBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGZvciB5b3UuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgJGFuaW1hdGUjYWRkQ2xhc3MgYWRkQ2xhc3N9IGAubmctaGlkZWAgICAgICAgfCBBZnRlciB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW4uIHxcbiAqIHwge0BsaW5rICRhbmltYXRlI3JlbW92ZUNsYXNzIHJlbW92ZUNsYXNzfSBgLm5nLWhpZGVgIHwgQWZ0ZXIgdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSBjb250ZW50cyBhcmUgc2V0IHRvIHZpc2libGUuICAgICAgICB8XG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU2hvdyBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5L2ZhbHN5IHRoZW4gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50IGlzIHNob3duL2hpZGRlbiByZXNwZWN0aXZlbHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEEgc2ltcGxlIGV4YW1wbGUsIGFuaW1hdGluZyB0aGUgZWxlbWVudCdzIG9wYWNpdHk6XG4gKlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctc2hvdy1zaW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgU2hvdzogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdTaG93XCI+PGJyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3ctaGlkZVwiIG5nLXNob3c9XCJjaGVja2VkXCI+XG4gICAgICAgIEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtYWRkLFxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nU2hvdycsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICB2YXIgY2hlY2tFbGVtID0gZWxlbWVudChieS5jc3MoJy5jaGVjay1lbGVtZW50JykpO1xuXG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICpcbiAqIDxociAvPlxuICogQGV4YW1wbGVcbiAqIEEgbW9yZSBjb21wbGV4IGV4YW1wbGUsIGZlYXR1cmluZyBkaWZmZXJlbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnM6XG4gKlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctc2hvdy1jb21wbGV4XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIFNob3c6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nU2hvd1wiPjxiciAvPlxuICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgZnVua3ktc2hvdy1oaWRlXCIgbmctc2hvdz1cImNoZWNrZWRcIj5cbiAgICAgICAgSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgYm9keSB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHBlcnNwZWN0aXZlOiAxMDAwcHg7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1hZGQge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooMCk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlLWluLW91dDtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooLTEzNWRlZyk7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgwKTtcbiAgICAgIH1cblxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZ1Nob3cnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoZWNrYm94ID0gZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKTtcbiAgICAgICAgdmFyIGNoZWNrRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCcuY2hlY2stZWxlbWVudCcpKTtcblxuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICBjaGVja2JveC5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU2hvd0RpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1Nob3csIGZ1bmN0aW9uIG5nU2hvd1dhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIHdlJ3JlIGFkZGluZyBhIHRlbXBvcmFyeSwgYW5pbWF0aW9uLXNwZWNpZmljIGNsYXNzIGZvciBuZy1oaWRlIHNpbmNlIHRoaXMgd2F5XG4gICAgICAgIC8vIHdlIGNhbiBjb250cm9sIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWN0dWFsbHkgZGlzcGxheWVkIG9uIHNjcmVlbiB3aXRob3V0IGhhdmluZ1xuICAgICAgICAvLyB0byBoYXZlIGEgZ2xvYmFsL2dyZWVkeSBDU1Mgc2VsZWN0b3IgdGhhdCBicmVha3Mgd2hlbiBvdGhlciBhbmltYXRpb25zIGFyZSBydW4uXG4gICAgICAgIC8vIFJlYWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxMDMjaXNzdWVjb21tZW50LTU4MzM1ODQ1XG4gICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKGVsZW1lbnQsIE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdIaWRlXG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nSGlkZWAgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb24gcHJvdmlkZWQgdG9cbiAqIHRoZSBgbmdIaWRlYCBhdHRyaWJ1dGUuXG4gKlxuICogVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZyB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC5cbiAqIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkIGluIEFuZ3VsYXJKUyBhbmQgc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhblxuICogYCFpbXBvcnRhbnRgIGZsYWcpLiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIEhUTUwgZmlsZSAoc2VlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgaHRtbFxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiIGNsYXNzPVwibmctaGlkZVwiPjwvZGl2PlxuICpcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT5cbiAqIDxkaXYgbmctaGlkZT1cIm15VmFsdWVcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkXG4gKiB0byB0aGUgY2xhc3MgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiBmYWxzeSwgdGhlIGAubmctaGlkZWBcbiAqIENTUyBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgY2F1c2luZyB0aGUgZWxlbWVudCBub3QgdG8gYXBwZWFyIGhpZGRlbi5cbiAqXG4gKiAjIyBXaHkgaXMgYCFpbXBvcnRhbnRgIHVzZWQ/XG4gKlxuICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5IGAhaW1wb3J0YW50YCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGVcbiAqIGAubmctaGlkZWAgc2VsZWN0b3IgY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzXG4gKiBzaW1wbGUgYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXJcbiAqIHZpc2libGUuIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICpcbiAqIEJ5IHVzaW5nIGAhaW1wb3J0YW50YCwgdGhlIHNob3cgYW5kIGhpZGUgYmVoYXZpb3Igd2lsbCB3b3JrIGFzIGV4cGVjdGVkIGRlc3BpdGUgYW55IGNsYXNoIGJldHdlZW5cbiAqIENTUyBzZWxlY3RvciBzcGVjaWZpY2l0eSAod2hlbiBgIWltcG9ydGFudGAgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhXG4gKiBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGUgc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYVxuICogbWF0dGVyIG9mIHVzaW5nIGAhaW1wb3J0YW50YCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXG4gKlxuICogIyMjIE92ZXJyaWRpbmcgYC5uZy1oaWRlYFxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBgLm5nLWhpZGVgIGNsYXNzIHdpbGwgc3R5bGUgdGhlIGVsZW1lbnQgd2l0aCBgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50YC4gSWYgeW91XG4gKiB3aXNoIHRvIGNoYW5nZSB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIGBuZ1Nob3dgL2BuZ0hpZGVgLCB5b3UgY2FuIHNpbXBseSBvdmVyd3JpdGUgdGhlIHN0eWxlcyBmb3JcbiAqIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gTm90ZSB0aGF0IHRoZSBzZWxlY3RvciB0aGF0IG5lZWRzIHRvIGJlIHVzZWQgaXMgYWN0dWFsbHlcbiAqIGAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSlgIHRvIGNvcGUgd2l0aCBleHRyYSBhbmltYXRpb24gY2xhc3NlcyB0aGF0IGNhbiBiZSBhZGRlZC5cbiAqXG4gKiBgYGBjc3NcbiAqIC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKSB7XG4gKiAgIC8mIzQyOyBUaGVzZSBhcmUganVzdCBhbHRlcm5hdGl2ZSB3YXlzIG9mIGhpZGluZyBhbiBlbGVtZW50ICYjNDI7L1xuICogICBkaXNwbGF5OiBibG9jayFpbXBvcnRhbnQ7XG4gKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqICAgdG9wOiAtOTk5OXB4O1xuICogICBsZWZ0OiAtOTk5OXB4O1xuICogfVxuICogYGBgXG4gKlxuICogQnkgZGVmYXVsdCB5b3UgZG9uJ3QgbmVlZCB0byBvdmVycmlkZSBpbiBDU1MgYW55dGhpbmcgYW5kIHRoZSBhbmltYXRpb25zIHdpbGwgd29yayBhcm91bmQgdGhlXG4gKiBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nSGlkZWBcbiAqXG4gKiBBbmltYXRpb25zIGluIGBuZ1Nob3dgL2BuZ0hpZGVgIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlXG4gKiBkaXJlY3RpdmUgZXhwcmVzc2lvbiBpcyB0cnVlIGFuZCBmYWxzZS4gVGhpcyBzeXN0ZW0gd29ya3MgbGlrZSB0aGUgYW5pbWF0aW9uIHN5c3RlbSBwcmVzZW50IHdpdGhcbiAqIGBuZ0NsYXNzYCBleGNlcHQgdGhhdCB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgdGhlIGAhaW1wb3J0YW50YCBmbGFnIHRvIG92ZXJyaWRlIHRoZSBkaXNwbGF5XG4gKiBwcm9wZXJ0eSBzbyB0aGF0IHRoZSBlbGVtZW50cyBhcmUgbm90IGFjdHVhbGx5IGhpZGRlbiBkdXJpbmcgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyBBIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UuICYjNDI7L1xuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAqICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgbGluZWFyO1xuICogfVxuICpcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUgeyAuLi4gfVxuICogYGBgXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQsIGFzIG9mIEFuZ3VsYXJKUyB2ZXJzaW9uIDEuMywgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXkgcHJvcGVydHlcbiAqIHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzIC0gbmdBbmltYXRlIHdpbGwgYXV0b21hdGljYWxseSBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGZvciB5b3UuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgJGFuaW1hdGUjYWRkQ2xhc3MgYWRkQ2xhc3N9IGAubmctaGlkZWAgICAgICAgfCBBZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlbi4gIHxcbiAqIHwge0BsaW5rICRhbmltYXRlI3JlbW92ZUNsYXNzIHJlbW92ZUNsYXNzfSBgLm5nLWhpZGVgIHwgQWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlLiB8XG4gKlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0hpZGUgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeS9mYWxzeSB0aGVuIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCBpcyBoaWRkZW4vc2hvd24gcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBBIHNpbXBsZSBleGFtcGxlLCBhbmltYXRpbmcgdGhlIGVsZW1lbnQncyBvcGFjaXR5OlxuICpcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWhpZGUtc2ltcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIEhpZGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nSGlkZVwiPjxiciAvPlxuICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93LWhpZGVcIiBuZy1oaWRlPVwiY2hlY2tlZFwiPlxuICAgICAgICBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlLWFkZCxcbiAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZSB7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCBsaW5lYXIgMC41cztcbiAgICAgIH1cblxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZ0hpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoZWNrYm94ID0gZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKTtcbiAgICAgICAgdmFyIGNoZWNrRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCcuY2hlY2stZWxlbWVudCcpKTtcblxuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqXG4gKiA8aHIgLz5cbiAqIEBleGFtcGxlXG4gKiBBIG1vcmUgY29tcGxleCBleGFtcGxlLCBmZWF0dXJpbmcgZGlmZmVyZW50IHNob3cvaGlkZSBhbmltYXRpb25zOlxuICpcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWhpZGUtY29tcGxleFwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBIaWRlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ0hpZGVcIj48YnIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGZ1bmt5LXNob3ctaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgIEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIGJvZHkge1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBwZXJzcGVjdGl2ZTogMTAwMHB4O1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtYWRkIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKDApO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodDtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZS1pbi1vdXQ7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKC0xMzVkZWcpO1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDkwZGVnKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdDtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMCk7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmdIaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGVja2JveCA9IGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSk7XG4gICAgICAgIHZhciBjaGVja0VsZW0gPSBlbGVtZW50KGJ5LmNzcygnLmNoZWNrLWVsZW1lbnQnKSk7XG5cbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgICBjaGVja2JveC5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0hpZGVEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdIaWRlLCBmdW5jdGlvbiBuZ0hpZGVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBUaGUgY29tbWVudCBpbnNpZGUgb2YgdGhlIG5nU2hvd0RpcmVjdGl2ZSBleHBsYWlucyB3aHkgd2UgYWRkIGFuZFxuICAgICAgICAvLyByZW1vdmUgYSB0ZW1wb3JhcnkgY2xhc3MgZm9yIHRoZSBzaG93L2hpZGUgYW5pbWF0aW9uXG4gICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsTkdfSElERV9DTEFTUywge1xuICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTdHlsZVxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNldCBDU1Mgc3R5bGUgb24gYW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkuXG4gKlxuICogQGtub3duSXNzdWVcbiAqIFlvdSBzaG91bGQgbm90IHVzZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9ufSBpbiB0aGUgdmFsdWUgb2YgdGhlIGBzdHlsZWBcbiAqIGF0dHJpYnV0ZSwgd2hlbiB1c2luZyB0aGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50LlxuICogU2VlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uI2tub3duLWlzc3VlcyBoZXJlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N0eWxlXG4gKlxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW5cbiAqIG9iamVjdCB3aG9zZSBrZXlzIGFyZSBDU1Mgc3R5bGUgbmFtZXMgYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRob3NlIENTU1xuICoga2V5cy5cbiAqXG4gKiBTaW5jZSBzb21lIENTUyBzdHlsZSBuYW1lcyBhcmUgbm90IHZhbGlkIGtleXMgZm9yIGFuIG9iamVjdCwgdGhleSBtdXN0IGJlIHF1b3RlZC5cbiAqIFNlZSB0aGUgJ2JhY2tncm91bmQtY29sb3InIHN0eWxlIGluIHRoZSBleGFtcGxlIGJlbG93LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctc3R5bGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBjb2xvclwiIG5nLWNsaWNrPVwibXlTdHlsZT17Y29sb3I6J3JlZCd9XCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgYmFja2dyb3VuZFwiIG5nLWNsaWNrPVwibXlTdHlsZT17J2JhY2tncm91bmQtY29sb3InOidibHVlJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVN0eWxlPXt9XCI+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxzcGFuIG5nLXN0eWxlPVwibXlTdHlsZVwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICAgICA8cHJlPm15U3R5bGU9e3tteVN0eWxlfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgc3BhbiB7XG4gICAgICAgICBjb2xvcjogYmxhY2s7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgY29sb3JTcGFuID0gZWxlbWVudChieS5jc3MoJ3NwYW4nKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN0eWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9XFwnc2V0IGNvbG9yXFwnXScpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgyNTUsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9Y2xlYXJdJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICBzY29wZS4kd2F0Y2goYXR0ci5uZ1N0eWxlLCBmdW5jdGlvbiBuZ1N0eWxlV2F0Y2hBY3Rpb24obmV3U3R5bGVzLCBvbGRTdHlsZXMpIHtcbiAgICBpZiAob2xkU3R5bGVzICYmIChuZXdTdHlsZXMgIT09IG9sZFN0eWxlcykpIHtcbiAgICAgIGZvckVhY2gob2xkU3R5bGVzLCBmdW5jdGlvbih2YWwsIHN0eWxlKSB7IGVsZW1lbnQuY3NzKHN0eWxlLCAnJyk7fSk7XG4gICAgfVxuICAgIGlmIChuZXdTdHlsZXMpIGVsZW1lbnQuY3NzKG5ld1N0eWxlcyk7XG4gIH0sIHRydWUpO1xufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTd2l0Y2hcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N3aXRjaGAgZGlyZWN0aXZlIGlzIHVzZWQgdG8gY29uZGl0aW9uYWxseSBzd2FwIERPTSBzdHJ1Y3R1cmUgb24geW91ciB0ZW1wbGF0ZSBiYXNlZCBvbiBhIHNjb3BlIGV4cHJlc3Npb24uXG4gKiBFbGVtZW50cyB3aXRoaW4gYG5nU3dpdGNoYCBidXQgd2l0aG91dCBgbmdTd2l0Y2hXaGVuYCBvciBgbmdTd2l0Y2hEZWZhdWx0YCBkaXJlY3RpdmVzIHdpbGwgYmUgcHJlc2VydmVkIGF0IHRoZSBsb2NhdGlvblxuICogYXMgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGl0c2VsZiB3b3JrcyBzaW1pbGFyIHRvIG5nSW5jbHVkZSwgaG93ZXZlciwgaW5zdGVhZCBvZiBkb3dubG9hZGluZyB0ZW1wbGF0ZSBjb2RlIChvciBsb2FkaW5nIGl0XG4gKiBmcm9tIHRoZSB0ZW1wbGF0ZSBjYWNoZSksIGBuZ1N3aXRjaGAgc2ltcGx5IGNob29zZXMgb25lIG9mIHRoZSBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIGl0IHZpc2libGUgYmFzZWQgb24gd2hpY2ggZWxlbWVudFxuICogbWF0Y2hlcyB0aGUgdmFsdWUgb2J0YWluZWQgZnJvbSB0aGUgZXZhbHVhdGVkIGV4cHJlc3Npb24uIEluIG90aGVyIHdvcmRzLCB5b3UgZGVmaW5lIGEgY29udGFpbmVyIGVsZW1lbnRcbiAqICh3aGVyZSB5b3UgcGxhY2UgdGhlIGRpcmVjdGl2ZSksIHBsYWNlIGFuIGV4cHJlc3Npb24gb24gdGhlICoqYG9uPVwiLi4uXCJgIGF0dHJpYnV0ZSoqXG4gKiAob3IgdGhlICoqYG5nLXN3aXRjaD1cIi4uLlwiYCBhdHRyaWJ1dGUqKiksIGRlZmluZSBhbnkgaW5uZXIgZWxlbWVudHMgaW5zaWRlIG9mIHRoZSBkaXJlY3RpdmUgYW5kIHBsYWNlXG4gKiBhIHdoZW4gYXR0cmlidXRlIHBlciBlbGVtZW50LiBUaGUgd2hlbiBhdHRyaWJ1dGUgaXMgdXNlZCB0byBpbmZvcm0gbmdTd2l0Y2ggd2hpY2ggZWxlbWVudCB0byBkaXNwbGF5IHdoZW4gdGhlIG9uXG4gKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdFxuICogYXR0cmlidXRlIGlzIGRpc3BsYXllZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogQmUgYXdhcmUgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0IGNhbm5vdCBiZSBleHByZXNzaW9ucy4gVGhleSBhcmUgaW50ZXJwcmV0ZWRcbiAqIGFzIGxpdGVyYWwgc3RyaW5nIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0LlxuICogRm9yIGV4YW1wbGUsICoqYG5nLXN3aXRjaC13aGVuPVwic29tZVZhbFwiYCoqIHdpbGwgbWF0Y2ggYWdhaW5zdCB0aGUgc3RyaW5nIGBcInNvbWVWYWxcImAgbm90IGFnYWluc3QgdGhlXG4gKiB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvbiBgJHNjb3BlLnNvbWVWYWxgLlxuICogPC9kaXY+XG5cbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2VudGVyIGVudGVyfSAgfCBhZnRlciB0aGUgbmdTd2l0Y2ggY29udGVudHMgY2hhbmdlIGFuZCB0aGUgbWF0Y2hlZCBjaGlsZCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgdGhlIGNvbnRhaW5lciB8XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNsZWF2ZSBsZWF2ZX0gIHwgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQganVzdCBiZWZvcmUgdGhlIGZvcm1lciBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET00gfFxuICpcbiAqIEB1c2FnZVxuICpcbiAqIGBgYFxuICogPEFOWSBuZy1zd2l0Y2g9XCJleHByZXNzaW9uXCI+XG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMVwiPi4uLjwvQU5ZPlxuICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPVwibWF0Y2hWYWx1ZTJcIj4uLi48L0FOWT5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtZGVmYXVsdD4uLi48L0FOWT5cbiAqIDwvQU5ZPlxuICogYGBgXG4gKlxuICpcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDEyMDBcbiAqIEBwYXJhbSB7Kn0gbmdTd2l0Y2h8b24gZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0IDxjb2RlPm5nLXN3aXRjaC13aGVuPC9jb2RlPi5cbiAqIE9uIGNoaWxkIGVsZW1lbnRzIGFkZDpcbiAqXG4gKiAqIGBuZ1N3aXRjaFdoZW5gOiB0aGUgY2FzZSBzdGF0ZW1lbnQgdG8gbWF0Y2ggYWdhaW5zdC4gSWYgbWF0Y2ggdGhlbiB0aGlzXG4gKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuIElmIHRoZSBzYW1lIG1hdGNoIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMsIGFsbCB0aGVcbiAqICAgZWxlbWVudHMgd2lsbCBiZSBkaXNwbGF5ZWQuIEl0IGlzIHBvc3NpYmxlIHRvIGFzc29jaWF0ZSBtdWx0aXBsZSB2YWx1ZXMgdG9cbiAqICAgdGhlIHNhbWUgYG5nU3dpdGNoV2hlbmAgYnkgZGVmaW5pbmcgdGhlIG9wdGlvbmFsIGF0dHJpYnV0ZVxuICogICBgbmdTd2l0Y2hXaGVuU2VwYXJhdG9yYC4gVGhlIHNlcGFyYXRvciB3aWxsIGJlIHVzZWQgdG8gc3BsaXQgdGhlIHZhbHVlIG9mXG4gKiAgIHRoZSBgbmdTd2l0Y2hXaGVuYCBhdHRyaWJ1dGUgaW50byBtdWx0aXBsZSB0b2tlbnMsIGFuZCB0aGUgZWxlbWVudCB3aWxsIHNob3dcbiAqICAgaWYgYW55IG9mIHRoZSBgbmdTd2l0Y2hgIGV2YWx1YXRlcyB0byBhbnkgb2YgdGhlc2UgdG9rZW5zLlxuICogKiBgbmdTd2l0Y2hEZWZhdWx0YDogdGhlIGRlZmF1bHQgY2FzZSB3aGVuIG5vIG90aGVyIGNhc2UgbWF0Y2guIElmIHRoZXJlXG4gKiAgIGFyZSBtdWx0aXBsZSBkZWZhdWx0IGNhc2VzLCBhbGwgb2YgdGhlbSB3aWxsIGJlIGRpc3BsYXllZCB3aGVuIG5vIG90aGVyXG4gKiAgIGNhc2UgbWF0Y2guXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cInN3aXRjaEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctc3dpdGNoXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJzZWxlY3Rpb25cIiBuZy1vcHRpb25zPVwiaXRlbSBmb3IgaXRlbSBpbiBpdGVtc1wiPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPGNvZGU+c2VsZWN0aW9uPXt7c2VsZWN0aW9ufX08L2NvZGU+XG4gICAgICAgIDxoci8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaC1jb250YWluZXJcIlxuICAgICAgICAgIG5nLXN3aXRjaCBvbj1cInNlbGVjdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJzZXR0aW5nc3xvcHRpb25zXCIgbmctc3dpdGNoLXdoZW4tc2VwYXJhdG9yPVwifFwiPlNldHRpbmdzIERpdjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJob21lXCI+SG9tZSBTcGFuPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtZGVmYXVsdD5kZWZhdWx0PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdzd2l0Y2hFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3B0aW9ucycsICdvdGhlciddO1xuICAgICAgICAgICRzY29wZS5zZWxlY3Rpb24gPSAkc2NvcGUuaXRlbXNbMF07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaCB7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWFuaW1hdGUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG5cbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGJvdHRvbTowO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWVudGVyIHtcbiAgICAgICAgdG9wOi01MHB4O1xuICAgICAgfVxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgc3dpdGNoRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCdbbmctc3dpdGNoXScpKTtcbiAgICAgIHZhciBzZWxlY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3Rpb24nKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgc3RhcnQgaW4gc2V0dGluZ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9TZXR0aW5ncyBEaXYvKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gaG9tZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgxKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0hvbWUgU3Bhbi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBzZXR0aW5ncyB2aWEgXCJvcHRpb25zXCInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9TZXR0aW5ncyBEaXYvKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgzKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL2RlZmF1bHQvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTd2l0Y2hEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJGFuaW1hdGUsICRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ25nU3dpdGNoJyxcblxuICAgIC8vIGFza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZVxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gTmdTd2l0Y2hDb250cm9sbGVyKCkge1xuICAgICB0aGlzLmNhc2VzID0ge307XG4gICAgfV0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nU3dpdGNoQ29udHJvbGxlcikge1xuICAgICAgdmFyIHdhdGNoRXhwciA9IGF0dHIubmdTd2l0Y2ggfHwgYXR0ci5vbixcbiAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGVzID0gW10sXG4gICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cyA9IFtdLFxuICAgICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb25zID0gW10sXG4gICAgICAgICAgc2VsZWN0ZWRTY29wZXMgPSBbXTtcblxuICAgICAgdmFyIHNwbGljZUZhY3RvcnkgPSBmdW5jdGlvbihhcnJheSwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHNjb3BlLiR3YXRjaCh3YXRjaEV4cHIsIGZ1bmN0aW9uIG5nU3dpdGNoV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGksIGlpO1xuXG4gICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIGxhc3QsIGluIGNhc2UgdGhlIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyB0aGUgbG9vcFxuICAgICAgICB3aGlsZSAocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUuY2FuY2VsKHByZXZpb3VzTGVhdmVBbmltYXRpb25zLnBvcCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gc2VsZWN0ZWRTY29wZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIHZhciBzZWxlY3RlZCA9IGdldEJsb2NrTm9kZXMoc2VsZWN0ZWRFbGVtZW50c1tpXS5jbG9uZSk7XG4gICAgICAgICAgc2VsZWN0ZWRTY29wZXNbaV0uJGRlc3Ryb3koKTtcbiAgICAgICAgICB2YXIgcnVubmVyID0gcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0gPSAkYW5pbWF0ZS5sZWF2ZShzZWxlY3RlZCk7XG4gICAgICAgICAgcnVubmVyLmRvbmUoc3BsaWNlRmFjdG9yeShwcmV2aW91c0xlYXZlQW5pbWF0aW9ucywgaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgICAgICBzZWxlY3RlZFNjb3Blcy5sZW5ndGggPSAwO1xuXG4gICAgICAgIGlmICgoc2VsZWN0ZWRUcmFuc2NsdWRlcyA9IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snIScgKyB2YWx1ZV0gfHwgbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWyc/J10pKSB7XG4gICAgICAgICAgZm9yRWFjaChzZWxlY3RlZFRyYW5zY2x1ZGVzLCBmdW5jdGlvbihzZWxlY3RlZFRyYW5zY2x1ZGUpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZS50cmFuc2NsdWRlKGZ1bmN0aW9uKGNhc2VFbGVtZW50LCBzZWxlY3RlZFNjb3BlKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkU2NvcGVzLnB1c2goc2VsZWN0ZWRTY29wZSk7XG4gICAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWxlY3RlZFRyYW5zY2x1ZGUuZWxlbWVudDtcbiAgICAgICAgICAgICAgY2FzZUVsZW1lbnRbY2FzZUVsZW1lbnQubGVuZ3RoKytdID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdTd2l0Y2hXaGVuJyk7XG4gICAgICAgICAgICAgIHZhciBibG9jayA9IHsgY2xvbmU6IGNhc2VFbGVtZW50IH07XG5cbiAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2FzZUVsZW1lbnQsIGFuY2hvci5wYXJlbnQoKSwgYW5jaG9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICBwcmlvcml0eTogMTIwMCxcbiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsXG4gIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuXG4gICAgdmFyIGNhc2VzID0gYXR0cnMubmdTd2l0Y2hXaGVuLnNwbGl0KGF0dHJzLm5nU3dpdGNoV2hlblNlcGFyYXRvcikuc29ydCgpLmZpbHRlcihcbiAgICAgIC8vIEZpbHRlciBkdXBsaWNhdGUgY2FzZXNcbiAgICAgIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4LCBhcnJheSkgeyByZXR1cm4gYXJyYXlbaW5kZXggLSAxXSAhPT0gZWxlbWVudDsgfVxuICAgICk7XG5cbiAgICBmb3JFYWNoKGNhc2VzLCBmdW5jdGlvbih3aGVuQ2FzZSkge1xuICAgICAgY3RybC5jYXNlc1snIScgKyB3aGVuQ2FzZV0gPSAoY3RybC5jYXNlc1snIScgKyB3aGVuQ2FzZV0gfHwgW10pO1xuICAgICAgY3RybC5jYXNlc1snIScgKyB3aGVuQ2FzZV0ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxudmFyIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICBwcmlvcml0eTogMTIwMCxcbiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsXG4gIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgY3RybC5jYXNlc1snPyddID0gKGN0cmwuY2FzZXNbJz8nXSB8fCBbXSk7XG4gICAgY3RybC5jYXNlc1snPyddLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTtcbiAgIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVHJhbnNjbHVkZVxuICogQHJlc3RyaWN0IEVBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgbWFya3MgdGhlIGluc2VydGlvbiBwb2ludCBmb3IgdGhlIHRyYW5zY2x1ZGVkIERPTSBvZiB0aGUgbmVhcmVzdCBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24uXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHRoYXQgeW91IHdhbnQgdG8gaW5zZXJ0IGEgbmFtZWQgdHJhbnNjbHVzaW9uIHNsb3QsIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgc2xvdCwgYnkgcHJvdmlkaW5nIHRoZSBzbG90IG5hbWVcbiAqIGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG5nLXRyYW5zY2x1ZGVgIG9yIGBuZy10cmFuc2NsdWRlLXNsb3RgIGF0dHJpYnV0ZS5cbiAqXG4gKiBJZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBub3QgZW1wdHkgKGkuZS4gY29udGFpbnMgb25lIG9yIG1vcmUgRE9NIG5vZGVzLCBpbmNsdWRpbmcgd2hpdGVzcGFjZSB0ZXh0IG5vZGVzKSwgYW55IGV4aXN0aW5nXG4gKiBjb250ZW50IG9mIHRoaXMgZWxlbWVudCB3aWxsIGJlIHJlbW92ZWQgYmVmb3JlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIGluc2VydGVkLlxuICogSWYgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgZW1wdHkgKG9yIG9ubHkgd2hpdGVzcGFjZSksIHRoZSBleGlzdGluZyBjb250ZW50IGlzIGxlZnQgaW50YWN0LiBUaGlzIGxldHMgeW91IHByb3ZpZGUgZmFsbGJhY2tcbiAqIGNvbnRlbnQgaW4gdGhlIGNhc2UgdGhhdCBubyB0cmFuc2NsdWRlZCBjb250ZW50IGlzIHByb3ZpZGVkLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ1RyYW5zY2x1ZGV8bmdUcmFuc2NsdWRlU2xvdCB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byBpbnNlcnQgYXQgdGhpcyBwb2ludC4gSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQsIGlzIGVtcHR5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgaXRzIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdGhlbiB0aGUgZGVmYXVsdCBzbG90IGlzIHVzZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBCYXNpYyB0cmFuc2NsdXNpb25cbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgYmFzaWMgdHJhbnNjbHVzaW9uIG9mIGNvbnRlbnQgaW50byBhIGNvbXBvbmVudCBkaXJlY3RpdmUuXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2ltcGxlVHJhbnNjbHVkZUV4YW1wbGVcIiBtb2R1bGU9XCJ0cmFuc2NsdWRlRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZUV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAuZGlyZWN0aXZlKCdwYW5lJywgZnVuY3Rpb24oKXtcbiAqICAgICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAqICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gKiAgICAgICAgICAgICBzY29wZTogeyB0aXRsZTonQCcgfSxcbiAqICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBzdHlsZT1cImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1wiPicgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5XCI+e3t0aXRsZX19PC9kaXY+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAnPG5nLXRyYW5zY2x1ZGU+PC9uZy10cmFuc2NsdWRlPicgK1xuICogICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nXG4gKiAgICAgICAgICAgfTtcbiAqICAgICAgIH0pXG4gKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAkc2NvcGUudGl0bGUgPSAnTG9yZW0gSXBzdW0nO1xuICogICAgICAgICAkc2NvcGUudGV4dCA9ICdOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvci4uLic7XG4gKiAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInRpdGxlXCIgYXJpYS1sYWJlbD1cInRpdGxlXCI+IDxici8+XG4gKiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ0ZXh0XCIgYXJpYS1sYWJlbD1cInRleHRcIj48L3RleHRhcmVhPiA8YnIvPlxuICogICAgICAgPHBhbmUgdGl0bGU9XCJ7e3RpdGxlfX1cIj48c3Bhbj57e3RleHR9fTwvc3Bhbj48L3BhbmU+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgICBpdCgnc2hvdWxkIGhhdmUgdHJhbnNjbHVkZWQnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgICB2YXIgdGl0bGVFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGl0bGUnKSk7XG4gKiAgICAgICAgdGl0bGVFbGVtZW50LmNsZWFyKCk7XG4gKiAgICAgICAgdGl0bGVFbGVtZW50LnNlbmRLZXlzKCdUSVRMRScpO1xuICogICAgICAgIHZhciB0ZXh0RWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7XG4gKiAgICAgICAgdGV4dEVsZW1lbnQuY2xlYXIoKTtcbiAqICAgICAgICB0ZXh0RWxlbWVudC5zZW5kS2V5cygnVEVYVCcpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RpdGxlJykpLmdldFRleHQoKSkudG9FcXVhbCgnVElUTEUnKTtcbiAqICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpLmdldFRleHQoKSkudG9FcXVhbCgnVEVYVCcpO1xuICogICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgVHJhbnNjbHVkZSBmYWxsYmFjayBjb250ZW50XG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgTmdUcmFuc2NsdWRlYCB3aXRoIGZhbGxiYWNrIGNvbnRlbnQsIHRoYXRcbiAqIGlzIGRpc3BsYXllZCBpZiBubyB0cmFuc2NsdWRlZCBjb250ZW50IGlzIHByb3ZpZGVkLlxuICpcbiAqIDxleGFtcGxlIG1vZHVsZT1cInRyYW5zY2x1ZGVGYWxsYmFja0NvbnRlbnRFeGFtcGxlXCIgbmFtZT1cIm5nLXRyYW5zY2x1ZGVcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8c2NyaXB0PlxuICogYW5ndWxhci5tb2R1bGUoJ3RyYW5zY2x1ZGVGYWxsYmFja0NvbnRlbnRFeGFtcGxlJywgW10pXG4gKiAuZGlyZWN0aXZlKCdteUJ1dHRvbicsIGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICogICAgICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICogICAgICAgICAgICAgICBzY29wZTogdHJ1ZSxcbiAqICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8YnV0dG9uIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPicgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAnPG5nLXRyYW5zY2x1ZGU+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxiIHN0eWxlPVwiY29sb3I6IHJlZDtcIj5CdXR0b24xPC9iPicgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9uZy10cmFuc2NsdWRlPicgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAqICAgICAgICAgICAgIH07XG4gKiAgICAgICAgIH0pO1xuICogPC9zY3JpcHQ+XG4gKiA8IS0tIGZhbGxiYWNrIGJ1dHRvbiBjb250ZW50IC0tPlxuICogPG15LWJ1dHRvbiBpZD1cImZhbGxiYWNrXCI+PC9teS1idXR0b24+XG4gKiA8IS0tIG1vZGlmaWVkIGJ1dHRvbiBjb250ZW50IC0tPlxuICogPG15LWJ1dHRvbiBpZD1cIm1vZGlmaWVkXCI+XG4gKiAgIDxpIHN0eWxlPVwiY29sb3I6IGdyZWVuO1wiPkJ1dHRvbjI8L2k+XG4gKiA8L215LWJ1dHRvbj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqIGl0KCdzaG91bGQgaGF2ZSBkaWZmZXJlbnQgdHJhbnNjbHVkZSBlbGVtZW50IGNvbnRlbnQnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdmYWxsYmFjaycpKS5nZXRUZXh0KCkpLnRvQmUoJ0J1dHRvbjEnKTtcbiAqICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdtb2RpZmllZCcpKS5nZXRUZXh0KCkpLnRvQmUoJ0J1dHRvbjInKTtcbiAqICAgICAgICB9KTtcbiAqIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIE11bHRpLXNsb3QgdHJhbnNjbHVzaW9uXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHVzaW5nIG11bHRpLXNsb3QgdHJhbnNjbHVzaW9uIGluIGEgY29tcG9uZW50IGRpcmVjdGl2ZS5cbiAqIDxleGFtcGxlIG5hbWU9XCJtdWx0aVNsb3RUcmFuc2NsdWRlRXhhbXBsZVwiIG1vZHVsZT1cIm11bHRpU2xvdFRyYW5zY2x1ZGVFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8c3R5bGU+XG4gKiAgICAgIC50aXRsZSwgLmZvb3RlciB7XG4gKiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZ3JheVxuICogICAgICB9XG4gKiAgICA8L3N0eWxlPlxuICogICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgPGlucHV0IG5nLW1vZGVsPVwidGl0bGVcIiBhcmlhLWxhYmVsPVwidGl0bGVcIj4gPGJyLz5cbiAqICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidGV4dFwiIGFyaWEtbGFiZWw9XCJ0ZXh0XCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAqICAgICAgPHBhbmU+XG4gKiAgICAgICAgPHBhbmUtdGl0bGU+PGEgbmctaHJlZj1cInt7bGlua319XCI+e3t0aXRsZX19PC9hPjwvcGFuZS10aXRsZT5cbiAqICAgICAgICA8cGFuZS1ib2R5PjxwPnt7dGV4dH19PC9wPjwvcGFuZS1ib2R5PlxuICogICAgICA8L3BhbmU+XG4gKiAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICBhbmd1bGFyLm1vZHVsZSgnbXVsdGlTbG90VHJhbnNjbHVkZUV4YW1wbGUnLCBbXSlcbiAqICAgICAuZGlyZWN0aXZlKCdwYW5lJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gKiAgICAgICAgICB0cmFuc2NsdWRlOiB7XG4gKiAgICAgICAgICAgICd0aXRsZSc6ICc/cGFuZVRpdGxlJyxcbiAqICAgICAgICAgICAgJ2JvZHknOiAncGFuZUJvZHknLFxuICogICAgICAgICAgICAnZm9vdGVyJzogJz9wYW5lRm9vdGVyJ1xuICogICAgICAgICAgfSxcbiAqICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBzdHlsZT1cImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1wiPicgK1xuICogICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0aXRsZVwiIG5nLXRyYW5zY2x1ZGU9XCJ0aXRsZVwiPkZhbGxiYWNrIFRpdGxlPC9kaXY+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBuZy10cmFuc2NsdWRlPVwiYm9keVwiPjwvZGl2PicgK1xuICogICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmb290ZXJcIiBuZy10cmFuc2NsdWRlPVwiZm9vdGVyXCI+RmFsbGJhY2sgRm9vdGVyPC9kaXY+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAqICAgICAgICB9O1xuICogICAgfSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gKiAgICAgICRzY29wZS5saW5rID0gJ2h0dHBzOi8vZ29vZ2xlLmNvbSc7XG4gKiAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJztcbiAqICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCB0aGUgdGl0bGUgYW5kIHRoZSBib2R5JywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RpdGxlJykpO1xuICogICAgICAgIHRpdGxlRWxlbWVudC5jbGVhcigpO1xuICogICAgICAgIHRpdGxlRWxlbWVudC5zZW5kS2V5cygnVElUTEUnKTtcbiAqICAgICAgICB2YXIgdGV4dEVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpO1xuICogICAgICAgIHRleHRFbGVtZW50LmNsZWFyKCk7XG4gKiAgICAgICAgdGV4dEVsZW1lbnQuc2VuZEtleXMoJ1RFWFQnKTtcbiAqICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy50aXRsZScpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RJVExFJyk7XG4gKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RFWFQnKTtcbiAqICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5mb290ZXInKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdGYWxsYmFjayBGb290ZXInKTtcbiAqICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nVHJhbnNjbHVkZU1pbkVyciA9IG1pbkVycignbmdUcmFuc2NsdWRlJyk7XG52YXIgbmdUcmFuc2NsdWRlRGlyZWN0aXZlID0gWyckY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQUMnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nVHJhbnNjbHVkZUNvbXBpbGUodEVsZW1lbnQpIHtcblxuICAgICAgLy8gUmVtb3ZlIGFuZCBjYWNoZSBhbnkgb3JpZ2luYWwgY29udGVudCB0byBhY3QgYXMgYSBmYWxsYmFja1xuICAgICAgdmFyIGZhbGxiYWNrTGlua0ZuID0gJGNvbXBpbGUodEVsZW1lbnQuY29udGVudHMoKSk7XG4gICAgICB0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdUcmFuc2NsdWRlUG9zdExpbmsoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBjb250cm9sbGVyLCAkdHJhbnNjbHVkZSkge1xuXG4gICAgICAgIGlmICghJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgICB0aHJvdyBuZ1RyYW5zY2x1ZGVNaW5FcnIoJ29ycGhhbicsXG4gICAgICAgICAgJ0lsbGVnYWwgdXNlIG9mIG5nVHJhbnNjbHVkZSBkaXJlY3RpdmUgaW4gdGhlIHRlbXBsYXRlISAnICtcbiAgICAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIGZvdW5kLiAnICtcbiAgICAgICAgICAnRWxlbWVudDogezB9JyxcbiAgICAgICAgICBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIGlzIG9mIHRoZSBmb3JtOiBgbmctdHJhbnNjbHVkZT1cIm5nLXRyYW5zY2x1ZGVcImAgdGhlbiB0cmVhdCBpdCBsaWtlIHRoZSBkZWZhdWx0XG4gICAgICAgIGlmICgkYXR0cnMubmdUcmFuc2NsdWRlID09PSAkYXR0cnMuJGF0dHIubmdUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgJGF0dHJzLm5nVHJhbnNjbHVkZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzbG90TmFtZSA9ICRhdHRycy5uZ1RyYW5zY2x1ZGUgfHwgJGF0dHJzLm5nVHJhbnNjbHVkZVNsb3Q7XG5cbiAgICAgICAgLy8gSWYgdGhlIHNsb3QgaXMgcmVxdWlyZWQgYW5kIG5vIHRyYW5zY2x1c2lvbiBjb250ZW50IGlzIHByb3ZpZGVkIHRoZW4gdGhpcyBjYWxsIHdpbGwgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgJHRyYW5zY2x1ZGUobmdUcmFuc2NsdWRlQ2xvbmVBdHRhY2hGbiwgbnVsbCwgc2xvdE5hbWUpO1xuXG4gICAgICAgIC8vIElmIHRoZSBzbG90IGlzIG9wdGlvbmFsIGFuZCBubyB0cmFuc2NsdXNpb24gY29udGVudCBpcyBwcm92aWRlZCB0aGVuIHVzZSB0aGUgZmFsbGJhY2sgY29udGVudFxuICAgICAgICBpZiAoc2xvdE5hbWUgJiYgISR0cmFuc2NsdWRlLmlzU2xvdEZpbGxlZChzbG90TmFtZSkpIHtcbiAgICAgICAgICB1c2VGYWxsYmFja0NvbnRlbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nVHJhbnNjbHVkZUNsb25lQXR0YWNoRm4oY2xvbmUsIHRyYW5zY2x1ZGVkU2NvcGUpIHtcbiAgICAgICAgICBpZiAoY2xvbmUubGVuZ3RoICYmIG5vdFdoaXRlc3BhY2UoY2xvbmUpKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1c2VGYWxsYmFja0NvbnRlbnQoKTtcbiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vdGhpbmcgbGlua2VkIGFnYWluc3QgdGhlIHRyYW5zY2x1ZGVkIHNjb3BlIHNpbmNlIG5vIGNvbnRlbnQgd2FzIGF2YWlsYWJsZSxcbiAgICAgICAgICAgIC8vIHNvIGl0IHNob3VsZCBiZSBzYWZlIHRvIGNsZWFuIHVwIHRoZSBnZW5lcmF0ZWQgc2NvcGUuXG4gICAgICAgICAgICB0cmFuc2NsdWRlZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXNlRmFsbGJhY2tDb250ZW50KCkge1xuICAgICAgICAgIC8vIFNpbmNlIHRoaXMgaXMgdGhlIGZhbGxiYWNrIGNvbnRlbnQgcmF0aGVyIHRoYW4gdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQsXG4gICAgICAgICAgLy8gd2UgbGluayBhZ2FpbnN0IHRoZSBzY29wZSBvZiB0aGlzIGRpcmVjdGl2ZSByYXRoZXIgdGhhbiB0aGUgdHJhbnNjbHVkZWQgc2NvcGVcbiAgICAgICAgICBmYWxsYmFja0xpbmtGbigkc2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbm90V2hpdGVzcGFjZShub2Rlcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX1RFWFQgfHwgbm9kZS5ub2RlVmFsdWUudHJpbSgpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBzY3JpcHRcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBMb2FkIHRoZSBjb250ZW50IG9mIGEgYDxzY3JpcHQ+YCBlbGVtZW50IGludG8ge0BsaW5rIG5nLiR0ZW1wbGF0ZUNhY2hlIGAkdGVtcGxhdGVDYWNoZWB9LCBzbyB0aGF0IHRoZVxuICogdGVtcGxhdGUgY2FuIGJlIHVzZWQgYnkge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nSW5jbHVkZWB9LFxuICoge0BsaW5rIG5nUm91dGUuZGlyZWN0aXZlOm5nVmlldyBgbmdWaWV3YH0sIG9yIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlc30uIFRoZSB0eXBlIG9mIHRoZVxuICogYDxzY3JpcHQ+YCBlbGVtZW50IG11c3QgYmUgc3BlY2lmaWVkIGFzIGB0ZXh0L25nLXRlbXBsYXRlYCwgYW5kIGEgY2FjaGUgbmFtZSBmb3IgdGhlIHRlbXBsYXRlIG11c3QgYmVcbiAqIGFzc2lnbmVkIHRocm91Z2ggdGhlIGVsZW1lbnQncyBgaWRgLCB3aGljaCBjYW4gdGhlbiBiZSB1c2VkIGFzIGEgZGlyZWN0aXZlJ3MgYHRlbXBsYXRlVXJsYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBNdXN0IGJlIHNldCB0byBgJ3RleHQvbmctdGVtcGxhdGUnYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDYWNoZSBuYW1lIG9mIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSAgbmFtZT1cInNjcmlwdC10YWdcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwiL3RwbC5odG1sXCI+XG4gICAgICAgIENvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLlxuICAgICAgPC9zY3JpcHQ+XG5cbiAgICAgIDxhIG5nLWNsaWNrPVwiY3VycmVudFRwbD0nL3RwbC5odG1sJ1wiIGlkPVwidHBsLWxpbmtcIj5Mb2FkIGlubGluZWQgdGVtcGxhdGU8L2E+XG4gICAgICA8ZGl2IGlkPVwidHBsLWNvbnRlbnRcIiBuZy1pbmNsdWRlIHNyYz1cImN1cnJlbnRUcGxcIj48L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlIGRlZmluZWQgaW5zaWRlIHNjcmlwdCB0YWcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudChieS5jc3MoJyN0cGwtbGluaycpKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJyN0cGwtY29udGVudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIHNjcmlwdERpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgaWYgKGF0dHIudHlwZSA9PT0gJ3RleHQvbmctdGVtcGxhdGUnKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZVVybCA9IGF0dHIuaWQsXG4gICAgICAgICAgICB0ZXh0ID0gZWxlbWVudFswXS50ZXh0O1xuXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZVVybCwgdGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbi8qIGV4cG9ydGVkIHNlbGVjdERpcmVjdGl2ZSwgb3B0aW9uRGlyZWN0aXZlICovXG5cbnZhciBub29wTmdNb2RlbENvbnRyb2xsZXIgPSB7ICRzZXRWaWV3VmFsdWU6IG5vb3AsICRyZW5kZXI6IG5vb3AgfTtcblxuZnVuY3Rpb24gc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMob3B0aW9uRWwsIHZhbHVlKSB7XG4gIG9wdGlvbkVsLnByb3AoJ3NlbGVjdGVkJywgdmFsdWUpOyAvLyBuZWVkZWQgZm9yIElFXG4gIC8qKlxuICAgKiBXaGVuIHVuc2VsZWN0aW5nIGFuIG9wdGlvbiwgc2V0dGluZyB0aGUgcHJvcGVydHkgdG8gbnVsbCAvIGZhbHNlIHNob3VsZCBiZSBlbm91Z2hcbiAgICogSG93ZXZlciwgc2NyZWVucmVhZGVycyBtaWdodCByZWFjdCB0byB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlIGluc3RlYWQsIHNlZVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xNDQxOVxuICAgKiBOb3RlOiBcInNlbGVjdGVkXCIgaXMgYSBib29sZWFuIGF0dHIgYW5kIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIHRoZSBcInZhbHVlXCIgYXJnIGluIGF0dHIoKSBpcyBmYWxzZVxuICAgKiBvciBudWxsXG4gICAqL1xuICBvcHRpb25FbC5hdHRyKCdzZWxlY3RlZCcsIHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBjb250cm9sbGVyIGZvciB0aGUgYDxzZWxlY3Q+YCBkaXJlY3RpdmUuIFRoaXMgcHJvdmlkZXMgc3VwcG9ydCBmb3IgcmVhZGluZ1xuICogYW5kIHdyaXRpbmcgdGhlIHNlbGVjdGVkIHZhbHVlKHMpIG9mIHRoZSBjb250cm9sIGFuZCBhbHNvIGNvb3JkaW5hdGVzIGR5bmFtaWNhbGx5XG4gKiBhZGRlZCBgPG9wdGlvbj5gIGVsZW1lbnRzLCBwZXJoYXBzIGJ5IGFuIGBuZ1JlcGVhdGAgZGlyZWN0aXZlLlxuICovXG52YXIgU2VsZWN0Q29udHJvbGxlciA9XG4gICAgICAgIFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKCRlbGVtZW50LCAkc2NvcGUpIHtcblxuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBvcHRpb25zTWFwID0gbmV3IE5nTWFwKCk7XG5cbiAgc2VsZi5zZWxlY3RWYWx1ZU1hcCA9IHt9OyAvLyBLZXlzIGFyZSB0aGUgaGFzaGVkIHZhbHVlcywgdmFsdWVzIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblxuICAvLyBJZiB0aGUgbmdNb2RlbCBkb2Vzbid0IGdldCBwcm92aWRlZCB0aGVuIHByb3ZpZGUgYSBkdW1teSBub29wIHZlcnNpb24gdG8gcHJldmVudCBlcnJvcnNcbiAgc2VsZi5uZ01vZGVsQ3RybCA9IG5vb3BOZ01vZGVsQ29udHJvbGxlcjtcbiAgc2VsZi5tdWx0aXBsZSA9IGZhbHNlO1xuXG4gIC8vIFRoZSBcInVua25vd25cIiBvcHRpb24gaXMgb25lIHRoYXQgaXMgcHJlcGVuZGVkIHRvIHRoZSBsaXN0IGlmIHRoZSB2aWV3VmFsdWVcbiAgLy8gZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zLiBXaGVuIGl0IGlzIHJlbmRlcmVkIHRoZSB2YWx1ZSBvZiB0aGUgdW5rbm93blxuICAvLyBvcHRpb24gaXMgJz8gWFhYID8nIHdoZXJlIFhYWCBpcyB0aGUgaGFzaEtleSBvZiB0aGUgdmFsdWUgdGhhdCBpcyBub3Qga25vd24uXG4gIC8vXG4gIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICBzZWxmLnVua25vd25PcHRpb24gPSBqcUxpdGUod2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKTtcblxuICAvLyBUaGUgZW1wdHkgb3B0aW9uIGlzIGFuIG9wdGlvbiB3aXRoIHRoZSB2YWx1ZSAnJyB0aGF0IHRlIGFwcGxpY2F0aW9uIGRldmVsb3BlciBjYW5cbiAgLy8gcHJvdmlkZSBpbnNpZGUgdGhlIHNlbGVjdC4gV2hlbiB0aGUgbW9kZWwgY2hhbmdlcyB0byBhIHZhbHVlIHRoYXQgZG9lc24ndCBtYXRjaCBhbiBvcHRpb24sXG4gIC8vIGl0IGlzIHNlbGVjdGVkIC0gc28gaWYgYW4gZW1wdHkgb3B0aW9uIGlzIHByb3ZpZGVkLCBubyB1bmtub3duIG9wdGlvbiBpcyBnZW5lcmF0ZWQuXG4gIC8vIEhvd2V2ZXIsIHRoZSBlbXB0eSBvcHRpb24gaXMgbm90IHJlbW92ZWQgd2hlbiB0aGUgbW9kZWwgbWF0Y2hlcyBhbiBvcHRpb24uIEl0IGlzIGFsd2F5cyBzZWxlY3RhYmxlXG4gIC8vIGFuZCBpbmRpY2F0ZXMgdGhhdCBhIFwibnVsbFwiIHNlbGVjdGlvbiBoYXMgYmVlbiBtYWRlLlxuICBzZWxmLmhhc0VtcHR5T3B0aW9uID0gZmFsc2U7XG4gIHNlbGYuZW1wdHlPcHRpb24gPSB1bmRlZmluZWQ7XG5cbiAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIHVua25vd25WYWwgPSBzZWxmLmdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlKHZhbCk7XG4gICAgc2VsZi51bmtub3duT3B0aW9uLnZhbCh1bmtub3duVmFsKTtcbiAgICAkZWxlbWVudC5wcmVwZW5kKHNlbGYudW5rbm93bk9wdGlvbik7XG4gICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi51bmtub3duT3B0aW9uLCB0cnVlKTtcbiAgICAkZWxlbWVudC52YWwodW5rbm93blZhbCk7XG4gIH07XG5cbiAgc2VsZi51cGRhdGVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIHVua25vd25WYWwgPSBzZWxmLmdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlKHZhbCk7XG4gICAgc2VsZi51bmtub3duT3B0aW9uLnZhbCh1bmtub3duVmFsKTtcbiAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhzZWxmLnVua25vd25PcHRpb24sIHRydWUpO1xuICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTtcbiAgfTtcblxuICBzZWxmLmdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgcmV0dXJuICc/ICcgKyBoYXNoS2V5KHZhbCkgKyAnID8nO1xuICB9O1xuXG4gIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLnVua25vd25PcHRpb24ucGFyZW50KCkpIHNlbGYudW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcbiAgfTtcblxuICBzZWxmLnNlbGVjdEVtcHR5T3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYuZW1wdHlPcHRpb24pIHtcbiAgICAgICRlbGVtZW50LnZhbCgnJyk7XG4gICAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhzZWxmLmVtcHR5T3B0aW9uLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgc2VsZi51bnNlbGVjdEVtcHR5T3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYuaGFzRW1wdHlPcHRpb24pIHtcbiAgICAgIHNlbGYuZW1wdHlPcHRpb24ucmVtb3ZlQXR0cignc2VsZWN0ZWQnKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAvLyBkaXNhYmxlIHVua25vd24gb3B0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgZG8gd29yayB3aGVuIHRoZSB3aG9sZSBzZWxlY3QgaXMgYmVpbmcgZGVzdHJveWVkXG4gICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gbm9vcDtcbiAgfSk7XG5cbiAgLy8gUmVhZCB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdCBjb250cm9sLCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBjaGFuZ2VzIGRlcGVuZGluZ1xuICAvLyB1cG9uIHdoZXRoZXIgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSB2YWx1ZXMgYW5kIHdoZXRoZXIgbmdPcHRpb25zIGlzIGF0IHdvcmsuXG4gIHNlbGYucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZFNpbmdsZVZhbHVlKCkge1xuICAgIHZhciB2YWwgPSAkZWxlbWVudC52YWwoKTtcbiAgICAvLyBuZ1ZhbHVlIGFkZGVkIG9wdGlvbiB2YWx1ZXMgYXJlIHN0b3JlZCBpbiB0aGUgc2VsZWN0VmFsdWVNYXAsIG5vcm1hbCBpbnRlcnBvbGF0aW9ucyBhcmUgbm90XG4gICAgdmFyIHJlYWxWYWwgPSB2YWwgaW4gc2VsZi5zZWxlY3RWYWx1ZU1hcCA/IHNlbGYuc2VsZWN0VmFsdWVNYXBbdmFsXSA6IHZhbDtcblxuICAgIGlmIChzZWxmLmhhc09wdGlvbihyZWFsVmFsKSkge1xuICAgICAgcmV0dXJuIHJlYWxWYWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cblxuICAvLyBXcml0ZSB0aGUgdmFsdWUgdG8gdGhlIHNlbGVjdCBjb250cm9sLCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBjaGFuZ2VzIGRlcGVuZGluZ1xuICAvLyB1cG9uIHdoZXRoZXIgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSB2YWx1ZXMgYW5kIHdoZXRoZXIgbmdPcHRpb25zIGlzIGF0IHdvcmsuXG4gIHNlbGYud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlU2luZ2xlVmFsdWUodmFsdWUpIHtcbiAgICAvLyBNYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSBzZWxlY3RlZCBhdHRyaWJ1dGUgZnJvbSB0aGUgcHJldmlvdXNseSBzZWxlY3RlZCBvcHRpb25cbiAgICAvLyBPdGhlcndpc2UsIHNjcmVlbiByZWFkZXJzIG1pZ2h0IGdldCBjb25mdXNlZFxuICAgIHZhciBjdXJyZW50bHlTZWxlY3RlZE9wdGlvbiA9ICRlbGVtZW50WzBdLm9wdGlvbnNbJGVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF07XG4gICAgaWYgKGN1cnJlbnRseVNlbGVjdGVkT3B0aW9uKSBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhqcUxpdGUoY3VycmVudGx5U2VsZWN0ZWRPcHRpb24pLCBmYWxzZSk7XG5cbiAgICBpZiAoc2VsZi5oYXNPcHRpb24odmFsdWUpKSB7XG4gICAgICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24oKTtcblxuICAgICAgdmFyIGhhc2hlZFZhbCA9IGhhc2hLZXkodmFsdWUpO1xuICAgICAgJGVsZW1lbnQudmFsKGhhc2hlZFZhbCBpbiBzZWxmLnNlbGVjdFZhbHVlTWFwID8gaGFzaGVkVmFsIDogdmFsdWUpO1xuXG4gICAgICAvLyBTZXQgc2VsZWN0ZWQgYXR0cmlidXRlIGFuZCBwcm9wZXJ0eSBvbiBzZWxlY3RlZCBvcHRpb24gZm9yIHNjcmVlbiByZWFkZXJzXG4gICAgICB2YXIgc2VsZWN0ZWRPcHRpb24gPSAkZWxlbWVudFswXS5vcHRpb25zWyRlbGVtZW50WzBdLnNlbGVjdGVkSW5kZXhdO1xuICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoanFMaXRlKHNlbGVjdGVkT3B0aW9uKSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHNlbGYuZW1wdHlPcHRpb24pIHtcbiAgICAgICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgIHNlbGYuc2VsZWN0RW1wdHlPcHRpb24oKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi51bmtub3duT3B0aW9uLnBhcmVudCgpLmxlbmd0aCkge1xuICAgICAgICBzZWxmLnVwZGF0ZVVua25vd25PcHRpb24odmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxuICAvLyBUZWxsIHRoZSBzZWxlY3QgY29udHJvbCB0aGF0IGFuIG9wdGlvbiwgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUsIGhhcyBiZWVuIGFkZGVkXG4gIHNlbGYuYWRkT3B0aW9uID0gZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAvLyBTa2lwIGNvbW1lbnQgbm9kZXMsIGFzIHRoZXkgb25seSBwb2xsdXRlIHRoZSBgb3B0aW9uc01hcGBcbiAgICBpZiAoZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHJldHVybjtcblxuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KHZhbHVlLCAnXCJvcHRpb24gdmFsdWVcIicpO1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHNlbGYuaGFzRW1wdHlPcHRpb24gPSB0cnVlO1xuICAgICAgc2VsZi5lbXB0eU9wdGlvbiA9IGVsZW1lbnQ7XG4gICAgfVxuICAgIHZhciBjb3VudCA9IG9wdGlvbnNNYXAuZ2V0KHZhbHVlKSB8fCAwO1xuICAgIG9wdGlvbnNNYXAuc2V0KHZhbHVlLCBjb3VudCArIDEpO1xuICAgIC8vIE9ubHkgcmVuZGVyIGF0IHRoZSBlbmQgb2YgYSBkaWdlc3QuIFRoaXMgaW1wcm92ZXMgcmVuZGVyIHBlcmZvcm1hbmNlIHdoZW4gbWFueSBvcHRpb25zXG4gICAgLy8gYXJlIGFkZGVkIGR1cmluZyBhIGRpZ2VzdCBhbmQgZW5zdXJlcyBhbGwgcmVsZXZhbnQgb3B0aW9ucyBhcmUgY29ycmVjdGx5IG1hcmtlZCBhcyBzZWxlY3RlZFxuICAgIHNjaGVkdWxlUmVuZGVyKCk7XG4gIH07XG5cbiAgLy8gVGVsbCB0aGUgc2VsZWN0IGNvbnRyb2wgdGhhdCBhbiBvcHRpb24sIHdpdGggdGhlIGdpdmVuIHZhbHVlLCBoYXMgYmVlbiByZW1vdmVkXG4gIHNlbGYucmVtb3ZlT3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgY291bnQgPSBvcHRpb25zTWFwLmdldCh2YWx1ZSk7XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgb3B0aW9uc01hcC5kZWxldGUodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgc2VsZi5oYXNFbXB0eU9wdGlvbiA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYuZW1wdHlPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnNNYXAuc2V0KHZhbHVlLCBjb3VudCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBDaGVjayB3aGV0aGVyIHRoZSBzZWxlY3QgY29udHJvbCBoYXMgYW4gb3B0aW9uIG1hdGNoaW5nIHRoZSBnaXZlbiB2YWx1ZVxuICBzZWxmLmhhc09wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICB9O1xuXG5cbiAgdmFyIHJlbmRlclNjaGVkdWxlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBzY2hlZHVsZVJlbmRlcigpIHtcbiAgICBpZiAocmVuZGVyU2NoZWR1bGVkKSByZXR1cm47XG4gICAgcmVuZGVyU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAkc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgcmVuZGVyU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICBzZWxmLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciB1cGRhdGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUocmVuZGVyQWZ0ZXIpIHtcbiAgICBpZiAodXBkYXRlU2NoZWR1bGVkKSByZXR1cm47XG5cbiAgICB1cGRhdGVTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgIGlmICgkc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgdXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICBzZWxmLm5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZi5yZWFkVmFsdWUoKSk7XG4gICAgICBpZiAocmVuZGVyQWZ0ZXIpIHNlbGYubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgIH0pO1xuICB9XG5cblxuICBzZWxmLnJlZ2lzdGVyT3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uU2NvcGUsIG9wdGlvbkVsZW1lbnQsIG9wdGlvbkF0dHJzLCBpbnRlcnBvbGF0ZVZhbHVlRm4sIGludGVycG9sYXRlVGV4dEZuKSB7XG5cbiAgICBpZiAob3B0aW9uQXR0cnMuJGF0dHIubmdWYWx1ZSkge1xuICAgICAgLy8gVGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBzZXQgYnkgbmdWYWx1ZVxuICAgICAgdmFyIG9sZFZhbCwgaGFzaGVkVmFsID0gTmFOO1xuICAgICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ3ZhbHVlJywgZnVuY3Rpb24gdmFsdWVBdHRyaWJ1dGVPYnNlcnZlQWN0aW9uKG5ld1ZhbCkge1xuXG4gICAgICAgIHZhciByZW1vdmFsO1xuICAgICAgICB2YXIgcHJldmlvdXNseVNlbGVjdGVkID0gb3B0aW9uRWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQoaGFzaGVkVmFsKSkge1xuICAgICAgICAgIHNlbGYucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgICAgZGVsZXRlIHNlbGYuc2VsZWN0VmFsdWVNYXBbaGFzaGVkVmFsXTtcbiAgICAgICAgICByZW1vdmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhc2hlZFZhbCA9IGhhc2hLZXkobmV3VmFsKTtcbiAgICAgICAgb2xkVmFsID0gbmV3VmFsO1xuICAgICAgICBzZWxmLnNlbGVjdFZhbHVlTWFwW2hhc2hlZFZhbF0gPSBuZXdWYWw7XG4gICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG4gICAgICAgIC8vIFNldCB0aGUgYXR0cmlidXRlIGRpcmVjdGx5IGluc3RlYWQgb2YgdXNpbmcgb3B0aW9uQXR0cnMuJHNldCAtIHRoaXMgc3RvcHMgdGhlIG9ic2VydmVyXG4gICAgICAgIC8vIGZyb20gZmlyaW5nIGEgc2Vjb25kIHRpbWUuIE90aGVyICRvYnNlcnZlcnMgb24gdmFsdWUgd2lsbCBhbHNvIGdldCB0aGUgcmVzdWx0IG9mIHRoZVxuICAgICAgICAvLyBuZ1ZhbHVlIGV4cHJlc3Npb24sIG5vdCB0aGUgaGFzaGVkIHZhbHVlXG4gICAgICAgIG9wdGlvbkVsZW1lbnQuYXR0cigndmFsdWUnLCBoYXNoZWRWYWwpO1xuXG4gICAgICAgIGlmIChyZW1vdmFsICYmIHByZXZpb3VzbHlTZWxlY3RlZCkge1xuICAgICAgICAgIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZVZhbHVlRm4pIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgaW50ZXJwb2xhdGVkXG4gICAgICBvcHRpb25BdHRycy4kb2JzZXJ2ZSgndmFsdWUnLCBmdW5jdGlvbiB2YWx1ZUF0dHJpYnV0ZU9ic2VydmVBY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIC8vIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIGluIG5nT3B0aW9ucyBhbmQgaGFzIHNpZGUtZWZmZWN0cyFcbiAgICAgICAgc2VsZi5yZWFkVmFsdWUoKTtcblxuICAgICAgICB2YXIgcmVtb3ZhbDtcbiAgICAgICAgdmFyIHByZXZpb3VzbHlTZWxlY3RlZCA9IG9wdGlvbkVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnKTtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKG9sZFZhbCkpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICAgIHJlbW92YWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIG9sZFZhbCA9IG5ld1ZhbDtcbiAgICAgICAgc2VsZi5hZGRPcHRpb24obmV3VmFsLCBvcHRpb25FbGVtZW50KTtcblxuICAgICAgICBpZiAocmVtb3ZhbCAmJiBwcmV2aW91c2x5U2VsZWN0ZWQpIHtcbiAgICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlVGV4dEZuKSB7XG4gICAgICAvLyBUaGUgdGV4dCBjb250ZW50IGlzIGludGVycG9sYXRlZFxuICAgICAgb3B0aW9uU2NvcGUuJHdhdGNoKGludGVycG9sYXRlVGV4dEZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZVdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgIG9wdGlvbkF0dHJzLiRzZXQoJ3ZhbHVlJywgbmV3VmFsKTtcbiAgICAgICAgdmFyIHByZXZpb3VzbHlTZWxlY3RlZCA9IG9wdGlvbkVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgc2VsZi5yZW1vdmVPcHRpb24ob2xkVmFsKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmFkZE9wdGlvbihuZXdWYWwsIG9wdGlvbkVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChvbGRWYWwgJiYgcHJldmlvdXNseVNlbGVjdGVkKSB7XG4gICAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgc3RhdGljXG4gICAgICBzZWxmLmFkZE9wdGlvbihvcHRpb25BdHRycy52YWx1ZSwgb3B0aW9uRWxlbWVudCk7XG4gICAgfVxuXG5cbiAgICBvcHRpb25BdHRycy4kb2JzZXJ2ZSgnZGlzYWJsZWQnLCBmdW5jdGlvbihuZXdWYWwpIHtcblxuICAgICAgLy8gU2luY2UgbW9kZWwgdXBkYXRlcyB3aWxsIGFsc28gc2VsZWN0IGRpc2FibGVkIG9wdGlvbnMgKGxpa2UgbmdPcHRpb25zKSxcbiAgICAgIC8vIHdlIG9ubHkgaGF2ZSB0byBoYW5kbGUgb3B0aW9ucyBiZWNvbWluZyBkaXNhYmxlZCwgbm90IGVuYWJsZWRcblxuICAgICAgaWYgKG5ld1ZhbCA9PT0gJ3RydWUnIHx8IG5ld1ZhbCAmJiBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgaWYgKHNlbGYubXVsdGlwbGUpIHtcbiAgICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLm5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUobnVsbCk7XG4gICAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG9wdGlvbkVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VycmVudFZhbHVlID0gc2VsZi5yZWFkVmFsdWUoKTtcbiAgICAgIHZhciByZW1vdmVWYWx1ZSA9IG9wdGlvbkF0dHJzLnZhbHVlO1xuXG4gICAgICBzZWxmLnJlbW92ZU9wdGlvbihyZW1vdmVWYWx1ZSk7XG4gICAgICBzY2hlZHVsZVJlbmRlcigpO1xuXG4gICAgICBpZiAoc2VsZi5tdWx0aXBsZSAmJiBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmluZGV4T2YocmVtb3ZlVmFsdWUpICE9PSAtMSB8fFxuICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9PT0gcmVtb3ZlVmFsdWVcbiAgICAgICkge1xuICAgICAgICAvLyBXaGVuIG11bHRpcGxlIChzZWxlY3RlZCkgb3B0aW9ucyBhcmUgZGVzdHJveWVkIGF0IHRoZSBzYW1lIHRpbWUsIHdlIGRvbid0IHdhbnRcbiAgICAgICAgLy8gdG8gcnVuIGEgbW9kZWwgdXBkYXRlIGZvciBlYWNoIG9mIHRoZW0uIEluc3RlYWQsIHJ1biBhIHNpbmdsZSB1cGRhdGUgaW4gdGhlICQkcG9zdERpZ2VzdFxuICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHNlbGVjdFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgYHNlbGVjdGAgZWxlbWVudCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLlxuICpcbiAqIFRoZSBgc2VsZWN0YCBkaXJlY3RpdmUgaXMgdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gdG8gcHJvdmlkZSBkYXRhLWJpbmRpbmdcbiAqIGJldHdlZW4gdGhlIHNjb3BlIGFuZCB0aGUgYDxzZWxlY3Q+YCBjb250cm9sIChpbmNsdWRpbmcgc2V0dGluZyBkZWZhdWx0IHZhbHVlcykuXG4gKiBJdCBhbHNvIGhhbmRsZXMgZHluYW1pYyBgPG9wdGlvbj5gIGVsZW1lbnRzLCB3aGljaCBjYW4gYmUgYWRkZWQgdXNpbmcgdGhlIHtAbGluayBuZ1JlcGVhdCBgbmdSZXBlYXR9YCBvclxuICoge0BsaW5rIG5nT3B0aW9ucyBgbmdPcHRpb25zYH0gZGlyZWN0aXZlcy5cbiAqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3RlZCBvcHRpb24gd2lsbCBiZSBib3VuZFxuICogdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYCBkaXJlY3RpdmUuIFdpdGggc3RhdGljIG9yIHJlcGVhdGVkIG9wdGlvbnMsIHRoaXMgaXNcbiAqIHRoZSBjb250ZW50IG9mIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZSBvciB0aGUgdGV4dENvbnRlbnQgb2YgdGhlIGA8b3B0aW9uPmAsIGlmIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgbWlzc2luZy5cbiAqIFZhbHVlIGFuZCB0ZXh0Q29udGVudCBjYW4gYmUgaW50ZXJwb2xhdGVkLlxuICpcbiAqICMjIE1hdGNoaW5nIG1vZGVsIGFuZCBvcHRpb24gdmFsdWVzXG4gKlxuICogSW4gZ2VuZXJhbCwgdGhlIG1hdGNoIGJldHdlZW4gdGhlIG1vZGVsIGFuZCBhbiBvcHRpb24gaXMgZXZhbHVhdGVkIGJ5IHN0cmljdGx5IGNvbXBhcmluZyB0aGUgbW9kZWxcbiAqIHZhbHVlIGFnYWluc3QgdGhlIHZhbHVlIG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAqXG4gKiBJZiB5b3UgYXJlIHNldHRpbmcgdGhlIG9wdGlvbiB2YWx1ZSB3aXRoIHRoZSBvcHRpb24ncyBgdmFsdWVgIGF0dHJpYnV0ZSwgb3IgdGV4dENvbnRlbnQsIHRoZVxuICogdmFsdWUgd2lsbCBhbHdheXMgYmUgYSBgc3RyaW5nYCB3aGljaCBtZWFucyB0aGF0IHRoZSBtb2RlbCB2YWx1ZSBtdXN0IGFsc28gYmUgYSBzdHJpbmcuXG4gKiBPdGhlcndpc2UgdGhlIGBzZWxlY3RgIGRpcmVjdGl2ZSBjYW5ub3QgbWF0Y2ggdGhlbSBjb3JyZWN0bHkuXG4gKlxuICogVG8gYmluZCB0aGUgbW9kZWwgdG8gYSBub24tc3RyaW5nIHZhbHVlLCB5b3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBzdHJhdGVnaWVzOlxuICogLSB0aGUge0BsaW5rIG5nLm5nT3B0aW9ucyBgbmdPcHRpb25zYH0gZGlyZWN0aXZlXG4gKiAgICh7QGxpbmsgbmcuc2VsZWN0I3VzaW5nLXNlbGVjdC13aXRoLW5nb3B0aW9ucy1hbmQtc2V0dGluZy1hLWRlZmF1bHQtdmFsdWV9KVxuICogLSB0aGUge0BsaW5rIG5nLm5nVmFsdWUgYG5nVmFsdWVgfSBkaXJlY3RpdmUsIHdoaWNoIGFsbG93cyBhcmJpdHJhcnkgZXhwcmVzc2lvbnMgdG8gYmVcbiAqICAgb3B0aW9uIHZhbHVlcyAoe0BsaW5rIG5nLnNlbGVjdCN1c2luZy1uZ3ZhbHVlLXRvLWJpbmQtdGhlLW1vZGVsLXRvLWFuLWFycmF5LW9mLW9iamVjdHMgRXhhbXBsZX0pXG4gKiAtIG1vZGVsICRwYXJzZXJzIC8gJGZvcm1hdHRlcnMgdG8gY29udmVydCB0aGUgc3RyaW5nIHZhbHVlXG4gKiAgICh7QGxpbmsgbmcuc2VsZWN0I2JpbmRpbmctc2VsZWN0LXRvLWEtbm9uLXN0cmluZy12YWx1ZS12aWEtbmdtb2RlbC1wYXJzaW5nLWZvcm1hdHRpbmcgRXhhbXBsZX0pXG4gKlxuICogSWYgdGhlIHZpZXdWYWx1ZSBvZiBgbmdNb2RlbGAgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zLCB0aGVuIHRoZSBjb250cm9sXG4gKiB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGFuIFwidW5rbm93blwiIG9wdGlvbiwgd2hpY2ggaXQgdGhlbiByZW1vdmVzIHdoZW4gdGhlIG1pc21hdGNoIGlzIHJlc29sdmVkLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiAjIyBDaG9vc2luZyBiZXR3ZWVuIGBuZ1JlcGVhdGAgYW5kIGBuZ09wdGlvbnNgXG4gKlxuICogSW4gbWFueSBjYXNlcywgYG5nUmVwZWF0YCBjYW4gYmUgdXNlZCBvbiBgPG9wdGlvbj5gIGVsZW1lbnRzIGluc3RlYWQgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ09wdGlvbnNcbiAqIG5nT3B0aW9uc30gdG8gYWNoaWV2ZSBhIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzOlxuICogLSBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvblxuICogLSByZWR1Y2VkIG1lbW9yeSBjb25zdW1wdGlvbiBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2VcbiAqIC0gaW5jcmVhc2VkIHJlbmRlciBzcGVlZCBieSBjcmVhdGluZyB0aGUgb3B0aW9ucyBpbiBhIGRvY3VtZW50RnJhZ21lbnQgaW5zdGVhZCBvZiBpbmRpdmlkdWFsbHlcbiAqXG4gKiBTcGVjaWZpY2FsbHksIHNlbGVjdCB3aXRoIHJlcGVhdGVkIG9wdGlvbnMgc2xvd3MgZG93biBzaWduaWZpY2FudGx5IHN0YXJ0aW5nIGF0IDIwMDAgb3B0aW9ucyBpblxuICogQ2hyb21lIGFuZCBJbnRlcm5ldCBFeHBsb3JlciAvIEVkZ2UuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbXVsdGlwbGUgQWxsb3dzIG11bHRpcGxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuIFRoZSBzZWxlY3RlZCB2YWx1ZXMgd2lsbCBiZVxuICogICAgIGJvdW5kIHRvIHRoZSBtb2RlbCBhcyBhbiBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgcmVxdWlyZWQgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBuZ1JlcXVpcmVkIGluc3RlYWQgb2YgcmVxdWlyZWRcbiAqIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIHNlbGVjdGVkIG9wdGlvbihzKSBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdPcHRpb25zIHNldHMgdGhlIG9wdGlvbnMgdGhhdCB0aGUgc2VsZWN0IGlzIHBvcHVsYXRlZCB3aXRoIGFuZCBkZWZpbmVzIHdoYXQgaXNcbiAqIHNldCBvbiB0aGUgbW9kZWwgb24gc2VsZWN0aW9uLiBTZWUge0BsaW5rIG5nT3B0aW9ucyBgbmdPcHRpb25zYH0uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQXR0clNpemUgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQgZHluYW1pY2FsbHkuIFVzZXMgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzIG5nQXR0cn0gZGlyZWN0aXZlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgU2ltcGxlIGBzZWxlY3RgIGVsZW1lbnRzIHdpdGggc3RhdGljIG9wdGlvbnNcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic3RhdGljLXNlbGVjdFwiIG1vZHVsZT1cInN0YXRpY1NlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwic2luZ2xlU2VsZWN0XCI+IFNpbmdsZSBzZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cInNpbmdsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5zaW5nbGVTZWxlY3RcIj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqXG4gKiAgICAgPGxhYmVsIGZvcj1cInNpbmdsZVNlbGVjdFwiPiBTaW5nbGUgc2VsZWN0IHdpdGggXCJub3Qgc2VsZWN0ZWRcIiBvcHRpb24gYW5kIGR5bmFtaWMgb3B0aW9uIHZhbHVlczogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwic2luZ2xlU2VsZWN0XCIgaWQ9XCJzaW5nbGVTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEuc2luZ2xlU2VsZWN0XCI+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0tUGxlYXNlIHNlbGVjdC0tLTwvb3B0aW9uPiA8IS0tIG5vdCBzZWxlY3RlZCAvIGJsYW5rIG9wdGlvbiAtLT5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJ7e2RhdGEub3B0aW9uMX19XCI+T3B0aW9uIDE8L29wdGlvbj4gPCEtLSBpbnRlcnBvbGF0aW9uIC0tPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0yXCI+T3B0aW9uIDI8L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD48YnI+XG4gKiAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImZvcmNlVW5rbm93bk9wdGlvbigpXCI+Rm9yY2UgdW5rbm93biBvcHRpb248L2J1dHRvbj48YnI+XG4gKiAgICAgPHR0PnNpbmdsZVNlbGVjdCA9IHt7ZGF0YS5zaW5nbGVTZWxlY3R9fTwvdHQ+XG4gKlxuICogICAgIDxocj5cbiAqICAgICA8bGFiZWwgZm9yPVwibXVsdGlwbGVTZWxlY3RcIj4gTXVsdGlwbGUgc2VsZWN0OiA8L2xhYmVsPjxicj5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJtdWx0aXBsZVNlbGVjdFwiIGlkPVwibXVsdGlwbGVTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEubXVsdGlwbGVTZWxlY3RcIiBtdWx0aXBsZT5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0zXCI+T3B0aW9uIDM8L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD48YnI+XG4gKiAgICAgPHR0Pm11bHRpcGxlU2VsZWN0ID0ge3tkYXRhLm11bHRpcGxlU2VsZWN0fX08L3R0Pjxici8+XG4gKiAgIDwvZm9ybT5cbiAqIDwvZGl2PlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogIGFuZ3VsYXIubW9kdWxlKCdzdGF0aWNTZWxlY3QnLCBbXSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS5kYXRhID0ge1xuICogICAgICAgc2luZ2xlU2VsZWN0OiBudWxsLFxuICogICAgICAgbXVsdGlwbGVTZWxlY3Q6IFtdLFxuICogICAgICAgb3B0aW9uMTogJ29wdGlvbi0xJ1xuICogICAgICB9O1xuICpcbiAqICAgICAgJHNjb3BlLmZvcmNlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICRzY29wZS5kYXRhLnNpbmdsZVNlbGVjdCA9ICdub25zZW5zZSc7XG4gKiAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqICMjIyBVc2luZyBgbmdSZXBlYXRgIHRvIGdlbmVyYXRlIGBzZWxlY3RgIG9wdGlvbnNcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3QtbmdyZXBlYXRcIiBtb2R1bGU9XCJuZ3JlcGVhdFNlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwicmVwZWF0U2VsZWN0XCI+IFJlcGVhdCBzZWxlY3Q6IDwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwicmVwZWF0U2VsZWN0XCIgaWQ9XCJyZXBlYXRTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEubW9kZWxcIj5cbiAqICAgICAgIDxvcHRpb24gbmctcmVwZWF0PVwib3B0aW9uIGluIGRhdGEuYXZhaWxhYmxlT3B0aW9uc1wiIHZhbHVlPVwie3tvcHRpb24uaWR9fVwiPnt7b3B0aW9uLm5hbWV9fTwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0PlxuICogICA8L2Zvcm0+XG4gKiAgIDxocj5cbiAqICAgPHR0Pm1vZGVsID0ge3tkYXRhLm1vZGVsfX08L3R0Pjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnbmdyZXBlYXRTZWxlY3QnLCBbXSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS5kYXRhID0ge1xuICogICAgICAgbW9kZWw6IG51bGwsXG4gKiAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXG4gKiAgICAgICAgIHtpZDogJzEnLCBuYW1lOiAnT3B0aW9uIEEnfSxcbiAqICAgICAgICAge2lkOiAnMicsIG5hbWU6ICdPcHRpb24gQid9LFxuICogICAgICAgICB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ31cbiAqICAgICAgIF1cbiAqICAgICAgfTtcbiAqICAgfV0pO1xuICogPC9maWxlPlxuICo8L2V4YW1wbGU+XG4gKlxuICogIyMjIFVzaW5nIGBuZ1ZhbHVlYCB0byBiaW5kIHRoZSBtb2RlbCB0byBhbiBhcnJheSBvZiBvYmplY3RzXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LW5ndmFsdWVcIiBtb2R1bGU9XCJuZ3ZhbHVlU2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJuZ3ZhbHVlc2VsZWN0XCI+IG5ndmFsdWUgc2VsZWN0OiA8L2xhYmVsPlxuICogICAgIDxzZWxlY3Qgc2l6ZT1cIjZcIiBuYW1lPVwibmd2YWx1ZXNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tb2RlbFwiIG11bHRpcGxlPlxuICogICAgICAgPG9wdGlvbiBuZy1yZXBlYXQ9XCJvcHRpb24gaW4gZGF0YS5hdmFpbGFibGVPcHRpb25zXCIgbmctdmFsdWU9XCJvcHRpb24udmFsdWVcIj57e29wdGlvbi5uYW1lfX08L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD5cbiAqICAgPC9mb3JtPlxuICogICA8aHI+XG4gKiAgIDxwcmU+bW9kZWwgPSB7e2RhdGEubW9kZWwgfCBqc29ufX08L3ByZT48YnIvPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ25ndmFsdWVTZWxlY3QnLCBbXSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS5kYXRhID0ge1xuICogICAgICAgbW9kZWw6IG51bGwsXG4gKiAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXG4gICAgICAgICAgIHt2YWx1ZTogJ215U3RyaW5nJywgbmFtZTogJ3N0cmluZyd9LFxuICAgICAgICAgICB7dmFsdWU6IDEsIG5hbWU6ICdpbnRlZ2VyJ30sXG4gICAgICAgICAgIHt2YWx1ZTogdHJ1ZSwgbmFtZTogJ2Jvb2xlYW4nfSxcbiAgICAgICAgICAge3ZhbHVlOiBudWxsLCBuYW1lOiAnbnVsbCd9LFxuICAgICAgICAgICB7dmFsdWU6IHtwcm9wOiAndmFsdWUnfSwgbmFtZTogJ29iamVjdCd9LFxuICAgICAgICAgICB7dmFsdWU6IFsnYSddLCBuYW1lOiAnYXJyYXknfVxuICogICAgICAgXVxuICogICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgVXNpbmcgYHNlbGVjdGAgd2l0aCBgbmdPcHRpb25zYCBhbmQgc2V0dGluZyBhIGRlZmF1bHQgdmFsdWVcbiAqIFNlZSB0aGUge0BsaW5rIG5nT3B0aW9ucyBuZ09wdGlvbnMgZG9jdW1lbnRhdGlvbn0gZm9yIG1vcmUgYG5nT3B0aW9uc2AgdXNhZ2UgZXhhbXBsZXMuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC13aXRoLWRlZmF1bHQtdmFsdWVzXCIgbW9kdWxlPVwiZGVmYXVsdFZhbHVlU2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJteVNlbGVjdFwiPk1ha2UgYSBjaG9pY2U6PC9sYWJlbD5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJteVNlbGVjdFwiIGlkPVwibXlTZWxlY3RcIlxuICogICAgICAgbmctb3B0aW9ucz1cIm9wdGlvbi5uYW1lIGZvciBvcHRpb24gaW4gZGF0YS5hdmFpbGFibGVPcHRpb25zIHRyYWNrIGJ5IG9wdGlvbi5pZFwiXG4gKiAgICAgICBuZy1tb2RlbD1cImRhdGEuc2VsZWN0ZWRPcHRpb25cIj48L3NlbGVjdD5cbiAqICAgPC9mb3JtPlxuICogICA8aHI+XG4gKiAgIDx0dD5vcHRpb24gPSB7e2RhdGEuc2VsZWN0ZWRPcHRpb259fTwvdHQ+PGJyLz5cbiAqIDwvZGl2PlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogIGFuZ3VsYXIubW9kdWxlKCdkZWZhdWx0VmFsdWVTZWxlY3QnLCBbXSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS5kYXRhID0ge1xuICogICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xuICogICAgICAgICB7aWQ6ICcxJywgbmFtZTogJ09wdGlvbiBBJ30sXG4gKiAgICAgICAgIHtpZDogJzInLCBuYW1lOiAnT3B0aW9uIEInfSxcbiAqICAgICAgICAge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9XG4gKiAgICAgICBdLFxuICogICAgICAgc2VsZWN0ZWRPcHRpb246IHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfSAvL1RoaXMgc2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgc2VsZWN0IGluIHRoZSB1aVxuICogICAgICAgfTtcbiAqICAgfV0pO1xuICogPC9maWxlPlxuICo8L2V4YW1wbGU+XG4gKlxuICpcbiAqICMjIyBCaW5kaW5nIGBzZWxlY3RgIHRvIGEgbm9uLXN0cmluZyB2YWx1ZSB2aWEgYG5nTW9kZWxgIHBhcnNpbmcgLyBmb3JtYXR0aW5nXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC13aXRoLW5vbi1zdHJpbmctb3B0aW9uc1wiIG1vZHVsZT1cIm5vblN0cmluZ1NlbGVjdFwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzZWxlY3QgbmctbW9kZWw9XCJtb2RlbC5pZFwiIGNvbnZlcnQtdG8tbnVtYmVyPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj5aZXJvPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiMVwiPk9uZTwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIjJcIj5Ud288L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD5cbiAqICAgICB7eyBtb2RlbCB9fVxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnbm9uU3RyaW5nU2VsZWN0JywgW10pXG4gKiAgICAgICAucnVuKGZ1bmN0aW9uKCRyb290U2NvcGUpIHtcbiAqICAgICAgICAgJHJvb3RTY29wZS5tb2RlbCA9IHsgaWQ6IDIgfTtcbiAqICAgICAgIH0pXG4gKiAgICAgICAuZGlyZWN0aXZlKCdjb252ZXJ0VG9OdW1iZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gKiAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gKiAgICAgICAgICAgICBuZ01vZGVsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsKSB7XG4gKiAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWwsIDEwKTtcbiAqICAgICAgICAgICAgIH0pO1xuICogICAgICAgICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbCkge1xuICogICAgICAgICAgICAgICByZXR1cm4gJycgKyB2YWw7XG4gKiAgICAgICAgICAgICB9KTtcbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgIH07XG4gKiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgnbW9kZWwuaWQnKSkuJCgnb3B0aW9uOmNoZWNrZWQnKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1R3bycpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICovXG52YXIgc2VsZWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJz9uZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogU2VsZWN0Q29udHJvbGxlcixcbiAgICBwcmlvcml0eTogMSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IHNlbGVjdFByZUxpbmssXG4gICAgICBwb3N0OiBzZWxlY3RQb3N0TGlua1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzZWxlY3RQcmVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuXG4gICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdO1xuICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIC8vIGlmIG5nTW9kZWwgaXMgbm90IGRlZmluZWQsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgYnV0IHNldCB0aGUgcmVnaXN0ZXJPcHRpb25cbiAgICAgIC8vIGZ1bmN0aW9uIHRvIG5vb3AsIHNvIG9wdGlvbnMgZG9uJ3QgZ2V0IGFkZGVkIGludGVybmFsbHlcbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHtcbiAgICAgICAgc2VsZWN0Q3RybC5yZWdpc3Rlck9wdGlvbiA9IG5vb3A7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuXG4gICAgICBzZWxlY3RDdHJsLm5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmw7XG5cbiAgICAgIC8vIFdoZW4gdGhlIHNlbGVjdGVkIGl0ZW0ocykgY2hhbmdlcyB3ZSBkZWxlZ2F0ZSBnZXR0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGNvbnRyb2xcbiAgICAgIC8vIHRvIHRoZSBgcmVhZFZhbHVlYCBtZXRob2QsIHdoaWNoIGNhbiBiZSBjaGFuZ2VkIGlmIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGVcbiAgICAgIC8vIHNlbGVjdGVkIHZhbHVlcyBvciBpZiB0aGUgb3B0aW9ucyBhcmUgYmVpbmcgZ2VuZXJhdGVkIGJ5IGBuZ09wdGlvbnNgXG4gICAgICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHNlbGVjdEN0cmwucmVhZFZhbHVlKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBJZiB0aGUgc2VsZWN0IGFsbG93cyBtdWx0aXBsZSB2YWx1ZXMgdGhlbiB3ZSBuZWVkIHRvIG1vZGlmeSBob3cgd2UgcmVhZCBhbmQgd3JpdGVcbiAgICAgIC8vIHZhbHVlcyBmcm9tIGFuZCB0byB0aGUgY29udHJvbDsgYWxzbyB3aGF0IGl0IG1lYW5zIGZvciB0aGUgdmFsdWUgdG8gYmUgZW1wdHkgYW5kXG4gICAgICAvLyB3ZSBoYXZlIHRvIGFkZCBhbiBleHRyYSB3YXRjaCBzaW5jZSBuZ01vZGVsIGRvZXNuJ3Qgd29yayB3ZWxsIHdpdGggYXJyYXlzIC0gaXRcbiAgICAgIC8vIGRvZXNuJ3QgdHJpZ2dlciByZW5kZXJpbmcgaWYgb25seSBhbiBpdGVtIGluIHRoZSBhcnJheSBjaGFuZ2VzLlxuICAgICAgaWYgKGF0dHIubXVsdGlwbGUpIHtcbiAgICAgICAgc2VsZWN0Q3RybC5tdWx0aXBsZSA9IHRydWU7XG5cbiAgICAgICAgLy8gUmVhZCB2YWx1ZSBub3cgbmVlZHMgdG8gY2hlY2sgZWFjaCBvcHRpb24gdG8gc2VlIGlmIGl0IGlzIHNlbGVjdGVkXG4gICAgICAgIHNlbGVjdEN0cmwucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZE11bHRpcGxlVmFsdWUoKSB7XG4gICAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgJiYgIW9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICB2YXIgdmFsID0gb3B0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICBhcnJheS5wdXNoKHZhbCBpbiBzZWxlY3RDdHJsLnNlbGVjdFZhbHVlTWFwID8gc2VsZWN0Q3RybC5zZWxlY3RWYWx1ZU1hcFt2YWxdIDogdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gV3JpdGUgdmFsdWUgbm93IG5lZWRzIHRvIHNldCB0aGUgc2VsZWN0ZWQgcHJvcGVydHkgb2YgZWFjaCBtYXRjaGluZyBvcHRpb25cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVNdWx0aXBsZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIHZhciBzaG91bGRCZVNlbGVjdGVkID0gISF2YWx1ZSAmJiAoaW5jbHVkZXModmFsdWUsIG9wdGlvbi52YWx1ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZXModmFsdWUsIHNlbGVjdEN0cmwuc2VsZWN0VmFsdWVNYXBbb3B0aW9uLnZhbHVlXSkpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRseVNlbGVjdGVkID0gb3B0aW9uLnNlbGVjdGVkO1xuXG4gICAgICAgICAgICAvLyBJRSBhbmQgRWRnZSwgYWRkaW5nIG9wdGlvbnMgdG8gdGhlIHNlbGVjdGlvbiB2aWEgc2hpZnQrY2xpY2svVVAvRE9XTixcbiAgICAgICAgICAgIC8vIHdpbGwgZGUtc2VsZWN0IGFscmVhZHkgc2VsZWN0ZWQgb3B0aW9ucyBpZiBcInNlbGVjdGVkXCIgb24gdGhvc2Ugb3B0aW9ucyB3YXMgc2V0XG4gICAgICAgICAgICAvLyBtb3JlIHRoYW4gb25jZSAoaS5lLiB3aGVuIHRoZSBvcHRpb25zIHdlcmUgYWxyZWFkeSBzZWxlY3RlZClcbiAgICAgICAgICAgIC8vIFNvIHdlIG9ubHkgbW9kaWZ5IHRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBpZiBuZWNjZXNzYXJ5LlxuICAgICAgICAgICAgLy8gTm90ZTogdGhpcyBiZWhhdmlvciBjYW5ub3QgYmUgcmVwbGljYXRlZCB2aWEgdW5pdCB0ZXN0cyBiZWNhdXNlIGl0IG9ubHkgc2hvd3MgaW4gdGhlXG4gICAgICAgICAgICAvLyBhY3R1YWwgdXNlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICBpZiAoc2hvdWxkQmVTZWxlY3RlZCAhPT0gY3VycmVudGx5U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoanFMaXRlKG9wdGlvbiksIHNob3VsZEJlU2VsZWN0ZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBvbiBlYWNoIHdhdGNoIHNpbmNlIG5nTW9kZWwgd2F0Y2hlcyByZWZlcmVuY2UsIGJ1dFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHdvcmsgb2YgYW4gYXJyYXksIHNvIHdlIG5lZWQgdG8gc2VlIGlmIGFueXRoaW5nIHdhcyBpbnNlcnRlZC9yZW1vdmVkXG4gICAgICAgIHZhciBsYXN0VmlldywgbGFzdFZpZXdSZWYgPSBOYU47XG4gICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkge1xuICAgICAgICAgIGlmIChsYXN0Vmlld1JlZiA9PT0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSAmJiAhZXF1YWxzKGxhc3RWaWV3LCBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgbGFzdFZpZXcgPSBzaGFsbG93Q29weShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdFZpZXdSZWYgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgYSBtdWx0aXBsZSBzZWxlY3QgdGhlbiB2YWx1ZSBpcyBub3cgYSBjb2xsZWN0aW9uXG4gICAgICAgIC8vIHNvIHRoZSBtZWFuaW5nIG9mICRpc0VtcHR5IGNoYW5nZXNcbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICAgICAgICB9O1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VsZWN0UG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG5cbiAgICAgIC8vIFdlIGRlbGVnYXRlIHJlbmRlcmluZyB0byB0aGUgYHdyaXRlVmFsdWVgIG1ldGhvZCwgd2hpY2ggY2FuIGJlIGNoYW5nZWRcbiAgICAgIC8vIGlmIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgc2VsZWN0ZWQgdmFsdWVzIG9yIGlmIHRoZSBvcHRpb25zIGFyZSBiZWluZ1xuICAgICAgLy8gZ2VuZXJhdGVkIGJ5IGBuZ09wdGlvbnNgLlxuICAgICAgLy8gVGhpcyBtdXN0IGJlIGRvbmUgaW4gdGhlIHBvc3RMaW5rIGZuIHRvIHByZXZlbnQgJHJlbmRlciB0byBiZSBjYWxsZWQgYmVmb3JlXG4gICAgICAvLyBhbGwgbm9kZXMgaGF2ZSBiZWVuIGxpbmtlZCBjb3JyZWN0bHkuXG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxufTtcblxuXG4vLyBUaGUgb3B0aW9uIGRpcmVjdGl2ZSBpcyBwdXJlbHkgZGVzaWduZWQgdG8gY29tbXVuaWNhdGUgdGhlIGV4aXN0ZW5jZSAob3IgbGFjayBvZilcbi8vIG9mIGR5bmFtaWNhbGx5IGNyZWF0ZWQgKGFuZCBkZXN0cm95ZWQpIG9wdGlvbiBlbGVtZW50cyB0byB0aGVpciBjb250YWluaW5nIHNlbGVjdFxuLy8gZGlyZWN0aXZlIHZpYSBpdHMgY29udHJvbGxlci5cbnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbjtcblxuICAgICAgaWYgKGlzRGVmaW5lZChhdHRyLm5nVmFsdWUpKSB7XG4gICAgICAgIC8vIFdpbGwgYmUgaGFuZGxlZCBieSByZWdpc3Rlck9wdGlvblxuICAgICAgfSBlbHNlIGlmIChpc0RlZmluZWQoYXR0ci52YWx1ZSkpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBkZWZpbmVkLCBjaGVjayBpZiBpdCBjb250YWlucyBhbiBpbnRlcnBvbGF0aW9uXG4gICAgICAgIGludGVycG9sYXRlVmFsdWVGbiA9ICRpbnRlcnBvbGF0ZShhdHRyLnZhbHVlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgbm90IGRlZmluZWQgdGhlbiB3ZSBmYWxsIGJhY2sgdG8gdGhlXG4gICAgICAgIC8vIHRleHQgY29udGVudCBvZiB0aGUgb3B0aW9uIGVsZW1lbnQsIHdoaWNoIG1heSBiZSBpbnRlcnBvbGF0ZWRcbiAgICAgICAgaW50ZXJwb2xhdGVUZXh0Rm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpO1xuICAgICAgICBpZiAoIWludGVycG9sYXRlVGV4dEZuKSB7XG4gICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIGVsZW1lbnQudGV4dCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gb3ZlciB1c2luZyBeXiBzaW5jZSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgdG8gc2VhcmNoXG4gICAgICAgIC8vIGFsbCB0aGUgd2F5IHRvIHRoZSByb290IG9mIHRoZSBET00gZm9yIGV2ZXJ5IHNpbmdsZSBvcHRpb24gZWxlbWVudFxuICAgICAgICB2YXIgc2VsZWN0Q3RybE5hbWUgPSAnJHNlbGVjdENvbnRyb2xsZXInLFxuICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKSxcbiAgICAgICAgICAgIHNlbGVjdEN0cmwgPSBwYXJlbnQuZGF0YShzZWxlY3RDdHJsTmFtZSkgfHxcbiAgICAgICAgICAgICAgcGFyZW50LnBhcmVudCgpLmRhdGEoc2VsZWN0Q3RybE5hbWUpOyAvLyBpbiBjYXNlIHdlIGFyZSBpbiBvcHRncm91cFxuXG4gICAgICAgIGlmIChzZWxlY3RDdHJsKSB7XG4gICAgICAgICAgc2VsZWN0Q3RybC5yZWdpc3Rlck9wdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdSZXF1aXJlZFxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ1JlcXVpcmVkIGFkZHMgdGhlIHJlcXVpcmVkIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB7QGxpbmsgaW5wdXQgYGlucHV0YH0gYW5kIHtAbGluayBzZWxlY3QgYHNlbGVjdGB9IGNvbnRyb2xzLCBidXQgY2FuIGFsc28gYmVcbiAqIGFwcGxpZWQgdG8gY3VzdG9tIGNvbnRyb2xzLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgc2V0cyB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaWYgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGBuZ1JlcXVpcmVkYCBldmFsdWF0ZXMgdG8gdHJ1ZS4gQSBzcGVjaWFsIGRpcmVjdGl2ZSBmb3Igc2V0dGluZyBgcmVxdWlyZWRgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlXG4gKiBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIGByZXF1aXJlZGAuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX1cbiAqIGZvciBtb3JlIGluZm8uXG4gKlxuICogVGhlIHZhbGlkYXRvciB3aWxsIHNldCB0aGUgYHJlcXVpcmVkYCBlcnJvciBrZXkgdG8gdHJ1ZSBpZiB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaXMgc2V0IGFuZFxuICogY2FsbGluZyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eSBgTmdNb2RlbENvbnRyb2xsZXIuJGlzRW1wdHlgfSB3aXRoIHRoZVxuICoge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSBgbmdNb2RlbC4kdmlld1ZhbHVlYH0gcmV0dXJucyBgdHJ1ZWAuIEZvciBleGFtcGxlLCB0aGVcbiAqIGAkaXNFbXB0eSgpYCBpbXBsZW1lbnRhdGlvbiBmb3IgYGlucHV0W3RleHRdYCBjaGVja3MgdGhlIGxlbmd0aCBvZiB0aGUgYCR2aWV3VmFsdWVgLiBXaGVuIGRldmVsb3BpbmdcbiAqIGN1c3RvbSBjb250cm9scywgYCRpc0VtcHR5KClgIGNhbiBiZSBvdmVyd3JpdHRlbiB0byBhY2NvdW50IGZvciBhICR2aWV3VmFsdWUgdGhhdCBpcyBub3Qgc3RyaW5nLWJhc2VkLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdSZXF1aXJlZERpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nUmVxdWlyZWRFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1JlcXVpcmVkRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5yZXF1aXJlZCA9IHRydWU7XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cImZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cInJlcXVpcmVkXCI+VG9nZ2xlIHJlcXVpcmVkOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJyZXF1aXJlZFwiIGlkPVwicmVxdWlyZWRcIiAvPlxuICogICAgICAgICA8YnI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dFwiPlRoaXMgaW5wdXQgbXVzdCBiZSBmaWxsZWQgaWYgYHJlcXVpcmVkYCBpcyB0cnVlOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1vZGVsXCIgaWQ9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLXJlcXVpcmVkPVwicmVxdWlyZWRcIiAvPjxicj5cbiAqICAgICAgICAgPGhyPlxuICogICAgICAgICByZXF1aXJlZCBlcnJvciBzZXQ/ID0gPGNvZGU+e3tmb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxicj5cbiAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciByZXF1aXJlZCA9IGVsZW1lbnQoYnkuYmluZGluZygnZm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQnKSk7XG4gICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCdtb2RlbCcpKTtcbiAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdpbnB1dCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc2V0IHRoZSByZXF1aXJlZCBlcnJvcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHJlcXVpcmVkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG5cbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgIGV4cGVjdChyZXF1aXJlZC5nZXRUZXh0KCkpLm5vdC50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQ29udGFpbignMTIzJyk7XG4gICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIHJlcXVpcmVkRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuICAgICAgYXR0ci5yZXF1aXJlZCA9IHRydWU7IC8vIGZvcmNlIHRydXRoeSBpbiBjYXNlIHdlIGFyZSBvbiBub24gaW5wdXQgZWxlbWVudFxuXG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLnJlcXVpcmVkID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhYXR0ci5yZXF1aXJlZCB8fCAhY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpO1xuICAgICAgfTtcblxuICAgICAgYXR0ci4kb2JzZXJ2ZSgncmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdQYXR0ZXJuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogbmdQYXR0ZXJuIGFkZHMgdGhlIHBhdHRlcm4ge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYHZhbGlkYXRvcmB9IHRvIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0uXG4gKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHRleHQtYmFzZWQge0BsaW5rIGlucHV0IGBpbnB1dGB9IGNvbnRyb2xzLCBidXQgY2FuIGFsc28gYmUgYXBwbGllZCB0byBjdXN0b20gdGV4dC1iYXNlZCBjb250cm9scy5cbiAqXG4gKiBUaGUgdmFsaWRhdG9yIHNldHMgdGhlIGBwYXR0ZXJuYCBlcnJvciBrZXkgaWYgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9XG4gKiBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCB3aGljaCBpcyBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlXG4gKiBgbmdQYXR0ZXJuYCBhdHRyaWJ1dGUgdmFsdWU6XG4gKiAqIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogKiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHAgYWZ0ZXIgd3JhcHBpbmcgaXRcbiAqIGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiBhY2NvdW50LlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBwYXR0ZXJuYCBhdHRyaWJ1dGUgaXMgdXNlZCwgd2l0aCB0d29cbiAqIGRpZmZlcmVuY2VzOlxuICogPG9sPlxuICogICA8bGk+XG4gKiAgICAgYG5nUGF0dGVybmAgZG9lcyBub3Qgc2V0IHRoZSBgcGF0dGVybmAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uIGlzXG4gKiAgICAgbm90IGF2YWlsYWJsZS5cbiAqICAgPC9saT5cbiAqICAgPGxpPlxuICogICAgIFRoZSBgbmdQYXR0ZXJuYCBhdHRyaWJ1dGUgbXVzdCBiZSBhbiBleHByZXNzaW9uLCB3aGlsZSB0aGUgYHBhdHRlcm5gIHZhbHVlIG11c3QgYmVcbiAqICAgICBpbnRlcnBvbGF0ZWQuXG4gKiAgIDwvbGk+XG4gKiA8L29sPlxuICogPC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ1BhdHRlcm5EaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ1BhdHRlcm5FeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1BhdHRlcm5FeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLnJlZ2V4ID0gJ1xcXFxkKyc7XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cImZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cInJlZ2V4XCI+U2V0IGEgcGF0dGVybiAocmVnZXggc3RyaW5nKTogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJyZWdleFwiIGlkPVwicmVnZXhcIiAvPlxuICogICAgICAgICA8YnI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dFwiPlRoaXMgaW5wdXQgaXMgcmVzdHJpY3RlZCBieSB0aGUgY3VycmVudCBwYXR0ZXJuOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1vZGVsXCIgaWQ9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLXBhdHRlcm49XCJyZWdleFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIGlucHV0IHZhbGlkPyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gKiAgICAgICAgIG1vZGVsID0gPGNvZGU+e3ttb2RlbH19PC9jb2RlPlxuICogICAgICAgPC9mb3JtPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0aGUgaW5wdXQgd2l0aCB0aGUgZGVmYXVsdCBwYXR0ZXJuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWFhJyk7XG4gICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCdhYWEnKTtcblxuICAgICAgICAgaW5wdXQuY2xlYXIoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7XG4gICAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQ29udGFpbignMTIzJyk7XG4gICAgICAgICB9KTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgcGF0dGVybkRpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHJlZ2V4cCwgcGF0dGVybkV4cCA9IGF0dHIubmdQYXR0ZXJuIHx8IGF0dHIucGF0dGVybjtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ3BhdHRlcm4nLCBmdW5jdGlvbihyZWdleCkge1xuICAgICAgICBpZiAoaXNTdHJpbmcocmVnZXgpICYmIHJlZ2V4Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgcmVnZXggKyAnJCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZ2V4ICYmICFyZWdleC50ZXN0KSB7XG4gICAgICAgICAgdGhyb3cgbWluRXJyKCduZ1BhdHRlcm4nKSgnbm9yZWdleHAnLFxuICAgICAgICAgICAgJ0V4cGVjdGVkIHswfSB0byBiZSBhIFJlZ0V4cCBidXQgd2FzIHsxfS4gRWxlbWVudDogezJ9JywgcGF0dGVybkV4cCxcbiAgICAgICAgICAgIHJlZ2V4LCBzdGFydGluZ1RhZyhlbG0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2V4cCA9IHJlZ2V4IHx8IHVuZGVmaW5lZDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLnBhdHRlcm4gPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgLy8gSFRNTDUgcGF0dGVybiBjb25zdHJhaW50IHZhbGlkYXRlcyB0aGUgaW5wdXQgdmFsdWUsIHNvIHdlIHZhbGlkYXRlIHRoZSB2aWV3VmFsdWVcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChyZWdleHApIHx8IHJlZ2V4cC50ZXN0KHZpZXdWYWx1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNYXhsZW5ndGhcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ01heGxlbmd0aCBhZGRzIHRoZSBtYXhsZW5ndGgge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYHZhbGlkYXRvcmB9IHRvIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0uXG4gKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHRleHQtYmFzZWQge0BsaW5rIGlucHV0IGBpbnB1dGB9IGNvbnRyb2xzLCBidXQgY2FuIGFsc28gYmUgYXBwbGllZCB0byBjdXN0b20gdGV4dC1iYXNlZCBjb250cm9scy5cbiAqXG4gKiBUaGUgdmFsaWRhdG9yIHNldHMgdGhlIGBtYXhsZW5ndGhgIGVycm9yIGtleSBpZiB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSBgbmdNb2RlbC4kdmlld1ZhbHVlYH1cbiAqIGlzIGxvbmdlciB0aGFuIHRoZSBpbnRlZ2VyIG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGVcbiAqIGBuZ01heGxlbmd0aGAgYXR0cmlidXRlIHZhbHVlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKk5vdGU6KiogVGhpcyBkaXJlY3RpdmUgaXMgYWxzbyBhZGRlZCB3aGVuIHRoZSBwbGFpbiBgbWF4bGVuZ3RoYCBhdHRyaWJ1dGUgaXMgdXNlZCwgd2l0aCB0d29cbiAqIGRpZmZlcmVuY2VzOlxuICogPG9sPlxuICogICA8bGk+XG4gKiAgICAgYG5nTWF4bGVuZ3RoYCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhsZW5ndGhgIGF0dHJpYnV0ZSBhbmQgdGhlcmVmb3JlIEhUTUw1IGNvbnN0cmFpbnRcbiAqICAgICB2YWxpZGF0aW9uIGlzIG5vdCBhdmFpbGFibGUuXG4gKiAgIDwvbGk+XG4gKiAgIDxsaT5cbiAqICAgICBUaGUgYG5nTWF4bGVuZ3RoYCBhdHRyaWJ1dGUgbXVzdCBiZSBhbiBleHByZXNzaW9uLCB3aGlsZSB0aGUgYG1heGxlbmd0aGAgdmFsdWUgbXVzdCBiZVxuICogICAgIGludGVycG9sYXRlZC5cbiAqICAgPC9saT5cbiAqIDwvb2w+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTWF4bGVuZ3RoRGlyZWN0aXZlXCIgbW9kdWxlPVwibmdNYXhsZW5ndGhFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ01heGxlbmd0aEV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUubWF4bGVuZ3RoID0gNTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwibWF4bGVuZ3RoXCI+U2V0IGEgbWF4bGVuZ3RoOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4bGVuZ3RoXCIgaWQ9XCJtYXhsZW5ndGhcIiAvPlxuICogICAgICAgICA8YnI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dFwiPlRoaXMgaW5wdXQgaXMgcmVzdHJpY3RlZCBieSB0aGUgY3VycmVudCBtYXhsZW5ndGg6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbWF4bGVuZ3RoPVwibWF4bGVuZ3RoXCIgLz48YnI+XG4gKiAgICAgICAgIDxocj5cbiAqICAgICAgICAgaW5wdXQgdmFsaWQ/ID0gPGNvZGU+e3tmb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygnbW9kZWwnKSk7XG4gICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRoZSBpbnB1dCB3aXRoIHRoZSBkZWZhdWx0IG1heGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiY2RlZicpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkubm90LnRvQ29udGFpbignYWJjZGVmJyk7XG5cbiAgICAgICAgIGlucHV0LmNsZWFyKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiY2RlJyk7XG4gICAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQ29udGFpbignYWJjZGUnKTtcbiAgICAgICAgIH0pO1xuICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBtYXhsZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBtYXhsZW5ndGggPSAtMTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21heGxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbnRWYWwgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgIG1heGxlbmd0aCA9IGlzTnVtYmVyTmFOKGludFZhbCkgPyAtMSA6IGludFZhbDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXhsZW5ndGggPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChtYXhsZW5ndGggPCAwKSB8fCBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgKHZpZXdWYWx1ZS5sZW5ndGggPD0gbWF4bGVuZ3RoKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01pbmxlbmd0aFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nTWlubGVuZ3RoIGFkZHMgdGhlIG1pbmxlbmd0aCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgdGV4dC1iYXNlZCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN1c3RvbSB0ZXh0LWJhc2VkIGNvbnRyb2xzLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYG1pbmxlbmd0aGAgZXJyb3Iga2V5IGlmIHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfVxuICogaXMgc2hvcnRlciB0aGFuIHRoZSBpbnRlZ2VyIG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGVcbiAqIGBuZ01pbmxlbmd0aGAgYXR0cmlidXRlIHZhbHVlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKk5vdGU6KiogVGhpcyBkaXJlY3RpdmUgaXMgYWxzbyBhZGRlZCB3aGVuIHRoZSBwbGFpbiBgbWlubGVuZ3RoYCBhdHRyaWJ1dGUgaXMgdXNlZCwgd2l0aCB0d29cbiAqIGRpZmZlcmVuY2VzOlxuICogPG9sPlxuICogICA8bGk+XG4gKiAgICAgYG5nTWlubGVuZ3RoYCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5sZW5ndGhgIGF0dHJpYnV0ZSBhbmQgdGhlcmVmb3JlIEhUTUw1IGNvbnN0cmFpbnRcbiAqICAgICB2YWxpZGF0aW9uIGlzIG5vdCBhdmFpbGFibGUuXG4gKiAgIDwvbGk+XG4gKiAgIDxsaT5cbiAqICAgICBUaGUgYG5nTWlubGVuZ3RoYCB2YWx1ZSBtdXN0IGJlIGFuIGV4cHJlc3Npb24sIHdoaWxlIHRoZSBgbWlubGVuZ3RoYCB2YWx1ZSBtdXN0IGJlXG4gKiAgICAgaW50ZXJwb2xhdGVkLlxuICogICA8L2xpPlxuICogPC9vbD5cbiAqIDwvZGl2PlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNaW5sZW5ndGhEaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ01pbmxlbmd0aEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nTWlubGVuZ3RoRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5taW5sZW5ndGggPSAzO1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJtaW5sZW5ndGhcIj5TZXQgYSBtaW5sZW5ndGg6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJtaW5sZW5ndGhcIiBpZD1cIm1pbmxlbmd0aFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IG1pbmxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtb2RlbFwiIGlkPVwiaW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1taW5sZW5ndGg9XCJtaW5sZW5ndGhcIiAvPjxicj5cbiAqICAgICAgICAgPGhyPlxuICogICAgICAgICBpbnB1dCB2YWxpZD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCdtb2RlbCcpKTtcbiAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdpbnB1dCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgdGhlIGlucHV0IHdpdGggdGhlIGRlZmF1bHQgbWlubGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWInKTtcbiAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLm5vdC50b0NvbnRhaW4oJ2FiJyk7XG5cbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYmMnKTtcbiAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQ29udGFpbignYWJjJyk7XG4gICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG1pbmxlbmd0aERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIG1pbmxlbmd0aCA9IDA7XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtaW5sZW5ndGgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBtaW5sZW5ndGggPSB0b0ludCh2YWx1ZSkgfHwgMDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW5sZW5ndGggPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCB2aWV3VmFsdWUubGVuZ3RoID49IG1pbmxlbmd0aDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuaWYgKHdpbmRvdy5hbmd1bGFyLmJvb3RzdHJhcCkge1xuICAvLyBBbmd1bGFySlMgaXMgYWxyZWFkeSBsb2FkZWQsIHNvIHdlIGNhbiByZXR1cm4gaGVyZS4uLlxuICBpZiAod2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlLmxvZygnV0FSTklORzogVHJpZWQgdG8gbG9hZCBhbmd1bGFyIG1vcmUgdGhhbiBvbmNlLicpO1xuICB9XG4gIHJldHVybjtcbn1cblxuLy8gdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUganFMaXRlKGZuKVxuLy8gYnV0IHdlIHdpbGwgcmViaW5kIG9uIGJvb3RzdHJhcCBhZ2Fpbi5cbmJpbmRKUXVlcnkoKTtcblxucHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpO1xuXG5hbmd1bGFyLm1vZHVsZShcIm5nTG9jYWxlXCIsIFtdLCBbXCIkcHJvdmlkZVwiLCBmdW5jdGlvbigkcHJvdmlkZSkge1xudmFyIFBMVVJBTF9DQVRFR09SWSA9IHtaRVJPOiBcInplcm9cIiwgT05FOiBcIm9uZVwiLCBUV086IFwidHdvXCIsIEZFVzogXCJmZXdcIiwgTUFOWTogXCJtYW55XCIsIE9USEVSOiBcIm90aGVyXCJ9O1xuZnVuY3Rpb24gZ2V0RGVjaW1hbHMobikge1xuICBuID0gbiArICcnO1xuICB2YXIgaSA9IG4uaW5kZXhPZignLicpO1xuICByZXR1cm4gKGkgPT0gLTEpID8gMCA6IG4ubGVuZ3RoIC0gaSAtIDE7XG59XG5cbmZ1bmN0aW9uIGdldFZGKG4sIG9wdF9wcmVjaXNpb24pIHtcbiAgdmFyIHYgPSBvcHRfcHJlY2lzaW9uO1xuXG4gIGlmICh1bmRlZmluZWQgPT09IHYpIHtcbiAgICB2ID0gTWF0aC5taW4oZ2V0RGVjaW1hbHMobiksIDMpO1xuICB9XG5cbiAgdmFyIGJhc2UgPSBNYXRoLnBvdygxMCwgdik7XG4gIHZhciBmID0gKChuICogYmFzZSkgfCAwKSAlIGJhc2U7XG4gIHJldHVybiB7djogdiwgZjogZn07XG59XG5cbiRwcm92aWRlLnZhbHVlKFwiJGxvY2FsZVwiLCB7XG4gIFwiREFURVRJTUVfRk9STUFUU1wiOiB7XG4gICAgXCJBTVBNU1wiOiBbXG4gICAgICBcIkFNXCIsXG4gICAgICBcIlBNXCJcbiAgICBdLFxuICAgIFwiREFZXCI6IFtcbiAgICAgIFwiU3VuZGF5XCIsXG4gICAgICBcIk1vbmRheVwiLFxuICAgICAgXCJUdWVzZGF5XCIsXG4gICAgICBcIldlZG5lc2RheVwiLFxuICAgICAgXCJUaHVyc2RheVwiLFxuICAgICAgXCJGcmlkYXlcIixcbiAgICAgIFwiU2F0dXJkYXlcIlxuICAgIF0sXG4gICAgXCJFUkFOQU1FU1wiOiBbXG4gICAgICBcIkJlZm9yZSBDaHJpc3RcIixcbiAgICAgIFwiQW5ubyBEb21pbmlcIlxuICAgIF0sXG4gICAgXCJFUkFTXCI6IFtcbiAgICAgIFwiQkNcIixcbiAgICAgIFwiQURcIlxuICAgIF0sXG4gICAgXCJGSVJTVERBWU9GV0VFS1wiOiA2LFxuICAgIFwiTU9OVEhcIjogW1xuICAgICAgXCJKYW51YXJ5XCIsXG4gICAgICBcIkZlYnJ1YXJ5XCIsXG4gICAgICBcIk1hcmNoXCIsXG4gICAgICBcIkFwcmlsXCIsXG4gICAgICBcIk1heVwiLFxuICAgICAgXCJKdW5lXCIsXG4gICAgICBcIkp1bHlcIixcbiAgICAgIFwiQXVndXN0XCIsXG4gICAgICBcIlNlcHRlbWJlclwiLFxuICAgICAgXCJPY3RvYmVyXCIsXG4gICAgICBcIk5vdmVtYmVyXCIsXG4gICAgICBcIkRlY2VtYmVyXCJcbiAgICBdLFxuICAgIFwiU0hPUlREQVlcIjogW1xuICAgICAgXCJTdW5cIixcbiAgICAgIFwiTW9uXCIsXG4gICAgICBcIlR1ZVwiLFxuICAgICAgXCJXZWRcIixcbiAgICAgIFwiVGh1XCIsXG4gICAgICBcIkZyaVwiLFxuICAgICAgXCJTYXRcIlxuICAgIF0sXG4gICAgXCJTSE9SVE1PTlRIXCI6IFtcbiAgICAgIFwiSmFuXCIsXG4gICAgICBcIkZlYlwiLFxuICAgICAgXCJNYXJcIixcbiAgICAgIFwiQXByXCIsXG4gICAgICBcIk1heVwiLFxuICAgICAgXCJKdW5cIixcbiAgICAgIFwiSnVsXCIsXG4gICAgICBcIkF1Z1wiLFxuICAgICAgXCJTZXBcIixcbiAgICAgIFwiT2N0XCIsXG4gICAgICBcIk5vdlwiLFxuICAgICAgXCJEZWNcIlxuICAgIF0sXG4gICAgXCJTVEFOREFMT05FTU9OVEhcIjogW1xuICAgICAgXCJKYW51YXJ5XCIsXG4gICAgICBcIkZlYnJ1YXJ5XCIsXG4gICAgICBcIk1hcmNoXCIsXG4gICAgICBcIkFwcmlsXCIsXG4gICAgICBcIk1heVwiLFxuICAgICAgXCJKdW5lXCIsXG4gICAgICBcIkp1bHlcIixcbiAgICAgIFwiQXVndXN0XCIsXG4gICAgICBcIlNlcHRlbWJlclwiLFxuICAgICAgXCJPY3RvYmVyXCIsXG4gICAgICBcIk5vdmVtYmVyXCIsXG4gICAgICBcIkRlY2VtYmVyXCJcbiAgICBdLFxuICAgIFwiV0VFS0VORFJBTkdFXCI6IFtcbiAgICAgIDUsXG4gICAgICA2XG4gICAgXSxcbiAgICBcImZ1bGxEYXRlXCI6IFwiRUVFRSwgTU1NTSBkLCB5XCIsXG4gICAgXCJsb25nRGF0ZVwiOiBcIk1NTU0gZCwgeVwiLFxuICAgIFwibWVkaXVtXCI6IFwiTU1NIGQsIHkgaDptbTpzcyBhXCIsXG4gICAgXCJtZWRpdW1EYXRlXCI6IFwiTU1NIGQsIHlcIixcbiAgICBcIm1lZGl1bVRpbWVcIjogXCJoOm1tOnNzIGFcIixcbiAgICBcInNob3J0XCI6IFwiTS9kL3l5IGg6bW0gYVwiLFxuICAgIFwic2hvcnREYXRlXCI6IFwiTS9kL3l5XCIsXG4gICAgXCJzaG9ydFRpbWVcIjogXCJoOm1tIGFcIlxuICB9LFxuICBcIk5VTUJFUl9GT1JNQVRTXCI6IHtcbiAgICBcIkNVUlJFTkNZX1NZTVwiOiBcIiRcIixcbiAgICBcIkRFQ0lNQUxfU0VQXCI6IFwiLlwiLFxuICAgIFwiR1JPVVBfU0VQXCI6IFwiLFwiLFxuICAgIFwiUEFUVEVSTlNcIjogW1xuICAgICAge1xuICAgICAgICBcImdTaXplXCI6IDMsXG4gICAgICAgIFwibGdTaXplXCI6IDMsXG4gICAgICAgIFwibWF4RnJhY1wiOiAzLFxuICAgICAgICBcIm1pbkZyYWNcIjogMCxcbiAgICAgICAgXCJtaW5JbnRcIjogMSxcbiAgICAgICAgXCJuZWdQcmVcIjogXCItXCIsXG4gICAgICAgIFwibmVnU3VmXCI6IFwiXCIsXG4gICAgICAgIFwicG9zUHJlXCI6IFwiXCIsXG4gICAgICAgIFwicG9zU3VmXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiZ1NpemVcIjogMyxcbiAgICAgICAgXCJsZ1NpemVcIjogMyxcbiAgICAgICAgXCJtYXhGcmFjXCI6IDIsXG4gICAgICAgIFwibWluRnJhY1wiOiAyLFxuICAgICAgICBcIm1pbkludFwiOiAxLFxuICAgICAgICBcIm5lZ1ByZVwiOiBcIi1cXHUwMGE0XCIsXG4gICAgICAgIFwibmVnU3VmXCI6IFwiXCIsXG4gICAgICAgIFwicG9zUHJlXCI6IFwiXFx1MDBhNFwiLFxuICAgICAgICBcInBvc1N1ZlwiOiBcIlwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICBcImlkXCI6IFwiZW4tdXNcIixcbiAgXCJsb2NhbGVJRFwiOiBcImVuX1VTXCIsXG4gIFwicGx1cmFsQ2F0XCI6IGZ1bmN0aW9uKG4sIG9wdF9wcmVjaXNpb24pIHsgIHZhciBpID0gbiB8IDA7ICB2YXIgdmYgPSBnZXRWRihuLCBvcHRfcHJlY2lzaW9uKTsgIGlmIChpID09IDEgJiYgdmYudiA9PSAwKSB7ICAgIHJldHVybiBQTFVSQUxfQ0FURUdPUlkuT05FOyAgfSAgcmV0dXJuIFBMVVJBTF9DQVRFR09SWS5PVEhFUjt9XG59KTtcbn1dKTtcblxuICBqcUxpdGUoZnVuY3Rpb24oKSB7XG4gICAgYW5ndWxhckluaXQod2luZG93LmRvY3VtZW50LCBib290c3RyYXApO1xuICB9KTtcblxufSkod2luZG93KTtcblxuIXdpbmRvdy5hbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSAmJiB3aW5kb3cuYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmhlYWQpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5AY2hhcnNldCBcIlVURi04XCI7W25nXFxcXDpjbG9ha10sW25nLWNsb2FrXSxbZGF0YS1uZy1jbG9ha10sW3gtbmctY2xvYWtdLC5uZy1jbG9haywueC1uZy1jbG9haywubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSl7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fS5uZy1hbmltYXRlLXNoaW17dmlzaWJpbGl0eTpoaWRkZW47fS5uZy1hbmNob3J7cG9zaXRpb246YWJzb2x1dGU7fTwvc3R5bGU+Jyk7XG4vKipcbiAqIFN0YXRlLWJhc2VkIHJvdXRpbmcgZm9yIEFuZ3VsYXJKU1xuICogQHZlcnNpb24gdjAuNC4yXG4gKiBAbGluayBodHRwOi8vYW5ndWxhci11aS5naXRodWIuY29tL1xuICogQGxpY2Vuc2UgTUlUIExpY2Vuc2UsIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKi9cblxuLyogY29tbW9uanMgcGFja2FnZSBtYW5hZ2VyIHN1cHBvcnQgKGVnIGNvbXBvbmVudGpzKSAqL1xuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMgPT09IGV4cG9ydHMpe1xuICBtb2R1bGUuZXhwb3J0cyA9ICd1aS5yb3V0ZXInO1xufVxuXG4oZnVuY3Rpb24gKHdpbmRvdywgYW5ndWxhciwgdW5kZWZpbmVkKSB7XG4vKmpzaGludCBnbG9iYWxzdHJpY3Q6dHJ1ZSovXG4vKmdsb2JhbCBhbmd1bGFyOmZhbHNlKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzRGVmaW5lZCA9IGFuZ3VsYXIuaXNEZWZpbmVkLFxuICAgIGlzRnVuY3Rpb24gPSBhbmd1bGFyLmlzRnVuY3Rpb24sXG4gICAgaXNTdHJpbmcgPSBhbmd1bGFyLmlzU3RyaW5nLFxuICAgIGlzT2JqZWN0ID0gYW5ndWxhci5pc09iamVjdCxcbiAgICBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5LFxuICAgIGZvckVhY2ggPSBhbmd1bGFyLmZvckVhY2gsXG4gICAgZXh0ZW5kID0gYW5ndWxhci5leHRlbmQsXG4gICAgY29weSA9IGFuZ3VsYXIuY29weSxcbiAgICB0b0pzb24gPSBhbmd1bGFyLnRvSnNvbjtcblxuZnVuY3Rpb24gaW5oZXJpdChwYXJlbnQsIGV4dHJhKSB7XG4gIHJldHVybiBleHRlbmQobmV3IChleHRlbmQoZnVuY3Rpb24oKSB7fSwgeyBwcm90b3R5cGU6IHBhcmVudCB9KSkoKSwgZXh0cmEpO1xufVxuXG5mdW5jdGlvbiBtZXJnZShkc3QpIHtcbiAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogIT09IGRzdCkge1xuICAgICAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCFkc3QuaGFzT3duUHJvcGVydHkoa2V5KSkgZHN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkc3Q7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNvbW1vbiBhbmNlc3RvciBwYXRoIGJldHdlZW4gdHdvIHN0YXRlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZmlyc3QgVGhlIGZpcnN0IHN0YXRlLlxuICogQHBhcmFtIHtPYmplY3R9IHNlY29uZCBUaGUgc2Vjb25kIHN0YXRlLlxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2Ygc3RhdGUgbmFtZXMgaW4gZGVzY2VuZGluZyBvcmRlciwgbm90IGluY2x1ZGluZyB0aGUgcm9vdC5cbiAqL1xuZnVuY3Rpb24gYW5jZXN0b3JzKGZpcnN0LCBzZWNvbmQpIHtcbiAgdmFyIHBhdGggPSBbXTtcblxuICBmb3IgKHZhciBuIGluIGZpcnN0LnBhdGgpIHtcbiAgICBpZiAoZmlyc3QucGF0aFtuXSAhPT0gc2Vjb25kLnBhdGhbbl0pIGJyZWFrO1xuICAgIHBhdGgucHVzaChmaXJzdC5wYXRoW25dKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cblxuLyoqXG4gKiBJRTgtc2FmZSB3cmFwcGVyIGZvciBgT2JqZWN0LmtleXMoKWAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBBIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgdGhlIGtleXMgb2YgdGhlIG9iamVjdCBhcyBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0S2V5cyhvYmplY3QpIHtcbiAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIGZvckVhY2gob2JqZWN0LCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIElFOC1zYWZlIHdyYXBwZXIgZm9yIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZigpYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBBIEphdmFTY3JpcHQgYXJyYXkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIEEgdmFsdWUgdG8gc2VhcmNoIHRoZSBhcnJheSBmb3IuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIGFycmF5IGluZGV4IHZhbHVlIG9mIGB2YWx1ZWAsIG9yIGAtMWAgaWYgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIHJldHVybiBhcnJheS5pbmRleE9mKHZhbHVlLCBOdW1iZXIoYXJndW1lbnRzWzJdKSB8fCAwKTtcbiAgfVxuICB2YXIgbGVuID0gYXJyYXkubGVuZ3RoID4+PiAwLCBmcm9tID0gTnVtYmVyKGFyZ3VtZW50c1syXSkgfHwgMDtcbiAgZnJvbSA9IChmcm9tIDwgMCkgPyBNYXRoLmNlaWwoZnJvbSkgOiBNYXRoLmZsb29yKGZyb20pO1xuXG4gIGlmIChmcm9tIDwgMCkgZnJvbSArPSBsZW47XG5cbiAgZm9yICg7IGZyb20gPCBsZW47IGZyb20rKykge1xuICAgIGlmIChmcm9tIGluIGFycmF5ICYmIGFycmF5W2Zyb21dID09PSB2YWx1ZSkgcmV0dXJuIGZyb207XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIE1lcmdlcyBhIHNldCBvZiBwYXJhbWV0ZXJzIHdpdGggYWxsIHBhcmFtZXRlcnMgaW5oZXJpdGVkIGJldHdlZW4gdGhlIGNvbW1vbiBwYXJlbnRzIG9mIHRoZVxuICogY3VycmVudCBzdGF0ZSBhbmQgYSBnaXZlbiBkZXN0aW5hdGlvbiBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3VycmVudFBhcmFtcyBUaGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgc3RhdGUgcGFyYW1ldGVycyAoJHN0YXRlUGFyYW1zKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBuZXdQYXJhbXMgVGhlIHNldCBvZiBwYXJhbWV0ZXJzIHdoaWNoIHdpbGwgYmUgY29tcG9zaXRlZCB3aXRoIGluaGVyaXRlZCBwYXJhbXMuXG4gKiBAcGFyYW0ge09iamVjdH0gJGN1cnJlbnQgSW50ZXJuYWwgZGVmaW5pdGlvbiBvZiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHtPYmplY3R9ICR0byBJbnRlcm5hbCBkZWZpbml0aW9uIG9mIG9iamVjdCByZXByZXNlbnRpbmcgc3RhdGUgdG8gdHJhbnNpdGlvbiB0by5cbiAqL1xuZnVuY3Rpb24gaW5oZXJpdFBhcmFtcyhjdXJyZW50UGFyYW1zLCBuZXdQYXJhbXMsICRjdXJyZW50LCAkdG8pIHtcbiAgdmFyIHBhcmVudHMgPSBhbmNlc3RvcnMoJGN1cnJlbnQsICR0byksIHBhcmVudFBhcmFtcywgaW5oZXJpdGVkID0ge30sIGluaGVyaXRMaXN0ID0gW107XG5cbiAgZm9yICh2YXIgaSBpbiBwYXJlbnRzKSB7XG4gICAgaWYgKCFwYXJlbnRzW2ldIHx8ICFwYXJlbnRzW2ldLnBhcmFtcykgY29udGludWU7XG4gICAgcGFyZW50UGFyYW1zID0gb2JqZWN0S2V5cyhwYXJlbnRzW2ldLnBhcmFtcyk7XG4gICAgaWYgKCFwYXJlbnRQYXJhbXMubGVuZ3RoKSBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGogaW4gcGFyZW50UGFyYW1zKSB7XG4gICAgICBpZiAoaW5kZXhPZihpbmhlcml0TGlzdCwgcGFyZW50UGFyYW1zW2pdKSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGluaGVyaXRMaXN0LnB1c2gocGFyZW50UGFyYW1zW2pdKTtcbiAgICAgIGluaGVyaXRlZFtwYXJlbnRQYXJhbXNbal1dID0gY3VycmVudFBhcmFtc1twYXJlbnRQYXJhbXNbal1dO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXh0ZW5kKHt9LCBpbmhlcml0ZWQsIG5ld1BhcmFtcyk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBub24tc3RyaWN0IGNvbXBhcmlzb24gb2YgdGhlIHN1YnNldCBvZiB0d28gb2JqZWN0cywgZGVmaW5lZCBieSBhIGxpc3Qgb2Yga2V5cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgZmlyc3Qgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIHNlY29uZCBvYmplY3QuXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzIFRoZSBsaXN0IG9mIGtleXMgd2l0aGluIGVhY2ggb2JqZWN0IHRvIGNvbXBhcmUuIElmIHRoZSBsaXN0IGlzIGVtcHR5IG9yIG5vdCBzcGVjaWZpZWQsXG4gKiAgICAgICAgICAgICAgICAgICAgIGl0IGRlZmF1bHRzIHRvIHRoZSBsaXN0IG9mIGtleXMgaW4gYGFgLlxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGtleXMgbWF0Y2gsIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEZvcktleXMoYSwgYiwga2V5cykge1xuICBpZiAoIWtleXMpIHtcbiAgICBrZXlzID0gW107XG4gICAgZm9yICh2YXIgbiBpbiBhKSBrZXlzLnB1c2gobik7IC8vIFVzZWQgaW5zdGVhZCBvZiBPYmplY3Qua2V5cygpIGZvciBJRTggY29tcGF0aWJpbGl0eVxuICB9XG5cbiAgZm9yICh2YXIgaT0wOyBpPGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgayA9IGtleXNbaV07XG4gICAgaWYgKGFba10gIT0gYltrXSkgcmV0dXJuIGZhbHNlOyAvLyBOb3QgJz09PScsIHZhbHVlcyBhcmVuJ3QgbmVjZXNzYXJpbHkgbm9ybWFsaXplZFxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1YnNldCBvZiBhbiBvYmplY3QsIGJhc2VkIG9uIGEgbGlzdCBvZiBrZXlzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXNcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgYSBzdWJzZXQgb2YgYHZhbHVlc2AuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlckJ5S2V5cyhrZXlzLCB2YWx1ZXMpIHtcbiAgdmFyIGZpbHRlcmVkID0ge307XG5cbiAgZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGZpbHRlcmVkW25hbWVdID0gdmFsdWVzW25hbWVdO1xuICB9KTtcbiAgcmV0dXJuIGZpbHRlcmVkO1xufVxuXG4vLyBsaWtlIF8uaW5kZXhCeVxuLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLCBvciB5b3Ugd2FudCBsYXN0LW9uZS1pbiB0byB3aW5cbmZ1bmN0aW9uIGluZGV4QnkoYXJyYXksIHByb3BOYW1lKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yRWFjaChhcnJheSwgZnVuY3Rpb24oaXRlbSkge1xuICAgIHJlc3VsdFtpdGVtW3Byb3BOYW1lXV0gPSBpdGVtO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXh0cmFjdGVkIGZyb20gdW5kZXJzY29yZS5qc1xuLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbmZ1bmN0aW9uIHBpY2sob2JqKSB7XG4gIHZhciBjb3B5ID0ge307XG4gIHZhciBrZXlzID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShBcnJheS5wcm90b3R5cGUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICBmb3JFYWNoKGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSBjb3B5W2tleV0gPSBvYmpba2V5XTtcbiAgfSk7XG4gIHJldHVybiBjb3B5O1xufVxuXG4vLyBleHRyYWN0ZWQgZnJvbSB1bmRlcnNjb3JlLmpzXG4vLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb21pdHRpbmcgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG5mdW5jdGlvbiBvbWl0KG9iaikge1xuICB2YXIgY29weSA9IHt9O1xuICB2YXIga2V5cyA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoQXJyYXkucHJvdG90eXBlLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChpbmRleE9mKGtleXMsIGtleSkgPT0gLTEpIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBwbHVjayhjb2xsZWN0aW9uLCBrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBbXSA6IHt9O1xuXG4gIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsLCBpKSB7XG4gICAgcmVzdWx0W2ldID0gaXNGdW5jdGlvbihrZXkpID8ga2V5KHZhbCkgOiB2YWxba2V5XTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBjYWxsYmFjaykge1xuICB2YXIgYXJyYXkgPSBpc0FycmF5KGNvbGxlY3Rpb24pO1xuICB2YXIgcmVzdWx0ID0gYXJyYXkgPyBbXSA6IHt9O1xuICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbCwgaSkge1xuICAgIGlmIChjYWxsYmFjayh2YWwsIGkpKSB7XG4gICAgICByZXN1bHRbYXJyYXkgPyByZXN1bHQubGVuZ3RoIDogaV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHQgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gW10gOiB7fTtcblxuICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbCwgaSkge1xuICAgIHJlc3VsdFtpXSA9IGNhbGxiYWNrKHZhbCwgaSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBpc3N1ZSAjMjY3NiAjMjg4OVxuZnVuY3Rpb24gc2lsZW5jZVVuY2F1Z2h0SW5Qcm9taXNlIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbigpIHt9KSAmJiBwcm9taXNlO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgdWkucm91dGVyLnV0aWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgdWkucm91dGVyLnV0aWwgc3ViLW1vZHVsZVxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGEgZGVwZW5kZW5jeSBvZiBvdGhlciBzdWItbW9kdWxlcy4gRG8gbm90IGluY2x1ZGUgdGhpcyBtb2R1bGUgYXMgYSBkZXBlbmRlbmN5XG4gKiBpbiB5b3VyIGFuZ3VsYXIgYXBwICh1c2Uge0BsaW5rIHVpLnJvdXRlcn0gbW9kdWxlIGluc3RlYWQpLlxuICpcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJywgWyduZyddKTtcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXJcbiAqIFxuICogQHJlcXVpcmVzIHVpLnJvdXRlci51dGlsXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAjIHVpLnJvdXRlci5yb3V0ZXIgc3ViLW1vZHVsZVxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGEgZGVwZW5kZW5jeSBvZiBvdGhlciBzdWItbW9kdWxlcy4gRG8gbm90IGluY2x1ZGUgdGhpcyBtb2R1bGUgYXMgYSBkZXBlbmRlbmN5XG4gKiBpbiB5b3VyIGFuZ3VsYXIgYXBwICh1c2Uge0BsaW5rIHVpLnJvdXRlcn0gbW9kdWxlIGluc3RlYWQpLlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnJvdXRlcicsIFsndWkucm91dGVyLnV0aWwnXSk7XG5cbi8qKlxuICogQG5nZG9jIG92ZXJ2aWV3XG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGVcbiAqIFxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5yb3V0ZXJcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogIyB1aS5yb3V0ZXIuc3RhdGUgc3ViLW1vZHVsZVxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGEgZGVwZW5kZW5jeSBvZiB0aGUgbWFpbiB1aS5yb3V0ZXIgbW9kdWxlLiBEbyBub3QgaW5jbHVkZSB0aGlzIG1vZHVsZSBhcyBhIGRlcGVuZGVuY3lcbiAqIGluIHlvdXIgYW5ndWxhciBhcHAgKHVzZSB7QGxpbmsgdWkucm91dGVyfSBtb2R1bGUgaW5zdGVhZCkuXG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScsIFsndWkucm91dGVyLnJvdXRlcicsICd1aS5yb3V0ZXIudXRpbCddKTtcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIHVpLnJvdXRlclxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgdWkucm91dGVyXG4gKiBcbiAqICMjIFRoZSBtYWluIG1vZHVsZSBmb3IgdWkucm91dGVyIFxuICogVGhlcmUgYXJlIHNldmVyYWwgc3ViLW1vZHVsZXMgaW5jbHVkZWQgd2l0aCB0aGUgdWkucm91dGVyIG1vZHVsZSwgaG93ZXZlciBvbmx5IHRoaXMgbW9kdWxlIGlzIG5lZWRlZFxuICogYXMgYSBkZXBlbmRlbmN5IHdpdGhpbiB5b3VyIGFuZ3VsYXIgYXBwLiBUaGUgb3RoZXIgbW9kdWxlcyBhcmUgZm9yIG9yZ2FuaXphdGlvbiBwdXJwb3Nlcy4gXG4gKlxuICogVGhlIG1vZHVsZXMgYXJlOlxuICogKiB1aS5yb3V0ZXIgLSB0aGUgbWFpbiBcInVtYnJlbGxhXCIgbW9kdWxlXG4gKiAqIHVpLnJvdXRlci5yb3V0ZXIgLSBcbiAqIFxuICogKllvdSdsbCBuZWVkIHRvIGluY2x1ZGUgKipvbmx5KiogdGhpcyBtb2R1bGUgYXMgdGhlIGRlcGVuZGVuY3kgd2l0aGluIHlvdXIgYW5ndWxhciBhcHAuKlxuICogXG4gKiA8cHJlPlxuICogPCFkb2N0eXBlIGh0bWw+XG4gKiA8aHRtbCBuZy1hcHA9XCJteUFwcFwiPlxuICogPGhlYWQ+XG4gKiAgIDxzY3JpcHQgc3JjPVwianMvYW5ndWxhci5qc1wiPjwvc2NyaXB0PlxuICogICA8IS0tIEluY2x1ZGUgdGhlIHVpLXJvdXRlciBzY3JpcHQgLS0+XG4gKiAgIDxzY3JpcHQgc3JjPVwianMvYW5ndWxhci11aS1yb3V0ZXIubWluLmpzXCI+PC9zY3JpcHQ+XG4gKiAgIDxzY3JpcHQ+XG4gKiAgICAgLy8gLi4uYW5kIGFkZCAndWkucm91dGVyJyBhcyBhIGRlcGVuZGVuY3lcbiAqICAgICB2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAqICAgPC9zY3JpcHQ+XG4gKiA8L2hlYWQ+XG4gKiA8Ym9keT5cbiAqIDwvYm9keT5cbiAqIDwvaHRtbD5cbiAqIDwvcHJlPlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyJywgWyd1aS5yb3V0ZXIuc3RhdGUnXSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuY29tcGF0JywgWyd1aS5yb3V0ZXInXSk7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHJlc29sdmVcbiAqXG4gKiBAcmVxdWlyZXMgJHFcbiAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1hbmFnZXMgcmVzb2x1dGlvbiBvZiAoYWN5Y2xpYykgZ3JhcGhzIG9mIHByb21pc2VzLlxuICovXG4kUmVzb2x2ZS4kaW5qZWN0ID0gWyckcScsICckaW5qZWN0b3InXTtcbmZ1bmN0aW9uICRSZXNvbHZlKCAgJHEsICAgICRpbmplY3Rvcikge1xuICBcbiAgdmFyIFZJU0lUX0lOX1BST0dSRVNTID0gMSxcbiAgICAgIFZJU0lUX0RPTkUgPSAyLFxuICAgICAgTk9USElORyA9IHt9LFxuICAgICAgTk9fREVQRU5ERU5DSUVTID0gW10sXG4gICAgICBOT19MT0NBTFMgPSBOT1RISU5HLFxuICAgICAgTk9fUEFSRU5UID0gZXh0ZW5kKCRxLndoZW4oTk9USElORyksIHsgJCRwcm9taXNlczogTk9USElORywgJCR2YWx1ZXM6IE5PVEhJTkcgfSk7XG4gIFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHJlc29sdmUjc3R1ZHlcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTdHVkaWVzIGEgc2V0IG9mIGludm9jYWJsZXMgdGhhdCBhcmUgbGlrZWx5IHRvIGJlIHVzZWQgbXVsdGlwbGUgdGltZXMuXG4gICAqIDxwcmU+XG4gICAqICRyZXNvbHZlLnN0dWR5KGludm9jYWJsZXMpKGxvY2FscywgcGFyZW50LCBzZWxmKVxuICAgKiA8L3ByZT5cbiAgICogaXMgZXF1aXZhbGVudCB0b1xuICAgKiA8cHJlPlxuICAgKiAkcmVzb2x2ZS5yZXNvbHZlKGludm9jYWJsZXMsIGxvY2FscywgcGFyZW50LCBzZWxmKVxuICAgKiA8L3ByZT5cbiAgICogYnV0IHRoZSBmb3JtZXIgaXMgbW9yZSBlZmZpY2llbnQgKGluIGZhY3QgYHJlc29sdmVgIGp1c3QgY2FsbHMgYHN0dWR5YCBcbiAgICogaW50ZXJuYWxseSkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnZvY2FibGVzIEludm9jYWJsZSBvYmplY3RzXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRvIHBhc3MgaW4gbG9jYWxzLCBwYXJlbnQgYW5kIHNlbGZcbiAgICovXG4gIHRoaXMuc3R1ZHkgPSBmdW5jdGlvbiAoaW52b2NhYmxlcykge1xuICAgIGlmICghaXNPYmplY3QoaW52b2NhYmxlcykpIHRocm93IG5ldyBFcnJvcihcIidpbnZvY2FibGVzJyBtdXN0IGJlIGFuIG9iamVjdFwiKTtcbiAgICB2YXIgaW52b2NhYmxlS2V5cyA9IG9iamVjdEtleXMoaW52b2NhYmxlcyB8fCB7fSk7XG4gICAgXG4gICAgLy8gUGVyZm9ybSBhIHRvcG9sb2dpY2FsIHNvcnQgb2YgaW52b2NhYmxlcyB0byBidWlsZCBhbiBvcmRlcmVkIHBsYW5cbiAgICB2YXIgcGxhbiA9IFtdLCBjeWNsZSA9IFtdLCB2aXNpdGVkID0ge307XG4gICAgZnVuY3Rpb24gdmlzaXQodmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZpc2l0ZWRba2V5XSA9PT0gVklTSVRfRE9ORSkgcmV0dXJuO1xuICAgICAgXG4gICAgICBjeWNsZS5wdXNoKGtleSk7XG4gICAgICBpZiAodmlzaXRlZFtrZXldID09PSBWSVNJVF9JTl9QUk9HUkVTUykge1xuICAgICAgICBjeWNsZS5zcGxpY2UoMCwgaW5kZXhPZihjeWNsZSwga2V5KSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkN5Y2xpYyBkZXBlbmRlbmN5OiBcIiArIGN5Y2xlLmpvaW4oXCIgLT4gXCIpKTtcbiAgICAgIH1cbiAgICAgIHZpc2l0ZWRba2V5XSA9IFZJU0lUX0lOX1BST0dSRVNTO1xuICAgICAgXG4gICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHBsYW4ucHVzaChrZXksIFsgZnVuY3Rpb24oKSB7IHJldHVybiAkaW5qZWN0b3IuZ2V0KHZhbHVlKTsgfV0sIE5PX0RFUEVOREVOQ0lFUyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGFyYW1zID0gJGluamVjdG9yLmFubm90YXRlKHZhbHVlKTtcbiAgICAgICAgZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgIGlmIChwYXJhbSAhPT0ga2V5ICYmIGludm9jYWJsZXMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB2aXNpdChpbnZvY2FibGVzW3BhcmFtXSwgcGFyYW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcGxhbi5wdXNoKGtleSwgdmFsdWUsIHBhcmFtcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGN5Y2xlLnBvcCgpO1xuICAgICAgdmlzaXRlZFtrZXldID0gVklTSVRfRE9ORTtcbiAgICB9XG4gICAgZm9yRWFjaChpbnZvY2FibGVzLCB2aXNpdCk7XG4gICAgaW52b2NhYmxlcyA9IGN5Y2xlID0gdmlzaXRlZCA9IG51bGw7IC8vIHBsYW4gaXMgYWxsIHRoYXQncyByZXF1aXJlZFxuICAgIFxuICAgIGZ1bmN0aW9uIGlzUmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZS50aGVuICYmIHZhbHVlLiQkcHJvbWlzZXM7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiAobG9jYWxzLCBwYXJlbnQsIHNlbGYpIHtcbiAgICAgIGlmIChpc1Jlc29sdmUobG9jYWxzKSAmJiBzZWxmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VsZiA9IHBhcmVudDsgcGFyZW50ID0gbG9jYWxzOyBsb2NhbHMgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCFsb2NhbHMpIGxvY2FscyA9IE5PX0xPQ0FMUztcbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChsb2NhbHMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIidsb2NhbHMnIG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuICAgICAgfSAgICAgICBcbiAgICAgIGlmICghcGFyZW50KSBwYXJlbnQgPSBOT19QQVJFTlQ7XG4gICAgICBlbHNlIGlmICghaXNSZXNvbHZlKHBhcmVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ3BhcmVudCcgbXVzdCBiZSBhIHByb21pc2UgcmV0dXJuZWQgYnkgJHJlc29sdmUucmVzb2x2ZSgpXCIpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBUbyBjb21wbGV0ZSB0aGUgb3ZlcmFsbCByZXNvbHV0aW9uLCB3ZSBoYXZlIHRvIHdhaXQgZm9yIHRoZSBwYXJlbnRcbiAgICAgIC8vIHByb21pc2UgYW5kIGZvciB0aGUgcHJvbWlzZSBmb3IgZWFjaCBpbnZva2FibGUgaW4gb3VyIHBsYW4uXG4gICAgICB2YXIgcmVzb2x1dGlvbiA9ICRxLmRlZmVyKCksXG4gICAgICAgICAgcmVzdWx0ID0gc2lsZW5jZVVuY2F1Z2h0SW5Qcm9taXNlKHJlc29sdXRpb24ucHJvbWlzZSksXG4gICAgICAgICAgcHJvbWlzZXMgPSByZXN1bHQuJCRwcm9taXNlcyA9IHt9LFxuICAgICAgICAgIHZhbHVlcyA9IGV4dGVuZCh7fSwgbG9jYWxzKSxcbiAgICAgICAgICB3YWl0ID0gMSArIHBsYW4ubGVuZ3RoLzMsXG4gICAgICAgICAgbWVyZ2VkID0gZmFsc2U7XG5cbiAgICAgIHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZShyZXN1bHQpO1xuICAgICAgICAgIFxuICAgICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgICAgLy8gTWVyZ2UgcGFyZW50IHZhbHVlcyB3ZSBoYXZlbid0IGdvdCB5ZXQgYW5kIHB1Ymxpc2ggb3VyIG93biAkJHZhbHVlc1xuICAgICAgICBpZiAoIS0td2FpdCkge1xuICAgICAgICAgIGlmICghbWVyZ2VkKSBtZXJnZSh2YWx1ZXMsIHBhcmVudC4kJHZhbHVlcyk7IFxuICAgICAgICAgIHJlc3VsdC4kJHZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICByZXN1bHQuJCRwcm9taXNlcyA9IHJlc3VsdC4kJHByb21pc2VzIHx8IHRydWU7IC8vIGtlZXAgZm9yIGlzUmVzb2x2ZSgpXG4gICAgICAgICAgZGVsZXRlIHJlc3VsdC4kJGluaGVyaXRlZFZhbHVlcztcbiAgICAgICAgICByZXNvbHV0aW9uLnJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBmdW5jdGlvbiBmYWlsKHJlYXNvbikge1xuICAgICAgICByZXN1bHQuJCRmYWlsdXJlID0gcmVhc29uO1xuICAgICAgICByZXNvbHV0aW9uLnJlamVjdChyZWFzb24pO1xuICAgICAgfVxuXG4gICAgICAvLyBTaG9ydC1jaXJjdWl0IGlmIHBhcmVudCBoYXMgYWxyZWFkeSBmYWlsZWRcbiAgICAgIGlmIChpc0RlZmluZWQocGFyZW50LiQkZmFpbHVyZSkpIHtcbiAgICAgICAgZmFpbChwYXJlbnQuJCRmYWlsdXJlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHBhcmVudC4kJGluaGVyaXRlZFZhbHVlcykge1xuICAgICAgICBtZXJnZSh2YWx1ZXMsIG9taXQocGFyZW50LiQkaW5oZXJpdGVkVmFsdWVzLCBpbnZvY2FibGVLZXlzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1lcmdlIHBhcmVudCB2YWx1ZXMgaWYgdGhlIHBhcmVudCBoYXMgYWxyZWFkeSByZXNvbHZlZCwgb3IgbWVyZ2VcbiAgICAgIC8vIHBhcmVudCBwcm9taXNlcyBhbmQgd2FpdCBpZiB0aGUgcGFyZW50IHJlc29sdmUgaXMgc3RpbGwgaW4gcHJvZ3Jlc3MuXG4gICAgICBleHRlbmQocHJvbWlzZXMsIHBhcmVudC4kJHByb21pc2VzKTtcbiAgICAgIGlmIChwYXJlbnQuJCR2YWx1ZXMpIHtcbiAgICAgICAgbWVyZ2VkID0gbWVyZ2UodmFsdWVzLCBvbWl0KHBhcmVudC4kJHZhbHVlcywgaW52b2NhYmxlS2V5cykpO1xuICAgICAgICByZXN1bHQuJCRpbmhlcml0ZWRWYWx1ZXMgPSBvbWl0KHBhcmVudC4kJHZhbHVlcywgaW52b2NhYmxlS2V5cyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXJlbnQuJCRpbmhlcml0ZWRWYWx1ZXMpIHtcbiAgICAgICAgICByZXN1bHQuJCRpbmhlcml0ZWRWYWx1ZXMgPSBvbWl0KHBhcmVudC4kJGluaGVyaXRlZFZhbHVlcywgaW52b2NhYmxlS2V5cyk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBwYXJlbnQudGhlbihkb25lLCBmYWlsKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUHJvY2VzcyBlYWNoIGludm9jYWJsZSBpbiB0aGUgcGxhbiwgYnV0IGlnbm9yZSBhbnkgd2hlcmUgYSBsb2NhbCBvZiB0aGUgc2FtZSBuYW1lIGV4aXN0cy5cbiAgICAgIGZvciAodmFyIGk9MCwgaWk9cGxhbi5sZW5ndGg7IGk8aWk7IGkrPTMpIHtcbiAgICAgICAgaWYgKGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShwbGFuW2ldKSkgZG9uZSgpO1xuICAgICAgICBlbHNlIGludm9rZShwbGFuW2ldLCBwbGFuW2krMV0sIHBsYW5baSsyXSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGZ1bmN0aW9uIGludm9rZShrZXksIGludm9jYWJsZSwgcGFyYW1zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGRlZmVycmVkIGZvciB0aGlzIGludm9jYXRpb24uIEZhaWx1cmVzIHdpbGwgcHJvcGFnYXRlIHRvIHRoZSByZXNvbHV0aW9uIGFzIHdlbGwuXG4gICAgICAgIHZhciBpbnZvY2F0aW9uID0gJHEuZGVmZXIoKSwgd2FpdFBhcmFtcyA9IDA7XG4gICAgICAgIGZ1bmN0aW9uIG9uZmFpbHVyZShyZWFzb24pIHtcbiAgICAgICAgICBpbnZvY2F0aW9uLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgIGZhaWwocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXYWl0IGZvciBhbnkgcGFyYW1ldGVyIHRoYXQgd2UgaGF2ZSBhIHByb21pc2UgZm9yIChlaXRoZXIgZnJvbSBwYXJlbnQgb3IgZnJvbSB0aGlzXG4gICAgICAgIC8vIHJlc29sdmU7IGluIHRoYXQgY2FzZSBzdHVkeSgpIHdpbGwgaGF2ZSBtYWRlIHN1cmUgaXQncyBvcmRlcmVkIGJlZm9yZSB1cyBpbiB0aGUgcGxhbikuXG4gICAgICAgIGZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiAoZGVwKSB7XG4gICAgICAgICAgaWYgKHByb21pc2VzLmhhc093blByb3BlcnR5KGRlcCkgJiYgIWxvY2Fscy5oYXNPd25Qcm9wZXJ0eShkZXApKSB7XG4gICAgICAgICAgICB3YWl0UGFyYW1zKys7XG4gICAgICAgICAgICBwcm9taXNlc1tkZXBdLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICB2YWx1ZXNbZGVwXSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgaWYgKCEoLS13YWl0UGFyYW1zKSkgcHJvY2VlZCgpO1xuICAgICAgICAgICAgfSwgb25mYWlsdXJlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXdhaXRQYXJhbXMpIHByb2NlZWQoKTtcbiAgICAgICAgZnVuY3Rpb24gcHJvY2VlZCgpIHtcbiAgICAgICAgICBpZiAoaXNEZWZpbmVkKHJlc3VsdC4kJGZhaWx1cmUpKSByZXR1cm47XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGludm9jYXRpb24ucmVzb2x2ZSgkaW5qZWN0b3IuaW52b2tlKGludm9jYWJsZSwgc2VsZiwgdmFsdWVzKSk7XG4gICAgICAgICAgICBpbnZvY2F0aW9uLnByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHZhbHVlc1trZXldID0gcmVzdWx0O1xuICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9LCBvbmZhaWx1cmUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIG9uZmFpbHVyZShlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHVibGlzaCBwcm9taXNlIHN5bmNocm9ub3VzbHk7IGludm9jYXRpb25zIGZ1cnRoZXIgZG93biBpbiB0aGUgcGxhbiBtYXkgZGVwZW5kIG9uIGl0LlxuICAgICAgICBwcm9taXNlc1trZXldID0gc2lsZW5jZVVuY2F1Z2h0SW5Qcm9taXNlKGludm9jYXRpb24ucHJvbWlzZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHJlc29sdmUjcmVzb2x2ZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHJlc29sdmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlc29sdmVzIGEgc2V0IG9mIGludm9jYWJsZXMuIEFuIGludm9jYWJsZSBpcyBhIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgdmlhIFxuICAgKiBgJGluamVjdG9yLmludm9rZSgpYCwgYW5kIGNhbiBoYXZlIGFuIGFyYml0cmFyeSBudW1iZXIgb2YgZGVwZW5kZW5jaWVzLiBcbiAgICogQW4gaW52b2NhYmxlIGNhbiBlaXRoZXIgcmV0dXJuIGEgdmFsdWUgZGlyZWN0bHksXG4gICAqIG9yIGEgYCRxYCBwcm9taXNlLiBJZiBhIHByb21pc2UgaXMgcmV0dXJuZWQgaXQgd2lsbCBiZSByZXNvbHZlZCBhbmQgdGhlIFxuICAgKiByZXN1bHRpbmcgdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuIERlcGVuZGVuY2llcyBvZiBpbnZvY2FibGVzIGFyZSByZXNvbHZlZCBcbiAgICogKGluIHRoaXMgb3JkZXIgb2YgcHJlY2VkZW5jZSlcbiAgICpcbiAgICogLSBmcm9tIHRoZSBzcGVjaWZpZWQgYGxvY2Fsc2BcbiAgICogLSBmcm9tIGFub3RoZXIgaW52b2NhYmxlIHRoYXQgaXMgcGFydCBvZiB0aGlzIGAkcmVzb2x2ZWAgY2FsbFxuICAgKiAtIGZyb20gYW4gaW52b2NhYmxlIHRoYXQgaXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAgXG4gICAqICAgKG9yIHJlY3Vyc2l2ZWx5XG4gICAqIC0gZnJvbSBhbnkgYW5jZXN0b3IgYCRyZXNvbHZlYCBvZiB0aGF0IHBhcmVudCkuXG4gICAqXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgYCRyZXNvbHZlYCBpcyBhIHByb21pc2UgZm9yIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIFxuICAgKiAoaW4gdGhpcyBvcmRlciBvZiBwcmVjZWRlbmNlKVxuICAgKlxuICAgKiAtIGFueSBgbG9jYWxzYCAoaWYgc3BlY2lmaWVkKVxuICAgKiAtIHRoZSByZXNvbHZlZCByZXR1cm4gdmFsdWVzIG9mIGFsbCBpbmplY3RhYmxlc1xuICAgKiAtIGFueSB2YWx1ZXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAgKGlmIHNwZWNpZmllZClcbiAgICpcbiAgICogVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlIGFmdGVyIHRoZSBgcGFyZW50YCBwcm9taXNlIChpZiBhbnkpIGFuZCBhbGwgcHJvbWlzZXMgXG4gICAqIHJldHVybmVkIGJ5IGluamVjdGFibGVzIGhhdmUgYmVlbiByZXNvbHZlZC4gSWYgYW55IGludm9jYWJsZSBcbiAgICogKG9yIGAkaW5qZWN0b3IuaW52b2tlYCkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgb3IgaWYgYSBwcm9taXNlIHJldHVybmVkIGJ5IGFuIFxuICAgKiBpbnZvY2FibGUgaXMgcmVqZWN0ZWQsIHRoZSBgJHJlc29sdmVgIHByb21pc2UgaXMgaW1tZWRpYXRlbHkgcmVqZWN0ZWQgd2l0aCB0aGUgXG4gICAqIHNhbWUgZXJyb3IuIEEgcmVqZWN0aW9uIG9mIGEgYHBhcmVudGAgcHJvbWlzZSAoaWYgc3BlY2lmaWVkKSB3aWxsIGxpa2V3aXNlIGJlIFxuICAgKiBwcm9wYWdhdGVkIGltbWVkaWF0ZWx5LiBPbmNlIHRoZSBgJHJlc29sdmVgIHByb21pc2UgaGFzIGJlZW4gcmVqZWN0ZWQsIG5vIFxuICAgKiBmdXJ0aGVyIGludm9jYWJsZXMgd2lsbCBiZSBjYWxsZWQuXG4gICAqIFxuICAgKiBDeWNsaWMgZGVwZW5kZW5jaWVzIGJldHdlZW4gaW52b2NhYmxlcyBhcmUgbm90IHBlcm1pdHRlZCBhbmQgd2lsbCBjYXVzZSBgJHJlc29sdmVgXG4gICAqIHRvIHRocm93IGFuIGVycm9yLiBBcyBhIHNwZWNpYWwgY2FzZSwgYW4gaW5qZWN0YWJsZSBjYW4gZGVwZW5kIG9uIGEgcGFyYW1ldGVyIFxuICAgKiB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGluamVjdGFibGUsIHdoaWNoIHdpbGwgYmUgZnVsZmlsbGVkIGZyb20gdGhlIGBwYXJlbnRgIFxuICAgKiBpbmplY3RhYmxlIG9mIHRoZSBzYW1lIG5hbWUuIFRoaXMgYWxsb3dzIGluaGVyaXRlZCB2YWx1ZXMgdG8gYmUgZGVjb3JhdGVkLiBcbiAgICogTm90ZSB0aGF0IGluIHRoaXMgY2FzZSBhbnkgb3RoZXIgaW5qZWN0YWJsZSBpbiB0aGUgc2FtZSBgJHJlc29sdmVgIHdpdGggdGhlIHNhbWVcbiAgICogZGVwZW5kZW5jeSB3b3VsZCBzZWUgdGhlIGRlY29yYXRlZCB2YWx1ZSwgbm90IHRoZSBpbmhlcml0ZWQgdmFsdWUuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBtaXNzaW5nIGRlcGVuZGVuY2llcyAtLSB1bmxpa2UgY3ljbGljIGRlcGVuZGVuY2llcyAtLSB3aWxsIGNhdXNlIGFuIFxuICAgKiAoYXN5bmNocm9ub3VzKSByZWplY3Rpb24gb2YgdGhlIGAkcmVzb2x2ZWAgcHJvbWlzZSByYXRoZXIgdGhhbiBhIChzeW5jaHJvbm91cykgXG4gICAqIGV4Y2VwdGlvbi5cbiAgICpcbiAgICogSW52b2NhYmxlcyBhcmUgaW52b2tlZCBlYWdlcmx5IGFzIHNvb24gYXMgYWxsIGRlcGVuZGVuY2llcyBhcmUgYXZhaWxhYmxlLiBcbiAgICogVGhpcyBpcyB0cnVlIGV2ZW4gZm9yIGRlcGVuZGVuY2llcyBpbmhlcml0ZWQgZnJvbSBhIGBwYXJlbnRgIGNhbGwgdG8gYCRyZXNvbHZlYC5cbiAgICpcbiAgICogQXMgYSBzcGVjaWFsIGNhc2UsIGFuIGludm9jYWJsZSBjYW4gYmUgYSBzdHJpbmcsIGluIHdoaWNoIGNhc2UgaXQgaXMgdGFrZW4gdG8gXG4gICAqIGJlIGEgc2VydmljZSBuYW1lIHRvIGJlIHBhc3NlZCB0byBgJGluamVjdG9yLmdldCgpYC4gVGhpcyBpcyBzdXBwb3J0ZWQgcHJpbWFyaWx5IFxuICAgKiBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2l0aCB0aGUgYHJlc29sdmVgIHByb3BlcnR5IG9mIGAkcm91dGVQcm92aWRlcmAgXG4gICAqIHJvdXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGludm9jYWJsZXMgZnVuY3Rpb25zIHRvIGludm9rZSBvciBcbiAgICogYCRpbmplY3RvcmAgc2VydmljZXMgdG8gZmV0Y2guXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsb2NhbHMgIHZhbHVlcyB0byBtYWtlIGF2YWlsYWJsZSB0byB0aGUgaW5qZWN0YWJsZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmVudCAgYSBwcm9taXNlIHJldHVybmVkIGJ5IGFub3RoZXIgY2FsbCB0byBgJHJlc29sdmVgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc2VsZiAgdGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kc1xuICAgKiBAcmV0dXJuIHtvYmplY3R9IFByb21pc2UgZm9yIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSByZXNvbHZlZCByZXR1cm4gdmFsdWVcbiAgICogb2YgYWxsIGludm9jYWJsZXMsIGFzIHdlbGwgYXMgYW55IGluaGVyaXRlZCBhbmQgbG9jYWwgdmFsdWVzLlxuICAgKi9cbiAgdGhpcy5yZXNvbHZlID0gZnVuY3Rpb24gKGludm9jYWJsZXMsIGxvY2FscywgcGFyZW50LCBzZWxmKSB7XG4gICAgcmV0dXJuIHRoaXMuc3R1ZHkoaW52b2NhYmxlcykobG9jYWxzLCBwYXJlbnQsIHNlbGYpO1xuICB9O1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5zZXJ2aWNlKCckcmVzb2x2ZScsICRSZXNvbHZlKTtcblxuXG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm92aWRlciBmb3IgJHRlbXBsYXRlRmFjdG9yeS4gTWFuYWdlcyB3aGljaCB0ZW1wbGF0ZS1sb2FkaW5nIG1lY2hhbmlzbSB0b1xuICogdXNlLCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBtb3N0IHJlY2VudCBvbmUgKCR0ZW1wbGF0ZVJlcXVlc3Qgb24gQW5ndWxhclxuICogdmVyc2lvbnMgc3RhcnRpbmcgZnJvbSAxLjMsICRodHRwIG90aGVyd2lzZSkuXG4gKi9cbmZ1bmN0aW9uIFRlbXBsYXRlRmFjdG9yeVByb3ZpZGVyKCkge1xuICB2YXIgc2hvdWxkVW5zYWZlbHlVc2VIdHRwID0gYW5ndWxhci52ZXJzaW9uLm1pbm9yIDwgMztcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlQcm92aWRlciNzaG91bGRVbnNhZmVseVVzZUh0dHBcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRm9yY2VzICR0ZW1wbGF0ZUZhY3RvcnkgdG8gdXNlICRodHRwIGluc3RlYWQgb2YgJHRlbXBsYXRlUmVxdWVzdC4gVGhpc1xuICAgKiBtaWdodCBjYXVzZSBYU1MsIGFzICRodHRwIGRvZXNuJ3QgZW5mb3JjZSB0aGUgcmVndWxhciBzZWN1cml0eSBjaGVja3MgZm9yXG4gICAqIHRlbXBsYXRlcyB0aGF0IGhhdmUgYmVlbiBpbnRyb2R1Y2VkIGluIEFuZ3VsYXIgMS4zLiBOb3RlIHRoYXQgc2V0dGluZyB0aGlzXG4gICAqIHRvIGZhbHNlIG9uIEFuZ3VsYXIgb2xkZXIgdGhhbiAxLjMueCB3aWxsIGNyYXNoLCBhcyB0aGUgJHRlbXBsYXRlUmVxdWVzdFxuICAgKiBzZXJ2aWNlIChhbmQgdGhlIHNlY3VyaXR5IGNoZWNrcykgYXJlIG5vdCBpbXBsZW1lbnRlZCBvbiB0aGVzZSB2ZXJzaW9ucy5cbiAgICpcbiAgICogU2VlIHRoZSAkc2NlIGRvY3VtZW50YXRpb24sIHNlY3Rpb25cbiAgICogPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy9zZXJ2aWNlLyRzY2UjaW1wYWN0LW9uLWxvYWRpbmctdGVtcGxhdGVzXCI+XG4gICAqIEltcGFjdCBvbiBsb2FkaW5nIHRlbXBsYXRlczwvYT4gZm9yIG1vcmUgZGV0YWlscyBhYm91dCB0aGlzIG1lY2hhbmlzbS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKi9cbiAgdGhpcy5zaG91bGRVbnNhZmVseVVzZUh0dHAgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHNob3VsZFVuc2FmZWx5VXNlSHR0cCA9ICEhdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBvYmplY3RcbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKlxuICAgKiBAcmVxdWlyZXMgJGh0dHBcbiAgICogQHJlcXVpcmVzICR0ZW1wbGF0ZUNhY2hlXG4gICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNlcnZpY2UuIE1hbmFnZXMgbG9hZGluZyBvZiB0ZW1wbGF0ZXMuXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRodHRwLCAkdGVtcGxhdGVDYWNoZSwgJGluamVjdG9yKXtcbiAgICByZXR1cm4gbmV3IFRlbXBsYXRlRmFjdG9yeSgkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRpbmplY3Rvciwgc2hvdWxkVW5zYWZlbHlVc2VIdHRwKTt9XTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAqXG4gKiBAcmVxdWlyZXMgJGh0dHBcbiAqIEByZXF1aXJlcyAkdGVtcGxhdGVDYWNoZVxuICogQHJlcXVpcmVzICRpbmplY3RvclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VydmljZS4gTWFuYWdlcyBsb2FkaW5nIG9mIHRlbXBsYXRlcy5cbiAqL1xuZnVuY3Rpb24gVGVtcGxhdGVGYWN0b3J5KCRodHRwLCAkdGVtcGxhdGVDYWNoZSwgJGluamVjdG9yLCBzaG91bGRVbnNhZmVseVVzZUh0dHApIHtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbUNvbmZpZ1xuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIHRlbXBsYXRlIGZyb20gYSBjb25maWd1cmF0aW9uIG9iamVjdC4gXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHdoaWNoIHRvIGxvYWQgYSB0ZW1wbGF0ZS4gXG4gICAqIFRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgc2VhcmNoIGluIHRoZSBzcGVjaWZpZWQgb3JkZXIsIGFuZCB0aGUgZmlyc3Qgb25lIFxuICAgKiB0aGF0IGlzIGRlZmluZWQgaXMgdXNlZCB0byBjcmVhdGUgdGhlIHRlbXBsYXRlOlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IGNvbmZpZy50ZW1wbGF0ZSBodG1sIHN0cmluZyB0ZW1wbGF0ZSBvciBmdW5jdGlvbiB0byBcbiAgICogbG9hZCB2aWEge0BsaW5rIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVN0cmluZyBmcm9tU3RyaW5nfS5cbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBjb25maWcudGVtcGxhdGVVcmwgdXJsIHRvIGxvYWQgb3IgYSBmdW5jdGlvbiByZXR1cm5pbmcgXG4gICAqIHRoZSB1cmwgdG8gbG9hZCB2aWEge0BsaW5rIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVVybCBmcm9tVXJsfS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnLnRlbXBsYXRlUHJvdmlkZXIgZnVuY3Rpb24gdG8gaW52b2tlIHZpYSBcbiAgICoge0BsaW5rIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVByb3ZpZGVyIGZyb21Qcm92aWRlcn0uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgIFBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsb2NhbHMgTG9jYWxzIHRvIHBhc3MgdG8gYGludm9rZWAgaWYgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCBcbiAgICogdmlhIGEgYHRlbXBsYXRlUHJvdmlkZXJgLiBEZWZhdWx0cyB0byBgeyBwYXJhbXM6IHBhcmFtcyB9YC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfG9iamVjdH0gIFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgZm9yIFxuICAgKiB0aGF0IHN0cmluZyxvciBgbnVsbGAgaWYgbm8gdGVtcGxhdGUgaXMgY29uZmlndXJlZC5cbiAgICovXG4gIHRoaXMuZnJvbUNvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcsIHBhcmFtcywgbG9jYWxzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGlzRGVmaW5lZChjb25maWcudGVtcGxhdGUpID8gdGhpcy5mcm9tU3RyaW5nKGNvbmZpZy50ZW1wbGF0ZSwgcGFyYW1zKSA6XG4gICAgICBpc0RlZmluZWQoY29uZmlnLnRlbXBsYXRlVXJsKSA/IHRoaXMuZnJvbVVybChjb25maWcudGVtcGxhdGVVcmwsIHBhcmFtcykgOlxuICAgICAgaXNEZWZpbmVkKGNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyKSA/IHRoaXMuZnJvbVByb3ZpZGVyKGNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyLCBwYXJhbXMsIGxvY2FscykgOlxuICAgICAgbnVsbFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21TdHJpbmdcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBmcm9tIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHRlbXBsYXRlIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgb3IgZnVuY3Rpb24gdGhhdCBcbiAgICogcmV0dXJucyBhbiBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIFBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3xvYmplY3R9IFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgZm9yIHRoYXQgXG4gICAqIHN0cmluZy5cbiAgICovXG4gIHRoaXMuZnJvbVN0cmluZyA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGVtcGxhdGUpID8gdGVtcGxhdGUocGFyYW1zKSA6IHRlbXBsYXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeSNmcm9tVXJsXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gICAqIFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogTG9hZHMgYSB0ZW1wbGF0ZSBmcm9tIHRoZSBhIFVSTCB2aWEgYCRodHRwYCBhbmQgYCR0ZW1wbGF0ZUNhY2hlYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8RnVuY3Rpb259IHVybCB1cmwgb2YgdGhlIHRlbXBsYXRlIHRvIGxvYWQsIG9yIGEgZnVuY3Rpb24gXG4gICAqIHRoYXQgcmV0dXJucyBhIHVybC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBQYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIHVybCBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7c3RyaW5nfFByb21pc2UuPHN0cmluZz59IFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgXG4gICAqIGZvciB0aGF0IHN0cmluZy5cbiAgICovXG4gIHRoaXMuZnJvbVVybCA9IGZ1bmN0aW9uICh1cmwsIHBhcmFtcykge1xuICAgIGlmIChpc0Z1bmN0aW9uKHVybCkpIHVybCA9IHVybChwYXJhbXMpO1xuICAgIGlmICh1cmwgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgZWxzZSB7XG4gICAgICBpZighc2hvdWxkVW5zYWZlbHlVc2VIdHRwKSB7XG4gICAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KCckdGVtcGxhdGVSZXF1ZXN0JykodXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkaHR0cFxuICAgICAgICAgIC5nZXQodXJsLCB7IGNhY2hlOiAkdGVtcGxhdGVDYWNoZSwgaGVhZGVyczogeyBBY2NlcHQ6ICd0ZXh0L2h0bWwnIH19KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS5kYXRhOyB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21Qcm92aWRlclxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIHRlbXBsYXRlIGJ5IGludm9raW5nIGFuIGluamVjdGFibGUgcHJvdmlkZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyIEZ1bmN0aW9uIHRvIGludm9rZSB2aWEgYCRpbmplY3Rvci5pbnZva2VgXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgUGFyYW1ldGVycyBmb3IgdGhlIHRlbXBsYXRlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gbG9jYWxzIExvY2FscyB0byBwYXNzIHRvIGBpbnZva2VgLiBEZWZhdWx0cyB0byBcbiAgICogYHsgcGFyYW1zOiBwYXJhbXMgfWAuXG4gICAqIEByZXR1cm4ge3N0cmluZ3xQcm9taXNlLjxzdHJpbmc+fSBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIFxuICAgKiBmb3IgdGhhdCBzdHJpbmcuXG4gICAqL1xuICB0aGlzLmZyb21Qcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlciwgcGFyYW1zLCBsb2NhbHMpIHtcbiAgICByZXR1cm4gJGluamVjdG9yLmludm9rZShwcm92aWRlciwgbnVsbCwgbG9jYWxzIHx8IHsgcGFyYW1zOiBwYXJhbXMgfSk7XG4gIH07XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIudXRpbCcpLnByb3ZpZGVyKCckdGVtcGxhdGVGYWN0b3J5JywgVGVtcGxhdGVGYWN0b3J5UHJvdmlkZXIpO1xuXG52YXIgJCRVTUZQOyAvLyByZWZlcmVuY2UgdG8gJFVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1hdGNoZXMgVVJMcyBhZ2FpbnN0IHBhdHRlcm5zIGFuZCBleHRyYWN0cyBuYW1lZCBwYXJhbWV0ZXJzIGZyb20gdGhlIHBhdGggb3IgdGhlIHNlYXJjaFxuICogcGFydCBvZiB0aGUgVVJMLiBBIFVSTCBwYXR0ZXJuIGNvbnNpc3RzIG9mIGEgcGF0aCBwYXR0ZXJuLCBvcHRpb25hbGx5IGZvbGxvd2VkIGJ5ICc/JyBhbmQgYSBsaXN0XG4gKiBvZiBzZWFyY2ggcGFyYW1ldGVycy4gTXVsdGlwbGUgc2VhcmNoIHBhcmFtZXRlciBuYW1lcyBhcmUgc2VwYXJhdGVkIGJ5ICcmJy4gU2VhcmNoIHBhcmFtZXRlcnNcbiAqIGRvIG5vdCBpbmZsdWVuY2Ugd2hldGhlciBvciBub3QgYSBVUkwgaXMgbWF0Y2hlZCwgYnV0IHRoZWlyIHZhbHVlcyBhcmUgcGFzc2VkIHRocm91Z2ggaW50b1xuICogdGhlIG1hdGNoZWQgcGFyYW1ldGVycyByZXR1cm5lZCBieSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI21ldGhvZHNfZXhlYyBleGVjfS5cbiAqXG4gKiBQYXRoIHBhcmFtZXRlciBwbGFjZWhvbGRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyBzaW1wbGUgY29sb24vY2F0Y2gtYWxsIHN5bnRheCBvciBjdXJseSBicmFjZVxuICogc3ludGF4LCB3aGljaCBvcHRpb25hbGx5IGFsbG93cyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgdGhlIHBhcmFtZXRlciB0byBiZSBzcGVjaWZpZWQ6XG4gKlxuICogKiBgJzonYCBuYW1lIC0gY29sb24gcGxhY2Vob2xkZXJcbiAqICogYCcqJ2AgbmFtZSAtIGNhdGNoLWFsbCBwbGFjZWhvbGRlclxuICogKiBgJ3snIG5hbWUgJ30nYCAtIGN1cmx5IHBsYWNlaG9sZGVyXG4gKiAqIGAneycgbmFtZSAnOicgcmVnZXhwfHR5cGUgJ30nYCAtIGN1cmx5IHBsYWNlaG9sZGVyIHdpdGggcmVnZXhwIG9yIHR5cGUgbmFtZS4gU2hvdWxkIHRoZVxuICogICByZWdleHAgaXRzZWxmIGNvbnRhaW4gY3VybHkgYnJhY2VzLCB0aGV5IG11c3QgYmUgaW4gbWF0Y2hlZCBwYWlycyBvciBlc2NhcGVkIHdpdGggYSBiYWNrc2xhc2guXG4gKlxuICogUGFyYW1ldGVyIG5hbWVzIG1heSBjb250YWluIG9ubHkgd29yZCBjaGFyYWN0ZXJzIChsYXRpbiBsZXR0ZXJzLCBkaWdpdHMsIGFuZCB1bmRlcnNjb3JlKSBhbmRcbiAqIG11c3QgYmUgdW5pcXVlIHdpdGhpbiB0aGUgcGF0dGVybiAoYWNyb3NzIGJvdGggcGF0aCBhbmQgc2VhcmNoIHBhcmFtZXRlcnMpLiBGb3IgY29sb25cbiAqIHBsYWNlaG9sZGVycyBvciBjdXJseSBwbGFjZWhvbGRlcnMgd2l0aG91dCBhbiBleHBsaWNpdCByZWdleHAsIGEgcGF0aCBwYXJhbWV0ZXIgbWF0Y2hlcyBhbnlcbiAqIG51bWJlciBvZiBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gJy8nLiBGb3IgY2F0Y2gtYWxsIHBsYWNlaG9sZGVycyB0aGUgcGF0aCBwYXJhbWV0ZXIgbWF0Y2hlc1xuICogYW55IG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICogYCcvaGVsbG8vJ2AgLSBNYXRjaGVzIG9ubHkgaWYgdGhlIHBhdGggaXMgZXhhY3RseSAnL2hlbGxvLycuIFRoZXJlIGlzIG5vIHNwZWNpYWwgdHJlYXRtZW50IGZvclxuICogICB0cmFpbGluZyBzbGFzaGVzLCBhbmQgcGF0dGVybnMgaGF2ZSB0byBtYXRjaCB0aGUgZW50aXJlIHBhdGgsIG5vdCBqdXN0IGEgcHJlZml4LlxuICogKiBgJy91c2VyLzppZCdgIC0gTWF0Y2hlcyAnL3VzZXIvYm9iJyBvciAnL3VzZXIvMTIzNCEhIScgb3IgZXZlbiAnL3VzZXIvJyBidXQgbm90ICcvdXNlcicgb3JcbiAqICAgJy91c2VyL2JvYi9kZXRhaWxzJy4gVGhlIHNlY29uZCBwYXRoIHNlZ21lbnQgd2lsbCBiZSBjYXB0dXJlZCBhcyB0aGUgcGFyYW1ldGVyICdpZCcuXG4gKiAqIGAnL3VzZXIve2lkfSdgIC0gU2FtZSBhcyB0aGUgcHJldmlvdXMgZXhhbXBsZSwgYnV0IHVzaW5nIGN1cmx5IGJyYWNlIHN5bnRheC5cbiAqICogYCcvdXNlci97aWQ6W14vXSp9J2AgLSBTYW1lIGFzIHRoZSBwcmV2aW91cyBleGFtcGxlLlxuICogKiBgJy91c2VyL3tpZDpbMC05YS1mQS1GXXsxLDh9fSdgIC0gU2ltaWxhciB0byB0aGUgcHJldmlvdXMgZXhhbXBsZSwgYnV0IG9ubHkgbWF0Y2hlcyBpZiB0aGUgaWRcbiAqICAgcGFyYW1ldGVyIGNvbnNpc3RzIG9mIDEgdG8gOCBoZXggZGlnaXRzLlxuICogKiBgJy9maWxlcy97cGF0aDouKn0nYCAtIE1hdGNoZXMgYW55IFVSTCBzdGFydGluZyB3aXRoICcvZmlsZXMvJyBhbmQgY2FwdHVyZXMgdGhlIHJlc3Qgb2YgdGhlXG4gKiAgIHBhdGggaW50byB0aGUgcGFyYW1ldGVyICdwYXRoJy5cbiAqICogYCcvZmlsZXMvKnBhdGgnYCAtIGRpdHRvLlxuICogKiBgJy9jYWxlbmRhci97c3RhcnQ6ZGF0ZX0nYCAtIE1hdGNoZXMgXCIvY2FsZW5kYXIvMjAxNC0xMS0xMlwiIChiZWNhdXNlIHRoZSBwYXR0ZXJuIGRlZmluZWRcbiAqICAgaW4gdGhlIGJ1aWx0LWluICBgZGF0ZWAgVHlwZSBtYXRjaGVzIGAyMDE0LTExLTEyYCkgYW5kIHByb3ZpZGVzIGEgRGF0ZSBvYmplY3QgaW4gJHN0YXRlUGFyYW1zLnN0YXJ0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gIFRoZSBwYXR0ZXJuIHRvIGNvbXBpbGUgaW50byBhIG1hdGNoZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnICBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGhhc2g6XG4gKiBAcGFyYW0ge09iamVjdD19IHBhcmVudE1hdGNoZXIgVXNlZCB0byBjb25jYXRlbmF0ZSB0aGUgcGF0dGVybi9jb25maWcgb250b1xuICogICBhbiBleGlzdGluZyBVcmxNYXRjaGVyXG4gKlxuICogKiBgY2FzZUluc2Vuc2l0aXZlYCAtIGB0cnVlYCBpZiBVUkwgbWF0Y2hpbmcgc2hvdWxkIGJlIGNhc2UgaW5zZW5zaXRpdmUsIG90aGVyd2lzZSBgZmFsc2VgLCB0aGUgZGVmYXVsdCB2YWx1ZSAoZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpIGlzIGBmYWxzZWAuXG4gKiAqIGBzdHJpY3RgIC0gYGZhbHNlYCBpZiBtYXRjaGluZyBhZ2FpbnN0IGEgVVJMIHdpdGggYSB0cmFpbGluZyBzbGFzaCBzaG91bGQgYmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IHRvIGEgVVJMIHdpdGhvdXQgYSB0cmFpbGluZyBzbGFzaCwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcmVmaXggIEEgc3RhdGljIHByZWZpeCBvZiB0aGlzIHBhdHRlcm4uIFRoZSBtYXRjaGVyIGd1YXJhbnRlZXMgdGhhdCBhbnlcbiAqICAgVVJMIG1hdGNoaW5nIHRoaXMgbWF0Y2hlciAoaS5lLiBhbnkgc3RyaW5nIGZvciB3aGljaCB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI21ldGhvZHNfZXhlYyBleGVjKCl9IHJldHVybnNcbiAqICAgbm9uLW51bGwpIHdpbGwgc3RhcnQgd2l0aCB0aGlzIHByZWZpeC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc291cmNlICBUaGUgcGF0dGVybiB0aGF0IHdhcyBwYXNzZWQgaW50byB0aGUgY29uc3RydWN0b3JcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc291cmNlUGF0aCAgVGhlIHBhdGggcG9ydGlvbiBvZiB0aGUgc291cmNlIHByb3BlcnR5XG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNvdXJjZVNlYXJjaCAgVGhlIHNlYXJjaCBwb3J0aW9uIG9mIHRoZSBzb3VyY2UgcHJvcGVydHlcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVnZXggIFRoZSBjb25zdHJ1Y3RlZCByZWdleCB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1cmwgd2hlblxuICogICBpdCBpcyB0aW1lIHRvIGRldGVybWluZSB3aGljaCB1cmwgd2lsbCBtYXRjaC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgTmV3IGBVcmxNYXRjaGVyYCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gVXJsTWF0Y2hlcihwYXR0ZXJuLCBjb25maWcsIHBhcmVudE1hdGNoZXIpIHtcbiAgY29uZmlnID0gZXh0ZW5kKHsgcGFyYW1zOiB7fSB9LCBpc09iamVjdChjb25maWcpID8gY29uZmlnIDoge30pO1xuXG4gIC8vIEZpbmQgYWxsIHBsYWNlaG9sZGVycyBhbmQgY3JlYXRlIGEgY29tcGlsZWQgcGF0dGVybiwgdXNpbmcgZWl0aGVyIGNsYXNzaWMgb3IgY3VybHkgc3ludGF4OlxuICAvLyAgICcqJyBuYW1lXG4gIC8vICAgJzonIG5hbWVcbiAgLy8gICAneycgbmFtZSAnfSdcbiAgLy8gICAneycgbmFtZSAnOicgcmVnZXhwICd9J1xuICAvLyBUaGUgcmVndWxhciBleHByZXNzaW9uIGlzIHNvbWV3aGF0IGNvbXBsaWNhdGVkIGR1ZSB0byB0aGUgbmVlZCB0byBhbGxvdyBjdXJseSBicmFjZXNcbiAgLy8gaW5zaWRlIHRoZSByZWd1bGFyIGV4cHJlc3Npb24uIFRoZSBwbGFjZWhvbGRlciByZWdleHAgYnJlYWtzIGRvd24gYXMgZm9sbG93czpcbiAgLy8gICAgKFs6Kl0pKFtcXHdcXFtcXF1dKykgICAgICAgICAgICAgIC0gY2xhc3NpYyBwbGFjZWhvbGRlciAoJDEgLyAkMikgKHNlYXJjaCB2ZXJzaW9uIGhhcyAtIGZvciBzbmFrZS1jYXNlKVxuICAvLyAgICBcXHsoW1xcd1xcW1xcXV0rKSg/OlxcOlxccyooIC4uLiApKT9cXH0gIC0gY3VybHkgYnJhY2UgcGxhY2Vob2xkZXIgKCQzKSB3aXRoIG9wdGlvbmFsIHJlZ2V4cC90eXBlIC4uLiAoJDQpIChzZWFyY2ggdmVyc2lvbiBoYXMgLSBmb3Igc25ha2UtY2FzZVxuICAvLyAgICAoPzogLi4uIHwgLi4uIHwgLi4uICkrICAgICAgICAgLSB0aGUgcmVnZXhwIGNvbnNpc3RzIG9mIGFueSBudW1iZXIgb2YgYXRvbXMsIGFuIGF0b20gYmVpbmcgZWl0aGVyXG4gIC8vICAgIFtee31cXFxcXSsgICAgICAgICAgICAgICAgICAgICAgIC0gYW55dGhpbmcgb3RoZXIgdGhhbiBjdXJseSBicmFjZXMgb3IgYmFja3NsYXNoXG4gIC8vICAgIFxcXFwuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gYSBiYWNrc2xhc2ggZXNjYXBlXG4gIC8vICAgIFxceyg/Oltee31cXFxcXSt8XFxcXC4pKlxcfSAgICAgICAgICAtIGEgbWF0Y2hlZCBzZXQgb2YgY3VybHkgYnJhY2VzIGNvbnRhaW5pbmcgb3RoZXIgYXRvbXNcbiAgdmFyIHBsYWNlaG9sZGVyICAgICAgID0gLyhbOipdKShbXFx3XFxbXFxdXSspfFxceyhbXFx3XFxbXFxdXSspKD86XFw6XFxzKigoPzpbXnt9XFxcXF0rfFxcXFwufFxceyg/Oltee31cXFxcXSt8XFxcXC4pKlxcfSkrKSk/XFx9L2csXG4gICAgICBzZWFyY2hQbGFjZWhvbGRlciA9IC8oWzpdPykoW1xcd1xcW1xcXS4tXSspfFxceyhbXFx3XFxbXFxdLi1dKykoPzpcXDpcXHMqKCg/Oltee31cXFxcXSt8XFxcXC58XFx7KD86W157fVxcXFxdK3xcXFxcLikqXFx9KSspKT9cXH0vZyxcbiAgICAgIGNvbXBpbGVkID0gJ14nLCBsYXN0ID0gMCwgbSxcbiAgICAgIHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cyA9IFtdLFxuICAgICAgcGFyZW50UGFyYW1zID0gcGFyZW50TWF0Y2hlciA/IHBhcmVudE1hdGNoZXIucGFyYW1zIDoge30sXG4gICAgICBwYXJhbXMgPSB0aGlzLnBhcmFtcyA9IHBhcmVudE1hdGNoZXIgPyBwYXJlbnRNYXRjaGVyLnBhcmFtcy4kJG5ldygpIDogbmV3ICQkVU1GUC5QYXJhbVNldCgpLFxuICAgICAgcGFyYW1OYW1lcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFkZFBhcmFtZXRlcihpZCwgdHlwZSwgY29uZmlnLCBsb2NhdGlvbikge1xuICAgIHBhcmFtTmFtZXMucHVzaChpZCk7XG4gICAgaWYgKHBhcmVudFBhcmFtc1tpZF0pIHJldHVybiBwYXJlbnRQYXJhbXNbaWRdO1xuICAgIGlmICghL15cXHcrKFstLl0rXFx3KykqKD86XFxbXFxdKT8kLy50ZXN0KGlkKSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbWV0ZXIgbmFtZSAnXCIgKyBpZCArIFwiJyBpbiBwYXR0ZXJuICdcIiArIHBhdHRlcm4gKyBcIidcIik7XG4gICAgaWYgKHBhcmFtc1tpZF0pIHRocm93IG5ldyBFcnJvcihcIkR1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZSAnXCIgKyBpZCArIFwiJyBpbiBwYXR0ZXJuICdcIiArIHBhdHRlcm4gKyBcIidcIik7XG4gICAgcGFyYW1zW2lkXSA9IG5ldyAkJFVNRlAuUGFyYW0oaWQsIHR5cGUsIGNvbmZpZywgbG9jYXRpb24pO1xuICAgIHJldHVybiBwYXJhbXNbaWRdO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVvdGVSZWdFeHAoc3RyaW5nLCBwYXR0ZXJuLCBzcXVhc2gsIG9wdGlvbmFsKSB7XG4gICAgdmFyIHN1cnJvdW5kUGF0dGVybiA9IFsnJywnJ10sIHJlc3VsdCA9IHN0cmluZy5yZXBsYWNlKC9bXFxcXFxcW1xcXVxcXiQqKz8uKCl8e31dL2csIFwiXFxcXCQmXCIpO1xuICAgIGlmICghcGF0dGVybikgcmV0dXJuIHJlc3VsdDtcbiAgICBzd2l0Y2goc3F1YXNoKSB7XG4gICAgICBjYXNlIGZhbHNlOiBzdXJyb3VuZFBhdHRlcm4gPSBbJygnLCAnKScgKyAob3B0aW9uYWwgPyBcIj9cIiA6IFwiXCIpXTsgYnJlYWs7XG4gICAgICBjYXNlIHRydWU6XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC9cXC8kLywgJycpO1xuICAgICAgICBzdXJyb3VuZFBhdHRlcm4gPSBbJyg/OlxcLygnLCAnKXxcXC8pPyddO1xuICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAgICBzdXJyb3VuZFBhdHRlcm4gPSBbJygnICsgc3F1YXNoICsgXCJ8XCIsICcpPyddOyBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdCArIHN1cnJvdW5kUGF0dGVyblswXSArIHBhdHRlcm4gKyBzdXJyb3VuZFBhdHRlcm5bMV07XG4gIH1cblxuICB0aGlzLnNvdXJjZSA9IHBhdHRlcm47XG5cbiAgLy8gU3BsaXQgaW50byBzdGF0aWMgc2VnbWVudHMgc2VwYXJhdGVkIGJ5IHBhdGggcGFyYW1ldGVyIHBsYWNlaG9sZGVycy5cbiAgLy8gVGhlIG51bWJlciBvZiBzZWdtZW50cyBpcyBhbHdheXMgMSBtb3JlIHRoYW4gdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzLlxuICBmdW5jdGlvbiBtYXRjaERldGFpbHMobSwgaXNTZWFyY2gpIHtcbiAgICB2YXIgaWQsIHJlZ2V4cCwgc2VnbWVudCwgdHlwZSwgY2ZnLCBhcnJheU1vZGU7XG4gICAgaWQgICAgICAgICAgPSBtWzJdIHx8IG1bM107IC8vIElFWzc4XSByZXR1cm5zICcnIGZvciB1bm1hdGNoZWQgZ3JvdXBzIGluc3RlYWQgb2YgbnVsbFxuICAgIGNmZyAgICAgICAgID0gY29uZmlnLnBhcmFtc1tpZF07XG4gICAgc2VnbWVudCAgICAgPSBwYXR0ZXJuLnN1YnN0cmluZyhsYXN0LCBtLmluZGV4KTtcbiAgICByZWdleHAgICAgICA9IGlzU2VhcmNoID8gbVs0XSA6IG1bNF0gfHwgKG1bMV0gPT0gJyonID8gJy4qJyA6IG51bGwpO1xuXG4gICAgaWYgKHJlZ2V4cCkge1xuICAgICAgdHlwZSAgICAgID0gJCRVTUZQLnR5cGUocmVnZXhwKSB8fCBpbmhlcml0KCQkVU1GUC50eXBlKFwic3RyaW5nXCIpLCB7IHBhdHRlcm46IG5ldyBSZWdFeHAocmVnZXhwLCBjb25maWcuY2FzZUluc2Vuc2l0aXZlID8gJ2knIDogdW5kZWZpbmVkKSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGlkLCByZWdleHA6IHJlZ2V4cCwgc2VnbWVudDogc2VnbWVudCwgdHlwZTogdHlwZSwgY2ZnOiBjZmdcbiAgICB9O1xuICB9XG5cbiAgdmFyIHAsIHBhcmFtLCBzZWdtZW50O1xuICB3aGlsZSAoKG0gPSBwbGFjZWhvbGRlci5leGVjKHBhdHRlcm4pKSkge1xuICAgIHAgPSBtYXRjaERldGFpbHMobSwgZmFsc2UpO1xuICAgIGlmIChwLnNlZ21lbnQuaW5kZXhPZignPycpID49IDApIGJyZWFrOyAvLyB3ZSdyZSBpbnRvIHRoZSBzZWFyY2ggcGFydFxuXG4gICAgcGFyYW0gPSBhZGRQYXJhbWV0ZXIocC5pZCwgcC50eXBlLCBwLmNmZywgXCJwYXRoXCIpO1xuICAgIGNvbXBpbGVkICs9IHF1b3RlUmVnRXhwKHAuc2VnbWVudCwgcGFyYW0udHlwZS5wYXR0ZXJuLnNvdXJjZSwgcGFyYW0uc3F1YXNoLCBwYXJhbS5pc09wdGlvbmFsKTtcbiAgICBzZWdtZW50cy5wdXNoKHAuc2VnbWVudCk7XG4gICAgbGFzdCA9IHBsYWNlaG9sZGVyLmxhc3RJbmRleDtcbiAgfVxuICBzZWdtZW50ID0gcGF0dGVybi5zdWJzdHJpbmcobGFzdCk7XG5cbiAgLy8gRmluZCBhbnkgc2VhcmNoIHBhcmFtZXRlciBuYW1lcyBhbmQgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbGFzdCBzZWdtZW50XG4gIHZhciBpID0gc2VnbWVudC5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKGkgPj0gMCkge1xuICAgIHZhciBzZWFyY2ggPSB0aGlzLnNvdXJjZVNlYXJjaCA9IHNlZ21lbnQuc3Vic3RyaW5nKGkpO1xuICAgIHNlZ21lbnQgPSBzZWdtZW50LnN1YnN0cmluZygwLCBpKTtcbiAgICB0aGlzLnNvdXJjZVBhdGggPSBwYXR0ZXJuLnN1YnN0cmluZygwLCBsYXN0ICsgaSk7XG5cbiAgICBpZiAoc2VhcmNoLmxlbmd0aCA+IDApIHtcbiAgICAgIGxhc3QgPSAwO1xuICAgICAgd2hpbGUgKChtID0gc2VhcmNoUGxhY2Vob2xkZXIuZXhlYyhzZWFyY2gpKSkge1xuICAgICAgICBwID0gbWF0Y2hEZXRhaWxzKG0sIHRydWUpO1xuICAgICAgICBwYXJhbSA9IGFkZFBhcmFtZXRlcihwLmlkLCBwLnR5cGUsIHAuY2ZnLCBcInNlYXJjaFwiKTtcbiAgICAgICAgbGFzdCA9IHBsYWNlaG9sZGVyLmxhc3RJbmRleDtcbiAgICAgICAgLy8gY2hlY2sgaWYgPyZcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zb3VyY2VQYXRoID0gcGF0dGVybjtcbiAgICB0aGlzLnNvdXJjZVNlYXJjaCA9ICcnO1xuICB9XG5cbiAgY29tcGlsZWQgKz0gcXVvdGVSZWdFeHAoc2VnbWVudCkgKyAoY29uZmlnLnN0cmljdCA9PT0gZmFsc2UgPyAnXFwvPycgOiAnJykgKyAnJCc7XG4gIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG5cbiAgdGhpcy5yZWdleHAgPSBuZXcgUmVnRXhwKGNvbXBpbGVkLCBjb25maWcuY2FzZUluc2Vuc2l0aXZlID8gJ2knIDogdW5kZWZpbmVkKTtcbiAgdGhpcy5wcmVmaXggPSBzZWdtZW50c1swXTtcbiAgdGhpcy4kJHBhcmFtTmFtZXMgPSBwYXJhbU5hbWVzO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI2NvbmNhdFxuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIG5ldyBtYXRjaGVyIGZvciBhIHBhdHRlcm4gY29uc3RydWN0ZWQgYnkgYXBwZW5kaW5nIHRoZSBwYXRoIHBhcnQgYW5kIGFkZGluZyB0aGVcbiAqIHNlYXJjaCBwYXJhbWV0ZXJzIG9mIHRoZSBzcGVjaWZpZWQgcGF0dGVybiB0byB0aGlzIHBhdHRlcm4uIFRoZSBjdXJyZW50IHBhdHRlcm4gaXMgbm90XG4gKiBtb2RpZmllZC4gVGhpcyBjYW4gYmUgdW5kZXJzdG9vZCBhcyBjcmVhdGluZyBhIHBhdHRlcm4gZm9yIFVSTHMgdGhhdCBhcmUgcmVsYXRpdmUgdG8gKG9yXG4gKiBzdWZmaXhlcyBvZikgdGhlIGN1cnJlbnQgcGF0dGVybi5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhlIGZvbGxvd2luZyB0d28gbWF0Y2hlcnMgYXJlIGVxdWl2YWxlbnQ6XG4gKiA8cHJlPlxuICogbmV3IFVybE1hdGNoZXIoJy91c2VyL3tpZH0/cScpLmNvbmNhdCgnL2RldGFpbHM/ZGF0ZScpO1xuICogbmV3IFVybE1hdGNoZXIoJy91c2VyL3tpZH0vZGV0YWlscz9xJmRhdGUnKTtcbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuICBUaGUgcGF0dGVybiB0byBhcHBlbmQuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnICBBbiBvYmplY3QgaGFzaCBvZiB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIG1hdGNoZXIuXG4gKiBAcmV0dXJucyB7VXJsTWF0Y2hlcn0gIEEgbWF0Y2hlciBmb3IgdGhlIGNvbmNhdGVuYXRlZCBwYXR0ZXJuLlxuICovXG5VcmxNYXRjaGVyLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAocGF0dGVybiwgY29uZmlnKSB7XG4gIC8vIEJlY2F1c2Ugb3JkZXIgb2Ygc2VhcmNoIHBhcmFtZXRlcnMgaXMgaXJyZWxldmFudCwgd2UgY2FuIGFkZCBvdXIgb3duIHNlYXJjaFxuICAvLyBwYXJhbWV0ZXJzIHRvIHRoZSBlbmQgb2YgdGhlIG5ldyBwYXR0ZXJuLiBQYXJzZSB0aGUgbmV3IHBhdHRlcm4gYnkgaXRzZWxmXG4gIC8vIGFuZCB0aGVuIGpvaW4gdGhlIGJpdHMgdG9nZXRoZXIsIGJ1dCBpdCdzIG11Y2ggZWFzaWVyIHRvIGRvIHRoaXMgb24gYSBzdHJpbmcgbGV2ZWwuXG4gIHZhciBkZWZhdWx0Q29uZmlnID0ge1xuICAgIGNhc2VJbnNlbnNpdGl2ZTogJCRVTUZQLmNhc2VJbnNlbnNpdGl2ZSgpLFxuICAgIHN0cmljdDogJCRVTUZQLnN0cmljdE1vZGUoKSxcbiAgICBzcXVhc2g6ICQkVU1GUC5kZWZhdWx0U3F1YXNoUG9saWN5KClcbiAgfTtcbiAgcmV0dXJuIG5ldyBVcmxNYXRjaGVyKHRoaXMuc291cmNlUGF0aCArIHBhdHRlcm4gKyB0aGlzLnNvdXJjZVNlYXJjaCwgZXh0ZW5kKGRlZmF1bHRDb25maWcsIGNvbmZpZyksIHRoaXMpO1xufTtcblxuVXJsTWF0Y2hlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnNvdXJjZTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIjZXhlY1xuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGVzdHMgdGhlIHNwZWNpZmllZCBwYXRoIGFnYWluc3QgdGhpcyBtYXRjaGVyLCBhbmQgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgY2FwdHVyZWRcbiAqIHBhcmFtZXRlciB2YWx1ZXMsIG9yIG51bGwgaWYgdGhlIHBhdGggZG9lcyBub3QgbWF0Y2guIFRoZSByZXR1cm5lZCBvYmplY3QgY29udGFpbnMgdGhlIHZhbHVlc1xuICogb2YgYW55IHNlYXJjaCBwYXJhbWV0ZXJzIHRoYXQgYXJlIG1lbnRpb25lZCBpbiB0aGUgcGF0dGVybiwgYnV0IHRoZWlyIHZhbHVlIG1heSBiZSBudWxsIGlmXG4gKiB0aGV5IGFyZSBub3QgcHJlc2VudCBpbiBgc2VhcmNoUGFyYW1zYC4gVGhpcyBtZWFucyB0aGF0IHNlYXJjaCBwYXJhbWV0ZXJzIGFyZSBhbHdheXMgdHJlYXRlZFxuICogYXMgb3B0aW9uYWwuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxwcmU+XG4gKiBuZXcgVXJsTWF0Y2hlcignL3VzZXIve2lkfT9xJnInKS5leGVjKCcvdXNlci9ib2InLCB7XG4gKiAgIHg6ICcxJywgcTogJ2hlbGxvJ1xuICogfSk7XG4gKiAvLyByZXR1cm5zIHsgaWQ6ICdib2InLCBxOiAnaGVsbG8nLCByOiBudWxsIH1cbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoICBUaGUgVVJMIHBhdGggdG8gbWF0Y2gsIGUuZy4gYCRsb2NhdGlvbi5wYXRoKClgLlxuICogQHBhcmFtIHtPYmplY3R9IHNlYXJjaFBhcmFtcyAgVVJMIHNlYXJjaCBwYXJhbWV0ZXJzLCBlLmcuIGAkbG9jYXRpb24uc2VhcmNoKClgLlxuICogQHJldHVybnMge09iamVjdH0gIFRoZSBjYXB0dXJlZCBwYXJhbWV0ZXIgdmFsdWVzLlxuICovXG5VcmxNYXRjaGVyLnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24gKHBhdGgsIHNlYXJjaFBhcmFtcykge1xuICB2YXIgbSA9IHRoaXMucmVnZXhwLmV4ZWMocGF0aCk7XG4gIGlmICghbSkgcmV0dXJuIG51bGw7XG4gIHNlYXJjaFBhcmFtcyA9IHNlYXJjaFBhcmFtcyB8fCB7fTtcblxuICB2YXIgcGFyYW1OYW1lcyA9IHRoaXMucGFyYW1ldGVycygpLCBuVG90YWwgPSBwYXJhbU5hbWVzLmxlbmd0aCxcbiAgICBuUGF0aCA9IHRoaXMuc2VnbWVudHMubGVuZ3RoIC0gMSxcbiAgICB2YWx1ZXMgPSB7fSwgaSwgaiwgY2ZnLCBwYXJhbU5hbWU7XG5cbiAgaWYgKG5QYXRoICE9PSBtLmxlbmd0aCAtIDEpIHRocm93IG5ldyBFcnJvcihcIlVuYmFsYW5jZWQgY2FwdHVyZSBncm91cCBpbiByb3V0ZSAnXCIgKyB0aGlzLnNvdXJjZSArIFwiJ1wiKTtcblxuICBmdW5jdGlvbiBkZWNvZGVQYXRoQXJyYXkoc3RyaW5nKSB7XG4gICAgZnVuY3Rpb24gcmV2ZXJzZVN0cmluZyhzdHIpIHsgcmV0dXJuIHN0ci5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTsgfVxuICAgIGZ1bmN0aW9uIHVucXVvdGVEYXNoZXMoc3RyKSB7IHJldHVybiBzdHIucmVwbGFjZSgvXFxcXC0vZywgXCItXCIpOyB9XG5cbiAgICB2YXIgc3BsaXQgPSByZXZlcnNlU3RyaW5nKHN0cmluZykuc3BsaXQoLy0oPyFcXFxcKS8pO1xuICAgIHZhciBhbGxSZXZlcnNlZCA9IG1hcChzcGxpdCwgcmV2ZXJzZVN0cmluZyk7XG4gICAgcmV0dXJuIG1hcChhbGxSZXZlcnNlZCwgdW5xdW90ZURhc2hlcykucmV2ZXJzZSgpO1xuICB9XG5cbiAgdmFyIHBhcmFtLCBwYXJhbVZhbDtcbiAgZm9yIChpID0gMDsgaSA8IG5QYXRoOyBpKyspIHtcbiAgICBwYXJhbU5hbWUgPSBwYXJhbU5hbWVzW2ldO1xuICAgIHBhcmFtID0gdGhpcy5wYXJhbXNbcGFyYW1OYW1lXTtcbiAgICBwYXJhbVZhbCA9IG1baSsxXTtcbiAgICAvLyBpZiB0aGUgcGFyYW0gdmFsdWUgbWF0Y2hlcyBhIHByZS1yZXBsYWNlIHBhaXIsIHJlcGxhY2UgdGhlIHZhbHVlIGJlZm9yZSBkZWNvZGluZy5cbiAgICBmb3IgKGogPSAwOyBqIDwgcGFyYW0ucmVwbGFjZS5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhcmFtLnJlcGxhY2Vbal0uZnJvbSA9PT0gcGFyYW1WYWwpIHBhcmFtVmFsID0gcGFyYW0ucmVwbGFjZVtqXS50bztcbiAgICB9XG4gICAgaWYgKHBhcmFtVmFsICYmIHBhcmFtLmFycmF5ID09PSB0cnVlKSBwYXJhbVZhbCA9IGRlY29kZVBhdGhBcnJheShwYXJhbVZhbCk7XG4gICAgaWYgKGlzRGVmaW5lZChwYXJhbVZhbCkpIHBhcmFtVmFsID0gcGFyYW0udHlwZS5kZWNvZGUocGFyYW1WYWwpO1xuICAgIHZhbHVlc1twYXJhbU5hbWVdID0gcGFyYW0udmFsdWUocGFyYW1WYWwpO1xuICB9XG4gIGZvciAoLyoqLzsgaSA8IG5Ub3RhbDsgaSsrKSB7XG4gICAgcGFyYW1OYW1lID0gcGFyYW1OYW1lc1tpXTtcbiAgICB2YWx1ZXNbcGFyYW1OYW1lXSA9IHRoaXMucGFyYW1zW3BhcmFtTmFtZV0udmFsdWUoc2VhcmNoUGFyYW1zW3BhcmFtTmFtZV0pO1xuICAgIHBhcmFtID0gdGhpcy5wYXJhbXNbcGFyYW1OYW1lXTtcbiAgICBwYXJhbVZhbCA9IHNlYXJjaFBhcmFtc1twYXJhbU5hbWVdO1xuICAgIGZvciAoaiA9IDA7IGogPCBwYXJhbS5yZXBsYWNlLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAocGFyYW0ucmVwbGFjZVtqXS5mcm9tID09PSBwYXJhbVZhbCkgcGFyYW1WYWwgPSBwYXJhbS5yZXBsYWNlW2pdLnRvO1xuICAgIH1cbiAgICBpZiAoaXNEZWZpbmVkKHBhcmFtVmFsKSkgcGFyYW1WYWwgPSBwYXJhbS50eXBlLmRlY29kZShwYXJhbVZhbCk7XG4gICAgdmFsdWVzW3BhcmFtTmFtZV0gPSBwYXJhbS52YWx1ZShwYXJhbVZhbCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNwYXJhbWV0ZXJzXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRoZSBuYW1lcyBvZiBhbGwgcGF0aCBhbmQgc2VhcmNoIHBhcmFtZXRlcnMgb2YgdGhpcyBwYXR0ZXJuIGluIGFuIHVuc3BlY2lmaWVkIG9yZGVyLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn0gIEFuIGFycmF5IG9mIHBhcmFtZXRlciBuYW1lcy4gTXVzdCBiZSB0cmVhdGVkIGFzIHJlYWQtb25seS4gSWYgdGhlXG4gKiAgICBwYXR0ZXJuIGhhcyBubyBwYXJhbWV0ZXJzLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZC5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUucGFyYW1ldGVycyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICBpZiAoIWlzRGVmaW5lZChwYXJhbSkpIHJldHVybiB0aGlzLiQkcGFyYW1OYW1lcztcbiAgcmV0dXJuIHRoaXMucGFyYW1zW3BhcmFtXSB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciN2YWxpZGF0ZXNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENoZWNrcyBhbiBvYmplY3QgaGFzaCBvZiBwYXJhbWV0ZXJzIHRvIHZhbGlkYXRlIHRoZWlyIGNvcnJlY3RuZXNzIGFjY29yZGluZyB0byB0aGUgcGFyYW1ldGVyXG4gKiB0eXBlcyBvZiB0aGlzIGBVcmxNYXRjaGVyYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFRoZSBvYmplY3QgaGFzaCBvZiBwYXJhbWV0ZXJzIHRvIHZhbGlkYXRlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXJhbXNgIHZhbGlkYXRlcywgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKi9cblVybE1hdGNoZXIucHJvdG90eXBlLnZhbGlkYXRlcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMucGFyYW1zLiQkdmFsaWRhdGVzKHBhcmFtcyk7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI2Zvcm1hdFxuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIFVSTCB0aGF0IG1hdGNoZXMgdGhpcyBwYXR0ZXJuIGJ5IHN1YnN0aXR1dGluZyB0aGUgc3BlY2lmaWVkIHZhbHVlc1xuICogZm9yIHRoZSBwYXRoIGFuZCBzZWFyY2ggcGFyYW1ldGVycy4gTnVsbCB2YWx1ZXMgZm9yIHBhdGggcGFyYW1ldGVycyBhcmVcbiAqIHRyZWF0ZWQgYXMgZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAZXhhbXBsZVxuICogPHByZT5cbiAqIG5ldyBVcmxNYXRjaGVyKCcvdXNlci97aWR9P3EnKS5mb3JtYXQoeyBpZDonYm9iJywgcToneWVzJyB9KTtcbiAqIC8vIHJldHVybnMgJy91c2VyL2JvYj9xPXllcydcbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgIHRoZSB2YWx1ZXMgdG8gc3Vic3RpdHV0ZSBmb3IgdGhlIHBhcmFtZXRlcnMgaW4gdGhpcyBwYXR0ZXJuLlxuICogQHJldHVybnMge3N0cmluZ30gIHRoZSBmb3JtYXR0ZWQgVVJMIChwYXRoIGFuZCBvcHRpb25hbGx5IHNlYXJjaCBwYXJ0KS5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICB2YWx1ZXMgPSB2YWx1ZXMgfHwge307XG4gIHZhciBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHMsIHBhcmFtcyA9IHRoaXMucGFyYW1ldGVycygpLCBwYXJhbXNldCA9IHRoaXMucGFyYW1zO1xuICBpZiAoIXRoaXMudmFsaWRhdGVzKHZhbHVlcykpIHJldHVybiBudWxsO1xuXG4gIHZhciBpLCBzZWFyY2ggPSBmYWxzZSwgblBhdGggPSBzZWdtZW50cy5sZW5ndGggLSAxLCBuVG90YWwgPSBwYXJhbXMubGVuZ3RoLCByZXN1bHQgPSBzZWdtZW50c1swXTtcblxuICBmdW5jdGlvbiBlbmNvZGVEYXNoZXMoc3RyKSB7IC8vIFJlcGxhY2UgZGFzaGVzIHdpdGggZW5jb2RlZCBcIlxcLVwiXG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoLy0vZywgZnVuY3Rpb24oYykgeyByZXR1cm4gJyU1QyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9KTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuVG90YWw7IGkrKykge1xuICAgIHZhciBpc1BhdGhQYXJhbSA9IGkgPCBuUGF0aDtcbiAgICB2YXIgbmFtZSA9IHBhcmFtc1tpXSwgcGFyYW0gPSBwYXJhbXNldFtuYW1lXSwgdmFsdWUgPSBwYXJhbS52YWx1ZSh2YWx1ZXNbbmFtZV0pO1xuICAgIHZhciBpc0RlZmF1bHRWYWx1ZSA9IHBhcmFtLmlzT3B0aW9uYWwgJiYgcGFyYW0udHlwZS5lcXVhbHMocGFyYW0udmFsdWUoKSwgdmFsdWUpO1xuICAgIHZhciBzcXVhc2ggPSBpc0RlZmF1bHRWYWx1ZSA/IHBhcmFtLnNxdWFzaCA6IGZhbHNlO1xuICAgIHZhciBlbmNvZGVkID0gcGFyYW0udHlwZS5lbmNvZGUodmFsdWUpO1xuXG4gICAgaWYgKGlzUGF0aFBhcmFtKSB7XG4gICAgICB2YXIgbmV4dFNlZ21lbnQgPSBzZWdtZW50c1tpICsgMV07XG4gICAgICB2YXIgaXNGaW5hbFBhdGhQYXJhbSA9IGkgKyAxID09PSBuUGF0aDtcblxuICAgICAgaWYgKHNxdWFzaCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGVuY29kZWQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KGVuY29kZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gbWFwKGVuY29kZWQsIGVuY29kZURhc2hlcykuam9pbihcIi1cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBlbmNvZGVVUklDb21wb25lbnQoZW5jb2RlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBuZXh0U2VnbWVudDtcbiAgICAgIH0gZWxzZSBpZiAoc3F1YXNoID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBjYXB0dXJlID0gcmVzdWx0Lm1hdGNoKC9cXC8kLykgPyAvXFwvPyguKikvIDogLyguKikvO1xuICAgICAgICByZXN1bHQgKz0gbmV4dFNlZ21lbnQubWF0Y2goY2FwdHVyZSlbMV07XG4gICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHNxdWFzaCkpIHtcbiAgICAgICAgcmVzdWx0ICs9IHNxdWFzaCArIG5leHRTZWdtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGaW5hbFBhdGhQYXJhbSAmJiBwYXJhbS5zcXVhc2ggPT09IHRydWUgJiYgcmVzdWx0LnNsaWNlKC0xKSA9PT0gJy8nKSByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgLTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZW5jb2RlZCA9PSBudWxsIHx8IChpc0RlZmF1bHRWYWx1ZSAmJiBzcXVhc2ggIT09IGZhbHNlKSkgY29udGludWU7XG4gICAgICBpZiAoIWlzQXJyYXkoZW5jb2RlZCkpIGVuY29kZWQgPSBbIGVuY29kZWQgXTtcbiAgICAgIGlmIChlbmNvZGVkLmxlbmd0aCA9PT0gMCkgY29udGludWU7XG4gICAgICBlbmNvZGVkID0gbWFwKGVuY29kZWQsIGVuY29kZVVSSUNvbXBvbmVudCkuam9pbignJicgKyBuYW1lICsgJz0nKTtcbiAgICAgIHJlc3VsdCArPSAoc2VhcmNoID8gJyYnIDogJz8nKSArIChuYW1lICsgJz0nICsgZW5jb2RlZCk7XG4gICAgICBzZWFyY2ggPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW1wbGVtZW50cyBhbiBpbnRlcmZhY2UgdG8gZGVmaW5lIGN1c3RvbSBwYXJhbWV0ZXIgdHlwZXMgdGhhdCBjYW4gYmUgZGVjb2RlZCBmcm9tIGFuZCBlbmNvZGVkIHRvXG4gKiBzdHJpbmcgcGFyYW1ldGVycyBtYXRjaGVkIGluIGEgVVJMLiBVc2VkIGJ5IHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfVxuICogb2JqZWN0cyB3aGVuIG1hdGNoaW5nIG9yIGZvcm1hdHRpbmcgVVJMcywgb3IgY29tcGFyaW5nIG9yIHZhbGlkYXRpbmcgcGFyYW1ldGVyIHZhbHVlcy5cbiAqXG4gKiBTZWUge0BsaW5rIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSNtZXRob2RzX3R5cGUgYCR1cmxNYXRjaGVyRmFjdG9yeSN0eXBlKClgfSBmb3IgbW9yZVxuICogaW5mb3JtYXRpb24gb24gcmVnaXN0ZXJpbmcgY3VzdG9tIHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgIEEgY29uZmlndXJhdGlvbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgdGhlIGN1c3RvbSB0eXBlIGRlZmluaXRpb24uICBUaGUgb2JqZWN0J3NcbiAqICAgICAgICBwcm9wZXJ0aWVzIHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgbWV0aG9kcyBhbmQvb3IgcGF0dGVybiBpbiBgVHlwZWAncyBwdWJsaWMgaW50ZXJmYWNlLlxuICogQGV4YW1wbGVcbiAqIDxwcmU+XG4gKiB7XG4gKiAgIGRlY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiBwYXJzZUludCh2YWwsIDEwKTsgfSxcbiAqICAgZW5jb2RlOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCAmJiB2YWwudG9TdHJpbmcoKTsgfSxcbiAqICAgZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7IHJldHVybiB0aGlzLmlzKGEpICYmIGEgPT09IGI7IH0sXG4gKiAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIGFuZ3VsYXIuaXNOdW1iZXIodmFsKSBpc0Zpbml0ZSh2YWwpICYmIHZhbCAlIDEgPT09IDA7IH0sXG4gKiAgIHBhdHRlcm46IC9cXGQrL1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQHByb3BlcnR5IHtSZWdFeHB9IHBhdHRlcm4gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2ggdmFsdWVzIG9mIHRoaXMgdHlwZSB3aGVuXG4gKiAgICAgICAgICAgY29taW5nIGZyb20gYSBzdWJzdHJpbmcgb2YgYSBVUkwuXG4gKlxuICogQHJldHVybnMge09iamVjdH0gIFJldHVybnMgYSBuZXcgYFR5cGVgIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gVHlwZShjb25maWcpIHtcbiAgZXh0ZW5kKHRoaXMsIGNvbmZpZyk7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjaXNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVjdHMgd2hldGhlciBhIHZhbHVlIGlzIG9mIGEgcGFydGljdWxhciB0eXBlLiBBY2NlcHRzIGEgbmF0aXZlIChkZWNvZGVkKSB2YWx1ZVxuICogYW5kIGRldGVybWluZXMgd2hldGhlciBpdCBtYXRjaGVzIHRoZSBjdXJyZW50IGBUeXBlYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgIE9wdGlvbmFsLiBJZiB0aGUgdHlwZSBjaGVjayBpcyBoYXBwZW5pbmcgaW4gdGhlIGNvbnRleHQgb2YgYSBzcGVjaWZpY1xuICogICAgICAgIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfSBvYmplY3QsIHRoaXMgaXMgdGhlIG5hbWUgb2YgdGhlXG4gKiAgICAgICAgcGFyYW1ldGVyIGluIHdoaWNoIGB2YWxgIGlzIHN0b3JlZC4gQ2FuIGJlIHVzZWQgZm9yIG1ldGEtcHJvZ3JhbW1pbmcgb2YgYFR5cGVgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gIFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBtYXRjaGVzIHRoZSB0eXBlLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuVHlwZS5wcm90b3R5cGUuaXMgPSBmdW5jdGlvbih2YWwsIGtleSkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjZW5jb2RlXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFbmNvZGVzIGEgY3VzdG9tL25hdGl2ZSB0eXBlIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgY2FuIGJlIGVtYmVkZGVkIGluIGEgVVJMLiBOb3RlIHRoYXQgdGhlXG4gKiByZXR1cm4gdmFsdWUgZG9lcyAqbm90KiBuZWVkIHRvIGJlIFVSTC1zYWZlIChpLmUuIHBhc3NlZCB0aHJvdWdoIGBlbmNvZGVVUklDb21wb25lbnQoKWApLCBpdFxuICogb25seSBuZWVkcyB0byBiZSBhIHJlcHJlc2VudGF0aW9uIG9mIGB2YWxgIHRoYXQgaGFzIGJlZW4gY29lcmNlZCB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCAgVGhlIHZhbHVlIHRvIGVuY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgaW4gd2hpY2ggYHZhbGAgaXMgc3RvcmVkLiBDYW4gYmUgdXNlZCBmb3JcbiAqICAgICAgICBtZXRhLXByb2dyYW1taW5nIG9mIGBUeXBlYCBvYmplY3RzLlxuICogQHJldHVybnMge3N0cmluZ30gIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYHZhbGAgdGhhdCBjYW4gYmUgZW5jb2RlZCBpbiBhIFVSTC5cbiAqL1xuVHlwZS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjZGVjb2RlXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBhIHBhcmFtZXRlciB2YWx1ZSAoZnJvbSBVUkwgc3RyaW5nIG9yIHRyYW5zaXRpb24gcGFyYW0pIHRvIGEgY3VzdG9tL25hdGl2ZSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsICBUaGUgVVJMIHBhcmFtZXRlciB2YWx1ZSB0byBkZWNvZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5ICBUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyIGluIHdoaWNoIGB2YWxgIGlzIHN0b3JlZC4gQ2FuIGJlIHVzZWQgZm9yXG4gKiAgICAgICAgbWV0YS1wcm9ncmFtbWluZyBvZiBgVHlwZWAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHsqfSAgUmV0dXJucyBhIGN1c3RvbSByZXByZXNlbnRhdGlvbiBvZiB0aGUgVVJMIHBhcmFtZXRlciB2YWx1ZS5cbiAqL1xuVHlwZS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjZXF1YWxzXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdHdvIGRlY29kZWQgdmFsdWVzIGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gYSAgQSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcGFyYW0geyp9IGIgIEEgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHJldHVybnMge0Jvb2xlYW59ICBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50L2VxdWFsLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuVHlwZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9PSBiO1xufTtcblxuVHlwZS5wcm90b3R5cGUuJHN1YlBhdHRlcm4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN1YiA9IHRoaXMucGF0dGVybi50b1N0cmluZygpO1xuICByZXR1cm4gc3ViLnN1YnN0cigxLCBzdWIubGVuZ3RoIC0gMik7XG59O1xuXG5UeXBlLnByb3RvdHlwZS5wYXR0ZXJuID0gLy4qLztcblxuVHlwZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwie1R5cGU6XCIgKyB0aGlzLm5hbWUgKyBcIn1cIjsgfTtcblxuLyoqIEdpdmVuIGFuIGVuY29kZWQgc3RyaW5nLCBvciBhIGRlY29kZWQgb2JqZWN0LCByZXR1cm5zIGEgZGVjb2RlZCBvYmplY3QgKi9cblR5cGUucHJvdG90eXBlLiRub3JtYWxpemUgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRoaXMuaXModmFsKSA/IHZhbCA6IHRoaXMuZGVjb2RlKHZhbCk7XG59O1xuXG4vKlxuICogV3JhcHMgYW4gZXhpc3RpbmcgY3VzdG9tIFR5cGUgYXMgYW4gYXJyYXkgb2YgVHlwZSwgZGVwZW5kaW5nIG9uICdtb2RlJy5cbiAqIGUuZy46XG4gKiAtIHVybG1hdGNoZXIgcGF0dGVybiBcIi9wYXRoP3txdWVyeVBhcmFtW106aW50fVwiXG4gKiAtIHVybDogXCIvcGF0aD9xdWVyeVBhcmFtPTEmcXVlcnlQYXJhbT0yXG4gKiAtICRzdGF0ZVBhcmFtcy5xdWVyeVBhcmFtIHdpbGwgYmUgWzEsIDJdXG4gKiBpZiBgbW9kZWAgaXMgXCJhdXRvXCIsIHRoZW5cbiAqIC0gdXJsOiBcIi9wYXRoP3F1ZXJ5UGFyYW09MSB3aWxsIGNyZWF0ZSAkc3RhdGVQYXJhbXMucXVlcnlQYXJhbTogMVxuICogLSB1cmw6IFwiL3BhdGg/cXVlcnlQYXJhbT0xJnF1ZXJ5UGFyYW09MiB3aWxsIGNyZWF0ZSAkc3RhdGVQYXJhbXMucXVlcnlQYXJhbTogWzEsIDJdXG4gKi9cblR5cGUucHJvdG90eXBlLiRhc0FycmF5ID0gZnVuY3Rpb24obW9kZSwgaXNTZWFyY2gpIHtcbiAgaWYgKCFtb2RlKSByZXR1cm4gdGhpcztcbiAgaWYgKG1vZGUgPT09IFwiYXV0b1wiICYmICFpc1NlYXJjaCkgdGhyb3cgbmV3IEVycm9yKFwiJ2F1dG8nIGFycmF5IG1vZGUgaXMgZm9yIHF1ZXJ5IHBhcmFtZXRlcnMgb25seVwiKTtcblxuICBmdW5jdGlvbiBBcnJheVR5cGUodHlwZSwgbW9kZSkge1xuICAgIGZ1bmN0aW9uIGJpbmRUbyh0eXBlLCBjYWxsYmFja05hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVbY2FsbGJhY2tOYW1lXS5hcHBseSh0eXBlLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBXcmFwIG5vbi1hcnJheSB2YWx1ZSBhcyBhcnJheVxuICAgIGZ1bmN0aW9uIGFycmF5V3JhcCh2YWwpIHsgcmV0dXJuIGlzQXJyYXkodmFsKSA/IHZhbCA6IChpc0RlZmluZWQodmFsKSA/IFsgdmFsIF0gOiBbXSk7IH1cbiAgICAvLyBVbndyYXAgYXJyYXkgdmFsdWUgZm9yIFwiYXV0b1wiIG1vZGUuIFJldHVybiB1bmRlZmluZWQgZm9yIGVtcHR5IGFycmF5LlxuICAgIGZ1bmN0aW9uIGFycmF5VW53cmFwKHZhbCkge1xuICAgICAgc3dpdGNoKHZhbC5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBtb2RlID09PSBcImF1dG9cIiA/IHZhbFswXSA6IHZhbDtcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZmFsc2V5KHZhbCkgeyByZXR1cm4gIXZhbDsgfVxuXG4gICAgLy8gV3JhcHMgdHlwZSAoLmlzLy5lbmNvZGUvLmRlY29kZSkgZnVuY3Rpb25zIHRvIG9wZXJhdGUgb24gZWFjaCB2YWx1ZSBvZiBhbiBhcnJheVxuICAgIGZ1bmN0aW9uIGFycmF5SGFuZGxlcihjYWxsYmFjaywgYWxsVHJ1dGh5TW9kZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZUFycmF5KHZhbCkge1xuICAgICAgICBpZiAoaXNBcnJheSh2YWwpICYmIHZhbC5sZW5ndGggPT09IDApIHJldHVybiB2YWw7XG4gICAgICAgIHZhbCA9IGFycmF5V3JhcCh2YWwpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbWFwKHZhbCwgY2FsbGJhY2spO1xuICAgICAgICBpZiAoYWxsVHJ1dGh5TW9kZSA9PT0gdHJ1ZSlcbiAgICAgICAgICByZXR1cm4gZmlsdGVyKHJlc3VsdCwgZmFsc2V5KS5sZW5ndGggPT09IDA7XG4gICAgICAgIHJldHVybiBhcnJheVVud3JhcChyZXN1bHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBXcmFwcyB0eXBlICguZXF1YWxzKSBmdW5jdGlvbnMgdG8gb3BlcmF0ZSBvbiBlYWNoIHZhbHVlIG9mIGFuIGFycmF5XG4gICAgZnVuY3Rpb24gYXJyYXlFcXVhbHNIYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlQXJyYXkodmFsMSwgdmFsMikge1xuICAgICAgICB2YXIgbGVmdCA9IGFycmF5V3JhcCh2YWwxKSwgcmlnaHQgPSBhcnJheVdyYXAodmFsMik7XG4gICAgICAgIGlmIChsZWZ0Lmxlbmd0aCAhPT0gcmlnaHQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVmdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghY2FsbGJhY2sobGVmdFtpXSwgcmlnaHRbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuZW5jb2RlID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnZW5jb2RlJykpO1xuICAgIHRoaXMuZGVjb2RlID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnZGVjb2RlJykpO1xuICAgIHRoaXMuaXMgICAgID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnaXMnKSwgdHJ1ZSk7XG4gICAgdGhpcy5lcXVhbHMgPSBhcnJheUVxdWFsc0hhbmRsZXIoYmluZFRvKHR5cGUsICdlcXVhbHMnKSk7XG4gICAgdGhpcy5wYXR0ZXJuID0gdHlwZS5wYXR0ZXJuO1xuICAgIHRoaXMuJG5vcm1hbGl6ZSA9IGFycmF5SGFuZGxlcihiaW5kVG8odHlwZSwgJyRub3JtYWxpemUnKSk7XG4gICAgdGhpcy5uYW1lID0gdHlwZS5uYW1lO1xuICAgIHRoaXMuJGFycmF5TW9kZSA9IG1vZGU7XG4gIH1cblxuICByZXR1cm4gbmV3IEFycmF5VHlwZSh0aGlzLCBtb2RlKTtcbn07XG5cblxuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSBmb3Ige0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9IGluc3RhbmNlcy4gVGhlIGZhY3RvcnlcbiAqIGlzIGFsc28gYXZhaWxhYmxlIHRvIHByb3ZpZGVycyB1bmRlciB0aGUgbmFtZSBgJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJgLlxuICovXG5mdW5jdGlvbiAkVXJsTWF0Y2hlckZhY3RvcnkoKSB7XG4gICQkVU1GUCA9IHRoaXM7XG5cbiAgdmFyIGlzQ2FzZUluc2Vuc2l0aXZlID0gZmFsc2UsIGlzU3RyaWN0TW9kZSA9IHRydWUsIGRlZmF1bHRTcXVhc2hQb2xpY3kgPSBmYWxzZTtcblxuICAvLyBVc2UgdGlsZGVzIHRvIHByZS1lbmNvZGUgc2xhc2hlcy5cbiAgLy8gSWYgdGhlIHNsYXNoZXMgYXJlIHNpbXBseSBVUkxFbmNvZGVkLCB0aGUgYnJvd3NlciBjYW4gY2hvb3NlIHRvIHByZS1kZWNvZGUgdGhlbSxcbiAgLy8gYW5kIGJpZGlyZWN0aW9uYWwgZW5jb2RpbmcvZGVjb2RpbmcgZmFpbHMuXG4gIC8vIFRpbGRlIHdhcyBjaG9zZW4gYmVjYXVzZSBpdCdzIG5vdCBhIFJGQyAzOTg2IHNlY3Rpb24gMi4yIFJlc2VydmVkIENoYXJhY3RlclxuICBmdW5jdGlvbiB2YWxUb1N0cmluZyh2YWwpIHsgcmV0dXJuIHZhbCAhPSBudWxsID8gdmFsLnRvU3RyaW5nKCkucmVwbGFjZSgvKH58XFwvKS9nLCBmdW5jdGlvbiAobSkgeyByZXR1cm4geyd+Jzonfn4nLCAnLyc6J34yRid9W21dOyB9KSA6IHZhbDsgfVxuICBmdW5jdGlvbiB2YWxGcm9tU3RyaW5nKHZhbCkgeyByZXR1cm4gdmFsICE9IG51bGwgPyB2YWwudG9TdHJpbmcoKS5yZXBsYWNlKC8ofn58fjJGKS9nLCBmdW5jdGlvbiAobSkgeyByZXR1cm4geyd+fic6J34nLCAnfjJGJzonLyd9W21dOyB9KSA6IHZhbDsgfVxuXG4gIHZhciAkdHlwZXMgPSB7fSwgZW5xdWV1ZSA9IHRydWUsIHR5cGVRdWV1ZSA9IFtdLCBpbmplY3RvciwgZGVmYXVsdFR5cGVzID0ge1xuICAgIFwic3RyaW5nXCI6IHtcbiAgICAgIGVuY29kZTogdmFsVG9TdHJpbmcsXG4gICAgICBkZWNvZGU6IHZhbEZyb21TdHJpbmcsXG4gICAgICAvLyBUT0RPOiBpbiAxLjAsIG1ha2Ugc3RyaW5nIC5pcygpIHJldHVybiBmYWxzZSBpZiB2YWx1ZSBpcyB1bmRlZmluZWQvbnVsbCBieSBkZWZhdWx0LlxuICAgICAgLy8gSW4gMC4yLngsIHN0cmluZyBwYXJhbXMgYXJlIG9wdGlvbmFsIGJ5IGRlZmF1bHQgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCA9PSBudWxsIHx8ICFpc0RlZmluZWQodmFsKSB8fCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiOyB9LFxuICAgICAgcGF0dGVybjogL1teL10qL1xuICAgIH0sXG4gICAgXCJpbnRcIjoge1xuICAgICAgZW5jb2RlOiB2YWxUb1N0cmluZyxcbiAgICAgIGRlY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiBwYXJzZUludCh2YWwsIDEwKTsgfSxcbiAgICAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkICYmIHZhbCAhPT0gbnVsbCAmJiB0aGlzLmRlY29kZSh2YWwudG9TdHJpbmcoKSkgPT09IHZhbDsgfSxcbiAgICAgIHBhdHRlcm46IC9cXGQrL1xuICAgIH0sXG4gICAgXCJib29sXCI6IHtcbiAgICAgIGVuY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgPyAxIDogMDsgfSxcbiAgICAgIGRlY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiBwYXJzZUludCh2YWwsIDEwKSAhPT0gMDsgfSxcbiAgICAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlOyB9LFxuICAgICAgcGF0dGVybjogLzB8MS9cbiAgICB9LFxuICAgIFwiZGF0ZVwiOiB7XG4gICAgICBlbmNvZGU6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzKHZhbCkpXG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIFsgdmFsLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgKCcwJyArICh2YWwuZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMiksXG4gICAgICAgICAgKCcwJyArIHZhbC5nZXREYXRlKCkpLnNsaWNlKC0yKVxuICAgICAgICBdLmpvaW4oXCItXCIpO1xuICAgICAgfSxcbiAgICAgIGRlY29kZTogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBpZiAodGhpcy5pcyh2YWwpKSByZXR1cm4gdmFsO1xuICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLmNhcHR1cmUuZXhlYyh2YWwpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggPyBuZXcgRGF0ZShtYXRjaFsxXSwgbWF0Y2hbMl0gLSAxLCBtYXRjaFszXSkgOiB1bmRlZmluZWQ7XG4gICAgICB9LFxuICAgICAgaXM6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gdmFsIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4odmFsLnZhbHVlT2YoKSk7IH0sXG4gICAgICBlcXVhbHM6IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiB0aGlzLmlzKGEpICYmIHRoaXMuaXMoYikgJiYgYS50b0lTT1N0cmluZygpID09PSBiLnRvSVNPU3RyaW5nKCk7IH0sXG4gICAgICBwYXR0ZXJuOiAvWzAtOV17NH0tKD86MFsxLTldfDFbMC0yXSktKD86MFsxLTldfFsxLTJdWzAtOV18M1swLTFdKS8sXG4gICAgICBjYXB0dXJlOiAvKFswLTldezR9KS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMS0yXVswLTldfDNbMC0xXSkvXG4gICAgfSxcbiAgICBcImpzb25cIjoge1xuICAgICAgZW5jb2RlOiBhbmd1bGFyLnRvSnNvbixcbiAgICAgIGRlY29kZTogYW5ndWxhci5mcm9tSnNvbixcbiAgICAgIGlzOiBhbmd1bGFyLmlzT2JqZWN0LFxuICAgICAgZXF1YWxzOiBhbmd1bGFyLmVxdWFscyxcbiAgICAgIHBhdHRlcm46IC9bXi9dKi9cbiAgICB9LFxuICAgIFwiYW55XCI6IHsgLy8gZG9lcyBub3QgZW5jb2RlL2RlY29kZVxuICAgICAgZW5jb2RlOiBhbmd1bGFyLmlkZW50aXR5LFxuICAgICAgZGVjb2RlOiBhbmd1bGFyLmlkZW50aXR5LFxuICAgICAgZXF1YWxzOiBhbmd1bGFyLmVxdWFscyxcbiAgICAgIHBhdHRlcm46IC8uKi9cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdENvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyaWN0OiBpc1N0cmljdE1vZGUsXG4gICAgICBjYXNlSW5zZW5zaXRpdmU6IGlzQ2FzZUluc2Vuc2l0aXZlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW5qZWN0YWJsZSh2YWx1ZSkge1xuICAgIHJldHVybiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgKGlzQXJyYXkodmFsdWUpICYmIGlzRnVuY3Rpb24odmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0pKSk7XG4gIH1cblxuICAvKipcbiAgICogW0ludGVybmFsXSBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwYXJhbWV0ZXIsIHdoaWNoIG1heSBiZSBhbiBpbmplY3RhYmxlIGZ1bmN0aW9uLlxuICAgKi9cbiAgJFVybE1hdGNoZXJGYWN0b3J5LiQkZ2V0RGVmYXVsdFZhbHVlID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgaWYgKCFpc0luamVjdGFibGUoY29uZmlnLnZhbHVlKSkgcmV0dXJuIGNvbmZpZy52YWx1ZTtcbiAgICBpZiAoIWluamVjdG9yKSB0aHJvdyBuZXcgRXJyb3IoXCJJbmplY3RhYmxlIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGF0IGNvbmZpZ3VyYXRpb24gdGltZVwiKTtcbiAgICByZXR1cm4gaW5qZWN0b3IuaW52b2tlKGNvbmZpZy52YWx1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjY2FzZUluc2Vuc2l0aXZlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlZmluZXMgd2hldGhlciBVUkwgbWF0Y2hpbmcgc2hvdWxkIGJlIGNhc2Ugc2Vuc2l0aXZlICh0aGUgZGVmYXVsdCBiZWhhdmlvciksIG9yIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSBgZmFsc2VgIHRvIG1hdGNoIFVSTCBpbiBhIGNhc2Ugc2Vuc2l0aXZlIG1hbm5lcjsgb3RoZXJ3aXNlIGB0cnVlYDtcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRoZSBjdXJyZW50IHZhbHVlIG9mIGNhc2VJbnNlbnNpdGl2ZVxuICAgKi9cbiAgdGhpcy5jYXNlSW5zZW5zaXRpdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKVxuICAgICAgaXNDYXNlSW5zZW5zaXRpdmUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaXNDYXNlSW5zZW5zaXRpdmU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3Rvcnkjc3RyaWN0TW9kZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZWZpbmVzIHdoZXRoZXIgVVJMcyBzaG91bGQgbWF0Y2ggdHJhaWxpbmcgc2xhc2hlcywgb3Igbm90ICh0aGUgZGVmYXVsdCBiZWhhdmlvcikuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIGBmYWxzZWAgdG8gbWF0Y2ggdHJhaWxpbmcgc2xhc2hlcyBpbiBVUkxzLCBvdGhlcndpc2UgYHRydWVgLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdGhlIGN1cnJlbnQgdmFsdWUgb2Ygc3RyaWN0TW9kZVxuICAgKi9cbiAgdGhpcy5zdHJpY3RNb2RlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSlcbiAgICAgIGlzU3RyaWN0TW9kZSA9IHZhbHVlO1xuICAgIHJldHVybiBpc1N0cmljdE1vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjZGVmYXVsdFNxdWFzaFBvbGljeVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIHdoZW4gZ2VuZXJhdGluZyBvciBtYXRjaGluZyBVUkxzIHdpdGggZGVmYXVsdCBwYXJhbWV0ZXIgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQSBzdHJpbmcgdGhhdCBkZWZpbmVzIHRoZSBkZWZhdWx0IHBhcmFtZXRlciBVUkwgc3F1YXNoaW5nIGJlaGF2aW9yLlxuICAgKiAgICBgbm9zcXVhc2hgOiBXaGVuIGdlbmVyYXRpbmcgYW4gaHJlZiB3aXRoIGEgZGVmYXVsdCBwYXJhbWV0ZXIgdmFsdWUsIGRvIG5vdCBzcXVhc2ggdGhlIHBhcmFtZXRlciB2YWx1ZSBmcm9tIHRoZSBVUkxcbiAgICogICAgYHNsYXNoYDogV2hlbiBnZW5lcmF0aW5nIGFuIGhyZWYgd2l0aCBhIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlLCBzcXVhc2ggKHJlbW92ZSkgdGhlIHBhcmFtZXRlciB2YWx1ZSwgYW5kLCBpZiB0aGVcbiAgICogICAgICAgICAgICAgcGFyYW1ldGVyIGlzIHN1cnJvdW5kZWQgYnkgc2xhc2hlcywgc3F1YXNoIChyZW1vdmUpIG9uZSBzbGFzaCBmcm9tIHRoZSBVUkxcbiAgICogICAgYW55IG90aGVyIHN0cmluZywgZS5nLiBcIn5cIjogV2hlbiBnZW5lcmF0aW5nIGFuIGhyZWYgd2l0aCBhIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlLCBzcXVhc2ggKHJlbW92ZSlcbiAgICogICAgICAgICAgICAgdGhlIHBhcmFtZXRlciB2YWx1ZSBmcm9tIHRoZSBVUkwgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGlzIHN0cmluZy5cbiAgICovXG4gIHRoaXMuZGVmYXVsdFNxdWFzaFBvbGljeSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFpc0RlZmluZWQodmFsdWUpKSByZXR1cm4gZGVmYXVsdFNxdWFzaFBvbGljeTtcbiAgICBpZiAodmFsdWUgIT09IHRydWUgJiYgdmFsdWUgIT09IGZhbHNlICYmICFpc1N0cmluZyh2YWx1ZSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNxdWFzaCBwb2xpY3k6IFwiICsgdmFsdWUgKyBcIi4gVmFsaWQgcG9saWNpZXM6IGZhbHNlLCB0cnVlLCBhcmJpdHJhcnktc3RyaW5nXCIpO1xuICAgIGRlZmF1bHRTcXVhc2hQb2xpY3kgPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjY29tcGlsZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9IGZvciB0aGUgc3BlY2lmaWVkIHBhdHRlcm4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuICBUaGUgVVJMIHBhdHRlcm4uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgIFRoZSBjb25maWcgb2JqZWN0IGhhc2guXG4gICAqIEByZXR1cm5zIHtVcmxNYXRjaGVyfSAgVGhlIFVybE1hdGNoZXIuXG4gICAqL1xuICB0aGlzLmNvbXBpbGUgPSBmdW5jdGlvbiAocGF0dGVybiwgY29uZmlnKSB7XG4gICAgcmV0dXJuIG5ldyBVcmxNYXRjaGVyKHBhdHRlcm4sIGV4dGVuZChnZXREZWZhdWx0Q29uZmlnKCksIGNvbmZpZykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I2lzTWF0Y2hlclxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYSBgVXJsTWF0Y2hlcmAsIG9yIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAgVGhlIG9iamVjdCB0byBwZXJmb3JtIHRoZSB0eXBlIGNoZWNrIGFnYWluc3QuXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAgUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBtYXRjaGVzIHRoZSBgVXJsTWF0Y2hlcmAgaW50ZXJmYWNlLCBieVxuICAgKiAgICAgICAgICBpbXBsZW1lbnRpbmcgYWxsIHRoZSBzYW1lIG1ldGhvZHMuXG4gICAqL1xuICB0aGlzLmlzTWF0Y2hlciA9IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFpc09iamVjdChvKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByZXN1bHQgPSB0cnVlO1xuXG4gICAgZm9yRWFjaChVcmxNYXRjaGVyLnByb3RvdHlwZSwgZnVuY3Rpb24odmFsLCBuYW1lKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiAoaXNEZWZpbmVkKG9bbmFtZV0pICYmIGlzRnVuY3Rpb24ob1tuYW1lXSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjdHlwZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlcnMgYSBjdXN0b20ge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSBgVHlwZWB9IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gICAqIGdlbmVyYXRlIFVSTHMgd2l0aCB0eXBlZCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAgVGhlIHR5cGUgbmFtZS5cbiAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IGRlZmluaXRpb24gICBUaGUgdHlwZSBkZWZpbml0aW9uLiBTZWVcbiAgICogICAgICAgIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUgYFR5cGVgfSBmb3IgaW5mb3JtYXRpb24gb24gdGhlIHZhbHVlcyBhY2NlcHRlZC5cbiAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IGRlZmluaXRpb25GbiAob3B0aW9uYWwpIEEgZnVuY3Rpb24gdGhhdCBpcyBpbmplY3RlZCBiZWZvcmUgdGhlIGFwcFxuICAgKiAgICAgICAgcnVudGltZSBzdGFydHMuICBUaGUgcmVzdWx0IG9mIHRoaXMgZnVuY3Rpb24gaXMgbWVyZ2VkIGludG8gdGhlIGV4aXN0aW5nIGBkZWZpbml0aW9uYC5cbiAgICogICAgICAgIFNlZSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlIGBUeXBlYH0gZm9yIGluZm9ybWF0aW9uIG9uIHRoZSB2YWx1ZXMgYWNjZXB0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9ICBSZXR1cm5zIGAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlcmAuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIFRoaXMgaXMgYSBzaW1wbGUgZXhhbXBsZSBvZiBhIGN1c3RvbSB0eXBlIHRoYXQgZW5jb2RlcyBhbmQgZGVjb2RlcyBpdGVtcyBmcm9tIGFuXG4gICAqIGFycmF5LCB1c2luZyB0aGUgYXJyYXkgaW5kZXggYXMgdGhlIFVSTC1lbmNvZGVkIHZhbHVlOlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiB2YXIgbGlzdCA9IFsnSm9obicsICdQYXVsJywgJ0dlb3JnZScsICdSaW5nbyddO1xuICAgKlxuICAgKiAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlci50eXBlKCdsaXN0SXRlbScsIHtcbiAgICogICBlbmNvZGU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICogICAgIC8vIFJlcHJlc2VudCB0aGUgbGlzdCBpdGVtIGluIHRoZSBVUkwgdXNpbmcgaXRzIGNvcnJlc3BvbmRpbmcgaW5kZXhcbiAgICogICAgIHJldHVybiBsaXN0LmluZGV4T2YoaXRlbSk7XG4gICAqICAgfSxcbiAgICogICBkZWNvZGU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICogICAgIC8vIExvb2sgdXAgdGhlIGxpc3QgaXRlbSBieSBpbmRleFxuICAgKiAgICAgcmV0dXJuIGxpc3RbcGFyc2VJbnQoaXRlbSwgMTApXTtcbiAgICogICB9LFxuICAgKiAgIGlzOiBmdW5jdGlvbihpdGVtKSB7XG4gICAqICAgICAvLyBFbnN1cmUgdGhlIGl0ZW0gaXMgdmFsaWQgYnkgY2hlY2tpbmcgdG8gc2VlIHRoYXQgaXQgYXBwZWFyc1xuICAgKiAgICAgLy8gaW4gdGhlIGxpc3RcbiAgICogICAgIHJldHVybiBsaXN0LmluZGV4T2YoaXRlbSkgPiAtMTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZSgnbGlzdCcsIHtcbiAgICogICB1cmw6IFwiL2xpc3Qve2l0ZW06bGlzdEl0ZW19XCIsXG4gICAqICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCRzdGF0ZVBhcmFtcy5pdGVtKTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyAuLi5cbiAgICpcbiAgICogLy8gQ2hhbmdlcyBVUkwgdG8gJy9saXN0LzMnLCBsb2dzIFwiUmluZ29cIiB0byB0aGUgY29uc29sZVxuICAgKiAkc3RhdGUuZ28oJ2xpc3QnLCB7IGl0ZW06IFwiUmluZ29cIiB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIFRoaXMgaXMgYSBtb3JlIGNvbXBsZXggZXhhbXBsZSBvZiBhIHR5cGUgdGhhdCByZWxpZXMgb24gZGVwZW5kZW5jeSBpbmplY3Rpb24gdG9cbiAgICogaW50ZXJhY3Qgd2l0aCBzZXJ2aWNlcywgYW5kIHVzZXMgdGhlIHBhcmFtZXRlciBuYW1lIGZyb20gdGhlIFVSTCB0byBpbmZlciBob3cgdG9cbiAgICogaGFuZGxlIGVuY29kaW5nIGFuZCBkZWNvZGluZyBwYXJhbWV0ZXIgdmFsdWVzOlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiAvLyBEZWZpbmVzIGEgY3VzdG9tIHR5cGUgdGhhdCBnZXRzIGEgdmFsdWUgZnJvbSBhIHNlcnZpY2UsXG4gICAqIC8vIHdoZXJlIGVhY2ggc2VydmljZSBnZXRzIGRpZmZlcmVudCB0eXBlcyBvZiB2YWx1ZXMgZnJvbVxuICAgKiAvLyBhIGJhY2tlbmQgQVBJOlxuICAgKiAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlci50eXBlKCdkYk9iamVjdCcsIHt9LCBmdW5jdGlvbihVc2VycywgUG9zdHMpIHtcbiAgICpcbiAgICogICAvLyBNYXRjaGVzIHVwIHNlcnZpY2VzIHRvIFVSTCBwYXJhbWV0ZXIgbmFtZXNcbiAgICogICB2YXIgc2VydmljZXMgPSB7XG4gICAqICAgICB1c2VyOiBVc2VycyxcbiAgICogICAgIHBvc3Q6IFBvc3RzXG4gICAqICAgfTtcbiAgICpcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgZW5jb2RlOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICogICAgICAgLy8gUmVwcmVzZW50IHRoZSBvYmplY3QgaW4gdGhlIFVSTCB1c2luZyBpdHMgdW5pcXVlIElEXG4gICAqICAgICAgIHJldHVybiBvYmplY3QuaWQ7XG4gICAqICAgICB9LFxuICAgKiAgICAgZGVjb2RlOiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAqICAgICAgIC8vIExvb2sgdXAgdGhlIG9iamVjdCBieSBJRCwgdXNpbmcgdGhlIHBhcmFtZXRlclxuICAgKiAgICAgICAvLyBuYW1lIChrZXkpIHRvIGNhbGwgdGhlIGNvcnJlY3Qgc2VydmljZVxuICAgKiAgICAgICByZXR1cm4gc2VydmljZXNba2V5XS5maW5kQnlJZCh2YWx1ZSk7XG4gICAqICAgICB9LFxuICAgKiAgICAgaXM6IGZ1bmN0aW9uKG9iamVjdCwga2V5KSB7XG4gICAqICAgICAgIC8vIENoZWNrIHRoYXQgb2JqZWN0IGlzIGEgdmFsaWQgZGJPYmplY3RcbiAgICogICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNPYmplY3Qob2JqZWN0KSAmJiBvYmplY3QuaWQgJiYgc2VydmljZXNba2V5XTtcbiAgICogICAgIH1cbiAgICogICAgIGVxdWFsczogZnVuY3Rpb24oYSwgYikge1xuICAgKiAgICAgICAvLyBDaGVjayB0aGUgZXF1YWxpdHkgb2YgZGVjb2RlZCBvYmplY3RzIGJ5IGNvbXBhcmluZ1xuICAgKiAgICAgICAvLyB0aGVpciB1bmlxdWUgSURzXG4gICAqICAgICAgIHJldHVybiBhLmlkID09PSBiLmlkO1xuICAgKiAgICAgfVxuICAgKiAgIH07XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyBJbiBhIGNvbmZpZygpIGJsb2NrLCB5b3UgY2FuIHRoZW4gYXR0YWNoIFVSTHMgd2l0aFxuICAgKiAvLyB0eXBlLWFubm90YXRlZCBwYXJhbWV0ZXJzOlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZSgndXNlcnMnLCB7XG4gICAqICAgdXJsOiBcIi91c2Vyc1wiLFxuICAgKiAgIC8vIC4uLlxuICAgKiB9KS5zdGF0ZSgndXNlcnMuaXRlbScsIHtcbiAgICogICB1cmw6IFwiL3t1c2VyOmRiT2JqZWN0fVwiLFxuICAgKiAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICAvLyAkc3RhdGVQYXJhbXMudXNlciB3aWxsIG5vdyBiZSBhbiBvYmplY3QgcmV0dXJuZWQgZnJvbVxuICAgKiAgICAgLy8gdGhlIFVzZXJzIHNlcnZpY2VcbiAgICogICB9LFxuICAgKiAgIC8vIC4uLlxuICAgKiB9KTtcbiAgICogPC9wcmU+XG4gICAqL1xuICB0aGlzLnR5cGUgPSBmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbiwgZGVmaW5pdGlvbkZuKSB7XG4gICAgaWYgKCFpc0RlZmluZWQoZGVmaW5pdGlvbikpIHJldHVybiAkdHlwZXNbbmFtZV07XG4gICAgaWYgKCR0eXBlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgdGhyb3cgbmV3IEVycm9yKFwiQSB0eXBlIG5hbWVkICdcIiArIG5hbWUgKyBcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtcblxuICAgICR0eXBlc1tuYW1lXSA9IG5ldyBUeXBlKGV4dGVuZCh7IG5hbWU6IG5hbWUgfSwgZGVmaW5pdGlvbikpO1xuICAgIGlmIChkZWZpbml0aW9uRm4pIHtcbiAgICAgIHR5cGVRdWV1ZS5wdXNoKHsgbmFtZTogbmFtZSwgZGVmOiBkZWZpbml0aW9uRm4gfSk7XG4gICAgICBpZiAoIWVucXVldWUpIGZsdXNoVHlwZVF1ZXVlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIGBmbHVzaFR5cGVRdWV1ZSgpYCB3YWl0cyB1bnRpbCBgJHVybE1hdGNoZXJGYWN0b3J5YCBpcyBpbmplY3RlZCBiZWZvcmUgaW52b2tpbmcgdGhlIHF1ZXVlZCBgZGVmaW5pdGlvbkZuYHNcbiAgZnVuY3Rpb24gZmx1c2hUeXBlUXVldWUoKSB7XG4gICAgd2hpbGUodHlwZVF1ZXVlLmxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlUXVldWUuc2hpZnQoKTtcbiAgICAgIGlmICh0eXBlLnBhdHRlcm4pIHRocm93IG5ldyBFcnJvcihcIllvdSBjYW5ub3Qgb3ZlcnJpZGUgYSB0eXBlJ3MgLnBhdHRlcm4gYXQgcnVudGltZS5cIik7XG4gICAgICBhbmd1bGFyLmV4dGVuZCgkdHlwZXNbdHlwZS5uYW1lXSwgaW5qZWN0b3IuaW52b2tlKHR5cGUuZGVmKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVnaXN0ZXIgZGVmYXVsdCB0eXBlcy4gU3RvcmUgdGhlbSBpbiB0aGUgcHJvdG90eXBlIG9mICR0eXBlcy5cbiAgZm9yRWFjaChkZWZhdWx0VHlwZXMsIGZ1bmN0aW9uKHR5cGUsIG5hbWUpIHsgJHR5cGVzW25hbWVdID0gbmV3IFR5cGUoZXh0ZW5kKHtuYW1lOiBuYW1lfSwgdHlwZSkpOyB9KTtcbiAgJHR5cGVzID0gaW5oZXJpdCgkdHlwZXMsIHt9KTtcblxuICAvKiBObyBuZWVkIHRvIGRvY3VtZW50ICRnZXQsIHNpbmNlIGl0IHJldHVybnMgdGhpcyAqL1xuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uICgkaW5qZWN0b3IpIHtcbiAgICBpbmplY3RvciA9ICRpbmplY3RvcjtcbiAgICBlbnF1ZXVlID0gZmFsc2U7XG4gICAgZmx1c2hUeXBlUXVldWUoKTtcblxuICAgIGZvckVhY2goZGVmYXVsdFR5cGVzLCBmdW5jdGlvbih0eXBlLCBuYW1lKSB7XG4gICAgICBpZiAoISR0eXBlc1tuYW1lXSkgJHR5cGVzW25hbWVdID0gbmV3IFR5cGUodHlwZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1dO1xuXG4gIHRoaXMuUGFyYW0gPSBmdW5jdGlvbiBQYXJhbShpZCwgdHlwZSwgY29uZmlnLCBsb2NhdGlvbikge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBjb25maWcgPSB1bndyYXBTaG9ydGhhbmQoY29uZmlnKTtcbiAgICB0eXBlID0gZ2V0VHlwZShjb25maWcsIHR5cGUsIGxvY2F0aW9uKTtcbiAgICB2YXIgYXJyYXlNb2RlID0gZ2V0QXJyYXlNb2RlKCk7XG4gICAgdHlwZSA9IGFycmF5TW9kZSA/IHR5cGUuJGFzQXJyYXkoYXJyYXlNb2RlLCBsb2NhdGlvbiA9PT0gXCJzZWFyY2hcIikgOiB0eXBlO1xuICAgIGlmICh0eXBlLm5hbWUgPT09IFwic3RyaW5nXCIgJiYgIWFycmF5TW9kZSAmJiBsb2NhdGlvbiA9PT0gXCJwYXRoXCIgJiYgY29uZmlnLnZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICBjb25maWcudmFsdWUgPSBcIlwiOyAvLyBmb3IgMC4yLng7IGluIDAuMy4wKyBkbyBub3QgYXV0b21hdGljYWxseSBkZWZhdWx0IHRvIFwiXCJcbiAgICB2YXIgaXNPcHRpb25hbCA9IGNvbmZpZy52YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBzcXVhc2ggPSBnZXRTcXVhc2hQb2xpY3koY29uZmlnLCBpc09wdGlvbmFsKTtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2UoY29uZmlnLCBhcnJheU1vZGUsIGlzT3B0aW9uYWwsIHNxdWFzaCk7XG5cbiAgICBmdW5jdGlvbiB1bndyYXBTaG9ydGhhbmQoY29uZmlnKSB7XG4gICAgICB2YXIga2V5cyA9IGlzT2JqZWN0KGNvbmZpZykgPyBvYmplY3RLZXlzKGNvbmZpZykgOiBbXTtcbiAgICAgIHZhciBpc1Nob3J0aGFuZCA9IGluZGV4T2Yoa2V5cywgXCJ2YWx1ZVwiKSA9PT0gLTEgJiYgaW5kZXhPZihrZXlzLCBcInR5cGVcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mKGtleXMsIFwic3F1YXNoXCIpID09PSAtMSAmJiBpbmRleE9mKGtleXMsIFwiYXJyYXlcIikgPT09IC0xO1xuICAgICAgaWYgKGlzU2hvcnRoYW5kKSBjb25maWcgPSB7IHZhbHVlOiBjb25maWcgfTtcbiAgICAgIGNvbmZpZy4kJGZuID0gaXNJbmplY3RhYmxlKGNvbmZpZy52YWx1ZSkgPyBjb25maWcudmFsdWUgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWcudmFsdWU7IH07XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFR5cGUoY29uZmlnLCB1cmxUeXBlLCBsb2NhdGlvbikge1xuICAgICAgaWYgKGNvbmZpZy50eXBlICYmIHVybFR5cGUpIHRocm93IG5ldyBFcnJvcihcIlBhcmFtICdcIitpZCtcIicgaGFzIHR3byB0eXBlIGNvbmZpZ3VyYXRpb25zLlwiKTtcbiAgICAgIGlmICh1cmxUeXBlKSByZXR1cm4gdXJsVHlwZTtcbiAgICAgIGlmICghY29uZmlnLnR5cGUpIHJldHVybiAobG9jYXRpb24gPT09IFwiY29uZmlnXCIgPyAkdHlwZXMuYW55IDogJHR5cGVzLnN0cmluZyk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNvbmZpZy50eXBlKSlcbiAgICAgICAgcmV0dXJuICR0eXBlc1tjb25maWcudHlwZV07XG4gICAgICBpZiAoY29uZmlnLnR5cGUgaW5zdGFuY2VvZiBUeXBlKVxuICAgICAgICByZXR1cm4gY29uZmlnLnR5cGU7XG4gICAgICByZXR1cm4gbmV3IFR5cGUoY29uZmlnLnR5cGUpO1xuICAgIH1cblxuICAgIC8vIGFycmF5IGNvbmZpZzogcGFyYW0gbmFtZSAocGFyYW1bXSkgb3ZlcnJpZGVzIGRlZmF1bHQgc2V0dGluZ3MuICBleHBsaWNpdCBjb25maWcgb3ZlcnJpZGVzIHBhcmFtIG5hbWUuXG4gICAgZnVuY3Rpb24gZ2V0QXJyYXlNb2RlKCkge1xuICAgICAgdmFyIGFycmF5RGVmYXVsdHMgPSB7IGFycmF5OiAobG9jYXRpb24gPT09IFwic2VhcmNoXCIgPyBcImF1dG9cIiA6IGZhbHNlKSB9O1xuICAgICAgdmFyIGFycmF5UGFyYW1Ob21lbmNsYXR1cmUgPSBpZC5tYXRjaCgvXFxbXFxdJC8pID8geyBhcnJheTogdHJ1ZSB9IDoge307XG4gICAgICByZXR1cm4gZXh0ZW5kKGFycmF5RGVmYXVsdHMsIGFycmF5UGFyYW1Ob21lbmNsYXR1cmUsIGNvbmZpZykuYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyBmYWxzZSwgdHJ1ZSwgb3IgdGhlIHNxdWFzaCB2YWx1ZSB0byBpbmRpY2F0ZSB0aGUgXCJkZWZhdWx0IHBhcmFtZXRlciB1cmwgc3F1YXNoIHBvbGljeVwiLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFNxdWFzaFBvbGljeShjb25maWcsIGlzT3B0aW9uYWwpIHtcbiAgICAgIHZhciBzcXVhc2ggPSBjb25maWcuc3F1YXNoO1xuICAgICAgaWYgKCFpc09wdGlvbmFsIHx8IHNxdWFzaCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICghaXNEZWZpbmVkKHNxdWFzaCkgfHwgc3F1YXNoID09IG51bGwpIHJldHVybiBkZWZhdWx0U3F1YXNoUG9saWN5O1xuICAgICAgaWYgKHNxdWFzaCA9PT0gdHJ1ZSB8fCBpc1N0cmluZyhzcXVhc2gpKSByZXR1cm4gc3F1YXNoO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzcXVhc2ggcG9saWN5OiAnXCIgKyBzcXVhc2ggKyBcIicuIFZhbGlkIHBvbGljaWVzOiBmYWxzZSwgdHJ1ZSwgb3IgYXJiaXRyYXJ5IHN0cmluZ1wiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRSZXBsYWNlKGNvbmZpZywgYXJyYXlNb2RlLCBpc09wdGlvbmFsLCBzcXVhc2gpIHtcbiAgICAgIHZhciByZXBsYWNlLCBjb25maWd1cmVkS2V5cywgZGVmYXVsdFBvbGljeSA9IFtcbiAgICAgICAgeyBmcm9tOiBcIlwiLCAgIHRvOiAoaXNPcHRpb25hbCB8fCBhcnJheU1vZGUgPyB1bmRlZmluZWQgOiBcIlwiKSB9LFxuICAgICAgICB7IGZyb206IG51bGwsIHRvOiAoaXNPcHRpb25hbCB8fCBhcnJheU1vZGUgPyB1bmRlZmluZWQgOiBcIlwiKSB9XG4gICAgICBdO1xuICAgICAgcmVwbGFjZSA9IGlzQXJyYXkoY29uZmlnLnJlcGxhY2UpID8gY29uZmlnLnJlcGxhY2UgOiBbXTtcbiAgICAgIGlmIChpc1N0cmluZyhzcXVhc2gpKVxuICAgICAgICByZXBsYWNlLnB1c2goeyBmcm9tOiBzcXVhc2gsIHRvOiB1bmRlZmluZWQgfSk7XG4gICAgICBjb25maWd1cmVkS2V5cyA9IG1hcChyZXBsYWNlLCBmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpdGVtLmZyb207IH0gKTtcbiAgICAgIHJldHVybiBmaWx0ZXIoZGVmYXVsdFBvbGljeSwgZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaW5kZXhPZihjb25maWd1cmVkS2V5cywgaXRlbS5mcm9tKSA9PT0gLTE7IH0pLmNvbmNhdChyZXBsYWNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBbSW50ZXJuYWxdIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHBhcmFtZXRlciwgd2hpY2ggbWF5IGJlIGFuIGluamVjdGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gJCRnZXREZWZhdWx0VmFsdWUoKSB7XG4gICAgICBpZiAoIWluamVjdG9yKSB0aHJvdyBuZXcgRXJyb3IoXCJJbmplY3RhYmxlIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGF0IGNvbmZpZ3VyYXRpb24gdGltZVwiKTtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBpbmplY3Rvci5pbnZva2UoY29uZmlnLiQkZm4pO1xuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gbnVsbCAmJiBkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhc2VsZi50eXBlLmlzKGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlZmF1bHQgdmFsdWUgKFwiICsgZGVmYXVsdFZhbHVlICsgXCIpIGZvciBwYXJhbWV0ZXIgJ1wiICsgc2VsZi5pZCArIFwiJyBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgVHlwZSAoXCIgKyBzZWxmLnR5cGUubmFtZSArIFwiKVwiKTtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogW0ludGVybmFsXSBHZXRzIHRoZSBkZWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGEgdmFsdWUgaWYgdGhlIHZhbHVlIGlzIGRlZmluZWQsIG90aGVyd2lzZSwgcmV0dXJucyB0aGVcbiAgICAgKiBkZWZhdWx0IHZhbHVlLCB3aGljaCBtYXkgYmUgdGhlIHJlc3VsdCBvZiBhbiBpbmplY3RhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uICR2YWx1ZSh2YWx1ZSkge1xuICAgICAgZnVuY3Rpb24gaGFzUmVwbGFjZVZhbCh2YWwpIHsgcmV0dXJuIGZ1bmN0aW9uKG9iaikgeyByZXR1cm4gb2JqLmZyb20gPT09IHZhbDsgfTsgfVxuICAgICAgZnVuY3Rpb24gJHJlcGxhY2UodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gbWFwKGZpbHRlcihzZWxmLnJlcGxhY2UsIGhhc1JlcGxhY2VWYWwodmFsdWUpKSwgZnVuY3Rpb24ob2JqKSB7IHJldHVybiBvYmoudG87IH0pO1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQubGVuZ3RoID8gcmVwbGFjZW1lbnRbMF0gOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gJHJlcGxhY2UodmFsdWUpO1xuICAgICAgcmV0dXJuICFpc0RlZmluZWQodmFsdWUpID8gJCRnZXREZWZhdWx0VmFsdWUoKSA6IHNlbGYudHlwZS4kbm9ybWFsaXplKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHsgcmV0dXJuIFwie1BhcmFtOlwiICsgaWQgKyBcIiBcIiArIHR5cGUgKyBcIiBzcXVhc2g6ICdcIiArIHNxdWFzaCArIFwiJyBvcHRpb25hbDogXCIgKyBpc09wdGlvbmFsICsgXCJ9XCI7IH1cblxuICAgIGV4dGVuZCh0aGlzLCB7XG4gICAgICBpZDogaWQsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgYXJyYXk6IGFycmF5TW9kZSxcbiAgICAgIHNxdWFzaDogc3F1YXNoLFxuICAgICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICAgIGlzT3B0aW9uYWw6IGlzT3B0aW9uYWwsXG4gICAgICB2YWx1ZTogJHZhbHVlLFxuICAgICAgZHluYW1pYzogdW5kZWZpbmVkLFxuICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICB0b1N0cmluZzogdG9TdHJpbmdcbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBQYXJhbVNldChwYXJhbXMpIHtcbiAgICBleHRlbmQodGhpcywgcGFyYW1zIHx8IHt9KTtcbiAgfVxuXG4gIFBhcmFtU2V0LnByb3RvdHlwZSA9IHtcbiAgICAkJG5ldzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaW5oZXJpdCh0aGlzLCBleHRlbmQobmV3IFBhcmFtU2V0KCksIHsgJCRwYXJlbnQ6IHRoaXN9KSk7XG4gICAgfSxcbiAgICAkJGtleXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBrZXlzID0gW10sIGNoYWluID0gW10sIHBhcmVudCA9IHRoaXMsXG4gICAgICAgIGlnbm9yZSA9IG9iamVjdEtleXMoUGFyYW1TZXQucHJvdG90eXBlKTtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHsgY2hhaW4ucHVzaChwYXJlbnQpOyBwYXJlbnQgPSBwYXJlbnQuJCRwYXJlbnQ7IH1cbiAgICAgIGNoYWluLnJldmVyc2UoKTtcbiAgICAgIGZvckVhY2goY2hhaW4sIGZ1bmN0aW9uKHBhcmFtc2V0KSB7XG4gICAgICAgIGZvckVhY2gob2JqZWN0S2V5cyhwYXJhbXNldCksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgaWYgKGluZGV4T2Yoa2V5cywga2V5KSA9PT0gLTEgJiYgaW5kZXhPZihpZ25vcmUsIGtleSkgPT09IC0xKSBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH0sXG4gICAgJCR2YWx1ZXM6IGZ1bmN0aW9uKHBhcmFtVmFsdWVzKSB7XG4gICAgICB2YXIgdmFsdWVzID0ge30sIHNlbGYgPSB0aGlzO1xuICAgICAgZm9yRWFjaChzZWxmLiQka2V5cygpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFsdWVzW2tleV0gPSBzZWxmW2tleV0udmFsdWUocGFyYW1WYWx1ZXMgJiYgcGFyYW1WYWx1ZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICAkJGVxdWFsczogZnVuY3Rpb24ocGFyYW1WYWx1ZXMxLCBwYXJhbVZhbHVlczIpIHtcbiAgICAgIHZhciBlcXVhbCA9IHRydWUsIHNlbGYgPSB0aGlzO1xuICAgICAgZm9yRWFjaChzZWxmLiQka2V5cygpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIGxlZnQgPSBwYXJhbVZhbHVlczEgJiYgcGFyYW1WYWx1ZXMxW2tleV0sIHJpZ2h0ID0gcGFyYW1WYWx1ZXMyICYmIHBhcmFtVmFsdWVzMltrZXldO1xuICAgICAgICBpZiAoIXNlbGZba2V5XS50eXBlLmVxdWFscyhsZWZ0LCByaWdodCkpIGVxdWFsID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlcXVhbDtcbiAgICB9LFxuICAgICQkdmFsaWRhdGVzOiBmdW5jdGlvbiAkJHZhbGlkYXRlKHBhcmFtVmFsdWVzKSB7XG4gICAgICB2YXIga2V5cyA9IHRoaXMuJCRrZXlzKCksIGksIHBhcmFtLCByYXdWYWwsIG5vcm1hbGl6ZWQsIGVuY29kZWQ7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJhbSA9IHRoaXNba2V5c1tpXV07XG4gICAgICAgIHJhd1ZhbCA9IHBhcmFtVmFsdWVzW2tleXNbaV1dO1xuICAgICAgICBpZiAoKHJhd1ZhbCA9PT0gdW5kZWZpbmVkIHx8IHJhd1ZhbCA9PT0gbnVsbCkgJiYgcGFyYW0uaXNPcHRpb25hbClcbiAgICAgICAgICBicmVhazsgLy8gVGhlcmUgd2FzIG5vIHBhcmFtZXRlciB2YWx1ZSwgYnV0IHRoZSBwYXJhbSBpcyBvcHRpb25hbFxuICAgICAgICBub3JtYWxpemVkID0gcGFyYW0udHlwZS4kbm9ybWFsaXplKHJhd1ZhbCk7XG4gICAgICAgIGlmICghcGFyYW0udHlwZS5pcyhub3JtYWxpemVkKSlcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFRoZSB2YWx1ZSB3YXMgbm90IG9mIHRoZSBjb3JyZWN0IFR5cGUsIGFuZCBjb3VsZCBub3QgYmUgZGVjb2RlZCB0byB0aGUgY29ycmVjdCBUeXBlXG4gICAgICAgIGVuY29kZWQgPSBwYXJhbS50eXBlLmVuY29kZShub3JtYWxpemVkKTtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoZW5jb2RlZCkgJiYgIXBhcmFtLnR5cGUucGF0dGVybi5leGVjKGVuY29kZWQpKVxuICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gVGhlIHZhbHVlIHdhcyBvZiB0aGUgY29ycmVjdCB0eXBlLCBidXQgd2hlbiBlbmNvZGVkLCBkaWQgbm90IG1hdGNoIHRoZSBUeXBlJ3MgcmVnZXhwXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgICQkcGFyZW50OiB1bmRlZmluZWRcbiAgfTtcblxuICB0aGlzLlBhcmFtU2V0ID0gUGFyYW1TZXQ7XG59XG5cbi8vIFJlZ2lzdGVyIGFzIGEgcHJvdmlkZXIgc28gaXQncyBhdmFpbGFibGUgdG8gb3RoZXIgcHJvdmlkZXJzXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5wcm92aWRlcignJHVybE1hdGNoZXJGYWN0b3J5JywgJFVybE1hdGNoZXJGYWN0b3J5KTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIudXRpbCcpLnJ1bihbJyR1cmxNYXRjaGVyRmFjdG9yeScsIGZ1bmN0aW9uKCR1cmxNYXRjaGVyRmFjdG9yeSkgeyB9XSk7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJcbiAqIEByZXF1aXJlcyAkbG9jYXRpb25Qcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCR1cmxSb3V0ZXJQcm92aWRlcmAgaGFzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB3YXRjaGluZyBgJGxvY2F0aW9uYC4gXG4gKiBXaGVuIGAkbG9jYXRpb25gIGNoYW5nZXMgaXQgcnVucyB0aHJvdWdoIGEgbGlzdCBvZiBydWxlcyBvbmUgYnkgb25lIHVudGlsIGEgXG4gKiBtYXRjaCBpcyBmb3VuZC4gYCR1cmxSb3V0ZXJQcm92aWRlcmAgaXMgdXNlZCBiZWhpbmQgdGhlIHNjZW5lcyBhbnl0aW1lIHlvdSBzcGVjaWZ5IFxuICogYSB1cmwgaW4gYSBzdGF0ZSBjb25maWd1cmF0aW9uLiBBbGwgdXJscyBhcmUgY29tcGlsZWQgaW50byBhIFVybE1hdGNoZXIgb2JqZWN0LlxuICpcbiAqIFRoZXJlIGFyZSBzZXZlcmFsIG1ldGhvZHMgb24gYCR1cmxSb3V0ZXJQcm92aWRlcmAgdGhhdCBtYWtlIGl0IHVzZWZ1bCB0byB1c2UgZGlyZWN0bHlcbiAqIGluIHlvdXIgbW9kdWxlIGNvbmZpZy5cbiAqL1xuJFVybFJvdXRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRsb2NhdGlvblByb3ZpZGVyJywgJyR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyJ107XG5mdW5jdGlvbiAkVXJsUm91dGVyUHJvdmlkZXIoICAgJGxvY2F0aW9uUHJvdmlkZXIsICAgJHVybE1hdGNoZXJGYWN0b3J5KSB7XG4gIHZhciBydWxlcyA9IFtdLCBvdGhlcndpc2UgPSBudWxsLCBpbnRlcmNlcHREZWZlcnJlZCA9IGZhbHNlLCBsaXN0ZW5lcjtcblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgYSBwcmVmaXggb2YgYWxsIHN0cmluZ3MgbWF0Y2hpbmcgdGhlIFJlZ0V4cFxuICBmdW5jdGlvbiByZWdFeHBQcmVmaXgocmUpIHtcbiAgICB2YXIgcHJlZml4ID0gL15cXF4oKD86XFxcXFteYS16QS1aMC05XXxbXlxcXFxcXFtcXF1cXF4kKis/LigpfHt9XSspKikvLmV4ZWMocmUuc291cmNlKTtcbiAgICByZXR1cm4gKHByZWZpeCAhPSBudWxsKSA/IHByZWZpeFsxXS5yZXBsYWNlKC9cXFxcKC4pL2csIFwiJDFcIikgOiAnJztcbiAgfVxuXG4gIC8vIEludGVycG9sYXRlcyBtYXRjaGVkIHZhbHVlcyBpbnRvIGEgU3RyaW5nLnJlcGxhY2UoKS1zdHlsZSBwYXR0ZXJuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKHBhdHRlcm4sIG1hdGNoKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4ucmVwbGFjZSgvXFwkKFxcJHxcXGR7MSwyfSkvLCBmdW5jdGlvbiAobSwgd2hhdCkge1xuICAgICAgcmV0dXJuIG1hdGNoW3doYXQgPT09ICckJyA/IDAgOiBOdW1iZXIod2hhdCldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlciNydWxlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVmaW5lcyBydWxlcyB0aGF0IGFyZSB1c2VkIGJ5IGAkdXJsUm91dGVyUHJvdmlkZXJgIHRvIGZpbmQgbWF0Y2hlcyBmb3JcbiAgICogc3BlY2lmaWMgVVJMcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPHByZT5cbiAgICogdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlci5yb3V0ZXInXSk7XG4gICAqXG4gICAqIGFwcC5jb25maWcoZnVuY3Rpb24gKCR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgKiAgIC8vIEhlcmUncyBhbiBleGFtcGxlIG9mIGhvdyB5b3UgbWlnaHQgYWxsb3cgY2FzZSBpbnNlbnNpdGl2ZSB1cmxzXG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLnJ1bGUoZnVuY3Rpb24gKCRpbmplY3RvciwgJGxvY2F0aW9uKSB7XG4gICAqICAgICB2YXIgcGF0aCA9ICRsb2NhdGlvbi5wYXRoKCksXG4gICAqICAgICAgICAgbm9ybWFsaXplZCA9IHBhdGgudG9Mb3dlckNhc2UoKTtcbiAgICpcbiAgICogICAgIGlmIChwYXRoICE9PSBub3JtYWxpemVkKSB7XG4gICAqICAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKiB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJ1bGUgSGFuZGxlciBmdW5jdGlvbiB0aGF0IHRha2VzIGAkaW5qZWN0b3JgIGFuZCBgJGxvY2F0aW9uYFxuICAgKiBzZXJ2aWNlcyBhcyBhcmd1bWVudHMuIFlvdSBjYW4gdXNlIHRoZW0gdG8gcmV0dXJuIGEgdmFsaWQgcGF0aCBhcyBhIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSBgJHVybFJvdXRlclByb3ZpZGVyYCAtIGAkdXJsUm91dGVyUHJvdmlkZXJgIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLnJ1bGUgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIGlmICghaXNGdW5jdGlvbihydWxlKSkgdGhyb3cgbmV3IEVycm9yKFwiJ3J1bGUnIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICBydWxlcy5wdXNoKHJ1bGUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI290aGVyd2lzZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlZmluZXMgYSBwYXRoIHRoYXQgaXMgdXNlZCB3aGVuIGFuIGludmFsaWQgcm91dGUgaXMgcmVxdWVzdGVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqICAgLy8gaWYgdGhlIHBhdGggZG9lc24ndCBtYXRjaCBhbnkgb2YgdGhlIHVybHMgeW91IGNvbmZpZ3VyZWRcbiAgICogICAvLyBvdGhlcndpc2Ugd2lsbCB0YWtlIGNhcmUgb2Ygcm91dGluZyB0aGUgdXNlciB0byB0aGVcbiAgICogICAvLyBzcGVjaWZpZWQgdXJsXG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2luZGV4Jyk7XG4gICAqXG4gICAqICAgLy8gRXhhbXBsZSBvZiB1c2luZyBmdW5jdGlvbiBydWxlIGFzIHBhcmFtXG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICogICAgIHJldHVybiAnL2EvdmFsaWQvdXJsJztcbiAgICogICB9KTtcbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gcnVsZSBUaGUgdXJsIHBhdGggeW91IHdhbnQgdG8gcmVkaXJlY3QgdG8gb3IgYSBmdW5jdGlvbiBcbiAgICogcnVsZSB0aGF0IHJldHVybnMgdGhlIHVybCBwYXRoLiBUaGUgZnVuY3Rpb24gdmVyc2lvbiBpcyBwYXNzZWQgdHdvIHBhcmFtczogXG4gICAqIGAkaW5qZWN0b3JgIGFuZCBgJGxvY2F0aW9uYCBzZXJ2aWNlcywgYW5kIG11c3QgcmV0dXJuIGEgdXJsIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSBgJHVybFJvdXRlclByb3ZpZGVyYCAtIGAkdXJsUm91dGVyUHJvdmlkZXJgIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLm90aGVyd2lzZSA9IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgaWYgKGlzU3RyaW5nKHJ1bGUpKSB7XG4gICAgICB2YXIgcmVkaXJlY3QgPSBydWxlO1xuICAgICAgcnVsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZGlyZWN0OyB9O1xuICAgIH1cbiAgICBlbHNlIGlmICghaXNGdW5jdGlvbihydWxlKSkgdGhyb3cgbmV3IEVycm9yKFwiJ3J1bGUnIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICBvdGhlcndpc2UgPSBydWxlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgZnVuY3Rpb24gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIG1hdGNoKSB7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByZXN1bHQgPSAkaW5qZWN0b3IuaW52b2tlKGhhbmRsZXIsIGhhbmRsZXIsIHsgJG1hdGNoOiBtYXRjaCB9KTtcbiAgICByZXR1cm4gaXNEZWZpbmVkKHJlc3VsdCkgPyByZXN1bHQgOiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlciN3aGVuXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgaGFuZGxlciBmb3IgYSBnaXZlbiB1cmwgbWF0Y2hpbmcuIFxuICAgKiBcbiAgICogSWYgdGhlIGhhbmRsZXIgaXMgYSBzdHJpbmcsIGl0IGlzXG4gICAqIHRyZWF0ZWQgYXMgYSByZWRpcmVjdCwgYW5kIGlzIGludGVycG9sYXRlZCBhY2NvcmRpbmcgdG8gdGhlIHN5bnRheCBvZiBtYXRjaFxuICAgKiAoaS5lLiBsaWtlIGBTdHJpbmcucmVwbGFjZSgpYCBmb3IgYFJlZ0V4cGAsIG9yIGxpa2UgYSBgVXJsTWF0Y2hlcmAgcGF0dGVybiBvdGhlcndpc2UpLlxuICAgKlxuICAgKiBJZiB0aGUgaGFuZGxlciBpcyBhIGZ1bmN0aW9uLCBpdCBpcyBpbmplY3RhYmxlLiBJdCBnZXRzIGludm9rZWQgaWYgYCRsb2NhdGlvbmBcbiAgICogbWF0Y2hlcy4gWW91IGhhdmUgdGhlIG9wdGlvbiBvZiBpbmplY3QgdGhlIG1hdGNoIG9iamVjdCBhcyBgJG1hdGNoYC5cbiAgICpcbiAgICogVGhlIGhhbmRsZXIgY2FuIHJldHVyblxuICAgKlxuICAgKiAtICoqZmFsc3kqKiB0byBpbmRpY2F0ZSB0aGF0IHRoZSBydWxlIGRpZG4ndCBtYXRjaCBhZnRlciBhbGwsIHRoZW4gYCR1cmxSb3V0ZXJgXG4gICAqICAgd2lsbCBjb250aW51ZSB0cnlpbmcgdG8gZmluZCBhbm90aGVyIG9uZSB0aGF0IG1hdGNoZXMuXG4gICAqIC0gKipzdHJpbmcqKiB3aGljaCBpcyB0cmVhdGVkIGFzIGEgcmVkaXJlY3QgYW5kIHBhc3NlZCB0byBgJGxvY2F0aW9uLnVybCgpYFxuICAgKiAtICoqdm9pZCoqIG9yIGFueSAqKnRydXRoeSoqIHZhbHVlIHRlbGxzIGAkdXJsUm91dGVyYCB0aGF0IHRoZSB1cmwgd2FzIGhhbmRsZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXIucm91dGVyJ10pO1xuICAgKlxuICAgKiBhcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbigkc3RhdGUudXJsLCBmdW5jdGlvbiAoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIGlmICgkc3RhdGUuJGN1cnJlbnQubmF2aWdhYmxlICE9PSBzdGF0ZSB8fFxuICAgKiAgICAgICAgICFlcXVhbEZvcktleXMoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgICAkc3RhdGUudHJhbnNpdGlvblRvKHN0YXRlLCAkbWF0Y2gsIGZhbHNlKTtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHdoYXQgVGhlIGluY29taW5nIHBhdGggdGhhdCB5b3Ugd2FudCB0byByZWRpcmVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IGhhbmRsZXIgVGhlIHBhdGggeW91IHdhbnQgdG8gcmVkaXJlY3QgeW91ciB1c2VyIHRvLlxuICAgKi9cbiAgdGhpcy53aGVuID0gZnVuY3Rpb24gKHdoYXQsIGhhbmRsZXIpIHtcbiAgICB2YXIgcmVkaXJlY3QsIGhhbmRsZXJJc1N0cmluZyA9IGlzU3RyaW5nKGhhbmRsZXIpO1xuICAgIGlmIChpc1N0cmluZyh3aGF0KSkgd2hhdCA9ICR1cmxNYXRjaGVyRmFjdG9yeS5jb21waWxlKHdoYXQpO1xuXG4gICAgaWYgKCFoYW5kbGVySXNTdHJpbmcgJiYgIWlzRnVuY3Rpb24oaGFuZGxlcikgJiYgIWlzQXJyYXkoaGFuZGxlcikpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkICdoYW5kbGVyJyBpbiB3aGVuKClcIik7XG5cbiAgICB2YXIgc3RyYXRlZ2llcyA9IHtcbiAgICAgIG1hdGNoZXI6IGZ1bmN0aW9uICh3aGF0LCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChoYW5kbGVySXNTdHJpbmcpIHtcbiAgICAgICAgICByZWRpcmVjdCA9ICR1cmxNYXRjaGVyRmFjdG9yeS5jb21waWxlKGhhbmRsZXIpO1xuICAgICAgICAgIGhhbmRsZXIgPSBbJyRtYXRjaCcsIGZ1bmN0aW9uICgkbWF0Y2gpIHsgcmV0dXJuIHJlZGlyZWN0LmZvcm1hdCgkbWF0Y2gpOyB9XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgkaW5qZWN0b3IsICRsb2NhdGlvbikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJZk1hdGNoKCRpbmplY3RvciwgaGFuZGxlciwgd2hhdC5leGVjKCRsb2NhdGlvbi5wYXRoKCksICRsb2NhdGlvbi5zZWFyY2goKSkpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgcHJlZml4OiBpc1N0cmluZyh3aGF0LnByZWZpeCkgPyB3aGF0LnByZWZpeCA6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJlZ2V4OiBmdW5jdGlvbiAod2hhdCwgaGFuZGxlcikge1xuICAgICAgICBpZiAod2hhdC5nbG9iYWwgfHwgd2hhdC5zdGlja3kpIHRocm93IG5ldyBFcnJvcihcIndoZW4oKSBSZWdFeHAgbXVzdCBub3QgYmUgZ2xvYmFsIG9yIHN0aWNreVwiKTtcblxuICAgICAgICBpZiAoaGFuZGxlcklzU3RyaW5nKSB7XG4gICAgICAgICAgcmVkaXJlY3QgPSBoYW5kbGVyO1xuICAgICAgICAgIGhhbmRsZXIgPSBbJyRtYXRjaCcsIGZ1bmN0aW9uICgkbWF0Y2gpIHsgcmV0dXJuIGludGVycG9sYXRlKHJlZGlyZWN0LCAkbWF0Y2gpOyB9XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgkaW5qZWN0b3IsICRsb2NhdGlvbikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJZk1hdGNoKCRpbmplY3RvciwgaGFuZGxlciwgd2hhdC5leGVjKCRsb2NhdGlvbi5wYXRoKCkpKTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIHByZWZpeDogcmVnRXhwUHJlZml4KHdoYXQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY2hlY2sgPSB7IG1hdGNoZXI6ICR1cmxNYXRjaGVyRmFjdG9yeS5pc01hdGNoZXIod2hhdCksIHJlZ2V4OiB3aGF0IGluc3RhbmNlb2YgUmVnRXhwIH07XG5cbiAgICBmb3IgKHZhciBuIGluIGNoZWNrKSB7XG4gICAgICBpZiAoY2hlY2tbbl0pIHJldHVybiB0aGlzLnJ1bGUoc3RyYXRlZ2llc1tuXSh3aGF0LCBoYW5kbGVyKSk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCAnd2hhdCcgaW4gd2hlbigpXCIpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXIjZGVmZXJJbnRlcmNlcHRcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEaXNhYmxlcyAob3IgZW5hYmxlcykgZGVmZXJyaW5nIGxvY2F0aW9uIGNoYW5nZSBpbnRlcmNlcHRpb24uXG4gICAqXG4gICAqIElmIHlvdSB3aXNoIHRvIGN1c3RvbWl6ZSB0aGUgYmVoYXZpb3Igb2Ygc3luY2luZyB0aGUgVVJMIChmb3IgZXhhbXBsZSwgaWYgeW91IHdpc2ggdG9cbiAgICogZGVmZXIgYSB0cmFuc2l0aW9uIGJ1dCBtYWludGFpbiB0aGUgY3VycmVudCBVUkwpLCBjYWxsIHRoaXMgbWV0aG9kIGF0IGNvbmZpZ3VyYXRpb24gdGltZS5cbiAgICogVGhlbiwgYXQgcnVuIHRpbWUsIGNhbGwgYCR1cmxSb3V0ZXIubGlzdGVuKClgIGFmdGVyIHlvdSBoYXZlIGNvbmZpZ3VyZWQgeW91ciBvd25cbiAgICogYCRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NgIGV2ZW50IGhhbmRsZXIuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXIucm91dGVyJ10pO1xuICAgKlxuICAgKiBhcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICpcbiAgICogICAvLyBQcmV2ZW50ICR1cmxSb3V0ZXIgZnJvbSBhdXRvbWF0aWNhbGx5IGludGVyY2VwdGluZyBVUkwgY2hhbmdlcztcbiAgICogICAvLyB0aGlzIGFsbG93cyB5b3UgdG8gY29uZmlndXJlIGN1c3RvbSBiZWhhdmlvciBpbiBiZXR3ZWVuXG4gICAqICAgLy8gbG9jYXRpb24gY2hhbmdlcyBhbmQgcm91dGUgc3luY2hyb25pemF0aW9uOlxuICAgKiAgICR1cmxSb3V0ZXJQcm92aWRlci5kZWZlckludGVyY2VwdCgpO1xuICAgKlxuICAgKiB9KS5ydW4oZnVuY3Rpb24gKCRyb290U2NvcGUsICR1cmxSb3V0ZXIsIFVzZXJTZXJ2aWNlKSB7XG4gICAqXG4gICAqICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbihlKSB7XG4gICAqICAgICAvLyBVc2VyU2VydmljZSBpcyBhbiBleGFtcGxlIHNlcnZpY2UgZm9yIG1hbmFnaW5nIHVzZXIgc3RhdGVcbiAgICogICAgIGlmIChVc2VyU2VydmljZS5pc0xvZ2dlZEluKCkpIHJldHVybjtcbiAgICpcbiAgICogICAgIC8vIFByZXZlbnQgJHVybFJvdXRlcidzIGRlZmF1bHQgaGFuZGxlciBmcm9tIGZpcmluZ1xuICAgKiAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgKlxuICAgKiAgICAgVXNlclNlcnZpY2UuaGFuZGxlTG9naW4oKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICAvLyBPbmNlIHRoZSB1c2VyIGhhcyBsb2dnZWQgaW4sIHN5bmMgdGhlIGN1cnJlbnQgVVJMXG4gICAqICAgICAgIC8vIHRvIHRoZSByb3V0ZXI6XG4gICAqICAgICAgICR1cmxSb3V0ZXIuc3luYygpO1xuICAgKiAgICAgfSk7XG4gICAqICAgfSk7XG4gICAqXG4gICAqICAgLy8gQ29uZmlndXJlcyAkdXJsUm91dGVyJ3MgbGlzdGVuZXIgKmFmdGVyKiB5b3VyIGN1c3RvbSBsaXN0ZW5lclxuICAgKiAgICR1cmxSb3V0ZXIubGlzdGVuKCk7XG4gICAqIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBkZWZlciBJbmRpY2F0ZXMgd2hldGhlciB0byBkZWZlciBsb2NhdGlvbiBjaGFuZ2UgaW50ZXJjZXB0aW9uLiBQYXNzaW5nXG4gICAgICAgICAgICBubyBwYXJhbWV0ZXIgaXMgZXF1aXZhbGVudCB0byBgdHJ1ZWAuXG4gICAqL1xuICB0aGlzLmRlZmVySW50ZXJjZXB0ID0gZnVuY3Rpb24gKGRlZmVyKSB7XG4gICAgaWYgKGRlZmVyID09PSB1bmRlZmluZWQpIGRlZmVyID0gdHJ1ZTtcbiAgICBpbnRlcmNlcHREZWZlcnJlZCA9IGRlZmVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgKlxuICAgKiBAcmVxdWlyZXMgJGxvY2F0aW9uXG4gICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICogQHJlcXVpcmVzICRicm93c2VyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gJGdldDtcbiAgJGdldC4kaW5qZWN0ID0gWyckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsICckaW5qZWN0b3InLCAnJGJyb3dzZXInLCAnJHNuaWZmZXInXTtcbiAgZnVuY3Rpb24gJGdldCggICAkbG9jYXRpb24sICAgJHJvb3RTY29wZSwgICAkaW5qZWN0b3IsICAgJGJyb3dzZXIsICAgJHNuaWZmZXIpIHtcblxuICAgIHZhciBiYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCksIGxvY2F0aW9uID0gJGxvY2F0aW9uLnVybCgpLCBsYXN0UHVzaGVkVXJsO1xuXG4gICAgZnVuY3Rpb24gYXBwZW5kQmFzZVBhdGgodXJsLCBpc0h0bWw1LCBhYnNvbHV0ZSkge1xuICAgICAgaWYgKGJhc2VIcmVmID09PSAnLycpIHJldHVybiB1cmw7XG4gICAgICBpZiAoaXNIdG1sNSkgcmV0dXJuIGJhc2VIcmVmLnNsaWNlKDAsIC0xKSArIHVybDtcbiAgICAgIGlmIChhYnNvbHV0ZSkgcmV0dXJuIGJhc2VIcmVmLnNsaWNlKDEpICsgdXJsO1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBPcHRpbWl6ZSBncm91cHMgb2YgcnVsZXMgd2l0aCBub24tZW1wdHkgcHJlZml4IGludG8gc29tZSBzb3J0IG9mIGRlY2lzaW9uIHRyZWVcbiAgICBmdW5jdGlvbiB1cGRhdGUoZXZ0KSB7XG4gICAgICBpZiAoZXZ0ICYmIGV2dC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgICB2YXIgaWdub3JlVXBkYXRlID0gbGFzdFB1c2hlZFVybCAmJiAkbG9jYXRpb24udXJsKCkgPT09IGxhc3RQdXNoZWRVcmw7XG4gICAgICBsYXN0UHVzaGVkVXJsID0gdW5kZWZpbmVkO1xuICAgICAgLy8gVE9ETzogUmUtaW1wbGVtZW50IHRoaXMgaW4gMS4wIGZvciBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci11aS91aS1yb3V0ZXIvaXNzdWVzLzE1NzNcbiAgICAgIC8vaWYgKGlnbm9yZVVwZGF0ZSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrKHJ1bGUpIHtcbiAgICAgICAgdmFyIGhhbmRsZWQgPSBydWxlKCRpbmplY3RvciwgJGxvY2F0aW9uKTtcblxuICAgICAgICBpZiAoIWhhbmRsZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGlzU3RyaW5nKGhhbmRsZWQpKSAkbG9jYXRpb24ucmVwbGFjZSgpLnVybChoYW5kbGVkKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgbiA9IHJ1bGVzLmxlbmd0aCwgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAoY2hlY2socnVsZXNbaV0pKSByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBhbHdheXMgY2hlY2sgb3RoZXJ3aXNlIGxhc3QgdG8gYWxsb3cgZHluYW1pYyB1cGRhdGVzIHRvIHRoZSBzZXQgb2YgcnVsZXNcbiAgICAgIGlmIChvdGhlcndpc2UpIGNoZWNrKG90aGVyd2lzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lciB8fCAkcm9vdFNjb3BlLiRvbignJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcycsIHVwZGF0ZSk7XG4gICAgICByZXR1cm4gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcmNlcHREZWZlcnJlZCkgbGlzdGVuKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlciNzeW5jXG4gICAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBUcmlnZ2VycyBhbiB1cGRhdGU7IHRoZSBzYW1lIHVwZGF0ZSB0aGF0IGhhcHBlbnMgd2hlbiB0aGUgYWRkcmVzcyBiYXIgdXJsIGNoYW5nZXMsIGFrYSBgJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc2AuXG4gICAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgd2hlbiB5b3UgbmVlZCB0byB1c2UgYHByZXZlbnREZWZhdWx0KClgIG9uIHRoZSBgJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc2AgZXZlbnQsXG4gICAgICAgKiBwZXJmb3JtIHNvbWUgY3VzdG9tIGxvZ2ljIChyb3V0ZSBwcm90ZWN0aW9uLCBhdXRoLCBjb25maWcsIHJlZGlyZWN0aW9uLCBldGMpIGFuZCB0aGVuIGZpbmFsbHkgcHJvY2VlZFxuICAgICAgICogd2l0aCB0aGUgdHJhbnNpdGlvbiBieSBjYWxsaW5nIGAkdXJsUm91dGVyLnN5bmMoKWAuXG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIDxwcmU+XG4gICAgICAgKiBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInXSlcbiAgICAgICAqICAgLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlLCAkdXJsUm91dGVyKSB7XG4gICAgICAgKiAgICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAqICAgICAgIC8vIEhhbHQgc3RhdGUgY2hhbmdlIGZyb20gZXZlbiBzdGFydGluZ1xuICAgICAgICogICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgKiAgICAgICAvLyBQZXJmb3JtIGN1c3RvbSBsb2dpY1xuICAgICAgICogICAgICAgdmFyIG1lZXRzUmVxdWlyZW1lbnQgPSAuLi5cbiAgICAgICAqICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIHVwZGF0ZSBhbmQgc3RhdGUgdHJhbnNpdGlvbiBpZiBsb2dpYyBhbGxvd3NcbiAgICAgICAqICAgICAgIGlmIChtZWV0c1JlcXVpcmVtZW50KSAkdXJsUm91dGVyLnN5bmMoKTtcbiAgICAgICAqICAgICB9KTtcbiAgICAgICAqIH0pO1xuICAgICAgICogPC9wcmU+XG4gICAgICAgKi9cbiAgICAgIHN5bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH0sXG5cbiAgICAgIGxpc3RlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW4oKTtcbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24ocmVhZCkge1xuICAgICAgICBpZiAocmVhZCkge1xuICAgICAgICAgIGxvY2F0aW9uID0gJGxvY2F0aW9uLnVybCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJGxvY2F0aW9uLnVybCgpID09PSBsb2NhdGlvbikgcmV0dXJuO1xuXG4gICAgICAgICRsb2NhdGlvbi51cmwobG9jYXRpb24pO1xuICAgICAgICAkbG9jYXRpb24ucmVwbGFjZSgpO1xuICAgICAgfSxcblxuICAgICAgcHVzaDogZnVuY3Rpb24odXJsTWF0Y2hlciwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgICB2YXIgdXJsID0gdXJsTWF0Y2hlci5mb3JtYXQocGFyYW1zIHx8IHt9KTtcblxuICAgICAgICAvLyBIYW5kbGUgdGhlIHNwZWNpYWwgaGFzaCBwYXJhbSwgaWYgbmVlZGVkXG4gICAgICAgIGlmICh1cmwgIT09IG51bGwgJiYgcGFyYW1zICYmIHBhcmFtc1snIyddKSB7XG4gICAgICAgICAgICB1cmwgKz0gJyMnICsgcGFyYW1zWycjJ107XG4gICAgICAgIH1cblxuICAgICAgICAkbG9jYXRpb24udXJsKHVybCk7XG4gICAgICAgIGxhc3RQdXNoZWRVcmwgPSBvcHRpb25zICYmIG9wdGlvbnMuJCRhdm9pZFJlc3luYyA/ICRsb2NhdGlvbi51cmwoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZXBsYWNlKSAkbG9jYXRpb24ucmVwbGFjZSgpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlciNocmVmXG4gICAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIFVSTCBnZW5lcmF0aW9uIG1ldGhvZCB0aGF0IHJldHVybnMgdGhlIGNvbXBpbGVkIFVSTCBmb3IgYSBnaXZlblxuICAgICAgICoge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9LCBwb3B1bGF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy5cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogPHByZT5cbiAgICAgICAqICRib2IgPSAkdXJsUm91dGVyLmhyZWYobmV3IFVybE1hdGNoZXIoXCIvYWJvdXQvOnBlcnNvblwiKSwge1xuICAgICAgICogICBwZXJzb246IFwiYm9iXCJcbiAgICAgICAqIH0pO1xuICAgICAgICogLy8gJGJvYiA9PSBcIi9hYm91dC9ib2JcIjtcbiAgICAgICAqIDwvcHJlPlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7VXJsTWF0Y2hlcn0gdXJsTWF0Y2hlciBUaGUgYFVybE1hdGNoZXJgIG9iamVjdCB3aGljaCBpcyB1c2VkIGFzIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgVVJMIHRvIGdlbmVyYXRlLlxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQW4gb2JqZWN0IG9mIHBhcmFtZXRlciB2YWx1ZXMgdG8gZmlsbCB0aGUgbWF0Y2hlcidzIHJlcXVpcmVkIHBhcmFtZXRlcnMuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QuIFRoZSBvcHRpb25zIGFyZTpcbiAgICAgICAqXG4gICAgICAgKiAtICoqYGFic29sdXRlYCoqIC0ge2Jvb2xlYW49ZmFsc2V9LCAgSWYgdHJ1ZSB3aWxsIGdlbmVyYXRlIGFuIGFic29sdXRlIHVybCwgZS5nLiBcImh0dHA6Ly93d3cuZXhhbXBsZS5jb20vZnVsbHVybFwiLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bGx5IGNvbXBpbGVkIFVSTCwgb3IgYG51bGxgIGlmIGBwYXJhbXNgIGZhaWwgdmFsaWRhdGlvbiBhZ2FpbnN0IGB1cmxNYXRjaGVyYFxuICAgICAgICovXG4gICAgICBocmVmOiBmdW5jdGlvbih1cmxNYXRjaGVyLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF1cmxNYXRjaGVyLnZhbGlkYXRlcyhwYXJhbXMpKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgaXNIdG1sNSA9ICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSgpO1xuICAgICAgICBpZiAoYW5ndWxhci5pc09iamVjdChpc0h0bWw1KSkge1xuICAgICAgICAgIGlzSHRtbDUgPSBpc0h0bWw1LmVuYWJsZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpc0h0bWw1ID0gaXNIdG1sNSAmJiAkc25pZmZlci5oaXN0b3J5O1xuICAgICAgICBcbiAgICAgICAgdmFyIHVybCA9IHVybE1hdGNoZXIuZm9ybWF0KHBhcmFtcyk7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmICghaXNIdG1sNSAmJiB1cmwgIT09IG51bGwpIHtcbiAgICAgICAgICB1cmwgPSBcIiNcIiArICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoKSArIHVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBzcGVjaWFsIGhhc2ggcGFyYW0sIGlmIG5lZWRlZFxuICAgICAgICBpZiAodXJsICE9PSBudWxsICYmIHBhcmFtcyAmJiBwYXJhbXNbJyMnXSkge1xuICAgICAgICAgIHVybCArPSAnIycgKyBwYXJhbXNbJyMnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCA9IGFwcGVuZEJhc2VQYXRoKHVybCwgaXNIdG1sNSwgb3B0aW9ucy5hYnNvbHV0ZSk7XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmFic29sdXRlIHx8ICF1cmwpIHtcbiAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNsYXNoID0gKCFpc0h0bWw1ICYmIHVybCA/ICcvJyA6ICcnKSwgcG9ydCA9ICRsb2NhdGlvbi5wb3J0KCk7XG4gICAgICAgIHBvcnQgPSAocG9ydCA9PT0gODAgfHwgcG9ydCA9PT0gNDQzID8gJycgOiAnOicgKyBwb3J0KTtcblxuICAgICAgICByZXR1cm4gWyRsb2NhdGlvbi5wcm90b2NvbCgpLCAnOi8vJywgJGxvY2F0aW9uLmhvc3QoKSwgcG9ydCwgc2xhc2gsIHVybF0uam9pbignJyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnJvdXRlcicpLnByb3ZpZGVyKCckdXJsUm91dGVyJywgJFVybFJvdXRlclByb3ZpZGVyKTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUHJvdmlkZXJcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5ldyBgJHN0YXRlUHJvdmlkZXJgIHdvcmtzIHNpbWlsYXIgdG8gQW5ndWxhcidzIHYxIHJvdXRlciwgYnV0IGl0IGZvY3VzZXMgcHVyZWx5XG4gKiBvbiBzdGF0ZS5cbiAqXG4gKiBBIHN0YXRlIGNvcnJlc3BvbmRzIHRvIGEgXCJwbGFjZVwiIGluIHRoZSBhcHBsaWNhdGlvbiBpbiB0ZXJtcyBvZiB0aGUgb3ZlcmFsbCBVSSBhbmRcbiAqIG5hdmlnYXRpb24uIEEgc3RhdGUgZGVzY3JpYmVzICh2aWEgdGhlIGNvbnRyb2xsZXIgLyB0ZW1wbGF0ZSAvIHZpZXcgcHJvcGVydGllcykgd2hhdFxuICogdGhlIFVJIGxvb2tzIGxpa2UgYW5kIGRvZXMgYXQgdGhhdCBwbGFjZS5cbiAqXG4gKiBTdGF0ZXMgb2Z0ZW4gaGF2ZSB0aGluZ3MgaW4gY29tbW9uLCBhbmQgdGhlIHByaW1hcnkgd2F5IG9mIGZhY3RvcmluZyBvdXQgdGhlc2VcbiAqIGNvbW1vbmFsaXRpZXMgaW4gdGhpcyBtb2RlbCBpcyB2aWEgdGhlIHN0YXRlIGhpZXJhcmNoeSwgaS5lLiBwYXJlbnQvY2hpbGQgc3RhdGVzIGFrYVxuICogbmVzdGVkIHN0YXRlcy5cbiAqXG4gKiBUaGUgYCRzdGF0ZVByb3ZpZGVyYCBwcm92aWRlcyBpbnRlcmZhY2VzIHRvIGRlY2xhcmUgdGhlc2Ugc3RhdGVzIGZvciB5b3VyIGFwcC5cbiAqL1xuJFN0YXRlUHJvdmlkZXIuJGluamVjdCA9IFsnJHVybFJvdXRlclByb3ZpZGVyJywgJyR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyJ107XG5mdW5jdGlvbiAkU3RhdGVQcm92aWRlciggICAkdXJsUm91dGVyUHJvdmlkZXIsICAgJHVybE1hdGNoZXJGYWN0b3J5KSB7XG5cbiAgdmFyIHJvb3QsIHN0YXRlcyA9IHt9LCAkc3RhdGUsIHF1ZXVlID0ge30sIGFic3RyYWN0S2V5ID0gJ2Fic3RyYWN0JztcblxuICAvLyBCdWlsZHMgc3RhdGUgcHJvcGVydGllcyBmcm9tIGRlZmluaXRpb24gcGFzc2VkIHRvIHJlZ2lzdGVyU3RhdGUoKVxuICB2YXIgc3RhdGVCdWlsZGVyID0ge1xuXG4gICAgLy8gRGVyaXZlIHBhcmVudCBzdGF0ZSBmcm9tIGEgaGllcmFyY2hpY2FsIG5hbWUgb25seSBpZiAncGFyZW50JyBpcyBub3QgZXhwbGljaXRseSBkZWZpbmVkLlxuICAgIC8vIHN0YXRlLmNoaWxkcmVuID0gW107XG4gICAgLy8gaWYgKHBhcmVudCkgcGFyZW50LmNoaWxkcmVuLnB1c2goc3RhdGUpO1xuICAgIHBhcmVudDogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIGlmIChpc0RlZmluZWQoc3RhdGUucGFyZW50KSAmJiBzdGF0ZS5wYXJlbnQpIHJldHVybiBmaW5kU3RhdGUoc3RhdGUucGFyZW50KTtcbiAgICAgIC8vIHJlZ2V4IG1hdGNoZXMgYW55IHZhbGlkIGNvbXBvc2l0ZSBzdGF0ZSBuYW1lXG4gICAgICAvLyB3b3VsZCBtYXRjaCBcImNvbnRhY3QubGlzdFwiIGJ1dCBub3QgXCJjb250YWN0c1wiXG4gICAgICB2YXIgY29tcG9zaXRlTmFtZSA9IC9eKC4rKVxcLlteLl0rJC8uZXhlYyhzdGF0ZS5uYW1lKTtcbiAgICAgIHJldHVybiBjb21wb3NpdGVOYW1lID8gZmluZFN0YXRlKGNvbXBvc2l0ZU5hbWVbMV0pIDogcm9vdDtcbiAgICB9LFxuXG4gICAgLy8gaW5oZXJpdCAnZGF0YScgZnJvbSBwYXJlbnQgYW5kIG92ZXJyaWRlIGJ5IG93biB2YWx1ZXMgKGlmIGFueSlcbiAgICBkYXRhOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlLnBhcmVudCAmJiBzdGF0ZS5wYXJlbnQuZGF0YSkge1xuICAgICAgICBzdGF0ZS5kYXRhID0gc3RhdGUuc2VsZi5kYXRhID0gaW5oZXJpdChzdGF0ZS5wYXJlbnQuZGF0YSwgc3RhdGUuZGF0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGUuZGF0YTtcbiAgICB9LFxuXG4gICAgLy8gQnVpbGQgYSBVUkxNYXRjaGVyIGlmIG5lY2Vzc2FyeSwgZWl0aGVyIHZpYSBhIHJlbGF0aXZlIG9yIGFic29sdXRlIFVSTFxuICAgIHVybDogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHZhciB1cmwgPSBzdGF0ZS51cmwsIGNvbmZpZyA9IHsgcGFyYW1zOiBzdGF0ZS5wYXJhbXMgfHwge30gfTtcblxuICAgICAgaWYgKGlzU3RyaW5nKHVybCkpIHtcbiAgICAgICAgaWYgKHVybC5jaGFyQXQoMCkgPT0gJ14nKSByZXR1cm4gJHVybE1hdGNoZXJGYWN0b3J5LmNvbXBpbGUodXJsLnN1YnN0cmluZygxKSwgY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5wYXJlbnQubmF2aWdhYmxlIHx8IHJvb3QpLnVybC5jb25jYXQodXJsLCBjb25maWcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXVybCB8fCAkdXJsTWF0Y2hlckZhY3RvcnkuaXNNYXRjaGVyKHVybCkpIHJldHVybiB1cmw7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHVybCAnXCIgKyB1cmwgKyBcIicgaW4gc3RhdGUgJ1wiICsgc3RhdGUgKyBcIidcIik7XG4gICAgfSxcblxuICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGNsb3Nlc3QgYW5jZXN0b3Igc3RhdGUgdGhhdCBoYXMgYSBVUkwgKGkuZS4gaXMgbmF2aWdhYmxlKVxuICAgIG5hdmlnYWJsZTogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS51cmwgPyBzdGF0ZSA6IChzdGF0ZS5wYXJlbnQgPyBzdGF0ZS5wYXJlbnQubmF2aWdhYmxlIDogbnVsbCk7XG4gICAgfSxcblxuICAgIC8vIE93biBwYXJhbWV0ZXJzIGZvciB0aGlzIHN0YXRlLiBzdGF0ZS51cmwucGFyYW1zIGlzIGFscmVhZHkgYnVpbHQgYXQgdGhpcyBwb2ludC4gQ3JlYXRlIGFuZCBhZGQgbm9uLXVybCBwYXJhbXNcbiAgICBvd25QYXJhbXM6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgcGFyYW1zID0gc3RhdGUudXJsICYmIHN0YXRlLnVybC5wYXJhbXMgfHwgbmV3ICQkVU1GUC5QYXJhbVNldCgpO1xuICAgICAgZm9yRWFjaChzdGF0ZS5wYXJhbXMgfHwge30sIGZ1bmN0aW9uKGNvbmZpZywgaWQpIHtcbiAgICAgICAgaWYgKCFwYXJhbXNbaWRdKSBwYXJhbXNbaWRdID0gbmV3ICQkVU1GUC5QYXJhbShpZCwgbnVsbCwgY29uZmlnLCBcImNvbmZpZ1wiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9LFxuXG4gICAgLy8gRGVyaXZlIHBhcmFtZXRlcnMgZm9yIHRoaXMgc3RhdGUgYW5kIGVuc3VyZSB0aGV5J3JlIGEgc3VwZXItc2V0IG9mIHBhcmVudCdzIHBhcmFtZXRlcnNcbiAgICBwYXJhbXM6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgb3duUGFyYW1zID0gcGljayhzdGF0ZS5vd25QYXJhbXMsIHN0YXRlLm93blBhcmFtcy4kJGtleXMoKSk7XG4gICAgICByZXR1cm4gc3RhdGUucGFyZW50ICYmIHN0YXRlLnBhcmVudC5wYXJhbXMgPyBleHRlbmQoc3RhdGUucGFyZW50LnBhcmFtcy4kJG5ldygpLCBvd25QYXJhbXMpIDogbmV3ICQkVU1GUC5QYXJhbVNldCgpO1xuICAgIH0sXG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBleHBsaWNpdCBtdWx0aS12aWV3IGNvbmZpZ3VyYXRpb24sIG1ha2Ugb25lIHVwIHNvIHdlIGRvbid0IGhhdmVcbiAgICAvLyB0byBoYW5kbGUgYm90aCBjYXNlcyBpbiB0aGUgdmlldyBkaXJlY3RpdmUgbGF0ZXIuIE5vdGUgdGhhdCBoYXZpbmcgYW4gZXhwbGljaXRcbiAgICAvLyAndmlld3MnIHByb3BlcnR5IHdpbGwgbWVhbiB0aGUgZGVmYXVsdCB1bm5hbWVkIHZpZXcgcHJvcGVydGllcyBhcmUgaWdub3JlZC4gVGhpc1xuICAgIC8vIGlzIGFsc28gYSBnb29kIHRpbWUgdG8gcmVzb2x2ZSB2aWV3IG5hbWVzIHRvIGFic29sdXRlIG5hbWVzLCBzbyBldmVyeXRoaW5nIGlzIGFcbiAgICAvLyBzdHJhaWdodCBsb29rdXAgYXQgbGluayB0aW1lLlxuICAgIHZpZXdzOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgdmFyIHZpZXdzID0ge307XG5cbiAgICAgIGZvckVhY2goaXNEZWZpbmVkKHN0YXRlLnZpZXdzKSA/IHN0YXRlLnZpZXdzIDogeyAnJzogc3RhdGUgfSwgZnVuY3Rpb24gKHZpZXcsIG5hbWUpIHtcbiAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignQCcpIDwgMCkgbmFtZSArPSAnQCcgKyBzdGF0ZS5wYXJlbnQubmFtZTtcbiAgICAgICAgdmlldy5yZXNvbHZlQXMgPSB2aWV3LnJlc29sdmVBcyB8fCBzdGF0ZS5yZXNvbHZlQXMgfHwgJyRyZXNvbHZlJztcbiAgICAgICAgdmlld3NbbmFtZV0gPSB2aWV3O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmlld3M7XG4gICAgfSxcblxuICAgIC8vIEtlZXAgYSBmdWxsIHBhdGggZnJvbSB0aGUgcm9vdCBkb3duIHRvIHRoaXMgc3RhdGUgYXMgdGhpcyBpcyBuZWVkZWQgZm9yIHN0YXRlIGFjdGl2YXRpb24uXG4gICAgcGF0aDogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5wYXJlbnQgPyBzdGF0ZS5wYXJlbnQucGF0aC5jb25jYXQoc3RhdGUpIDogW107IC8vIGV4Y2x1ZGUgcm9vdCBmcm9tIHBhdGhcbiAgICB9LFxuXG4gICAgLy8gU3BlZWQgdXAgJHN0YXRlLmNvbnRhaW5zKCkgYXMgaXQncyB1c2VkIGEgbG90XG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBzdGF0ZS5wYXJlbnQgPyBleHRlbmQoe30sIHN0YXRlLnBhcmVudC5pbmNsdWRlcykgOiB7fTtcbiAgICAgIGluY2x1ZGVzW3N0YXRlLm5hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBpbmNsdWRlcztcbiAgICB9LFxuXG4gICAgJGRlbGVnYXRlczoge31cbiAgfTtcblxuICBmdW5jdGlvbiBpc1JlbGF0aXZlKHN0YXRlTmFtZSkge1xuICAgIHJldHVybiBzdGF0ZU5hbWUuaW5kZXhPZihcIi5cIikgPT09IDAgfHwgc3RhdGVOYW1lLmluZGV4T2YoXCJeXCIpID09PSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBiYXNlKSB7XG4gICAgaWYgKCFzdGF0ZU9yTmFtZSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHZhciBpc1N0ciA9IGlzU3RyaW5nKHN0YXRlT3JOYW1lKSxcbiAgICAgICAgbmFtZSAgPSBpc1N0ciA/IHN0YXRlT3JOYW1lIDogc3RhdGVPck5hbWUubmFtZSxcbiAgICAgICAgcGF0aCAgPSBpc1JlbGF0aXZlKG5hbWUpO1xuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIGlmICghYmFzZSkgdGhyb3cgbmV3IEVycm9yKFwiTm8gcmVmZXJlbmNlIHBvaW50IGdpdmVuIGZvciBwYXRoICdcIiAgKyBuYW1lICsgXCInXCIpO1xuICAgICAgYmFzZSA9IGZpbmRTdGF0ZShiYXNlKTtcbiAgICAgIFxuICAgICAgdmFyIHJlbCA9IG5hbWUuc3BsaXQoXCIuXCIpLCBpID0gMCwgcGF0aExlbmd0aCA9IHJlbC5sZW5ndGgsIGN1cnJlbnQgPSBiYXNlO1xuXG4gICAgICBmb3IgKDsgaSA8IHBhdGhMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVsW2ldID09PSBcIlwiICYmIGkgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50ID0gYmFzZTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVsW2ldID09PSBcIl5cIikge1xuICAgICAgICAgIGlmICghY3VycmVudC5wYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIlBhdGggJ1wiICsgbmFtZSArIFwiJyBub3QgdmFsaWQgZm9yIHN0YXRlICdcIiArIGJhc2UubmFtZSArIFwiJ1wiKTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWwgPSByZWwuc2xpY2UoaSkuam9pbihcIi5cIik7XG4gICAgICBuYW1lID0gY3VycmVudC5uYW1lICsgKGN1cnJlbnQubmFtZSAmJiByZWwgPyBcIi5cIiA6IFwiXCIpICsgcmVsO1xuICAgIH1cbiAgICB2YXIgc3RhdGUgPSBzdGF0ZXNbbmFtZV07XG5cbiAgICBpZiAoc3RhdGUgJiYgKGlzU3RyIHx8ICghaXNTdHIgJiYgKHN0YXRlID09PSBzdGF0ZU9yTmFtZSB8fCBzdGF0ZS5zZWxmID09PSBzdGF0ZU9yTmFtZSkpKSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVldWVTdGF0ZShwYXJlbnROYW1lLCBzdGF0ZSkge1xuICAgIGlmICghcXVldWVbcGFyZW50TmFtZV0pIHtcbiAgICAgIHF1ZXVlW3BhcmVudE5hbWVdID0gW107XG4gICAgfVxuICAgIHF1ZXVlW3BhcmVudE5hbWVdLnB1c2goc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hRdWV1ZWRDaGlsZHJlbihwYXJlbnROYW1lKSB7XG4gICAgdmFyIHF1ZXVlZCA9IHF1ZXVlW3BhcmVudE5hbWVdIHx8IFtdO1xuICAgIHdoaWxlKHF1ZXVlZC5sZW5ndGgpIHtcbiAgICAgIHJlZ2lzdGVyU3RhdGUocXVldWVkLnNoaWZ0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyU3RhdGUoc3RhdGUpIHtcbiAgICAvLyBXcmFwIGEgbmV3IG9iamVjdCBhcm91bmQgdGhlIHN0YXRlIHNvIHdlIGNhbiBzdG9yZSBvdXIgcHJpdmF0ZSBkZXRhaWxzIGVhc2lseS5cbiAgICBzdGF0ZSA9IGluaGVyaXQoc3RhdGUsIHtcbiAgICAgIHNlbGY6IHN0YXRlLFxuICAgICAgcmVzb2x2ZTogc3RhdGUucmVzb2x2ZSB8fCB7fSxcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMubmFtZTsgfVxuICAgIH0pO1xuXG4gICAgdmFyIG5hbWUgPSBzdGF0ZS5uYW1lO1xuICAgIGlmICghaXNTdHJpbmcobmFtZSkgfHwgbmFtZS5pbmRleE9mKCdAJykgPj0gMCkgdGhyb3cgbmV3IEVycm9yKFwiU3RhdGUgbXVzdCBoYXZlIGEgdmFsaWQgbmFtZVwiKTtcbiAgICBpZiAoc3RhdGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB0aHJvdyBuZXcgRXJyb3IoXCJTdGF0ZSAnXCIgKyBuYW1lICsgXCInIGlzIGFscmVhZHkgZGVmaW5lZFwiKTtcblxuICAgIC8vIEdldCBwYXJlbnQgbmFtZVxuICAgIHZhciBwYXJlbnROYW1lID0gKG5hbWUuaW5kZXhPZignLicpICE9PSAtMSkgPyBuYW1lLnN1YnN0cmluZygwLCBuYW1lLmxhc3RJbmRleE9mKCcuJykpXG4gICAgICAgIDogKGlzU3RyaW5nKHN0YXRlLnBhcmVudCkpID8gc3RhdGUucGFyZW50XG4gICAgICAgIDogKGlzT2JqZWN0KHN0YXRlLnBhcmVudCkgJiYgaXNTdHJpbmcoc3RhdGUucGFyZW50Lm5hbWUpKSA/IHN0YXRlLnBhcmVudC5uYW1lXG4gICAgICAgIDogJyc7XG5cbiAgICAvLyBJZiBwYXJlbnQgaXMgbm90IHJlZ2lzdGVyZWQgeWV0LCBhZGQgc3RhdGUgdG8gcXVldWUgYW5kIHJlZ2lzdGVyIGxhdGVyXG4gICAgaWYgKHBhcmVudE5hbWUgJiYgIXN0YXRlc1twYXJlbnROYW1lXSkge1xuICAgICAgcmV0dXJuIHF1ZXVlU3RhdGUocGFyZW50TmFtZSwgc3RhdGUuc2VsZik7XG4gICAgfVxuXG4gICAgZm9yICh2YXIga2V5IGluIHN0YXRlQnVpbGRlcikge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oc3RhdGVCdWlsZGVyW2tleV0pKSBzdGF0ZVtrZXldID0gc3RhdGVCdWlsZGVyW2tleV0oc3RhdGUsIHN0YXRlQnVpbGRlci4kZGVsZWdhdGVzW2tleV0pO1xuICAgIH1cbiAgICBzdGF0ZXNbbmFtZV0gPSBzdGF0ZTtcblxuICAgIC8vIFJlZ2lzdGVyIHRoZSBzdGF0ZSBpbiB0aGUgZ2xvYmFsIHN0YXRlIGxpc3QgYW5kIHdpdGggJHVybFJvdXRlciBpZiBuZWNlc3NhcnkuXG4gICAgaWYgKCFzdGF0ZVthYnN0cmFjdEtleV0gJiYgc3RhdGUudXJsKSB7XG4gICAgICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbihzdGF0ZS51cmwsIFsnJG1hdGNoJywgJyRzdGF0ZVBhcmFtcycsIGZ1bmN0aW9uICgkbWF0Y2gsICRzdGF0ZVBhcmFtcykge1xuICAgICAgICBpZiAoJHN0YXRlLiRjdXJyZW50Lm5hdmlnYWJsZSAhPSBzdGF0ZSB8fCAhZXF1YWxGb3JLZXlzKCRtYXRjaCwgJHN0YXRlUGFyYW1zKSkge1xuICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oc3RhdGUsICRtYXRjaCwgeyBpbmhlcml0OiB0cnVlLCBsb2NhdGlvbjogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcbiAgICB9XG5cbiAgICAvLyBSZWdpc3RlciBhbnkgcXVldWVkIGNoaWxkcmVuXG4gICAgZmx1c2hRdWV1ZWRDaGlsZHJlbihuYW1lKTtcblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIC8vIENoZWNrcyB0ZXh0IHRvIHNlZSBpZiBpdCBsb29rcyBsaWtlIGEgZ2xvYi5cbiAgZnVuY3Rpb24gaXNHbG9iICh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQuaW5kZXhPZignKicpID4gLTE7XG4gIH1cblxuICAvLyBSZXR1cm5zIHRydWUgaWYgZ2xvYiBtYXRjaGVzIGN1cnJlbnQgJHN0YXRlIG5hbWUuXG4gIGZ1bmN0aW9uIGRvZXNTdGF0ZU1hdGNoR2xvYiAoZ2xvYikge1xuICAgIHZhciBnbG9iU2VnbWVudHMgPSBnbG9iLnNwbGl0KCcuJyksXG4gICAgICAgIHNlZ21lbnRzID0gJHN0YXRlLiRjdXJyZW50Lm5hbWUuc3BsaXQoJy4nKTtcblxuICAgIC8vbWF0Y2ggc2luZ2xlIHN0YXJzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBnbG9iU2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoZ2xvYlNlZ21lbnRzW2ldID09PSAnKicpIHtcbiAgICAgICAgc2VnbWVudHNbaV0gPSAnKic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9tYXRjaCBncmVlZHkgc3RhcnRzXG4gICAgaWYgKGdsb2JTZWdtZW50c1swXSA9PT0gJyoqJykge1xuICAgICAgIHNlZ21lbnRzID0gc2VnbWVudHMuc2xpY2UoaW5kZXhPZihzZWdtZW50cywgZ2xvYlNlZ21lbnRzWzFdKSk7XG4gICAgICAgc2VnbWVudHMudW5zaGlmdCgnKionKTtcbiAgICB9XG4gICAgLy9tYXRjaCBncmVlZHkgZW5kc1xuICAgIGlmIChnbG9iU2VnbWVudHNbZ2xvYlNlZ21lbnRzLmxlbmd0aCAtIDFdID09PSAnKionKSB7XG4gICAgICAgc2VnbWVudHMuc3BsaWNlKGluZGV4T2Yoc2VnbWVudHMsIGdsb2JTZWdtZW50c1tnbG9iU2VnbWVudHMubGVuZ3RoIC0gMl0pICsgMSwgTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgICAgc2VnbWVudHMucHVzaCgnKionKTtcbiAgICB9XG5cbiAgICBpZiAoZ2xvYlNlZ21lbnRzLmxlbmd0aCAhPSBzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudHMuam9pbignJykgPT09IGdsb2JTZWdtZW50cy5qb2luKCcnKTtcbiAgfVxuXG5cbiAgLy8gSW1wbGljaXQgcm9vdCBzdGF0ZSB0aGF0IGlzIGFsd2F5cyBhY3RpdmVcbiAgcm9vdCA9IHJlZ2lzdGVyU3RhdGUoe1xuICAgIG5hbWU6ICcnLFxuICAgIHVybDogJ14nLFxuICAgIHZpZXdzOiBudWxsLFxuICAgICdhYnN0cmFjdCc6IHRydWVcbiAgfSk7XG4gIHJvb3QubmF2aWdhYmxlID0gbnVsbDtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyI2RlY29yYXRvclxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBbGxvd3MgeW91IHRvIGV4dGVuZCAoY2FyZWZ1bGx5KSBvciBvdmVycmlkZSAoYXQgeW91ciBvd24gcGVyaWwpIHRoZSBcbiAgICogYHN0YXRlQnVpbGRlcmAgb2JqZWN0IHVzZWQgaW50ZXJuYWxseSBieSBgJHN0YXRlUHJvdmlkZXJgLiBUaGlzIGNhbiBiZSB1c2VkIFxuICAgKiB0byBhZGQgY3VzdG9tIGZ1bmN0aW9uYWxpdHkgdG8gdWktcm91dGVyLCBmb3IgZXhhbXBsZSBpbmZlcnJpbmcgdGVtcGxhdGVVcmwgXG4gICAqIGJhc2VkIG9uIHRoZSBzdGF0ZSBuYW1lLlxuICAgKlxuICAgKiBXaGVuIHBhc3Npbmcgb25seSBhIG5hbWUsIGl0IHJldHVybnMgdGhlIGN1cnJlbnQgKG9yaWdpbmFsIG9yIGRlY29yYXRlZCkgYnVpbGRlclxuICAgKiBmdW5jdGlvbiB0aGF0IG1hdGNoZXMgYG5hbWVgLlxuICAgKlxuICAgKiBUaGUgYnVpbGRlciBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgZGVjb3JhdGVkIGFyZSBsaXN0ZWQgYmVsb3cuIFRob3VnaCBub3QgYWxsXG4gICAqIG5lY2Vzc2FyaWx5IGhhdmUgYSBnb29kIHVzZSBjYXNlIGZvciBkZWNvcmF0aW9uLCB0aGF0IGlzIHVwIHRvIHlvdSB0byBkZWNpZGUuXG4gICAqXG4gICAqIEluIGFkZGl0aW9uLCB1c2VycyBjYW4gYXR0YWNoIGN1c3RvbSBkZWNvcmF0b3JzLCB3aGljaCB3aWxsIGdlbmVyYXRlIG5ldyBcbiAgICogcHJvcGVydGllcyB3aXRoaW4gdGhlIHN0YXRlJ3MgaW50ZXJuYWwgZGVmaW5pdGlvbi4gVGhlcmUgaXMgY3VycmVudGx5IG5vIGNsZWFyIFxuICAgKiB1c2UtY2FzZSBmb3IgdGhpcyBiZXlvbmQgYWNjZXNzaW5nIGludGVybmFsIHN0YXRlcyAoaS5lLiAkc3RhdGUuJGN1cnJlbnQpLCBcbiAgICogaG93ZXZlciwgZXhwZWN0IHRoaXMgdG8gYmVjb21lIGluY3JlYXNpbmdseSByZWxldmFudCBhcyB3ZSBpbnRyb2R1Y2UgYWRkaXRpb25hbCBcbiAgICogbWV0YS1wcm9ncmFtbWluZyBmZWF0dXJlcy5cbiAgICpcbiAgICogKipXYXJuaW5nKio6IERlY29yYXRvcnMgc2hvdWxkIG5vdCBiZSBpbnRlcmRlcGVuZGVudCBiZWNhdXNlIHRoZSBvcmRlciBvZiBcbiAgICogZXhlY3V0aW9uIG9mIHRoZSBidWlsZGVyIGZ1bmN0aW9ucyBpbiBub24tZGV0ZXJtaW5pc3RpYy4gQnVpbGRlciBmdW5jdGlvbnMgXG4gICAqIHNob3VsZCBvbmx5IGJlIGRlcGVuZGVudCBvbiB0aGUgc3RhdGUgZGVmaW5pdGlvbiBvYmplY3QgYW5kIHN1cGVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKlxuICAgKiBFeGlzdGluZyBidWlsZGVyIGZ1bmN0aW9ucyBhbmQgY3VycmVudCByZXR1cm4gdmFsdWVzOlxuICAgKlxuICAgKiAtICoqcGFyZW50KiogYHtvYmplY3R9YCAtIHJldHVybnMgdGhlIHBhcmVudCBzdGF0ZSBvYmplY3QuXG4gICAqIC0gKipkYXRhKiogYHtvYmplY3R9YCAtIHJldHVybnMgc3RhdGUgZGF0YSwgaW5jbHVkaW5nIGFueSBpbmhlcml0ZWQgZGF0YSB0aGF0IGlzIG5vdFxuICAgKiAgIG92ZXJyaWRkZW4gYnkgb3duIHZhbHVlcyAoaWYgYW55KS5cbiAgICogLSAqKnVybCoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIGEge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBVcmxNYXRjaGVyfVxuICAgKiAgIG9yIGBudWxsYC5cbiAgICogLSAqKm5hdmlnYWJsZSoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIGNsb3Nlc3QgYW5jZXN0b3Igc3RhdGUgdGhhdCBoYXMgYSBVUkwgKGFrYSBpcyBcbiAgICogICBuYXZpZ2FibGUpLlxuICAgKiAtICoqcGFyYW1zKiogYHtvYmplY3R9YCAtIHJldHVybnMgYW4gYXJyYXkgb2Ygc3RhdGUgcGFyYW1zIHRoYXQgYXJlIGVuc3VyZWQgdG8gXG4gICAqICAgYmUgYSBzdXBlci1zZXQgb2YgcGFyZW50J3MgcGFyYW1zLlxuICAgKiAtICoqdmlld3MqKiBge29iamVjdH1gIC0gcmV0dXJucyBhIHZpZXdzIG9iamVjdCB3aGVyZSBlYWNoIGtleSBpcyBhbiBhYnNvbHV0ZSB2aWV3IFxuICAgKiAgIG5hbWUgKGkuZS4gXCJ2aWV3TmFtZUBzdGF0ZU5hbWVcIikgYW5kIGVhY2ggdmFsdWUgaXMgdGhlIGNvbmZpZyBvYmplY3QgXG4gICAqICAgKHRlbXBsYXRlLCBjb250cm9sbGVyKSBmb3IgdGhlIHZpZXcuIEV2ZW4gd2hlbiB5b3UgZG9uJ3QgdXNlIHRoZSB2aWV3cyBvYmplY3QgXG4gICAqICAgZXhwbGljaXRseSBvbiBhIHN0YXRlIGNvbmZpZywgb25lIGlzIHN0aWxsIGNyZWF0ZWQgZm9yIHlvdSBpbnRlcm5hbGx5LlxuICAgKiAgIFNvIGJ5IGRlY29yYXRpbmcgdGhpcyBidWlsZGVyIGZ1bmN0aW9uIHlvdSBoYXZlIGFjY2VzcyB0byBkZWNvcmF0aW5nIHRlbXBsYXRlIFxuICAgKiAgIGFuZCBjb250cm9sbGVyIHByb3BlcnRpZXMuXG4gICAqIC0gKipvd25QYXJhbXMqKiBge29iamVjdH1gIC0gcmV0dXJucyBhbiBhcnJheSBvZiBwYXJhbXMgdGhhdCBiZWxvbmcgdG8gdGhlIHN0YXRlLCBcbiAgICogICBub3QgaW5jbHVkaW5nIGFueSBwYXJhbXMgZGVmaW5lZCBieSBhbmNlc3RvciBzdGF0ZXMuXG4gICAqIC0gKipwYXRoKiogYHtzdHJpbmd9YCAtIHJldHVybnMgdGhlIGZ1bGwgcGF0aCBmcm9tIHRoZSByb290IGRvd24gdG8gdGhpcyBzdGF0ZS4gXG4gICAqICAgTmVlZGVkIGZvciBzdGF0ZSBhY3RpdmF0aW9uLlxuICAgKiAtICoqaW5jbHVkZXMqKiBge29iamVjdH1gIC0gcmV0dXJucyBhbiBvYmplY3QgdGhhdCBpbmNsdWRlcyBldmVyeSBzdGF0ZSB0aGF0IFxuICAgKiAgIHdvdWxkIHBhc3MgYSBgJHN0YXRlLmluY2x1ZGVzKClgIHRlc3QuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIC8vIE92ZXJyaWRlIHRoZSBpbnRlcm5hbCAndmlld3MnIGJ1aWxkZXIgd2l0aCBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHN0YXRlXG4gICAqIC8vIGRlZmluaXRpb24sIGFuZCBhIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgZnVuY3Rpb24gYmVpbmcgb3ZlcnJpZGRlbjpcbiAgICogJHN0YXRlUHJvdmlkZXIuZGVjb3JhdG9yKCd2aWV3cycsIGZ1bmN0aW9uIChzdGF0ZSwgcGFyZW50KSB7XG4gICAqICAgdmFyIHJlc3VsdCA9IHt9LFxuICAgKiAgICAgICB2aWV3cyA9IHBhcmVudChzdGF0ZSk7XG4gICAqXG4gICAqICAgYW5ndWxhci5mb3JFYWNoKHZpZXdzLCBmdW5jdGlvbiAoY29uZmlnLCBuYW1lKSB7XG4gICAqICAgICB2YXIgYXV0b05hbWUgPSAoc3RhdGUubmFtZSArICcuJyArIG5hbWUpLnJlcGxhY2UoJy4nLCAnLycpO1xuICAgKiAgICAgY29uZmlnLnRlbXBsYXRlVXJsID0gY29uZmlnLnRlbXBsYXRlVXJsIHx8ICcvcGFydGlhbHMvJyArIGF1dG9OYW1lICsgJy5odG1sJztcbiAgICogICAgIHJlc3VsdFtuYW1lXSA9IGNvbmZpZztcbiAgICogICB9KTtcbiAgICogICByZXR1cm4gcmVzdWx0O1xuICAgKiB9KTtcbiAgICpcbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2hvbWUnLCB7XG4gICAqICAgdmlld3M6IHtcbiAgICogICAgICdjb250YWN0Lmxpc3QnOiB7IGNvbnRyb2xsZXI6ICdMaXN0Q29udHJvbGxlcicgfSxcbiAgICogICAgICdjb250YWN0Lml0ZW0nOiB7IGNvbnRyb2xsZXI6ICdJdGVtQ29udHJvbGxlcicgfVxuICAgKiAgIH1cbiAgICogfSk7XG4gICAqXG4gICAqIC8vIC4uLlxuICAgKlxuICAgKiAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICogLy8gQXV0by1wb3B1bGF0ZXMgbGlzdCBhbmQgaXRlbSB2aWV3cyB3aXRoIC9wYXJ0aWFscy9ob21lL2NvbnRhY3QvbGlzdC5odG1sLFxuICAgKiAvLyBhbmQgL3BhcnRpYWxzL2hvbWUvY29udGFjdC9pdGVtLmh0bWwsIHJlc3BlY3RpdmVseS5cbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBidWlsZGVyIGZ1bmN0aW9uIHRvIGRlY29yYXRlLiBcbiAgICogQHBhcmFtIHtvYmplY3R9IGZ1bmMgQSBmdW5jdGlvbiB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBkZWNvcmF0aW5nIHRoZSBvcmlnaW5hbCBcbiAgICogYnVpbGRlciBmdW5jdGlvbi4gVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHR3byBwYXJhbWV0ZXJzOlxuICAgKlxuICAgKiAgIC0gYHtvYmplY3R9YCAtIHN0YXRlIC0gVGhlIHN0YXRlIGNvbmZpZyBvYmplY3QuXG4gICAqICAgLSBge29iamVjdH1gIC0gc3VwZXIgLSBUaGUgb3JpZ2luYWwgYnVpbGRlciBmdW5jdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAkc3RhdGVQcm92aWRlciAtICRzdGF0ZVByb3ZpZGVyIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLmRlY29yYXRvciA9IGRlY29yYXRvcjtcbiAgZnVuY3Rpb24gZGVjb3JhdG9yKG5hbWUsIGZ1bmMpIHtcbiAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBpZiAoaXNTdHJpbmcobmFtZSkgJiYgIWlzRGVmaW5lZChmdW5jKSkge1xuICAgICAgcmV0dXJuIHN0YXRlQnVpbGRlcltuYW1lXTtcbiAgICB9XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpIHx8ICFpc1N0cmluZyhuYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmIChzdGF0ZUJ1aWxkZXJbbmFtZV0gJiYgIXN0YXRlQnVpbGRlci4kZGVsZWdhdGVzW25hbWVdKSB7XG4gICAgICBzdGF0ZUJ1aWxkZXIuJGRlbGVnYXRlc1tuYW1lXSA9IHN0YXRlQnVpbGRlcltuYW1lXTtcbiAgICB9XG4gICAgc3RhdGVCdWlsZGVyW25hbWVdID0gZnVuYztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyI3N0YXRlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIHN0YXRlIGNvbmZpZ3VyYXRpb24gdW5kZXIgYSBnaXZlbiBzdGF0ZSBuYW1lLiBUaGUgc3RhdGVDb25maWcgb2JqZWN0XG4gICAqIGhhcyB0aGUgZm9sbG93aW5nIGFjY2VwdGFibGUgcHJvcGVydGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSB1bmlxdWUgc3RhdGUgbmFtZSwgZS5nLiBcImhvbWVcIiwgXCJhYm91dFwiLCBcImNvbnRhY3RzXCIuXG4gICAqIFRvIGNyZWF0ZSBhIHBhcmVudC9jaGlsZCBzdGF0ZSB1c2UgYSBkb3QsIGUuZy4gXCJhYm91dC5zYWxlc1wiLCBcImhvbWUubmV3ZXN0XCIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZUNvbmZpZyBTdGF0ZSBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy50ZW1wbGF0ZVxuICAgKiA8YSBpZD0ndGVtcGxhdGUnPjwvYT5cbiAgICogICBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAqICAgYW4gaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZyB3aGljaCBzaG91bGQgYmUgdXNlZCBieSB0aGUgdWlWaWV3IGRpcmVjdGl2ZXMuIFRoaXMgcHJvcGVydHkgXG4gICAqICAgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRlbXBsYXRlVXJsLlxuICAgKiAgIFxuICAgKiAgIElmIGB0ZW1wbGF0ZWAgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqICAgLSB7YXJyYXkuJmx0O29iamVjdCZndDt9IC0gc3RhdGUgcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudCAkbG9jYXRpb24ucGF0aCgpIGJ5XG4gICAqICAgICBhcHBseWluZyB0aGUgY3VycmVudCBzdGF0ZVxuICAgKlxuICAgKiA8cHJlPnRlbXBsYXRlOlxuICAgKiAgIFwiPGgxPmlubGluZSB0ZW1wbGF0ZSBkZWZpbml0aW9uPC9oMT5cIiArXG4gICAqICAgXCI8ZGl2IHVpLXZpZXc+PC9kaXY+XCI8L3ByZT5cbiAgICogPHByZT50ZW1wbGF0ZTogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAqICAgICAgIHJldHVybiBcIjxoMT5nZW5lcmF0ZWQgdGVtcGxhdGU8L2gxPlwiOyB9PC9wcmU+XG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbj19IHN0YXRlQ29uZmlnLnRlbXBsYXRlVXJsXG4gICAqIDxhIGlkPSd0ZW1wbGF0ZVVybCc+PC9hPlxuICAgKlxuICAgKiAgIHBhdGggb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcGF0aCB0byBhbiBodG1sXG4gICAqICAgdGVtcGxhdGUgdGhhdCBzaG91bGQgYmUgdXNlZCBieSB1aVZpZXcuXG4gICAqICAgXG4gICAqICAgSWYgYHRlbXBsYXRlVXJsYCBpcyBhIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAgICpcbiAgICogICAtIHthcnJheS4mbHQ7b2JqZWN0Jmd0O30gLSBzdGF0ZSBwYXJhbWV0ZXJzIGV4dHJhY3RlZCBmcm9tIHRoZSBjdXJyZW50ICRsb2NhdGlvbi5wYXRoKCkgYnkgXG4gICAqICAgICBhcHBseWluZyB0aGUgY3VycmVudCBzdGF0ZVxuICAgKlxuICAgKiA8cHJlPnRlbXBsYXRlVXJsOiBcImhvbWUuaHRtbFwiPC9wcmU+XG4gICAqIDxwcmU+dGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgKiAgICAgcmV0dXJuIG15VGVtcGxhdGVzW3BhcmFtcy5wYWdlSWRdOyB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyXG4gICAqIDxhIGlkPSd0ZW1wbGF0ZVByb3ZpZGVyJz48L2E+XG4gICAqICAgIFByb3ZpZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBIVE1MIGNvbnRlbnQgc3RyaW5nLlxuICAgKiA8cHJlPiB0ZW1wbGF0ZVByb3ZpZGVyOlxuICAgKiAgICAgICBmdW5jdGlvbihNeVRlbXBsYXRlU2VydmljZSwgcGFyYW1zKSB7XG4gICAqICAgICAgICAgcmV0dXJuIE15VGVtcGxhdGVTZXJ2aWNlLmdldFRlbXBsYXRlKHBhcmFtcy5wYWdlSWQpO1xuICAgKiAgICAgICB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uPX0gc3RhdGVDb25maWcuY29udHJvbGxlclxuICAgKiA8YSBpZD0nY29udHJvbGxlcic+PC9hPlxuICAgKlxuICAgKiAgQ29udHJvbGxlciBmbiB0aGF0IHNob3VsZCBiZSBhc3NvY2lhdGVkIHdpdGggbmV3bHlcbiAgICogICByZWxhdGVkIHNjb3BlIG9yIHRoZSBuYW1lIG9mIGEgcmVnaXN0ZXJlZCBjb250cm9sbGVyIGlmIHBhc3NlZCBhcyBhIHN0cmluZy5cbiAgICogICBPcHRpb25hbGx5LCB0aGUgQ29udHJvbGxlckFzIG1heSBiZSBkZWNsYXJlZCBoZXJlLlxuICAgKiA8cHJlPmNvbnRyb2xsZXI6IFwiTXlSZWdpc3RlcmVkQ29udHJvbGxlclwiPC9wcmU+XG4gICAqIDxwcmU+Y29udHJvbGxlcjpcbiAgICogICAgIFwiTXlSZWdpc3RlcmVkQ29udHJvbGxlciBhcyBmb29DdHJsXCJ9PC9wcmU+XG4gICAqIDxwcmU+Y29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCBNeVNlcnZpY2UpIHtcbiAgICogICAgICRzY29wZS5kYXRhID0gTXlTZXJ2aWNlLmdldERhdGEoKTsgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc3RhdGVDb25maWcuY29udHJvbGxlclByb3ZpZGVyXG4gICAqIDxhIGlkPSdjb250cm9sbGVyUHJvdmlkZXInPjwvYT5cbiAgICpcbiAgICogSW5qZWN0YWJsZSBwcm92aWRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGFjdHVhbCBjb250cm9sbGVyIG9yIHN0cmluZy5cbiAgICogPHByZT5jb250cm9sbGVyUHJvdmlkZXI6XG4gICAqICAgZnVuY3Rpb24oTXlSZXNvbHZlRGF0YSkge1xuICAgKiAgICAgaWYgKE15UmVzb2x2ZURhdGEuZm9vKVxuICAgKiAgICAgICByZXR1cm4gXCJGb29DdHJsXCJcbiAgICogICAgIGVsc2UgaWYgKE15UmVzb2x2ZURhdGEuYmFyKVxuICAgKiAgICAgICByZXR1cm4gXCJCYXJDdHJsXCI7XG4gICAqICAgICBlbHNlIHJldHVybiBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgJHNjb3BlLmJheiA9IFwiUXV4XCI7XG4gICAqICAgICB9XG4gICAqICAgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0YXRlQ29uZmlnLmNvbnRyb2xsZXJBc1xuICAgKiA8YSBpZD0nY29udHJvbGxlckFzJz48L2E+XG4gICAqIFxuICAgKiBBIGNvbnRyb2xsZXIgYWxpYXMgbmFtZS4gSWYgcHJlc2VudCB0aGUgY29udHJvbGxlciB3aWxsIGJlXG4gICAqICAgcHVibGlzaGVkIHRvIHNjb3BlIHVuZGVyIHRoZSBjb250cm9sbGVyQXMgbmFtZS5cbiAgICogPHByZT5jb250cm9sbGVyQXM6IFwibXlDdHJsXCI8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0PX0gc3RhdGVDb25maWcucGFyZW50XG4gICAqIDxhIGlkPSdwYXJlbnQnPjwvYT5cbiAgICogT3B0aW9uYWxseSBzcGVjaWZpZXMgdGhlIHBhcmVudCBzdGF0ZSBvZiB0aGlzIHN0YXRlLlxuICAgKlxuICAgKiA8cHJlPnBhcmVudDogJ3BhcmVudFN0YXRlJzwvcHJlPlxuICAgKiA8cHJlPnBhcmVudDogcGFyZW50U3RhdGUgLy8gSlMgdmFyaWFibGU8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZUNvbmZpZy5yZXNvbHZlXG4gICAqIDxhIGlkPSdyZXNvbHZlJz48L2E+XG4gICAqXG4gICAqIEFuIG9wdGlvbmFsIG1hcCZsdDtzdHJpbmcsIGZ1bmN0aW9uJmd0OyBvZiBkZXBlbmRlbmNpZXMgd2hpY2hcbiAgICogICBzaG91bGQgYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci4gSWYgYW55IG9mIHRoZXNlIGRlcGVuZGVuY2llcyBhcmUgcHJvbWlzZXMsIFxuICAgKiAgIHRoZSByb3V0ZXIgd2lsbCB3YWl0IGZvciB0aGVtIGFsbCB0byBiZSByZXNvbHZlZCBiZWZvcmUgdGhlIGNvbnRyb2xsZXIgaXMgaW5zdGFudGlhdGVkLlxuICAgKiAgIElmIGFsbCB0aGUgcHJvbWlzZXMgYXJlIHJlc29sdmVkIHN1Y2Nlc3NmdWxseSwgdGhlICRzdGF0ZUNoYW5nZVN1Y2Nlc3MgZXZlbnQgaXMgZmlyZWRcbiAgICogICBhbmQgdGhlIHZhbHVlcyBvZiB0aGUgcmVzb2x2ZWQgcHJvbWlzZXMgYXJlIGluamVjdGVkIGludG8gYW55IGNvbnRyb2xsZXJzIHRoYXQgcmVmZXJlbmNlIHRoZW0uXG4gICAqICAgSWYgYW55ICBvZiB0aGUgcHJvbWlzZXMgYXJlIHJlamVjdGVkIHRoZSAkc3RhdGVDaGFuZ2VFcnJvciBldmVudCBpcyBmaXJlZC5cbiAgICpcbiAgICogICBUaGUgbWFwIG9iamVjdCBpczpcbiAgICogICBcbiAgICogICAtIGtleSAtIHtzdHJpbmd9OiBuYW1lIG9mIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQgaW50byBjb250cm9sbGVyXG4gICAqICAgLSBmYWN0b3J5IC0ge3N0cmluZ3xmdW5jdGlvbn06IElmIHN0cmluZyB0aGVuIGl0IGlzIGFsaWFzIGZvciBzZXJ2aWNlLiBPdGhlcndpc2UgaWYgZnVuY3Rpb24sIFxuICAgKiAgICAgaXQgaXMgaW5qZWN0ZWQgYW5kIHJldHVybiB2YWx1ZSBpdCB0cmVhdGVkIGFzIGRlcGVuZGVuY3kuIElmIHJlc3VsdCBpcyBhIHByb21pc2UsIGl0IGlzIFxuICAgKiAgICAgcmVzb2x2ZWQgYmVmb3JlIGl0cyB2YWx1ZSBpcyBpbmplY3RlZCBpbnRvIGNvbnRyb2xsZXIuXG4gICAqXG4gICAqIDxwcmU+cmVzb2x2ZToge1xuICAgKiAgICAgbXlSZXNvbHZlMTpcbiAgICogICAgICAgZnVuY3Rpb24oJGh0dHAsICRzdGF0ZVBhcmFtcykge1xuICAgKiAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoXCIvYXBpL2Zvb3MvXCIrc3RhdGVQYXJhbXMuZm9vSUQpO1xuICAgKiAgICAgICB9XG4gICAqICAgICB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc3RhdGVDb25maWcudXJsXG4gICAqIDxhIGlkPSd1cmwnPjwvYT5cbiAgICpcbiAgICogICBBIHVybCBmcmFnbWVudCB3aXRoIG9wdGlvbmFsIHBhcmFtZXRlcnMuIFdoZW4gYSBzdGF0ZSBpcyBuYXZpZ2F0ZWQgb3JcbiAgICogICB0cmFuc2l0aW9uZWQgdG8sIHRoZSBgJHN0YXRlUGFyYW1zYCBzZXJ2aWNlIHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggYW55IFxuICAgKiAgIHBhcmFtZXRlcnMgdGhhdCB3ZXJlIHBhc3NlZC5cbiAgICpcbiAgICogICAoU2VlIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgVXJsTWF0Y2hlcn0gYFVybE1hdGNoZXJgfSBmb3JcbiAgICogICBtb3JlIGRldGFpbHMgb24gYWNjZXB0YWJsZSBwYXR0ZXJucyApXG4gICAqXG4gICAqIGV4YW1wbGVzOlxuICAgKiA8cHJlPnVybDogXCIvaG9tZVwiXG4gICAqIHVybDogXCIvdXNlcnMvOnVzZXJpZFwiXG4gICAqIHVybDogXCIvYm9va3Mve2Jvb2tpZDpbYS16QS1aXy1dfVwiXG4gICAqIHVybDogXCIvYm9va3Mve2NhdGVnb3J5aWQ6aW50fVwiXG4gICAqIHVybDogXCIvYm9va3Mve3B1Ymxpc2hlcm5hbWU6c3RyaW5nfS97Y2F0ZWdvcnlpZDppbnR9XCJcbiAgICogdXJsOiBcIi9tZXNzYWdlcz9iZWZvcmUmYWZ0ZXJcIlxuICAgKiB1cmw6IFwiL21lc3NhZ2VzP3tiZWZvcmU6ZGF0ZX0me2FmdGVyOmRhdGV9XCJcbiAgICogdXJsOiBcIi9tZXNzYWdlcy86bWFpbGJveGlkP3tiZWZvcmU6ZGF0ZX0me2FmdGVyOmRhdGV9XCJcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGVDb25maWcudmlld3NcbiAgICogPGEgaWQ9J3ZpZXdzJz48L2E+XG4gICAqIGFuIG9wdGlvbmFsIG1hcCZsdDtzdHJpbmcsIG9iamVjdCZndDsgd2hpY2ggZGVmaW5lZCBtdWx0aXBsZSB2aWV3cywgb3IgdGFyZ2V0cyB2aWV3c1xuICAgKiBtYW51YWxseS9leHBsaWNpdGx5LlxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICpcbiAgICogVGFyZ2V0cyB0aHJlZSBuYW1lZCBgdWktdmlld2BzIGluIHRoZSBwYXJlbnQgc3RhdGUncyB0ZW1wbGF0ZVxuICAgKiA8cHJlPnZpZXdzOiB7XG4gICAqICAgICBoZWFkZXI6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJoZWFkZXJDdHJsXCIsXG4gICAqICAgICAgIHRlbXBsYXRlVXJsOiBcImhlYWRlci5odG1sXCJcbiAgICogICAgIH0sIGJvZHk6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJib2R5Q3RybFwiLFxuICAgKiAgICAgICB0ZW1wbGF0ZVVybDogXCJib2R5Lmh0bWxcIlxuICAgKiAgICAgfSwgZm9vdGVyOiB7XG4gICAqICAgICAgIGNvbnRyb2xsZXI6IFwiZm9vdEN0cmxcIixcbiAgICogICAgICAgdGVtcGxhdGVVcmw6IFwiZm9vdGVyLmh0bWxcIlxuICAgKiAgICAgfVxuICAgKiAgIH08L3ByZT5cbiAgICpcbiAgICogVGFyZ2V0cyBuYW1lZCBgdWktdmlldz1cImhlYWRlclwiYCBmcm9tIGdyYW5kcGFyZW50IHN0YXRlICd0b3AnJ3MgdGVtcGxhdGUsIGFuZCBuYW1lZCBgdWktdmlldz1cImJvZHlcIiBmcm9tIHBhcmVudCBzdGF0ZSdzIHRlbXBsYXRlLlxuICAgKiA8cHJlPnZpZXdzOiB7XG4gICAqICAgICAnaGVhZGVyQHRvcCc6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJtc2dIZWFkZXJDdHJsXCIsXG4gICAqICAgICAgIHRlbXBsYXRlVXJsOiBcIm1zZ0hlYWRlci5odG1sXCJcbiAgICogICAgIH0sICdib2R5Jzoge1xuICAgKiAgICAgICBjb250cm9sbGVyOiBcIm1lc3NhZ2VzQ3RybFwiLFxuICAgKiAgICAgICB0ZW1wbGF0ZVVybDogXCJtZXNzYWdlcy5odG1sXCJcbiAgICogICAgIH1cbiAgICogICB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdGF0ZUNvbmZpZy5hYnN0cmFjdD1mYWxzZV1cbiAgICogPGEgaWQ9J2Fic3RyYWN0Jz48L2E+XG4gICAqIEFuIGFic3RyYWN0IHN0YXRlIHdpbGwgbmV2ZXIgYmUgZGlyZWN0bHkgYWN0aXZhdGVkLFxuICAgKiAgIGJ1dCBjYW4gcHJvdmlkZSBpbmhlcml0ZWQgcHJvcGVydGllcyB0byBpdHMgY29tbW9uIGNoaWxkcmVuIHN0YXRlcy5cbiAgICogPHByZT5hYnN0cmFjdDogdHJ1ZTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc3RhdGVDb25maWcub25FbnRlclxuICAgKiA8YSBpZD0nb25FbnRlcic+PC9hPlxuICAgKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmb3Igd2hlbiBhIHN0YXRlIGlzIGVudGVyZWQuIEdvb2Qgd2F5XG4gICAqICAgdG8gdHJpZ2dlciBhbiBhY3Rpb24gb3IgZGlzcGF0Y2ggYW4gZXZlbnQsIHN1Y2ggYXMgb3BlbmluZyBhIGRpYWxvZy5cbiAgICogSWYgbWluaWZ5aW5nIHlvdXIgc2NyaXB0cywgbWFrZSBzdXJlIHRvIGV4cGxpY2l0bHkgYW5ub3RhdGUgdGhpcyBmdW5jdGlvbixcbiAgICogYmVjYXVzZSBpdCB3b24ndCBiZSBhdXRvbWF0aWNhbGx5IGFubm90YXRlZCBieSB5b3VyIGJ1aWxkIHRvb2xzLlxuICAgKlxuICAgKiA8cHJlPm9uRW50ZXI6IGZ1bmN0aW9uKE15U2VydmljZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICBNeVNlcnZpY2UuZm9vKCRzdGF0ZVBhcmFtcy5teVBhcmFtKTtcbiAgICogfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc3RhdGVDb25maWcub25FeGl0XG4gICAqIDxhIGlkPSdvbkV4aXQnPjwvYT5cbiAgICpcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHdoZW4gYSBzdGF0ZSBpcyBleGl0ZWQuIEdvb2Qgd2F5IHRvXG4gICAqICAgdHJpZ2dlciBhbiBhY3Rpb24gb3IgZGlzcGF0Y2ggYW4gZXZlbnQsIHN1Y2ggYXMgb3BlbmluZyBhIGRpYWxvZy5cbiAgICogSWYgbWluaWZ5aW5nIHlvdXIgc2NyaXB0cywgbWFrZSBzdXJlIHRvIGV4cGxpY2l0bHkgYW5ub3RhdGUgdGhpcyBmdW5jdGlvbixcbiAgICogYmVjYXVzZSBpdCB3b24ndCBiZSBhdXRvbWF0aWNhbGx5IGFubm90YXRlZCBieSB5b3VyIGJ1aWxkIHRvb2xzLlxuICAgKlxuICAgKiA8cHJlPm9uRXhpdDogZnVuY3Rpb24oTXlTZXJ2aWNlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIE15U2VydmljZS5jbGVhbnVwKCRzdGF0ZVBhcmFtcy5teVBhcmFtKTtcbiAgICogfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RhdGVDb25maWcucmVsb2FkT25TZWFyY2g9dHJ1ZV1cbiAgICogPGEgaWQ9J3JlbG9hZE9uU2VhcmNoJz48L2E+XG4gICAqXG4gICAqIElmIGBmYWxzZWAsIHdpbGwgbm90IHJldHJpZ2dlciB0aGUgc2FtZSBzdGF0ZVxuICAgKiAgIGp1c3QgYmVjYXVzZSBhIHNlYXJjaC9xdWVyeSBwYXJhbWV0ZXIgaGFzIGNoYW5nZWQgKHZpYSAkbG9jYXRpb24uc2VhcmNoKCkgb3IgJGxvY2F0aW9uLmhhc2goKSkuIFxuICAgKiAgIFVzZWZ1bCBmb3Igd2hlbiB5b3UnZCBsaWtlIHRvIG1vZGlmeSAkbG9jYXRpb24uc2VhcmNoKCkgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcmVsb2FkLlxuICAgKiA8cHJlPnJlbG9hZE9uU2VhcmNoOiBmYWxzZTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlQ29uZmlnLmRhdGFcbiAgICogPGEgaWQ9J2RhdGEnPjwvYT5cbiAgICpcbiAgICogQXJiaXRyYXJ5IGRhdGEgb2JqZWN0LCB1c2VmdWwgZm9yIGN1c3RvbSBjb25maWd1cmF0aW9uLiAgVGhlIHBhcmVudCBzdGF0ZSdzIGBkYXRhYCBpc1xuICAgKiAgIHByb3RvdHlwYWxseSBpbmhlcml0ZWQuICBJbiBvdGhlciB3b3JkcywgYWRkaW5nIGEgZGF0YSBwcm9wZXJ0eSB0byBhIHN0YXRlIGFkZHMgaXQgdG9cbiAgICogICB0aGUgZW50aXJlIHN1YnRyZWUgdmlhIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuXG4gICAqXG4gICAqIDxwcmU+ZGF0YToge1xuICAgKiAgICAgcmVxdWlyZWRSb2xlOiAnZm9vJ1xuICAgKiB9IDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlQ29uZmlnLnBhcmFtc1xuICAgKiA8YSBpZD0ncGFyYW1zJz48L2E+XG4gICAqXG4gICAqIEEgbWFwIHdoaWNoIG9wdGlvbmFsbHkgY29uZmlndXJlcyBwYXJhbWV0ZXJzIGRlY2xhcmVkIGluIHRoZSBgdXJsYCwgb3JcbiAgICogICBkZWZpbmVzIGFkZGl0aW9uYWwgbm9uLXVybCBwYXJhbWV0ZXJzLiAgRm9yIGVhY2ggcGFyYW1ldGVyIGJlaW5nXG4gICAqICAgY29uZmlndXJlZCwgYWRkIGEgY29uZmlndXJhdGlvbiBvYmplY3Qga2V5ZWQgdG8gdGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICpcbiAgICogICBFYWNoIHBhcmFtZXRlciBjb25maWd1cmF0aW9uIG9iamVjdCBtYXkgY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSAqKiB2YWx1ZSAqKiAtIHtvYmplY3R8ZnVuY3Rpb249fTogc3BlY2lmaWVzIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGlzXG4gICAqICAgICBwYXJhbWV0ZXIuICBUaGlzIGltcGxpY2l0bHkgc2V0cyB0aGlzIHBhcmFtZXRlciBhcyBvcHRpb25hbC5cbiAgICpcbiAgICogICAgIFdoZW4gVUktUm91dGVyIHJvdXRlcyB0byBhIHN0YXRlIGFuZCBubyB2YWx1ZSBpc1xuICAgKiAgICAgc3BlY2lmaWVkIGZvciB0aGlzIHBhcmFtZXRlciBpbiB0aGUgVVJMIG9yIHRyYW5zaXRpb24sIHRoZVxuICAgKiAgICAgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgaW5zdGVhZC4gIElmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbixcbiAgICogICAgIGl0IHdpbGwgYmUgaW5qZWN0ZWQgYW5kIGludm9rZWQsIGFuZCB0aGUgcmV0dXJuIHZhbHVlIHVzZWQuXG4gICAqXG4gICAqICAgICAqTm90ZSo6IGB1bmRlZmluZWRgIGlzIHRyZWF0ZWQgYXMgXCJubyBkZWZhdWx0IHZhbHVlXCIgd2hpbGUgYG51bGxgXG4gICAqICAgICBpcyB0cmVhdGVkIGFzIFwidGhlIGRlZmF1bHQgdmFsdWUgaXMgYG51bGxgXCIuXG4gICAqXG4gICAqICAgICAqU2hvcnRoYW5kKjogSWYgeW91IG9ubHkgbmVlZCB0byBjb25maWd1cmUgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlXG4gICAqICAgICBwYXJhbWV0ZXIsIHlvdSBtYXkgdXNlIGEgc2hvcnRoYW5kIHN5bnRheC4gICBJbiB0aGUgKipgcGFyYW1zYCoqXG4gICAqICAgICBtYXAsIGluc3RlYWQgbWFwcGluZyB0aGUgcGFyYW0gbmFtZSB0byBhIGZ1bGwgcGFyYW1ldGVyIGNvbmZpZ3VyYXRpb25cbiAgICogICAgIG9iamVjdCwgc2ltcGx5IHNldCBtYXAgaXQgdG8gdGhlIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlLCBlLmcuOlxuICAgKlxuICAgKiA8cHJlPi8vIGRlZmluZSBhIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWVcbiAgICogcGFyYW1zOiB7XG4gICAqICAgICBwYXJhbTE6IHsgdmFsdWU6IFwiZGVmYXVsdFZhbHVlXCIgfVxuICAgKiB9XG4gICAqIC8vIHNob3J0aGFuZCBkZWZhdWx0IHZhbHVlc1xuICAgKiBwYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMTogXCJkZWZhdWx0VmFsdWVcIixcbiAgICogICAgIHBhcmFtMjogXCJwYXJhbTJEZWZhdWx0XCJcbiAgICogfTwvcHJlPlxuICAgKlxuICAgKiAgIC0gKiogYXJyYXkgKiogLSB7Ym9vbGVhbj19OiAqKGRlZmF1bHQ6IGZhbHNlKSogSWYgdHJ1ZSwgdGhlIHBhcmFtIHZhbHVlIHdpbGwgYmVcbiAgICogICAgIHRyZWF0ZWQgYXMgYW4gYXJyYXkgb2YgdmFsdWVzLiAgSWYgeW91IHNwZWNpZmllZCBhIFR5cGUsIHRoZSB2YWx1ZSB3aWxsIGJlXG4gICAqICAgICB0cmVhdGVkIGFzIGFuIGFycmF5IG9mIHRoZSBzcGVjaWZpZWQgVHlwZS4gIE5vdGU6IHF1ZXJ5IHBhcmFtZXRlciB2YWx1ZXNcbiAgICogICAgIGRlZmF1bHQgdG8gYSBzcGVjaWFsIGBcImF1dG9cImAgbW9kZS5cbiAgICpcbiAgICogICAgIEZvciBxdWVyeSBwYXJhbWV0ZXJzIGluIGBcImF1dG9cImAgbW9kZSwgaWYgbXVsdGlwbGUgIHZhbHVlcyBmb3IgYSBzaW5nbGUgcGFyYW1ldGVyXG4gICAqICAgICBhcmUgcHJlc2VudCBpbiB0aGUgVVJMIChlLmcuOiBgL2Zvbz9iYXI9MSZiYXI9MiZiYXI9M2ApIHRoZW4gdGhlIHZhbHVlc1xuICAgKiAgICAgYXJlIG1hcHBlZCB0byBhbiBhcnJheSAoZS5nLjogYHsgZm9vOiBbICcxJywgJzInLCAnMycgXSB9YCkuICBIb3dldmVyLCBpZlxuICAgKiAgICAgb25seSBvbmUgdmFsdWUgaXMgcHJlc2VudCAoZS5nLjogYC9mb28/YmFyPTFgKSB0aGVuIHRoZSB2YWx1ZSBpcyB0cmVhdGVkIGFzIHNpbmdsZVxuICAgKiAgICAgdmFsdWUgKGUuZy46IGB7IGZvbzogJzEnIH1gKS5cbiAgICpcbiAgICogPHByZT5wYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMTogeyBhcnJheTogdHJ1ZSB9XG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogICAtICoqIHNxdWFzaCAqKiAtIHtib29sfHN0cmluZz19OiBgc3F1YXNoYCBjb25maWd1cmVzIGhvdyBhIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlIGlzIHJlcHJlc2VudGVkIGluIHRoZSBVUkwgd2hlblxuICAgKiAgICAgdGhlIGN1cnJlbnQgcGFyYW1ldGVyIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBkZWZhdWx0IHZhbHVlLiBJZiBgc3F1YXNoYCBpcyBub3Qgc2V0LCBpdCB1c2VzIHRoZVxuICAgKiAgICAgY29uZmlndXJlZCBkZWZhdWx0IHNxdWFzaCBwb2xpY3kuXG4gICAqICAgICAoU2VlIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjbWV0aG9kc19kZWZhdWx0U3F1YXNoUG9saWN5IGBkZWZhdWx0U3F1YXNoUG9saWN5KClgfSlcbiAgICpcbiAgICogICBUaGVyZSBhcmUgdGhyZWUgc3F1YXNoIHNldHRpbmdzOlxuICAgKlxuICAgKiAgICAgLSBmYWxzZTogVGhlIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWUgaXMgbm90IHNxdWFzaGVkLiAgSXQgaXMgZW5jb2RlZCBhbmQgaW5jbHVkZWQgaW4gdGhlIFVSTFxuICAgKiAgICAgLSB0cnVlOiBUaGUgcGFyYW1ldGVyJ3MgZGVmYXVsdCB2YWx1ZSBpcyBvbWl0dGVkIGZyb20gdGhlIFVSTC4gIElmIHRoZSBwYXJhbWV0ZXIgaXMgcHJlY2VlZGVkIGFuZCBmb2xsb3dlZFxuICAgKiAgICAgICBieSBzbGFzaGVzIGluIHRoZSBzdGF0ZSdzIGB1cmxgIGRlY2xhcmF0aW9uLCB0aGVuIG9uZSBvZiB0aG9zZSBzbGFzaGVzIGFyZSBvbWl0dGVkLlxuICAgKiAgICAgICBUaGlzIGNhbiBhbGxvdyBmb3IgY2xlYW5lciBsb29raW5nIFVSTHMuXG4gICAqICAgICAtIGBcIjxhcmJpdHJhcnkgc3RyaW5nPlwiYDogVGhlIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBhbiBhcmJpdHJhcnkgcGxhY2Vob2xkZXIgb2YgIHlvdXIgY2hvaWNlLlxuICAgKlxuICAgKiA8cHJlPnBhcmFtczoge1xuICAgKiAgICAgcGFyYW0xOiB7XG4gICAqICAgICAgIHZhbHVlOiBcImRlZmF1bHRJZFwiLFxuICAgKiAgICAgICBzcXVhc2g6IHRydWVcbiAgICogfSB9XG4gICAqIC8vIHNxdWFzaCBcImRlZmF1bHRWYWx1ZVwiIHRvIFwiflwiXG4gICAqIHBhcmFtczoge1xuICAgKiAgICAgcGFyYW0xOiB7XG4gICAqICAgICAgIHZhbHVlOiBcImRlZmF1bHRWYWx1ZVwiLFxuICAgKiAgICAgICBzcXVhc2g6IFwiflwiXG4gICAqIH0gfVxuICAgKiA8L3ByZT5cbiAgICpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPHByZT5cbiAgICogLy8gU29tZSBzdGF0ZSBuYW1lIGV4YW1wbGVzXG4gICAqXG4gICAqIC8vIHN0YXRlTmFtZSBjYW4gYmUgYSBzaW5nbGUgdG9wLWxldmVsIG5hbWUgKG11c3QgYmUgdW5pcXVlKS5cbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lXCIsIHt9KTtcbiAgICpcbiAgICogLy8gT3IgaXQgY2FuIGJlIGEgbmVzdGVkIHN0YXRlIG5hbWUuIFRoaXMgc3RhdGUgaXMgYSBjaGlsZCBvZiB0aGVcbiAgICogLy8gYWJvdmUgXCJob21lXCIgc3RhdGUuXG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZS5uZXdlc3RcIiwge30pO1xuICAgKlxuICAgKiAvLyBOZXN0IHN0YXRlcyBhcyBkZWVwbHkgYXMgbmVlZGVkLlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWUubmV3ZXN0LmFiYy54eXouaW5jZXB0aW9uXCIsIHt9KTtcbiAgICpcbiAgICogLy8gc3RhdGUoKSByZXR1cm5zICRzdGF0ZVByb3ZpZGVyLCBzbyB5b3UgY2FuIGNoYWluIHN0YXRlIGRlY2xhcmF0aW9ucy5cbiAgICogJHN0YXRlUHJvdmlkZXJcbiAgICogICAuc3RhdGUoXCJob21lXCIsIHt9KVxuICAgKiAgIC5zdGF0ZShcImFib3V0XCIsIHt9KVxuICAgKiAgIC5zdGF0ZShcImNvbnRhY3RzXCIsIHt9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqL1xuICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gIGZ1bmN0aW9uIHN0YXRlKG5hbWUsIGRlZmluaXRpb24pIHtcbiAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIGRlZmluaXRpb24gPSBuYW1lO1xuICAgIGVsc2UgZGVmaW5pdGlvbi5uYW1lID0gbmFtZTtcbiAgICByZWdpc3RlclN0YXRlKGRlZmluaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBvYmplY3RcbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgKlxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKiBAcmVxdWlyZXMgJHFcbiAgICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kdmlld1xuICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kcmVzb2x2ZVxuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVBhcmFtc1xuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBwYXJhbXMgQSBwYXJhbSBvYmplY3QsIGUuZy4ge3NlY3Rpb25JZDogc2VjdGlvbi5pZCl9LCB0aGF0IFxuICAgKiB5b3UnZCBsaWtlIHRvIHRlc3QgYWdhaW5zdCB0aGUgY3VycmVudCBhY3RpdmUgc3RhdGUuXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjdXJyZW50IEEgcmVmZXJlbmNlIHRvIHRoZSBzdGF0ZSdzIGNvbmZpZyBvYmplY3QuIEhvd2V2ZXIgXG4gICAqIHlvdSBwYXNzZWQgaXQgaW4uIFVzZWZ1bCBmb3IgYWNjZXNzaW5nIGN1c3RvbSBkYXRhLlxuICAgKiBAcHJvcGVydHkge29iamVjdH0gdHJhbnNpdGlvbiBDdXJyZW50bHkgcGVuZGluZyB0cmFuc2l0aW9uLiBBIHByb21pc2UgdGhhdCdsbCBcbiAgICogcmVzb2x2ZSBvciByZWplY3QuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBgJHN0YXRlYCBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciByZXByZXNlbnRpbmcgc3RhdGVzIGFzIHdlbGwgYXMgdHJhbnNpdGlvbmluZ1xuICAgKiBiZXR3ZWVuIHRoZW0uIEl0IGFsc28gcHJvdmlkZXMgaW50ZXJmYWNlcyB0byBhc2sgZm9yIGN1cnJlbnQgc3RhdGUgb3IgZXZlbiBzdGF0ZXNcbiAgICogeW91J3JlIGNvbWluZyBmcm9tLlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gJGdldDtcbiAgJGdldC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRxJywgJyR2aWV3JywgJyRpbmplY3RvcicsICckcmVzb2x2ZScsICckc3RhdGVQYXJhbXMnLCAnJHVybFJvdXRlcicsICckbG9jYXRpb24nLCAnJHVybE1hdGNoZXJGYWN0b3J5J107XG4gIGZ1bmN0aW9uICRnZXQoICAgJHJvb3RTY29wZSwgICAkcSwgICAkdmlldywgICAkaW5qZWN0b3IsICAgJHJlc29sdmUsICAgJHN0YXRlUGFyYW1zLCAgICR1cmxSb3V0ZXIsICAgJGxvY2F0aW9uLCAgICR1cmxNYXRjaGVyRmFjdG9yeSkge1xuXG4gICAgdmFyIFRyYW5zaXRpb25TdXBlcnNlZGVkRXJyb3IgPSBuZXcgRXJyb3IoJ3RyYW5zaXRpb24gc3VwZXJzZWRlZCcpO1xuXG4gICAgdmFyIFRyYW5zaXRpb25TdXBlcnNlZGVkID0gc2lsZW5jZVVuY2F1Z2h0SW5Qcm9taXNlKCRxLnJlamVjdChUcmFuc2l0aW9uU3VwZXJzZWRlZEVycm9yKSk7XG4gICAgdmFyIFRyYW5zaXRpb25QcmV2ZW50ZWQgPSBzaWxlbmNlVW5jYXVnaHRJblByb21pc2UoJHEucmVqZWN0KG5ldyBFcnJvcigndHJhbnNpdGlvbiBwcmV2ZW50ZWQnKSkpO1xuICAgIHZhciBUcmFuc2l0aW9uQWJvcnRlZCA9IHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZSgkcS5yZWplY3QobmV3IEVycm9yKCd0cmFuc2l0aW9uIGFib3J0ZWQnKSkpO1xuICAgIHZhciBUcmFuc2l0aW9uRmFpbGVkID0gc2lsZW5jZVVuY2F1Z2h0SW5Qcm9taXNlKCRxLnJlamVjdChuZXcgRXJyb3IoJ3RyYW5zaXRpb24gZmFpbGVkJykpKTtcblxuICAgIC8vIEhhbmRsZXMgdGhlIGNhc2Ugd2hlcmUgYSBzdGF0ZSB3aGljaCBpcyB0aGUgdGFyZ2V0IG9mIGEgdHJhbnNpdGlvbiBpcyBub3QgZm91bmQsIGFuZCB0aGUgdXNlclxuICAgIC8vIGNhbiBvcHRpb25hbGx5IHJldHJ5IG9yIGRlZmVyIHRoZSB0cmFuc2l0aW9uXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVkaXJlY3QocmVkaXJlY3QsIHN0YXRlLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGV2ZW50XG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlIyRzdGF0ZU5vdEZvdW5kXG4gICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEZpcmVkIHdoZW4gYSByZXF1ZXN0ZWQgc3RhdGUgKipjYW5ub3QgYmUgZm91bmQqKiB1c2luZyB0aGUgcHJvdmlkZWQgc3RhdGUgbmFtZSBkdXJpbmcgdHJhbnNpdGlvbi5cbiAgICAgICAqIFRoZSBldmVudCBpcyBicm9hZGNhc3QgYWxsb3dpbmcgYW55IGhhbmRsZXJzIGEgc2luZ2xlIGNoYW5jZSB0byBkZWFsIHdpdGggdGhlIGVycm9yICh1c3VhbGx5IGJ5XG4gICAgICAgKiBsYXp5LWxvYWRpbmcgdGhlIHVuZm91bmQgc3RhdGUpLiBBIHNwZWNpYWwgYHVuZm91bmRTdGF0ZWAgb2JqZWN0IGlzIHBhc3NlZCB0byB0aGUgbGlzdGVuZXIgaGFuZGxlcixcbiAgICAgICAqIHlvdSBjYW4gc2VlIGl0cyB0aHJlZSBwcm9wZXJ0aWVzIGluIHRoZSBleGFtcGxlLiBZb3UgY2FuIHVzZSBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgdG8gYWJvcnQgdGhlXG4gICAgICAgKiB0cmFuc2l0aW9uIGFuZCB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIGBnb2Agd2lsbCBiZSByZWplY3RlZCB3aXRoIGEgYCd0cmFuc2l0aW9uIGFib3J0ZWQnYCB2YWx1ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IHVuZm91bmRTdGF0ZSBVbmZvdW5kIFN0YXRlIGluZm9ybWF0aW9uLiBDb250YWluczogYHRvLCB0b1BhcmFtcywgb3B0aW9uc2AgcHJvcGVydGllcy5cbiAgICAgICAqIEBwYXJhbSB7U3RhdGV9IGZyb21TdGF0ZSBDdXJyZW50IHN0YXRlIG9iamVjdC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmcm9tUGFyYW1zIEN1cnJlbnQgc3RhdGUgcGFyYW1zLlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKlxuICAgICAgICogPHByZT5cbiAgICAgICAqIC8vIHNvbWV3aGVyZSwgYXNzdW1lIGxhenkuc3RhdGUgaGFzIG5vdCBiZWVuIGRlZmluZWRcbiAgICAgICAqICRzdGF0ZS5nbyhcImxhenkuc3RhdGVcIiwge2E6MSwgYjoyfSwge2luaGVyaXQ6ZmFsc2V9KTtcbiAgICAgICAqXG4gICAgICAgKiAvLyBzb21ld2hlcmUgZWxzZVxuICAgICAgICogJHNjb3BlLiRvbignJHN0YXRlTm90Rm91bmQnLFxuICAgICAgICogZnVuY3Rpb24oZXZlbnQsIHVuZm91bmRTdGF0ZSwgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKXtcbiAgICAgICAqICAgICBjb25zb2xlLmxvZyh1bmZvdW5kU3RhdGUudG8pOyAvLyBcImxhenkuc3RhdGVcIlxuICAgICAgICogICAgIGNvbnNvbGUubG9nKHVuZm91bmRTdGF0ZS50b1BhcmFtcyk7IC8vIHthOjEsIGI6Mn1cbiAgICAgICAqICAgICBjb25zb2xlLmxvZyh1bmZvdW5kU3RhdGUub3B0aW9ucyk7IC8vIHtpbmhlcml0OmZhbHNlfSArIGRlZmF1bHQgb3B0aW9uc1xuICAgICAgICogfSlcbiAgICAgICAqIDwvcHJlPlxuICAgICAgICovXG4gICAgICB2YXIgZXZ0ID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVOb3RGb3VuZCcsIHJlZGlyZWN0LCBzdGF0ZSwgcGFyYW1zKTtcblxuICAgICAgaWYgKGV2dC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiBUcmFuc2l0aW9uQWJvcnRlZDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldnQucmV0cnkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIEFsbG93IHRoZSBoYW5kbGVyIHRvIHJldHVybiBhIHByb21pc2UgdG8gZGVmZXIgc3RhdGUgbG9va3VwIHJldHJ5XG4gICAgICBpZiAob3B0aW9ucy4kcmV0cnkpIHtcbiAgICAgICAgJHVybFJvdXRlci51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIFRyYW5zaXRpb25GYWlsZWQ7XG4gICAgICB9XG4gICAgICB2YXIgcmV0cnlUcmFuc2l0aW9uID0gJHN0YXRlLnRyYW5zaXRpb24gPSAkcS53aGVuKGV2dC5yZXRyeSk7XG5cbiAgICAgIHJldHJ5VHJhbnNpdGlvbi50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmV0cnlUcmFuc2l0aW9uICE9PSAkc3RhdGUudHJhbnNpdGlvbikge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlQ2FuY2VsJywgcmVkaXJlY3QudG8sIHJlZGlyZWN0LnRvUGFyYW1zLCBzdGF0ZSwgcGFyYW1zKTtcbiAgICAgICAgICByZXR1cm4gVHJhbnNpdGlvblN1cGVyc2VkZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVkaXJlY3Qub3B0aW9ucy4kcmV0cnkgPSB0cnVlO1xuICAgICAgICByZXR1cm4gJHN0YXRlLnRyYW5zaXRpb25UbyhyZWRpcmVjdC50bywgcmVkaXJlY3QudG9QYXJhbXMsIHJlZGlyZWN0Lm9wdGlvbnMpO1xuICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBUcmFuc2l0aW9uQWJvcnRlZDtcbiAgICAgIH0pO1xuICAgICAgJHVybFJvdXRlci51cGRhdGUoKTtcblxuICAgICAgcmV0dXJuIHJldHJ5VHJhbnNpdGlvbjtcbiAgICB9XG5cbiAgICByb290LmxvY2FscyA9IHsgcmVzb2x2ZTogbnVsbCwgZ2xvYmFsczogeyAkc3RhdGVQYXJhbXM6IHt9IH0gfTtcblxuICAgICRzdGF0ZSA9IHtcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBjdXJyZW50OiByb290LnNlbGYsXG4gICAgICAkY3VycmVudDogcm9vdCxcbiAgICAgIHRyYW5zaXRpb246IG51bGxcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNyZWxvYWRcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSBtZXRob2QgdGhhdCBmb3JjZSByZWxvYWRzIHRoZSBjdXJyZW50IHN0YXRlLiBBbGwgcmVzb2x2ZXMgYXJlIHJlLXJlc29sdmVkLFxuICAgICAqIGNvbnRyb2xsZXJzIHJlaW5zdGFudGlhdGVkLCBhbmQgZXZlbnRzIHJlLWZpcmVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIHZhciBhcHAgYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pO1xuICAgICAqXG4gICAgICogYXBwLmNvbnRyb2xsZXIoJ2N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGUpIHtcbiAgICAgKiAgICRzY29wZS5yZWxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAqICAgICAkc3RhdGUucmVsb2FkKCk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBgcmVsb2FkKClgIGlzIGp1c3QgYW4gYWxpYXMgZm9yOlxuICAgICAqIDxwcmU+XG4gICAgICogJHN0YXRlLnRyYW5zaXRpb25Ubygkc3RhdGUuY3VycmVudCwgJHN0YXRlUGFyYW1zLCB7IFxuICAgICAqICAgcmVsb2FkOiB0cnVlLCBpbmhlcml0OiBmYWxzZSwgbm90aWZ5OiB0cnVlXG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZz18b2JqZWN0PX0gc3RhdGUgLSBBIHN0YXRlIG5hbWUgb3IgYSBzdGF0ZSBvYmplY3QsIHdoaWNoIGlzIHRoZSByb290IG9mIHRoZSByZXNvbHZlcyB0byBiZSByZS1yZXNvbHZlZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIDxwcmU+XG4gICAgICogLy9hc3N1bWluZyBhcHAgYXBwbGljYXRpb24gY29uc2lzdHMgb2YgMyBzdGF0ZXM6ICdjb250YWN0cycsICdjb250YWN0cy5kZXRhaWwnLCAnY29udGFjdHMuZGV0YWlsLml0ZW0nIFxuICAgICAqIC8vYW5kIGN1cnJlbnQgc3RhdGUgaXMgJ2NvbnRhY3RzLmRldGFpbC5pdGVtJ1xuICAgICAqIHZhciBhcHAgYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pO1xuICAgICAqXG4gICAgICogYXBwLmNvbnRyb2xsZXIoJ2N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGUpIHtcbiAgICAgKiAgICRzY29wZS5yZWxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAqICAgICAvL3dpbGwgcmVsb2FkICdjb250YWN0LmRldGFpbCcgYW5kICdjb250YWN0LmRldGFpbC5pdGVtJyBzdGF0ZXNcbiAgICAgKiAgICAgJHN0YXRlLnJlbG9hZCgnY29udGFjdC5kZXRhaWwnKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIGByZWxvYWQoKWAgaXMganVzdCBhbiBhbGlhcyBmb3I6XG4gICAgICogPHByZT5cbiAgICAgKiAkc3RhdGUudHJhbnNpdGlvblRvKCRzdGF0ZS5jdXJyZW50LCAkc3RhdGVQYXJhbXMsIHsgXG4gICAgICogICByZWxvYWQ6IHRydWUsIGluaGVyaXQ6IGZhbHNlLCBub3RpZnk6IHRydWVcbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cblxuICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IHRyYW5zaXRpb24uIFNlZVxuICAgICAqIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvfS5cbiAgICAgKi9cbiAgICAkc3RhdGUucmVsb2FkID0gZnVuY3Rpb24gcmVsb2FkKHN0YXRlKSB7XG4gICAgICByZXR1cm4gJHN0YXRlLnRyYW5zaXRpb25Ubygkc3RhdGUuY3VycmVudCwgJHN0YXRlUGFyYW1zLCB7IHJlbG9hZDogc3RhdGUgfHwgdHJ1ZSwgaW5oZXJpdDogZmFsc2UsIG5vdGlmeTogdHJ1ZX0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2dvXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgdHJhbnNpdGlvbmluZyB0byBhIG5ldyBzdGF0ZS4gYCRzdGF0ZS5nb2AgY2FsbHMgXG4gICAgICogYCRzdGF0ZS50cmFuc2l0aW9uVG9gIGludGVybmFsbHkgYnV0IGF1dG9tYXRpY2FsbHkgc2V0cyBvcHRpb25zIHRvIFxuICAgICAqIGB7IGxvY2F0aW9uOiB0cnVlLCBpbmhlcml0OiB0cnVlLCByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50LCBub3RpZnk6IHRydWUgfWAuIFxuICAgICAqIFRoaXMgYWxsb3dzIHlvdSB0byBlYXNpbHkgdXNlIGFuIGFic29sdXRlIG9yIHJlbGF0aXZlIHRvIHBhdGggYW5kIHNwZWNpZnkgXG4gICAgICogb25seSB0aGUgcGFyYW1ldGVycyB5b3UnZCBsaWtlIHRvIHVwZGF0ZSAod2hpbGUgbGV0dGluZyB1bnNwZWNpZmllZCBwYXJhbWV0ZXJzIFxuICAgICAqIGluaGVyaXQgZnJvbSB0aGUgY3VycmVudGx5IGFjdGl2ZSBhbmNlc3RvciBzdGF0ZXMpLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInXSk7XG4gICAgICpcbiAgICAgKiBhcHAuY29udHJvbGxlcignY3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSkge1xuICAgICAqICAgJHNjb3BlLmNoYW5nZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAkc3RhdGUuZ28oJ2NvbnRhY3QuZGV0YWlsJyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqIDwvcHJlPlxuICAgICAqIDxpbWcgc3JjPScuLi9uZ2RvY19hc3NldHMvU3RhdGVHb0V4YW1wbGVzLnBuZycvPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRvIEFic29sdXRlIHN0YXRlIG5hbWUgb3IgcmVsYXRpdmUgc3RhdGUgcGF0aC4gU29tZSBleGFtcGxlczpcbiAgICAgKlxuICAgICAqIC0gYCRzdGF0ZS5nbygnY29udGFjdC5kZXRhaWwnKWAgLSB3aWxsIGdvIHRvIHRoZSBgY29udGFjdC5kZXRhaWxgIHN0YXRlXG4gICAgICogLSBgJHN0YXRlLmdvKCdeJylgIC0gd2lsbCBnbyB0byBhIHBhcmVudCBzdGF0ZVxuICAgICAqIC0gYCRzdGF0ZS5nbygnXi5zaWJsaW5nJylgIC0gd2lsbCBnbyB0byBhIHNpYmxpbmcgc3RhdGVcbiAgICAgKiAtIGAkc3RhdGUuZ28oJy5jaGlsZC5ncmFuZGNoaWxkJylgIC0gd2lsbCBnbyB0byBncmFuZGNoaWxkIHN0YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdD19IHBhcmFtcyBBIG1hcCBvZiB0aGUgcGFyYW1ldGVycyB0aGF0IHdpbGwgYmUgc2VudCB0byB0aGUgc3RhdGUsIFxuICAgICAqIHdpbGwgcG9wdWxhdGUgJHN0YXRlUGFyYW1zLiBBbnkgcGFyYW1ldGVycyB0aGF0IGFyZSBub3Qgc3BlY2lmaWVkIHdpbGwgYmUgaW5oZXJpdGVkIGZyb20gY3VycmVudGx5IFxuICAgICAqIGRlZmluZWQgcGFyYW1ldGVycy4gT25seSBwYXJhbWV0ZXJzIHNwZWNpZmllZCBpbiB0aGUgc3RhdGUgZGVmaW5pdGlvbiBjYW4gYmUgb3ZlcnJpZGRlbiwgbmV3IFxuICAgICAqIHBhcmFtZXRlcnMgd2lsbCBiZSBpZ25vcmVkLiBUaGlzIGFsbG93cywgZm9yIGV4YW1wbGUsIGdvaW5nIHRvIGEgc2libGluZyBzdGF0ZSB0aGF0IHNoYXJlcyBwYXJhbWV0ZXJzXG4gICAgICogc3BlY2lmaWVkIGluIGEgcGFyZW50IHN0YXRlLiBQYXJhbWV0ZXIgaW5oZXJpdGFuY2Ugb25seSB3b3JrcyBiZXR3ZWVuIGNvbW1vbiBhbmNlc3RvciBzdGF0ZXMsIEkuZS5cbiAgICAgKiB0cmFuc2l0aW9uaW5nIHRvIGEgc2libGluZyB3aWxsIGdldCB5b3UgdGhlIHBhcmFtZXRlcnMgZm9yIGFsbCBwYXJlbnRzLCB0cmFuc2l0aW9uaW5nIHRvIGEgY2hpbGRcbiAgICAgKiB3aWxsIGdldCB5b3UgYWxsIGN1cnJlbnQgcGFyYW1ldGVycywgZXRjLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmBsb2NhdGlvbmAqKiAtIHtib29sZWFuPXRydWV8c3RyaW5nPX0gLSBJZiBgdHJ1ZWAgd2lsbCB1cGRhdGUgdGhlIHVybCBpbiB0aGUgbG9jYXRpb24gYmFyLCBpZiBgZmFsc2VgXG4gICAgICogICAgd2lsbCBub3QuIElmIHN0cmluZywgbXVzdCBiZSBgXCJyZXBsYWNlXCJgLCB3aGljaCB3aWxsIHVwZGF0ZSB1cmwgYW5kIGFsc28gcmVwbGFjZSBsYXN0IGhpc3RvcnkgcmVjb3JkLlxuICAgICAqIC0gKipgaW5oZXJpdGAqKiAtIHtib29sZWFuPXRydWV9LCBJZiBgdHJ1ZWAgd2lsbCBpbmhlcml0IHVybCBwYXJhbWV0ZXJzIGZyb20gY3VycmVudCB1cmwuXG4gICAgICogLSAqKmByZWxhdGl2ZWAqKiAtIHtvYmplY3Q9JHN0YXRlLiRjdXJyZW50fSwgV2hlbiB0cmFuc2l0aW9uaW5nIHdpdGggcmVsYXRpdmUgcGF0aCAoZS5nICdeJyksIFxuICAgICAqICAgIGRlZmluZXMgd2hpY2ggc3RhdGUgdG8gYmUgcmVsYXRpdmUgZnJvbS5cbiAgICAgKiAtICoqYG5vdGlmeWAqKiAtIHtib29sZWFuPXRydWV9LCBJZiBgdHJ1ZWAgd2lsbCBicm9hZGNhc3QgJHN0YXRlQ2hhbmdlU3RhcnQgYW5kICRzdGF0ZUNoYW5nZVN1Y2Nlc3MgZXZlbnRzLlxuICAgICAqIC0gKipgcmVsb2FkYCoqICh2MC4yLjUpIC0ge2Jvb2xlYW49ZmFsc2V8c3RyaW5nfG9iamVjdH0sIElmIGB0cnVlYCB3aWxsIGZvcmNlIHRyYW5zaXRpb24gZXZlbiBpZiBubyBzdGF0ZSBvciBwYXJhbXNcbiAgICAgKiAgICBoYXZlIGNoYW5nZWQuICBJdCB3aWxsIHJlbG9hZCB0aGUgcmVzb2x2ZXMgYW5kIHZpZXdzIG9mIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBwYXJlbnQgc3RhdGVzLlxuICAgICAqICAgIElmIGByZWxvYWRgIGlzIGEgc3RyaW5nIChvciBzdGF0ZSBvYmplY3QpLCB0aGUgc3RhdGUgb2JqZWN0IGlzIGZldGNoZWQgKGJ5IG5hbWUsIG9yIG9iamVjdCByZWZlcmVuY2UpOyBhbmQgXFxcbiAgICAgKiAgICB0aGUgdHJhbnNpdGlvbiByZWxvYWRzIHRoZSByZXNvbHZlcyBhbmQgdmlld3MgZm9yIHRoYXQgbWF0Y2hlZCBzdGF0ZSwgYW5kIGFsbCBpdHMgY2hpbGRyZW4gc3RhdGVzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSByZXByZXNlbnRpbmcgdGhlIHN0YXRlIG9mIHRoZSBuZXcgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIFBvc3NpYmxlIHN1Y2Nlc3MgdmFsdWVzOlxuICAgICAqXG4gICAgICogLSAkc3RhdGUuY3VycmVudFxuICAgICAqXG4gICAgICogPGJyLz5Qb3NzaWJsZSByZWplY3Rpb24gdmFsdWVzOlxuICAgICAqXG4gICAgICogLSAndHJhbnNpdGlvbiBzdXBlcnNlZGVkJyAtIHdoZW4gYSBuZXdlciB0cmFuc2l0aW9uIGhhcyBiZWVuIHN0YXJ0ZWQgYWZ0ZXIgdGhpcyBvbmVcbiAgICAgKiAtICd0cmFuc2l0aW9uIHByZXZlbnRlZCcgLSB3aGVuIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCBoYXMgYmVlbiBjYWxsZWQgaW4gYSBgJHN0YXRlQ2hhbmdlU3RhcnRgIGxpc3RlbmVyXG4gICAgICogLSAndHJhbnNpdGlvbiBhYm9ydGVkJyAtIHdoZW4gYGV2ZW50LnByZXZlbnREZWZhdWx0KClgIGhhcyBiZWVuIGNhbGxlZCBpbiBhIGAkc3RhdGVOb3RGb3VuZGAgbGlzdGVuZXIgb3JcbiAgICAgKiAgIHdoZW4gYSBgJHN0YXRlTm90Rm91bmRgIGBldmVudC5yZXRyeWAgcHJvbWlzZSBlcnJvcnMuXG4gICAgICogLSAndHJhbnNpdGlvbiBmYWlsZWQnIC0gd2hlbiBhIHN0YXRlIGhhcyBiZWVuIHVuc3VjY2Vzc2Z1bGx5IGZvdW5kIGFmdGVyIDIgdHJpZXMuXG4gICAgICogLSAqcmVzb2x2ZSBlcnJvciogLSB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZCB3aXRoIGEgYHJlc29sdmVgXG4gICAgICpcbiAgICAgKi9cbiAgICAkc3RhdGUuZ28gPSBmdW5jdGlvbiBnbyh0bywgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gJHN0YXRlLnRyYW5zaXRpb25Ubyh0bywgcGFyYW1zLCBleHRlbmQoeyBpbmhlcml0OiB0cnVlLCByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50IH0sIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSN0cmFuc2l0aW9uVG9cbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogTG93LWxldmVsIG1ldGhvZCBmb3IgdHJhbnNpdGlvbmluZyB0byBhIG5ldyBzdGF0ZS4ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19nbyAkc3RhdGUuZ299XG4gICAgICogdXNlcyBgdHJhbnNpdGlvblRvYCBpbnRlcm5hbGx5LiBgJHN0YXRlLmdvYCBpcyByZWNvbW1lbmRlZCBpbiBtb3N0IHNpdHVhdGlvbnMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIDxwcmU+XG4gICAgICogdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAgICAgKlxuICAgICAqIGFwcC5jb250cm9sbGVyKCdjdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlKSB7XG4gICAgICogICAkc2NvcGUuY2hhbmdlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICogICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ2NvbnRhY3QuZGV0YWlsJyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRvIFN0YXRlIG5hbWUuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSB0b1BhcmFtcyBBIG1hcCBvZiB0aGUgcGFyYW1ldGVycyB0aGF0IHdpbGwgYmUgc2VudCB0byB0aGUgc3RhdGUsXG4gICAgICogd2lsbCBwb3B1bGF0ZSAkc3RhdGVQYXJhbXMuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqYGxvY2F0aW9uYCoqIC0ge2Jvb2xlYW49dHJ1ZXxzdHJpbmc9fSAtIElmIGB0cnVlYCB3aWxsIHVwZGF0ZSB0aGUgdXJsIGluIHRoZSBsb2NhdGlvbiBiYXIsIGlmIGBmYWxzZWBcbiAgICAgKiAgICB3aWxsIG5vdC4gSWYgc3RyaW5nLCBtdXN0IGJlIGBcInJlcGxhY2VcImAsIHdoaWNoIHdpbGwgdXBkYXRlIHVybCBhbmQgYWxzbyByZXBsYWNlIGxhc3QgaGlzdG9yeSByZWNvcmQuXG4gICAgICogLSAqKmBpbmhlcml0YCoqIC0ge2Jvb2xlYW49ZmFsc2V9LCBJZiBgdHJ1ZWAgd2lsbCBpbmhlcml0IHVybCBwYXJhbWV0ZXJzIGZyb20gY3VycmVudCB1cmwuXG4gICAgICogLSAqKmByZWxhdGl2ZWAqKiAtIHtvYmplY3Q9fSwgV2hlbiB0cmFuc2l0aW9uaW5nIHdpdGggcmVsYXRpdmUgcGF0aCAoZS5nICdeJyksIFxuICAgICAqICAgIGRlZmluZXMgd2hpY2ggc3RhdGUgdG8gYmUgcmVsYXRpdmUgZnJvbS5cbiAgICAgKiAtICoqYG5vdGlmeWAqKiAtIHtib29sZWFuPXRydWV9LCBJZiBgdHJ1ZWAgd2lsbCBicm9hZGNhc3QgJHN0YXRlQ2hhbmdlU3RhcnQgYW5kICRzdGF0ZUNoYW5nZVN1Y2Nlc3MgZXZlbnRzLlxuICAgICAqIC0gKipgcmVsb2FkYCoqICh2MC4yLjUpIC0ge2Jvb2xlYW49ZmFsc2V8c3RyaW5nPXxvYmplY3Q9fSwgSWYgYHRydWVgIHdpbGwgZm9yY2UgdHJhbnNpdGlvbiBldmVuIGlmIHRoZSBzdGF0ZSBvciBwYXJhbXMgXG4gICAgICogICAgaGF2ZSBub3QgY2hhbmdlZCwgYWthIGEgcmVsb2FkIG9mIHRoZSBzYW1lIHN0YXRlLiBJdCBkaWZmZXJzIGZyb20gcmVsb2FkT25TZWFyY2ggYmVjYXVzZSB5b3UnZFxuICAgICAqICAgIHVzZSB0aGlzIHdoZW4geW91IHdhbnQgdG8gZm9yY2UgYSByZWxvYWQgd2hlbiAqZXZlcnl0aGluZyogaXMgdGhlIHNhbWUsIGluY2x1ZGluZyBzZWFyY2ggcGFyYW1zLlxuICAgICAqICAgIGlmIFN0cmluZywgdGhlbiB3aWxsIHJlbG9hZCB0aGUgc3RhdGUgd2l0aCB0aGUgbmFtZSBnaXZlbiBpbiByZWxvYWQsIGFuZCBhbnkgY2hpbGRyZW4uXG4gICAgICogICAgaWYgT2JqZWN0LCB0aGVuIGEgc3RhdGVPYmogaXMgZXhwZWN0ZWQsIHdpbGwgcmVsb2FkIHRoZSBzdGF0ZSBmb3VuZCBpbiBzdGF0ZU9iaiwgYW5kIGFueSBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IHRyYW5zaXRpb24uIFNlZVxuICAgICAqIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvfS5cbiAgICAgKi9cbiAgICAkc3RhdGUudHJhbnNpdGlvblRvID0gZnVuY3Rpb24gdHJhbnNpdGlvblRvKHRvLCB0b1BhcmFtcywgb3B0aW9ucykge1xuICAgICAgdG9QYXJhbXMgPSB0b1BhcmFtcyB8fCB7fTtcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoe1xuICAgICAgICBsb2NhdGlvbjogdHJ1ZSwgaW5oZXJpdDogZmFsc2UsIHJlbGF0aXZlOiBudWxsLCBub3RpZnk6IHRydWUsIHJlbG9hZDogZmFsc2UsICRyZXRyeTogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gICAgICB2YXIgZnJvbSA9ICRzdGF0ZS4kY3VycmVudCwgZnJvbVBhcmFtcyA9ICRzdGF0ZS5wYXJhbXMsIGZyb21QYXRoID0gZnJvbS5wYXRoO1xuICAgICAgdmFyIGV2dCwgdG9TdGF0ZSA9IGZpbmRTdGF0ZSh0bywgb3B0aW9ucy5yZWxhdGl2ZSk7XG5cbiAgICAgIC8vIFN0b3JlIHRoZSBoYXNoIHBhcmFtIGZvciBsYXRlciAoc2luY2UgaXQgd2lsbCBiZSBzdHJpcHBlZCBvdXQgYnkgdmFyaW91cyBtZXRob2RzKVxuICAgICAgdmFyIGhhc2ggPSB0b1BhcmFtc1snIyddO1xuXG4gICAgICBpZiAoIWlzRGVmaW5lZCh0b1N0YXRlKSkge1xuICAgICAgICB2YXIgcmVkaXJlY3QgPSB7IHRvOiB0bywgdG9QYXJhbXM6IHRvUGFyYW1zLCBvcHRpb25zOiBvcHRpb25zIH07XG4gICAgICAgIHZhciByZWRpcmVjdFJlc3VsdCA9IGhhbmRsZVJlZGlyZWN0KHJlZGlyZWN0LCBmcm9tLnNlbGYsIGZyb21QYXJhbXMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChyZWRpcmVjdFJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZWRpcmVjdFJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFsd2F5cyByZXRyeSBvbmNlIGlmIHRoZSAkc3RhdGVOb3RGb3VuZCB3YXMgbm90IHByZXZlbnRlZFxuICAgICAgICAvLyAoaGFuZGxlcyBlaXRoZXIgcmVkaXJlY3QgY2hhbmdlZCBvciBzdGF0ZSBsYXp5LWRlZmluaXRpb24pXG4gICAgICAgIHRvID0gcmVkaXJlY3QudG87XG4gICAgICAgIHRvUGFyYW1zID0gcmVkaXJlY3QudG9QYXJhbXM7XG4gICAgICAgIG9wdGlvbnMgPSByZWRpcmVjdC5vcHRpb25zO1xuICAgICAgICB0b1N0YXRlID0gZmluZFN0YXRlKHRvLCBvcHRpb25zLnJlbGF0aXZlKTtcblxuICAgICAgICBpZiAoIWlzRGVmaW5lZCh0b1N0YXRlKSkge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5yZWxhdGl2ZSkgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBzdGF0ZSAnXCIgKyB0byArIFwiJ1wiKTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcmVzb2x2ZSAnXCIgKyB0byArIFwiJyBmcm9tIHN0YXRlICdcIiArIG9wdGlvbnMucmVsYXRpdmUgKyBcIidcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0b1N0YXRlW2Fic3RyYWN0S2V5XSkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHRyYW5zaXRpb24gdG8gYWJzdHJhY3Qgc3RhdGUgJ1wiICsgdG8gKyBcIidcIik7XG4gICAgICBpZiAob3B0aW9ucy5pbmhlcml0KSB0b1BhcmFtcyA9IGluaGVyaXRQYXJhbXMoJHN0YXRlUGFyYW1zLCB0b1BhcmFtcyB8fCB7fSwgJHN0YXRlLiRjdXJyZW50LCB0b1N0YXRlKTtcbiAgICAgIGlmICghdG9TdGF0ZS5wYXJhbXMuJCR2YWxpZGF0ZXModG9QYXJhbXMpKSByZXR1cm4gVHJhbnNpdGlvbkZhaWxlZDtcblxuICAgICAgdG9QYXJhbXMgPSB0b1N0YXRlLnBhcmFtcy4kJHZhbHVlcyh0b1BhcmFtcyk7XG4gICAgICB0byA9IHRvU3RhdGU7XG5cbiAgICAgIHZhciB0b1BhdGggPSB0by5wYXRoO1xuXG4gICAgICAvLyBTdGFydGluZyBmcm9tIHRoZSByb290IG9mIHRoZSBwYXRoLCBrZWVwIGFsbCBsZXZlbHMgdGhhdCBoYXZlbid0IGNoYW5nZWRcbiAgICAgIHZhciBrZWVwID0gMCwgc3RhdGUgPSB0b1BhdGhba2VlcF0sIGxvY2FscyA9IHJvb3QubG9jYWxzLCB0b0xvY2FscyA9IFtdO1xuXG4gICAgICBpZiAoIW9wdGlvbnMucmVsb2FkKSB7XG4gICAgICAgIHdoaWxlIChzdGF0ZSAmJiBzdGF0ZSA9PT0gZnJvbVBhdGhba2VlcF0gJiYgc3RhdGUub3duUGFyYW1zLiQkZXF1YWxzKHRvUGFyYW1zLCBmcm9tUGFyYW1zKSkge1xuICAgICAgICAgIGxvY2FscyA9IHRvTG9jYWxzW2tlZXBdID0gc3RhdGUubG9jYWxzO1xuICAgICAgICAgIGtlZXArKztcbiAgICAgICAgICBzdGF0ZSA9IHRvUGF0aFtrZWVwXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhvcHRpb25zLnJlbG9hZCkgfHwgaXNPYmplY3Qob3B0aW9ucy5yZWxvYWQpKSB7XG4gICAgICAgIGlmIChpc09iamVjdChvcHRpb25zLnJlbG9hZCkgJiYgIW9wdGlvbnMucmVsb2FkLm5hbWUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVsb2FkIHN0YXRlIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVsb2FkU3RhdGUgPSBvcHRpb25zLnJlbG9hZCA9PT0gdHJ1ZSA/IGZyb21QYXRoWzBdIDogZmluZFN0YXRlKG9wdGlvbnMucmVsb2FkKTtcbiAgICAgICAgaWYgKG9wdGlvbnMucmVsb2FkICYmICFyZWxvYWRTdGF0ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggcmVsb2FkIHN0YXRlICdcIiArIChpc1N0cmluZyhvcHRpb25zLnJlbG9hZCkgPyBvcHRpb25zLnJlbG9hZCA6IG9wdGlvbnMucmVsb2FkLm5hbWUpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKHN0YXRlICYmIHN0YXRlID09PSBmcm9tUGF0aFtrZWVwXSAmJiBzdGF0ZSAhPT0gcmVsb2FkU3RhdGUpIHtcbiAgICAgICAgICBsb2NhbHMgPSB0b0xvY2Fsc1trZWVwXSA9IHN0YXRlLmxvY2FscztcbiAgICAgICAgICBrZWVwKys7XG4gICAgICAgICAgc3RhdGUgPSB0b1BhdGhba2VlcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UncmUgZ29pbmcgdG8gdGhlIHNhbWUgc3RhdGUgYW5kIGFsbCBsb2NhbHMgYXJlIGtlcHQsIHdlJ3ZlIGdvdCBub3RoaW5nIHRvIGRvLlxuICAgICAgLy8gQnV0IGNsZWFyICd0cmFuc2l0aW9uJywgYXMgd2Ugc3RpbGwgd2FudCB0byBjYW5jZWwgYW55IG90aGVyIHBlbmRpbmcgdHJhbnNpdGlvbnMuXG4gICAgICAvLyBUT0RPOiBXZSBtYXkgbm90IHdhbnQgdG8gYnVtcCAndHJhbnNpdGlvbicgaWYgd2UncmUgY2FsbGVkIGZyb20gYSBsb2NhdGlvbiBjaGFuZ2VcbiAgICAgIC8vIHRoYXQgd2UndmUgaW5pdGlhdGVkIG91cnNlbHZlcywgYmVjYXVzZSB3ZSBtaWdodCBhY2NpZGVudGFsbHkgYWJvcnQgYSBsZWdpdGltYXRlXG4gICAgICAvLyB0cmFuc2l0aW9uIGluaXRpYXRlZCBmcm9tIGNvZGU/XG4gICAgICBpZiAoc2hvdWxkU2tpcFJlbG9hZCh0bywgdG9QYXJhbXMsIGZyb20sIGZyb21QYXJhbXMsIGxvY2Fscywgb3B0aW9ucykpIHtcbiAgICAgICAgaWYgKGhhc2gpIHRvUGFyYW1zWycjJ10gPSBoYXNoO1xuICAgICAgICAkc3RhdGUucGFyYW1zID0gdG9QYXJhbXM7XG4gICAgICAgIGNvcHkoJHN0YXRlLnBhcmFtcywgJHN0YXRlUGFyYW1zKTtcbiAgICAgICAgY29weShmaWx0ZXJCeUtleXModG8ucGFyYW1zLiQka2V5cygpLCAkc3RhdGVQYXJhbXMpLCB0by5sb2NhbHMuZ2xvYmFscy4kc3RhdGVQYXJhbXMpO1xuICAgICAgICBpZiAob3B0aW9ucy5sb2NhdGlvbiAmJiB0by5uYXZpZ2FibGUgJiYgdG8ubmF2aWdhYmxlLnVybCkge1xuICAgICAgICAgICR1cmxSb3V0ZXIucHVzaCh0by5uYXZpZ2FibGUudXJsLCB0b1BhcmFtcywge1xuICAgICAgICAgICAgJCRhdm9pZFJlc3luYzogdHJ1ZSwgcmVwbGFjZTogb3B0aW9ucy5sb2NhdGlvbiA9PT0gJ3JlcGxhY2UnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJHVybFJvdXRlci51cGRhdGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgJHN0YXRlLnRyYW5zaXRpb24gPSBudWxsO1xuICAgICAgICByZXR1cm4gJHEud2hlbigkc3RhdGUuY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbHRlciBwYXJhbWV0ZXJzIGJlZm9yZSB3ZSBwYXNzIHRoZW0gdG8gZXZlbnQgaGFuZGxlcnMgZXRjLlxuICAgICAgdG9QYXJhbXMgPSBmaWx0ZXJCeUtleXModG8ucGFyYW1zLiQka2V5cygpLCB0b1BhcmFtcyB8fCB7fSk7XG4gICAgICBcbiAgICAgIC8vIFJlLWFkZCB0aGUgc2F2ZWQgaGFzaCBiZWZvcmUgd2Ugc3RhcnQgcmV0dXJuaW5nIHRoaW5ncyBvciBicm9hZGNhc3RpbmcgJHN0YXRlQ2hhbmdlU3RhcnRcbiAgICAgIGlmIChoYXNoKSB0b1BhcmFtc1snIyddID0gaGFzaDtcbiAgICAgIFxuICAgICAgLy8gQnJvYWRjYXN0IHN0YXJ0IGV2ZW50IGFuZCBjYW5jZWwgdGhlIHRyYW5zaXRpb24gaWYgcmVxdWVzdGVkXG4gICAgICBpZiAob3B0aW9ucy5ub3RpZnkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlIyRzdGF0ZUNoYW5nZVN0YXJ0XG4gICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRmlyZWQgd2hlbiB0aGUgc3RhdGUgdHJhbnNpdGlvbiAqKmJlZ2lucyoqLiBZb3UgY2FuIHVzZSBgZXZlbnQucHJldmVudERlZmF1bHQoKWBcbiAgICAgICAgICogdG8gcHJldmVudCB0aGUgdHJhbnNpdGlvbiBmcm9tIGhhcHBlbmluZyBhbmQgdGhlbiB0aGUgdHJhbnNpdGlvbiBwcm9taXNlIHdpbGwgYmVcbiAgICAgICAgICogcmVqZWN0ZWQgd2l0aCBhIGAndHJhbnNpdGlvbiBwcmV2ZW50ZWQnYCB2YWx1ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gdG9TdGF0ZSBUaGUgc3RhdGUgYmVpbmcgdHJhbnNpdGlvbmVkIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdG9QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYHRvU3RhdGVgLlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUsIHByZS10cmFuc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgZnJvbVN0YXRlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogPHByZT5cbiAgICAgICAgICogJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JyxcbiAgICAgICAgICogZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpe1xuICAgICAgICAgKiAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICogICAgIC8vIHRyYW5zaXRpb25UbygpIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoXG4gICAgICAgICAqICAgICAvLyBhICd0cmFuc2l0aW9uIHByZXZlbnRlZCcgZXJyb3JcbiAgICAgICAgICogfSlcbiAgICAgICAgICogPC9wcmU+XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VTdGFydCcsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMsIG9wdGlvbnMpLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZUNhbmNlbCcsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMpO1xuICAgICAgICAgIC8vRG9uJ3QgdXBkYXRlIGFuZCByZXN5bmMgdXJsIGlmIHRoZXJlJ3MgYmVlbiBhIG5ldyB0cmFuc2l0aW9uIHN0YXJ0ZWQuIHNlZSBpc3N1ZSAjMjIzOCwgIzYwMFxuICAgICAgICAgIGlmICgkc3RhdGUudHJhbnNpdGlvbiA9PSBudWxsKSAkdXJsUm91dGVyLnVwZGF0ZSgpO1xuICAgICAgICAgIHJldHVybiBUcmFuc2l0aW9uUHJldmVudGVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc29sdmUgbG9jYWxzIGZvciB0aGUgcmVtYWluaW5nIHN0YXRlcywgYnV0IGRvbid0IHVwZGF0ZSBhbnkgZ2xvYmFsIHN0YXRlIGp1c3RcbiAgICAgIC8vIHlldCAtLSBpZiBhbnl0aGluZyBmYWlscyB0byByZXNvbHZlIHRoZSBjdXJyZW50IHN0YXRlIG5lZWRzIHRvIHJlbWFpbiB1bnRvdWNoZWQuXG4gICAgICAvLyBXZSBhbHNvIHNldCB1cCBhbiBpbmhlcml0YW5jZSBjaGFpbiBmb3IgdGhlIGxvY2FscyBoZXJlLiBUaGlzIGFsbG93cyB0aGUgdmlldyBkaXJlY3RpdmVcbiAgICAgIC8vIHRvIHF1aWNrbHkgbG9vayB1cCB0aGUgY29ycmVjdCBkZWZpbml0aW9uIGZvciBlYWNoIHZpZXcgaW4gdGhlIGN1cnJlbnQgc3RhdGUuIEV2ZW5cbiAgICAgIC8vIHRob3VnaCB3ZSBjcmVhdGUgdGhlIGxvY2FscyBvYmplY3QgaXRzZWxmIG91dHNpZGUgcmVzb2x2ZVN0YXRlKCksIGl0IGlzIGluaXRpYWxseVxuICAgICAgLy8gZW1wdHkgYW5kIGdldHMgZmlsbGVkIGFzeW5jaHJvbm91c2x5LiBXZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIHByb21pc2UgZm9yIHRoZVxuICAgICAgLy8gKGZ1bGx5IHJlc29sdmVkKSBjdXJyZW50IGxvY2FscywgYW5kIHBhc3MgdGhpcyBkb3duIHRoZSBjaGFpbi5cbiAgICAgIHZhciByZXNvbHZlZCA9ICRxLndoZW4obG9jYWxzKTtcblxuICAgICAgZm9yICh2YXIgbCA9IGtlZXA7IGwgPCB0b1BhdGgubGVuZ3RoOyBsKyssIHN0YXRlID0gdG9QYXRoW2xdKSB7XG4gICAgICAgIGxvY2FscyA9IHRvTG9jYWxzW2xdID0gaW5oZXJpdChsb2NhbHMpO1xuICAgICAgICByZXNvbHZlZCA9IHJlc29sdmVTdGF0ZShzdGF0ZSwgdG9QYXJhbXMsIHN0YXRlID09PSB0bywgcmVzb2x2ZWQsIGxvY2Fscywgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9uY2UgZXZlcnl0aGluZyBpcyByZXNvbHZlZCwgd2UgYXJlIHJlYWR5IHRvIHBlcmZvcm0gdGhlIGFjdHVhbCB0cmFuc2l0aW9uXG4gICAgICAvLyBhbmQgcmV0dXJuIGEgcHJvbWlzZSBmb3IgdGhlIG5ldyBzdGF0ZS4gV2UgYWxzbyBrZWVwIHRyYWNrIG9mIHdoYXQgdGhlXG4gICAgICAvLyBjdXJyZW50IHByb21pc2UgaXMsIHNvIHRoYXQgd2UgY2FuIGRldGVjdCBvdmVybGFwcGluZyB0cmFuc2l0aW9ucyBhbmRcbiAgICAgIC8vIGtlZXAgb25seSB0aGUgb3V0Y29tZSBvZiB0aGUgbGFzdCB0cmFuc2l0aW9uLlxuICAgICAgdmFyIHRyYW5zaXRpb24gPSAkc3RhdGUudHJhbnNpdGlvbiA9IHJlc29sdmVkLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbCwgZW50ZXJpbmcsIGV4aXRpbmc7XG5cbiAgICAgICAgaWYgKCRzdGF0ZS50cmFuc2l0aW9uICE9PSB0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VDYW5jZWwnLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zKTtcbiAgICAgICAgICByZXR1cm4gVHJhbnNpdGlvblN1cGVyc2VkZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeGl0ICdmcm9tJyBzdGF0ZXMgbm90IGtlcHRcbiAgICAgICAgZm9yIChsID0gZnJvbVBhdGgubGVuZ3RoIC0gMTsgbCA+PSBrZWVwOyBsLS0pIHtcbiAgICAgICAgICBleGl0aW5nID0gZnJvbVBhdGhbbF07XG4gICAgICAgICAgaWYgKGV4aXRpbmcuc2VsZi5vbkV4aXQpIHtcbiAgICAgICAgICAgICRpbmplY3Rvci5pbnZva2UoZXhpdGluZy5zZWxmLm9uRXhpdCwgZXhpdGluZy5zZWxmLCBleGl0aW5nLmxvY2Fscy5nbG9iYWxzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXhpdGluZy5sb2NhbHMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW50ZXIgJ3RvJyBzdGF0ZXMgbm90IGtlcHRcbiAgICAgICAgZm9yIChsID0ga2VlcDsgbCA8IHRvUGF0aC5sZW5ndGg7IGwrKykge1xuICAgICAgICAgIGVudGVyaW5nID0gdG9QYXRoW2xdO1xuICAgICAgICAgIGVudGVyaW5nLmxvY2FscyA9IHRvTG9jYWxzW2xdO1xuICAgICAgICAgIGlmIChlbnRlcmluZy5zZWxmLm9uRW50ZXIpIHtcbiAgICAgICAgICAgICRpbmplY3Rvci5pbnZva2UoZW50ZXJpbmcuc2VsZi5vbkVudGVyLCBlbnRlcmluZy5zZWxmLCBlbnRlcmluZy5sb2NhbHMuZ2xvYmFscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUnVuIGl0IGFnYWluLCB0byBjYXRjaCBhbnkgdHJhbnNpdGlvbnMgaW4gY2FsbGJhY2tzXG4gICAgICAgIGlmICgkc3RhdGUudHJhbnNpdGlvbiAhPT0gdHJhbnNpdGlvbikge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlQ2FuY2VsJywgdG8uc2VsZiwgdG9QYXJhbXMsIGZyb20uc2VsZiwgZnJvbVBhcmFtcyk7XG4gICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb25TdXBlcnNlZGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGdsb2JhbHMgaW4gJHN0YXRlXG4gICAgICAgICRzdGF0ZS4kY3VycmVudCA9IHRvO1xuICAgICAgICAkc3RhdGUuY3VycmVudCA9IHRvLnNlbGY7XG4gICAgICAgICRzdGF0ZS5wYXJhbXMgPSB0b1BhcmFtcztcbiAgICAgICAgY29weSgkc3RhdGUucGFyYW1zLCAkc3RhdGVQYXJhbXMpO1xuICAgICAgICAkc3RhdGUudHJhbnNpdGlvbiA9IG51bGw7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubG9jYXRpb24gJiYgdG8ubmF2aWdhYmxlKSB7XG4gICAgICAgICAgJHVybFJvdXRlci5wdXNoKHRvLm5hdmlnYWJsZS51cmwsIHRvLm5hdmlnYWJsZS5sb2NhbHMuZ2xvYmFscy4kc3RhdGVQYXJhbXMsIHtcbiAgICAgICAgICAgICQkYXZvaWRSZXN5bmM6IHRydWUsIHJlcGxhY2U6IG9wdGlvbnMubG9jYXRpb24gPT09ICdyZXBsYWNlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm90aWZ5KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkc3RhdGVDaGFuZ2VTdWNjZXNzXG4gICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRmlyZWQgb25jZSB0aGUgc3RhdGUgdHJhbnNpdGlvbiBpcyAqKmNvbXBsZXRlKiouXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7U3RhdGV9IHRvU3RhdGUgVGhlIHN0YXRlIGJlaW5nIHRyYW5zaXRpb25lZCB0by5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRvUGFyYW1zIFRoZSBwYXJhbXMgc3VwcGxpZWQgdG8gdGhlIGB0b1N0YXRlYC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gZnJvbVN0YXRlIFRoZSBjdXJyZW50IHN0YXRlLCBwcmUtdHJhbnNpdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGZyb21QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYGZyb21TdGF0ZWAuXG4gICAgICAgICAqL1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlU3VjY2VzcycsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKHRydWUpO1xuXG4gICAgICAgIHJldHVybiAkc3RhdGUuY3VycmVudDtcbiAgICAgIH0pLnRoZW4obnVsbCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIC8vIHByb3BhZ2F0ZSBUcmFuc2l0aW9uU3VwZXJzZWRlZCBlcnJvciB3aXRob3V0IGVtaXR0aW5nICRzdGF0ZUNoYW5nZUNhbmNlbFxuICAgICAgICAvLyBhcyBpdCB3YXMgYWxyZWFkeSBlbWl0dGVkIGluIHRoZSBzdWNjZXNzIGhhbmRsZXIgYWJvdmVcbiAgICAgICAgaWYgKGVycm9yID09PSBUcmFuc2l0aW9uU3VwZXJzZWRlZEVycm9yKSByZXR1cm4gVHJhbnNpdGlvblN1cGVyc2VkZWQ7XG5cbiAgICAgICAgaWYgKCRzdGF0ZS50cmFuc2l0aW9uICE9PSB0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VDYW5jZWwnLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zKTtcbiAgICAgICAgICByZXR1cm4gVHJhbnNpdGlvblN1cGVyc2VkZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAkc3RhdGUudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkc3RhdGVDaGFuZ2VFcnJvclxuICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEZpcmVkIHdoZW4gYW4gKiplcnJvciBvY2N1cnMqKiBkdXJpbmcgdHJhbnNpdGlvbi4gSXQncyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IGlmIHlvdVxuICAgICAgICAgKiBoYXZlIGFueSBlcnJvcnMgaW4geW91ciByZXNvbHZlIGZ1bmN0aW9ucyAoamF2YXNjcmlwdCBlcnJvcnMsIG5vbi1leGlzdGVudCBzZXJ2aWNlcywgZXRjKVxuICAgICAgICAgKiB0aGV5IHdpbGwgbm90IHRocm93IHRyYWRpdGlvbmFsbHkuIFlvdSBtdXN0IGxpc3RlbiBmb3IgdGhpcyAkc3RhdGVDaGFuZ2VFcnJvciBldmVudCB0b1xuICAgICAgICAgKiBjYXRjaCAqKkFMTCoqIGVycm9ycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gdG9TdGF0ZSBUaGUgc3RhdGUgYmVpbmcgdHJhbnNpdGlvbmVkIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdG9QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYHRvU3RhdGVgLlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUsIHByZS10cmFuc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgZnJvbVN0YXRlYC5cbiAgICAgICAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIHJlc29sdmUgZXJyb3Igb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZXZ0ID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VFcnJvcicsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMsIGVycm9yKTtcblxuICAgICAgICBpZiAoIWV2dC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgJHVybFJvdXRlci51cGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZSh0cmFuc2l0aW9uKTtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2lzXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNpbWlsYXIgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19pbmNsdWRlcyAkc3RhdGUuaW5jbHVkZXN9LFxuICAgICAqIGJ1dCBvbmx5IGNoZWNrcyBmb3IgdGhlIGZ1bGwgc3RhdGUgbmFtZS4gSWYgcGFyYW1zIGlzIHN1cHBsaWVkIHRoZW4gaXQgd2lsbCBiZVxuICAgICAqIHRlc3RlZCBmb3Igc3RyaWN0IGVxdWFsaXR5IGFnYWluc3QgdGhlIGN1cnJlbnQgYWN0aXZlIHBhcmFtcyBvYmplY3QsIHNvIGFsbCBwYXJhbXNcbiAgICAgKiBtdXN0IG1hdGNoIHdpdGggbm9uZSBtaXNzaW5nIGFuZCBubyBleHRyYXMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIDxwcmU+XG4gICAgICogJHN0YXRlLiRjdXJyZW50Lm5hbWUgPSAnY29udGFjdHMuZGV0YWlscy5pdGVtJztcbiAgICAgKlxuICAgICAqIC8vIGFic29sdXRlIG5hbWVcbiAgICAgKiAkc3RhdGUuaXMoJ2NvbnRhY3QuZGV0YWlscy5pdGVtJyk7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pcyhjb250YWN0RGV0YWlsSXRlbVN0YXRlT2JqZWN0KTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICpcbiAgICAgKiAvLyByZWxhdGl2ZSBuYW1lICguIGFuZCBeKSwgdHlwaWNhbGx5IGZyb20gYSB0ZW1wbGF0ZVxuICAgICAqIC8vIEUuZy4gZnJvbSB0aGUgJ2NvbnRhY3RzLmRldGFpbHMnIHRlbXBsYXRlXG4gICAgICogPGRpdiBuZy1jbGFzcz1cIntoaWdobGlnaHRlZDogJHN0YXRlLmlzKCcuaXRlbScpfVwiPkl0ZW08L2Rpdj5cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc3RhdGVPck5hbWUgVGhlIHN0YXRlIG5hbWUgKGFic29sdXRlIG9yIHJlbGF0aXZlKSBvciBzdGF0ZSBvYmplY3QgeW91J2QgbGlrZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IHBhcmFtcyBBIHBhcmFtIG9iamVjdCwgZS5nLiBge3NlY3Rpb25JZDogc2VjdGlvbi5pZH1gLCB0aGF0IHlvdSdkIGxpa2VcbiAgICAgKiB0byB0ZXN0IGFnYWluc3QgdGhlIGN1cnJlbnQgYWN0aXZlIHN0YXRlLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBBbiBvcHRpb25zIG9iamVjdC4gIFRoZSBvcHRpb25zIGFyZTpcbiAgICAgKlxuICAgICAqIC0gKipgcmVsYXRpdmVgKiogLSB7c3RyaW5nfG9iamVjdH0gLSAgSWYgYHN0YXRlT3JOYW1lYCBpcyBhIHJlbGF0aXZlIHN0YXRlIG5hbWUgYW5kIGBvcHRpb25zLnJlbGF0aXZlYCBpcyBzZXQsIC5pcyB3aWxsXG4gICAgICogdGVzdCByZWxhdGl2ZSB0byBgb3B0aW9ucy5yZWxhdGl2ZWAgc3RhdGUgKG9yIG5hbWUpLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBpdCBpcyB0aGUgc3RhdGUuXG4gICAgICovXG4gICAgJHN0YXRlLmlzID0gZnVuY3Rpb24gaXMoc3RhdGVPck5hbWUsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7IHJlbGF0aXZlOiAkc3RhdGUuJGN1cnJlbnQgfSwgb3B0aW9ucyB8fCB7fSk7XG4gICAgICB2YXIgc3RhdGUgPSBmaW5kU3RhdGUoc3RhdGVPck5hbWUsIG9wdGlvbnMucmVsYXRpdmUpO1xuXG4gICAgICBpZiAoIWlzRGVmaW5lZChzdGF0ZSkpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgICAgaWYgKCRzdGF0ZS4kY3VycmVudCAhPT0gc3RhdGUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgIHJldHVybiAhcGFyYW1zIHx8IG9iamVjdEtleXMocGFyYW1zKS5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHBhcmFtRGVmID0gc3RhdGUucGFyYW1zW2tleV07XG4gICAgICAgIHJldHVybiBhY2MgJiYgIXBhcmFtRGVmIHx8IHBhcmFtRGVmLnR5cGUuZXF1YWxzKCRzdGF0ZVBhcmFtc1trZXldLCBwYXJhbXNba2V5XSk7XG4gICAgICB9LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNpbmNsdWRlc1xuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIG1ldGhvZCB0byBkZXRlcm1pbmUgaWYgdGhlIGN1cnJlbnQgYWN0aXZlIHN0YXRlIGlzIGVxdWFsIHRvIG9yIGlzIHRoZSBjaGlsZCBvZiB0aGVcbiAgICAgKiBzdGF0ZSBzdGF0ZU5hbWUuIElmIGFueSBwYXJhbXMgYXJlIHBhc3NlZCB0aGVuIHRoZXkgd2lsbCBiZSB0ZXN0ZWQgZm9yIGEgbWF0Y2ggYXMgd2VsbC5cbiAgICAgKiBOb3QgYWxsIHRoZSBwYXJhbWV0ZXJzIG5lZWQgdG8gYmUgcGFzc2VkLCBqdXN0IHRoZSBvbmVzIHlvdSdkIGxpa2UgdG8gdGVzdCBmb3IgZXF1YWxpdHkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIFBhcnRpYWwgYW5kIHJlbGF0aXZlIG5hbWVzXG4gICAgICogPHByZT5cbiAgICAgKiAkc3RhdGUuJGN1cnJlbnQubmFtZSA9ICdjb250YWN0cy5kZXRhaWxzLml0ZW0nO1xuICAgICAqXG4gICAgICogLy8gVXNpbmcgcGFydGlhbCBuYW1lc1xuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcImNvbnRhY3RzXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJjb250YWN0cy5kZXRhaWxzXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJjb250YWN0cy5kZXRhaWxzLml0ZW1cIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcImNvbnRhY3RzLmxpc3RcIik7IC8vIHJldHVybnMgZmFsc2VcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJhYm91dFwiKTsgLy8gcmV0dXJucyBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVXNpbmcgcmVsYXRpdmUgbmFtZXMgKC4gYW5kIF4pLCB0eXBpY2FsbHkgZnJvbSBhIHRlbXBsYXRlXG4gICAgICogLy8gRS5nLiBmcm9tIHRoZSAnY29udGFjdHMuZGV0YWlscycgdGVtcGxhdGVcbiAgICAgKiA8ZGl2IG5nLWNsYXNzPVwie2hpZ2hsaWdodGVkOiAkc3RhdGUuaW5jbHVkZXMoJy5pdGVtJyl9XCI+SXRlbTwvZGl2PlxuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQmFzaWMgZ2xvYmJpbmcgcGF0dGVybnNcbiAgICAgKiA8cHJlPlxuICAgICAqICRzdGF0ZS4kY3VycmVudC5uYW1lID0gJ2NvbnRhY3RzLmRldGFpbHMuaXRlbS51cmwnO1xuICAgICAqXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKi5kZXRhaWxzLiouKlwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKi5kZXRhaWxzLioqXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCIqKi5pdGVtLioqXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCIqLmRldGFpbHMuaXRlbS51cmxcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy4qLnVybFwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKi5kZXRhaWxzLipcIik7IC8vIHJldHVybnMgZmFsc2VcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJpdGVtLioqXCIpOyAvLyByZXR1cm5zIGZhbHNlXG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdGVPck5hbWUgQSBwYXJ0aWFsIG5hbWUsIHJlbGF0aXZlIG5hbWUsIG9yIGdsb2IgcGF0dGVyblxuICAgICAqIHRvIGJlIHNlYXJjaGVkIGZvciB3aXRoaW4gdGhlIGN1cnJlbnQgc3RhdGUgbmFtZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IHBhcmFtcyBBIHBhcmFtIG9iamVjdCwgZS5nLiBge3NlY3Rpb25JZDogc2VjdGlvbi5pZH1gLFxuICAgICAqIHRoYXQgeW91J2QgbGlrZSB0byB0ZXN0IGFnYWluc3QgdGhlIGN1cnJlbnQgYWN0aXZlIHN0YXRlLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBBbiBvcHRpb25zIG9iamVjdC4gIFRoZSBvcHRpb25zIGFyZTpcbiAgICAgKlxuICAgICAqIC0gKipgcmVsYXRpdmVgKiogLSB7c3RyaW5nfG9iamVjdD19IC0gIElmIGBzdGF0ZU9yTmFtZWAgaXMgYSByZWxhdGl2ZSBzdGF0ZSByZWZlcmVuY2UgYW5kIGBvcHRpb25zLnJlbGF0aXZlYCBpcyBzZXQsXG4gICAgICogLmluY2x1ZGVzIHdpbGwgdGVzdCByZWxhdGl2ZSB0byBgb3B0aW9ucy5yZWxhdGl2ZWAgc3RhdGUgKG9yIG5hbWUpLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBpdCBkb2VzIGluY2x1ZGUgdGhlIHN0YXRlXG4gICAgICovXG4gICAgJHN0YXRlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMoc3RhdGVPck5hbWUsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7IHJlbGF0aXZlOiAkc3RhdGUuJGN1cnJlbnQgfSwgb3B0aW9ucyB8fCB7fSk7XG4gICAgICBpZiAoaXNTdHJpbmcoc3RhdGVPck5hbWUpICYmIGlzR2xvYihzdGF0ZU9yTmFtZSkpIHtcbiAgICAgICAgaWYgKCFkb2VzU3RhdGVNYXRjaEdsb2Ioc3RhdGVPck5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlT3JOYW1lID0gJHN0YXRlLiRjdXJyZW50Lm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IGZpbmRTdGF0ZShzdGF0ZU9yTmFtZSwgb3B0aW9ucy5yZWxhdGl2ZSk7XG4gICAgICBpZiAoIWlzRGVmaW5lZChzdGF0ZSkpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgICAgaWYgKCFpc0RlZmluZWQoJHN0YXRlLiRjdXJyZW50LmluY2x1ZGVzW3N0YXRlLm5hbWVdKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIGlmICghcGFyYW1zKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwYXJhbXMpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldLCBwYXJhbURlZiA9IHN0YXRlLnBhcmFtc1trZXldO1xuICAgICAgICBpZiAocGFyYW1EZWYgJiYgIXBhcmFtRGVmLnR5cGUuZXF1YWxzKCRzdGF0ZVBhcmFtc1trZXldLCBwYXJhbXNba2V5XSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdEtleXMocGFyYW1zKS5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHBhcmFtRGVmID0gc3RhdGUucGFyYW1zW2tleV07XG4gICAgICAgIHJldHVybiBhY2MgJiYgIXBhcmFtRGVmIHx8IHBhcmFtRGVmLnR5cGUuZXF1YWxzKCRzdGF0ZVBhcmFtc1trZXldLCBwYXJhbXNba2V5XSk7XG4gICAgICB9LCB0cnVlKTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2hyZWZcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSB1cmwgZ2VuZXJhdGlvbiBtZXRob2QgdGhhdCByZXR1cm5zIHRoZSBjb21waWxlZCB1cmwgZm9yIHRoZSBnaXZlbiBzdGF0ZSBwb3B1bGF0ZWQgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1zLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIGV4cGVjdCgkc3RhdGUuaHJlZihcImFib3V0LnBlcnNvblwiLCB7IHBlcnNvbjogXCJib2JcIiB9KSkudG9FcXVhbChcIi9hYm91dC9ib2JcIik7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHN0YXRlT3JOYW1lIFRoZSBzdGF0ZSBuYW1lIG9yIHN0YXRlIG9iamVjdCB5b3UnZCBsaWtlIHRvIGdlbmVyYXRlIGEgdXJsIGZyb20uXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQW4gb2JqZWN0IG9mIHBhcmFtZXRlciB2YWx1ZXMgdG8gZmlsbCB0aGUgc3RhdGUncyByZXF1aXJlZCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmBsb3NzeWAqKiAtIHtib29sZWFuPXRydWV9IC0gIElmIHRydWUsIGFuZCBpZiB0aGVyZSBpcyBubyB1cmwgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdGF0ZSBwcm92aWRlZCBpbiB0aGVcbiAgICAgKiAgICBmaXJzdCBwYXJhbWV0ZXIsIHRoZW4gdGhlIGNvbnN0cnVjdGVkIGhyZWYgdXJsIHdpbGwgYmUgYnVpbHQgZnJvbSB0aGUgZmlyc3QgbmF2aWdhYmxlIGFuY2VzdG9yIChha2FcbiAgICAgKiAgICBhbmNlc3RvciB3aXRoIGEgdmFsaWQgdXJsKS5cbiAgICAgKiAtICoqYGluaGVyaXRgKiogLSB7Ym9vbGVhbj10cnVlfSwgSWYgYHRydWVgIHdpbGwgaW5oZXJpdCB1cmwgcGFyYW1ldGVycyBmcm9tIGN1cnJlbnQgdXJsLlxuICAgICAqIC0gKipgcmVsYXRpdmVgKiogLSB7b2JqZWN0PSRzdGF0ZS4kY3VycmVudH0sIFdoZW4gdHJhbnNpdGlvbmluZyB3aXRoIHJlbGF0aXZlIHBhdGggKGUuZyAnXicpLCBcbiAgICAgKiAgICBkZWZpbmVzIHdoaWNoIHN0YXRlIHRvIGJlIHJlbGF0aXZlIGZyb20uXG4gICAgICogLSAqKmBhYnNvbHV0ZWAqKiAtIHtib29sZWFuPWZhbHNlfSwgIElmIHRydWUgd2lsbCBnZW5lcmF0ZSBhbiBhYnNvbHV0ZSB1cmwsIGUuZy4gXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL2Z1bGx1cmxcIi5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBjb21waWxlZCBzdGF0ZSB1cmxcbiAgICAgKi9cbiAgICAkc3RhdGUuaHJlZiA9IGZ1bmN0aW9uIGhyZWYoc3RhdGVPck5hbWUsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7XG4gICAgICAgIGxvc3N5OiAgICB0cnVlLFxuICAgICAgICBpbmhlcml0OiAgdHJ1ZSxcbiAgICAgICAgYWJzb2x1dGU6IGZhbHNlLFxuICAgICAgICByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50XG4gICAgICB9LCBvcHRpb25zIHx8IHt9KTtcblxuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBvcHRpb25zLnJlbGF0aXZlKTtcblxuICAgICAgaWYgKCFpc0RlZmluZWQoc3RhdGUpKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChvcHRpb25zLmluaGVyaXQpIHBhcmFtcyA9IGluaGVyaXRQYXJhbXMoJHN0YXRlUGFyYW1zLCBwYXJhbXMgfHwge30sICRzdGF0ZS4kY3VycmVudCwgc3RhdGUpO1xuICAgICAgXG4gICAgICB2YXIgbmF2ID0gKHN0YXRlICYmIG9wdGlvbnMubG9zc3kpID8gc3RhdGUubmF2aWdhYmxlIDogc3RhdGU7XG5cbiAgICAgIGlmICghbmF2IHx8IG5hdi51cmwgPT09IHVuZGVmaW5lZCB8fCBuYXYudXJsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuICR1cmxSb3V0ZXIuaHJlZihuYXYudXJsLCBmaWx0ZXJCeUtleXMoc3RhdGUucGFyYW1zLiQka2V5cygpLmNvbmNhdCgnIycpLCBwYXJhbXMgfHwge30pLCB7XG4gICAgICAgIGFic29sdXRlOiBvcHRpb25zLmFic29sdXRlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNnZXRcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyB0aGUgc3RhdGUgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGFueSBzcGVjaWZpYyBzdGF0ZSBvciBhbGwgc3RhdGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0PX0gc3RhdGVPck5hbWUgKGFic29sdXRlIG9yIHJlbGF0aXZlKSBJZiBwcm92aWRlZCwgd2lsbCBvbmx5IGdldCB0aGUgY29uZmlnIGZvclxuICAgICAqIHRoZSByZXF1ZXN0ZWQgc3RhdGUuIElmIG5vdCBwcm92aWRlZCwgcmV0dXJucyBhbiBhcnJheSBvZiBBTEwgc3RhdGUgY29uZmlncy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3Q9fSBjb250ZXh0IFdoZW4gc3RhdGVPck5hbWUgaXMgYSByZWxhdGl2ZSBzdGF0ZSByZWZlcmVuY2UsIHRoZSBzdGF0ZSB3aWxsIGJlIHJldHJpZXZlZCByZWxhdGl2ZSB0byBjb250ZXh0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFN0YXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IG9yIGFycmF5IG9mIGFsbCBvYmplY3RzLlxuICAgICAqL1xuICAgICRzdGF0ZS5nZXQgPSBmdW5jdGlvbiAoc3RhdGVPck5hbWUsIGNvbnRleHQpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gbWFwKG9iamVjdEtleXMoc3RhdGVzKSwgZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gc3RhdGVzW25hbWVdLnNlbGY7IH0pO1xuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBjb250ZXh0IHx8ICRzdGF0ZS4kY3VycmVudCk7XG4gICAgICByZXR1cm4gKHN0YXRlICYmIHN0YXRlLnNlbGYpID8gc3RhdGUuc2VsZiA6IG51bGw7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVTdGF0ZShzdGF0ZSwgcGFyYW1zLCBwYXJhbXNBcmVGaWx0ZXJlZCwgaW5oZXJpdGVkLCBkc3QsIG9wdGlvbnMpIHtcbiAgICAgIC8vIE1ha2UgYSByZXN0cmljdGVkICRzdGF0ZVBhcmFtcyB3aXRoIG9ubHkgdGhlIHBhcmFtZXRlcnMgdGhhdCBhcHBseSB0byB0aGlzIHN0YXRlIGlmXG4gICAgICAvLyBuZWNlc3NhcnkuIEluIGFkZGl0aW9uIHRvIGJlaW5nIGF2YWlsYWJsZSB0byB0aGUgY29udHJvbGxlciBhbmQgb25FbnRlci9vbkV4aXQgY2FsbGJhY2tzLFxuICAgICAgLy8gd2UgYWxzbyBuZWVkICRzdGF0ZVBhcmFtcyB0byBiZSBhdmFpbGFibGUgZm9yIGFueSAkaW5qZWN0b3IgY2FsbHMgd2UgbWFrZSBkdXJpbmcgdGhlXG4gICAgICAvLyBkZXBlbmRlbmN5IHJlc29sdXRpb24gcHJvY2Vzcy5cbiAgICAgIHZhciAkc3RhdGVQYXJhbXMgPSAocGFyYW1zQXJlRmlsdGVyZWQpID8gcGFyYW1zIDogZmlsdGVyQnlLZXlzKHN0YXRlLnBhcmFtcy4kJGtleXMoKSwgcGFyYW1zKTtcbiAgICAgIHZhciBsb2NhbHMgPSB7ICRzdGF0ZVBhcmFtczogJHN0YXRlUGFyYW1zIH07XG5cbiAgICAgIC8vIFJlc29sdmUgJ2dsb2JhbCcgZGVwZW5kZW5jaWVzIGZvciB0aGUgc3RhdGUsIGkuZS4gdGhvc2Ugbm90IHNwZWNpZmljIHRvIGEgdmlldy5cbiAgICAgIC8vIFdlJ3JlIGFsc28gaW5jbHVkaW5nICRzdGF0ZVBhcmFtcyBpbiB0aGlzOyB0aGF0IHdheSB0aGUgcGFyYW1ldGVycyBhcmUgcmVzdHJpY3RlZFxuICAgICAgLy8gdG8gdGhlIHNldCB0aGF0IHNob3VsZCBiZSB2aXNpYmxlIHRvIHRoZSBzdGF0ZSwgYW5kIGFyZSBpbmRlcGVuZGVudCBvZiB3aGVuIHdlIHVwZGF0ZVxuICAgICAgLy8gdGhlIGdsb2JhbCAkc3RhdGUgYW5kICRzdGF0ZVBhcmFtcyB2YWx1ZXMuXG4gICAgICBkc3QucmVzb2x2ZSA9ICRyZXNvbHZlLnJlc29sdmUoc3RhdGUucmVzb2x2ZSwgbG9jYWxzLCBkc3QucmVzb2x2ZSwgc3RhdGUpO1xuICAgICAgdmFyIHByb21pc2VzID0gW2RzdC5yZXNvbHZlLnRoZW4oZnVuY3Rpb24gKGdsb2JhbHMpIHtcbiAgICAgICAgZHN0Lmdsb2JhbHMgPSBnbG9iYWxzO1xuICAgICAgfSldO1xuICAgICAgaWYgKGluaGVyaXRlZCkgcHJvbWlzZXMucHVzaChpbmhlcml0ZWQpO1xuXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVmlld3MoKSB7XG4gICAgICAgIHZhciB2aWV3c1Byb21pc2VzID0gW107XG5cbiAgICAgICAgLy8gUmVzb2x2ZSB0ZW1wbGF0ZSBhbmQgZGVwZW5kZW5jaWVzIGZvciBhbGwgdmlld3MuXG4gICAgICAgIGZvckVhY2goc3RhdGUudmlld3MsIGZ1bmN0aW9uICh2aWV3LCBuYW1lKSB7XG4gICAgICAgICAgdmFyIGluamVjdGFibGVzID0gKHZpZXcucmVzb2x2ZSAmJiB2aWV3LnJlc29sdmUgIT09IHN0YXRlLnJlc29sdmUgPyB2aWV3LnJlc29sdmUgOiB7fSk7XG4gICAgICAgICAgaW5qZWN0YWJsZXMuJHRlbXBsYXRlID0gWyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJHZpZXcubG9hZChuYW1lLCB7IHZpZXc6IHZpZXcsIGxvY2FsczogZHN0Lmdsb2JhbHMsIHBhcmFtczogJHN0YXRlUGFyYW1zLCBub3RpZnk6IG9wdGlvbnMubm90aWZ5IH0pIHx8ICcnO1xuICAgICAgICAgIH1dO1xuXG4gICAgICAgICAgdmlld3NQcm9taXNlcy5wdXNoKCRyZXNvbHZlLnJlc29sdmUoaW5qZWN0YWJsZXMsIGRzdC5nbG9iYWxzLCBkc3QucmVzb2x2ZSwgc3RhdGUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgLy8gUmVmZXJlbmNlcyB0byB0aGUgY29udHJvbGxlciAob25seSBpbnN0YW50aWF0ZWQgYXQgbGluayB0aW1lKVxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmlldy5jb250cm9sbGVyUHJvdmlkZXIpIHx8IGlzQXJyYXkodmlldy5jb250cm9sbGVyUHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgIHZhciBpbmplY3RMb2NhbHMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgaW5qZWN0YWJsZXMsIGRzdC5nbG9iYWxzKTtcbiAgICAgICAgICAgICAgcmVzdWx0LiQkY29udHJvbGxlciA9ICRpbmplY3Rvci5pbnZva2Uodmlldy5jb250cm9sbGVyUHJvdmlkZXIsIG51bGwsIGluamVjdExvY2Fscyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQuJCRjb250cm9sbGVyID0gdmlldy5jb250cm9sbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvdmlkZSBhY2Nlc3MgdG8gdGhlIHN0YXRlIGl0c2VsZiBmb3IgaW50ZXJuYWwgdXNlXG4gICAgICAgICAgICByZXN1bHQuJCRzdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgcmVzdWx0LiQkY29udHJvbGxlckFzID0gdmlldy5jb250cm9sbGVyQXM7XG4gICAgICAgICAgICByZXN1bHQuJCRyZXNvbHZlQXMgPSB2aWV3LnJlc29sdmVBcztcbiAgICAgICAgICAgIGRzdFtuYW1lXSA9IHJlc3VsdDtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAkcS5hbGwodmlld3NQcm9taXNlcykudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgIHJldHVybiBkc3QuZ2xvYmFscztcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdhaXQgZm9yIGFsbCB0aGUgcHJvbWlzZXMgYW5kIHRoZW4gcmV0dXJuIHRoZSBhY3RpdmF0aW9uIG9iamVjdFxuICAgICAgcmV0dXJuICRxLmFsbChwcm9taXNlcykudGhlbihyZXNvbHZlVmlld3MpLnRoZW4oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gZHN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICRzdGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZFNraXBSZWxvYWQodG8sIHRvUGFyYW1zLCBmcm9tLCBmcm9tUGFyYW1zLCBsb2NhbHMsIG9wdGlvbnMpIHtcbiAgICAvLyBSZXR1cm4gdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gZGlmZmVyZW5jZXMgaW4gbm9uLXNlYXJjaCAocGF0aC9vYmplY3QpIHBhcmFtcywgZmFsc2UgaWYgdGhlcmUgYXJlIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gbm9uU2VhcmNoUGFyYW1zRXF1YWwoZnJvbUFuZFRvU3RhdGUsIGZyb21QYXJhbXMsIHRvUGFyYW1zKSB7XG4gICAgICAvLyBJZGVudGlmeSB3aGV0aGVyIGFsbCB0aGUgcGFyYW1ldGVycyB0aGF0IGRpZmZlciBiZXR3ZWVuIGBmcm9tUGFyYW1zYCBhbmQgYHRvUGFyYW1zYCB3ZXJlIHNlYXJjaCBwYXJhbXMuXG4gICAgICBmdW5jdGlvbiBub3RTZWFyY2hQYXJhbShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BbmRUb1N0YXRlLnBhcmFtc1trZXldLmxvY2F0aW9uICE9IFwic2VhcmNoXCI7XG4gICAgICB9XG4gICAgICB2YXIgbm9uUXVlcnlQYXJhbUtleXMgPSBmcm9tQW5kVG9TdGF0ZS5wYXJhbXMuJCRrZXlzKCkuZmlsdGVyKG5vdFNlYXJjaFBhcmFtKTtcbiAgICAgIHZhciBub25RdWVyeVBhcmFtcyA9IHBpY2suYXBwbHkoe30sIFtmcm9tQW5kVG9TdGF0ZS5wYXJhbXNdLmNvbmNhdChub25RdWVyeVBhcmFtS2V5cykpO1xuICAgICAgdmFyIG5vblF1ZXJ5UGFyYW1TZXQgPSBuZXcgJCRVTUZQLlBhcmFtU2V0KG5vblF1ZXJ5UGFyYW1zKTtcbiAgICAgIHJldHVybiBub25RdWVyeVBhcmFtU2V0LiQkZXF1YWxzKGZyb21QYXJhbXMsIHRvUGFyYW1zKTtcbiAgICB9XG5cbiAgICAvLyBJZiByZWxvYWQgd2FzIG5vdCBleHBsaWNpdGx5IHJlcXVlc3RlZFxuICAgIC8vIGFuZCB3ZSdyZSB0cmFuc2l0aW9uaW5nIHRvIHRoZSBzYW1lIHN0YXRlIHdlJ3JlIGFscmVhZHkgaW5cbiAgICAvLyBhbmQgICAgdGhlIGxvY2FscyBkaWRuJ3QgY2hhbmdlXG4gICAgLy8gICAgIG9yIHRoZXkgY2hhbmdlZCBpbiBhIHdheSB0aGF0IGRvZXNuJ3QgbWVyaXQgcmVsb2FkaW5nXG4gICAgLy8gICAgICAgIChyZWxvYWRPblBhcmFtczpmYWxzZSwgb3IgcmVsb2FkT25TZWFyY2guZmFsc2UgYW5kIG9ubHkgc2VhcmNoIHBhcmFtcyBjaGFuZ2VkKVxuICAgIC8vIFRoZW4gcmV0dXJuIHRydWUuXG4gICAgaWYgKCFvcHRpb25zLnJlbG9hZCAmJiB0byA9PT0gZnJvbSAmJlxuICAgICAgKGxvY2FscyA9PT0gZnJvbS5sb2NhbHMgfHwgKHRvLnNlbGYucmVsb2FkT25TZWFyY2ggPT09IGZhbHNlICYmIG5vblNlYXJjaFBhcmFtc0VxdWFsKGZyb20sIGZyb21QYXJhbXMsIHRvUGFyYW1zKSkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpXG4gIC5mYWN0b3J5KCckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbiAoKSB7IHJldHVybiB7fTsgfSlcbiAgLmNvbnN0YW50KFwiJHN0YXRlLnJ1bnRpbWVcIiwgeyBhdXRvaW5qZWN0OiB0cnVlIH0pXG4gIC5wcm92aWRlcignJHN0YXRlJywgJFN0YXRlUHJvdmlkZXIpXG4gIC8vIEluamVjdCAkc3RhdGUgdG8gaW5pdGlhbGl6ZSB3aGVuIGVudGVyaW5nIHJ1bnRpbWUuICMyNTc0XG4gIC5ydW4oWyckaW5qZWN0b3InLCBmdW5jdGlvbiAoJGluamVjdG9yKSB7XG4gICAgLy8gQWxsb3cgdGVzdHMgKHN0YXRlU3BlYy5qcykgdG8gdHVybiB0aGlzIG9mZiBieSBkZWZpbmluZyB0aGlzIGNvbnN0YW50XG4gICAgaWYgKCRpbmplY3Rvci5nZXQoXCIkc3RhdGUucnVudGltZVwiKS5hdXRvaW5qZWN0KSB7XG4gICAgICAkaW5qZWN0b3IuZ2V0KCckc3RhdGUnKTtcbiAgICB9XG4gIH1dKTtcblxuXG4kVmlld1Byb3ZpZGVyLiRpbmplY3QgPSBbXTtcbmZ1bmN0aW9uICRWaWV3UHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gJGdldDtcbiAgLyoqXG4gICAqIEBuZ2RvYyBvYmplY3RcbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR2aWV3XG4gICAqXG4gICAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKi9cbiAgJGdldC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyR0ZW1wbGF0ZUZhY3RvcnknXTtcbiAgZnVuY3Rpb24gJGdldCggICAkcm9vdFNjb3BlLCAgICR0ZW1wbGF0ZUZhY3RvcnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gJHZpZXcubG9hZCgnZnVsbC52aWV3TmFtZScsIHsgdGVtcGxhdGU6IC4uLiwgY29udHJvbGxlcjogLi4uLCByZXNvbHZlOiAuLi4sIGFzeW5jOiBmYWxzZSwgcGFyYW1zOiAuLi4gfSlcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHZpZXcjbG9hZFxuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kdmlld1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWVcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIG9wdGlvbiBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgIGxvYWQ6IGZ1bmN0aW9uIGxvYWQobmFtZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgcmVzdWx0LCBkZWZhdWx0cyA9IHtcbiAgICAgICAgICB0ZW1wbGF0ZTogbnVsbCwgY29udHJvbGxlcjogbnVsbCwgdmlldzogbnVsbCwgbG9jYWxzOiBudWxsLCBub3RpZnk6IHRydWUsIGFzeW5jOiB0cnVlLCBwYXJhbXM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnZpZXcpIHtcbiAgICAgICAgICByZXN1bHQgPSAkdGVtcGxhdGVGYWN0b3J5LmZyb21Db25maWcob3B0aW9ucy52aWV3LCBvcHRpb25zLnBhcmFtcywgb3B0aW9ucy5sb2NhbHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJykucHJvdmlkZXIoJyR2aWV3JywgJFZpZXdQcm92aWRlcik7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUHJvdmlkZXIgdGhhdCByZXR1cm5zIHRoZSB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGx9IHNlcnZpY2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uICRWaWV3U2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIHVzZUFuY2hvclNjcm9sbCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxQcm92aWRlciN1c2VBbmNob3JTY3JvbGxcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldmVydHMgYmFjayB0byB1c2luZyB0aGUgY29yZSBbYCRhbmNob3JTY3JvbGxgXShodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kYW5jaG9yU2Nyb2xsKSBzZXJ2aWNlIGZvclxuICAgKiBzY3JvbGxpbmcgYmFzZWQgb24gdGhlIHVybCBhbmNob3IuXG4gICAqL1xuICB0aGlzLnVzZUFuY2hvclNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB1c2VBbmNob3JTY3JvbGwgPSB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsXG4gICAqXG4gICAqIEByZXF1aXJlcyAkYW5jaG9yU2Nyb2xsXG4gICAqIEByZXF1aXJlcyAkdGltZW91dFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogV2hlbiBjYWxsZWQgd2l0aCBhIGpxTGl0ZSBlbGVtZW50LCBpdCBzY3JvbGxzIHRoZSBlbGVtZW50IGludG8gdmlldyAoYWZ0ZXIgYVxuICAgKiBgJHRpbWVvdXRgIHNvIHRoZSBET00gaGFzIHRpbWUgdG8gcmVmcmVzaCkuXG4gICAqXG4gICAqIElmIHlvdSBwcmVmZXIgdG8gcmVseSBvbiBgJGFuY2hvclNjcm9sbGAgdG8gc2Nyb2xsIHRoZSB2aWV3IHRvIHRoZSBhbmNob3IsXG4gICAqIHRoaXMgY2FuIGJlIGVuYWJsZWQgYnkgY2FsbGluZyB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxQcm92aWRlciNtZXRob2RzX3VzZUFuY2hvclNjcm9sbCBgJHVpVmlld1Njcm9sbFByb3ZpZGVyLnVzZUFuY2hvclNjcm9sbCgpYH0uXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyRhbmNob3JTY3JvbGwnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJGFuY2hvclNjcm9sbCwgJHRpbWVvdXQpIHtcbiAgICBpZiAodXNlQW5jaG9yU2Nyb2xsKSB7XG4gICAgICByZXR1cm4gJGFuY2hvclNjcm9sbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgICByZXR1cm4gJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkZWxlbWVudFswXS5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgfSwgMCwgZmFsc2UpO1xuICAgIH07XG4gIH1dO1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJykucHJvdmlkZXIoJyR1aVZpZXdTY3JvbGwnLCAkVmlld1Njcm9sbFByb3ZpZGVyKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXZpZXdcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICogQHJlcXVpcmVzICRjb21waWxlXG4gKiBAcmVxdWlyZXMgJGNvbnRyb2xsZXJcbiAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbFxuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICpcbiAqIEByZXN0cmljdCBFQ0FcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSB1aS12aWV3IGRpcmVjdGl2ZSB0ZWxscyAkc3RhdGUgd2hlcmUgdG8gcGxhY2UgeW91ciB0ZW1wbGF0ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIEEgdmlldyBuYW1lLiBUaGUgbmFtZSBzaG91bGQgYmUgdW5pcXVlIGFtb25nc3QgdGhlIG90aGVyIHZpZXdzIGluIHRoZVxuICogc2FtZSBzdGF0ZS4gWW91IGNhbiBoYXZlIHZpZXdzIG9mIHRoZSBzYW1lIG5hbWUgdGhhdCBsaXZlIGluIGRpZmZlcmVudCBzdGF0ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBhdXRvc2Nyb2xsIEl0IGFsbG93cyB5b3UgdG8gc2V0IHRoZSBzY3JvbGwgYmVoYXZpb3Igb2YgdGhlIGJyb3dzZXIgd2luZG93XG4gKiB3aGVuIGEgdmlldyBpcyBwb3B1bGF0ZWQuIEJ5IGRlZmF1bHQsICRhbmNob3JTY3JvbGwgaXMgb3ZlcnJpZGRlbiBieSB1aS1yb3V0ZXIncyBjdXN0b20gc2Nyb2xsXG4gKiBzZXJ2aWNlLCB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGx9LiBUaGlzIGN1c3RvbSBzZXJ2aWNlIGxldCdzIHlvdVxuICogc2Nyb2xsIHVpLXZpZXcgZWxlbWVudHMgaW50byB2aWV3IHdoZW4gdGhleSBhcmUgcG9wdWxhdGVkIGR1cmluZyBhIHN0YXRlIGFjdGl2YXRpb24uXG4gKlxuICogKk5vdGU6IFRvIHJldmVydCBiYWNrIHRvIG9sZCBbYCRhbmNob3JTY3JvbGxgXShodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kYW5jaG9yU2Nyb2xsKVxuICogZnVuY3Rpb25hbGl0eSwgY2FsbCBgJHVpVmlld1Njcm9sbFByb3ZpZGVyLnVzZUFuY2hvclNjcm9sbCgpYC4qXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBvbmxvYWQgRXhwcmVzc2lvbiB0byBldmFsdWF0ZSB3aGVuZXZlciB0aGUgdmlldyB1cGRhdGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBBIHZpZXcgY2FuIGJlIHVubmFtZWQgb3IgbmFtZWQuXG4gKiA8cHJlPlxuICogPCEtLSBVbm5hbWVkIC0tPlxuICogPGRpdiB1aS12aWV3PjwvZGl2PlxuICpcbiAqIDwhLS0gTmFtZWQgLS0+XG4gKiA8ZGl2IHVpLXZpZXc9XCJ2aWV3TmFtZVwiPjwvZGl2PlxuICogPC9wcmU+XG4gKlxuICogWW91IGNhbiBvbmx5IGhhdmUgb25lIHVubmFtZWQgdmlldyB3aXRoaW4gYW55IHRlbXBsYXRlIChvciByb290IGh0bWwpLiBJZiB5b3UgYXJlIG9ubHkgdXNpbmcgYVxuICogc2luZ2xlIHZpZXcgYW5kIGl0IGlzIHVubmFtZWQgdGhlbiB5b3UgY2FuIHBvcHVsYXRlIGl0IGxpa2Ugc286XG4gKiA8cHJlPlxuICogPGRpdiB1aS12aWV3PjwvZGl2PlxuICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lXCIsIHtcbiAqICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqIH0pXG4gKiA8L3ByZT5cbiAqXG4gKiBUaGUgYWJvdmUgaXMgYSBjb252ZW5pZW50IHNob3J0Y3V0IGVxdWl2YWxlbnQgdG8gc3BlY2lmeWluZyB5b3VyIHZpZXcgZXhwbGljaXRseSB3aXRoIHRoZSB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyI21ldGhvZHNfc3RhdGUgYHZpZXdzYH1cbiAqIGNvbmZpZyBwcm9wZXJ0eSwgYnkgbmFtZSwgaW4gdGhpcyBjYXNlIGFuIGVtcHR5IG5hbWU6XG4gKiA8cHJlPlxuICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lXCIsIHtcbiAqICAgdmlld3M6IHtcbiAqICAgICBcIlwiOiB7XG4gKiAgICAgICB0ZW1wbGF0ZTogXCI8aDE+SEVMTE8hPC9oMT5cIlxuICogICAgIH1cbiAqICAgfSAgICBcbiAqIH0pXG4gKiA8L3ByZT5cbiAqXG4gKiBCdXQgdHlwaWNhbGx5IHlvdSdsbCBvbmx5IHVzZSB0aGUgdmlld3MgcHJvcGVydHkgaWYgeW91IG5hbWUgeW91ciB2aWV3IG9yIGhhdmUgbW9yZSB0aGFuIG9uZSB2aWV3XG4gKiBpbiB0aGUgc2FtZSB0ZW1wbGF0ZS4gVGhlcmUncyBub3QgcmVhbGx5IGEgY29tcGVsbGluZyByZWFzb24gdG8gbmFtZSBhIHZpZXcgaWYgaXRzIHRoZSBvbmx5IG9uZSxcbiAqIGJ1dCB5b3UgY291bGQgaWYgeW91IHdhbnRlZCwgbGlrZSBzbzpcbiAqIDxwcmU+XG4gKiA8ZGl2IHVpLXZpZXc9XCJtYWluXCI+PC9kaXY+XG4gKiA8L3ByZT5cbiAqIDxwcmU+XG4gKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWVcIiwge1xuICogICB2aWV3czoge1xuICogICAgIFwibWFpblwiOiB7XG4gKiAgICAgICB0ZW1wbGF0ZTogXCI8aDE+SEVMTE8hPC9oMT5cIlxuICogICAgIH1cbiAqICAgfSAgICBcbiAqIH0pXG4gKiA8L3ByZT5cbiAqXG4gKiBSZWFsbHkgdGhvdWdoLCB5b3UnbGwgdXNlIHZpZXdzIHRvIHNldCB1cCBtdWx0aXBsZSB2aWV3czpcbiAqIDxwcmU+XG4gKiA8ZGl2IHVpLXZpZXc+PC9kaXY+XG4gKiA8ZGl2IHVpLXZpZXc9XCJjaGFydFwiPjwvZGl2PlxuICogPGRpdiB1aS12aWV3PVwiZGF0YVwiPjwvZGl2PlxuICogPC9wcmU+XG4gKlxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqICAgICB9LFxuICogICAgIFwiY2hhcnRcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGNoYXJ0X3RoaW5nLz5cIlxuICogICAgIH0sXG4gKiAgICAgXCJkYXRhXCI6IHtcbiAqICAgICAgIHRlbXBsYXRlOiBcIjxkYXRhX3RoaW5nLz5cIlxuICogICAgIH1cbiAqICAgfSAgICBcbiAqIH0pXG4gKiA8L3ByZT5cbiAqXG4gKiBFeGFtcGxlcyBmb3IgYGF1dG9zY3JvbGxgOlxuICpcbiAqIDxwcmU+XG4gKiA8IS0tIElmIGF1dG9zY3JvbGwgcHJlc2VudCB3aXRoIG5vIGV4cHJlc3Npb24sXG4gKiAgICAgIHRoZW4gc2Nyb2xsIHVpLXZpZXcgaW50byB2aWV3IC0tPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbC8+XG4gKlxuICogPCEtLSBJZiBhdXRvc2Nyb2xsIHByZXNlbnQgd2l0aCB2YWxpZCBleHByZXNzaW9uLFxuICogICAgICB0aGVuIHNjcm9sbCB1aS12aWV3IGludG8gdmlldyBpZiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlIC0tPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbD0ndHJ1ZScvPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbD0nZmFsc2UnLz5cbiAqIDx1aS12aWV3IGF1dG9zY3JvbGw9J3Njb3BlVmFyaWFibGUnLz5cbiAqIDwvcHJlPlxuICpcbiAqIFJlc29sdmUgZGF0YTpcbiAqXG4gKiBUaGUgcmVzb2x2ZWQgZGF0YSBmcm9tIHRoZSBzdGF0ZSdzIGByZXNvbHZlYCBibG9jayBpcyBwbGFjZWQgb24gdGhlIHNjb3BlIGFzIGAkcmVzb2x2ZWAgKHRoaXNcbiAqIGNhbiBiZSBjdXN0b21pemVkIHVzaW5nIFtbVmlld0RlY2xhcmF0aW9uLnJlc29sdmVBc11dKS4gIFRoaXMgY2FuIGJlIHRoZW4gYWNjZXNzZWQgZnJvbSB0aGUgdGVtcGxhdGUuXG4gKlxuICogTm90ZSB0aGF0IHdoZW4gYGNvbnRyb2xsZXJBc2AgaXMgYmVpbmcgdXNlZCwgYCRyZXNvbHZlYCBpcyBzZXQgb24gdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2UgKmFmdGVyKiB0aGVcbiAqIGNvbnRyb2xsZXIgaXMgaW5zdGFudGlhdGVkLiAgVGhlIGAkb25Jbml0KClgIGhvb2sgY2FuIGJlIHVzZWQgdG8gcGVyZm9ybSBpbml0aWFsaXphdGlvbiBjb2RlIHdoaWNoXG4gKiBkZXBlbmRzIG9uIGAkcmVzb2x2ZWAgZGF0YS5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlIG9mICRyZXNvbHZlIGluIGEgdmlldyB0ZW1wbGF0ZVxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdob21lJywge1xuICogICB0ZW1wbGF0ZTogJzxteS1jb21wb25lbnQgdXNlcj1cIiRyZXNvbHZlLnVzZXJcIj48L215LWNvbXBvbmVudD4nLFxuICogICByZXNvbHZlOiB7XG4gKiAgICAgdXNlcjogZnVuY3Rpb24oVXNlclNlcnZpY2UpIHsgcmV0dXJuIFVzZXJTZXJ2aWNlLmZldGNoVXNlcigpOyB9XG4gKiAgIH1cbiAqIH0pO1xuICogPC9wcmU+XG4gKi9cbiRWaWV3RGlyZWN0aXZlLiRpbmplY3QgPSBbJyRzdGF0ZScsICckaW5qZWN0b3InLCAnJHVpVmlld1Njcm9sbCcsICckaW50ZXJwb2xhdGUnLCAnJHEnXTtcbmZ1bmN0aW9uICRWaWV3RGlyZWN0aXZlKCAgICRzdGF0ZSwgICAkaW5qZWN0b3IsICAgJHVpVmlld1Njcm9sbCwgICAkaW50ZXJwb2xhdGUsICAgJHEpIHtcblxuICBmdW5jdGlvbiBnZXRTZXJ2aWNlKCkge1xuICAgIHJldHVybiAoJGluamVjdG9yLmhhcykgPyBmdW5jdGlvbihzZXJ2aWNlKSB7XG4gICAgICByZXR1cm4gJGluamVjdG9yLmhhcyhzZXJ2aWNlKSA/ICRpbmplY3Rvci5nZXQoc2VydmljZSkgOiBudWxsO1xuICAgIH0gOiBmdW5jdGlvbihzZXJ2aWNlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gJGluamVjdG9yLmdldChzZXJ2aWNlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBzZXJ2aWNlID0gZ2V0U2VydmljZSgpLFxuICAgICAgJGFuaW1hdG9yID0gc2VydmljZSgnJGFuaW1hdG9yJyksXG4gICAgICAkYW5pbWF0ZSA9IHNlcnZpY2UoJyRhbmltYXRlJyk7XG5cbiAgLy8gUmV0dXJucyBhIHNldCBvZiBET00gbWFuaXB1bGF0aW9uIGZ1bmN0aW9ucyBiYXNlZCBvbiB3aGljaCBBbmd1bGFyIHZlcnNpb25cbiAgLy8gaXQgc2hvdWxkIHVzZVxuICBmdW5jdGlvbiBnZXRSZW5kZXJlcihhdHRycywgc2NvcGUpIHtcbiAgICB2YXIgc3RhdGljcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChlbGVtZW50LCB0YXJnZXQsIGNiKSB7IHRhcmdldC5hZnRlcihlbGVtZW50KTsgY2IoKTsgfSxcbiAgICAgICAgbGVhdmU6IGZ1bmN0aW9uIChlbGVtZW50LCBjYikgeyBlbGVtZW50LnJlbW92ZSgpOyBjYigpOyB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBpZiAoJGFuaW1hdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCB0YXJnZXQsIGNiKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIudmVyc2lvbi5taW5vciA+IDIpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGVsZW1lbnQsIG51bGwsIHRhcmdldCkudGhlbihjYik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGVsZW1lbnQsIG51bGwsIHRhcmdldCwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGVhdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGNiKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIudmVyc2lvbi5taW5vciA+IDIpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGVsZW1lbnQpLnRoZW4oY2IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50LCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgkYW5pbWF0b3IpIHtcbiAgICAgIHZhciBhbmltYXRlID0gJGFuaW1hdG9yICYmICRhbmltYXRvcihzY29wZSwgYXR0cnMpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgdGFyZ2V0LCBjYikge2FuaW1hdGUuZW50ZXIoZWxlbWVudCwgbnVsbCwgdGFyZ2V0KTsgY2IoKTsgfSxcbiAgICAgICAgbGVhdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGNiKSB7IGFuaW1hdGUubGVhdmUoZWxlbWVudCk7IGNiKCk7IH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRpY3MoKTtcbiAgfVxuXG4gIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgcmVzdHJpY3Q6ICdFQ0EnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHByaW9yaXR5OiA0MDAsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uICh0RWxlbWVudCwgdEF0dHJzLCAkdHJhbnNjbHVkZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgJGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHZhciBwcmV2aW91c0VsLCBjdXJyZW50RWwsIGN1cnJlbnRTY29wZSwgbGF0ZXN0TG9jYWxzLFxuICAgICAgICAgICAgb25sb2FkRXhwICAgICA9IGF0dHJzLm9ubG9hZCB8fCAnJyxcbiAgICAgICAgICAgIGF1dG9TY3JvbGxFeHAgPSBhdHRycy5hdXRvc2Nyb2xsLFxuICAgICAgICAgICAgcmVuZGVyZXIgICAgICA9IGdldFJlbmRlcmVyKGF0dHJzLCBzY29wZSksXG4gICAgICAgICAgICBpbmhlcml0ZWQgICAgID0gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YSgnJHVpVmlldycpO1xuXG4gICAgICAgIHNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVwZGF0ZVZpZXcoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGVWaWV3KHRydWUpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFudXBMYXN0VmlldygpIHtcbiAgICAgICAgICBpZiAocHJldmlvdXNFbCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzRWwgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VycmVudEVsKSB7XG4gICAgICAgICAgICB2YXIgJHVpVmlld0RhdGEgPSBjdXJyZW50RWwuZGF0YSgnJHVpVmlld0FuaW0nKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmxlYXZlKGN1cnJlbnRFbCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICR1aVZpZXdEYXRhLiQkYW5pbUxlYXZlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJldmlvdXNFbCA9IGN1cnJlbnRFbDtcbiAgICAgICAgICAgIGN1cnJlbnRFbCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVmlldyhmaXJzdFRpbWUpIHtcbiAgICAgICAgICB2YXIgbmV3U2NvcGUsXG4gICAgICAgICAgICAgIG5hbWUgICAgICAgICAgICA9IGdldFVpVmlld05hbWUoc2NvcGUsIGF0dHJzLCAkZWxlbWVudCwgJGludGVycG9sYXRlKSxcbiAgICAgICAgICAgICAgcHJldmlvdXNMb2NhbHMgID0gbmFtZSAmJiAkc3RhdGUuJGN1cnJlbnQgJiYgJHN0YXRlLiRjdXJyZW50LmxvY2Fsc1tuYW1lXTtcblxuICAgICAgICAgIGlmICghZmlyc3RUaW1lICYmIHByZXZpb3VzTG9jYWxzID09PSBsYXRlc3RMb2NhbHMpIHJldHVybjsgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgIG5ld1Njb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgIGxhdGVzdExvY2FscyA9ICRzdGF0ZS4kY3VycmVudC5sb2NhbHNbbmFtZV07XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXZpZXcjJHZpZXdDb250ZW50TG9hZGluZ1xuICAgICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktdmlld1xuICAgICAgICAgICAqIEBldmVudFR5cGUgZW1pdHMgb24gdWktdmlldyBkaXJlY3RpdmUgc2NvcGVcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEZpcmVkIG9uY2UgdGhlIHZpZXcgKipiZWdpbnMgbG9hZGluZyoqLCAqYmVmb3JlKiB0aGUgRE9NIGlzIHJlbmRlcmVkLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmlld05hbWUgTmFtZSBvZiB0aGUgdmlldy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBuZXdTY29wZS4kZW1pdCgnJHZpZXdDb250ZW50TG9hZGluZycsIG5hbWUpO1xuXG4gICAgICAgICAgdmFyIGNsb25lID0gJHRyYW5zY2x1ZGUobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICB2YXIgYW5pbUVudGVyID0gJHEuZGVmZXIoKSwgYW5pbUxlYXZlID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB2aWV3QW5pbURhdGEgPSB7XG4gICAgICAgICAgICAgICRhbmltRW50ZXI6IGFuaW1FbnRlci5wcm9taXNlLFxuICAgICAgICAgICAgICAkYW5pbUxlYXZlOiBhbmltTGVhdmUucHJvbWlzZSxcbiAgICAgICAgICAgICAgJCRhbmltTGVhdmU6IGFuaW1MZWF2ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY2xvbmUuZGF0YSgnJHVpVmlld0FuaW0nLCB2aWV3QW5pbURhdGEpO1xuICAgICAgICAgICAgcmVuZGVyZXIuZW50ZXIoY2xvbmUsICRlbGVtZW50LCBmdW5jdGlvbiBvblVpVmlld0VudGVyKCkge1xuICAgICAgICAgICAgICBhbmltRW50ZXIucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICBpZihjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudEFuaW1hdGlvbkVuZGVkJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXV0b1Njcm9sbEV4cCkgJiYgIWF1dG9TY3JvbGxFeHAgfHwgc2NvcGUuJGV2YWwoYXV0b1Njcm9sbEV4cCkpIHtcbiAgICAgICAgICAgICAgICAkdWlWaWV3U2Nyb2xsKGNsb25lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjbGVhbnVwTGFzdFZpZXcoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGN1cnJlbnRFbCA9IGNsb25lO1xuICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktdmlldyMkdmlld0NvbnRlbnRMb2FkZWRcbiAgICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXZpZXdcbiAgICAgICAgICAgKiBAZXZlbnRUeXBlIGVtaXRzIG9uIHVpLXZpZXcgZGlyZWN0aXZlIHNjb3BlXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogRmlyZWQgb25jZSB0aGUgdmlldyBpcyAqKmxvYWRlZCoqLCAqYWZ0ZXIqIHRoZSBET00gaXMgcmVuZGVyZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2aWV3TmFtZSBOYW1lIG9mIHRoZSB2aWV3LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJHZpZXdDb250ZW50TG9hZGVkJywgbmFtZSk7XG4gICAgICAgICAgY3VycmVudFNjb3BlLiRldmFsKG9ubG9hZEV4cCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBkaXJlY3RpdmU7XG59XG5cbiRWaWV3RGlyZWN0aXZlRmlsbC4kaW5qZWN0ID0gWyckY29tcGlsZScsICckY29udHJvbGxlcicsICckc3RhdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiAkVmlld0RpcmVjdGl2ZUZpbGwgKCAgJGNvbXBpbGUsICAgJGNvbnRyb2xsZXIsICAgJHN0YXRlLCAgICRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICBwcmlvcml0eTogLTQwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbiAodEVsZW1lbnQpIHtcbiAgICAgIHZhciBpbml0aWFsID0gdEVsZW1lbnQuaHRtbCgpO1xuICAgICAgaWYgKHRFbGVtZW50LmVtcHR5KSB7XG4gICAgICAgIHRFbGVtZW50LmVtcHR5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBuZyAxLjAuMCBkb2Vzbid0IGhhdmUgZW1wdHkoKSwgd2hpY2ggY2xlYW5zIHVwIGRhdGEgYW5kIGhhbmRsZXJzXG4gICAgICAgIHRFbGVtZW50WzBdLmlubmVySFRNTCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsICRlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgY3VycmVudCA9ICRzdGF0ZS4kY3VycmVudCxcbiAgICAgICAgICAgIG5hbWUgPSBnZXRVaVZpZXdOYW1lKHNjb3BlLCBhdHRycywgJGVsZW1lbnQsICRpbnRlcnBvbGF0ZSksXG4gICAgICAgICAgICBsb2NhbHMgID0gY3VycmVudCAmJiBjdXJyZW50LmxvY2Fsc1tuYW1lXTtcblxuICAgICAgICBpZiAoISBsb2NhbHMpIHtcbiAgICAgICAgICAkZWxlbWVudC5odG1sKGluaXRpYWwpO1xuICAgICAgICAgICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudC5kYXRhKCckdWlWaWV3JywgeyBuYW1lOiBuYW1lLCBzdGF0ZTogbG9jYWxzLiQkc3RhdGUgfSk7XG4gICAgICAgICRlbGVtZW50Lmh0bWwobG9jYWxzLiR0ZW1wbGF0ZSA/IGxvY2Fscy4kdGVtcGxhdGUgOiBpbml0aWFsKTtcblxuICAgICAgICB2YXIgcmVzb2x2ZURhdGEgPSBhbmd1bGFyLmV4dGVuZCh7fSwgbG9jYWxzKTtcbiAgICAgICAgc2NvcGVbbG9jYWxzLiQkcmVzb2x2ZUFzXSA9IHJlc29sdmVEYXRhO1xuXG4gICAgICAgIHZhciBsaW5rID0gJGNvbXBpbGUoJGVsZW1lbnQuY29udGVudHMoKSk7XG5cbiAgICAgICAgaWYgKGxvY2Fscy4kJGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBsb2NhbHMuJHNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgbG9jYWxzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSAkY29udHJvbGxlcihsb2NhbHMuJCRjb250cm9sbGVyLCBsb2NhbHMpO1xuICAgICAgICAgIGlmIChsb2NhbHMuJCRjb250cm9sbGVyQXMpIHtcbiAgICAgICAgICAgIHNjb3BlW2xvY2Fscy4kJGNvbnRyb2xsZXJBc10gPSBjb250cm9sbGVyO1xuICAgICAgICAgICAgc2NvcGVbbG9jYWxzLiQkY29udHJvbGxlckFzXVtsb2NhbHMuJCRyZXNvbHZlQXNdID0gcmVzb2x2ZURhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXIuJG9uSW5pdCkpIGNvbnRyb2xsZXIuJG9uSW5pdCgpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoJyRuZ0NvbnRyb2xsZXJDb250cm9sbGVyJywgY29udHJvbGxlcik7XG4gICAgICAgICAgJGVsZW1lbnQuY2hpbGRyZW4oKS5kYXRhKCckbmdDb250cm9sbGVyQ29udHJvbGxlcicsIGNvbnRyb2xsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGluayhzY29wZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBTaGFyZWQgdWktdmlldyBjb2RlIGZvciBib3RoIGRpcmVjdGl2ZXM6XG4gKiBHaXZlbiBzY29wZSwgZWxlbWVudCwgYW5kIGl0cyBhdHRyaWJ1dGVzLCByZXR1cm4gdGhlIHZpZXcncyBuYW1lXG4gKi9cbmZ1bmN0aW9uIGdldFVpVmlld05hbWUoc2NvcGUsIGF0dHJzLCBlbGVtZW50LCAkaW50ZXJwb2xhdGUpIHtcbiAgdmFyIG5hbWUgPSAkaW50ZXJwb2xhdGUoYXR0cnMudWlWaWV3IHx8IGF0dHJzLm5hbWUgfHwgJycpKHNjb3BlKTtcbiAgdmFyIHVpVmlld0NyZWF0ZWRCeSA9IGVsZW1lbnQuaW5oZXJpdGVkRGF0YSgnJHVpVmlldycpO1xuICByZXR1cm4gbmFtZS5pbmRleE9mKCdAJykgPj0gMCA/ICBuYW1lIDogIChuYW1lICsgJ0AnICsgKHVpVmlld0NyZWF0ZWRCeSA/IHVpVmlld0NyZWF0ZWRCeS5zdGF0ZS5uYW1lIDogJycpKTtcbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpLmRpcmVjdGl2ZSgndWlWaWV3JywgJFZpZXdEaXJlY3RpdmUpO1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpLmRpcmVjdGl2ZSgndWlWaWV3JywgJFZpZXdEaXJlY3RpdmVGaWxsKTtcblxuZnVuY3Rpb24gcGFyc2VTdGF0ZVJlZihyZWYsIGN1cnJlbnQpIHtcbiAgdmFyIHByZXBhcnNlZCA9IHJlZi5tYXRjaCgvXlxccyooe1tefV0qfSlcXHMqJC8pLCBwYXJzZWQ7XG4gIGlmIChwcmVwYXJzZWQpIHJlZiA9IGN1cnJlbnQgKyAnKCcgKyBwcmVwYXJzZWRbMV0gKyAnKSc7XG4gIHBhcnNlZCA9IHJlZi5yZXBsYWNlKC9cXG4vZywgXCIgXCIpLm1hdGNoKC9eKFteKF0rPylcXHMqKFxcKCguKilcXCkpPyQvKTtcbiAgaWYgKCFwYXJzZWQgfHwgcGFyc2VkLmxlbmd0aCAhPT0gNCkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdGF0ZSByZWYgJ1wiICsgcmVmICsgXCInXCIpO1xuICByZXR1cm4geyBzdGF0ZTogcGFyc2VkWzFdLCBwYXJhbUV4cHI6IHBhcnNlZFszXSB8fCBudWxsIH07XG59XG5cbmZ1bmN0aW9uIHN0YXRlQ29udGV4dChlbCkge1xuICB2YXIgc3RhdGVEYXRhID0gZWwucGFyZW50KCkuaW5oZXJpdGVkRGF0YSgnJHVpVmlldycpO1xuXG4gIGlmIChzdGF0ZURhdGEgJiYgc3RhdGVEYXRhLnN0YXRlICYmIHN0YXRlRGF0YS5zdGF0ZS5uYW1lKSB7XG4gICAgcmV0dXJuIHN0YXRlRGF0YS5zdGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5mbyhlbCkge1xuICAvLyBTVkdBRWxlbWVudCBkb2VzIG5vdCB1c2UgdGhlIGhyZWYgYXR0cmlidXRlLCBidXQgcmF0aGVyIHRoZSAneGxpbmtIcmVmJyBhdHRyaWJ1dGUuXG4gIHZhciBpc1N2ZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlbC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nO1xuICB2YXIgaXNGb3JtID0gZWxbMF0ubm9kZU5hbWUgPT09IFwiRk9STVwiO1xuXG4gIHJldHVybiB7XG4gICAgYXR0cjogaXNGb3JtID8gXCJhY3Rpb25cIiA6IChpc1N2ZyA/ICd4bGluazpocmVmJyA6ICdocmVmJyksXG4gICAgaXNBbmNob3I6IGVsLnByb3AoXCJ0YWdOYW1lXCIpLnRvVXBwZXJDYXNlKCkgPT09IFwiQVwiLFxuICAgIGNsaWNrYWJsZTogIWlzRm9ybVxuICB9O1xufVxuXG5mdW5jdGlvbiBjbGlja0hvb2soZWwsICRzdGF0ZSwgJHRpbWVvdXQsIHR5cGUsIGN1cnJlbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgYnV0dG9uID0gZS53aGljaCB8fCBlLmJ1dHRvbiwgdGFyZ2V0ID0gY3VycmVudCgpO1xuXG4gICAgaWYgKCEoYnV0dG9uID4gMSB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuc2hpZnRLZXkgfHwgZWwuYXR0cigndGFyZ2V0JykpKSB7XG4gICAgICAvLyBIQUNLOiBUaGlzIGlzIHRvIGFsbG93IG5nLWNsaWNrcyB0byBiZSBwcm9jZXNzZWQgYmVmb3JlIHRoZSB0cmFuc2l0aW9uIGlzIGluaXRpYXRlZDpcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzdGF0ZS5nbyh0YXJnZXQuc3RhdGUsIHRhcmdldC5wYXJhbXMsIHRhcmdldC5vcHRpb25zKTtcbiAgICAgIH0pO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAvLyBpZiB0aGUgc3RhdGUgaGFzIG5vIFVSTCwgaWdub3JlIG9uZSBwcmV2ZW50RGVmYXVsdCBmcm9tIHRoZSA8YT4gZGlyZWN0aXZlLlxuICAgICAgdmFyIGlnbm9yZVByZXZlbnREZWZhdWx0Q291bnQgPSB0eXBlLmlzQW5jaG9yICYmICF0YXJnZXQuaHJlZiA/IDE6IDA7XG5cbiAgICAgIGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGlnbm9yZVByZXZlbnREZWZhdWx0Q291bnQtLSA8PSAwKSAkdGltZW91dC5jYW5jZWwodHJhbnNpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdE9wdHMoZWwsICRzdGF0ZSkge1xuICByZXR1cm4geyByZWxhdGl2ZTogc3RhdGVDb250ZXh0KGVsKSB8fCAkc3RhdGUuJGN1cnJlbnQsIGluaGVyaXQ6IHRydWUgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWZcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICogQHJlcXVpcmVzICR0aW1lb3V0XG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZGlyZWN0aXZlIHRoYXQgYmluZHMgYSBsaW5rIChgPGE+YCB0YWcpIHRvIGEgc3RhdGUuIElmIHRoZSBzdGF0ZSBoYXMgYW4gYXNzb2NpYXRlZFxuICogVVJMLCB0aGUgZGlyZWN0aXZlIHdpbGwgYXV0b21hdGljYWxseSBnZW5lcmF0ZSAmIHVwZGF0ZSB0aGUgYGhyZWZgIGF0dHJpYnV0ZSB2aWFcbiAqIHRoZSB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2hyZWYgJHN0YXRlLmhyZWYoKX0gbWV0aG9kLiBDbGlja2luZ1xuICogdGhlIGxpbmsgd2lsbCB0cmlnZ2VyIGEgc3RhdGUgdHJhbnNpdGlvbiB3aXRoIG9wdGlvbmFsIHBhcmFtZXRlcnMuXG4gKlxuICogQWxzbyBtaWRkbGUtY2xpY2tpbmcsIHJpZ2h0LWNsaWNraW5nLCBhbmQgY3RybC1jbGlja2luZyBvbiB0aGUgbGluayB3aWxsIGJlXG4gKiBoYW5kbGVkIG5hdGl2ZWx5IGJ5IHRoZSBicm93c2VyLlxuICpcbiAqIFlvdSBjYW4gYWxzbyB1c2UgcmVsYXRpdmUgc3RhdGUgcGF0aHMgd2l0aGluIHVpLXNyZWYsIGp1c3QgbGlrZSB0aGUgcmVsYXRpdmVcbiAqIHBhdGhzIHBhc3NlZCB0byBgJHN0YXRlLmdvKClgLiBZb3UganVzdCBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlIHBhdGggaXMgcmVsYXRpdmVcbiAqIHRvIHRoZSBzdGF0ZSB0aGF0IHRoZSBsaW5rIGxpdmVzIGluLCBpbiBvdGhlciB3b3JkcyB0aGUgc3RhdGUgdGhhdCBsb2FkZWQgdGhlXG4gKiB0ZW1wbGF0ZSBjb250YWluaW5nIHRoZSBsaW5rLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBvcHRpb25zIHRvIHBhc3MgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19nbyAkc3RhdGUuZ28oKX1cbiAqIHVzaW5nIHRoZSBgdWktc3JlZi1vcHRzYCBhdHRyaWJ1dGUuIE9wdGlvbnMgYXJlIHJlc3RyaWN0ZWQgdG8gYGxvY2F0aW9uYCwgYGluaGVyaXRgLFxuICogYW5kIGByZWxvYWRgLlxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBob3cgeW91J2QgdXNlIHVpLXNyZWYgYW5kIGhvdyBpdCB3b3VsZCBjb21waWxlLiBJZiB5b3UgaGF2ZSB0aGVcbiAqIGZvbGxvd2luZyB0ZW1wbGF0ZTpcbiAqIDxwcmU+XG4gKiA8YSB1aS1zcmVmPVwiaG9tZVwiPkhvbWU8L2E+IHwgPGEgdWktc3JlZj1cImFib3V0XCI+QWJvdXQ8L2E+IHwgPGEgdWktc3JlZj1cIntwYWdlOiAyfVwiPk5leHQgcGFnZTwvYT5cbiAqXG4gKiA8dWw+XG4gKiAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gY29udGFjdHNcIj5cbiAqICAgICAgICAgPGEgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+e3sgY29udGFjdC5uYW1lIH19PC9hPlxuICogICAgIDwvbGk+XG4gKiA8L3VsPlxuICogPC9wcmU+XG4gKlxuICogVGhlbiB0aGUgY29tcGlsZWQgaHRtbCB3b3VsZCBiZSAoYXNzdW1pbmcgSHRtbDVNb2RlIGlzIG9mZiBhbmQgY3VycmVudCBzdGF0ZSBpcyBjb250YWN0cyk6XG4gKiA8cHJlPlxuICogPGEgaHJlZj1cIiMvaG9tZVwiIHVpLXNyZWY9XCJob21lXCI+SG9tZTwvYT4gfCA8YSBocmVmPVwiIy9hYm91dFwiIHVpLXNyZWY9XCJhYm91dFwiPkFib3V0PC9hPiB8IDxhIGhyZWY9XCIjL2NvbnRhY3RzP3BhZ2U9MlwiIHVpLXNyZWY9XCJ7cGFnZTogMn1cIj5OZXh0IHBhZ2U8L2E+XG4gKlxuICogPHVsPlxuICogICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxhIGhyZWY9XCIjL2NvbnRhY3RzLzFcIiB1aS1zcmVmPVwiY29udGFjdHMuZGV0YWlsKHsgaWQ6IGNvbnRhY3QuaWQgfSlcIj5Kb2U8L2E+XG4gKiAgICAgPC9saT5cbiAqICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8YSBocmVmPVwiIy9jb250YWN0cy8yXCIgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+QWxpY2U8L2E+XG4gKiAgICAgPC9saT5cbiAqICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8YSBocmVmPVwiIy9jb250YWN0cy8zXCIgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+Qm9iPC9hPlxuICogICAgIDwvbGk+XG4gKiA8L3VsPlxuICpcbiAqIDxhIHVpLXNyZWY9XCJob21lXCIgdWktc3JlZi1vcHRzPVwie3JlbG9hZDogdHJ1ZX1cIj5Ib21lPC9hPlxuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVpLXNyZWYgJ3N0YXRlTmFtZScgY2FuIGJlIGFueSB2YWxpZCBhYnNvbHV0ZSBvciByZWxhdGl2ZSBzdGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHVpLXNyZWYtb3B0cyBvcHRpb25zIHRvIHBhc3MgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19nbyAkc3RhdGUuZ28oKX1cbiAqL1xuJFN0YXRlUmVmRGlyZWN0aXZlLiRpbmplY3QgPSBbJyRzdGF0ZScsICckdGltZW91dCddO1xuZnVuY3Rpb24gJFN0YXRlUmVmRGlyZWN0aXZlKCRzdGF0ZSwgJHRpbWVvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6IFsnP151aVNyZWZBY3RpdmUnLCAnP151aVNyZWZBY3RpdmVFcSddLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgdWlTcmVmQWN0aXZlKSB7XG4gICAgICB2YXIgcmVmICAgID0gcGFyc2VTdGF0ZVJlZihhdHRycy51aVNyZWYsICRzdGF0ZS5jdXJyZW50Lm5hbWUpO1xuICAgICAgdmFyIGRlZiAgICA9IHsgc3RhdGU6IHJlZi5zdGF0ZSwgaHJlZjogbnVsbCwgcGFyYW1zOiBudWxsIH07XG4gICAgICB2YXIgdHlwZSAgID0gZ2V0VHlwZUluZm8oZWxlbWVudCk7XG4gICAgICB2YXIgYWN0aXZlID0gdWlTcmVmQWN0aXZlWzFdIHx8IHVpU3JlZkFjdGl2ZVswXTtcbiAgICAgIHZhciB1bmxpbmtJbmZvRm4gPSBudWxsO1xuICAgICAgdmFyIGhvb2tGbjtcblxuICAgICAgZGVmLm9wdGlvbnMgPSBleHRlbmQoZGVmYXVsdE9wdHMoZWxlbWVudCwgJHN0YXRlKSwgYXR0cnMudWlTcmVmT3B0cyA/IHNjb3BlLiRldmFsKGF0dHJzLnVpU3JlZk9wdHMpIDoge30pO1xuXG4gICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwpIGRlZi5wYXJhbXMgPSBhbmd1bGFyLmNvcHkodmFsKTtcbiAgICAgICAgZGVmLmhyZWYgPSAkc3RhdGUuaHJlZihyZWYuc3RhdGUsIGRlZi5wYXJhbXMsIGRlZi5vcHRpb25zKTtcblxuICAgICAgICBpZiAodW5saW5rSW5mb0ZuKSB1bmxpbmtJbmZvRm4oKTtcbiAgICAgICAgaWYgKGFjdGl2ZSkgdW5saW5rSW5mb0ZuID0gYWN0aXZlLiQkYWRkU3RhdGVJbmZvKHJlZi5zdGF0ZSwgZGVmLnBhcmFtcyk7XG4gICAgICAgIGlmIChkZWYuaHJlZiAhPT0gbnVsbCkgYXR0cnMuJHNldCh0eXBlLmF0dHIsIGRlZi5ocmVmKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChyZWYucGFyYW1FeHByKSB7XG4gICAgICAgIHNjb3BlLiR3YXRjaChyZWYucGFyYW1FeHByLCBmdW5jdGlvbih2YWwpIHsgaWYgKHZhbCAhPT0gZGVmLnBhcmFtcykgdXBkYXRlKHZhbCk7IH0sIHRydWUpO1xuICAgICAgICBkZWYucGFyYW1zID0gYW5ndWxhci5jb3B5KHNjb3BlLiRldmFsKHJlZi5wYXJhbUV4cHIpKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZSgpO1xuXG4gICAgICBpZiAoIXR5cGUuY2xpY2thYmxlKSByZXR1cm47XG4gICAgICBob29rRm4gPSBjbGlja0hvb2soZWxlbWVudCwgJHN0YXRlLCAkdGltZW91dCwgdHlwZSwgZnVuY3Rpb24oKSB7IHJldHVybiBkZWY7IH0pO1xuICAgICAgZWxlbWVudFtlbGVtZW50Lm9uID8gJ29uJyA6ICdiaW5kJ10oXCJjbGlja1wiLCBob29rRm4pO1xuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50W2VsZW1lbnQub2ZmID8gJ29mZicgOiAndW5iaW5kJ10oXCJjbGlja1wiLCBob29rRm4pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktc3RhdGVcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLnVpU3JlZlxuICpcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNdWNoIGxpa2UgdWktc3JlZiwgYnV0IHdpbGwgYWNjZXB0IG5hbWVkICRzY29wZSBwcm9wZXJ0aWVzIHRvIGV2YWx1YXRlIGZvciBhIHN0YXRlIGRlZmluaXRpb24sXG4gKiBwYXJhbXMgYW5kIG92ZXJyaWRlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVpLXN0YXRlICdzdGF0ZU5hbWUnIGNhbiBiZSBhbnkgdmFsaWQgYWJzb2x1dGUgb3IgcmVsYXRpdmUgc3RhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB1aS1zdGF0ZS1wYXJhbXMgcGFyYW1zIHRvIHBhc3MgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19ocmVmICRzdGF0ZS5ocmVmKCl9XG4gKiBAcGFyYW0ge09iamVjdH0gdWktc3RhdGUtb3B0cyBvcHRpb25zIHRvIHBhc3MgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19nbyAkc3RhdGUuZ28oKX1cbiAqL1xuJFN0YXRlUmVmRHluYW1pY0RpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHRpbWVvdXQnXTtcbmZ1bmN0aW9uICRTdGF0ZVJlZkR5bmFtaWNEaXJlY3RpdmUoJHN0YXRlLCAkdGltZW91dCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogWyc/XnVpU3JlZkFjdGl2ZScsICc/XnVpU3JlZkFjdGl2ZUVxJ10sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB1aVNyZWZBY3RpdmUpIHtcbiAgICAgIHZhciB0eXBlICAgPSBnZXRUeXBlSW5mbyhlbGVtZW50KTtcbiAgICAgIHZhciBhY3RpdmUgPSB1aVNyZWZBY3RpdmVbMV0gfHwgdWlTcmVmQWN0aXZlWzBdO1xuICAgICAgdmFyIGdyb3VwICA9IFthdHRycy51aVN0YXRlLCBhdHRycy51aVN0YXRlUGFyYW1zIHx8IG51bGwsIGF0dHJzLnVpU3RhdGVPcHRzIHx8IG51bGxdO1xuICAgICAgdmFyIHdhdGNoICA9ICdbJyArIGdyb3VwLm1hcChmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCB8fCAnbnVsbCc7IH0pLmpvaW4oJywgJykgKyAnXSc7XG4gICAgICB2YXIgZGVmICAgID0geyBzdGF0ZTogbnVsbCwgcGFyYW1zOiBudWxsLCBvcHRpb25zOiBudWxsLCBocmVmOiBudWxsIH07XG4gICAgICB2YXIgdW5saW5rSW5mb0ZuID0gbnVsbDtcbiAgICAgIHZhciBob29rRm47XG5cbiAgICAgIGZ1bmN0aW9uIHJ1blN0YXRlUmVmTGluayAoZ3JvdXApIHtcbiAgICAgICAgZGVmLnN0YXRlID0gZ3JvdXBbMF07IGRlZi5wYXJhbXMgPSBncm91cFsxXTsgZGVmLm9wdGlvbnMgPSBncm91cFsyXTtcbiAgICAgICAgZGVmLmhyZWYgPSAkc3RhdGUuaHJlZihkZWYuc3RhdGUsIGRlZi5wYXJhbXMsIGRlZi5vcHRpb25zKTtcblxuICAgICAgICBpZiAodW5saW5rSW5mb0ZuKSB1bmxpbmtJbmZvRm4oKTtcbiAgICAgICAgaWYgKGFjdGl2ZSkgdW5saW5rSW5mb0ZuID0gYWN0aXZlLiQkYWRkU3RhdGVJbmZvKGRlZi5zdGF0ZSwgZGVmLnBhcmFtcyk7XG4gICAgICAgIGlmIChkZWYuaHJlZikgYXR0cnMuJHNldCh0eXBlLmF0dHIsIGRlZi5ocmVmKTtcbiAgICAgIH1cblxuICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoLCBydW5TdGF0ZVJlZkxpbmssIHRydWUpO1xuICAgICAgcnVuU3RhdGVSZWZMaW5rKHNjb3BlLiRldmFsKHdhdGNoKSk7XG5cbiAgICAgIGlmICghdHlwZS5jbGlja2FibGUpIHJldHVybjtcbiAgICAgIGhvb2tGbiA9IGNsaWNrSG9vayhlbGVtZW50LCAkc3RhdGUsICR0aW1lb3V0LCB0eXBlLCBmdW5jdGlvbigpIHsgcmV0dXJuIGRlZjsgfSk7XG4gICAgICBlbGVtZW50W2VsZW1lbnQub24gPyAnb24nIDogJ2JpbmQnXShcImNsaWNrXCIsIGhvb2tGbik7XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnRbZWxlbWVudC5vZmYgPyAnb2ZmJyA6ICd1bmJpbmQnXShcImNsaWNrXCIsIGhvb2tGbik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWYtYWN0aXZlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUGFyYW1zXG4gKiBAcmVxdWlyZXMgJGludGVycG9sYXRlXG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZGlyZWN0aXZlIHdvcmtpbmcgYWxvbmdzaWRlIHVpLXNyZWYgdG8gYWRkIGNsYXNzZXMgdG8gYW4gZWxlbWVudCB3aGVuIHRoZVxuICogcmVsYXRlZCB1aS1zcmVmIGRpcmVjdGl2ZSdzIHN0YXRlIGlzIGFjdGl2ZSwgYW5kIHJlbW92aW5nIHRoZW0gd2hlbiBpdCBpcyBpbmFjdGl2ZS5cbiAqIFRoZSBwcmltYXJ5IHVzZS1jYXNlIGlzIHRvIHNpbXBsaWZ5IHRoZSBzcGVjaWFsIGFwcGVhcmFuY2Ugb2YgbmF2aWdhdGlvbiBtZW51c1xuICogcmVseWluZyBvbiBgdWktc3JlZmAsIGJ5IGhhdmluZyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSdzIG1lbnUgYnV0dG9uIGFwcGVhciBkaWZmZXJlbnQsXG4gKiBkaXN0aW5ndWlzaGluZyBpdCBmcm9tIHRoZSBpbmFjdGl2ZSBtZW51IGl0ZW1zLlxuICpcbiAqIHVpLXNyZWYtYWN0aXZlIGNhbiBsaXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgdWktc3JlZiBvciBvbiBhIHBhcmVudCBlbGVtZW50LiBUaGUgZmlyc3RcbiAqIHVpLXNyZWYtYWN0aXZlIGZvdW5kIGF0IHRoZSBzYW1lIGxldmVsIG9yIGFib3ZlIHRoZSB1aS1zcmVmIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBXaWxsIGFjdGl2YXRlIHdoZW4gdGhlIHVpLXNyZWYncyB0YXJnZXQgc3RhdGUgb3IgYW55IGNoaWxkIHN0YXRlIGlzIGFjdGl2ZS4gSWYgeW91XG4gKiBuZWVkIHRvIGFjdGl2YXRlIG9ubHkgd2hlbiB0aGUgdWktc3JlZiB0YXJnZXQgc3RhdGUgaXMgYWN0aXZlIGFuZCAqbm90KiBhbnkgb2ZcbiAqIGl0J3MgY2hpbGRyZW4sIHRoZW4geW91IHdpbGwgdXNlXG4gKiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS1zcmVmLWFjdGl2ZS1lcSB1aS1zcmVmLWFjdGl2ZS1lcX1cbiAqXG4gKiBAZXhhbXBsZVxuICogR2l2ZW4gdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZTpcbiAqIDxwcmU+XG4gKiA8dWw+XG4gKiAgIDxsaSB1aS1zcmVmLWFjdGl2ZT1cImFjdGl2ZVwiIGNsYXNzPVwiaXRlbVwiPlxuICogICAgIDxhIGhyZWYgdWktc3JlZj1cImFwcC51c2VyKHt1c2VyOiAnYmlsYm9iYWdnaW5zJ30pXCI+QGJpbGJvYmFnZ2luczwvYT5cbiAqICAgPC9saT5cbiAqIDwvdWw+XG4gKiA8L3ByZT5cbiAqXG4gKlxuICogV2hlbiB0aGUgYXBwIHN0YXRlIGlzIFwiYXBwLnVzZXJcIiAob3IgYW55IGNoaWxkcmVuIHN0YXRlcyksIGFuZCBjb250YWlucyB0aGUgc3RhdGUgcGFyYW1ldGVyIFwidXNlclwiIHdpdGggdmFsdWUgXCJiaWxib2JhZ2dpbnNcIixcbiAqIHRoZSByZXN1bHRpbmcgSFRNTCB3aWxsIGFwcGVhciBhcyAobm90ZSB0aGUgJ2FjdGl2ZScgY2xhc3MpOlxuICogPHByZT5cbiAqIDx1bD5cbiAqICAgPGxpIHVpLXNyZWYtYWN0aXZlPVwiYWN0aXZlXCIgY2xhc3M9XCJpdGVtIGFjdGl2ZVwiPlxuICogICAgIDxhIHVpLXNyZWY9XCJhcHAudXNlcih7dXNlcjogJ2JpbGJvYmFnZ2lucyd9KVwiIGhyZWY9XCIvdXNlcnMvYmlsYm9iYWdnaW5zXCI+QGJpbGJvYmFnZ2luczwvYT5cbiAqICAgPC9saT5cbiAqIDwvdWw+XG4gKiA8L3ByZT5cbiAqXG4gKiBUaGUgY2xhc3MgbmFtZSBpcyBpbnRlcnBvbGF0ZWQgKipvbmNlKiogZHVyaW5nIHRoZSBkaXJlY3RpdmVzIGxpbmsgdGltZSAoYW55IGZ1cnRoZXIgY2hhbmdlcyB0byB0aGVcbiAqIGludGVycG9sYXRlZCB2YWx1ZSBhcmUgaWdub3JlZCkuXG4gKlxuICogTXVsdGlwbGUgY2xhc3NlcyBtYXkgYmUgc3BlY2lmaWVkIGluIGEgc3BhY2Utc2VwYXJhdGVkIGZvcm1hdDpcbiAqIDxwcmU+XG4gKiA8dWw+XG4gKiAgIDxsaSB1aS1zcmVmLWFjdGl2ZT0nY2xhc3MxIGNsYXNzMiBjbGFzczMnPlxuICogICAgIDxhIHVpLXNyZWY9XCJhcHAudXNlclwiPmxpbms8L2E+XG4gKiAgIDwvbGk+XG4gKiA8L3VsPlxuICogPC9wcmU+XG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBwYXNzIHVpLXNyZWYtYWN0aXZlIGFuIGV4cHJlc3Npb24gdGhhdCBldmFsdWF0ZXNcbiAqIHRvIGFuIG9iamVjdCBoYXNoLCB3aG9zZSBrZXlzIHJlcHJlc2VudCBhY3RpdmUgY2xhc3MgbmFtZXMgYW5kIHdob3NlXG4gKiB2YWx1ZXMgcmVwcmVzZW50IHRoZSByZXNwZWN0aXZlIHN0YXRlIG5hbWVzL2dsb2JzLlxuICogdWktc3JlZi1hY3RpdmUgd2lsbCBtYXRjaCBpZiB0aGUgY3VycmVudCBhY3RpdmUgc3RhdGUgKippbmNsdWRlcyoqIGFueSBvZlxuICogdGhlIHNwZWNpZmllZCBzdGF0ZSBuYW1lcy9nbG9icywgZXZlbiB0aGUgYWJzdHJhY3Qgb25lcy5cbiAqXG4gKiBARXhhbXBsZVxuICogR2l2ZW4gdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZSwgd2l0aCBcImFkbWluXCIgYmVpbmcgYW4gYWJzdHJhY3Qgc3RhdGU6XG4gKiA8cHJlPlxuICogPGRpdiB1aS1zcmVmLWFjdGl2ZT1cInsnYWN0aXZlJzogJ2FkbWluLionfVwiPlxuICogICA8YSB1aS1zcmVmLWFjdGl2ZT1cImFjdGl2ZVwiIHVpLXNyZWY9XCJhZG1pbi5yb2xlc1wiPlJvbGVzPC9hPlxuICogPC9kaXY+XG4gKiA8L3ByZT5cbiAqXG4gKiBXaGVuIHRoZSBjdXJyZW50IHN0YXRlIGlzIFwiYWRtaW4ucm9sZXNcIiB0aGUgXCJhY3RpdmVcIiBjbGFzcyB3aWxsIGJlIGFwcGxpZWRcbiAqIHRvIGJvdGggdGhlIDxkaXY+IGFuZCA8YT4gZWxlbWVudHMuIEl0IGlzIGltcG9ydGFudCB0byBub3RlIHRoYXQgdGhlIHN0YXRlXG4gKiBuYW1lcy9nbG9icyBwYXNzZWQgdG8gdWktc3JlZi1hY3RpdmUgc2hhZG93IHRoZSBzdGF0ZSBwcm92aWRlZCBieSB1aS1zcmVmLlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS1zcmVmLWFjdGl2ZS1lcVxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVBhcmFtc1xuICogQHJlcXVpcmVzICRpbnRlcnBvbGF0ZVxuICpcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgc2FtZSBhcyB7QGxpbmsgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS1zcmVmLWFjdGl2ZSB1aS1zcmVmLWFjdGl2ZX0gYnV0IHdpbGwgb25seSBhY3RpdmF0ZVxuICogd2hlbiB0aGUgZXhhY3QgdGFyZ2V0IHN0YXRlIHVzZWQgaW4gdGhlIGB1aS1zcmVmYCBpcyBhY3RpdmU7IG5vIGNoaWxkIHN0YXRlcy5cbiAqXG4gKi9cbiRTdGF0ZVJlZkFjdGl2ZURpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJywgJyRpbnRlcnBvbGF0ZSddO1xuZnVuY3Rpb24gJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlKCRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuICB7XG4gICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckdGltZW91dCcsIGZ1bmN0aW9uICgkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0aW1lb3V0KSB7XG4gICAgICB2YXIgc3RhdGVzID0gW10sIGFjdGl2ZUNsYXNzZXMgPSB7fSwgYWN0aXZlRXFDbGFzcywgdWlTcmVmQWN0aXZlO1xuXG4gICAgICAvLyBUaGVyZSBwcm9iYWJseSBpc24ndCBtdWNoIHBvaW50IGluICRvYnNlcnZpbmcgdGhpc1xuICAgICAgLy8gdWlTcmVmQWN0aXZlIGFuZCB1aVNyZWZBY3RpdmVFcSBzaGFyZSB0aGUgc2FtZSBkaXJlY3RpdmUgb2JqZWN0IHdpdGggc29tZVxuICAgICAgLy8gc2xpZ2h0IGRpZmZlcmVuY2UgaW4gbG9naWMgcm91dGluZ1xuICAgICAgYWN0aXZlRXFDbGFzcyA9ICRpbnRlcnBvbGF0ZSgkYXR0cnMudWlTcmVmQWN0aXZlRXEgfHwgJycsIGZhbHNlKSgkc2NvcGUpO1xuXG4gICAgICB0cnkge1xuICAgICAgICB1aVNyZWZBY3RpdmUgPSAkc2NvcGUuJGV2YWwoJGF0dHJzLnVpU3JlZkFjdGl2ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIERvIG5vdGhpbmcuIHVpU3JlZkFjdGl2ZSBpcyBub3QgYSB2YWxpZCBleHByZXNzaW9uLlxuICAgICAgICAvLyBGYWxsIGJhY2sgdG8gdXNpbmcgJGludGVycG9sYXRlIGJlbG93XG4gICAgICB9XG4gICAgICB1aVNyZWZBY3RpdmUgPSB1aVNyZWZBY3RpdmUgfHwgJGludGVycG9sYXRlKCRhdHRycy51aVNyZWZBY3RpdmUgfHwgJycsIGZhbHNlKSgkc2NvcGUpO1xuICAgICAgaWYgKGlzT2JqZWN0KHVpU3JlZkFjdGl2ZSkpIHtcbiAgICAgICAgZm9yRWFjaCh1aVNyZWZBY3RpdmUsIGZ1bmN0aW9uKHN0YXRlT3JOYW1lLCBhY3RpdmVDbGFzcykge1xuICAgICAgICAgIGlmIChpc1N0cmluZyhzdGF0ZU9yTmFtZSkpIHtcbiAgICAgICAgICAgIHZhciByZWYgPSBwYXJzZVN0YXRlUmVmKHN0YXRlT3JOYW1lLCAkc3RhdGUuY3VycmVudC5uYW1lKTtcbiAgICAgICAgICAgIGFkZFN0YXRlKHJlZi5zdGF0ZSwgJHNjb3BlLiRldmFsKHJlZi5wYXJhbUV4cHIpLCBhY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQWxsb3cgdWlTcmVmIHRvIGNvbW11bmljYXRlIHdpdGggdWlTcmVmQWN0aXZlW0VxdWFsc11cbiAgICAgIHRoaXMuJCRhZGRTdGF0ZUluZm8gPSBmdW5jdGlvbiAobmV3U3RhdGUsIG5ld1BhcmFtcykge1xuICAgICAgICAvLyB3ZSBhbHJlYWR5IGdvdCBhbiBleHBsaWNpdCBzdGF0ZSBwcm92aWRlZCBieSB1aS1zcmVmLWFjdGl2ZSwgc28gd2VcbiAgICAgICAgLy8gc2hhZG93IHRoZSBvbmUgdGhhdCBjb21lcyBmcm9tIHVpLXNyZWZcbiAgICAgICAgaWYgKGlzT2JqZWN0KHVpU3JlZkFjdGl2ZSkgJiYgc3RhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlcmVnaXN0ZXIgPSBhZGRTdGF0ZShuZXdTdGF0ZSwgbmV3UGFyYW1zLCB1aVNyZWZBY3RpdmUpO1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIGRlcmVnaXN0ZXI7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgdXBkYXRlKTtcblxuICAgICAgZnVuY3Rpb24gYWRkU3RhdGUoc3RhdGVOYW1lLCBzdGF0ZVBhcmFtcywgYWN0aXZlQ2xhc3MpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gJHN0YXRlLmdldChzdGF0ZU5hbWUsIHN0YXRlQ29udGV4dCgkZWxlbWVudCkpO1xuICAgICAgICB2YXIgc3RhdGVIYXNoID0gY3JlYXRlU3RhdGVIYXNoKHN0YXRlTmFtZSwgc3RhdGVQYXJhbXMpO1xuXG4gICAgICAgIHZhciBzdGF0ZUluZm8gPSB7XG4gICAgICAgICAgc3RhdGU6IHN0YXRlIHx8IHsgbmFtZTogc3RhdGVOYW1lIH0sXG4gICAgICAgICAgcGFyYW1zOiBzdGF0ZVBhcmFtcyxcbiAgICAgICAgICBoYXNoOiBzdGF0ZUhhc2hcbiAgICAgICAgfTtcblxuICAgICAgICBzdGF0ZXMucHVzaChzdGF0ZUluZm8pO1xuICAgICAgICBhY3RpdmVDbGFzc2VzW3N0YXRlSGFzaF0gPSBhY3RpdmVDbGFzcztcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVtb3ZlU3RhdGUoKSB7XG4gICAgICAgICAgdmFyIGlkeCA9IHN0YXRlcy5pbmRleE9mKHN0YXRlSW5mbyk7XG4gICAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHN0YXRlcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdGVcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gW3BhcmFtc11cbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY3JlYXRlU3RhdGVIYXNoKHN0YXRlLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFpc1N0cmluZyhzdGF0ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXRlIHNob3VsZCBiZSBhIHN0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc09iamVjdChwYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlICsgdG9Kc29uKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zID0gJHNjb3BlLiRldmFsKHBhcmFtcyk7XG4gICAgICAgIGlmIChpc09iamVjdChwYXJhbXMpKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlICsgdG9Kc29uKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgcm91dGUgc3RhdGVcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoYW55TWF0Y2goc3RhdGVzW2ldLnN0YXRlLCBzdGF0ZXNbaV0ucGFyYW1zKSkge1xuICAgICAgICAgICAgYWRkQ2xhc3MoJGVsZW1lbnQsIGFjdGl2ZUNsYXNzZXNbc3RhdGVzW2ldLmhhc2hdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIGFjdGl2ZUNsYXNzZXNbc3RhdGVzW2ldLmhhc2hdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXhhY3RNYXRjaChzdGF0ZXNbaV0uc3RhdGUsIHN0YXRlc1tpXS5wYXJhbXMpKSB7XG4gICAgICAgICAgICBhZGRDbGFzcygkZWxlbWVudCwgYWN0aXZlRXFDbGFzcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKCRlbGVtZW50LCBhY3RpdmVFcUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZSkgeyAkdGltZW91dChmdW5jdGlvbiAoKSB7IGVsLmFkZENsYXNzKGNsYXNzTmFtZSk7IH0pOyB9XG4gICAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7IGVsLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7IH1cbiAgICAgIGZ1bmN0aW9uIGFueU1hdGNoKHN0YXRlLCBwYXJhbXMpIHsgcmV0dXJuICRzdGF0ZS5pbmNsdWRlcyhzdGF0ZS5uYW1lLCBwYXJhbXMpOyB9XG4gICAgICBmdW5jdGlvbiBleGFjdE1hdGNoKHN0YXRlLCBwYXJhbXMpIHsgcmV0dXJuICRzdGF0ZS5pcyhzdGF0ZS5uYW1lLCBwYXJhbXMpOyB9XG5cbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1dXG4gIH07XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKVxuICAuZGlyZWN0aXZlKCd1aVNyZWYnLCAkU3RhdGVSZWZEaXJlY3RpdmUpXG4gIC5kaXJlY3RpdmUoJ3VpU3JlZkFjdGl2ZScsICRTdGF0ZVJlZkFjdGl2ZURpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgndWlTcmVmQWN0aXZlRXEnLCAkU3RhdGVSZWZBY3RpdmVEaXJlY3RpdmUpXG4gIC5kaXJlY3RpdmUoJ3VpU3RhdGUnLCAkU3RhdGVSZWZEeW5hbWljRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZmlsdGVyOmlzU3RhdGVcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVHJhbnNsYXRlcyB0byB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2lzICRzdGF0ZS5pcyhcInN0YXRlTmFtZVwiKX0uXG4gKi9cbiRJc1N0YXRlRmlsdGVyLiRpbmplY3QgPSBbJyRzdGF0ZSddO1xuZnVuY3Rpb24gJElzU3RhdGVGaWx0ZXIoJHN0YXRlKSB7XG4gIHZhciBpc0ZpbHRlciA9IGZ1bmN0aW9uIChzdGF0ZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuICRzdGF0ZS5pcyhzdGF0ZSwgcGFyYW1zKTtcbiAgfTtcbiAgaXNGaWx0ZXIuJHN0YXRlZnVsID0gdHJ1ZTtcbiAgcmV0dXJuIGlzRmlsdGVyO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5maWx0ZXI6aW5jbHVkZWRCeVN0YXRlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRyYW5zbGF0ZXMgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19pbmNsdWRlcyAkc3RhdGUuaW5jbHVkZXMoJ2Z1bGxPclBhcnRpYWxTdGF0ZU5hbWUnKX0uXG4gKi9cbiRJbmNsdWRlZEJ5U3RhdGVGaWx0ZXIuJGluamVjdCA9IFsnJHN0YXRlJ107XG5mdW5jdGlvbiAkSW5jbHVkZWRCeVN0YXRlRmlsdGVyKCRzdGF0ZSkge1xuICB2YXIgaW5jbHVkZXNGaWx0ZXIgPSBmdW5jdGlvbiAoc3RhdGUsIHBhcmFtcywgb3B0aW9ucykge1xuICAgIHJldHVybiAkc3RhdGUuaW5jbHVkZXMoc3RhdGUsIHBhcmFtcywgb3B0aW9ucyk7XG4gIH07XG4gIGluY2x1ZGVzRmlsdGVyLiRzdGF0ZWZ1bCA9IHRydWU7XG4gIHJldHVybiAgaW5jbHVkZXNGaWx0ZXI7XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKVxuICAuZmlsdGVyKCdpc1N0YXRlJywgJElzU3RhdGVGaWx0ZXIpXG4gIC5maWx0ZXIoJ2luY2x1ZGVkQnlTdGF0ZScsICRJbmNsdWRlZEJ5U3RhdGVGaWx0ZXIpO1xufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG4vKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS42LjRcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhcikgeyd1c2Ugc3RyaWN0JztcblxudmFyICRyZXNvdXJjZU1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIoJyRyZXNvdXJjZScpO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGFuZCByZWdleCB0byBsb29rdXAgYSBkb3R0ZWQgcGF0aCBvbiBhbiBvYmplY3Rcbi8vIHN0b3BwaW5nIGF0IHVuZGVmaW5lZC9udWxsLiAgVGhlIHBhdGggbXVzdCBiZSBjb21wb3NlZCBvZiBBU0NJSVxuLy8gaWRlbnRpZmllcnMgKGp1c3QgbGlrZSAkcGFyc2UpXG52YXIgTUVNQkVSX05BTUVfUkVHRVggPSAvXihcXC5bYS16QS1aXyRAXVswLTlhLXpBLVpfJEBdKikrJC87XG5cbmZ1bmN0aW9uIGlzVmFsaWREb3R0ZWRQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIChwYXRoICE9IG51bGwgJiYgcGF0aCAhPT0gJycgJiYgcGF0aCAhPT0gJ2hhc093blByb3BlcnR5JyAmJlxuICAgICAgTUVNQkVSX05BTUVfUkVHRVgudGVzdCgnLicgKyBwYXRoKSk7XG59XG5cbmZ1bmN0aW9uIGxvb2t1cERvdHRlZFBhdGgob2JqLCBwYXRoKSB7XG4gIGlmICghaXNWYWxpZERvdHRlZFBhdGgocGF0aCkpIHtcbiAgICB0aHJvdyAkcmVzb3VyY2VNaW5FcnIoJ2JhZG1lbWJlcicsICdEb3R0ZWQgbWVtYmVyIHBhdGggXCJAezB9XCIgaXMgaW52YWxpZC4nLCBwYXRoKTtcbiAgfVxuICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgZm9yICh2YXIgaSA9IDAsIGlpID0ga2V5cy5sZW5ndGg7IGkgPCBpaSAmJiBhbmd1bGFyLmlzRGVmaW5lZChvYmopOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBvYmogPSAob2JqICE9PSBudWxsKSA/IG9ialtrZXldIDogdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdCBhbmQgY2xlYXIgb3RoZXIgZmllbGRzIGZyb20gdGhlIGRlc3RpbmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dDbGVhckFuZENvcHkoc3JjLCBkc3QpIHtcbiAgZHN0ID0gZHN0IHx8IHt9O1xuXG4gIGFuZ3VsYXIuZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICBkZWxldGUgZHN0W2tleV07XG4gIH0pO1xuXG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBpZiAoc3JjLmhhc093blByb3BlcnR5KGtleSkgJiYgIShrZXkuY2hhckF0KDApID09PSAnJCcgJiYga2V5LmNoYXJBdCgxKSA9PT0gJyQnKSkge1xuICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nUmVzb3VyY2VcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICMgbmdSZXNvdXJjZVxuICpcbiAqIFRoZSBgbmdSZXNvdXJjZWAgbW9kdWxlIHByb3ZpZGVzIGludGVyYWN0aW9uIHN1cHBvcnQgd2l0aCBSRVNUZnVsIHNlcnZpY2VzXG4gKiB2aWEgdGhlICRyZXNvdXJjZSBzZXJ2aWNlLlxuICpcbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nUmVzb3VyY2VcIj48L2Rpdj5cbiAqXG4gKiBTZWUge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlUHJvdmlkZXJ9IGFuZCB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2V9IGZvciB1c2FnZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHJlc291cmNlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2UgYCRyZXNvdXJjZVByb3ZpZGVyYCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZX1cbiAqIHNlcnZpY2UuXG4gKlxuICogIyMgRGVwZW5kZW5jaWVzXG4gKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nUmVzb3VyY2UgfSBtb2R1bGUgdG8gYmUgaW5zdGFsbGVkLlxuICpcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcmVzb3VyY2VcbiAqIEByZXF1aXJlcyAkaHR0cFxuICogQHJlcXVpcmVzIG5nLiRsb2dcbiAqIEByZXF1aXJlcyAkcVxuICogQHJlcXVpcmVzIG5nLiR0aW1lb3V0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZhY3Rvcnkgd2hpY2ggY3JlYXRlcyBhIHJlc291cmNlIG9iamVjdCB0aGF0IGxldHMgeW91IGludGVyYWN0IHdpdGhcbiAqIFtSRVNUZnVsXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JlcHJlc2VudGF0aW9uYWxfU3RhdGVfVHJhbnNmZXIpIHNlcnZlci1zaWRlIGRhdGEgc291cmNlcy5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgcmVzb3VyY2Ugb2JqZWN0IGhhcyBhY3Rpb24gbWV0aG9kcyB3aGljaCBwcm92aWRlIGhpZ2gtbGV2ZWwgYmVoYXZpb3JzIHdpdGhvdXRcbiAqIHRoZSBuZWVkIHRvIGludGVyYWN0IHdpdGggdGhlIGxvdyBsZXZlbCB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHNlcnZpY2UuXG4gKlxuICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ1Jlc291cmNlIGBuZ1Jlc291cmNlYH0gbW9kdWxlIHRvIGJlIGluc3RhbGxlZC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0cmFpbGluZyBzbGFzaGVzIHdpbGwgYmUgc3RyaXBwZWQgZnJvbSB0aGUgY2FsY3VsYXRlZCBVUkxzLFxuICogd2hpY2ggY2FuIHBvc2UgcHJvYmxlbXMgd2l0aCBzZXJ2ZXIgYmFja2VuZHMgdGhhdCBkbyBub3QgZXhwZWN0IHRoYXRcbiAqIGJlaGF2aW9yLiAgVGhpcyBjYW4gYmUgZGlzYWJsZWQgYnkgY29uZmlndXJpbmcgdGhlIGAkcmVzb3VyY2VQcm92aWRlcmAgbGlrZVxuICogdGhpczpcbiAqXG4gKiBgYGBqc1xuICAgICBhcHAuY29uZmlnKFsnJHJlc291cmNlUHJvdmlkZXInLCBmdW5jdGlvbigkcmVzb3VyY2VQcm92aWRlcikge1xuICAgICAgIC8vIERvbid0IHN0cmlwIHRyYWlsaW5nIHNsYXNoZXMgZnJvbSBjYWxjdWxhdGVkIFVSTHNcbiAgICAgICAkcmVzb3VyY2VQcm92aWRlci5kZWZhdWx0cy5zdHJpcFRyYWlsaW5nU2xhc2hlcyA9IGZhbHNlO1xuICAgICB9XSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIEEgcGFyYW1ldGVyaXplZCBVUkwgdGVtcGxhdGUgd2l0aCBwYXJhbWV0ZXJzIHByZWZpeGVkIGJ5IGA6YCBhcyBpblxuICogICBgL3VzZXIvOnVzZXJuYW1lYC4gSWYgeW91IGFyZSB1c2luZyBhIFVSTCB3aXRoIGEgcG9ydCBudW1iZXIgKGUuZy5cbiAqICAgYGh0dHA6Ly9leGFtcGxlLmNvbTo4MDgwL2FwaWApLCBpdCB3aWxsIGJlIHJlc3BlY3RlZC5cbiAqXG4gKiAgIElmIHlvdSBhcmUgdXNpbmcgYSB1cmwgd2l0aCBhIHN1ZmZpeCwganVzdCBhZGQgdGhlIHN1ZmZpeCwgbGlrZSB0aGlzOlxuICogICBgJHJlc291cmNlKCdodHRwOi8vZXhhbXBsZS5jb20vcmVzb3VyY2UuanNvbicpYCBvciBgJHJlc291cmNlKCdodHRwOi8vZXhhbXBsZS5jb20vOmlkLmpzb24nKWBcbiAqICAgb3IgZXZlbiBgJHJlc291cmNlKCdodHRwOi8vZXhhbXBsZS5jb20vcmVzb3VyY2UvOnJlc291cmNlX2lkLjpmb3JtYXQnKWBcbiAqICAgSWYgdGhlIHBhcmFtZXRlciBiZWZvcmUgdGhlIHN1ZmZpeCBpcyBlbXB0eSwgOnJlc291cmNlX2lkIGluIHRoaXMgY2FzZSwgdGhlbiB0aGUgYC8uYCB3aWxsIGJlXG4gKiAgIGNvbGxhcHNlZCBkb3duIHRvIGEgc2luZ2xlIGAuYC4gIElmIHlvdSBuZWVkIHRoaXMgc2VxdWVuY2UgdG8gYXBwZWFyIGFuZCBub3QgY29sbGFwc2UgdGhlbiB5b3VcbiAqICAgY2FuIGVzY2FwZSBpdCB3aXRoIGAvXFwuYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdD19IHBhcmFtRGVmYXVsdHMgRGVmYXVsdCB2YWx1ZXMgZm9yIGB1cmxgIHBhcmFtZXRlcnMuIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIGluXG4gKiAgIGBhY3Rpb25zYCBtZXRob2RzLiBJZiBhIHBhcmFtZXRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCBldmVyeSB0aW1lXG4gKiAgIGEgcGFyYW0gdmFsdWUgbmVlZHMgdG8gYmUgb2J0YWluZWQgZm9yIGEgcmVxdWVzdCAodW5sZXNzIHRoZSBwYXJhbSB3YXMgb3ZlcnJpZGRlbikuIFRoZSBmdW5jdGlvblxuICogICB3aWxsIGJlIHBhc3NlZCB0aGUgY3VycmVudCBkYXRhIHZhbHVlIGFzIGFuIGFyZ3VtZW50LlxuICpcbiAqICAgRWFjaCBrZXkgdmFsdWUgaW4gdGhlIHBhcmFtZXRlciBvYmplY3QgaXMgZmlyc3QgYm91bmQgdG8gdXJsIHRlbXBsYXRlIGlmIHByZXNlbnQgYW5kIHRoZW4gYW55XG4gKiAgIGV4Y2VzcyBrZXlzIGFyZSBhcHBlbmRlZCB0byB0aGUgdXJsIHNlYXJjaCBxdWVyeSBhZnRlciB0aGUgYD9gLlxuICpcbiAqICAgR2l2ZW4gYSB0ZW1wbGF0ZSBgL3BhdGgvOnZlcmJgIGFuZCBwYXJhbWV0ZXIgYHt2ZXJiOidncmVldCcsIHNhbHV0YXRpb246J0hlbGxvJ31gIHJlc3VsdHMgaW5cbiAqICAgVVJMIGAvcGF0aC9ncmVldD9zYWx1dGF0aW9uPUhlbGxvYC5cbiAqXG4gKiAgIElmIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgcHJlZml4ZWQgd2l0aCBgQGAsIHRoZW4gdGhlIHZhbHVlIGZvciB0aGF0IHBhcmFtZXRlciB3aWxsIGJlXG4gKiAgIGV4dHJhY3RlZCBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG9uIHRoZSBgZGF0YWAgb2JqZWN0IChwcm92aWRlZCB3aGVuIGNhbGxpbmcgYWN0aW9uc1xuICogICB3aXRoIGEgcmVxdWVzdCBib2R5KS5cbiAqICAgRm9yIGV4YW1wbGUsIGlmIHRoZSBgZGVmYXVsdFBhcmFtYCBvYmplY3QgaXMgYHtzb21lUGFyYW06ICdAc29tZVByb3AnfWAgdGhlbiB0aGUgdmFsdWUgb2ZcbiAqICAgYHNvbWVQYXJhbWAgd2lsbCBiZSBgZGF0YS5zb21lUHJvcGAuXG4gKiAgIE5vdGUgdGhhdCB0aGUgcGFyYW1ldGVyIHdpbGwgYmUgaWdub3JlZCwgd2hlbiBjYWxsaW5nIGEgXCJHRVRcIiBhY3Rpb24gbWV0aG9kIChpLmUuIGFuIGFjdGlvblxuICogICBtZXRob2QgdGhhdCBkb2VzIG5vdCBhY2NlcHQgYSByZXF1ZXN0IGJvZHkpXG4gKlxuICogQHBhcmFtIHtPYmplY3QuPE9iamVjdD49fSBhY3Rpb25zIEhhc2ggd2l0aCBkZWNsYXJhdGlvbiBvZiBjdXN0b20gYWN0aW9ucyB0aGF0IHdpbGwgYmUgYXZhaWxhYmxlXG4gKiAgIGluIGFkZGl0aW9uIHRvIHRoZSBkZWZhdWx0IHNldCBvZiByZXNvdXJjZSBhY3Rpb25zIChzZWUgYmVsb3cpLiBJZiBhIGN1c3RvbSBhY3Rpb24gaGFzIHRoZSBzYW1lXG4gKiAgIGtleSBhcyBhIGRlZmF1bHQgYWN0aW9uIChlLmcuIGBzYXZlYCksIHRoZW4gdGhlIGRlZmF1bHQgYWN0aW9uIHdpbGwgYmUgKm92ZXJ3cml0dGVuKiwgYW5kIG5vdFxuICogICBleHRlbmRlZC5cbiAqXG4gKiAgIFRoZSBkZWNsYXJhdGlvbiBzaG91bGQgYmUgY3JlYXRlZCBpbiB0aGUgZm9ybWF0IG9mIHtAbGluayBuZy4kaHR0cCN1c2FnZSAkaHR0cC5jb25maWd9OlxuICpcbiAqICAgICAgIHthY3Rpb24xOiB7bWV0aG9kOj8sIHBhcmFtczo/LCBpc0FycmF5Oj8sIGhlYWRlcnM6PywgLi4ufSxcbiAqICAgICAgICBhY3Rpb24yOiB7bWV0aG9kOj8sIHBhcmFtczo/LCBpc0FycmF5Oj8sIGhlYWRlcnM6PywgLi4ufSxcbiAqICAgICAgICAuLi59XG4gKlxuICogICBXaGVyZTpcbiAqXG4gKiAgIC0gKipgYWN0aW9uYCoqIOKAkyB7c3RyaW5nfSDigJMgVGhlIG5hbWUgb2YgYWN0aW9uLiBUaGlzIG5hbWUgYmVjb21lcyB0aGUgbmFtZSBvZiB0aGUgbWV0aG9kIG9uXG4gKiAgICAgeW91ciByZXNvdXJjZSBvYmplY3QuXG4gKiAgIC0gKipgbWV0aG9kYCoqIOKAkyB7c3RyaW5nfSDigJMgQ2FzZSBpbnNlbnNpdGl2ZSBIVFRQIG1ldGhvZCAoZS5nLiBgR0VUYCwgYFBPU1RgLCBgUFVUYCxcbiAqICAgICBgREVMRVRFYCwgYEpTT05QYCwgZXRjKS5cbiAqICAgLSAqKmBwYXJhbXNgKiog4oCTIHtPYmplY3Q9fSDigJMgT3B0aW9uYWwgc2V0IG9mIHByZS1ib3VuZCBwYXJhbWV0ZXJzIGZvciB0aGlzIGFjdGlvbi4gSWYgYW55IG9mXG4gKiAgICAgdGhlIHBhcmFtZXRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCBldmVyeSB0aW1lIHdoZW4gYSBwYXJhbSB2YWx1ZSBuZWVkcyB0b1xuICogICAgIGJlIG9idGFpbmVkIGZvciBhIHJlcXVlc3QgKHVubGVzcyB0aGUgcGFyYW0gd2FzIG92ZXJyaWRkZW4pLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgdGhlXG4gKiAgICAgY3VycmVudCBkYXRhIHZhbHVlIGFzIGFuIGFyZ3VtZW50LlxuICogICAtICoqYHVybGAqKiDigJMge3N0cmluZ30g4oCTIGFjdGlvbiBzcGVjaWZpYyBgdXJsYCBvdmVycmlkZS4gVGhlIHVybCB0ZW1wbGF0aW5nIGlzIHN1cHBvcnRlZCBqdXN0XG4gKiAgICAgbGlrZSBmb3IgdGhlIHJlc291cmNlLWxldmVsIHVybHMuXG4gKiAgIC0gKipgaXNBcnJheWAqKiDigJMge2Jvb2xlYW49fSDigJMgSWYgdHJ1ZSB0aGVuIHRoZSByZXR1cm5lZCBvYmplY3QgZm9yIHRoaXMgYWN0aW9uIGlzIGFuIGFycmF5LFxuICogICAgIHNlZSBgcmV0dXJuc2Agc2VjdGlvbi5cbiAqICAgLSAqKmB0cmFuc2Zvcm1SZXF1ZXN0YCoqIOKAk1xuICogICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIOKAk1xuICogICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICogICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICogICAgIEJ5IGRlZmF1bHQsIHRyYW5zZm9ybVJlcXVlc3Qgd2lsbCBjb250YWluIG9uZSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgcmVxdWVzdCBkYXRhIGlzXG4gKiAgICAgYW4gb2JqZWN0IGFuZCBzZXJpYWxpemVzIGl0IHVzaW5nIGBhbmd1bGFyLnRvSnNvbmAuIFRvIHByZXZlbnQgdGhpcyBiZWhhdmlvciwgc2V0XG4gKiAgICAgYHRyYW5zZm9ybVJlcXVlc3RgIHRvIGFuIGVtcHR5IGFycmF5OiBgdHJhbnNmb3JtUmVxdWVzdDogW11gXG4gKiAgIC0gKipgdHJhbnNmb3JtUmVzcG9uc2VgKiog4oCTXG4gKiAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpPn1gIOKAk1xuICogICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICogICAgIHJlc3BvbnNlIGJvZHksIGhlYWRlcnMgYW5kIHN0YXR1cyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpXG4gKiAgICAgdmVyc2lvbi5cbiAqICAgICBCeSBkZWZhdWx0LCB0cmFuc2Zvcm1SZXNwb25zZSB3aWxsIGNvbnRhaW4gb25lIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZSByZXNwb25zZSBsb29rc1xuICogICAgIGxpa2UgYSBKU09OIHN0cmluZyBhbmQgZGVzZXJpYWxpemVzIGl0IHVzaW5nIGBhbmd1bGFyLmZyb21Kc29uYC4gVG8gcHJldmVudCB0aGlzIGJlaGF2aW9yLFxuICogICAgIHNldCBgdHJhbnNmb3JtUmVzcG9uc2VgIHRvIGFuIGVtcHR5IGFycmF5OiBgdHJhbnNmb3JtUmVzcG9uc2U6IFtdYFxuICogICAtICoqYGNhY2hlYCoqIOKAkyBge2Jvb2xlYW58Q2FjaGV9YCDigJMgSWYgdHJ1ZSwgYSBkZWZhdWx0ICRodHRwIGNhY2hlIHdpbGwgYmUgdXNlZCB0byBjYWNoZSB0aGVcbiAqICAgICBHRVQgcmVxdWVzdCwgb3RoZXJ3aXNlIGlmIGEgY2FjaGUgaW5zdGFuY2UgYnVpbHQgd2l0aFxuICogICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9IGlzIHN1cHBsaWVkLCB0aGlzIGNhY2hlIHdpbGwgYmUgdXNlZCBmb3JcbiAqICAgICBjYWNoaW5nLlxuICogICAtICoqYHRpbWVvdXRgKiog4oCTIGB7bnVtYmVyfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLjxiciAvPlxuICogICAgICoqTm90ZToqKiBJbiBjb250cmFzdCB0byB7QGxpbmsgbmcuJGh0dHAjdXNhZ2UgJGh0dHAuY29uZmlnfSwge0BsaW5rIG5nLiRxIHByb21pc2VzfSBhcmVcbiAqICAgICAqKm5vdCoqIHN1cHBvcnRlZCBpbiAkcmVzb3VyY2UsIGJlY2F1c2UgdGhlIHNhbWUgdmFsdWUgd291bGQgYmUgdXNlZCBmb3IgbXVsdGlwbGUgcmVxdWVzdHMuXG4gKiAgICAgSWYgeW91IGFyZSBsb29raW5nIGZvciBhIHdheSB0byBjYW5jZWwgcmVxdWVzdHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgY2FuY2VsbGFibGVgIG9wdGlvbi5cbiAqICAgLSAqKmBjYW5jZWxsYWJsZWAqKiDigJMgYHtib29sZWFufWAg4oCTIGlmIHNldCB0byB0cnVlLCB0aGUgcmVxdWVzdCBtYWRlIGJ5IGEgXCJub24taW5zdGFuY2VcIiBjYWxsXG4gKiAgICAgd2lsbCBiZSBjYW5jZWxsZWQgKGlmIG5vdCBhbHJlYWR5IGNvbXBsZXRlZCkgYnkgY2FsbGluZyBgJGNhbmNlbFJlcXVlc3QoKWAgb24gdGhlIGNhbGwnc1xuICogICAgIHJldHVybiB2YWx1ZS4gQ2FsbGluZyBgJGNhbmNlbFJlcXVlc3QoKWAgZm9yIGEgbm9uLWNhbmNlbGxhYmxlIG9yIGFuIGFscmVhZHlcbiAqICAgICBjb21wbGV0ZWQvY2FuY2VsbGVkIHJlcXVlc3Qgd2lsbCBoYXZlIG5vIGVmZmVjdC48YnIgLz5cbiAqICAgLSAqKmB3aXRoQ3JlZGVudGlhbHNgKiogLSBge2Jvb2xlYW59YCAtIHdoZXRoZXIgdG8gc2V0IHRoZSBgd2l0aENyZWRlbnRpYWxzYCBmbGFnIG9uIHRoZVxuICogICAgIFhIUiBvYmplY3QuIFNlZVxuICogICAgIFtyZXF1ZXN0cyB3aXRoIGNyZWRlbnRpYWxzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9odHRwX2FjY2Vzc19jb250cm9sI3NlY3Rpb25fNSlcbiAqICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqICAgLSAqKmByZXNwb25zZVR5cGVgKiogLSBge3N0cmluZ31gIC0gc2VlXG4gKiAgICAgW3JlcXVlc3RUeXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9YTUxIdHRwUmVxdWVzdCNyZXNwb25zZVR5cGUpLlxuICogICAtICoqYGludGVyY2VwdG9yYCoqIC0gYHtPYmplY3Q9fWAgLSBUaGUgaW50ZXJjZXB0b3Igb2JqZWN0IGhhcyB0d28gb3B0aW9uYWwgbWV0aG9kcyAtXG4gKiAgICAgYHJlc3BvbnNlYCBhbmQgYHJlc3BvbnNlRXJyb3JgLiBCb3RoIGByZXNwb25zZWAgYW5kIGByZXNwb25zZUVycm9yYCBpbnRlcmNlcHRvcnMgZ2V0IGNhbGxlZFxuICogICAgIHdpdGggYGh0dHAgcmVzcG9uc2VgIG9iamVjdC4gU2VlIHtAbGluayBuZy4kaHR0cCAkaHR0cCBpbnRlcmNlcHRvcnN9LlxuICogICAtICoqYGhhc0JvZHlgKiogLSBge2Jvb2xlYW59YCAtIGFsbG93cyB0byBzcGVjaWZ5IGlmIGEgcmVxdWVzdCBib2R5IHNob3VsZCBiZSBpbmNsdWRlZCBvciBub3QuXG4gKiAgICAgSWYgbm90IHNwZWNpZmllZCBvbmx5IFBPU1QsIFBVVCBhbmQgUEFUQ0ggcmVxdWVzdHMgd2lsbCBoYXZlIGEgYm9keS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBIYXNoIHdpdGggY3VzdG9tIHNldHRpbmdzIHRoYXQgc2hvdWxkIGV4dGVuZCB0aGVcbiAqICAgZGVmYXVsdCBgJHJlc291cmNlUHJvdmlkZXJgIGJlaGF2aW9yLiAgVGhlIHN1cHBvcnRlZCBvcHRpb25zIGFyZTpcbiAqXG4gKiAgIC0gKipgc3RyaXBUcmFpbGluZ1NsYXNoZXNgKiog4oCTIHtib29sZWFufSDigJMgSWYgdHJ1ZSB0aGVuIHRoZSB0cmFpbGluZ1xuICogICBzbGFzaGVzIGZyb20gYW55IGNhbGN1bGF0ZWQgVVJMIHdpbGwgYmUgc3RyaXBwZWQuIChEZWZhdWx0cyB0byB0cnVlLilcbiAqICAgLSAqKmBjYW5jZWxsYWJsZWAqKiDigJMge2Jvb2xlYW59IOKAkyBJZiB0cnVlLCB0aGUgcmVxdWVzdCBtYWRlIGJ5IGEgXCJub24taW5zdGFuY2VcIiBjYWxsIHdpbGwgYmVcbiAqICAgY2FuY2VsbGVkIChpZiBub3QgYWxyZWFkeSBjb21wbGV0ZWQpIGJ5IGNhbGxpbmcgYCRjYW5jZWxSZXF1ZXN0KClgIG9uIHRoZSBjYWxsJ3MgcmV0dXJuIHZhbHVlLlxuICogICBUaGlzIGNhbiBiZSBvdmVyd3JpdHRlbiBwZXIgYWN0aW9uLiAoRGVmYXVsdHMgdG8gZmFsc2UuKVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEEgcmVzb3VyY2UgXCJjbGFzc1wiIG9iamVjdCB3aXRoIG1ldGhvZHMgZm9yIHRoZSBkZWZhdWx0IHNldCBvZiByZXNvdXJjZSBhY3Rpb25zXG4gKiAgIG9wdGlvbmFsbHkgZXh0ZW5kZWQgd2l0aCBjdXN0b20gYGFjdGlvbnNgLiBUaGUgZGVmYXVsdCBzZXQgY29udGFpbnMgdGhlc2UgYWN0aW9uczpcbiAqICAgYGBganNcbiAqICAgeyAnZ2V0JzogICAge21ldGhvZDonR0VUJ30sXG4gKiAgICAgJ3NhdmUnOiAgIHttZXRob2Q6J1BPU1QnfSxcbiAqICAgICAncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTp0cnVlfSxcbiAqICAgICAncmVtb3ZlJzoge21ldGhvZDonREVMRVRFJ30sXG4gKiAgICAgJ2RlbGV0ZSc6IHttZXRob2Q6J0RFTEVURSd9IH07XG4gKiAgIGBgYFxuICpcbiAqICAgQ2FsbGluZyB0aGVzZSBtZXRob2RzIGludm9rZSBhbiB7QGxpbmsgbmcuJGh0dHB9IHdpdGggdGhlIHNwZWNpZmllZCBodHRwIG1ldGhvZCxcbiAqICAgZGVzdGluYXRpb24gYW5kIHBhcmFtZXRlcnMuIFdoZW4gdGhlIGRhdGEgaXMgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIHRoZW4gdGhlIG9iamVjdCBpcyBhblxuICogICBpbnN0YW5jZSBvZiB0aGUgcmVzb3VyY2UgY2xhc3MuIFRoZSBhY3Rpb25zIGBzYXZlYCwgYHJlbW92ZWAgYW5kIGBkZWxldGVgIGFyZSBhdmFpbGFibGUgb24gaXRcbiAqICAgYXMgIG1ldGhvZHMgd2l0aCB0aGUgYCRgIHByZWZpeC4gVGhpcyBhbGxvd3MgeW91IHRvIGVhc2lseSBwZXJmb3JtIENSVUQgb3BlcmF0aW9ucyAoY3JlYXRlLFxuICogICByZWFkLCB1cGRhdGUsIGRlbGV0ZSkgb24gc2VydmVyLXNpZGUgZGF0YSBsaWtlIHRoaXM6XG4gKiAgIGBgYGpzXG4gKiAgIHZhciBVc2VyID0gJHJlc291cmNlKCcvdXNlci86dXNlcklkJywge3VzZXJJZDonQGlkJ30pO1xuICogICB2YXIgdXNlciA9IFVzZXIuZ2V0KHt1c2VySWQ6MTIzfSwgZnVuY3Rpb24oKSB7XG4gKiAgICAgdXNlci5hYmMgPSB0cnVlO1xuICogICAgIHVzZXIuJHNhdmUoKTtcbiAqICAgfSk7XG4gKiAgIGBgYFxuICpcbiAqICAgSXQgaXMgaW1wb3J0YW50IHRvIHJlYWxpemUgdGhhdCBpbnZva2luZyBhICRyZXNvdXJjZSBvYmplY3QgbWV0aG9kIGltbWVkaWF0ZWx5IHJldHVybnMgYW5cbiAqICAgZW1wdHkgcmVmZXJlbmNlIChvYmplY3Qgb3IgYXJyYXkgZGVwZW5kaW5nIG9uIGBpc0FycmF5YCkuIE9uY2UgdGhlIGRhdGEgaXMgcmV0dXJuZWQgZnJvbSB0aGVcbiAqICAgc2VydmVyIHRoZSBleGlzdGluZyByZWZlcmVuY2UgaXMgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhLiBUaGlzIGlzIGEgdXNlZnVsIHRyaWNrIHNpbmNlXG4gKiAgIHVzdWFsbHkgdGhlIHJlc291cmNlIGlzIGFzc2lnbmVkIHRvIGEgbW9kZWwgd2hpY2ggaXMgdGhlbiByZW5kZXJlZCBieSB0aGUgdmlldy4gSGF2aW5nIGFuIGVtcHR5XG4gKiAgIG9iamVjdCByZXN1bHRzIGluIG5vIHJlbmRlcmluZywgb25jZSB0aGUgZGF0YSBhcnJpdmVzIGZyb20gdGhlIHNlcnZlciB0aGVuIHRoZSBvYmplY3QgaXNcbiAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGRhdGEgYW5kIHRoZSB2aWV3IGF1dG9tYXRpY2FsbHkgcmUtcmVuZGVycyBpdHNlbGYgc2hvd2luZyB0aGUgbmV3IGRhdGEuIFRoaXNcbiAqICAgbWVhbnMgdGhhdCBpbiBtb3N0IGNhc2VzIG9uZSBuZXZlciBoYXMgdG8gd3JpdGUgYSBjYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIGFjdGlvbiBtZXRob2RzLlxuICpcbiAqICAgVGhlIGFjdGlvbiBtZXRob2RzIG9uIHRoZSBjbGFzcyBvYmplY3Qgb3IgaW5zdGFuY2Ugb2JqZWN0IGNhbiBiZSBpbnZva2VkIHdpdGggdGhlIGZvbGxvd2luZ1xuICogICBwYXJhbWV0ZXJzOlxuICpcbiAqICAgLSBcImNsYXNzXCIgYWN0aW9ucyB3aXRob3V0IGEgYm9keTogYFJlc291cmNlLmFjdGlvbihbcGFyYW1ldGVyc10sIFtzdWNjZXNzXSwgW2Vycm9yXSlgXG4gKiAgIC0gXCJjbGFzc1wiIGFjdGlvbnMgd2l0aCBhIGJvZHk6IGBSZXNvdXJjZS5hY3Rpb24oW3BhcmFtZXRlcnNdLCBwb3N0RGF0YSwgW3N1Y2Nlc3NdLCBbZXJyb3JdKWBcbiAqICAgLSBpbnN0YW5jZSBhY3Rpb25zOiBgaW5zdGFuY2UuJGFjdGlvbihbcGFyYW1ldGVyc10sIFtzdWNjZXNzXSwgW2Vycm9yXSlgXG4gKlxuICpcbiAqICAgV2hlbiBjYWxsaW5nIGluc3RhbmNlIG1ldGhvZHMsIHRoZSBpbnN0YW5jZSBpdHNlbGYgaXMgdXNlZCBhcyB0aGUgcmVxdWVzdCBib2R5IChpZiB0aGUgYWN0aW9uXG4gKiAgIHNob3VsZCBoYXZlIGEgYm9keSkuIEJ5IGRlZmF1bHQsIG9ubHkgYWN0aW9ucyB1c2luZyBgUE9TVGAsIGBQVVRgIG9yIGBQQVRDSGAgaGF2ZSByZXF1ZXN0XG4gKiAgIGJvZGllcywgYnV0IHlvdSBjYW4gdXNlIHRoZSBgaGFzQm9keWAgY29uZmlndXJhdGlvbiBvcHRpb24gdG8gc3BlY2lmeSB3aGV0aGVyIGFuIGFjdGlvblxuICogICBzaG91bGQgaGF2ZSBhIGJvZHkgb3Igbm90IChyZWdhcmRsZXNzIG9mIGl0cyBIVFRQIG1ldGhvZCkuXG4gKlxuICpcbiAqICAgU3VjY2VzcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCAodmFsdWUgKE9iamVjdHxBcnJheSksIHJlc3BvbnNlSGVhZGVycyAoRnVuY3Rpb24pLFxuICogICBzdGF0dXMgKG51bWJlciksIHN0YXR1c1RleHQgKHN0cmluZykpIGFyZ3VtZW50cywgd2hlcmUgdGhlIHZhbHVlIGlzIHRoZSBwb3B1bGF0ZWQgcmVzb3VyY2VcbiAqICAgaW5zdGFuY2Ugb3IgY29sbGVjdGlvbiBvYmplY3QuIFRoZSBlcnJvciBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCAoaHR0cFJlc3BvbnNlKSBhcmd1bWVudC5cbiAqXG4gKiAgIENsYXNzIGFjdGlvbnMgcmV0dXJuIGVtcHR5IGluc3RhbmNlICh3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcyBiZWxvdykuXG4gKiAgIEluc3RhbmNlIGFjdGlvbnMgcmV0dXJuIHByb21pc2Ugb2YgdGhlIGFjdGlvbi5cbiAqXG4gKiAgIFRoZSBSZXNvdXJjZSBpbnN0YW5jZXMgYW5kIGNvbGxlY3Rpb25zIGhhdmUgdGhlc2UgYWRkaXRpb25hbCBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBgJHByb21pc2VgOiB0aGUge0BsaW5rIG5nLiRxIHByb21pc2V9IG9mIHRoZSBvcmlnaW5hbCBzZXJ2ZXIgaW50ZXJhY3Rpb24gdGhhdCBjcmVhdGVkIHRoaXNcbiAqICAgICBpbnN0YW5jZSBvciBjb2xsZWN0aW9uLlxuICpcbiAqICAgICBPbiBzdWNjZXNzLCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSBzYW1lIHJlc291cmNlIGluc3RhbmNlIG9yIGNvbGxlY3Rpb24gb2JqZWN0LFxuICogICAgIHVwZGF0ZWQgd2l0aCBkYXRhIGZyb20gc2VydmVyLiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gdXNlIGluXG4gKiAgICAge0BsaW5rIG5nUm91dGUuJHJvdXRlUHJvdmlkZXIgcmVzb2x2ZSBzZWN0aW9uIG9mICRyb3V0ZVByb3ZpZGVyLndoZW4oKX0gdG8gZGVmZXIgdmlld1xuICogICAgIHJlbmRlcmluZyB1bnRpbCB0aGUgcmVzb3VyY2UocykgYXJlIGxvYWRlZC5cbiAqXG4gKiAgICAgT24gZmFpbHVyZSwgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRodHRwIGh0dHAgcmVzcG9uc2V9IG9iamVjdCwgd2l0aG91dFxuICogICAgIHRoZSBgcmVzb3VyY2VgIHByb3BlcnR5LlxuICpcbiAqICAgICBJZiBhbiBpbnRlcmNlcHRvciBvYmplY3Qgd2FzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSB3aWxsIGluc3RlYWQgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgdmFsdWVcbiAqICAgICByZXR1cm5lZCBieSB0aGUgaW50ZXJjZXB0b3IuXG4gKlxuICogICAtIGAkcmVzb2x2ZWRgOiBgdHJ1ZWAgYWZ0ZXIgZmlyc3Qgc2VydmVyIGludGVyYWN0aW9uIGlzIGNvbXBsZXRlZCAoZWl0aGVyIHdpdGggc3VjY2VzcyBvclxuICogICAgICByZWplY3Rpb24pLCBgZmFsc2VgIGJlZm9yZSB0aGF0LiBLbm93aW5nIGlmIHRoZSBSZXNvdXJjZSBoYXMgYmVlbiByZXNvbHZlZCBpcyB1c2VmdWwgaW5cbiAqICAgICAgZGF0YS1iaW5kaW5nLlxuICpcbiAqICAgVGhlIFJlc291cmNlIGluc3RhbmNlcyBhbmQgY29sbGVjdGlvbnMgaGF2ZSB0aGVzZSBhZGRpdGlvbmFsIG1ldGhvZHM6XG4gKlxuICogICAtIGAkY2FuY2VsUmVxdWVzdGA6IElmIHRoZXJlIGlzIGEgY2FuY2VsbGFibGUsIHBlbmRpbmcgcmVxdWVzdCByZWxhdGVkIHRvIHRoZSBpbnN0YW5jZSBvclxuICogICAgICBjb2xsZWN0aW9uLCBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpbGwgYWJvcnQgdGhlIHJlcXVlc3QuXG4gKlxuICogICBUaGUgUmVzb3VyY2UgaW5zdGFuY2VzIGhhdmUgdGhlc2UgYWRkaXRpb25hbCBtZXRob2RzOlxuICpcbiAqICAgLSBgdG9KU09OYDogSXQgcmV0dXJucyBhIHNpbXBsZSBvYmplY3Qgd2l0aG91dCBhbnkgb2YgdGhlIGV4dHJhIHByb3BlcnRpZXMgYWRkZWQgYXMgcGFydCBvZlxuICogICAgIHRoZSBSZXNvdXJjZSBBUEkuIFRoaXMgb2JqZWN0IGNhbiBiZSBzZXJpYWxpemVkIHRocm91Z2gge0BsaW5rIGFuZ3VsYXIudG9Kc29ufSBzYWZlbHlcbiAqICAgICB3aXRob3V0IGF0dGFjaGluZyBBbmd1bGFyLXNwZWNpZmljIGZpZWxkcy4gTm90aWNlIHRoYXQgYEpTT04uc3RyaW5naWZ5YCAoYW5kXG4gKiAgICAgYGFuZ3VsYXIudG9Kc29uYCkgYXV0b21hdGljYWxseSB1c2UgdGhpcyBtZXRob2Qgd2hlbiBzZXJpYWxpemluZyBhIFJlc291cmNlIGluc3RhbmNlXG4gKiAgICAgKHNlZSBbTUROXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3N0cmluZ2lmeSN0b0pTT04lMjglMjlfYmVoYXZpb3IpKS5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICMgQ3JlZGl0IGNhcmQgcmVzb3VyY2VcbiAqXG4gKiBgYGBqc1xuICAgICAvLyBEZWZpbmUgQ3JlZGl0Q2FyZCBjbGFzc1xuICAgICB2YXIgQ3JlZGl0Q2FyZCA9ICRyZXNvdXJjZSgnL3VzZXIvOnVzZXJJZC9jYXJkLzpjYXJkSWQnLFxuICAgICAge3VzZXJJZDoxMjMsIGNhcmRJZDonQGlkJ30sIHtcbiAgICAgICBjaGFyZ2U6IHttZXRob2Q6J1BPU1QnLCBwYXJhbXM6e2NoYXJnZTp0cnVlfX1cbiAgICAgIH0pO1xuXG4gICAgIC8vIFdlIGNhbiByZXRyaWV2ZSBhIGNvbGxlY3Rpb24gZnJvbSB0aGUgc2VydmVyXG4gICAgIHZhciBjYXJkcyA9IENyZWRpdENhcmQucXVlcnkoZnVuY3Rpb24oKSB7XG4gICAgICAgLy8gR0VUOiAvdXNlci8xMjMvY2FyZFxuICAgICAgIC8vIHNlcnZlciByZXR1cm5zOiBbIHtpZDo0NTYsIG51bWJlcjonMTIzNCcsIG5hbWU6J1NtaXRoJ30gXTtcblxuICAgICAgIHZhciBjYXJkID0gY2FyZHNbMF07XG4gICAgICAgLy8gZWFjaCBpdGVtIGlzIGFuIGluc3RhbmNlIG9mIENyZWRpdENhcmRcbiAgICAgICBleHBlY3QoY2FyZCBpbnN0YW5jZW9mIENyZWRpdENhcmQpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgY2FyZC5uYW1lID0gXCJKLiBTbWl0aFwiO1xuICAgICAgIC8vIG5vbiBHRVQgbWV0aG9kcyBhcmUgbWFwcGVkIG9udG8gdGhlIGluc3RhbmNlc1xuICAgICAgIGNhcmQuJHNhdmUoKTtcbiAgICAgICAvLyBQT1NUOiAvdXNlci8xMjMvY2FyZC80NTYge2lkOjQ1NiwgbnVtYmVyOicxMjM0JywgbmFtZTonSi4gU21pdGgnfVxuICAgICAgIC8vIHNlcnZlciByZXR1cm5zOiB7aWQ6NDU2LCBudW1iZXI6JzEyMzQnLCBuYW1lOiAnSi4gU21pdGgnfTtcblxuICAgICAgIC8vIG91ciBjdXN0b20gbWV0aG9kIGlzIG1hcHBlZCBhcyB3ZWxsLlxuICAgICAgIGNhcmQuJGNoYXJnZSh7YW1vdW50OjkuOTl9KTtcbiAgICAgICAvLyBQT1NUOiAvdXNlci8xMjMvY2FyZC80NTY/YW1vdW50PTkuOTkmY2hhcmdlPXRydWUge2lkOjQ1NiwgbnVtYmVyOicxMjM0JywgbmFtZTonSi4gU21pdGgnfVxuICAgICB9KTtcblxuICAgICAvLyB3ZSBjYW4gY3JlYXRlIGFuIGluc3RhbmNlIGFzIHdlbGxcbiAgICAgdmFyIG5ld0NhcmQgPSBuZXcgQ3JlZGl0Q2FyZCh7bnVtYmVyOicwMTIzJ30pO1xuICAgICBuZXdDYXJkLm5hbWUgPSBcIk1pa2UgU21pdGhcIjtcbiAgICAgbmV3Q2FyZC4kc2F2ZSgpO1xuICAgICAvLyBQT1NUOiAvdXNlci8xMjMvY2FyZCB7bnVtYmVyOicwMTIzJywgbmFtZTonTWlrZSBTbWl0aCd9XG4gICAgIC8vIHNlcnZlciByZXR1cm5zOiB7aWQ6Nzg5LCBudW1iZXI6JzAxMjMnLCBuYW1lOiAnTWlrZSBTbWl0aCd9O1xuICAgICBleHBlY3QobmV3Q2FyZC5pZCkudG9FcXVhbCg3ODkpO1xuICogYGBgXG4gKlxuICogVGhlIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoaXMgZnVuY3Rpb24gZXhlY3V0aW9uIGlzIGEgcmVzb3VyY2UgXCJjbGFzc1wiIHdoaWNoIGhhcyBcInN0YXRpY1wiIG1ldGhvZFxuICogZm9yIGVhY2ggYWN0aW9uIGluIHRoZSBkZWZpbml0aW9uLlxuICpcbiAqIENhbGxpbmcgdGhlc2UgbWV0aG9kcyBpbnZva2UgYCRodHRwYCBvbiB0aGUgYHVybGAgdGVtcGxhdGUgd2l0aCB0aGUgZ2l2ZW4gYG1ldGhvZGAsIGBwYXJhbXNgIGFuZFxuICogYGhlYWRlcnNgLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogIyBVc2VyIHJlc291cmNlXG4gKlxuICogV2hlbiB0aGUgZGF0YSBpcyByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXIgdGhlbiB0aGUgb2JqZWN0IGlzIGFuIGluc3RhbmNlIG9mIHRoZSByZXNvdXJjZSB0eXBlIGFuZFxuICogYWxsIG9mIHRoZSBub24tR0VUIG1ldGhvZHMgYXJlIGF2YWlsYWJsZSB3aXRoIGAkYCBwcmVmaXguIFRoaXMgYWxsb3dzIHlvdSB0byBlYXNpbHkgc3VwcG9ydCBDUlVEXG4gKiBvcGVyYXRpb25zIChjcmVhdGUsIHJlYWQsIHVwZGF0ZSwgZGVsZXRlKSBvbiBzZXJ2ZXItc2lkZSBkYXRhLlxuXG4gICBgYGBqc1xuICAgICB2YXIgVXNlciA9ICRyZXNvdXJjZSgnL3VzZXIvOnVzZXJJZCcsIHt1c2VySWQ6J0BpZCd9KTtcbiAgICAgVXNlci5nZXQoe3VzZXJJZDoxMjN9LCBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgdXNlci5hYmMgPSB0cnVlO1xuICAgICAgIHVzZXIuJHNhdmUoKTtcbiAgICAgfSk7XG4gICBgYGBcbiAqXG4gKiBJdCdzIHdvcnRoIG5vdGluZyB0aGF0IHRoZSBzdWNjZXNzIGNhbGxiYWNrIGZvciBgZ2V0YCwgYHF1ZXJ5YCBhbmQgb3RoZXIgbWV0aG9kcyBnZXRzIHBhc3NlZFxuICogaW4gdGhlIHJlc3BvbnNlIHRoYXQgY2FtZSBmcm9tIHRoZSBzZXJ2ZXIgYXMgd2VsbCBhcyAkaHR0cCBoZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLCBzbyBvbmVcbiAqIGNvdWxkIHJld3JpdGUgdGhlIGFib3ZlIGV4YW1wbGUgYW5kIGdldCBhY2Nlc3MgdG8gaHR0cCBoZWFkZXJzIGFzOlxuICpcbiAgIGBgYGpzXG4gICAgIHZhciBVc2VyID0gJHJlc291cmNlKCcvdXNlci86dXNlcklkJywge3VzZXJJZDonQGlkJ30pO1xuICAgICBVc2VyLmdldCh7dXNlcklkOjEyM30sIGZ1bmN0aW9uKHVzZXIsIGdldFJlc3BvbnNlSGVhZGVycyl7XG4gICAgICAgdXNlci5hYmMgPSB0cnVlO1xuICAgICAgIHVzZXIuJHNhdmUoZnVuY3Rpb24odXNlciwgcHV0UmVzcG9uc2VIZWFkZXJzKSB7XG4gICAgICAgICAvL3VzZXIgPT4gc2F2ZWQgdXNlciBvYmplY3RcbiAgICAgICAgIC8vcHV0UmVzcG9uc2VIZWFkZXJzID0+ICRodHRwIGhlYWRlciBnZXR0ZXJcbiAgICAgICB9KTtcbiAgICAgfSk7XG4gICBgYGBcbiAqXG4gKiBZb3UgY2FuIGFsc28gYWNjZXNzIHRoZSByYXcgYCRodHRwYCBwcm9taXNlIHZpYSB0aGUgYCRwcm9taXNlYCBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0IHJldHVybmVkXG4gKlxuICAgYGBgXG4gICAgIHZhciBVc2VyID0gJHJlc291cmNlKCcvdXNlci86dXNlcklkJywge3VzZXJJZDonQGlkJ30pO1xuICAgICBVc2VyLmdldCh7dXNlcklkOjEyM30pXG4gICAgICAgICAuJHByb21pc2UudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICRzY29wZS51c2VyID0gdXNlcjtcbiAgICAgICAgIH0pO1xuICAgYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAjIENyZWF0aW5nIGEgY3VzdG9tICdQVVQnIHJlcXVlc3RcbiAqXG4gKiBJbiB0aGlzIGV4YW1wbGUgd2UgY3JlYXRlIGEgY3VzdG9tIG1ldGhvZCBvbiBvdXIgcmVzb3VyY2UgdG8gbWFrZSBhIFBVVCByZXF1ZXN0XG4gKiBgYGBqc1xuICogICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nUmVzb3VyY2UnLCAnbmdSb3V0ZSddKTtcbiAqXG4gKiAgICAvLyBTb21lIEFQSXMgZXhwZWN0IGEgUFVUIHJlcXVlc3QgaW4gdGhlIGZvcm1hdCBVUkwvb2JqZWN0L0lEXG4gKiAgICAvLyBIZXJlIHdlIGFyZSBjcmVhdGluZyBhbiAndXBkYXRlJyBtZXRob2RcbiAqICAgIGFwcC5mYWN0b3J5KCdOb3RlcycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24oJHJlc291cmNlKSB7XG4gKiAgICByZXR1cm4gJHJlc291cmNlKCcvbm90ZXMvOmlkJywgbnVsbCxcbiAqICAgICAgICB7XG4gKiAgICAgICAgICAgICd1cGRhdGUnOiB7IG1ldGhvZDonUFVUJyB9XG4gKiAgICAgICAgfSk7XG4gKiAgICB9XSk7XG4gKlxuICogICAgLy8gSW4gb3VyIGNvbnRyb2xsZXIgd2UgZ2V0IHRoZSBJRCBmcm9tIHRoZSBVUkwgdXNpbmcgbmdSb3V0ZSBhbmQgJHJvdXRlUGFyYW1zXG4gKiAgICAvLyBXZSBwYXNzIGluICRyb3V0ZVBhcmFtcyBhbmQgb3VyIE5vdGVzIGZhY3RvcnkgYWxvbmcgd2l0aCAkc2NvcGVcbiAqICAgIGFwcC5jb250cm9sbGVyKCdOb3Rlc0N0cmwnLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnTm90ZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRyb3V0ZVBhcmFtcywgTm90ZXMpIHtcbiAqICAgIC8vIEZpcnN0IGdldCBhIG5vdGUgb2JqZWN0IGZyb20gdGhlIGZhY3RvcnlcbiAqICAgIHZhciBub3RlID0gTm90ZXMuZ2V0KHsgaWQ6JHJvdXRlUGFyYW1zLmlkIH0pO1xuICogICAgJGlkID0gbm90ZS5pZDtcbiAqXG4gKiAgICAvLyBOb3cgY2FsbCB1cGRhdGUgcGFzc2luZyBpbiB0aGUgSUQgZmlyc3QgdGhlbiB0aGUgb2JqZWN0IHlvdSBhcmUgdXBkYXRpbmdcbiAqICAgIE5vdGVzLnVwZGF0ZSh7IGlkOiRpZCB9LCBub3RlKTtcbiAqXG4gKiAgICAvLyBUaGlzIHdpbGwgUFVUIC9ub3Rlcy9JRCB3aXRoIHRoZSBub3RlIG9iamVjdCBpbiB0aGUgcmVxdWVzdCBwYXlsb2FkXG4gKiAgICB9XSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICMgQ2FuY2VsbGluZyByZXF1ZXN0c1xuICpcbiAqIElmIGFuIGFjdGlvbidzIGNvbmZpZ3VyYXRpb24gc3BlY2lmaWVzIHRoYXQgaXQgaXMgY2FuY2VsbGFibGUsIHlvdSBjYW4gY2FuY2VsIHRoZSByZXF1ZXN0IHJlbGF0ZWRcbiAqIHRvIGFuIGluc3RhbmNlIG9yIGNvbGxlY3Rpb24gKGFzIGxvbmcgYXMgaXQgaXMgYSByZXN1bHQgb2YgYSBcIm5vbi1pbnN0YW5jZVwiIGNhbGwpOlxuICpcbiAgIGBgYGpzXG4gICAgIC8vIC4uLmRlZmluaW5nIHRoZSBgSG90ZWxgIHJlc291cmNlLi4uXG4gICAgIHZhciBIb3RlbCA9ICRyZXNvdXJjZSgnL2FwaS9ob3RlbC86aWQnLCB7aWQ6ICdAaWQnfSwge1xuICAgICAgIC8vIExldCdzIG1ha2UgdGhlIGBxdWVyeSgpYCBtZXRob2QgY2FuY2VsbGFibGVcbiAgICAgICBxdWVyeToge21ldGhvZDogJ2dldCcsIGlzQXJyYXk6IHRydWUsIGNhbmNlbGxhYmxlOiB0cnVlfVxuICAgICB9KTtcblxuICAgICAvLyAuLi5zb21ld2hlcmUgaW4gdGhlIFBsYW5WYWNhdGlvbkNvbnRyb2xsZXIuLi5cbiAgICAgLi4uXG4gICAgIHRoaXMub25EZXN0aW5hdGlvbkNoYW5nZWQgPSBmdW5jdGlvbiBvbkRlc3RpbmF0aW9uQ2hhbmdlZChkZXN0aW5hdGlvbikge1xuICAgICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgYW55IHBlbmRpbmcgcmVxdWVzdCBmb3IgaG90ZWxzXG4gICAgICAgLy8gaW4gYSBkaWZmZXJlbnQgZGVzdGluYXRpb24gYW55IG1vcmVcbiAgICAgICB0aGlzLmF2YWlsYWJsZUhvdGVscy4kY2FuY2VsUmVxdWVzdCgpO1xuXG4gICAgICAgLy8gTGV0J3MgcXVlcnkgZm9yIGhvdGVscyBpbiAnPGRlc3RpbmF0aW9uPidcbiAgICAgICAvLyAoY2FsbHM6IC9hcGkvaG90ZWw/bG9jYXRpb249PGRlc3RpbmF0aW9uPilcbiAgICAgICB0aGlzLmF2YWlsYWJsZUhvdGVscyA9IEhvdGVsLnF1ZXJ5KHtsb2NhdGlvbjogZGVzdGluYXRpb259KTtcbiAgICAgfTtcbiAgIGBgYFxuICpcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ25nUmVzb3VyY2UnLCBbJ25nJ10pLlxuICBpbmZvKHsgYW5ndWxhclZlcnNpb246ICcxLjYuNCcgfSkuXG4gIHByb3ZpZGVyKCckcmVzb3VyY2UnLCBmdW5jdGlvbiBSZXNvdXJjZVByb3ZpZGVyKCkge1xuICAgIHZhciBQUk9UT0NPTF9BTkRfSVBWNl9SRUdFWCA9IC9eaHR0cHM/OlxcL1xcL1xcW1teXFxdXSpdW14vXSovO1xuXG4gICAgdmFyIHByb3ZpZGVyID0gdGhpcztcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAqIEBuYW1lICRyZXNvdXJjZVByb3ZpZGVyI2RlZmF1bHRzXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogT2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdCBvcHRpb25zIHVzZWQgd2hlbiBjcmVhdGluZyBgJHJlc291cmNlYCBpbnN0YW5jZXMuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZXMgc2F0aXNmeSBhIHdpZGUgcmFuZ2Ugb2YgdXNlY2FzZXMsIGJ1dCB5b3UgbWF5IGNob29zZSB0byBvdmVyd3JpdGUgYW55IG9mXG4gICAgICogdGhlbSB0byBmdXJ0aGVyIGN1c3RvbWl6ZSB5b3VyIGluc3RhbmNlcy4gVGhlIGF2YWlsYWJsZSBwcm9wZXJ0aWVzIGFyZTpcbiAgICAgKlxuICAgICAqIC0gKipzdHJpcFRyYWlsaW5nU2xhc2hlcyoqIOKAkyBge2Jvb2xlYW59YCDigJMgSWYgdHJ1ZSwgdGhlbiB0aGUgdHJhaWxpbmcgc2xhc2hlcyBmcm9tIGFueVxuICAgICAqICAgY2FsY3VsYXRlZCBVUkwgd2lsbCBiZSBzdHJpcHBlZC48YnIgLz5cbiAgICAgKiAgIChEZWZhdWx0cyB0byB0cnVlLilcbiAgICAgKiAtICoqY2FuY2VsbGFibGUqKiDigJMgYHtib29sZWFufWAg4oCTIElmIHRydWUsIHRoZSByZXF1ZXN0IG1hZGUgYnkgYSBcIm5vbi1pbnN0YW5jZVwiIGNhbGwgd2lsbCBiZVxuICAgICAqICAgY2FuY2VsbGVkIChpZiBub3QgYWxyZWFkeSBjb21wbGV0ZWQpIGJ5IGNhbGxpbmcgYCRjYW5jZWxSZXF1ZXN0KClgIG9uIHRoZSBjYWxsJ3MgcmV0dXJuXG4gICAgICogICB2YWx1ZS4gRm9yIG1vcmUgZGV0YWlscywgc2VlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZX0uIFRoaXMgY2FuIGJlIG92ZXJ3cml0dGVuIHBlclxuICAgICAqICAgcmVzb3VyY2UgY2xhc3Mgb3IgYWN0aW9uLjxiciAvPlxuICAgICAqICAgKERlZmF1bHRzIHRvIGZhbHNlLilcbiAgICAgKiAtICoqYWN0aW9ucyoqIC0gYHtPYmplY3QuPE9iamVjdD59YCAtIEEgaGFzaCB3aXRoIGRlZmF1bHQgYWN0aW9ucyBkZWNsYXJhdGlvbnMuIEFjdGlvbnMgYXJlXG4gICAgICogICBoaWdoLWxldmVsIG1ldGhvZHMgY29ycmVzcG9uZGluZyB0byBSRVNUZnVsIGFjdGlvbnMvbWV0aG9kcyBvbiByZXNvdXJjZXMuIEFuIGFjdGlvbiBtYXlcbiAgICAgKiAgIHNwZWNpZnkgd2hhdCBIVFRQIG1ldGhvZCB0byB1c2UsIHdoYXQgVVJMIHRvIGhpdCwgaWYgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIGEgc2luZ2xlXG4gICAgICogICBvYmplY3Qgb3IgYSBjb2xsZWN0aW9uIChhcnJheSkgb2Ygb2JqZWN0cyBldGMuIEZvciBtb3JlIGRldGFpbHMsIHNlZVxuICAgICAqICAge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlfS4gVGhlIGFjdGlvbnMgY2FuIGFsc28gYmUgZW5oYW5jZWQgb3Igb3ZlcndyaXR0ZW4gcGVyIHJlc291cmNlXG4gICAgICogICBjbGFzcy48YnIgLz5cbiAgICAgKiAgIFRoZSBkZWZhdWx0IGFjdGlvbnMgYXJlOlxuICAgICAqICAgYGBganNcbiAgICAgKiAgIHtcbiAgICAgKiAgICAgZ2V0OiB7bWV0aG9kOiAnR0VUJ30sXG4gICAgICogICAgIHNhdmU6IHttZXRob2Q6ICdQT1NUJ30sXG4gICAgICogICAgIHF1ZXJ5OiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZX0sXG4gICAgICogICAgIHJlbW92ZToge21ldGhvZDogJ0RFTEVURSd9LFxuICAgICAqICAgICBkZWxldGU6IHttZXRob2Q6ICdERUxFVEUnfVxuICAgICAqICAgfVxuICAgICAqICAgYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlLCB5b3UgY2FuIHNwZWNpZnkgYSBuZXcgYHVwZGF0ZWAgYWN0aW9uIHRoYXQgdXNlcyB0aGUgYFBVVGAgSFRUUCB2ZXJiOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIGFuZ3VsYXIuXG4gICAgICogICAgIG1vZHVsZSgnbXlBcHAnKS5cbiAgICAgKiAgICAgY29uZmlnKFsnJHJlc291cmNlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHJlc291cmNlUHJvdmlkZXIpIHtcbiAgICAgKiAgICAgICAkcmVzb3VyY2VQcm92aWRlci5kZWZhdWx0cy5hY3Rpb25zLnVwZGF0ZSA9IHtcbiAgICAgKiAgICAgICAgIG1ldGhvZDogJ1BVVCdcbiAgICAgKiAgICAgICB9O1xuICAgICAqICAgICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE9yIHlvdSBjYW4gZXZlbiBvdmVyd3JpdGUgdGhlIHdob2xlIGBhY3Rpb25zYCBsaXN0IGFuZCBzcGVjaWZ5IHlvdXIgb3duOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIGFuZ3VsYXIuXG4gICAgICogICAgIG1vZHVsZSgnbXlBcHAnKS5cbiAgICAgKiAgICAgY29uZmlnKFsnJHJlc291cmNlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHJlc291cmNlUHJvdmlkZXIpIHtcbiAgICAgKiAgICAgICAkcmVzb3VyY2VQcm92aWRlci5kZWZhdWx0cy5hY3Rpb25zID0ge1xuICAgICAqICAgICAgICAgY3JlYXRlOiB7bWV0aG9kOiAnUE9TVCd9LFxuICAgICAqICAgICAgICAgZ2V0OiAgICB7bWV0aG9kOiAnR0VUJ30sXG4gICAgICogICAgICAgICBnZXRBbGw6IHttZXRob2Q6ICdHRVQnLCBpc0FycmF5OnRydWV9LFxuICAgICAqICAgICAgICAgdXBkYXRlOiB7bWV0aG9kOiAnUFVUJ30sXG4gICAgICogICAgICAgICBkZWxldGU6IHttZXRob2Q6ICdERUxFVEUnfVxuICAgICAqICAgICAgIH07XG4gICAgICogICAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIC8vIFN0cmlwIHNsYXNoZXMgYnkgZGVmYXVsdFxuICAgICAgc3RyaXBUcmFpbGluZ1NsYXNoZXM6IHRydWUsXG5cbiAgICAgIC8vIE1ha2Ugbm9uLWluc3RhbmNlIHJlcXVlc3RzIGNhbmNlbGxhYmxlICh2aWEgYCRjYW5jZWxSZXF1ZXN0KClgKVxuICAgICAgY2FuY2VsbGFibGU6IGZhbHNlLFxuXG4gICAgICAvLyBEZWZhdWx0IGFjdGlvbnMgY29uZmlndXJhdGlvblxuICAgICAgYWN0aW9uczoge1xuICAgICAgICAnZ2V0Jzoge21ldGhvZDogJ0dFVCd9LFxuICAgICAgICAnc2F2ZSc6IHttZXRob2Q6ICdQT1NUJ30sXG4gICAgICAgICdxdWVyeSc6IHttZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlfSxcbiAgICAgICAgJ3JlbW92ZSc6IHttZXRob2Q6ICdERUxFVEUnfSxcbiAgICAgICAgJ2RlbGV0ZSc6IHttZXRob2Q6ICdERUxFVEUnfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgJyRsb2cnLCAnJHEnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkaHR0cCwgJGxvZywgJHEsICR0aW1lb3V0KSB7XG5cbiAgICAgIHZhciBub29wID0gYW5ndWxhci5ub29wLFxuICAgICAgICAgIGZvckVhY2ggPSBhbmd1bGFyLmZvckVhY2gsXG4gICAgICAgICAgZXh0ZW5kID0gYW5ndWxhci5leHRlbmQsXG4gICAgICAgICAgY29weSA9IGFuZ3VsYXIuY29weSxcbiAgICAgICAgICBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5LFxuICAgICAgICAgIGlzRGVmaW5lZCA9IGFuZ3VsYXIuaXNEZWZpbmVkLFxuICAgICAgICAgIGlzRnVuY3Rpb24gPSBhbmd1bGFyLmlzRnVuY3Rpb24sXG4gICAgICAgICAgaXNOdW1iZXIgPSBhbmd1bGFyLmlzTnVtYmVyLFxuICAgICAgICAgIGVuY29kZVVyaVF1ZXJ5ID0gYW5ndWxhci4kJGVuY29kZVVyaVF1ZXJ5LFxuICAgICAgICAgIGVuY29kZVVyaVNlZ21lbnQgPSBhbmd1bGFyLiQkZW5jb2RlVXJpU2VnbWVudDtcblxuICAgICAgZnVuY3Rpb24gUm91dGUodGVtcGxhdGUsIGRlZmF1bHRzKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IGV4dGVuZCh7fSwgcHJvdmlkZXIuZGVmYXVsdHMsIGRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy51cmxQYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgUm91dGUucHJvdG90eXBlID0ge1xuICAgICAgICBzZXRVcmxQYXJhbXM6IGZ1bmN0aW9uKGNvbmZpZywgcGFyYW1zLCBhY3Rpb25VcmwpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICB1cmwgPSBhY3Rpb25VcmwgfHwgc2VsZi50ZW1wbGF0ZSxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVuY29kZWRWYWwsXG4gICAgICAgICAgICBwcm90b2NvbEFuZElwdjYgPSAnJztcblxuICAgICAgICAgIHZhciB1cmxQYXJhbXMgPSBzZWxmLnVybFBhcmFtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZm9yRWFjaCh1cmwuc3BsaXQoL1xcVy8pLCBmdW5jdGlvbihwYXJhbSkge1xuICAgICAgICAgICAgaWYgKHBhcmFtID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgICAgICAgICAgIHRocm93ICRyZXNvdXJjZU1pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCBwYXJhbWV0ZXIgbmFtZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKG5ldyBSZWdFeHAoJ15cXFxcZCskJykudGVzdChwYXJhbSkpICYmIHBhcmFtICYmXG4gICAgICAgICAgICAgIChuZXcgUmVnRXhwKCcoXnxbXlxcXFxcXFxcXSk6JyArIHBhcmFtICsgJyhcXFxcV3wkKScpLnRlc3QodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsUGFyYW1zW3BhcmFtXSA9IHtcbiAgICAgICAgICAgICAgICBpc1F1ZXJ5UGFyYW1WYWx1ZTogKG5ldyBSZWdFeHAoJ1xcXFw/Lio9OicgKyBwYXJhbSArICcoPzpcXFxcV3wkKScpKS50ZXN0KHVybClcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxcXDovZywgJzonKTtcbiAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShQUk9UT0NPTF9BTkRfSVBWNl9SRUdFWCwgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgICAgICAgIHByb3RvY29sQW5kSXB2NiA9IG1hdGNoO1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgICAgICAgIGZvckVhY2goc2VsZi51cmxQYXJhbXMsIGZ1bmN0aW9uKHBhcmFtSW5mbywgdXJsUGFyYW0pIHtcbiAgICAgICAgICAgIHZhbCA9IHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSh1cmxQYXJhbSkgPyBwYXJhbXNbdXJsUGFyYW1dIDogc2VsZi5kZWZhdWx0c1t1cmxQYXJhbV07XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbCkgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmIChwYXJhbUluZm8uaXNRdWVyeVBhcmFtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBlbmNvZGVkVmFsID0gZW5jb2RlVXJpUXVlcnkodmFsLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmNvZGVkVmFsID0gZW5jb2RlVXJpU2VnbWVudCh2YWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKG5ldyBSZWdFeHAoJzonICsgdXJsUGFyYW0gKyAnKFxcXFxXfCQpJywgJ2cnKSwgZnVuY3Rpb24obWF0Y2gsIHAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZWRWYWwgKyBwMTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShuZXcgUmVnRXhwKCcoLz8pOicgKyB1cmxQYXJhbSArICcoXFxcXFd8JCknLCAnZycpLCBmdW5jdGlvbihtYXRjaCxcbiAgICAgICAgICAgICAgICAgIGxlYWRpbmdTbGFzaGVzLCB0YWlsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhaWwuY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YWlsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGVhZGluZ1NsYXNoZXMgKyB0YWlsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBzdHJpcCB0cmFpbGluZyBzbGFzaGVzIGFuZCBzZXQgdGhlIHVybCAodW5sZXNzIHRoaXMgYmVoYXZpb3IgaXMgc3BlY2lmaWNhbGx5IGRpc2FibGVkKVxuICAgICAgICAgIGlmIChzZWxmLmRlZmF1bHRzLnN0cmlwVHJhaWxpbmdTbGFzaGVzKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFwvKyQvLCAnJykgfHwgJy8nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENvbGxhcHNlIGAvLmAgaWYgZm91bmQgaW4gdGhlIGxhc3QgVVJMIHBhdGggc2VnbWVudCBiZWZvcmUgdGhlIHF1ZXJ5LlxuICAgICAgICAgIC8vIEUuZy4gYGh0dHA6Ly91cmwuY29tL2lkLy5mb3JtYXQ/cT14YCBiZWNvbWVzIGBodHRwOi8vdXJsLmNvbS9pZC5mb3JtYXQ/cT14YC5cbiAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFwvXFwuKD89XFx3KygkfFxcPykpLywgJy4nKTtcbiAgICAgICAgICAvLyBSZXBsYWNlIGVzY2FwZWQgYC9cXC5gIHdpdGggYC8uYC5cbiAgICAgICAgICAvLyAoSWYgYFxcLmAgY29tZXMgZnJvbSBhIHBhcmFtIHZhbHVlLCBpdCB3aWxsIGJlIGVuY29kZWQgYXMgYCU1Qy5gLilcbiAgICAgICAgICBjb25maWcudXJsID0gcHJvdG9jb2xBbmRJcHY2ICsgdXJsLnJlcGxhY2UoL1xcLyhcXFxcfCU1QylcXC4vLCAnLy4nKTtcblxuXG4gICAgICAgICAgLy8gc2V0IHBhcmFtcyAtIGRlbGVnYXRlIHBhcmFtIGVuY29kaW5nIHRvICRodHRwXG4gICAgICAgICAgZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmICghc2VsZi51cmxQYXJhbXNba2V5XSkge1xuICAgICAgICAgICAgICBjb25maWcucGFyYW1zID0gY29uZmlnLnBhcmFtcyB8fCB7fTtcbiAgICAgICAgICAgICAgY29uZmlnLnBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cblxuICAgICAgZnVuY3Rpb24gcmVzb3VyY2VGYWN0b3J5KHVybCwgcGFyYW1EZWZhdWx0cywgYWN0aW9ucywgb3B0aW9ucykge1xuICAgICAgICB2YXIgcm91dGUgPSBuZXcgUm91dGUodXJsLCBvcHRpb25zKTtcblxuICAgICAgICBhY3Rpb25zID0gZXh0ZW5kKHt9LCBwcm92aWRlci5kZWZhdWx0cy5hY3Rpb25zLCBhY3Rpb25zKTtcblxuICAgICAgICBmdW5jdGlvbiBleHRyYWN0UGFyYW1zKGRhdGEsIGFjdGlvblBhcmFtcykge1xuICAgICAgICAgIHZhciBpZHMgPSB7fTtcbiAgICAgICAgICBhY3Rpb25QYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtRGVmYXVsdHMsIGFjdGlvblBhcmFtcyk7XG4gICAgICAgICAgZm9yRWFjaChhY3Rpb25QYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkgeyB2YWx1ZSA9IHZhbHVlKGRhdGEpOyB9XG4gICAgICAgICAgICBpZHNba2V5XSA9IHZhbHVlICYmIHZhbHVlLmNoYXJBdCAmJiB2YWx1ZS5jaGFyQXQoMCkgPT09ICdAJyA/XG4gICAgICAgICAgICAgIGxvb2t1cERvdHRlZFBhdGgoZGF0YSwgdmFsdWUuc3Vic3RyKDEpKSA6IHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBpZHM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZWZhdWx0UmVzcG9uc2VJbnRlcmNlcHRvcihyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5yZXNvdXJjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIFJlc291cmNlKHZhbHVlKSB7XG4gICAgICAgICAgc2hhbGxvd0NsZWFyQW5kQ29weSh2YWx1ZSB8fCB7fSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBSZXNvdXJjZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBleHRlbmQoe30sIHRoaXMpO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhLiRwcm9taXNlO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhLiRyZXNvbHZlZDtcbiAgICAgICAgICBkZWxldGUgZGF0YS4kY2FuY2VsUmVxdWVzdDtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfTtcblxuICAgICAgICBmb3JFYWNoKGFjdGlvbnMsIGZ1bmN0aW9uKGFjdGlvbiwgbmFtZSkge1xuICAgICAgICAgIHZhciBoYXNCb2R5ID0gYWN0aW9uLmhhc0JvZHkgPT09IHRydWUgfHwgKGFjdGlvbi5oYXNCb2R5ICE9PSBmYWxzZSAmJiAvXihQT1NUfFBVVHxQQVRDSCkkL2kudGVzdChhY3Rpb24ubWV0aG9kKSk7XG4gICAgICAgICAgdmFyIG51bWVyaWNUaW1lb3V0ID0gYWN0aW9uLnRpbWVvdXQ7XG4gICAgICAgICAgdmFyIGNhbmNlbGxhYmxlID0gaXNEZWZpbmVkKGFjdGlvbi5jYW5jZWxsYWJsZSkgP1xuICAgICAgICAgICAgICBhY3Rpb24uY2FuY2VsbGFibGUgOiByb3V0ZS5kZWZhdWx0cy5jYW5jZWxsYWJsZTtcblxuICAgICAgICAgIGlmIChudW1lcmljVGltZW91dCAmJiAhaXNOdW1iZXIobnVtZXJpY1RpbWVvdXQpKSB7XG4gICAgICAgICAgICAkbG9nLmRlYnVnKCduZ1Jlc291cmNlOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAnICBPbmx5IG51bWVyaWMgdmFsdWVzIGFyZSBhbGxvd2VkIGFzIGB0aW1lb3V0YC5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgJyAgUHJvbWlzZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gJHJlc291cmNlLCBiZWNhdXNlIHRoZSBzYW1lIHZhbHVlIHdvdWxkICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAnYmUgdXNlZCBmb3IgbXVsdGlwbGUgcmVxdWVzdHMuIElmIHlvdSBhcmUgbG9va2luZyBmb3IgYSB3YXkgdG8gY2FuY2VsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgY2FuY2VsbGFibGVgIG9wdGlvbi4nKTtcbiAgICAgICAgICAgIGRlbGV0ZSBhY3Rpb24udGltZW91dDtcbiAgICAgICAgICAgIG51bWVyaWNUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBSZXNvdXJjZVtuYW1lXSA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0KSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge30sIGRhdGEsIHN1Y2Nlc3MsIGVycm9yO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGVycm9yID0gYTQ7XG4gICAgICAgICAgICAgICAgc3VjY2VzcyA9IGEzO1xuICAgICAgICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oYTIpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihhMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IGExO1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGEyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IGEyO1xuICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhMztcbiAgICAgICAgICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGFyYW1zID0gYTE7XG4gICAgICAgICAgICAgICAgICBkYXRhID0gYTI7XG4gICAgICAgICAgICAgICAgICBzdWNjZXNzID0gYTM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oYTEpKSBzdWNjZXNzID0gYTE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGFzQm9keSkgZGF0YSA9IGExO1xuICAgICAgICAgICAgICAgIGVsc2UgcGFyYW1zID0gYTE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMDogYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgJHJlc291cmNlTWluRXJyKCdiYWRhcmdzJyxcbiAgICAgICAgICAgICAgICAgICdFeHBlY3RlZCB1cCB0byA0IGFyZ3VtZW50cyBbcGFyYW1zLCBkYXRhLCBzdWNjZXNzLCBlcnJvcl0sIGdvdCB7MH0gYXJndW1lbnRzJyxcbiAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaXNJbnN0YW5jZUNhbGwgPSB0aGlzIGluc3RhbmNlb2YgUmVzb3VyY2U7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpc0luc3RhbmNlQ2FsbCA/IGRhdGEgOiAoYWN0aW9uLmlzQXJyYXkgPyBbXSA6IG5ldyBSZXNvdXJjZShkYXRhKSk7XG4gICAgICAgICAgICB2YXIgaHR0cENvbmZpZyA9IHt9O1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3IgPSBhY3Rpb24uaW50ZXJjZXB0b3IgJiYgYWN0aW9uLmludGVyY2VwdG9yLnJlc3BvbnNlIHx8XG4gICAgICAgICAgICAgIGRlZmF1bHRSZXNwb25zZUludGVyY2VwdG9yO1xuICAgICAgICAgICAgdmFyIHJlc3BvbnNlRXJyb3JJbnRlcmNlcHRvciA9IGFjdGlvbi5pbnRlcmNlcHRvciAmJiBhY3Rpb24uaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvciB8fFxuICAgICAgICAgICAgICB1bmRlZmluZWQ7XG4gICAgICAgICAgICB2YXIgaGFzRXJyb3IgPSAhIWVycm9yO1xuICAgICAgICAgICAgdmFyIGhhc1Jlc3BvbnNlRXJyb3JJbnRlcmNlcHRvciA9ICEhcmVzcG9uc2VFcnJvckludGVyY2VwdG9yO1xuICAgICAgICAgICAgdmFyIHRpbWVvdXREZWZlcnJlZDtcbiAgICAgICAgICAgIHZhciBudW1lcmljVGltZW91dFByb21pc2U7XG5cbiAgICAgICAgICAgIGZvckVhY2goYWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGh0dHBDb25maWdba2V5XSA9IGNvcHkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncGFyYW1zJzpcbiAgICAgICAgICAgICAgICBjYXNlICdpc0FycmF5JzpcbiAgICAgICAgICAgICAgICBjYXNlICdpbnRlcmNlcHRvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnY2FuY2VsbGFibGUnOlxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWlzSW5zdGFuY2VDYWxsICYmIGNhbmNlbGxhYmxlKSB7XG4gICAgICAgICAgICAgIHRpbWVvdXREZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgIGh0dHBDb25maWcudGltZW91dCA9IHRpbWVvdXREZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgICAgICAgIGlmIChudW1lcmljVGltZW91dCkge1xuICAgICAgICAgICAgICAgIG51bWVyaWNUaW1lb3V0UHJvbWlzZSA9ICR0aW1lb3V0KHRpbWVvdXREZWZlcnJlZC5yZXNvbHZlLCBudW1lcmljVGltZW91dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc0JvZHkpIGh0dHBDb25maWcuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICByb3V0ZS5zZXRVcmxQYXJhbXMoaHR0cENvbmZpZyxcbiAgICAgICAgICAgICAgZXh0ZW5kKHt9LCBleHRyYWN0UGFyYW1zKGRhdGEsIGFjdGlvbi5wYXJhbXMgfHwge30pLCBwYXJhbXMpLFxuICAgICAgICAgICAgICBhY3Rpb24udXJsKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2UgPSAkaHR0cChodHRwQ29uZmlnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gY29udmVydCBhY3Rpb24uaXNBcnJheSB0byBib29sZWFuIGluIGNhc2UgaXQgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YSkgIT09ICghIWFjdGlvbi5pc0FycmF5KSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJHJlc291cmNlTWluRXJyKCdiYWRjZmcnLFxuICAgICAgICAgICAgICAgICAgICAgICdFcnJvciBpbiByZXNvdXJjZSBjb25maWd1cmF0aW9uIGZvciBhY3Rpb24gYHswfWAuIEV4cGVjdGVkIHJlc3BvbnNlIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICdjb250YWluIGFuIHsxfSBidXQgZ290IGFuIHsyfSAoUmVxdWVzdDogezN9IHs0fSknLCBuYW1lLCBhY3Rpb24uaXNBcnJheSA/ICdhcnJheScgOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheShkYXRhKSA/ICdhcnJheScgOiAnb2JqZWN0JywgaHR0cENvbmZpZy5tZXRob2QsIGh0dHBDb25maWcudXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5pc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgZm9yRWFjaChkYXRhLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKG5ldyBSZXNvdXJjZShpdGVtKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gVmFsaWQgSlNPTiB2YWx1ZXMgbWF5IGJlIHN0cmluZyBsaXRlcmFscywgYW5kIHRoZXNlIHNob3VsZCBub3QgYmUgY29udmVydGVkXG4gICAgICAgICAgICAgICAgICAgICAgLy8gaW50byBvYmplY3RzLiBUaGVzZSBpdGVtcyB3aWxsIG5vdCBoYXZlIGFjY2VzcyB0byB0aGUgUmVzb3VyY2UgcHJvdG90eXBlXG4gICAgICAgICAgICAgICAgICAgICAgLy8gbWV0aG9kcywgYnV0IHVuZm9ydHVuYXRlbHkgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSB2YWx1ZS4kcHJvbWlzZTsgICAgIC8vIFNhdmUgdGhlIHByb21pc2VcbiAgICAgICAgICAgICAgICAgIHNoYWxsb3dDbGVhckFuZENvcHkoZGF0YSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUuJHByb21pc2UgPSBwcm9taXNlOyAgICAgICAgIC8vIFJlc3RvcmUgdGhlIHByb21pc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzcG9uc2UucmVzb3VyY2UgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2VbJ2ZpbmFsbHknXShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFsdWUuJHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKCFpc0luc3RhbmNlQ2FsbCAmJiBjYW5jZWxsYWJsZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLiRjYW5jZWxSZXF1ZXN0ID0gbm9vcDtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwobnVtZXJpY1RpbWVvdXRQcm9taXNlKTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0RGVmZXJyZWQgPSBudW1lcmljVGltZW91dFByb21pc2UgPSBodHRwQ29uZmlnLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihcbiAgICAgICAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZXNwb25zZUludGVyY2VwdG9yKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAoc3VjY2VzcyB8fCBub29wKSh2YWx1ZSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIChoYXNFcnJvciB8fCBoYXNSZXNwb25zZUVycm9ySW50ZXJjZXB0b3IpID9cbiAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yICYmICFoYXNSZXNwb25zZUVycm9ySW50ZXJjZXB0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgYFBvc3NpYmx5IFVuaGFuZGxlZCBSZWplY3Rpb25gIGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgc3RpbGwgZnVsZmlsbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aXRoIGEgcmVqZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIGVycm9yKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNSZXNwb25zZUVycm9ySW50ZXJjZXB0b3IgP1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUVycm9ySW50ZXJjZXB0b3IocmVzcG9uc2UpIDpcbiAgICAgICAgICAgICAgICAgICAgJHEucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9IDpcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBpZiAoIWlzSW5zdGFuY2VDYWxsKSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSBjcmVhdGluZyBpbnN0YW5jZSAvIGNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgLy8gLSBzZXQgdGhlIGluaXRpYWwgcHJvbWlzZVxuICAgICAgICAgICAgICAvLyAtIHJldHVybiB0aGUgaW5zdGFuY2UgLyBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgIHZhbHVlLiRwcm9taXNlID0gcHJvbWlzZTtcbiAgICAgICAgICAgICAgdmFsdWUuJHJlc29sdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYW5jZWxsYWJsZSkgdmFsdWUuJGNhbmNlbFJlcXVlc3QgPSBjYW5jZWxSZXF1ZXN0O1xuXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW5zdGFuY2UgY2FsbFxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbFJlcXVlc3QodmFsdWUpIHtcbiAgICAgICAgICAgICAgcHJvbWlzZS5jYXRjaChub29wKTtcbiAgICAgICAgICAgICAgdGltZW91dERlZmVycmVkLnJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cblxuICAgICAgICAgIFJlc291cmNlLnByb3RvdHlwZVsnJCcgKyBuYW1lXSA9IGZ1bmN0aW9uKHBhcmFtcywgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBzdWNjZXNzOyBzdWNjZXNzID0gcGFyYW1zOyBwYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBSZXNvdXJjZVtuYW1lXS5jYWxsKHRoaXMsIHBhcmFtcywgdGhpcywgc3VjY2VzcywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC4kcHJvbWlzZSB8fCByZXN1bHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgUmVzb3VyY2UuYmluZCA9IGZ1bmN0aW9uKGFkZGl0aW9uYWxQYXJhbURlZmF1bHRzKSB7XG4gICAgICAgICAgdmFyIGV4dGVuZGVkUGFyYW1EZWZhdWx0cyA9IGV4dGVuZCh7fSwgcGFyYW1EZWZhdWx0cywgYWRkaXRpb25hbFBhcmFtRGVmYXVsdHMpO1xuICAgICAgICAgIHJldHVybiByZXNvdXJjZUZhY3RvcnkodXJsLCBleHRlbmRlZFBhcmFtRGVmYXVsdHMsIGFjdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNvdXJjZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc291cmNlRmFjdG9yeTtcbiAgICB9XTtcbiAgfSk7XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG5cbi8qKlxuICogQ2hlY2tsaXN0LW1vZGVsXG4gKiBBbmd1bGFySlMgZGlyZWN0aXZlIGZvciBsaXN0IG9mIGNoZWNrYm94ZXNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy9jaGVja2xpc3QtbW9kZWxcbiAqIExpY2Vuc2U6IE1JVCBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKi9cblxuIC8qIGNvbW1vbmpzIHBhY2thZ2UgbWFuYWdlciBzdXBwb3J0IChlZyBjb21wb25lbnRqcykgKi9cbiBpZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyA9PT0gZXhwb3J0cyl7XG4gICBtb2R1bGUuZXhwb3J0cyA9ICdjaGVja2xpc3QtbW9kZWwnO1xuIH1cblxuYW5ndWxhci5tb2R1bGUoJ2NoZWNrbGlzdC1tb2RlbCcsIFtdKVxuLmRpcmVjdGl2ZSgnY2hlY2tsaXN0TW9kZWwnLCBbJyRwYXJzZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGNvbXBpbGUpIHtcbiAgLy8gY29udGFpbnNcbiAgZnVuY3Rpb24gY29udGFpbnMoYXJyLCBpdGVtLCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNBcnJheShhcnIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gYXJyLmxlbmd0aDsgaS0tOykge1xuICAgICAgICBpZiAoY29tcGFyYXRvcihhcnJbaV0sIGl0ZW0pKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gYWRkXG4gIGZ1bmN0aW9uIGFkZChhcnIsIGl0ZW0sIGNvbXBhcmF0b3IpIHtcbiAgICBhcnIgPSBhbmd1bGFyLmlzQXJyYXkoYXJyKSA/IGFyciA6IFtdO1xuICAgICAgaWYoIWNvbnRhaW5zKGFyciwgaXRlbSwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBhcnIucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgLy8gcmVtb3ZlXG4gIGZ1bmN0aW9uIHJlbW92ZShhcnIsIGl0ZW0sIGNvbXBhcmF0b3IpIHtcbiAgICBpZiAoYW5ndWxhci5pc0FycmF5KGFycikpIHtcbiAgICAgIGZvciAodmFyIGkgPSBhcnIubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGlmIChjb21wYXJhdG9yKGFycltpXSwgaXRlbSkpIHtcbiAgICAgICAgICBhcnIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cblxuICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTIyODMwMi8xNDU4MTYyXG4gIGZ1bmN0aW9uIHBvc3RMaW5rRm4oc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgIC8vIGV4Y2x1ZGUgcmVjdXJzaW9uLCBidXQgc3RpbGwga2VlcCB0aGUgbW9kZWxcbiAgICB2YXIgY2hlY2tsaXN0TW9kZWwgPSBhdHRycy5jaGVja2xpc3RNb2RlbDtcbiAgICBhdHRycy4kc2V0KFwiY2hlY2tsaXN0TW9kZWxcIiwgbnVsbCk7XG4gICAgLy8gY29tcGlsZSB3aXRoIGBuZy1tb2RlbGAgcG9pbnRpbmcgdG8gYGNoZWNrZWRgXG4gICAgJGNvbXBpbGUoZWxlbSkoc2NvcGUpO1xuICAgIGF0dHJzLiRzZXQoXCJjaGVja2xpc3RNb2RlbFwiLCBjaGVja2xpc3RNb2RlbCk7XG5cbiAgICAvLyBnZXR0ZXIgZm9yIG9yaWdpbmFsIG1vZGVsXG4gICAgdmFyIGNoZWNrbGlzdE1vZGVsR2V0dGVyID0gJHBhcnNlKGNoZWNrbGlzdE1vZGVsKTtcbiAgICB2YXIgY2hlY2tsaXN0Q2hhbmdlID0gJHBhcnNlKGF0dHJzLmNoZWNrbGlzdENoYW5nZSk7XG4gICAgdmFyIGNoZWNrbGlzdEJlZm9yZUNoYW5nZSA9ICRwYXJzZShhdHRycy5jaGVja2xpc3RCZWZvcmVDaGFuZ2UpO1xuICAgIHZhciBuZ01vZGVsR2V0dGVyID0gJHBhcnNlKGF0dHJzLm5nTW9kZWwpO1xuXG5cblxuICAgIHZhciBjb21wYXJhdG9yID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmKCFpc05hTihhKSAmJiAhaXNOYU4oYikpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKGEsYik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChhdHRycy5oYXNPd25Qcm9wZXJ0eSgnY2hlY2tsaXN0Q29tcGFyYXRvcicpKXtcbiAgICAgIGlmIChhdHRycy5jaGVja2xpc3RDb21wYXJhdG9yWzBdID09ICcuJykge1xuICAgICAgICB2YXIgY29tcGFyYXRvckV4cHJlc3Npb24gPSBhdHRycy5jaGVja2xpc3RDb21wYXJhdG9yLnN1YnN0cmluZygxKTtcbiAgICAgICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGFbY29tcGFyYXRvckV4cHJlc3Npb25dID09PSBiW2NvbXBhcmF0b3JFeHByZXNzaW9uXTtcbiAgICAgICAgfTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGFyYXRvciA9ICRwYXJzZShhdHRycy5jaGVja2xpc3RDb21wYXJhdG9yKShzY29wZS4kcGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB3YXRjaCBVSSBjaGVja2VkIGNoYW5nZVxuICAgIHZhciB1bmJpbmRNb2RlbCA9IHNjb3BlLiR3YXRjaChhdHRycy5uZ01vZGVsLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hlY2tsaXN0QmVmb3JlQ2hhbmdlICYmIChjaGVja2xpc3RCZWZvcmVDaGFuZ2Uoc2NvcGUpID09PSBmYWxzZSkpIHtcbiAgICAgICAgbmdNb2RlbEdldHRlci5hc3NpZ24oc2NvcGUsIGNvbnRhaW5zKGNoZWNrbGlzdE1vZGVsR2V0dGVyKHNjb3BlLiRwYXJlbnQpLCBnZXRDaGVja2xpc3RWYWx1ZSgpLCBjb21wYXJhdG9yKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VmFsdWVJbkNoZWNrbGlzdE1vZGVsKGdldENoZWNrbGlzdFZhbHVlKCksIG5ld1ZhbHVlKTtcblxuICAgICAgaWYgKGNoZWNrbGlzdENoYW5nZSkge1xuICAgICAgICBjaGVja2xpc3RDaGFuZ2Uoc2NvcGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gd2F0Y2hlcyBmb3IgdmFsdWUgY2hhbmdlIG9mIGNoZWNrbGlzdFZhbHVlXG4gICAgdmFyIHVuYmluZENoZWNrTGlzdFZhbHVlID0gc2NvcGUuJHdhdGNoKGdldENoZWNrbGlzdFZhbHVlLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIGlmKCBuZXdWYWx1ZSAhPSBvbGRWYWx1ZSAmJiBhbmd1bGFyLmlzRGVmaW5lZChvbGRWYWx1ZSkgJiYgc2NvcGVbYXR0cnMubmdNb2RlbF0gPT09IHRydWUgKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gY2hlY2tsaXN0TW9kZWxHZXR0ZXIoc2NvcGUuJHBhcmVudCk7XG4gICAgICAgIGNoZWNrbGlzdE1vZGVsR2V0dGVyLmFzc2lnbihzY29wZS4kcGFyZW50LCByZW1vdmUoY3VycmVudCwgb2xkVmFsdWUsIGNvbXBhcmF0b3IpKTtcbiAgICAgICAgY2hlY2tsaXN0TW9kZWxHZXR0ZXIuYXNzaWduKHNjb3BlLiRwYXJlbnQsIGFkZChjdXJyZW50LCBuZXdWYWx1ZSwgY29tcGFyYXRvcikpO1xuICAgICAgfVxuICAgIH0sIHRydWUpO1xuXG4gICAgdmFyIHVuYmluZERlc3Ryb3kgPSBzY29wZS4kb24oJyRkZXN0cm95JywgZGVzdHJveSk7XG5cbiAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdW5iaW5kTW9kZWwoKTtcbiAgICAgIHVuYmluZENoZWNrTGlzdFZhbHVlKCk7XG4gICAgICB1bmJpbmREZXN0cm95KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2hlY2tsaXN0VmFsdWUoKSB7XG4gICAgICByZXR1cm4gYXR0cnMuY2hlY2tsaXN0VmFsdWUgPyAkcGFyc2UoYXR0cnMuY2hlY2tsaXN0VmFsdWUpKHNjb3BlLiRwYXJlbnQpIDogYXR0cnMudmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmFsdWVJbkNoZWNrbGlzdE1vZGVsKHZhbHVlLCBjaGVja2VkKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGNoZWNrbGlzdE1vZGVsR2V0dGVyKHNjb3BlLiRwYXJlbnQpO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihjaGVja2xpc3RNb2RlbEdldHRlci5hc3NpZ24pKSB7XG4gICAgICAgIGlmIChjaGVja2VkID09PSB0cnVlKSB7XG4gICAgICAgICAgY2hlY2tsaXN0TW9kZWxHZXR0ZXIuYXNzaWduKHNjb3BlLiRwYXJlbnQsIGFkZChjdXJyZW50LCB2YWx1ZSwgY29tcGFyYXRvcikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoZWNrbGlzdE1vZGVsR2V0dGVyLmFzc2lnbihzY29wZS4kcGFyZW50LCByZW1vdmUoY3VycmVudCwgdmFsdWUsIGNvbXBhcmF0b3IpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gZGVjbGFyZSBvbmUgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgYm90aCAkd2F0Y2ggZnVuY3Rpb25zXG4gICAgZnVuY3Rpb24gc2V0Q2hlY2tlZChuZXdBcnIsIG9sZEFycikge1xuICAgICAgaWYgKGNoZWNrbGlzdEJlZm9yZUNoYW5nZSAmJiAoY2hlY2tsaXN0QmVmb3JlQ2hhbmdlKHNjb3BlKSA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHNldFZhbHVlSW5DaGVja2xpc3RNb2RlbChnZXRDaGVja2xpc3RWYWx1ZSgpLCBuZ01vZGVsR2V0dGVyKHNjb3BlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5nTW9kZWxHZXR0ZXIuYXNzaWduKHNjb3BlLCBjb250YWlucyhuZXdBcnIsIGdldENoZWNrbGlzdFZhbHVlKCksIGNvbXBhcmF0b3IpKTtcbiAgICB9XG5cbiAgICAvLyB3YXRjaCBvcmlnaW5hbCBtb2RlbCBjaGFuZ2VcbiAgICAvLyB1c2UgdGhlIGZhc3RlciAkd2F0Y2hDb2xsZWN0aW9uIG1ldGhvZCBpZiBpdCdzIGF2YWlsYWJsZVxuICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oc2NvcGUuJHBhcmVudC4kd2F0Y2hDb2xsZWN0aW9uKSkge1xuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaENvbGxlY3Rpb24oY2hlY2tsaXN0TW9kZWwsIHNldENoZWNrZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJHdhdGNoKGNoZWNrbGlzdE1vZGVsLCBzZXRDaGVja2VkLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgc2NvcGU6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykge1xuXG4gICAgICBpZiAoIXRBdHRycy5jaGVja2xpc3RWYWx1ZSAmJiAhdEF0dHJzLnZhbHVlKSB7XG4gICAgICAgIHRocm93ICdZb3Ugc2hvdWxkIHByb3ZpZGUgYHZhbHVlYCBvciBgY2hlY2tsaXN0LXZhbHVlYC4nO1xuICAgICAgfVxuXG4gICAgICAvLyBieSBkZWZhdWx0IG5nTW9kZWwgaXMgJ2NoZWNrZWQnLCBzbyB3ZSBzZXQgaXQgaWYgbm90IHNwZWNpZmllZFxuICAgICAgaWYgKCF0QXR0cnMubmdNb2RlbCkge1xuICAgICAgICAvLyBsb2NhbCBzY29wZSB2YXIgc3RvcmluZyBpbmRpdmlkdWFsIGNoZWNrYm94IG1vZGVsXG4gICAgICAgIHRBdHRycy4kc2V0KFwibmdNb2RlbFwiLCBcImNoZWNrZWRcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwb3N0TGlua0ZuO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuLyoqXG4gKiBTYXRlbGxpemVyIDAuMTUuNVxuICogKGMpIDIwMTYgU2FoYXQgWWFsa2Fib3YgXG4gKiBMaWNlbnNlOiBNSVQgXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLnNhdGVsbGl6ZXIgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBDb25maWcgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBDb25maWcoKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2VVcmwgPSAnLyc7XG4gICAgICAgICAgICB0aGlzLmxvZ2luVXJsID0gJy9hdXRoL2xvZ2luJztcbiAgICAgICAgICAgIHRoaXMuc2lnbnVwVXJsID0gJy9hdXRoL3NpZ251cCc7XG4gICAgICAgICAgICB0aGlzLnVubGlua1VybCA9ICcvYXV0aC91bmxpbmsvJztcbiAgICAgICAgICAgIHRoaXMudG9rZW5OYW1lID0gJ3Rva2VuJztcbiAgICAgICAgICAgIHRoaXMudG9rZW5QcmVmaXggPSAnc2F0ZWxsaXplcic7XG4gICAgICAgICAgICB0aGlzLnRva2VuSGVhZGVyID0gJ0F1dGhvcml6YXRpb24nO1xuICAgICAgICAgICAgdGhpcy50b2tlblR5cGUgPSAnQmVhcmVyJztcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVR5cGUgPSAnbG9jYWxTdG9yYWdlJztcbiAgICAgICAgICAgIHRoaXMudG9rZW5Sb290ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVycyA9IHtcbiAgICAgICAgICAgICAgICBmYWNlYm9vazoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZmFjZWJvb2snLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aC9mYWNlYm9vaycsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS92Mi41L2RpYWxvZy9vYXV0aCcsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFVybFBhcmFtczogWydkaXNwbGF5JywgJ3Njb3BlJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBbJ2VtYWlsJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnLCcsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdwb3B1cCcsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogNTgwLCBoZWlnaHQ6IDQwMCB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnb29nbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dvb2dsZScsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hdXRoL2dvb2dsZScsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoJyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkVXJsUGFyYW1zOiBbJ3Njb3BlJ10sXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsVXJsUGFyYW1zOiBbJ2Rpc3BsYXknLCAnc3RhdGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsncHJvZmlsZScsICdlbWFpbCddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZVByZWZpeDogJ29wZW5pZCcsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnICcsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdwb3B1cCcsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogNDUyLCBoZWlnaHQ6IDYzMyB9LFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyKSk7IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdpdGh1Yjoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZ2l0aHViJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvZ2l0aHViJyxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luL29hdXRoL2F1dGhvcml6ZScsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25hbFVybFBhcmFtczogWydzY29wZSddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogWyd1c2VyOmVtYWlsJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnICcsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogMTAyMCwgaGVpZ2h0OiA2MTggfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5zdGFncmFtOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbnN0YWdyYW0nLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aC9pbnN0YWdyYW0nLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FwaS5pbnN0YWdyYW0uY29tL29hdXRoL2F1dGhvcml6ZScsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFVybFBhcmFtczogWydzY29wZSddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogWydiYXNpYyddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogJysnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsaW5rZWRpbjoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbGlua2VkaW4nLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aC9saW5rZWRpbicsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS91YXMvb2F1dGgyL2F1dGhvcml6YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRVcmxQYXJhbXM6IFsnc3RhdGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsncl9lbWFpbGFkZHJlc3MnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVEZWxpbWl0ZXI6ICcgJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdTVEFURScsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogNTI3LCBoZWlnaHQ6IDU4MiB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0d2l0dGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0d2l0dGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvdHdpdHRlcicsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYXBpLnR3aXR0ZXIuY29tL29hdXRoL2F1dGhlbnRpY2F0ZScsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcxLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDQ5NSwgaGVpZ2h0OiA2NDUgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHdpdGNoOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0d2l0Y2gnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aC90d2l0Y2gnLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FwaS50d2l0Y2gudHYva3Jha2VuL29hdXRoMi9hdXRob3JpemUnLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRVcmxQYXJhbXM6IFsnc2NvcGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsndXNlcl9yZWFkJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnICcsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdwb3B1cCcsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogNTAwLCBoZWlnaHQ6IDU2MCB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsaXZlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdsaXZlJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvbGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vbG9naW4ubGl2ZS5jb20vb2F1dGgyMF9hdXRob3JpemUuc3JmJyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkVXJsUGFyYW1zOiBbJ2Rpc3BsYXknLCAnc2NvcGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsnd2wuZW1haWxzJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnICcsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdwb3B1cCcsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogNTAwLCBoZWlnaHQ6IDU2MCB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5YWhvbzoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAneWFob28nLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aC95YWhvbycsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYXBpLmxvZ2luLnlhaG9vLmNvbS9vYXV0aDIvcmVxdWVzdF9hdXRoJyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVEZWxpbWl0ZXI6ICcsJyxcbiAgICAgICAgICAgICAgICAgICAgb2F1dGhUeXBlOiAnMi4wJyxcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBPcHRpb25zOiB7IHdpZHRoOiA1NTksIGhlaWdodDogNTE5IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJpdGJ1Y2tldDoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYml0YnVja2V0JyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvYml0YnVja2V0JyxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9iaXRidWNrZXQub3JnL3NpdGUvb2F1dGgyL2F1dGhvcml6ZScsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFVybFBhcmFtczogWydzY29wZSddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogWydlbWFpbCddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogJyAnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDEwMjgsIGhlaWdodDogNTI5IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwb3RpZnk6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aC9zcG90aWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hY2NvdW50cy5zcG90aWZ5LmNvbS9hdXRob3JpemUnLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxVcmxQYXJhbXM6IFsnc3RhdGUnXSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRVcmxQYXJhbXM6IFsnc2NvcGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsndXNlci1yZWFkLWVtYWlsJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlUHJlZml4OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVEZWxpbWl0ZXI6ICcsJyxcbiAgICAgICAgICAgICAgICAgICAgb2F1dGhUeXBlOiAnMi4wJyxcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBPcHRpb25zOiB7IHdpZHRoOiA1MDAsIGhlaWdodDogNTMwIH0sXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIpKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmh0dHBJbnRlcmNlcHRvciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbmZpZywgXCJnZXRDb25zdGFudFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbmZpZygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBDb25maWc7XG4gICAgfSgpKTtcbiAgICA7XG5cbiAgICB2YXIgQXV0aFByb3ZpZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQXV0aFByb3ZpZGVyKFNhdGVsbGl6ZXJDb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZyA9IFNhdGVsbGl6ZXJDb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwiYmFzZVVybFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5iYXNlVXJsOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLmJhc2VVcmwgPSB2YWx1ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcImxvZ2luVXJsXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLmxvZ2luVXJsOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLmxvZ2luVXJsID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJzaWdudXBVcmxcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLlNhdGVsbGl6ZXJDb25maWcuc2lnbnVwVXJsOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnNpZ251cFVybCA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwidW5saW5rVXJsXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnVubGlua1VybDsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy51bmxpbmtVcmwgPSB2YWx1ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcInRva2VuUm9vdFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlblJvb3Q7IH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB0aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5Sb290ID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJ0b2tlbk5hbWVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5OYW1lOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuTmFtZSA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwidG9rZW5QcmVmaXhcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5QcmVmaXg7IH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB0aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5QcmVmaXggPSB2YWx1ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcInRva2VuSGVhZGVyXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuSGVhZGVyOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuSGVhZGVyID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJ0b2tlblR5cGVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5UeXBlOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuVHlwZSA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwid2l0aENyZWRlbnRpYWxzXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLndpdGhDcmVkZW50aWFsczsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy53aXRoQ3JlZGVudGlhbHMgPSB2YWx1ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcInN0b3JhZ2VUeXBlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnN0b3JhZ2VUeXBlOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnN0b3JhZ2VUeXBlID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJodHRwSW50ZXJjZXB0b3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLlNhdGVsbGl6ZXJDb25maWcuaHR0cEludGVyY2VwdG9yOyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5odHRwSW50ZXJjZXB0b3IgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5odHRwSW50ZXJjZXB0b3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS5mYWNlYm9vayA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLmZhY2Vib29rLCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS5nb29nbGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcy5TYXRlbGxpemVyQ29uZmlnLnByb3ZpZGVycy5nb29nbGUsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIucHJvdG90eXBlLmdpdGh1YiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLmdpdGh1Yiwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUuaW5zdGFncmFtID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMuaW5zdGFncmFtLCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS5saW5rZWRpbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLmxpbmtlZGluLCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS50d2l0dGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMudHdpdHRlciwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUudHdpdGNoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMudHdpdGNoLCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS5saXZlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMubGl2ZSwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUueWFob28gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcy5TYXRlbGxpemVyQ29uZmlnLnByb3ZpZGVycy55YWhvbywgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUuYml0YnVja2V0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMuYml0YnVja2V0LCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS5zcG90aWZ5ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMuc3BvdGlmeSwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUub2F1dGgxID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnNbb3B0aW9ucy5uYW1lXSA9IGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcxLjAnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS5vYXV0aDIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnByb3ZpZGVyc1tvcHRpb25zLm5hbWVdID0gYW5ndWxhci5leHRlbmQob3B0aW9ucywge1xuICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIucHJvdG90eXBlLiRnZXQgPSBmdW5jdGlvbiAoU2F0ZWxsaXplclNoYXJlZCwgU2F0ZWxsaXplckxvY2FsLCBTYXRlbGxpemVyT0F1dGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbG9naW46IGZ1bmN0aW9uICh1c2VyLCBvcHRpb25zKSB7IHJldHVybiBTYXRlbGxpemVyTG9jYWwubG9naW4odXNlciwgb3B0aW9ucyk7IH0sXG4gICAgICAgICAgICAgICAgc2lnbnVwOiBmdW5jdGlvbiAodXNlciwgb3B0aW9ucykgeyByZXR1cm4gU2F0ZWxsaXplckxvY2FsLnNpZ251cCh1c2VyLCBvcHRpb25zKTsgfSxcbiAgICAgICAgICAgICAgICBsb2dvdXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNhdGVsbGl6ZXJTaGFyZWQubG9nb3V0KCk7IH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiBmdW5jdGlvbiAobmFtZSwgZGF0YSkgeyByZXR1cm4gU2F0ZWxsaXplck9BdXRoLmF1dGhlbnRpY2F0ZShuYW1lLCBkYXRhKTsgfSxcbiAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAobmFtZSwgZGF0YSkgeyByZXR1cm4gU2F0ZWxsaXplck9BdXRoLmF1dGhlbnRpY2F0ZShuYW1lLCBkYXRhKTsgfSxcbiAgICAgICAgICAgICAgICB1bmxpbms6IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7IHJldHVybiBTYXRlbGxpemVyT0F1dGgudW5saW5rKG5hbWUsIG9wdGlvbnMpOyB9LFxuICAgICAgICAgICAgICAgIGlzQXV0aGVudGljYXRlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2F0ZWxsaXplclNoYXJlZC5pc0F1dGhlbnRpY2F0ZWQoKTsgfSxcbiAgICAgICAgICAgICAgICBnZXRQYXlsb2FkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBTYXRlbGxpemVyU2hhcmVkLmdldFBheWxvYWQoKTsgfSxcbiAgICAgICAgICAgICAgICBnZXRUb2tlbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2F0ZWxsaXplclNoYXJlZC5nZXRUb2tlbigpOyB9LFxuICAgICAgICAgICAgICAgIHNldFRva2VuOiBmdW5jdGlvbiAodG9rZW4pIHsgcmV0dXJuIFNhdGVsbGl6ZXJTaGFyZWQuc2V0VG9rZW4oeyBhY2Nlc3NfdG9rZW46IHRva2VuIH0pOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZVRva2VuOiBmdW5jdGlvbiAoKSB7IHJldHVybiBTYXRlbGxpemVyU2hhcmVkLnJlbW92ZVRva2VuKCk7IH0sXG4gICAgICAgICAgICAgICAgc2V0U3RvcmFnZVR5cGU6IGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiBTYXRlbGxpemVyU2hhcmVkLnNldFN0b3JhZ2VUeXBlKHR5cGUpOyB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIuJGluamVjdCA9IFsnU2F0ZWxsaXplckNvbmZpZyddO1xuICAgICAgICByZXR1cm4gQXV0aFByb3ZpZGVyO1xuICAgIH0oKSk7XG4gICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS4kZ2V0LiRpbmplY3QgPSBbJ1NhdGVsbGl6ZXJTaGFyZWQnLCAnU2F0ZWxsaXplckxvY2FsJywgJ1NhdGVsbGl6ZXJPQXV0aCddO1xuXG4gICAgZnVuY3Rpb24gam9pblVybChiYXNlVXJsLCB1cmwpIHtcbiAgICAgICAgaWYgKC9eKD86W2Etel0rOik/XFwvXFwvL2kudGVzdCh1cmwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqb2luZWQgPSBbYmFzZVVybCwgdXJsXS5qb2luKCcvJyk7XG4gICAgICAgIHZhciBub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXC9dKy9nLCAnLycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcL1xcPy9nLCAnPycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcL1xcIy9nLCAnIycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcOlxcLy9nLCAnOi8vJyk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBub3JtYWxpemUoam9pbmVkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RnVsbFVybFBhdGgobG9jYXRpb24pIHtcbiAgICAgICAgdmFyIGlzSHR0cHMgPSBsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArXG4gICAgICAgICAgICAnOicgKyAobG9jYXRpb24ucG9ydCB8fCAoaXNIdHRwcyA/ICc0NDMnIDogJzgwJykpICtcbiAgICAgICAgICAgICgvXlxcLy8udGVzdChsb2NhdGlvbi5wYXRobmFtZSkgPyBsb2NhdGlvbi5wYXRobmFtZSA6ICcvJyArIGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhzdHIpIHtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgoc3RyIHx8ICcnKS5zcGxpdCgnJicpLCBmdW5jdGlvbiAoa2V5VmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChrZXlWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0ga2V5VmFsdWUuc3BsaXQoJz0nKTtcbiAgICAgICAgICAgICAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgIG9ialtrZXldID0gYW5ndWxhci5pc0RlZmluZWQodmFsdWVbMV0pID8gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlWzFdKSA6IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGVCYXNlNjQoc3RyKSB7XG4gICAgICAgIHZhciBidWZmZXI7XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG4gICAgICAgIHZhciByZV9idG91ID0gbmV3IFJlZ0V4cChbXG4gICAgICAgICAgICAnW1xceEMwLVxceERGXVtcXHg4MC1cXHhCRl0nLFxuICAgICAgICAgICAgJ1tcXHhFMC1cXHhFRl1bXFx4ODAtXFx4QkZdezJ9JyxcbiAgICAgICAgICAgICdbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfSdcbiAgICAgICAgXS5qb2luKCd8JyksICdnJyk7XG4gICAgICAgIHZhciBjYl9idG91ID0gZnVuY3Rpb24gKGNjY2MpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY2NjYy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBjcCA9ICgoMHgwNyAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTgpXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgMTIpXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gY3AgLSAweDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZyb21DaGFyQ29kZSgob2Zmc2V0ID4+PiAxMCkgKyAweEQ4MDApXG4gICAgICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgob2Zmc2V0ICYgMHgzRkYpICsgMHhEQzAwKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUNoYXJDb2RlKCgoMHgwZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTIpXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUNoYXJDb2RlKCgoMHgxZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJ0b3UgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgcmV0dXJuIGIucmVwbGFjZShyZV9idG91LCBjYl9idG91KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9kZWNvZGUgPSBidWZmZXIgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIChhLmNvbnN0cnVjdG9yID09PSBidWZmZXIuY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgICA/IGEgOiBuZXcgYnVmZmVyKGEsICdiYXNlNjQnKSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICAgICAgOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBidG91KGF0b2IoYSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF9kZWNvZGUoU3RyaW5nKHN0cikucmVwbGFjZSgvWy1fXS9nLCBmdW5jdGlvbiAobTApIHtcbiAgICAgICAgICAgIHJldHVybiBtMCA9PT0gJy0nID8gJysnIDogJy8nO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCAnJykpO1xuICAgIH1cblxuICAgIHZhciBTaGFyZWQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTaGFyZWQoJHEsICR3aW5kb3csIFNhdGVsbGl6ZXJDb25maWcsIFNhdGVsbGl6ZXJTdG9yYWdlKSB7XG4gICAgICAgICAgICB0aGlzLiRxID0gJHE7XG4gICAgICAgICAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnID0gU2F0ZWxsaXplckNvbmZpZztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclN0b3JhZ2UgPSBTYXRlbGxpemVyU3RvcmFnZTtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuU2F0ZWxsaXplckNvbmZpZywgdG9rZW5OYW1lID0gX2EudG9rZW5OYW1lLCB0b2tlblByZWZpeCA9IF9hLnRva2VuUHJlZml4O1xuICAgICAgICAgICAgdGhpcy5wcmVmaXhlZFRva2VuTmFtZSA9IHRva2VuUHJlZml4ID8gW3Rva2VuUHJlZml4LCB0b2tlbk5hbWVdLmpvaW4oJ18nKSA6IHRva2VuTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBTaGFyZWQucHJvdG90eXBlLmdldFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuU2F0ZWxsaXplclN0b3JhZ2UuZ2V0KHRoaXMucHJlZml4ZWRUb2tlbk5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBTaGFyZWQucHJvdG90eXBlLmdldFBheWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLmdldCh0aGlzLnByZWZpeGVkVG9rZW5OYW1lKTtcbiAgICAgICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbi5zcGxpdCgnLicpLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYXNlNjRVcmwgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVCYXNlNjQoYmFzZTY0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTaGFyZWQucHJvdG90eXBlLnNldFRva2VuID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5Sb290ID0gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuUm9vdDtcbiAgICAgICAgICAgIHZhciB0b2tlbk5hbWUgPSB0aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5OYW1lO1xuICAgICAgICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gcmVzcG9uc2UgJiYgcmVzcG9uc2UuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QoYWNjZXNzVG9rZW4pICYmIGFuZ3VsYXIuaXNPYmplY3QoYWNjZXNzVG9rZW4uZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYW5ndWxhci5pc1N0cmluZyhhY2Nlc3NUb2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRva2VuICYmIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRva2VuUm9vdERhdGEgPSB0b2tlblJvb3QgJiYgdG9rZW5Sb290LnNwbGl0KCcuJykucmVkdWNlKGZ1bmN0aW9uIChvLCB4KSB7IHJldHVybiBvW3hdOyB9LCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuUm9vdERhdGEgPyB0b2tlblJvb3REYXRhW3Rva2VuTmFtZV0gOiByZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGFbdG9rZW5OYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclN0b3JhZ2Uuc2V0KHRoaXMucHJlZml4ZWRUb2tlbk5hbWUsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU2hhcmVkLnByb3RvdHlwZS5yZW1vdmVUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclN0b3JhZ2UucmVtb3ZlKHRoaXMucHJlZml4ZWRUb2tlbk5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBTaGFyZWQucHJvdG90eXBlLmlzQXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMuU2F0ZWxsaXplclN0b3JhZ2UuZ2V0KHRoaXMucHJlZml4ZWRUb2tlbk5hbWUpO1xuICAgICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnNwbGl0KCcuJykubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsICcrJykucmVwbGFjZSgnXycsICcvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gSlNPTi5wYXJzZSh0aGlzLiR3aW5kb3cuYXRvYihiYXNlNjQpKS5leHA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV4cCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApIDwgZXhwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gUGFzczogTm9uLUpXVCB0b2tlbiB0aGF0IGxvb2tzIGxpa2UgSldUXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIFBhc3M6IEFsbCBvdGhlciB0b2tlbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gRmFpbDogTm8gdG9rZW4gYXQgYWxsXG4gICAgICAgIH07XG4gICAgICAgIFNoYXJlZC5wcm90b3R5cGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyU3RvcmFnZS5yZW1vdmUodGhpcy5wcmVmaXhlZFRva2VuTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcS53aGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIFNoYXJlZC5wcm90b3R5cGUuc2V0U3RvcmFnZVR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnN0b3JhZ2VUeXBlID0gdHlwZTtcbiAgICAgICAgfTtcbiAgICAgICAgU2hhcmVkLiRpbmplY3QgPSBbJyRxJywgJyR3aW5kb3cnLCAnU2F0ZWxsaXplckNvbmZpZycsICdTYXRlbGxpemVyU3RvcmFnZSddO1xuICAgICAgICByZXR1cm4gU2hhcmVkO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgTG9jYWwgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBMb2NhbCgkaHR0cCwgU2F0ZWxsaXplckNvbmZpZywgU2F0ZWxsaXplclNoYXJlZCkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnID0gU2F0ZWxsaXplckNvbmZpZztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclNoYXJlZCA9IFNhdGVsbGl6ZXJTaGFyZWQ7XG4gICAgICAgIH1cbiAgICAgICAgTG9jYWwucHJvdG90eXBlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgb3B0aW9ucy51cmwgPSBvcHRpb25zLnVybCA/IG9wdGlvbnMudXJsIDogam9pblVybCh0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybCwgdGhpcy5TYXRlbGxpemVyQ29uZmlnLmxvZ2luVXJsKTtcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0YSA9IHVzZXIgfHwgb3B0aW9ucy5kYXRhO1xuICAgICAgICAgICAgb3B0aW9ucy5tZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnUE9TVCc7XG4gICAgICAgICAgICBvcHRpb25zLndpdGhDcmVkZW50aWFscyA9IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzIHx8IHRoaXMuU2F0ZWxsaXplckNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cChvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLlNhdGVsbGl6ZXJTaGFyZWQuc2V0VG9rZW4ocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBMb2NhbC5wcm90b3R5cGUuc2lnbnVwID0gZnVuY3Rpb24gKHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnMudXJsID8gb3B0aW9ucy51cmwgOiBqb2luVXJsKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5iYXNlVXJsLCB0aGlzLlNhdGVsbGl6ZXJDb25maWcuc2lnbnVwVXJsKTtcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0YSA9IHVzZXIgfHwgb3B0aW9ucy5kYXRhO1xuICAgICAgICAgICAgb3B0aW9ucy5tZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnUE9TVCc7XG4gICAgICAgICAgICBvcHRpb25zLndpdGhDcmVkZW50aWFscyA9IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzIHx8IHRoaXMuU2F0ZWxsaXplckNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cChvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgTG9jYWwuJGluamVjdCA9IFsnJGh0dHAnLCAnU2F0ZWxsaXplckNvbmZpZycsICdTYXRlbGxpemVyU2hhcmVkJ107XG4gICAgICAgIHJldHVybiBMb2NhbDtcbiAgICB9KCkpO1xuXG4gICAgdmFyIFBvcHVwID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUG9wdXAoJGludGVydmFsLCAkd2luZG93LCAkcSkge1xuICAgICAgICAgICAgdGhpcy4kaW50ZXJ2YWwgPSAkaW50ZXJ2YWw7XG4gICAgICAgICAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgICAgICAgICAgdGhpcy4kcSA9ICRxO1xuICAgICAgICAgICAgdGhpcy5wb3B1cCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFBvcHVwLnByb3RvdHlwZS5zdHJpbmdpZnlPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG9wdGlvbnMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChrZXkgKyAnPScgKyB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcsJyk7XG4gICAgICAgIH07XG4gICAgICAgIFBvcHVwLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKHVybCwgbmFtZSwgcG9wdXBPcHRpb25zLCByZWRpcmVjdFVyaSwgZG9udFBvbGwpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHBvcHVwT3B0aW9ucy53aWR0aCB8fCA1MDA7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcG9wdXBPcHRpb25zLmhlaWdodCB8fCA1MDA7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuc3RyaW5naWZ5T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvcDogdGhpcy4kd2luZG93LnNjcmVlblkgKyAoKHRoaXMuJHdpbmRvdy5vdXRlckhlaWdodCAtIGhlaWdodCkgLyAyLjUpLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuJHdpbmRvdy5zY3JlZW5YICsgKCh0aGlzLiR3aW5kb3cub3V0ZXJXaWR0aCAtIHdpZHRoKSAvIDIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBwb3B1cE5hbWUgPSB0aGlzLiR3aW5kb3dbJ2NvcmRvdmEnXSB8fCB0aGlzLiR3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID4gLTEgPyAnX2JsYW5rJyA6IG5hbWU7XG4gICAgICAgICAgICB0aGlzLnBvcHVwID0gdGhpcy4kd2luZG93Lm9wZW4odXJsLCBwb3B1cE5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9wdXAgJiYgdGhpcy5wb3B1cC5mb2N1cykge1xuICAgICAgICAgICAgICAgIHRoaXMucG9wdXAuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkb250UG9sbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLiR3aW5kb3dbJ2NvcmRvdmEnXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50TGlzdGVuZXIocmVkaXJlY3RVcmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHVybCA9PT0gJ2Fib3V0OmJsYW5rJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVwLmxvY2F0aW9uID0gdXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wb2xsaW5nKHJlZGlyZWN0VXJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUG9wdXAucHJvdG90eXBlLnBvbGxpbmcgPSBmdW5jdGlvbiAocmVkaXJlY3RVcmkpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZGlyZWN0VXJpUGFyc2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpUGFyc2VyLmhyZWYgPSByZWRpcmVjdFVyaTtcbiAgICAgICAgICAgICAgICB2YXIgcmVkaXJlY3RVcmlQYXRoID0gZ2V0RnVsbFVybFBhdGgocmVkaXJlY3RVcmlQYXJzZXIpO1xuICAgICAgICAgICAgICAgIHZhciBwb2xsaW5nID0gX3RoaXMuJGludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5wb3B1cCB8fCBfdGhpcy5wb3B1cC5jbG9zZWQgfHwgX3RoaXMucG9wdXAuY2xvc2VkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRpbnRlcnZhbC5jYW5jZWwocG9sbGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdUaGUgcG9wdXAgd2luZG93IHdhcyBjbG9zZWQnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cFdpbmRvd1BhdGggPSBnZXRGdWxsVXJsUGF0aChfdGhpcy5wb3B1cC5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdXBXaW5kb3dQYXRoID09PSByZWRpcmVjdFVyaVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucG9wdXAubG9jYXRpb24uc2VhcmNoIHx8IF90aGlzLnBvcHVwLmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhfdGhpcy5wb3B1cC5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1xcLyQvLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHBhcnNlUXVlcnlTdHJpbmcoX3RoaXMucG9wdXAubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSkucmVwbGFjZSgvW1xcLyRdLywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBxdWVyeSwgaGFzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocGFyYW1zLmVycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ09BdXRoIHJlZGlyZWN0IGhhcyBvY2N1cnJlZCBidXQgbm8gcXVlcnkgb3IgaGFzaCBwYXJhbWV0ZXJzIHdlcmUgZm91bmQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZXkgd2VyZSBlaXRoZXIgbm90IHNldCBkdXJpbmcgdGhlIHJlZGlyZWN0LCBvciB3ZXJlIHJlbW92ZWTigJR0eXBpY2FsbHkgYnkgYSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyb3V0aW5nIGxpYnJhcnnigJRiZWZvcmUgU2F0ZWxsaXplciBjb3VsZCByZWFkIGl0LicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGludGVydmFsLmNhbmNlbChwb2xsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBQb3B1cC5wcm90b3R5cGUuZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChyZWRpcmVjdFVyaSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wb3B1cC5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnVybC5pbmRleE9mKHJlZGlyZWN0VXJpKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlci5ocmVmID0gZXZlbnQudXJsO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VyLnNlYXJjaCB8fCBwYXJzZXIuaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhwYXJzZXIuc2VhcmNoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8kLywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNoID0gcGFyc2VRdWVyeVN0cmluZyhwYXJzZXIuaGFzaC5zdWJzdHJpbmcoMSkucmVwbGFjZSgvW1xcLyRdLywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgcXVlcnksIGhhc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocGFyYW1zLmVycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMucG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdBdXRob3JpemF0aW9uIGZhaWxlZCcpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wb3B1cC5hZGRFdmVudExpc3RlbmVyKCdleGl0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdUaGUgcG9wdXAgd2luZG93IHdhcyBjbG9zZWQnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgUG9wdXAuJGluamVjdCA9IFsnJGludGVydmFsJywgJyR3aW5kb3cnLCAnJHEnXTtcbiAgICAgICAgcmV0dXJuIFBvcHVwO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgT0F1dGgxID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gT0F1dGgxKCRodHRwLCAkd2luZG93LCBTYXRlbGxpemVyQ29uZmlnLCBTYXRlbGxpemVyUG9wdXApIHtcbiAgICAgICAgICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgICAgICAgICAgIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJDb25maWcgPSBTYXRlbGxpemVyQ29uZmlnO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyUG9wdXAgPSBTYXRlbGxpemVyUG9wdXA7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY29wZTogbnVsbCxcbiAgICAgICAgICAgICAgICBzY29wZVByZWZpeDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogbnVsbCxcbiAgICAgICAgICAgICAgICByZXF1aXJlZFVybFBhcmFtczogbnVsbCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VXJsUGFyYW1zOiBudWxsLFxuICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzEuMCcsXG4gICAgICAgICAgICAgICAgcG9wdXBPcHRpb25zOiB7IHdpZHRoOiBudWxsLCBoZWlnaHQ6IG51bGwgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICA7XG4gICAgICAgIE9BdXRoMS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zLCB1c2VyRGF0YSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsIHBvcHVwT3B0aW9ucyA9IG9wdGlvbnMucG9wdXBPcHRpb25zO1xuICAgICAgICAgICAgdmFyIHJlZGlyZWN0VXJpID0gdGhpcy5kZWZhdWx0cy5yZWRpcmVjdFVyaTtcbiAgICAgICAgICAgIC8vIFNob3VsZCBvcGVuIGFuIGVtcHR5IHBvcHVwIGFuZCB3YWl0IHVudGlsIHJlcXVlc3QgdG9rZW4gaXMgcmVjZWl2ZWRcbiAgICAgICAgICAgIGlmICghdGhpcy4kd2luZG93Wydjb3Jkb3ZhJ10pIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJQb3B1cC5vcGVuKCdhYm91dDpibGFuaycsIG5hbWUsIHBvcHVwT3B0aW9ucywgcmVkaXJlY3RVcmksIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdFRva2VuKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMub3BlblBvcHVwKG9wdGlvbnMsIHJlc3BvbnNlKS50aGVuKGZ1bmN0aW9uIChwb3B1cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5leGNoYW5nZUZvclRva2VuKHBvcHVwUmVzcG9uc2UsIHVzZXJEYXRhKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDEucHJvdG90eXBlLm9wZW5Qb3B1cCA9IGZ1bmN0aW9uIChvcHRpb25zLCByZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIHVybCA9IFtvcHRpb25zLmF1dGhvcml6YXRpb25FbmRwb2ludCwgdGhpcy5idWlsZFF1ZXJ5U3RyaW5nKHJlc3BvbnNlLmRhdGEpXS5qb2luKCc/Jyk7XG4gICAgICAgICAgICB2YXIgcmVkaXJlY3RVcmkgPSB0aGlzLmRlZmF1bHRzLnJlZGlyZWN0VXJpO1xuICAgICAgICAgICAgaWYgKHRoaXMuJHdpbmRvd1snY29yZG92YSddKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuU2F0ZWxsaXplclBvcHVwLm9wZW4odXJsLCBvcHRpb25zLm5hbWUsIG9wdGlvbnMucG9wdXBPcHRpb25zLCByZWRpcmVjdFVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJQb3B1cC5wb3B1cC5sb2NhdGlvbiA9IHVybDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5TYXRlbGxpemVyUG9wdXAucG9sbGluZyhyZWRpcmVjdFVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoMS5wcm90b3R5cGUuZ2V0UmVxdWVzdFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuU2F0ZWxsaXplckNvbmZpZy5iYXNlVXJsID8gam9pblVybCh0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybCwgdGhpcy5kZWZhdWx0cy51cmwpIDogdGhpcy5kZWZhdWx0cy51cmw7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cC5wb3N0KHVybCwgdGhpcy5kZWZhdWx0cyk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoMS5wcm90b3R5cGUuZXhjaGFuZ2VGb3JUb2tlbiA9IGZ1bmN0aW9uIChvYXV0aERhdGEsIHVzZXJEYXRhKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCB1c2VyRGF0YSwgb2F1dGhEYXRhKTtcbiAgICAgICAgICAgIHZhciBleGNoYW5nZUZvclRva2VuVXJsID0gdGhpcy5TYXRlbGxpemVyQ29uZmlnLmJhc2VVcmwgPyBqb2luVXJsKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5iYXNlVXJsLCB0aGlzLmRlZmF1bHRzLnVybCkgOiB0aGlzLmRlZmF1bHRzLnVybDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRodHRwLnBvc3QoZXhjaGFuZ2VGb3JUb2tlblVybCwgcGF5bG9hZCwgeyB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuU2F0ZWxsaXplckNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoMS5wcm90b3R5cGUuYnVpbGRRdWVyeVN0cmluZyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBbXTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgc3RyLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5qb2luKCcmJyk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoMS4kaW5qZWN0ID0gWyckaHR0cCcsICckd2luZG93JywgJ1NhdGVsbGl6ZXJDb25maWcnLCAnU2F0ZWxsaXplclBvcHVwJ107XG4gICAgICAgIHJldHVybiBPQXV0aDE7XG4gICAgfSgpKTtcblxuICAgIHZhciBPQXV0aDIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBPQXV0aDIoJGh0dHAsICR3aW5kb3csICR0aW1lb3V0LCAkcSwgU2F0ZWxsaXplckNvbmZpZywgU2F0ZWxsaXplclBvcHVwLCBTYXRlbGxpemVyU3RvcmFnZSkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICAgICAgICAgICAgdGhpcy4kd2luZG93ID0gJHdpbmRvdztcbiAgICAgICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICAgICAgICAgIHRoaXMuJHEgPSAkcTtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZyA9IFNhdGVsbGl6ZXJDb25maWc7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJQb3B1cCA9IFNhdGVsbGl6ZXJQb3B1cDtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclN0b3JhZ2UgPSBTYXRlbGxpemVyU3RvcmFnZTtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiBudWxsLFxuICAgICAgICAgICAgICAgIHNjb3BlOiBudWxsLFxuICAgICAgICAgICAgICAgIHNjb3BlUHJlZml4OiBudWxsLFxuICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkVXJsUGFyYW1zOiBudWxsLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRVcmxQYXJhbXM6IFsncmVzcG9uc2VfdHlwZScsICdjbGllbnRfaWQnLCAncmVkaXJlY3RfdXJpJ10sXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnY29kZScsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VQYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ2NvZGUnLFxuICAgICAgICAgICAgICAgICAgICBjbGllbnRJZDogJ2NsaWVudElkJyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6ICdyZWRpcmVjdFVyaSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgcG9wdXBPcHRpb25zOiB7IHdpZHRoOiBudWxsLCBoZWlnaHQ6IG51bGwgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBPQXV0aDIuY2FtZWxDYXNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lLnJlcGxhY2UoLyhbXFw6XFwtXFxfXSsoLikpL2csIGZ1bmN0aW9uIChfLCBzZXBhcmF0b3IsIGxldHRlciwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldCA/IGxldHRlci50b1VwcGVyQ2FzZSgpIDogbGV0dGVyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoMi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zLCB1c2VyRGF0YSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChfdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlTmFtZSA9IF90aGlzLmRlZmF1bHRzLm5hbWUgKyAnX3N0YXRlJztcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5kZWZhdWx0cywgbmFtZSA9IF9hLm5hbWUsIHN0YXRlID0gX2Euc3RhdGUsIHBvcHVwT3B0aW9ucyA9IF9hLnBvcHVwT3B0aW9ucywgcmVkaXJlY3RVcmkgPSBfYS5yZWRpcmVjdFVyaSwgcmVzcG9uc2VUeXBlID0gX2EucmVzcG9uc2VUeXBlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuU2F0ZWxsaXplclN0b3JhZ2Uuc2V0KHN0YXRlTmFtZSwgc3RhdGUoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuU2F0ZWxsaXplclN0b3JhZ2Uuc2V0KHN0YXRlTmFtZSwgc3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gW190aGlzLmRlZmF1bHRzLmF1dGhvcml6YXRpb25FbmRwb2ludCwgX3RoaXMuYnVpbGRRdWVyeVN0cmluZygpXS5qb2luKCc/Jyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuU2F0ZWxsaXplclBvcHVwLm9wZW4odXJsLCBuYW1lLCBwb3B1cE9wdGlvbnMsIHJlZGlyZWN0VXJpKS50aGVuKGZ1bmN0aW9uIChvYXV0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAndG9rZW4nIHx8ICF1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG9hdXRoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob2F1dGguc3RhdGUgJiYgb2F1dGguc3RhdGUgIT09IF90aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLmdldChzdGF0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignVGhlIHZhbHVlIHJldHVybmVkIGluIHRoZSBzdGF0ZSBwYXJhbWV0ZXIgZG9lcyBub3QgbWF0Y2ggdGhlIHN0YXRlIHZhbHVlIGZyb20geW91ciBvcmlnaW5hbCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXV0aG9yaXphdGlvbiBjb2RlIHJlcXVlc3QuJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZXhjaGFuZ2VGb3JUb2tlbihvYXV0aCwgdXNlckRhdGEpKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIHJlamVjdChlcnJvcik7IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoMi5wcm90b3R5cGUuZXhjaGFuZ2VGb3JUb2tlbiA9IGZ1bmN0aW9uIChvYXV0aERhdGEsIHVzZXJEYXRhKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBhbmd1bGFyLmV4dGVuZCh7fSwgdXNlckRhdGEpO1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuZGVmYXVsdHMucmVzcG9uc2VQYXJhbXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29kZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkW3ZhbHVlXSA9IG9hdXRoRGF0YS5jb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NsaWVudElkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWRbdmFsdWVdID0gX3RoaXMuZGVmYXVsdHMuY2xpZW50SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVkaXJlY3RVcmknOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZFt2YWx1ZV0gPSBfdGhpcy5kZWZhdWx0cy5yZWRpcmVjdFVyaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZFt2YWx1ZV0gPSBvYXV0aERhdGFba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChvYXV0aERhdGEuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLnN0YXRlID0gb2F1dGhEYXRhLnN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV4Y2hhbmdlRm9yVG9rZW5VcmwgPSB0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybCA/XG4gICAgICAgICAgICAgICAgam9pblVybCh0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybCwgdGhpcy5kZWZhdWx0cy51cmwpIDpcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRzLnVybDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRodHRwLnBvc3QoZXhjaGFuZ2VGb3JUb2tlblVybCwgcGF5bG9hZCwgeyB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuU2F0ZWxsaXplckNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoMi5wcm90b3R5cGUuYnVpbGRRdWVyeVN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIga2V5VmFsdWVQYWlycyA9IFtdO1xuICAgICAgICAgICAgdmFyIHVybFBhcmFtc0NhdGVnb3JpZXMgPSBbJ2RlZmF1bHRVcmxQYXJhbXMnLCAncmVxdWlyZWRVcmxQYXJhbXMnLCAnb3B0aW9uYWxVcmxQYXJhbXMnXTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh1cmxQYXJhbXNDYXRlZ29yaWVzLCBmdW5jdGlvbiAocGFyYW1zQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goX3RoaXMuZGVmYXVsdHNbcGFyYW1zQ2F0ZWdvcnldLCBmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYW1lbGl6ZWROYW1lID0gT0F1dGgyLmNhbWVsQ2FzZShwYXJhbU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1WYWx1ZSA9IGFuZ3VsYXIuaXNGdW5jdGlvbihfdGhpcy5kZWZhdWx0c1twYXJhbU5hbWVdKSA/IF90aGlzLmRlZmF1bHRzW3BhcmFtTmFtZV0oKSA6IF90aGlzLmRlZmF1bHRzW2NhbWVsaXplZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1OYW1lID09PSAncmVkaXJlY3RfdXJpJyAmJiAhcGFyYW1WYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbU5hbWUgPT09ICdzdGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZU5hbWUgPSBfdGhpcy5kZWZhdWx0cy5uYW1lICsgJ19zdGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KF90aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLmdldChzdGF0ZU5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1OYW1lID09PSAnc2NvcGUnICYmIEFycmF5LmlzQXJyYXkocGFyYW1WYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtVmFsdWUgPSBwYXJhbVZhbHVlLmpvaW4oX3RoaXMuZGVmYXVsdHMuc2NvcGVEZWxpbWl0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmRlZmF1bHRzLnNjb3BlUHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1WYWx1ZSA9IFtfdGhpcy5kZWZhdWx0cy5zY29wZVByZWZpeCwgcGFyYW1WYWx1ZV0uam9pbihfdGhpcy5kZWZhdWx0cy5zY29wZURlbGltaXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAga2V5VmFsdWVQYWlycy5wdXNoKFtwYXJhbU5hbWUsIHBhcmFtVmFsdWVdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGtleVZhbHVlUGFpcnMubWFwKGZ1bmN0aW9uIChwYWlyKSB7IHJldHVybiBwYWlyLmpvaW4oJz0nKTsgfSkuam9pbignJicpO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDIuJGluamVjdCA9IFsnJGh0dHAnLCAnJHdpbmRvdycsICckdGltZW91dCcsICckcScsICdTYXRlbGxpemVyQ29uZmlnJywgJ1NhdGVsbGl6ZXJQb3B1cCcsICdTYXRlbGxpemVyU3RvcmFnZSddO1xuICAgICAgICByZXR1cm4gT0F1dGgyO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgT0F1dGggPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBPQXV0aCgkaHR0cCwgJHdpbmRvdywgJHRpbWVvdXQsICRxLCBTYXRlbGxpemVyQ29uZmlnLCBTYXRlbGxpemVyUG9wdXAsIFNhdGVsbGl6ZXJTdG9yYWdlLCBTYXRlbGxpemVyU2hhcmVkLCBTYXRlbGxpemVyT0F1dGgxLCBTYXRlbGxpemVyT0F1dGgyKSB7XG4gICAgICAgICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gICAgICAgICAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgICAgICAgICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgICAgICAgICAgdGhpcy4kcSA9ICRxO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnID0gU2F0ZWxsaXplckNvbmZpZztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclBvcHVwID0gU2F0ZWxsaXplclBvcHVwO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyU3RvcmFnZSA9IFNhdGVsbGl6ZXJTdG9yYWdlO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyU2hhcmVkID0gU2F0ZWxsaXplclNoYXJlZDtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplck9BdXRoMSA9IFNhdGVsbGl6ZXJPQXV0aDE7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJPQXV0aDIgPSBTYXRlbGxpemVyT0F1dGgyO1xuICAgICAgICB9XG4gICAgICAgIE9BdXRoLnByb3RvdHlwZS5hdXRoZW50aWNhdGUgPSBmdW5jdGlvbiAobmFtZSwgdXNlckRhdGEpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gX3RoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnNbbmFtZV07XG4gICAgICAgICAgICAgICAgdmFyIG9hdXRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3ZpZGVyLm9hdXRoVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICcxLjAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGggPSBuZXcgT0F1dGgxKF90aGlzLiRodHRwLCBfdGhpcy4kd2luZG93LCBfdGhpcy5TYXRlbGxpemVyQ29uZmlnLCBfdGhpcy5TYXRlbGxpemVyUG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzIuMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBvYXV0aCA9IG5ldyBPQXV0aDIoX3RoaXMuJGh0dHAsIF90aGlzLiR3aW5kb3csIF90aGlzLiR0aW1lb3V0LCBfdGhpcy4kcSwgX3RoaXMuU2F0ZWxsaXplckNvbmZpZywgX3RoaXMuU2F0ZWxsaXplclBvcHVwLCBfdGhpcy5TYXRlbGxpemVyU3RvcmFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIE9BdXRoIFR5cGUnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYXV0aC5pbml0KHByb3ZpZGVyLCB1c2VyRGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyLnVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuU2F0ZWxsaXplclNoYXJlZC5zZXRUb2tlbihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgT0F1dGgucHJvdG90eXBlLnVubGluayA9IGZ1bmN0aW9uIChwcm92aWRlciwgaHR0cE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChodHRwT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGh0dHBPcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIGh0dHBPcHRpb25zLnVybCA9IGh0dHBPcHRpb25zLnVybCA/IGh0dHBPcHRpb25zLnVybCA6IGpvaW5VcmwodGhpcy5TYXRlbGxpemVyQ29uZmlnLmJhc2VVcmwsIHRoaXMuU2F0ZWxsaXplckNvbmZpZy51bmxpbmtVcmwpO1xuICAgICAgICAgICAgaHR0cE9wdGlvbnMuZGF0YSA9IHsgcHJvdmlkZXI6IHByb3ZpZGVyIH0gfHwgaHR0cE9wdGlvbnMuZGF0YTtcbiAgICAgICAgICAgIGh0dHBPcHRpb25zLm1ldGhvZCA9IGh0dHBPcHRpb25zLm1ldGhvZCB8fCAnUE9TVCc7XG4gICAgICAgICAgICBodHRwT3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSBodHRwT3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgfHwgdGhpcy5TYXRlbGxpemVyQ29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRodHRwKGh0dHBPcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgT0F1dGguJGluamVjdCA9IFtcbiAgICAgICAgICAgICckaHR0cCcsXG4gICAgICAgICAgICAnJHdpbmRvdycsXG4gICAgICAgICAgICAnJHRpbWVvdXQnLFxuICAgICAgICAgICAgJyRxJyxcbiAgICAgICAgICAgICdTYXRlbGxpemVyQ29uZmlnJyxcbiAgICAgICAgICAgICdTYXRlbGxpemVyUG9wdXAnLFxuICAgICAgICAgICAgJ1NhdGVsbGl6ZXJTdG9yYWdlJyxcbiAgICAgICAgICAgICdTYXRlbGxpemVyU2hhcmVkJyxcbiAgICAgICAgICAgICdTYXRlbGxpemVyT0F1dGgxJyxcbiAgICAgICAgICAgICdTYXRlbGxpemVyT0F1dGgyJ1xuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gT0F1dGg7XG4gICAgfSgpKTtcblxuICAgIHZhciBTdG9yYWdlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gU3RvcmFnZSgkd2luZG93LCBTYXRlbGxpemVyQ29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnID0gU2F0ZWxsaXplckNvbmZpZztcbiAgICAgICAgICAgIHRoaXMubWVtb3J5U3RvcmUgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBTdG9yYWdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiR3aW5kb3dbdGhpcy5TYXRlbGxpemVyQ29uZmlnLnN0b3JhZ2VUeXBlXS5nZXRJdGVtKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lbW9yeVN0b3JlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFN0b3JhZ2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHdpbmRvd1t0aGlzLlNhdGVsbGl6ZXJDb25maWcuc3RvcmFnZVR5cGVdLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWVtb3J5U3RvcmVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTdG9yYWdlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHdpbmRvd1t0aGlzLlNhdGVsbGl6ZXJDb25maWcuc3RvcmFnZVR5cGVdLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubWVtb3J5U3RvcmVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU3RvcmFnZS4kaW5qZWN0ID0gWyckd2luZG93JywgJ1NhdGVsbGl6ZXJDb25maWcnXTtcbiAgICAgICAgcmV0dXJuIFN0b3JhZ2U7XG4gICAgfSgpKTtcblxuICAgIHZhciBJbnRlcmNlcHRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEludGVyY2VwdG9yKFNhdGVsbGl6ZXJDb25maWcsIFNhdGVsbGl6ZXJTaGFyZWQsIFNhdGVsbGl6ZXJTdG9yYWdlKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnID0gU2F0ZWxsaXplckNvbmZpZztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclNoYXJlZCA9IFNhdGVsbGl6ZXJTaGFyZWQ7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlID0gU2F0ZWxsaXplclN0b3JhZ2U7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3QgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ1snc2tpcEF1dGhvcml6YXRpb24nXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuU2F0ZWxsaXplclNoYXJlZC5pc0F1dGhlbnRpY2F0ZWQoKSAmJiBfdGhpcy5TYXRlbGxpemVyQ29uZmlnLmh0dHBJbnRlcmNlcHRvcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbk5hbWUgPSBfdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuUHJlZml4ID9cbiAgICAgICAgICAgICAgICAgICAgICAgIFtfdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuUHJlZml4LCBfdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuTmFtZV0uam9pbignXycpIDogX3RoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlbk5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IF90aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLmdldCh0b2tlbk5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlbkhlYWRlciAmJiBfdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuVHlwZSArICcgJyArIHRva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzW190aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5IZWFkZXJdID0gdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIEludGVyY2VwdG9yLkZhY3RvcnkgPSBmdW5jdGlvbiAoU2F0ZWxsaXplckNvbmZpZywgU2F0ZWxsaXplclNoYXJlZCwgU2F0ZWxsaXplclN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJjZXB0b3IoU2F0ZWxsaXplckNvbmZpZywgU2F0ZWxsaXplclNoYXJlZCwgU2F0ZWxsaXplclN0b3JhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBJbnRlcmNlcHRvci4kaW5qZWN0ID0gWydTYXRlbGxpemVyQ29uZmlnJywgJ1NhdGVsbGl6ZXJTaGFyZWQnLCAnU2F0ZWxsaXplclN0b3JhZ2UnXTtcbiAgICAgICAgcmV0dXJuIEludGVyY2VwdG9yO1xuICAgIH0oKSk7XG4gICAgSW50ZXJjZXB0b3IuRmFjdG9yeS4kaW5qZWN0ID0gWydTYXRlbGxpemVyQ29uZmlnJywgJ1NhdGVsbGl6ZXJTaGFyZWQnLCAnU2F0ZWxsaXplclN0b3JhZ2UnXTtcblxuICAgIHZhciBIdHRwUHJvdmlkZXJDb25maWcgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBIdHRwUHJvdmlkZXJDb25maWcoJGh0dHBQcm92aWRlcikge1xuICAgICAgICAgICAgdGhpcy4kaHR0cFByb3ZpZGVyID0gJGh0dHBQcm92aWRlcjtcbiAgICAgICAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goSW50ZXJjZXB0b3IuRmFjdG9yeSk7XG4gICAgICAgIH1cbiAgICAgICAgSHR0cFByb3ZpZGVyQ29uZmlnLiRpbmplY3QgPSBbJyRodHRwUHJvdmlkZXInXTtcbiAgICAgICAgcmV0dXJuIEh0dHBQcm92aWRlckNvbmZpZztcbiAgICB9KCkpO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NhdGVsbGl6ZXInLCBbXSlcbiAgICAgICAgLnByb3ZpZGVyKCckYXV0aCcsIFsnU2F0ZWxsaXplckNvbmZpZycsIGZ1bmN0aW9uIChTYXRlbGxpemVyQ29uZmlnKSB7IHJldHVybiBuZXcgQXV0aFByb3ZpZGVyKFNhdGVsbGl6ZXJDb25maWcpOyB9XSlcbiAgICAgICAgLmNvbnN0YW50KCdTYXRlbGxpemVyQ29uZmlnJywgQ29uZmlnLmdldENvbnN0YW50KVxuICAgICAgICAuc2VydmljZSgnU2F0ZWxsaXplclNoYXJlZCcsIFNoYXJlZClcbiAgICAgICAgLnNlcnZpY2UoJ1NhdGVsbGl6ZXJMb2NhbCcsIExvY2FsKVxuICAgICAgICAuc2VydmljZSgnU2F0ZWxsaXplclBvcHVwJywgUG9wdXApXG4gICAgICAgIC5zZXJ2aWNlKCdTYXRlbGxpemVyT0F1dGgnLCBPQXV0aClcbiAgICAgICAgLnNlcnZpY2UoJ1NhdGVsbGl6ZXJPQXV0aDInLCBPQXV0aDIpXG4gICAgICAgIC5zZXJ2aWNlKCdTYXRlbGxpemVyT0F1dGgxJywgT0F1dGgxKVxuICAgICAgICAuc2VydmljZSgnU2F0ZWxsaXplclN0b3JhZ2UnLCBTdG9yYWdlKVxuICAgICAgICAuc2VydmljZSgnU2F0ZWxsaXplckludGVyY2VwdG9yJywgSW50ZXJjZXB0b3IpXG4gICAgICAgIC5jb25maWcoWyckaHR0cFByb3ZpZGVyJywgZnVuY3Rpb24gKCRodHRwUHJvdmlkZXIpIHsgcmV0dXJuIG5ldyBIdHRwUHJvdmlkZXJDb25maWcoJGh0dHBQcm92aWRlcik7IH1dKTtcbiAgICB2YXIgbmcxID0gJ3NhdGVsbGl6ZXInO1xuXG4gICAgcmV0dXJuIG5nMTtcblxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2F0ZWxsaXplci5qcy5tYXBcblxuLypcbiAqIGFuZ3VsYXItdWktYm9vdHN0cmFwXG4gKiBodHRwOi8vYW5ndWxhci11aS5naXRodWIuaW8vYm9vdHN0cmFwL1xuXG4gKiBWZXJzaW9uOiAyLjUuMCAtIDIwMTctMDEtMjhcbiAqIExpY2Vuc2U6IE1JVFxuICovYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXBcIiwgW1widWkuYm9vdHN0cmFwLnRwbHNcIiwgXCJ1aS5ib290c3RyYXAuY29sbGFwc2VcIixcInVpLmJvb3RzdHJhcC50YWJpbmRleFwiLFwidWkuYm9vdHN0cmFwLmFjY29yZGlvblwiLFwidWkuYm9vdHN0cmFwLmFsZXJ0XCIsXCJ1aS5ib290c3RyYXAuYnV0dG9uc1wiLFwidWkuYm9vdHN0cmFwLmNhcm91c2VsXCIsXCJ1aS5ib290c3RyYXAuZGF0ZXBhcnNlclwiLFwidWkuYm9vdHN0cmFwLmlzQ2xhc3NcIixcInVpLmJvb3RzdHJhcC5kYXRlcGlja2VyXCIsXCJ1aS5ib290c3RyYXAucG9zaXRpb25cIixcInVpLmJvb3RzdHJhcC5kYXRlcGlja2VyUG9wdXBcIixcInVpLmJvb3RzdHJhcC5kZWJvdW5jZVwiLFwidWkuYm9vdHN0cmFwLm11bHRpTWFwXCIsXCJ1aS5ib290c3RyYXAuZHJvcGRvd25cIixcInVpLmJvb3RzdHJhcC5zdGFja2VkTWFwXCIsXCJ1aS5ib290c3RyYXAubW9kYWxcIixcInVpLmJvb3RzdHJhcC5wYWdpbmdcIixcInVpLmJvb3RzdHJhcC5wYWdlclwiLFwidWkuYm9vdHN0cmFwLnBhZ2luYXRpb25cIixcInVpLmJvb3RzdHJhcC50b29sdGlwXCIsXCJ1aS5ib290c3RyYXAucG9wb3ZlclwiLFwidWkuYm9vdHN0cmFwLnByb2dyZXNzYmFyXCIsXCJ1aS5ib290c3RyYXAucmF0aW5nXCIsXCJ1aS5ib290c3RyYXAudGFic1wiLFwidWkuYm9vdHN0cmFwLnRpbWVwaWNrZXJcIixcInVpLmJvb3RzdHJhcC50eXBlYWhlYWRcIl0pO1xuYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAudHBsc1wiLCBbXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi1ncm91cC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLFwidWliL3RlbXBsYXRlL2Nhcm91c2VsL2Nhcm91c2VsLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyUG9wdXAvcG9wdXAuaHRtbFwiLFwidWliL3RlbXBsYXRlL21vZGFsL3dpbmRvdy5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcGFnZXIvcGFnZXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbFwiLFwidWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItaHRtbC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLXRlbXBsYXRlLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3MuaHRtbFwiLFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzYmFyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdGFicy90YWJzZXQuaHRtbFwiLFwidWliL3RlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCJdKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuY29sbGFwc2UnLCBbXSlcblxuICAuZGlyZWN0aXZlKCd1aWJDb2xsYXBzZScsIFsnJGFuaW1hdGUnLCAnJHEnLCAnJHBhcnNlJywgJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRhbmltYXRlLCAkcSwgJHBhcnNlLCAkaW5qZWN0b3IpIHtcbiAgICB2YXIgJGFuaW1hdGVDc3MgPSAkaW5qZWN0b3IuaGFzKCckYW5pbWF0ZUNzcycpID8gJGluamVjdG9yLmdldCgnJGFuaW1hdGVDc3MnKSA6IG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgZXhwYW5kaW5nRXhwciA9ICRwYXJzZShhdHRycy5leHBhbmRpbmcpLFxuICAgICAgICAgIGV4cGFuZGVkRXhwciA9ICRwYXJzZShhdHRycy5leHBhbmRlZCksXG4gICAgICAgICAgY29sbGFwc2luZ0V4cHIgPSAkcGFyc2UoYXR0cnMuY29sbGFwc2luZyksXG4gICAgICAgICAgY29sbGFwc2VkRXhwciA9ICRwYXJzZShhdHRycy5jb2xsYXBzZWQpLFxuICAgICAgICAgIGhvcml6b250YWwgPSBmYWxzZSxcbiAgICAgICAgICBjc3MgPSB7fSxcbiAgICAgICAgICBjc3NUbyA9IHt9O1xuXG4gICAgICAgIGluaXQoKTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgIGhvcml6b250YWwgPSAhISgnaG9yaXpvbnRhbCcgaW4gYXR0cnMpO1xuICAgICAgICAgIGlmIChob3Jpem9udGFsKSB7XG4gICAgICAgICAgICBjc3MgPSB7XG4gICAgICAgICAgICAgIHdpZHRoOiAnJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNzc1RvID0ge3dpZHRoOiAnMCd9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc3MgPSB7XG4gICAgICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjc3NUbyA9IHtoZWlnaHQ6ICcwJ307XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc2NvcGUuJGV2YWwoYXR0cnMudWliQ29sbGFwc2UpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdpbicpXG4gICAgICAgICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKVxuICAgICAgICAgICAgICAuY3NzKGNzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U2Nyb2xsRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICAgIGlmIChob3Jpem9udGFsKSB7XG4gICAgICAgICAgICByZXR1cm4ge3dpZHRoOiBlbGVtZW50LnNjcm9sbFdpZHRoICsgJ3B4J307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7aGVpZ2h0OiBlbGVtZW50LnNjcm9sbEhlaWdodCArICdweCd9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXhwYW5kKCkge1xuICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdjb2xsYXBzZScpICYmIGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkcS5yZXNvbHZlKGV4cGFuZGluZ0V4cHIoc2NvcGUpKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgaWYgKCRhbmltYXRlQ3NzKSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgYWRkQ2xhc3M6ICdpbicsXG4gICAgICAgICAgICAgICAgICBlYXNpbmc6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0bzogZ2V0U2Nyb2xsRnJvbUVsZW1lbnQoZWxlbWVudFswXSlcbiAgICAgICAgICAgICAgICB9KS5zdGFydCgpWydmaW5hbGx5J10oZXhwYW5kRG9uZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ2luJywge1xuICAgICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHRvOiBnZXRTY3JvbGxGcm9tRWxlbWVudChlbGVtZW50WzBdKVxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZXhwYW5kRG9uZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGFuZ3VsYXIubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBleHBhbmREb25lKCkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgICAgICAuY3NzKGNzcyk7XG4gICAgICAgICAgZXhwYW5kZWRFeHByKHNjb3BlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbGxhcHNlKCkge1xuICAgICAgICAgIGlmICghZWxlbWVudC5oYXNDbGFzcygnY29sbGFwc2UnKSAmJiAhZWxlbWVudC5oYXNDbGFzcygnaW4nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxhcHNlRG9uZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRxLnJlc29sdmUoY29sbGFwc2luZ0V4cHIoc2NvcGUpKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gSU1QT1JUQU5UOiBUaGUgd2lkdGggbXVzdCBiZSBzZXQgYmVmb3JlIGFkZGluZyBcImNvbGxhcHNpbmdcIiBjbGFzcy5cbiAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgYnJvd3NlciBhdHRlbXB0cyB0byBhbmltYXRlIGZyb20gd2lkdGggMCAoaW5cbiAgICAgICAgICAgICAgLy8gY29sbGFwc2luZyBjbGFzcykgdG8gdGhlIGdpdmVuIHdpZHRoIGhlcmUuXG4gICAgICAgICAgICAgICAgLmNzcyhnZXRTY3JvbGxGcm9tRWxlbWVudChlbGVtZW50WzBdKSlcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsbHkgYWxsIHBhbmVsIGNvbGxhcHNlIGhhdmUgdGhlIGNvbGxhcHNlIGNsYXNzLCB0aGlzIHJlbW92YWxcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50cyB0aGUgYW5pbWF0aW9uIGZyb20ganVtcGluZyB0byBjb2xsYXBzZWQgc3RhdGVcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgaWYgKCRhbmltYXRlQ3NzKSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6ICdpbicsXG4gICAgICAgICAgICAgICAgICB0bzogY3NzVG9cbiAgICAgICAgICAgICAgICB9KS5zdGFydCgpWydmaW5hbGx5J10oY29sbGFwc2VEb25lKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCAnaW4nLCB7XG4gICAgICAgICAgICAgICAgICB0bzogY3NzVG9cbiAgICAgICAgICAgICAgICB9KS50aGVuKGNvbGxhcHNlRG9uZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGFuZ3VsYXIubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb2xsYXBzZURvbmUoKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3MoY3NzVG8pOyAvLyBSZXF1aXJlZCBzbyB0aGF0IGNvbGxhcHNlIHdvcmtzIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlJyk7XG4gICAgICAgICAgY29sbGFwc2VkRXhwcihzY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMudWliQ29sbGFwc2UsIGZ1bmN0aW9uKHNob3VsZENvbGxhcHNlKSB7XG4gICAgICAgICAgaWYgKHNob3VsZENvbGxhcHNlKSB7XG4gICAgICAgICAgICBjb2xsYXBzZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHBhbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50YWJpbmRleCcsIFtdKVxuXG4uZGlyZWN0aXZlKCd1aWJUYWJpbmRleFRvZ2dsZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgICBhdHRycy4kb2JzZXJ2ZSgnZGlzYWJsZWQnLCBmdW5jdGlvbihkaXNhYmxlZCkge1xuICAgICAgICBhdHRycy4kc2V0KCd0YWJpbmRleCcsIGRpc2FibGVkID8gLTEgOiBudWxsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmFjY29yZGlvbicsIFsndWkuYm9vdHN0cmFwLmNvbGxhcHNlJywgJ3VpLmJvb3RzdHJhcC50YWJpbmRleCddKVxuXG4uY29uc3RhbnQoJ3VpYkFjY29yZGlvbkNvbmZpZycsIHtcbiAgY2xvc2VPdGhlcnM6IHRydWVcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJBY2NvcmRpb25Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ3VpYkFjY29yZGlvbkNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCBhY2NvcmRpb25Db25maWcpIHtcbiAgLy8gVGhpcyBhcnJheSBrZWVwcyB0cmFjayBvZiB0aGUgYWNjb3JkaW9uIGdyb3Vwc1xuICB0aGlzLmdyb3VwcyA9IFtdO1xuXG4gIC8vIEVuc3VyZSB0aGF0IGFsbCB0aGUgZ3JvdXBzIGluIHRoaXMgYWNjb3JkaW9uIGFyZSBjbG9zZWQsIHVubGVzcyBjbG9zZS1vdGhlcnMgZXhwbGljaXRseSBzYXlzIG5vdCB0b1xuICB0aGlzLmNsb3NlT3RoZXJzID0gZnVuY3Rpb24ob3Blbkdyb3VwKSB7XG4gICAgdmFyIGNsb3NlT3RoZXJzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmNsb3NlT3RoZXJzKSA/XG4gICAgICAkc2NvcGUuJGV2YWwoJGF0dHJzLmNsb3NlT3RoZXJzKSA6IGFjY29yZGlvbkNvbmZpZy5jbG9zZU90aGVycztcbiAgICBpZiAoY2xvc2VPdGhlcnMpIHtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmdyb3VwcywgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGdyb3VwICE9PSBvcGVuR3JvdXApIHtcbiAgICAgICAgICBncm91cC5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIGFjY29yZGlvbi1ncm91cCBkaXJlY3RpdmUgdG8gYWRkIGl0c2VsZiB0byB0aGUgYWNjb3JkaW9uXG4gIHRoaXMuYWRkR3JvdXAgPSBmdW5jdGlvbihncm91cFNjb3BlKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuZ3JvdXBzLnB1c2goZ3JvdXBTY29wZSk7XG5cbiAgICBncm91cFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdGhhdC5yZW1vdmVHcm91cChncm91cFNjb3BlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBhY2NvcmRpb24tZ3JvdXAgZGlyZWN0aXZlIHdoZW4gdG8gcmVtb3ZlIGl0c2VsZlxuICB0aGlzLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24oZ3JvdXApIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdyb3Vwcy5pbmRleE9mKGdyb3VwKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLmdyb3Vwcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4vLyBUaGUgYWNjb3JkaW9uIGRpcmVjdGl2ZSBzaW1wbHkgc2V0cyB1cCB0aGUgZGlyZWN0aXZlIGNvbnRyb2xsZXJcbi8vIGFuZCBhZGRzIGFuIGFjY29yZGlvbiBDU1MgY2xhc3MgdG8gaXRzZWxmIGVsZW1lbnQuXG4uZGlyZWN0aXZlKCd1aWJBY2NvcmRpb24nLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiAnVWliQWNjb3JkaW9uQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYWNjb3JkaW9uJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sJztcbiAgICB9XG4gIH07XG59KVxuXG4vLyBUaGUgYWNjb3JkaW9uLWdyb3VwIGRpcmVjdGl2ZSBpbmRpY2F0ZXMgYSBibG9jayBvZiBodG1sIHRoYXQgd2lsbCBleHBhbmQgYW5kIGNvbGxhcHNlIGluIGFuIGFjY29yZGlvblxuLmRpcmVjdGl2ZSgndWliQWNjb3JkaW9uR3JvdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXnVpYkFjY29yZGlvbicsICAgICAgICAgLy8gV2UgbmVlZCB0aGlzIGRpcmVjdGl2ZSB0byBiZSBpbnNpZGUgYW4gYWNjb3JkaW9uXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSwgICAgICAgICAgICAgIC8vIEl0IHRyYW5zY2x1ZGVzIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlIGludG8gdGhlIHRlbXBsYXRlXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgaGVhZGluZzogJ0AnLCAgICAgICAgICAgICAgIC8vIEludGVycG9sYXRlIHRoZSBoZWFkaW5nIGF0dHJpYnV0ZSBvbnRvIHRoaXMgc2NvcGVcbiAgICAgIHBhbmVsQ2xhc3M6ICdAPycsICAgICAgICAgICAvLyBEaXR0byB3aXRoIHBhbmVsQ2xhc3NcbiAgICAgIGlzT3BlbjogJz0/JyxcbiAgICAgIGlzRGlzYWJsZWQ6ICc9PydcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zZXRIZWFkaW5nID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB0aGlzLmhlYWRpbmcgPSBlbGVtZW50O1xuICAgICAgfTtcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgYWNjb3JkaW9uQ3RybCkge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygncGFuZWwnKTtcbiAgICAgIGFjY29yZGlvbkN0cmwuYWRkR3JvdXAoc2NvcGUpO1xuXG4gICAgICBzY29wZS5vcGVuQ2xhc3MgPSBhdHRycy5vcGVuQ2xhc3MgfHwgJ3BhbmVsLW9wZW4nO1xuICAgICAgc2NvcGUucGFuZWxDbGFzcyA9IGF0dHJzLnBhbmVsQ2xhc3MgfHwgJ3BhbmVsLWRlZmF1bHQnO1xuICAgICAgc2NvcGUuJHdhdGNoKCdpc09wZW4nLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKHNjb3BlLm9wZW5DbGFzcywgISF2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGFjY29yZGlvbkN0cmwuY2xvc2VPdGhlcnMoc2NvcGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUudG9nZ2xlT3BlbiA9IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICBpZiAoIXNjb3BlLmlzRGlzYWJsZWQpIHtcbiAgICAgICAgICBpZiAoISRldmVudCB8fCAkZXZlbnQud2hpY2ggPT09IDMyKSB7XG4gICAgICAgICAgICBzY29wZS5pc09wZW4gPSAhc2NvcGUuaXNPcGVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGlkID0gJ2FjY29yZGlvbmdyb3VwLScgKyBzY29wZS4kaWQgKyAnLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCk7XG4gICAgICBzY29wZS5oZWFkaW5nSWQgPSBpZCArICctdGFiJztcbiAgICAgIHNjb3BlLnBhbmVsSWQgPSBpZCArICctcGFuZWwnO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vIFVzZSBhY2NvcmRpb24taGVhZGluZyBiZWxvdyBhbiBhY2NvcmRpb24tZ3JvdXAgdG8gcHJvdmlkZSBhIGhlYWRpbmcgY29udGFpbmluZyBIVE1MXG4uZGlyZWN0aXZlKCd1aWJBY2NvcmRpb25IZWFkaW5nJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNjbHVkZTogdHJ1ZSwgICAvLyBHcmFiIHRoZSBjb250ZW50cyB0byBiZSB1c2VkIGFzIHRoZSBoZWFkaW5nXG4gICAgdGVtcGxhdGU6ICcnLCAgICAgICAvLyBJbiBlZmZlY3QgcmVtb3ZlIHRoaXMgZWxlbWVudCFcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHJlcXVpcmU6ICdedWliQWNjb3JkaW9uR3JvdXAnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgYWNjb3JkaW9uR3JvdXBDdHJsLCB0cmFuc2NsdWRlKSB7XG4gICAgICAvLyBQYXNzIHRoZSBoZWFkaW5nIHRvIHRoZSBhY2NvcmRpb24tZ3JvdXAgY29udHJvbGxlclxuICAgICAgLy8gc28gdGhhdCBpdCBjYW4gYmUgdHJhbnNjbHVkZWQgaW50byB0aGUgcmlnaHQgcGxhY2UgaW4gdGhlIHRlbXBsYXRlXG4gICAgICAvLyBbVGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gdHJhbnNjbHVkZSBjYXVzZXMgdGhlIGVsZW1lbnRzIHRvIGJlIGNsb25lZCBzbyB0aGF0IHRoZXkgd29yayBpbiBuZy1yZXBlYXRdXG4gICAgICBhY2NvcmRpb25Hcm91cEN0cmwuc2V0SGVhZGluZyh0cmFuc2NsdWRlKHNjb3BlLCBhbmd1bGFyLm5vb3ApKTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBVc2UgaW4gdGhlIGFjY29yZGlvbi1ncm91cCB0ZW1wbGF0ZSB0byBpbmRpY2F0ZSB3aGVyZSB5b3Ugd2FudCB0aGUgaGVhZGluZyB0byBiZSB0cmFuc2NsdWRlZFxuLy8gWW91IG11c3QgcHJvdmlkZSB0aGUgcHJvcGVydHkgb24gdGhlIGFjY29yZGlvbi1ncm91cCBjb250cm9sbGVyIHRoYXQgd2lsbCBob2xkIHRoZSB0cmFuc2NsdWRlZCBlbGVtZW50XG4uZGlyZWN0aXZlKCd1aWJBY2NvcmRpb25UcmFuc2NsdWRlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ151aWJBY2NvcmRpb25Hcm91cCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7IHJldHVybiBjb250cm9sbGVyW2F0dHJzLnVpYkFjY29yZGlvblRyYW5zY2x1ZGVdOyB9LCBmdW5jdGlvbihoZWFkaW5nKSB7XG4gICAgICAgIGlmIChoZWFkaW5nKSB7XG4gICAgICAgICAgdmFyIGVsZW0gPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKGdldEhlYWRlclNlbGVjdG9ycygpKSk7XG4gICAgICAgICAgZWxlbS5odG1sKCcnKTtcbiAgICAgICAgICBlbGVtLmFwcGVuZChoZWFkaW5nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldEhlYWRlclNlbGVjdG9ycygpIHtcbiAgICAgIHJldHVybiAndWliLWFjY29yZGlvbi1oZWFkZXIsJyArXG4gICAgICAgICAgJ2RhdGEtdWliLWFjY29yZGlvbi1oZWFkZXIsJyArXG4gICAgICAgICAgJ3gtdWliLWFjY29yZGlvbi1oZWFkZXIsJyArXG4gICAgICAgICAgJ3VpYlxcXFw6YWNjb3JkaW9uLWhlYWRlciwnICtcbiAgICAgICAgICAnW3VpYi1hY2NvcmRpb24taGVhZGVyXSwnICtcbiAgICAgICAgICAnW2RhdGEtdWliLWFjY29yZGlvbi1oZWFkZXJdLCcgK1xuICAgICAgICAgICdbeC11aWItYWNjb3JkaW9uLWhlYWRlcl0nO1xuICB9XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5hbGVydCcsIFtdKVxuXG4uY29udHJvbGxlcignVWliQWxlcnRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRpbnRlcnBvbGF0ZScsICckdGltZW91dCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGludGVycG9sYXRlLCAkdGltZW91dCkge1xuICAkc2NvcGUuY2xvc2VhYmxlID0gISEkYXR0cnMuY2xvc2U7XG4gICRlbGVtZW50LmFkZENsYXNzKCdhbGVydCcpO1xuICAkYXR0cnMuJHNldCgncm9sZScsICdhbGVydCcpO1xuICBpZiAoJHNjb3BlLmNsb3NlYWJsZSkge1xuICAgICRlbGVtZW50LmFkZENsYXNzKCdhbGVydC1kaXNtaXNzaWJsZScpO1xuICB9XG5cbiAgdmFyIGRpc21pc3NPblRpbWVvdXQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGlzbWlzc09uVGltZW91dCkgP1xuICAgICRpbnRlcnBvbGF0ZSgkYXR0cnMuZGlzbWlzc09uVGltZW91dCkoJHNjb3BlLiRwYXJlbnQpIDogbnVsbDtcblxuICBpZiAoZGlzbWlzc09uVGltZW91dCkge1xuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmNsb3NlKCk7XG4gICAgfSwgcGFyc2VJbnQoZGlzbWlzc09uVGltZW91dCwgMTApKTtcbiAgfVxufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkFsZXJ0JywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogJ1VpYkFsZXJ0Q29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYWxlcnQnLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sJztcbiAgICB9LFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgc2NvcGU6IHtcbiAgICAgIGNsb3NlOiAnJidcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5idXR0b25zJywgW10pXG5cbi5jb25zdGFudCgndWliQnV0dG9uQ29uZmlnJywge1xuICBhY3RpdmVDbGFzczogJ2FjdGl2ZScsXG4gIHRvZ2dsZUV2ZW50OiAnY2xpY2snXG59KVxuXG4uY29udHJvbGxlcignVWliQnV0dG9uc0NvbnRyb2xsZXInLCBbJ3VpYkJ1dHRvbkNvbmZpZycsIGZ1bmN0aW9uKGJ1dHRvbkNvbmZpZykge1xuICB0aGlzLmFjdGl2ZUNsYXNzID0gYnV0dG9uQ29uZmlnLmFjdGl2ZUNsYXNzIHx8ICdhY3RpdmUnO1xuICB0aGlzLnRvZ2dsZUV2ZW50ID0gYnV0dG9uQ29uZmlnLnRvZ2dsZUV2ZW50IHx8ICdjbGljayc7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliQnRuUmFkaW8nLCBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsndWliQnRuUmFkaW8nLCAnbmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJCdXR0b25zQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYnV0dG9ucycsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGJ1dHRvbnNDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICB2YXIgdW5jaGVja2FibGVFeHByID0gJHBhcnNlKGF0dHJzLnVpYlVuY2hlY2thYmxlKTtcblxuICAgICAgZWxlbWVudC5maW5kKCdpbnB1dCcpLmNzcyh7ZGlzcGxheTogJ25vbmUnfSk7XG5cbiAgICAgIC8vbW9kZWwgLT4gVUlcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcywgYW5ndWxhci5lcXVhbHMobmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUsIHNjb3BlLiRldmFsKGF0dHJzLnVpYkJ0blJhZGlvKSkpO1xuICAgICAgfTtcblxuICAgICAgLy91aS0+bW9kZWxcbiAgICAgIGVsZW1lbnQub24oYnV0dG9uc0N0cmwudG9nZ2xlRXZlbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYXR0cnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNBY3RpdmUgPSBlbGVtZW50Lmhhc0NsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlIHx8IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnVuY2hlY2thYmxlKSkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoaXNBY3RpdmUgPyBudWxsIDogc2NvcGUuJGV2YWwoYXR0cnMudWliQnRuUmFkaW8pKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChhdHRycy51aWJVbmNoZWNrYWJsZSkge1xuICAgICAgICBzY29wZS4kd2F0Y2godW5jaGVja2FibGVFeHByLCBmdW5jdGlvbih1bmNoZWNrYWJsZSkge1xuICAgICAgICAgIGF0dHJzLiRzZXQoJ3VuY2hlY2thYmxlJywgdW5jaGVja2FibGUgPyAnJyA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJCdG5DaGVja2JveCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsndWliQnRuQ2hlY2tib3gnLCAnbmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJCdXR0b25zQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYnV0dG9uJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgYnV0dG9uc0N0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgZWxlbWVudC5maW5kKCdpbnB1dCcpLmNzcyh7ZGlzcGxheTogJ25vbmUnfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFRydWVWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoZWNrYm94VmFsdWUoYXR0cnMuYnRuQ2hlY2tib3hUcnVlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0RmFsc2VWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoZWNrYm94VmFsdWUoYXR0cnMuYnRuQ2hlY2tib3hGYWxzZSwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRDaGVja2JveFZhbHVlKGF0dHJpYnV0ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZChhdHRyaWJ1dGUpID8gc2NvcGUuJGV2YWwoYXR0cmlidXRlKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgLy9tb2RlbCAtPiBVSVxuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzLCBhbmd1bGFyLmVxdWFscyhuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSwgZ2V0VHJ1ZVZhbHVlKCkpKTtcbiAgICAgIH07XG5cbiAgICAgIC8vdWktPm1vZGVsXG4gICAgICBlbGVtZW50Lm9uKGJ1dHRvbnNDdHJsLnRvZ2dsZUV2ZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGF0dHJzLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudC5oYXNDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcykgPyBnZXRGYWxzZVZhbHVlKCkgOiBnZXRUcnVlVmFsdWUoKSk7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmNhcm91c2VsJywgW10pXG5cbi5jb250cm9sbGVyKCdVaWJDYXJvdXNlbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckaW50ZXJ2YWwnLCAnJHRpbWVvdXQnLCAnJGFuaW1hdGUnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkaW50ZXJ2YWwsICR0aW1lb3V0LCAkYW5pbWF0ZSkge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgc2xpZGVzID0gc2VsZi5zbGlkZXMgPSAkc2NvcGUuc2xpZGVzID0gW10sXG4gICAgU0xJREVfRElSRUNUSU9OID0gJ3VpYi1zbGlkZURpcmVjdGlvbicsXG4gICAgY3VycmVudEluZGV4ID0gJHNjb3BlLmFjdGl2ZSxcbiAgICBjdXJyZW50SW50ZXJ2YWwsIGlzUGxheWluZztcblxuICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gICRlbGVtZW50LmFkZENsYXNzKCdjYXJvdXNlbCcpO1xuXG4gIHNlbGYuYWRkU2xpZGUgPSBmdW5jdGlvbihzbGlkZSwgZWxlbWVudCkge1xuICAgIHNsaWRlcy5wdXNoKHtcbiAgICAgIHNsaWRlOiBzbGlkZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcbiAgICB9KTtcbiAgICBzbGlkZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gK2Euc2xpZGUuaW5kZXggLSArYi5zbGlkZS5pbmRleDtcbiAgICB9KTtcbiAgICAvL2lmIHRoaXMgaXMgdGhlIGZpcnN0IHNsaWRlIG9yIHRoZSBzbGlkZSBpcyBzZXQgdG8gYWN0aXZlLCBzZWxlY3QgaXRcbiAgICBpZiAoc2xpZGUuaW5kZXggPT09ICRzY29wZS5hY3RpdmUgfHwgc2xpZGVzLmxlbmd0aCA9PT0gMSAmJiAhYW5ndWxhci5pc051bWJlcigkc2NvcGUuYWN0aXZlKSkge1xuICAgICAgaWYgKCRzY29wZS4kY3VycmVudFRyYW5zaXRpb24pIHtcbiAgICAgICAgJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRJbmRleCA9IHNsaWRlLmluZGV4O1xuICAgICAgJHNjb3BlLmFjdGl2ZSA9IHNsaWRlLmluZGV4O1xuICAgICAgc2V0QWN0aXZlKGN1cnJlbnRJbmRleCk7XG4gICAgICBzZWxmLnNlbGVjdChzbGlkZXNbZmluZFNsaWRlSW5kZXgoc2xpZGUpXSk7XG4gICAgICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkc2NvcGUucGxheSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBzZWxmLmdldEN1cnJlbnRJbmRleCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldLnNsaWRlLmluZGV4ID09PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHNlbGYubmV4dCA9ICRzY29wZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld0luZGV4ID0gKHNlbGYuZ2V0Q3VycmVudEluZGV4KCkgKyAxKSAlIHNsaWRlcy5sZW5ndGg7XG5cbiAgICBpZiAobmV3SW5kZXggPT09IDAgJiYgJHNjb3BlLm5vV3JhcCgpKSB7XG4gICAgICAkc2NvcGUucGF1c2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5zZWxlY3Qoc2xpZGVzW25ld0luZGV4XSwgJ25leHQnKTtcbiAgfTtcblxuICBzZWxmLnByZXYgPSAkc2NvcGUucHJldiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdJbmRleCA9IHNlbGYuZ2V0Q3VycmVudEluZGV4KCkgLSAxIDwgMCA/IHNsaWRlcy5sZW5ndGggLSAxIDogc2VsZi5nZXRDdXJyZW50SW5kZXgoKSAtIDE7XG5cbiAgICBpZiAoJHNjb3BlLm5vV3JhcCgpICYmIG5ld0luZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgJHNjb3BlLnBhdXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc2VsZWN0KHNsaWRlc1tuZXdJbmRleF0sICdwcmV2Jyk7XG4gIH07XG5cbiAgc2VsZi5yZW1vdmVTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlKSB7XG4gICAgdmFyIGluZGV4ID0gZmluZFNsaWRlSW5kZXgoc2xpZGUpO1xuXG4gICAgLy9nZXQgdGhlIGluZGV4IG9mIHRoZSBzbGlkZSBpbnNpZGUgdGhlIGNhcm91c2VsXG4gICAgc2xpZGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgaWYgKHNsaWRlcy5sZW5ndGggPiAwICYmIGN1cnJlbnRJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA+PSBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IHNsaWRlcy5sZW5ndGggLSAxO1xuICAgICAgICAkc2NvcGUuYWN0aXZlID0gY3VycmVudEluZGV4O1xuICAgICAgICBzZXRBY3RpdmUoY3VycmVudEluZGV4KTtcbiAgICAgICAgc2VsZi5zZWxlY3Qoc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgc2V0QWN0aXZlKGN1cnJlbnRJbmRleCk7XG4gICAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudEluZGV4ID4gaW5kZXgpIHtcbiAgICAgIGN1cnJlbnRJbmRleC0tO1xuICAgICAgJHNjb3BlLmFjdGl2ZSA9IGN1cnJlbnRJbmRleDtcbiAgICB9XG5cbiAgICAvL2NsZWFuIHRoZSBhY3RpdmUgdmFsdWUgd2hlbiBubyBtb3JlIHNsaWRlXG4gICAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGN1cnJlbnRJbmRleCA9IG51bGw7XG4gICAgICAkc2NvcGUuYWN0aXZlID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgLyogZGlyZWN0aW9uOiBcInByZXZcIiBvciBcIm5leHRcIiAqL1xuICBzZWxmLnNlbGVjdCA9ICRzY29wZS5zZWxlY3QgPSBmdW5jdGlvbihuZXh0U2xpZGUsIGRpcmVjdGlvbikge1xuICAgIHZhciBuZXh0SW5kZXggPSBmaW5kU2xpZGVJbmRleChuZXh0U2xpZGUuc2xpZGUpO1xuICAgIC8vRGVjaWRlIGRpcmVjdGlvbiBpZiBpdCdzIG5vdCBnaXZlblxuICAgIGlmIChkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGlyZWN0aW9uID0gbmV4dEluZGV4ID4gc2VsZi5nZXRDdXJyZW50SW5kZXgoKSA/ICduZXh0JyA6ICdwcmV2JztcbiAgICB9XG4gICAgLy9QcmV2ZW50IHRoaXMgdXNlci10cmlnZ2VyZWQgdHJhbnNpdGlvbiBmcm9tIG9jY3VycmluZyBpZiB0aGVyZSBpcyBhbHJlYWR5IG9uZSBpbiBwcm9ncmVzc1xuICAgIGlmIChuZXh0U2xpZGUuc2xpZGUuaW5kZXggIT09IGN1cnJlbnRJbmRleCAmJlxuICAgICAgISRzY29wZS4kY3VycmVudFRyYW5zaXRpb24pIHtcbiAgICAgIGdvTmV4dChuZXh0U2xpZGUuc2xpZGUsIG5leHRJbmRleCwgZGlyZWN0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgLyogQWxsb3cgb3V0c2lkZSBwZW9wbGUgdG8gY2FsbCBpbmRleE9mIG9uIHNsaWRlcyBhcnJheSAqL1xuICAkc2NvcGUuaW5kZXhPZlNsaWRlID0gZnVuY3Rpb24oc2xpZGUpIHtcbiAgICByZXR1cm4gK3NsaWRlLnNsaWRlLmluZGV4O1xuICB9O1xuXG4gICRzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKHNsaWRlKSB7XG4gICAgcmV0dXJuICRzY29wZS5hY3RpdmUgPT09IHNsaWRlLnNsaWRlLmluZGV4O1xuICB9O1xuXG4gICRzY29wZS5pc1ByZXZEaXNhYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkc2NvcGUuYWN0aXZlID09PSAwICYmICRzY29wZS5ub1dyYXAoKTtcbiAgfTtcblxuICAkc2NvcGUuaXNOZXh0RGlzYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJHNjb3BlLmFjdGl2ZSA9PT0gc2xpZGVzLmxlbmd0aCAtIDEgJiYgJHNjb3BlLm5vV3JhcCgpO1xuICB9O1xuXG4gICRzY29wZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vUGF1c2UpIHtcbiAgICAgIGlzUGxheWluZyA9IGZhbHNlO1xuICAgICAgcmVzZXRUaW1lcigpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghaXNQbGF5aW5nKSB7XG4gICAgICBpc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgcmVzdGFydFRpbWVyKCk7XG4gICAgfVxuICB9O1xuXG4gICRlbGVtZW50Lm9uKCdtb3VzZWVudGVyJywgJHNjb3BlLnBhdXNlKTtcbiAgJGVsZW1lbnQub24oJ21vdXNlbGVhdmUnLCAkc2NvcGUucGxheSk7XG5cbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICAgIHJlc2V0VGltZXIoKTtcbiAgfSk7XG5cbiAgJHNjb3BlLiR3YXRjaCgnbm9UcmFuc2l0aW9uJywgZnVuY3Rpb24obm9UcmFuc2l0aW9uKSB7XG4gICAgJGFuaW1hdGUuZW5hYmxlZCgkZWxlbWVudCwgIW5vVHJhbnNpdGlvbik7XG4gIH0pO1xuXG4gICRzY29wZS4kd2F0Y2goJ2ludGVydmFsJywgcmVzdGFydFRpbWVyKTtcblxuICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignc2xpZGVzJywgcmVzZXRUcmFuc2l0aW9uKTtcblxuICAkc2NvcGUuJHdhdGNoKCdhY3RpdmUnLCBmdW5jdGlvbihpbmRleCkge1xuICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKGluZGV4KSAmJiBjdXJyZW50SW5kZXggIT09IGluZGV4KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc2xpZGVzW2ldLnNsaWRlLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGUgPSBzbGlkZXNbaW5kZXhdO1xuICAgICAgaWYgKHNsaWRlKSB7XG4gICAgICAgIHNldEFjdGl2ZShpbmRleCk7XG4gICAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tpbmRleF0pO1xuICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGdldFNsaWRlQnlJbmRleChpbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gc2xpZGVzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgaWYgKHNsaWRlc1tpXS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHNsaWRlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBY3RpdmUoaW5kZXgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgc2xpZGVzW2ldLnNsaWRlLmFjdGl2ZSA9IGkgPT09IGluZGV4O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvTmV4dChzbGlkZSwgaW5kZXgsIGRpcmVjdGlvbikge1xuICAgIGlmIChkZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhbmd1bGFyLmV4dGVuZChzbGlkZSwge2RpcmVjdGlvbjogZGlyZWN0aW9ufSk7XG4gICAgYW5ndWxhci5leHRlbmQoc2xpZGVzW2N1cnJlbnRJbmRleF0uc2xpZGUgfHwge30sIHtkaXJlY3Rpb246IGRpcmVjdGlvbn0pO1xuICAgIGlmICgkYW5pbWF0ZS5lbmFibGVkKCRlbGVtZW50KSAmJiAhJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbiAmJlxuICAgICAgc2xpZGVzW2luZGV4XS5lbGVtZW50ICYmIHNlbGYuc2xpZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHNsaWRlc1tpbmRleF0uZWxlbWVudC5kYXRhKFNMSURFX0RJUkVDVElPTiwgc2xpZGUuZGlyZWN0aW9uKTtcbiAgICAgIHZhciBjdXJyZW50SWR4ID0gc2VsZi5nZXRDdXJyZW50SW5kZXgoKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoY3VycmVudElkeCkgJiYgc2xpZGVzW2N1cnJlbnRJZHhdLmVsZW1lbnQpIHtcbiAgICAgICAgc2xpZGVzW2N1cnJlbnRJZHhdLmVsZW1lbnQuZGF0YShTTElERV9ESVJFQ1RJT04sIHNsaWRlLmRpcmVjdGlvbik7XG4gICAgICB9XG5cbiAgICAgICRzY29wZS4kY3VycmVudFRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgJGFuaW1hdGUub24oJ2FkZENsYXNzJywgc2xpZGVzW2luZGV4XS5lbGVtZW50LCBmdW5jdGlvbihlbGVtZW50LCBwaGFzZSkge1xuICAgICAgICBpZiAocGhhc2UgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAkYW5pbWF0ZS5vZmYoJ2FkZENsYXNzJywgZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS5hY3RpdmUgPSBzbGlkZS5pbmRleDtcbiAgICBjdXJyZW50SW5kZXggPSBzbGlkZS5pbmRleDtcbiAgICBzZXRBY3RpdmUoaW5kZXgpO1xuXG4gICAgLy9ldmVyeSB0aW1lIHlvdSBjaGFuZ2Ugc2xpZGVzLCByZXNldCB0aGUgdGltZXJcbiAgICByZXN0YXJ0VGltZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRTbGlkZUluZGV4KHNsaWRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzbGlkZXNbaV0uc2xpZGUgPT09IHNsaWRlKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VGltZXIoKSB7XG4gICAgaWYgKGN1cnJlbnRJbnRlcnZhbCkge1xuICAgICAgJGludGVydmFsLmNhbmNlbChjdXJyZW50SW50ZXJ2YWwpO1xuICAgICAgY3VycmVudEludGVydmFsID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyYW5zaXRpb24oc2xpZGVzKSB7XG4gICAgaWYgKCFzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXN0YXJ0VGltZXIoKSB7XG4gICAgcmVzZXRUaW1lcigpO1xuICAgIHZhciBpbnRlcnZhbCA9ICskc2NvcGUuaW50ZXJ2YWw7XG4gICAgaWYgKCFpc05hTihpbnRlcnZhbCkgJiYgaW50ZXJ2YWwgPiAwKSB7XG4gICAgICBjdXJyZW50SW50ZXJ2YWwgPSAkaW50ZXJ2YWwodGltZXJGbiwgaW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRm4oKSB7XG4gICAgdmFyIGludGVydmFsID0gKyRzY29wZS5pbnRlcnZhbDtcbiAgICBpZiAoaXNQbGF5aW5nICYmICFpc05hTihpbnRlcnZhbCkgJiYgaW50ZXJ2YWwgPiAwICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICRzY29wZS5uZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRzY29wZS5wYXVzZSgpO1xuICAgIH1cbiAgfVxufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkNhcm91c2VsJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnVWliQ2Fyb3VzZWxDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdjYXJvdXNlbCcsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2Nhcm91c2VsL2Nhcm91c2VsLmh0bWwnO1xuICAgIH0sXG4gICAgc2NvcGU6IHtcbiAgICAgIGFjdGl2ZTogJz0nLFxuICAgICAgaW50ZXJ2YWw6ICc9JyxcbiAgICAgIG5vVHJhbnNpdGlvbjogJz0nLFxuICAgICAgbm9QYXVzZTogJz0nLFxuICAgICAgbm9XcmFwOiAnJidcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJTbGlkZScsIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICdedWliQ2Fyb3VzZWwnLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWwnO1xuICAgIH0sXG4gICAgc2NvcGU6IHtcbiAgICAgIGFjdHVhbDogJz0/JyxcbiAgICAgIGluZGV4OiAnPT8nXG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjYXJvdXNlbEN0cmwpIHtcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2l0ZW0nKTtcbiAgICAgIGNhcm91c2VsQ3RybC5hZGRTbGlkZShzY29wZSwgZWxlbWVudCk7XG4gICAgICAvL3doZW4gdGhlIHNjb3BlIGlzIGRlc3Ryb3llZCB0aGVuIHJlbW92ZSB0aGUgc2xpZGUgZnJvbSB0aGUgY3VycmVudCBzbGlkZXMgYXJyYXlcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY2Fyb3VzZWxDdHJsLnJlbW92ZVNsaWRlKHNjb3BlKTtcbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kd2F0Y2goJ2FjdGl2ZScsIGZ1bmN0aW9uKGFjdGl2ZSkge1xuICAgICAgICAkYW5pbWF0ZVthY3RpdmUgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWxlbWVudCwgJ2FjdGl2ZScpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV0pXG5cbi5hbmltYXRpb24oJy5pdGVtJywgWyckYW5pbWF0ZUNzcycsXG5mdW5jdGlvbigkYW5pbWF0ZUNzcykge1xuICB2YXIgU0xJREVfRElSRUNUSU9OID0gJ3VpYi1zbGlkZURpcmVjdGlvbic7XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lLCBjYWxsYmFjaykge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZWZvcmVBZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7XG4gICAgICBpZiAoY2xhc3NOYW1lID09PSAnYWN0aXZlJykge1xuICAgICAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZWxlbWVudC5kYXRhKFNMSURFX0RJUkVDVElPTik7XG4gICAgICAgIHZhciBkaXJlY3Rpb25DbGFzcyA9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgdmFyIHJlbW92ZUNsYXNzRm4gPSByZW1vdmVDbGFzcy5iaW5kKHRoaXMsIGVsZW1lbnQsXG4gICAgICAgICAgZGlyZWN0aW9uQ2xhc3MgKyAnICcgKyBkaXJlY3Rpb24sIGRvbmUpO1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKGRpcmVjdGlvbik7XG5cbiAgICAgICAgJGFuaW1hdGVDc3MoZWxlbWVudCwge2FkZENsYXNzOiBkaXJlY3Rpb25DbGFzc30pXG4gICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAuZG9uZShyZW1vdmVDbGFzc0ZuKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBkb25lKCk7XG4gICAgfSxcbiAgICBiZWZvcmVSZW1vdmVDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGVsZW1lbnQuZGF0YShTTElERV9ESVJFQ1RJT04pO1xuICAgICAgICB2YXIgZGlyZWN0aW9uQ2xhc3MgPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIHZhciByZW1vdmVDbGFzc0ZuID0gcmVtb3ZlQ2xhc3MuYmluZCh0aGlzLCBlbGVtZW50LCBkaXJlY3Rpb25DbGFzcywgZG9uZSk7XG5cbiAgICAgICAgJGFuaW1hdGVDc3MoZWxlbWVudCwge2FkZENsYXNzOiBkaXJlY3Rpb25DbGFzc30pXG4gICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAuZG9uZShyZW1vdmVDbGFzc0ZuKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9O1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwYXJzZXInLCBbXSlcblxuLnNlcnZpY2UoJ3VpYkRhdGVQYXJzZXInLCBbJyRsb2cnLCAnJGxvY2FsZScsICdkYXRlRmlsdGVyJywgJ29yZGVyQnlGaWx0ZXInLCAnZmlsdGVyRmlsdGVyJywgZnVuY3Rpb24oJGxvZywgJGxvY2FsZSwgZGF0ZUZpbHRlciwgb3JkZXJCeUZpbHRlciwgZmlsdGVyRmlsdGVyKSB7XG4gIC8vIFB1bGxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYm9zdG9jay9kMy9ibG9iL21hc3Rlci9zcmMvZm9ybWF0L3JlcXVvdGUuanNcbiAgdmFyIFNQRUNJQUxfQ0hBUkFDVEVSU19SRUdFWFAgPSAvW1xcXFxcXF5cXCRcXCpcXCtcXD9cXHxcXFtcXF1cXChcXClcXC5cXHtcXH1dL2c7XG5cbiAgdmFyIGxvY2FsZUlkO1xuICB2YXIgZm9ybWF0Q29kZVRvUmVnZXg7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgbG9jYWxlSWQgPSAkbG9jYWxlLmlkO1xuXG4gICAgdGhpcy5wYXJzZXJzID0ge307XG4gICAgdGhpcy5mb3JtYXR0ZXJzID0ge307XG5cbiAgICBmb3JtYXRDb2RlVG9SZWdleCA9IFtcbiAgICAgIHtcbiAgICAgICAga2V5OiAneXl5eScsXG4gICAgICAgIHJlZ2V4OiAnXFxcXGR7NH0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy55ZWFyID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgX2RhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIF9kYXRlLnNldEZ1bGxZZWFyKE1hdGguYWJzKGRhdGUuZ2V0RnVsbFllYXIoKSkpO1xuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKF9kYXRlLCAneXl5eScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICd5eScsXG4gICAgICAgIHJlZ2V4OiAnXFxcXGR7Mn0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdmFsdWUgPSArdmFsdWU7IHRoaXMueWVhciA9IHZhbHVlIDwgNjkgPyB2YWx1ZSArIDIwMDAgOiB2YWx1ZSArIDE5MDA7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciBfZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgX2RhdGUuc2V0RnVsbFllYXIoTWF0aC5hYnMoZGF0ZS5nZXRGdWxsWWVhcigpKSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoX2RhdGUsICd5eScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICd5JyxcbiAgICAgICAgcmVnZXg6ICdcXFxcZHsxLDR9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMueWVhciA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIF9kYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICBfZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmFicyhkYXRlLmdldEZ1bGxZZWFyKCkpKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihfZGF0ZSwgJ3knKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnTSEnLFxuICAgICAgICByZWdleDogJzA/WzEtOV18MVswLTJdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSB2YWx1ZSAtIDE7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgICBpZiAoL15bMC05XSQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTU0nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNTU1NJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5NT05USC5qb2luKCd8JyksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLk1PTlRILmluZGV4T2YodmFsdWUpOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ01NTU0nKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnTU1NJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5TSE9SVE1PTlRILmpvaW4oJ3wnKSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlRNT05USC5pbmRleE9mKHZhbHVlKTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNTU0nKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnTU0nLFxuICAgICAgICByZWdleDogJzBbMS05XXwxWzAtMl0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9IHZhbHVlIC0gMTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNTScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNJyxcbiAgICAgICAgcmVnZXg6ICdbMS05XXwxWzAtMl0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9IHZhbHVlIC0gMTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ2QhJyxcbiAgICAgICAgcmVnZXg6ICdbMC0yXT9bMC05XXsxfXwzWzAtMV17MX0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5kYXRlID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBkYXRlLmdldERhdGUoKTtcbiAgICAgICAgICBpZiAoL15bMS05XSQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnZGQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnZCcpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdkZCcsXG4gICAgICAgIHJlZ2V4OiAnWzAtMl1bMC05XXsxfXwzWzAtMV17MX0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5kYXRlID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2RkJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ2QnLFxuICAgICAgICByZWdleDogJ1sxLTJdP1swLTldezF9fDNbMC0xXXsxfScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmRhdGUgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnZCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdFRUVFJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5EQVkuam9pbignfCcpLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0VFRUUnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnRUVFJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5TSE9SVERBWS5qb2luKCd8JyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnRUVFJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0hIJyxcbiAgICAgICAgcmVnZXg6ICcoPzowfDEpWzAtOV18MlswLTNdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuaG91cnMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnSEgnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnaGgnLFxuICAgICAgICByZWdleDogJzBbMC05XXwxWzAtMl0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdoaCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdIJyxcbiAgICAgICAgcmVnZXg6ICcxP1swLTldfDJbMC0zXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmhvdXJzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0gnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnaCcsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV18MVswLTJdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuaG91cnMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnaCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdtbScsXG4gICAgICAgIHJlZ2V4OiAnWzAtNV1bMC05XScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1pbnV0ZXMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnbW0nKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnbScsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV18WzEtNV1bMC05XScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1pbnV0ZXMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnbScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdzc3MnLFxuICAgICAgICByZWdleDogJ1swLTldWzAtOV1bMC05XScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1pbGxpc2Vjb25kcyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdzc3MnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnc3MnLFxuICAgICAgICByZWdleDogJ1swLTVdWzAtOV0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5zZWNvbmRzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ3NzJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3MnLFxuICAgICAgICByZWdleDogJ1swLTldfFsxLTVdWzAtOV0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5zZWNvbmRzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ3MnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnYScsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuQU1QTVMuam9pbignfCcpLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAodGhpcy5ob3VycyA9PT0gMTIpIHtcbiAgICAgICAgICAgIHRoaXMuaG91cnMgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ1BNJykge1xuICAgICAgICAgICAgdGhpcy5ob3VycyArPSAxMjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnYScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdaJyxcbiAgICAgICAgcmVnZXg6ICdbKy1dXFxcXGR7NH0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHZhbHVlLm1hdGNoKC8oWystXSkoXFxkezJ9KShcXGR7Mn0pLyksXG4gICAgICAgICAgICBzaWduID0gbWF0Y2hlc1sxXSxcbiAgICAgICAgICAgIGhvdXJzID0gbWF0Y2hlc1syXSxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBtYXRjaGVzWzNdO1xuICAgICAgICAgIHRoaXMuaG91cnMgKz0gdG9JbnQoc2lnbiArIGhvdXJzKTtcbiAgICAgICAgICB0aGlzLm1pbnV0ZXMgKz0gdG9JbnQoc2lnbiArIG1pbnV0ZXMpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnWicpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICd3dycsXG4gICAgICAgIHJlZ2V4OiAnWzAtNF1bMC05XXw1WzAtM10nLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ3d3Jyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3cnLFxuICAgICAgICByZWdleDogJ1swLTldfFsxLTRdWzAtOV18NVswLTNdJyxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICd3Jyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0dHR0cnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkVSQU5BTUVTLmpvaW4oJ3wnKS5yZXBsYWNlKC9cXHMvZywgJ1xcXFxzJyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnR0dHRycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdHR0cnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkVSQVMuam9pbignfCcpLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0dHRycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdHRycsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuRVJBUy5qb2luKCd8JyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnR0cnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnRycsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuRVJBUy5qb2luKCd8JyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnRycpOyB9XG4gICAgICB9XG4gICAgXTtcblxuICAgIGlmIChhbmd1bGFyLnZlcnNpb24ubWFqb3IgPj0gMSAmJiBhbmd1bGFyLnZlcnNpb24ubWlub3IgPiA0KSB7XG4gICAgICBmb3JtYXRDb2RlVG9SZWdleC5wdXNoKHtcbiAgICAgICAga2V5OiAnTExMTCcsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU1RBTkRBTE9ORU1PTlRILmpvaW4oJ3wnKSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU1RBTkRBTE9ORU1PTlRILmluZGV4T2YodmFsdWUpOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0xMTEwnKTsgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuaW5pdCgpO1xuXG4gIGZ1bmN0aW9uIGdldEZvcm1hdENvZGVUb1JlZ2V4KGtleSkge1xuICAgIHJldHVybiBmaWx0ZXJGaWx0ZXIoZm9ybWF0Q29kZVRvUmVnZXgsIHtrZXk6IGtleX0sIHRydWUpWzBdO1xuICB9XG5cbiAgdGhpcy5nZXRQYXJzZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGYgPSBnZXRGb3JtYXRDb2RlVG9SZWdleChrZXkpO1xuICAgIHJldHVybiBmICYmIGYuYXBwbHkgfHwgbnVsbDtcbiAgfTtcblxuICB0aGlzLm92ZXJyaWRlUGFyc2VyID0gZnVuY3Rpb24gKGtleSwgcGFyc2VyKSB7XG4gICAgdmFyIGYgPSBnZXRGb3JtYXRDb2RlVG9SZWdleChrZXkpO1xuICAgIGlmIChmICYmIGFuZ3VsYXIuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICB0aGlzLnBhcnNlcnMgPSB7fTtcbiAgICAgIGYuYXBwbHkgPSBwYXJzZXI7XG4gICAgfVxuICB9LmJpbmQodGhpcyk7XG5cbiAgZnVuY3Rpb24gY3JlYXRlUGFyc2VyKGZvcm1hdCkge1xuICAgIHZhciBtYXAgPSBbXSwgcmVnZXggPSBmb3JtYXQuc3BsaXQoJycpO1xuXG4gICAgLy8gY2hlY2sgZm9yIGxpdGVyYWwgdmFsdWVzXG4gICAgdmFyIHF1b3RlSW5kZXggPSBmb3JtYXQuaW5kZXhPZignXFwnJyk7XG4gICAgaWYgKHF1b3RlSW5kZXggPiAtMSkge1xuICAgICAgdmFyIGluTGl0ZXJhbCA9IGZhbHNlO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnNwbGl0KCcnKTtcbiAgICAgIGZvciAodmFyIGkgPSBxdW90ZUluZGV4OyBpIDwgZm9ybWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpbkxpdGVyYWwpIHtcbiAgICAgICAgICBpZiAoZm9ybWF0W2ldID09PSAnXFwnJykge1xuICAgICAgICAgICAgaWYgKGkgKyAxIDwgZm9ybWF0Lmxlbmd0aCAmJiBmb3JtYXRbaSsxXSA9PT0gJ1xcJycpIHsgLy8gZXNjYXBlZCBzaW5nbGUgcXVvdGVcbiAgICAgICAgICAgICAgZm9ybWF0W2krMV0gPSAnJCc7XG4gICAgICAgICAgICAgIHJlZ2V4W2krMV0gPSAnJztcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGVuZCBvZiBsaXRlcmFsXG4gICAgICAgICAgICAgIHJlZ2V4W2ldID0gJyc7XG4gICAgICAgICAgICAgIGluTGl0ZXJhbCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3JtYXRbaV0gPSAnJCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGZvcm1hdFtpXSA9PT0gJ1xcJycpIHsgLy8gc3RhcnQgb2YgbGl0ZXJhbFxuICAgICAgICAgICAgZm9ybWF0W2ldID0gJyQnO1xuICAgICAgICAgICAgcmVnZXhbaV0gPSAnJztcbiAgICAgICAgICAgIGluTGl0ZXJhbCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5qb2luKCcnKTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLmZvckVhY2goZm9ybWF0Q29kZVRvUmVnZXgsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBpbmRleCA9IGZvcm1hdC5pbmRleE9mKGRhdGEua2V5KTtcblxuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnNwbGl0KCcnKTtcblxuICAgICAgICByZWdleFtpbmRleF0gPSAnKCcgKyBkYXRhLnJlZ2V4ICsgJyknO1xuICAgICAgICBmb3JtYXRbaW5kZXhdID0gJyQnOyAvLyBDdXN0b20gc3ltYm9sIHRvIGRlZmluZSBjb25zdW1lZCBwYXJ0IG9mIGZvcm1hdFxuICAgICAgICBmb3IgKHZhciBpID0gaW5kZXggKyAxLCBuID0gaW5kZXggKyBkYXRhLmtleS5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICByZWdleFtpXSA9ICcnO1xuICAgICAgICAgIGZvcm1hdFtpXSA9ICckJztcbiAgICAgICAgfVxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQuam9pbignJyk7XG5cbiAgICAgICAgbWFwLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICBrZXk6IGRhdGEua2V5LFxuICAgICAgICAgIGFwcGx5OiBkYXRhLmFwcGx5LFxuICAgICAgICAgIG1hdGNoZXI6IGRhdGEucmVnZXhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVnZXg6IG5ldyBSZWdFeHAoJ14nICsgcmVnZXguam9pbignJykgKyAnJCcpLFxuICAgICAgbWFwOiBvcmRlckJ5RmlsdGVyKG1hcCwgJ2luZGV4JylcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRm9ybWF0dGVyKGZvcm1hdCkge1xuICAgIHZhciBmb3JtYXR0ZXJzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBmb3JtYXR0ZXIsIGxpdGVyYWxJZHg7XG4gICAgd2hpbGUgKGkgPCBmb3JtYXQubGVuZ3RoKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc051bWJlcihsaXRlcmFsSWR4KSkge1xuICAgICAgICBpZiAoZm9ybWF0LmNoYXJBdChpKSA9PT0gJ1xcJycpIHtcbiAgICAgICAgICBpZiAoaSArIDEgPj0gZm9ybWF0Lmxlbmd0aCB8fCBmb3JtYXQuY2hhckF0KGkgKyAxKSAhPT0gJ1xcJycpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlcnMucHVzaChjb25zdHJ1Y3RMaXRlcmFsRm9ybWF0dGVyKGZvcm1hdCwgbGl0ZXJhbElkeCwgaSkpO1xuICAgICAgICAgICAgbGl0ZXJhbElkeCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGZvcm1hdC5sZW5ndGgpIHtcbiAgICAgICAgICB3aGlsZSAobGl0ZXJhbElkeCA8IGZvcm1hdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlciA9IGNvbnN0cnVjdEZvcm1hdHRlckZyb21JZHgoZm9ybWF0LCBsaXRlcmFsSWR4KTtcbiAgICAgICAgICAgIGZvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICAgICAgICAgICAgbGl0ZXJhbElkeCA9IGZvcm1hdHRlci5lbmRJZHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaSsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvcm1hdC5jaGFyQXQoaSkgPT09ICdcXCcnKSB7XG4gICAgICAgIGxpdGVyYWxJZHggPSBpO1xuICAgICAgICBpKys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBmb3JtYXR0ZXIgPSBjb25zdHJ1Y3RGb3JtYXR0ZXJGcm9tSWR4KGZvcm1hdCwgaSk7XG5cbiAgICAgIGZvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIucGFyc2VyKTtcbiAgICAgIGkgPSBmb3JtYXR0ZXIuZW5kSWR4O1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXR0ZXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RydWN0TGl0ZXJhbEZvcm1hdHRlcihmb3JtYXQsIGxpdGVyYWxJZHgsIGVuZElkeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmb3JtYXQuc3Vic3RyKGxpdGVyYWxJZHggKyAxLCBlbmRJZHggLSBsaXRlcmFsSWR4IC0gMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdEZvcm1hdHRlckZyb21JZHgoZm9ybWF0LCBpKSB7XG4gICAgdmFyIGN1cnJlbnRQb3NTdHIgPSBmb3JtYXQuc3Vic3RyKGkpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZm9ybWF0Q29kZVRvUmVnZXgubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChuZXcgUmVnRXhwKCdeJyArIGZvcm1hdENvZGVUb1JlZ2V4W2pdLmtleSkudGVzdChjdXJyZW50UG9zU3RyKSkge1xuICAgICAgICB2YXIgZGF0YSA9IGZvcm1hdENvZGVUb1JlZ2V4W2pdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVuZElkeDogaSArIGRhdGEua2V5Lmxlbmd0aCxcbiAgICAgICAgICBwYXJzZXI6IGRhdGEuZm9ybWF0dGVyXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVuZElkeDogaSArIDEsXG4gICAgICBwYXJzZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFBvc1N0ci5jaGFyQXQoMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHRoaXMuZmlsdGVyID0gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0KSB7XG4gICAgaWYgKCFhbmd1bGFyLmlzRGF0ZShkYXRlKSB8fCBpc05hTihkYXRlKSB8fCAhZm9ybWF0KSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTW2Zvcm1hdF0gfHwgZm9ybWF0O1xuXG4gICAgaWYgKCRsb2NhbGUuaWQgIT09IGxvY2FsZUlkKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZm9ybWF0dGVyc1tmb3JtYXRdKSB7XG4gICAgICB0aGlzLmZvcm1hdHRlcnNbZm9ybWF0XSA9IGNyZWF0ZUZvcm1hdHRlcihmb3JtYXQpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXJzID0gdGhpcy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICByZXR1cm4gZm9ybWF0dGVycy5yZWR1Y2UoZnVuY3Rpb24oc3RyLCBmb3JtYXR0ZXIpIHtcbiAgICAgIHJldHVybiBzdHIgKyBmb3JtYXR0ZXIoZGF0ZSk7XG4gICAgfSwgJycpO1xuICB9O1xuXG4gIHRoaXMucGFyc2UgPSBmdW5jdGlvbihpbnB1dCwgZm9ybWF0LCBiYXNlRGF0ZSkge1xuICAgIGlmICghYW5ndWxhci5pc1N0cmluZyhpbnB1dCkgfHwgIWZvcm1hdCkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDtcbiAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShTUEVDSUFMX0NIQVJBQ1RFUlNfUkVHRVhQLCAnXFxcXCQmJyk7XG5cbiAgICBpZiAoJGxvY2FsZS5pZCAhPT0gbG9jYWxlSWQpIHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wYXJzZXJzW2Zvcm1hdF0pIHtcbiAgICAgIHRoaXMucGFyc2Vyc1tmb3JtYXRdID0gY3JlYXRlUGFyc2VyKGZvcm1hdCwgJ2FwcGx5Jyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlciA9IHRoaXMucGFyc2Vyc1tmb3JtYXRdLFxuICAgICAgICByZWdleCA9IHBhcnNlci5yZWdleCxcbiAgICAgICAgbWFwID0gcGFyc2VyLm1hcCxcbiAgICAgICAgcmVzdWx0cyA9IGlucHV0Lm1hdGNoKHJlZ2V4KSxcbiAgICAgICAgdHpPZmZzZXQgPSBmYWxzZTtcbiAgICBpZiAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCkge1xuICAgICAgdmFyIGZpZWxkcywgZHQ7XG4gICAgICBpZiAoYW5ndWxhci5pc0RhdGUoYmFzZURhdGUpICYmICFpc05hTihiYXNlRGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICAgIGZpZWxkcyA9IHtcbiAgICAgICAgICB5ZWFyOiBiYXNlRGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgIG1vbnRoOiBiYXNlRGF0ZS5nZXRNb250aCgpLFxuICAgICAgICAgIGRhdGU6IGJhc2VEYXRlLmdldERhdGUoKSxcbiAgICAgICAgICBob3VyczogYmFzZURhdGUuZ2V0SG91cnMoKSxcbiAgICAgICAgICBtaW51dGVzOiBiYXNlRGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICAgICAgc2Vjb25kczogYmFzZURhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgIG1pbGxpc2Vjb25kczogYmFzZURhdGUuZ2V0TWlsbGlzZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChiYXNlRGF0ZSkge1xuICAgICAgICAgICRsb2cud2FybignZGF0ZXBhcnNlcjonLCAnYmFzZURhdGUgaXMgbm90IGEgdmFsaWQgZGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIGZpZWxkcyA9IHsgeWVhcjogMTkwMCwgbW9udGg6IDAsIGRhdGU6IDEsIGhvdXJzOiAwLCBtaW51dGVzOiAwLCBzZWNvbmRzOiAwLCBtaWxsaXNlY29uZHM6IDAgfTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDEsIG4gPSByZXN1bHRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICB2YXIgbWFwcGVyID0gbWFwW2kgLSAxXTtcbiAgICAgICAgaWYgKG1hcHBlci5tYXRjaGVyID09PSAnWicpIHtcbiAgICAgICAgICB0ek9mZnNldCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwcGVyLmFwcGx5KSB7XG4gICAgICAgICAgbWFwcGVyLmFwcGx5LmNhbGwoZmllbGRzLCByZXN1bHRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGF0ZXNldHRlciA9IHR6T2Zmc2V0ID8gRGF0ZS5wcm90b3R5cGUuc2V0VVRDRnVsbFllYXIgOlxuICAgICAgICBEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhcjtcbiAgICAgIHZhciB0aW1lc2V0dGVyID0gdHpPZmZzZXQgPyBEYXRlLnByb3RvdHlwZS5zZXRVVENIb3VycyA6XG4gICAgICAgIERhdGUucHJvdG90eXBlLnNldEhvdXJzO1xuXG4gICAgICBpZiAoaXNWYWxpZChmaWVsZHMueWVhciwgZmllbGRzLm1vbnRoLCBmaWVsZHMuZGF0ZSkpIHtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKGJhc2VEYXRlKSAmJiAhaXNOYU4oYmFzZURhdGUuZ2V0VGltZSgpKSAmJiAhdHpPZmZzZXQpIHtcbiAgICAgICAgICBkdCA9IG5ldyBEYXRlKGJhc2VEYXRlKTtcbiAgICAgICAgICBkYXRlc2V0dGVyLmNhbGwoZHQsIGZpZWxkcy55ZWFyLCBmaWVsZHMubW9udGgsIGZpZWxkcy5kYXRlKTtcbiAgICAgICAgICB0aW1lc2V0dGVyLmNhbGwoZHQsIGZpZWxkcy5ob3VycywgZmllbGRzLm1pbnV0ZXMsXG4gICAgICAgICAgICBmaWVsZHMuc2Vjb25kcywgZmllbGRzLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHQgPSBuZXcgRGF0ZSgwKTtcbiAgICAgICAgICBkYXRlc2V0dGVyLmNhbGwoZHQsIGZpZWxkcy55ZWFyLCBmaWVsZHMubW9udGgsIGZpZWxkcy5kYXRlKTtcbiAgICAgICAgICB0aW1lc2V0dGVyLmNhbGwoZHQsIGZpZWxkcy5ob3VycyB8fCAwLCBmaWVsZHMubWludXRlcyB8fCAwLFxuICAgICAgICAgICAgZmllbGRzLnNlY29uZHMgfHwgMCwgZmllbGRzLm1pbGxpc2Vjb25kcyB8fCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZHQ7XG4gICAgfVxuICB9O1xuXG4gIC8vIENoZWNrIGlmIGRhdGUgaXMgdmFsaWQgZm9yIHNwZWNpZmljIG1vbnRoIChhbmQgeWVhciBmb3IgRmVicnVhcnkpLlxuICAvLyBNb250aDogMCA9IEphbiwgMSA9IEZlYiwgZXRjXG4gIGZ1bmN0aW9uIGlzVmFsaWQoeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgICBpZiAoZGF0ZSA8IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobW9udGggPT09IDEgJiYgZGF0ZSA+IDI4KSB7XG4gICAgICByZXR1cm4gZGF0ZSA9PT0gMjkgJiYgKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG4gICAgfVxuXG4gICAgaWYgKG1vbnRoID09PSAzIHx8IG1vbnRoID09PSA1IHx8IG1vbnRoID09PSA4IHx8IG1vbnRoID09PSAxMCkge1xuICAgICAgcmV0dXJuIGRhdGUgPCAzMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvSW50KHN0cikge1xuICAgIHJldHVybiBwYXJzZUludChzdHIsIDEwKTtcbiAgfVxuXG4gIHRoaXMudG9UaW1lem9uZSA9IHRvVGltZXpvbmU7XG4gIHRoaXMuZnJvbVRpbWV6b25lID0gZnJvbVRpbWV6b25lO1xuICB0aGlzLnRpbWV6b25lVG9PZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0O1xuICB0aGlzLmFkZERhdGVNaW51dGVzID0gYWRkRGF0ZU1pbnV0ZXM7XG4gIHRoaXMuY29udmVydFRpbWV6b25lVG9Mb2NhbCA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWw7XG5cbiAgZnVuY3Rpb24gdG9UaW1lem9uZShkYXRlLCB0aW1lem9uZSkge1xuICAgIHJldHVybiBkYXRlICYmIHRpbWV6b25lID8gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSkgOiBkYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbVRpbWV6b25lKGRhdGUsIHRpbWV6b25lKSB7XG4gICAgcmV0dXJuIGRhdGUgJiYgdGltZXpvbmUgPyBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCB0cnVlKSA6IGRhdGU7XG4gIH1cblxuICAvL2h0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi82MjJjNDIxNjk2OTllYzA3ZmM2ZGFhYTE5ZmU2ZDIyNGU1ZDJmNzBlL3NyYy9Bbmd1bGFyLmpzI0wxMjA3XG4gIGZ1bmN0aW9uIHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGZhbGxiYWNrKSB7XG4gICAgdGltZXpvbmUgPSB0aW1lem9uZS5yZXBsYWNlKC86L2csICcnKTtcbiAgICB2YXIgcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQgPSBEYXRlLnBhcnNlKCdKYW4gMDEsIDE5NzAgMDA6MDA6MDAgJyArIHRpbWV6b25lKSAvIDYwMDAwO1xuICAgIHJldHVybiBpc05hTihyZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCkgPyBmYWxsYmFjayA6IHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgbWludXRlcykge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpICsgbWludXRlcyk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCByZXZlcnNlKSB7XG4gICAgcmV2ZXJzZSA9IHJldmVyc2UgPyAtMSA6IDE7XG4gICAgdmFyIGRhdGVUaW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBkYXRlVGltZXpvbmVPZmZzZXQpO1xuICAgIHJldHVybiBhZGREYXRlTWludXRlcyhkYXRlLCByZXZlcnNlICogKHRpbWV6b25lT2Zmc2V0IC0gZGF0ZVRpbWV6b25lT2Zmc2V0KSk7XG4gIH1cbn1dKTtcblxuLy8gQXZvaWRpbmcgdXNlIG9mIG5nLWNsYXNzIGFzIGl0IGNyZWF0ZXMgYSBsb3Qgb2Ygd2F0Y2hlcnMgd2hlbiBhIGNsYXNzIGlzIHRvIGJlIGFwcGxpZWQgdG9cbi8vIGF0IG1vc3Qgb25lIGVsZW1lbnQuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmlzQ2xhc3MnLCBbXSlcbi5kaXJlY3RpdmUoJ3VpYklzQ2xhc3MnLCBbXG4gICAgICAgICAnJGFuaW1hdGUnLFxuZnVuY3Rpb24gKCRhbmltYXRlKSB7XG4gIC8vICAgICAgICAgICAgICAgICAgICAxMTExMTExMSAgICAgICAgICAyMjIyMjIyMlxuICB2YXIgT05fUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pXFxzK29uXFxzKyhbXFxzXFxTXSs/KVxccyokLztcbiAgLy8gICAgICAgICAgICAgICAgICAgIDExMTExMTExICAgICAgICAgICAyMjIyMjIyMlxuICB2YXIgSVNfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pXFxzK2ZvclxccysoW1xcc1xcU10rPylcXHMqJC87XG5cbiAgdmFyIGRhdGFQZXJUcmFja2VkID0ge307XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgIHZhciBsaW5rZWRTY29wZXMgPSBbXTtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBbXTtcbiAgICAgIHZhciBleHBUb0RhdGEgPSB7fTtcbiAgICAgIHZhciBsYXN0QWN0aXZhdGVkID0gbnVsbDtcbiAgICAgIHZhciBvbkV4cE1hdGNoZXMgPSB0QXR0cnMudWliSXNDbGFzcy5tYXRjaChPTl9SRUdFWFApO1xuICAgICAgdmFyIG9uRXhwID0gb25FeHBNYXRjaGVzWzJdO1xuICAgICAgdmFyIGV4cHNTdHIgPSBvbkV4cE1hdGNoZXNbMV07XG4gICAgICB2YXIgZXhwcyA9IGV4cHNTdHIuc3BsaXQoJywnKTtcblxuICAgICAgcmV0dXJuIGxpbmtGbjtcblxuICAgICAgZnVuY3Rpb24gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBsaW5rZWRTY29wZXMucHVzaChzY29wZSk7XG4gICAgICAgIGluc3RhbmNlcy5wdXNoKHtcbiAgICAgICAgICBzY29wZTogc2NvcGUsXG4gICAgICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBzLmZvckVhY2goZnVuY3Rpb24oZXhwLCBrKSB7XG4gICAgICAgICAgYWRkRm9yRXhwKGV4cCwgc2NvcGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgcmVtb3ZlU2NvcGUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhZGRGb3JFeHAoZXhwLCBzY29wZSkge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IGV4cC5tYXRjaChJU19SRUdFWFApO1xuICAgICAgICB2YXIgY2xhenogPSBzY29wZS4kZXZhbChtYXRjaGVzWzFdKTtcbiAgICAgICAgdmFyIGNvbXBhcmVXaXRoRXhwID0gbWF0Y2hlc1syXTtcbiAgICAgICAgdmFyIGRhdGEgPSBleHBUb0RhdGFbZXhwXTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgdmFyIHdhdGNoRm4gPSBmdW5jdGlvbihjb21wYXJlV2l0aFZhbCkge1xuICAgICAgICAgICAgdmFyIG5ld0FjdGl2YXRlZCA9IG51bGw7XG4gICAgICAgICAgICBpbnN0YW5jZXMuc29tZShmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgICAgICAgICB2YXIgdGhpc1ZhbCA9IGluc3RhbmNlLnNjb3BlLiRldmFsKG9uRXhwKTtcbiAgICAgICAgICAgICAgaWYgKHRoaXNWYWwgPT09IGNvbXBhcmVXaXRoVmFsKSB7XG4gICAgICAgICAgICAgICAgbmV3QWN0aXZhdGVkID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGRhdGEubGFzdEFjdGl2YXRlZCAhPT0gbmV3QWN0aXZhdGVkKSB7XG4gICAgICAgICAgICAgIGlmIChkYXRhLmxhc3RBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhkYXRhLmxhc3RBY3RpdmF0ZWQuZWxlbWVudCwgY2xhenopO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChuZXdBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhuZXdBY3RpdmF0ZWQuZWxlbWVudCwgY2xhenopO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRhdGEubGFzdEFjdGl2YXRlZCA9IG5ld0FjdGl2YXRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGV4cFRvRGF0YVtleHBdID0gZGF0YSA9IHtcbiAgICAgICAgICAgIGxhc3RBY3RpdmF0ZWQ6IG51bGwsXG4gICAgICAgICAgICBzY29wZTogc2NvcGUsXG4gICAgICAgICAgICB3YXRjaEZuOiB3YXRjaEZuLFxuICAgICAgICAgICAgY29tcGFyZVdpdGhFeHA6IGNvbXBhcmVXaXRoRXhwLFxuICAgICAgICAgICAgd2F0Y2hlcjogc2NvcGUuJHdhdGNoKGNvbXBhcmVXaXRoRXhwLCB3YXRjaEZuKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS53YXRjaEZuKHNjb3BlLiRldmFsKGNvbXBhcmVXaXRoRXhwKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZVNjb3BlKGUpIHtcbiAgICAgICAgdmFyIHJlbW92ZWRTY29wZSA9IGUudGFyZ2V0U2NvcGU7XG4gICAgICAgIHZhciBpbmRleCA9IGxpbmtlZFNjb3Blcy5pbmRleE9mKHJlbW92ZWRTY29wZSk7XG4gICAgICAgIGxpbmtlZFNjb3Blcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaWYgKGxpbmtlZFNjb3Blcy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgbmV3V2F0Y2hTY29wZSA9IGxpbmtlZFNjb3Blc1swXTtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZXhwVG9EYXRhLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5zY29wZSA9PT0gcmVtb3ZlZFNjb3BlKSB7XG4gICAgICAgICAgICAgIGRhdGEud2F0Y2hlciA9IG5ld1dhdGNoU2NvcGUuJHdhdGNoKGRhdGEuY29tcGFyZVdpdGhFeHAsIGRhdGEud2F0Y2hGbik7XG4gICAgICAgICAgICAgIGRhdGEuc2NvcGUgPSBuZXdXYXRjaFNjb3BlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4cFRvRGF0YSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufV0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kYXRlcGlja2VyJywgWyd1aS5ib290c3RyYXAuZGF0ZXBhcnNlcicsICd1aS5ib290c3RyYXAuaXNDbGFzcyddKVxuXG4udmFsdWUoJyRkYXRlcGlja2VyU3VwcHJlc3NFcnJvcicsIGZhbHNlKVxuXG4udmFsdWUoJyRkYXRlcGlja2VyTGl0ZXJhbFdhcm5pbmcnLCB0cnVlKVxuXG4uY29uc3RhbnQoJ3VpYkRhdGVwaWNrZXJDb25maWcnLCB7XG4gIGRhdGVwaWNrZXJNb2RlOiAnZGF5JyxcbiAgZm9ybWF0RGF5OiAnZGQnLFxuICBmb3JtYXRNb250aDogJ01NTU0nLFxuICBmb3JtYXRZZWFyOiAneXl5eScsXG4gIGZvcm1hdERheUhlYWRlcjogJ0VFRScsXG4gIGZvcm1hdERheVRpdGxlOiAnTU1NTSB5eXl5JyxcbiAgZm9ybWF0TW9udGhUaXRsZTogJ3l5eXknLFxuICBtYXhEYXRlOiBudWxsLFxuICBtYXhNb2RlOiAneWVhcicsXG4gIG1pbkRhdGU6IG51bGwsXG4gIG1pbk1vZGU6ICdkYXknLFxuICBtb250aENvbHVtbnM6IDMsXG4gIG5nTW9kZWxPcHRpb25zOiB7fSxcbiAgc2hvcnRjdXRQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHNob3dXZWVrczogdHJ1ZSxcbiAgeWVhckNvbHVtbnM6IDUsXG4gIHllYXJSb3dzOiA0XG59KVxuXG4uY29udHJvbGxlcignVWliRGF0ZXBpY2tlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJHBhcnNlJywgJyRpbnRlcnBvbGF0ZScsICckbG9jYWxlJywgJyRsb2cnLCAnZGF0ZUZpbHRlcicsICd1aWJEYXRlcGlja2VyQ29uZmlnJywgJyRkYXRlcGlja2VyTGl0ZXJhbFdhcm5pbmcnLCAnJGRhdGVwaWNrZXJTdXBwcmVzc0Vycm9yJywgJ3VpYkRhdGVQYXJzZXInLFxuICBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRwYXJzZSwgJGludGVycG9sYXRlLCAkbG9jYWxlLCAkbG9nLCBkYXRlRmlsdGVyLCBkYXRlcGlja2VyQ29uZmlnLCAkZGF0ZXBpY2tlckxpdGVyYWxXYXJuaW5nLCAkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3IsIGRhdGVQYXJzZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgbmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9LCAvLyBudWxsTW9kZWxDdHJsO1xuICAgICAgbmdNb2RlbE9wdGlvbnMgPSB7fSxcbiAgICAgIHdhdGNoTGlzdGVuZXJzID0gW107XG5cbiAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3VpYi1kYXRlcGlja2VyJyk7XG4gICRhdHRycy4kc2V0KCdyb2xlJywgJ2FwcGxpY2F0aW9uJyk7XG5cbiAgaWYgKCEkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMpIHtcbiAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIE1vZGVzIGNoYWluXG4gIHRoaXMubW9kZXMgPSBbJ2RheScsICdtb250aCcsICd5ZWFyJ107XG5cbiAgW1xuICAgICdjdXN0b21DbGFzcycsXG4gICAgJ2RhdGVEaXNhYmxlZCcsXG4gICAgJ2RhdGVwaWNrZXJNb2RlJyxcbiAgICAnZm9ybWF0RGF5JyxcbiAgICAnZm9ybWF0RGF5SGVhZGVyJyxcbiAgICAnZm9ybWF0RGF5VGl0bGUnLFxuICAgICdmb3JtYXRNb250aCcsXG4gICAgJ2Zvcm1hdE1vbnRoVGl0bGUnLFxuICAgICdmb3JtYXRZZWFyJyxcbiAgICAnbWF4RGF0ZScsXG4gICAgJ21heE1vZGUnLFxuICAgICdtaW5EYXRlJyxcbiAgICAnbWluTW9kZScsXG4gICAgJ21vbnRoQ29sdW1ucycsXG4gICAgJ3Nob3dXZWVrcycsXG4gICAgJ3Nob3J0Y3V0UHJvcGFnYXRpb24nLFxuICAgICdzdGFydGluZ0RheScsXG4gICAgJ3llYXJDb2x1bW5zJyxcbiAgICAneWVhclJvd3MnXG4gIF0uZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAnY3VzdG9tQ2xhc3MnOlxuICAgICAgY2FzZSAnZGF0ZURpc2FibGVkJzpcbiAgICAgICAgJHNjb3BlW2tleV0gPSAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSB8fCBhbmd1bGFyLm5vb3A7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGF0ZXBpY2tlck1vZGUnOlxuICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPSBhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUpID9cbiAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUgOiBkYXRlcGlja2VyQ29uZmlnLmRhdGVwaWNrZXJNb2RlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Zvcm1hdERheSc6XG4gICAgICBjYXNlICdmb3JtYXREYXlIZWFkZXInOlxuICAgICAgY2FzZSAnZm9ybWF0RGF5VGl0bGUnOlxuICAgICAgY2FzZSAnZm9ybWF0TW9udGgnOlxuICAgICAgY2FzZSAnZm9ybWF0TW9udGhUaXRsZSc6XG4gICAgICBjYXNlICdmb3JtYXRZZWFyJzpcbiAgICAgICAgc2VsZltrZXldID0gYW5ndWxhci5pc0RlZmluZWQoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0pID9cbiAgICAgICAgICAkaW50ZXJwb2xhdGUoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0pKCRzY29wZS4kcGFyZW50KSA6XG4gICAgICAgICAgZGF0ZXBpY2tlckNvbmZpZ1trZXldO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21vbnRoQ29sdW1ucyc6XG4gICAgICBjYXNlICdzaG93V2Vla3MnOlxuICAgICAgY2FzZSAnc2hvcnRjdXRQcm9wYWdhdGlvbic6XG4gICAgICBjYXNlICd5ZWFyQ29sdW1ucyc6XG4gICAgICBjYXNlICd5ZWFyUm93cyc6XG4gICAgICAgIHNlbGZba2V5XSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSA/XG4gICAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0gOiBkYXRlcGlja2VyQ29uZmlnW2tleV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RhcnRpbmdEYXknOlxuICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLnN0YXJ0aW5nRGF5KSkge1xuICAgICAgICAgIHNlbGYuc3RhcnRpbmdEYXkgPSAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuc3RhcnRpbmdEYXk7XG4gICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc051bWJlcihkYXRlcGlja2VyQ29uZmlnLnN0YXJ0aW5nRGF5KSkge1xuICAgICAgICAgIHNlbGYuc3RhcnRpbmdEYXkgPSBkYXRlcGlja2VyQ29uZmlnLnN0YXJ0aW5nRGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuc3RhcnRpbmdEYXkgPSAoJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkZJUlNUREFZT0ZXRUVLICsgOCkgJSA3O1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtYXhEYXRlJzpcbiAgICAgIGNhc2UgJ21pbkRhdGUnOlxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdkYXRlcGlja2VyT3B0aW9ucy4nICsga2V5LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICBzZWxmW2tleV0gPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShuZXcgRGF0ZSh2YWx1ZSksIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZykge1xuICAgICAgICAgICAgICAgICRsb2cud2FybignTGl0ZXJhbCBkYXRlIHN1cHBvcnQgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHN3aXRjaCB0byBkYXRlIG9iamVjdCB1c2FnZScpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2VsZltrZXldID0gbmV3IERhdGUoZGF0ZUZpbHRlcih2YWx1ZSwgJ21lZGl1bScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZltrZXldID0gZGF0ZXBpY2tlckNvbmZpZ1trZXldID9cbiAgICAgICAgICAgICAgZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobmV3IERhdGUoZGF0ZXBpY2tlckNvbmZpZ1trZXldKSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKSA6XG4gICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5yZWZyZXNoVmlldygpO1xuICAgICAgICB9KTtcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21heE1vZGUnOlxuICAgICAgY2FzZSAnbWluTW9kZSc6XG4gICAgICAgIGlmICgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkge1xuICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7IHJldHVybiAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XTsgfSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGZba2V5XSA9ICRzY29wZVtrZXldID0gYW5ndWxhci5pc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdtaW5Nb2RlJyAmJiBzZWxmLm1vZGVzLmluZGV4T2YoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlKSA8IHNlbGYubW9kZXMuaW5kZXhPZihzZWxmW2tleV0pIHx8XG4gICAgICAgICAgICAgIGtleSA9PT0gJ21heE1vZGUnICYmIHNlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUpID4gc2VsZi5tb2Rlcy5pbmRleE9mKHNlbGZba2V5XSkpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJNb2RlID0gc2VsZltrZXldO1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUgPSBzZWxmW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZltrZXldID0gJHNjb3BlW2tleV0gPSBkYXRlcGlja2VyQ29uZmlnW2tleV0gfHwgbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG5cbiAgJHNjb3BlLnVuaXF1ZUlkID0gJ2RhdGVwaWNrZXItJyArICRzY29wZS4kaWQgKyAnLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCk7XG5cbiAgJHNjb3BlLmRpc2FibGVkID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRpc2FibGVkKSB8fCBmYWxzZTtcbiAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5uZ0Rpc2FibGVkKSkge1xuICAgIHdhdGNoTGlzdGVuZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRhdHRycy5uZ0Rpc2FibGVkLCBmdW5jdGlvbihkaXNhYmxlZCkge1xuICAgICAgJHNjb3BlLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gICAgfSkpO1xuICB9XG5cbiAgJHNjb3BlLmlzQWN0aXZlID0gZnVuY3Rpb24oZGF0ZU9iamVjdCkge1xuICAgIGlmIChzZWxmLmNvbXBhcmUoZGF0ZU9iamVjdC5kYXRlLCBzZWxmLmFjdGl2ZURhdGUpID09PSAwKSB7XG4gICAgICAkc2NvcGUuYWN0aXZlRGF0ZUlkID0gZGF0ZU9iamVjdC51aWQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsXykge1xuICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmxfO1xuICAgIG5nTW9kZWxPcHRpb25zID0gZXh0cmFjdE9wdGlvbnMobmdNb2RlbEN0cmwpO1xuXG4gICAgaWYgKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5pbml0RGF0ZSkge1xuICAgICAgc2VsZi5hY3RpdmVEYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmluaXREYXRlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpIHx8IG5ldyBEYXRlKCk7XG4gICAgICAkc2NvcGUuJHdhdGNoKCdkYXRlcGlja2VyT3B0aW9ucy5pbml0RGF0ZScsIGZ1bmN0aW9uKGluaXREYXRlKSB7XG4gICAgICAgIGlmIChpbml0RGF0ZSAmJiAobmdNb2RlbEN0cmwuJGlzRW1wdHkobmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUpIHx8IG5nTW9kZWxDdHJsLiRpbnZhbGlkKSkge1xuICAgICAgICAgIHNlbGYuYWN0aXZlRGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKGluaXREYXRlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuYWN0aXZlRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGUgPSBuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSA/IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlKSA6IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5hY3RpdmVEYXRlID0gIWlzTmFOKGRhdGUpID9cbiAgICAgIGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKGRhdGUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSkgOlxuICAgICAgZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobmV3IERhdGUoKSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcblxuICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYucmVuZGVyKCk7XG4gICAgfTtcbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpLFxuICAgICAgICAgIGlzVmFsaWQgPSAhaXNOYU4oZGF0ZSk7XG5cbiAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlRGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKGRhdGUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICB9IGVsc2UgaWYgKCEkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3IpIHtcbiAgICAgICAgJGxvZy5lcnJvcignRGF0ZXBpY2tlciBkaXJlY3RpdmU6IFwibmctbW9kZWxcIiB2YWx1ZSBtdXN0IGJlIGEgRGF0ZSBvYmplY3QnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZWZyZXNoVmlldygpO1xuICB9O1xuXG4gIHRoaXMucmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAkc2NvcGUuc2VsZWN0ZWREdCA9IG51bGw7XG4gICAgICB0aGlzLl9yZWZyZXNoVmlldygpO1xuICAgICAgaWYgKCRzY29wZS5hY3RpdmVEdCkge1xuICAgICAgICAkc2NvcGUuYWN0aXZlRGF0ZUlkID0gJHNjb3BlLmFjdGl2ZUR0LnVpZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID8gbmV3IERhdGUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkgOiBudWxsO1xuICAgICAgZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKGRhdGUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2RhdGVEaXNhYmxlZCcsICFkYXRlIHx8XG4gICAgICAgIHRoaXMuZWxlbWVudCAmJiAhdGhpcy5pc0Rpc2FibGVkKGRhdGUpKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jcmVhdGVEYXRlT2JqZWN0ID0gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0KSB7XG4gICAgdmFyIG1vZGVsID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA/IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpIDogbnVsbDtcbiAgICBtb2RlbCA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKG1vZGVsLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgdG9kYXkgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZSh0b2RheSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICB2YXIgdGltZSA9IHRoaXMuY29tcGFyZShkYXRlLCB0b2RheSk7XG4gICAgdmFyIGR0ID0ge1xuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIGxhYmVsOiBkYXRlUGFyc2VyLmZpbHRlcihkYXRlLCBmb3JtYXQpLFxuICAgICAgc2VsZWN0ZWQ6IG1vZGVsICYmIHRoaXMuY29tcGFyZShkYXRlLCBtb2RlbCkgPT09IDAsXG4gICAgICBkaXNhYmxlZDogdGhpcy5pc0Rpc2FibGVkKGRhdGUpLFxuICAgICAgcGFzdDogdGltZSA8IDAsXG4gICAgICBjdXJyZW50OiB0aW1lID09PSAwLFxuICAgICAgZnV0dXJlOiB0aW1lID4gMCxcbiAgICAgIGN1c3RvbUNsYXNzOiB0aGlzLmN1c3RvbUNsYXNzKGRhdGUpIHx8IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKG1vZGVsICYmIHRoaXMuY29tcGFyZShkYXRlLCBtb2RlbCkgPT09IDApIHtcbiAgICAgICRzY29wZS5zZWxlY3RlZER0ID0gZHQ7XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuYWN0aXZlRGF0ZSAmJiB0aGlzLmNvbXBhcmUoZHQuZGF0ZSwgc2VsZi5hY3RpdmVEYXRlKSA9PT0gMCkge1xuICAgICAgJHNjb3BlLmFjdGl2ZUR0ID0gZHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGR0O1xuICB9O1xuXG4gIHRoaXMuaXNEaXNhYmxlZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gJHNjb3BlLmRpc2FibGVkIHx8XG4gICAgICB0aGlzLm1pbkRhdGUgJiYgdGhpcy5jb21wYXJlKGRhdGUsIHRoaXMubWluRGF0ZSkgPCAwIHx8XG4gICAgICB0aGlzLm1heERhdGUgJiYgdGhpcy5jb21wYXJlKGRhdGUsIHRoaXMubWF4RGF0ZSkgPiAwIHx8XG4gICAgICAkc2NvcGUuZGF0ZURpc2FibGVkICYmICRzY29wZS5kYXRlRGlzYWJsZWQoe2RhdGU6IGRhdGUsIG1vZGU6ICRzY29wZS5kYXRlcGlja2VyTW9kZX0pO1xuICB9O1xuXG4gIHRoaXMuY3VzdG9tQ2xhc3MgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuICRzY29wZS5jdXN0b21DbGFzcyh7ZGF0ZTogZGF0ZSwgbW9kZTogJHNjb3BlLmRhdGVwaWNrZXJNb2RlfSk7XG4gIH07XG5cbiAgLy8gU3BsaXQgYXJyYXkgaW50byBzbWFsbGVyIGFycmF5c1xuICB0aGlzLnNwbGl0ID0gZnVuY3Rpb24oYXJyLCBzaXplKSB7XG4gICAgdmFyIGFycmF5cyA9IFtdO1xuICAgIHdoaWxlIChhcnIubGVuZ3RoID4gMCkge1xuICAgICAgYXJyYXlzLnB1c2goYXJyLnNwbGljZSgwLCBzaXplKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheXM7XG4gIH07XG5cbiAgJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBpZiAoJHNjb3BlLmRhdGVwaWNrZXJNb2RlID09PSBzZWxmLm1pbk1vZGUpIHtcbiAgICAgIHZhciBkdCA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPyBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShuZXcgRGF0ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKSA6IG5ldyBEYXRlKDAsIDAsIDAsIDAsIDAsIDAsIDApO1xuICAgICAgZHQuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpKTtcbiAgICAgIGR0ID0gZGF0ZVBhcnNlci50b1RpbWV6b25lKGR0LCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShkdCk7XG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuYWN0aXZlRGF0ZSA9IGRhdGU7XG4gICAgICBzZXRNb2RlKHNlbGYubW9kZXNbc2VsZi5tb2Rlcy5pbmRleE9mKCRzY29wZS5kYXRlcGlja2VyTW9kZSkgLSAxXSk7XG5cbiAgICAgICRzY29wZS4kZW1pdCgndWliOmRhdGVwaWNrZXIubW9kZScpO1xuICAgIH1cblxuICAgICRzY29wZS4kYnJvYWRjYXN0KCd1aWI6ZGF0ZXBpY2tlci5mb2N1cycpO1xuICB9O1xuXG4gICRzY29wZS5tb3ZlID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgdmFyIHllYXIgPSBzZWxmLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSArIGRpcmVjdGlvbiAqIChzZWxmLnN0ZXAueWVhcnMgfHwgMCksXG4gICAgICAgIG1vbnRoID0gc2VsZi5hY3RpdmVEYXRlLmdldE1vbnRoKCkgKyBkaXJlY3Rpb24gKiAoc2VsZi5zdGVwLm1vbnRocyB8fCAwKTtcbiAgICBzZWxmLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIoeWVhciwgbW9udGgsIDEpO1xuICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgfTtcblxuICAkc2NvcGUudG9nZ2xlTW9kZSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCAxO1xuXG4gICAgaWYgKCRzY29wZS5kYXRlcGlja2VyTW9kZSA9PT0gc2VsZi5tYXhNb2RlICYmIGRpcmVjdGlvbiA9PT0gMSB8fFxuICAgICAgJHNjb3BlLmRhdGVwaWNrZXJNb2RlID09PSBzZWxmLm1pbk1vZGUgJiYgZGlyZWN0aW9uID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldE1vZGUoc2VsZi5tb2Rlc1tzZWxmLm1vZGVzLmluZGV4T2YoJHNjb3BlLmRhdGVwaWNrZXJNb2RlKSArIGRpcmVjdGlvbl0pO1xuXG4gICAgJHNjb3BlLiRlbWl0KCd1aWI6ZGF0ZXBpY2tlci5tb2RlJyk7XG4gIH07XG5cbiAgLy8gS2V5IGV2ZW50IG1hcHBlclxuICAkc2NvcGUua2V5cyA9IHsgMTM6ICdlbnRlcicsIDMyOiAnc3BhY2UnLCAzMzogJ3BhZ2V1cCcsIDM0OiAncGFnZWRvd24nLCAzNTogJ2VuZCcsIDM2OiAnaG9tZScsIDM3OiAnbGVmdCcsIDM4OiAndXAnLCAzOTogJ3JpZ2h0JywgNDA6ICdkb3duJyB9O1xuXG4gIHZhciBmb2N1c0VsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgfTtcblxuICAvLyBMaXN0ZW4gZm9yIGZvY3VzIHJlcXVlc3RzIGZyb20gcG9wdXAgZGlyZWN0aXZlXG4gICRzY29wZS4kb24oJ3VpYjpkYXRlcGlja2VyLmZvY3VzJywgZm9jdXNFbGVtZW50KTtcblxuICAkc2NvcGUua2V5ZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIHZhciBrZXkgPSAkc2NvcGUua2V5c1tldnQud2hpY2hdO1xuXG4gICAgaWYgKCFrZXkgfHwgZXZ0LnNoaWZ0S2V5IHx8IGV2dC5hbHRLZXkgfHwgJHNjb3BlLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCFzZWxmLnNob3J0Y3V0UHJvcGFnYXRpb24pIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnZW50ZXInIHx8IGtleSA9PT0gJ3NwYWNlJykge1xuICAgICAgaWYgKHNlbGYuaXNEaXNhYmxlZChzZWxmLmFjdGl2ZURhdGUpKSB7XG4gICAgICAgIHJldHVybjsgLy8gZG8gbm90aGluZ1xuICAgICAgfVxuICAgICAgJHNjb3BlLnNlbGVjdChzZWxmLmFjdGl2ZURhdGUpO1xuICAgIH0gZWxzZSBpZiAoZXZ0LmN0cmxLZXkgJiYgKGtleSA9PT0gJ3VwJyB8fCBrZXkgPT09ICdkb3duJykpIHtcbiAgICAgICRzY29wZS50b2dnbGVNb2RlKGtleSA9PT0gJ3VwJyA/IDEgOiAtMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuaGFuZGxlS2V5RG93bihrZXksIGV2dCk7XG4gICAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gICAgfVxuICB9O1xuXG4gICRlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5rZXlkb3duKGV2dCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgLy9DbGVhciBhbGwgd2F0Y2ggbGlzdGVuZXJzIG9uIGRlc3Ryb3lcbiAgICB3aGlsZSAod2F0Y2hMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICB3YXRjaExpc3RlbmVycy5zaGlmdCgpKCk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBzZXRNb2RlKG1vZGUpIHtcbiAgICAkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPSBtb2RlO1xuICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSA9IG1vZGU7XG4gIH1cblxuICBmdW5jdGlvbiBleHRyYWN0T3B0aW9ucyhuZ01vZGVsQ3RybCkge1xuICAgIHZhciBuZ01vZGVsT3B0aW9ucztcblxuICAgIGlmIChhbmd1bGFyLnZlcnNpb24ubWlub3IgPCA2KSB7IC8vIGluIGFuZ3VsYXIgPCAxLjYgJG9wdGlvbnMgY291bGQgYmUgbWlzc2luZ1xuICAgICAgLy8gZ3VhcmFudGVlIGEgdmFsdWVcbiAgICAgIG5nTW9kZWxPcHRpb25zID0gbmdNb2RlbEN0cmwuJG9wdGlvbnMgfHxcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLm5nTW9kZWxPcHRpb25zIHx8XG4gICAgICAgIGRhdGVwaWNrZXJDb25maWcubmdNb2RlbE9wdGlvbnMgfHxcbiAgICAgICAge307XG5cbiAgICAgIC8vIG1pbWljIDEuNisgYXBpXG4gICAgICBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBuZ01vZGVsT3B0aW9uc1trZXldO1xuICAgICAgfTtcbiAgICB9IGVsc2UgeyAvLyBpbiBhbmd1bGFyID49MS42ICRvcHRpb25zIGlzIGFsd2F5cyBwcmVzZW50XG4gICAgICAvLyBuZy1tb2RlbC1vcHRpb25zIGRlZmF1bHRzIHRpbWV6b25lIHRvIG51bGw7IGRvbid0IGxldCBpdHMgcHJlY2VkZW5jZSBzcXVhc2ggYSBub24tbnVsbCB2YWx1ZVxuICAgICAgdmFyIHRpbWV6b25lID0gbmdNb2RlbEN0cmwuJG9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpIHx8XG4gICAgICAgICgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMubmdNb2RlbE9wdGlvbnMgPyAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMubmdNb2RlbE9wdGlvbnMudGltZXpvbmUgOiBudWxsKSB8fFxuICAgICAgICAoZGF0ZXBpY2tlckNvbmZpZy5uZ01vZGVsT3B0aW9ucyA/IGRhdGVwaWNrZXJDb25maWcubmdNb2RlbE9wdGlvbnMudGltZXpvbmUgOiBudWxsKTtcblxuICAgICAgLy8gdmFsdWVzIHBhc3NlZCB0byBjcmVhdGVDaGlsZCBvdmVycmlkZSBleGlzdGluZyB2YWx1ZXNcbiAgICAgIG5nTW9kZWxPcHRpb25zID0gbmdNb2RlbEN0cmwuJG9wdGlvbnMgLy8gc3RhcnQgd2l0aCBhIE1vZGVsT3B0aW9ucyBpbnN0YW5jZVxuICAgICAgICAuY3JlYXRlQ2hpbGQoZGF0ZXBpY2tlckNvbmZpZy5uZ01vZGVsT3B0aW9ucykgLy8gbG93ZXN0IHByZWNlZGVuY2VcbiAgICAgICAgLmNyZWF0ZUNoaWxkKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5uZ01vZGVsT3B0aW9ucylcbiAgICAgICAgLmNyZWF0ZUNoaWxkKG5nTW9kZWxDdHJsLiRvcHRpb25zKSAvLyBoaWdoZXN0IHByZWNlZGVuY2VcbiAgICAgICAgLmNyZWF0ZUNoaWxkKHt0aW1lem9uZTogdGltZXpvbmV9KTsgLy8gdG8ga2VlcCBmcm9tIHNxdWFzaGluZyBhIG5vbi1udWxsIHZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIG5nTW9kZWxPcHRpb25zO1xuICB9XG59XSlcblxuLmNvbnRyb2xsZXIoJ1VpYkRheXBpY2tlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICdkYXRlRmlsdGVyJywgZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCBkYXRlRmlsdGVyKSB7XG4gIHZhciBEQVlTX0lOX01PTlRIID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuXG4gIHRoaXMuc3RlcCA9IHsgbW9udGhzOiAxIH07XG4gIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50O1xuICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgIHJldHVybiBtb250aCA9PT0gMSAmJiB5ZWFyICUgNCA9PT0gMCAmJlxuICAgICAgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCkgPyAyOSA6IERBWVNfSU5fTU9OVEhbbW9udGhdO1xuICB9XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oY3RybCkge1xuICAgIGFuZ3VsYXIuZXh0ZW5kKGN0cmwsIHRoaXMpO1xuICAgIHNjb3BlLnNob3dXZWVrcyA9IGN0cmwuc2hvd1dlZWtzO1xuICAgIGN0cmwucmVmcmVzaFZpZXcoKTtcbiAgfTtcblxuICB0aGlzLmdldERhdGVzID0gZnVuY3Rpb24oc3RhcnREYXRlLCBuKSB7XG4gICAgdmFyIGRhdGVzID0gbmV3IEFycmF5KG4pLCBjdXJyZW50ID0gbmV3IERhdGUoc3RhcnREYXRlKSwgaSA9IDAsIGRhdGU7XG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUoY3VycmVudCk7XG4gICAgICBkYXRlc1tpKytdID0gZGF0ZTtcbiAgICAgIGN1cnJlbnQuc2V0RGF0ZShjdXJyZW50LmdldERhdGUoKSArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZXM7XG4gIH07XG5cbiAgdGhpcy5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeWVhciA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgbW9udGggPSB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGZpcnN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKHRoaXMuYWN0aXZlRGF0ZSk7XG5cbiAgICBmaXJzdERheU9mTW9udGguc2V0RnVsbFllYXIoeWVhciwgbW9udGgsIDEpO1xuXG4gICAgdmFyIGRpZmZlcmVuY2UgPSB0aGlzLnN0YXJ0aW5nRGF5IC0gZmlyc3REYXlPZk1vbnRoLmdldERheSgpLFxuICAgICAgbnVtRGlzcGxheWVkRnJvbVByZXZpb3VzTW9udGggPSBkaWZmZXJlbmNlID4gMCA/XG4gICAgICAgIDcgLSBkaWZmZXJlbmNlIDogLSBkaWZmZXJlbmNlLFxuICAgICAgZmlyc3REYXRlID0gbmV3IERhdGUoZmlyc3REYXlPZk1vbnRoKTtcblxuICAgIGlmIChudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCA+IDApIHtcbiAgICAgIGZpcnN0RGF0ZS5zZXREYXRlKC1udW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCArIDEpO1xuICAgIH1cblxuICAgIC8vIDQyIGlzIHRoZSBudW1iZXIgb2YgZGF5cyBvbiBhIHNpeC13ZWVrIGNhbGVuZGFyXG4gICAgdmFyIGRheXMgPSB0aGlzLmdldERhdGVzKGZpcnN0RGF0ZSwgNDIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDI7IGkgKyspIHtcbiAgICAgIGRheXNbaV0gPSBhbmd1bGFyLmV4dGVuZCh0aGlzLmNyZWF0ZURhdGVPYmplY3QoZGF5c1tpXSwgdGhpcy5mb3JtYXREYXkpLCB7XG4gICAgICAgIHNlY29uZGFyeTogZGF5c1tpXS5nZXRNb250aCgpICE9PSBtb250aCxcbiAgICAgICAgdWlkOiBzY29wZS51bmlxdWVJZCArICctJyArIGlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNjb3BlLmxhYmVscyA9IG5ldyBBcnJheSg3KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDc7IGorKykge1xuICAgICAgc2NvcGUubGFiZWxzW2pdID0ge1xuICAgICAgICBhYmJyOiBkYXRlRmlsdGVyKGRheXNbal0uZGF0ZSwgdGhpcy5mb3JtYXREYXlIZWFkZXIpLFxuICAgICAgICBmdWxsOiBkYXRlRmlsdGVyKGRheXNbal0uZGF0ZSwgJ0VFRUUnKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBzY29wZS50aXRsZSA9IGRhdGVGaWx0ZXIodGhpcy5hY3RpdmVEYXRlLCB0aGlzLmZvcm1hdERheVRpdGxlKTtcbiAgICBzY29wZS5yb3dzID0gdGhpcy5zcGxpdChkYXlzLCA3KTtcblxuICAgIGlmIChzY29wZS5zaG93V2Vla3MpIHtcbiAgICAgIHNjb3BlLndlZWtOdW1iZXJzID0gW107XG4gICAgICB2YXIgdGh1cnNkYXlJbmRleCA9ICg0ICsgNyAtIHRoaXMuc3RhcnRpbmdEYXkpICUgNyxcbiAgICAgICAgICBudW1XZWVrcyA9IHNjb3BlLnJvd3MubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgY3VyV2VlayA9IDA7IGN1cldlZWsgPCBudW1XZWVrczsgY3VyV2VlaysrKSB7XG4gICAgICAgIHNjb3BlLndlZWtOdW1iZXJzLnB1c2goXG4gICAgICAgICAgZ2V0SVNPODYwMVdlZWtOdW1iZXIoc2NvcGUucm93c1tjdXJXZWVrXVt0aHVyc2RheUluZGV4XS5kYXRlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY29tcGFyZSA9IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xuICAgIHZhciBfZGF0ZTEgPSBuZXcgRGF0ZShkYXRlMS5nZXRGdWxsWWVhcigpLCBkYXRlMS5nZXRNb250aCgpLCBkYXRlMS5nZXREYXRlKCkpO1xuICAgIHZhciBfZGF0ZTIgPSBuZXcgRGF0ZShkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpLCBkYXRlMi5nZXREYXRlKCkpO1xuICAgIF9kYXRlMS5zZXRGdWxsWWVhcihkYXRlMS5nZXRGdWxsWWVhcigpKTtcbiAgICBfZGF0ZTIuc2V0RnVsbFllYXIoZGF0ZTIuZ2V0RnVsbFllYXIoKSk7XG4gICAgcmV0dXJuIF9kYXRlMSAtIF9kYXRlMjtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRJU084NjAxV2Vla051bWJlcihkYXRlKSB7XG4gICAgdmFyIGNoZWNrRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIGNoZWNrRGF0ZS5zZXREYXRlKGNoZWNrRGF0ZS5nZXREYXRlKCkgKyA0IC0gKGNoZWNrRGF0ZS5nZXREYXkoKSB8fCA3KSk7IC8vIFRodXJzZGF5XG4gICAgdmFyIHRpbWUgPSBjaGVja0RhdGUuZ2V0VGltZSgpO1xuICAgIGNoZWNrRGF0ZS5zZXRNb250aCgwKTsgLy8gQ29tcGFyZSB3aXRoIEphbiAxXG4gICAgY2hlY2tEYXRlLnNldERhdGUoMSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgodGltZSAtIGNoZWNrRGF0ZSkgLyA4NjQwMDAwMCkgLyA3KSArIDE7XG4gIH1cblxuICB0aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbihrZXksIGV2dCkge1xuICAgIHZhciBkYXRlID0gdGhpcy5hY3RpdmVEYXRlLmdldERhdGUoKTtcblxuICAgIGlmIChrZXkgPT09ICdsZWZ0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIDc7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2Rvd24nKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIDc7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdwYWdldXAnIHx8IGtleSA9PT0gJ3BhZ2Vkb3duJykge1xuICAgICAgdmFyIG1vbnRoID0gdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkgKyAoa2V5ID09PSAncGFnZXVwJyA/IC0gMSA6IDEpO1xuICAgICAgdGhpcy5hY3RpdmVEYXRlLnNldE1vbnRoKG1vbnRoLCAxKTtcbiAgICAgIGRhdGUgPSBNYXRoLm1pbihnZXREYXlzSW5Nb250aCh0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSwgdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkpLCBkYXRlKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICBkYXRlID0gMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2VuZCcpIHtcbiAgICAgIGRhdGUgPSBnZXREYXlzSW5Nb250aCh0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSwgdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZURhdGUuc2V0RGF0ZShkYXRlKTtcbiAgfTtcbn1dKVxuXG4uY29udHJvbGxlcignVWliTW9udGhwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnZGF0ZUZpbHRlcicsIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgZGF0ZUZpbHRlcikge1xuICB0aGlzLnN0ZXAgPSB7IHllYXJzOiAxIH07XG4gIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50O1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGN0cmwpIHtcbiAgICBhbmd1bGFyLmV4dGVuZChjdHJsLCB0aGlzKTtcbiAgICBjdHJsLnJlZnJlc2hWaWV3KCk7XG4gIH07XG5cbiAgdGhpcy5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbW9udGhzID0gbmV3IEFycmF5KDEyKSxcbiAgICAgICAgeWVhciA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBkYXRlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUodGhpcy5hY3RpdmVEYXRlKTtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhciwgaSwgMSk7XG4gICAgICBtb250aHNbaV0gPSBhbmd1bGFyLmV4dGVuZCh0aGlzLmNyZWF0ZURhdGVPYmplY3QoZGF0ZSwgdGhpcy5mb3JtYXRNb250aCksIHtcbiAgICAgICAgdWlkOiBzY29wZS51bmlxdWVJZCArICctJyArIGlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNjb3BlLnRpdGxlID0gZGF0ZUZpbHRlcih0aGlzLmFjdGl2ZURhdGUsIHRoaXMuZm9ybWF0TW9udGhUaXRsZSk7XG4gICAgc2NvcGUucm93cyA9IHRoaXMuc3BsaXQobW9udGhzLCB0aGlzLm1vbnRoQ29sdW1ucyk7XG4gICAgc2NvcGUueWVhckhlYWRlckNvbHNwYW4gPSB0aGlzLm1vbnRoQ29sdW1ucyA+IDMgPyB0aGlzLm1vbnRoQ29sdW1ucyAtIDIgOiAxO1xuICB9O1xuXG4gIHRoaXMuY29tcGFyZSA9IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xuICAgIHZhciBfZGF0ZTEgPSBuZXcgRGF0ZShkYXRlMS5nZXRGdWxsWWVhcigpLCBkYXRlMS5nZXRNb250aCgpKTtcbiAgICB2YXIgX2RhdGUyID0gbmV3IERhdGUoZGF0ZTIuZ2V0RnVsbFllYXIoKSwgZGF0ZTIuZ2V0TW9udGgoKSk7XG4gICAgX2RhdGUxLnNldEZ1bGxZZWFyKGRhdGUxLmdldEZ1bGxZZWFyKCkpO1xuICAgIF9kYXRlMi5zZXRGdWxsWWVhcihkYXRlMi5nZXRGdWxsWWVhcigpKTtcbiAgICByZXR1cm4gX2RhdGUxIC0gX2RhdGUyO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGtleSwgZXZ0KSB7XG4gICAgdmFyIGRhdGUgPSB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKTtcblxuICAgIGlmIChrZXkgPT09ICdsZWZ0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIHRoaXMubW9udGhDb2x1bW5zO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncmlnaHQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdkb3duJykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyB0aGlzLm1vbnRoQ29sdW1ucztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3BhZ2V1cCcgfHwga2V5ID09PSAncGFnZWRvd24nKSB7XG4gICAgICB2YXIgeWVhciA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpICsgKGtleSA9PT0gJ3BhZ2V1cCcgPyAtIDEgOiAxKTtcbiAgICAgIHRoaXMuYWN0aXZlRGF0ZS5zZXRGdWxsWWVhcih5ZWFyKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICBkYXRlID0gMDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2VuZCcpIHtcbiAgICAgIGRhdGUgPSAxMTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmVEYXRlLnNldE1vbnRoKGRhdGUpO1xuICB9O1xufV0pXG5cbi5jb250cm9sbGVyKCdVaWJZZWFycGlja2VyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsIGRhdGVGaWx0ZXIpIHtcbiAgdmFyIGNvbHVtbnMsIHJhbmdlO1xuICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudDtcblxuICBmdW5jdGlvbiBnZXRTdGFydGluZ1llYXIoeWVhcikge1xuICAgIHJldHVybiBwYXJzZUludCgoeWVhciAtIDEpIC8gcmFuZ2UsIDEwKSAqIHJhbmdlICsgMTtcbiAgfVxuXG4gIHRoaXMueWVhcnBpY2tlckluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBjb2x1bW5zID0gdGhpcy55ZWFyQ29sdW1ucztcbiAgICByYW5nZSA9IHRoaXMueWVhclJvd3MgKiBjb2x1bW5zO1xuICAgIHRoaXMuc3RlcCA9IHsgeWVhcnM6IHJhbmdlIH07XG4gIH07XG5cbiAgdGhpcy5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeWVhcnMgPSBuZXcgQXJyYXkocmFuZ2UpLCBkYXRlO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIHN0YXJ0ID0gZ2V0U3RhcnRpbmdZZWFyKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTsgaSA8IHJhbmdlOyBpKyspIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmFjdGl2ZURhdGUpO1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcihzdGFydCArIGksIDAsIDEpO1xuICAgICAgeWVhcnNbaV0gPSBhbmd1bGFyLmV4dGVuZCh0aGlzLmNyZWF0ZURhdGVPYmplY3QoZGF0ZSwgdGhpcy5mb3JtYXRZZWFyKSwge1xuICAgICAgICB1aWQ6IHNjb3BlLnVuaXF1ZUlkICsgJy0nICsgaVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2NvcGUudGl0bGUgPSBbeWVhcnNbMF0ubGFiZWwsIHllYXJzW3JhbmdlIC0gMV0ubGFiZWxdLmpvaW4oJyAtICcpO1xuICAgIHNjb3BlLnJvd3MgPSB0aGlzLnNwbGl0KHllYXJzLCBjb2x1bW5zKTtcbiAgICBzY29wZS5jb2x1bW5zID0gY29sdW1ucztcbiAgfTtcblxuICB0aGlzLmNvbXBhcmUgPSBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcbiAgICByZXR1cm4gZGF0ZTEuZ2V0RnVsbFllYXIoKSAtIGRhdGUyLmdldEZ1bGxZZWFyKCk7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24oa2V5LCBldnQpIHtcbiAgICB2YXIgZGF0ZSA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpO1xuXG4gICAgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICd1cCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlIC0gY29sdW1ucztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZG93bicpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgY29sdW1ucztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3BhZ2V1cCcgfHwga2V5ID09PSAncGFnZWRvd24nKSB7XG4gICAgICBkYXRlICs9IChrZXkgPT09ICdwYWdldXAnID8gLSAxIDogMSkgKiByYW5nZTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICBkYXRlID0gZ2V0U3RhcnRpbmdZZWFyKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2VuZCcpIHtcbiAgICAgIGRhdGUgPSBnZXRTdGFydGluZ1llYXIodGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkpICsgcmFuZ2UgLSAxO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIoZGF0ZSk7XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliRGF0ZXBpY2tlcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWwnO1xuICAgIH0sXG4gICAgc2NvcGU6IHtcbiAgICAgIGRhdGVwaWNrZXJPcHRpb25zOiAnPT8nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ3VpYkRhdGVwaWNrZXInLCAnXm5nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJEYXRlcGlja2VyQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnZGF0ZXBpY2tlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGRhdGVwaWNrZXJDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGRhdGVwaWNrZXJDdHJsLmluaXQobmdNb2RlbEN0cmwpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRheXBpY2tlcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbCc7XG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ151aWJEYXRlcGlja2VyJywgJ3VpYkRheXBpY2tlciddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYkRheXBpY2tlckNvbnRyb2xsZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBkYXRlcGlja2VyQ3RybCA9IGN0cmxzWzBdLFxuICAgICAgICBkYXlwaWNrZXJDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGRheXBpY2tlckN0cmwuaW5pdChkYXRlcGlja2VyQ3RybCk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliTW9udGhwaWNrZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbCc7XG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ151aWJEYXRlcGlja2VyJywgJ3VpYk1vbnRocGlja2VyJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliTW9udGhwaWNrZXJDb250cm9sbGVyJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgZGF0ZXBpY2tlckN0cmwgPSBjdHJsc1swXSxcbiAgICAgICAgbW9udGhwaWNrZXJDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIG1vbnRocGlja2VyQ3RybC5pbml0KGRhdGVwaWNrZXJDdHJsKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJZZWFycGlja2VyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbCc7XG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ151aWJEYXRlcGlja2VyJywgJ3VpYlllYXJwaWNrZXInXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJZZWFycGlja2VyQ29udHJvbGxlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGN0cmwgPSBjdHJsc1swXTtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKGN0cmwsIGN0cmxzWzFdKTtcbiAgICAgIGN0cmwueWVhcnBpY2tlckluaXQoKTtcblxuICAgICAgY3RybC5yZWZyZXNoVmlldygpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBvc2l0aW9uJywgW10pXG5cbi8qKlxuICogQSBzZXQgb2YgdXRpbGl0eSBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdGhlIERPTS5cbiAqIEl0IGlzIG1lYW50IHRvIGJlIHVzZWQgd2hlcmUgd2UgbmVlZCB0byBhYnNvbHV0ZS1wb3NpdGlvbiBlbGVtZW50cyBpblxuICogcmVsYXRpb24gdG8gYW5vdGhlciBlbGVtZW50ICh0aGlzIGlzIHRoZSBjYXNlIGZvciB0b29sdGlwcywgcG9wb3ZlcnMsXG4gKiB0eXBlYWhlYWQgc3VnZ2VzdGlvbnMgZXRjLikuXG4gKi9cbiAgLmZhY3RvcnkoJyR1aWJQb3NpdGlvbicsIFsnJGRvY3VtZW50JywgJyR3aW5kb3cnLCBmdW5jdGlvbigkZG9jdW1lbnQsICR3aW5kb3cpIHtcbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IHNjcm9sbGJhcldpZHRoKCkgZnVuY3Rpb24gdG8gY2FjaGUgc2Nyb2xsYmFyJ3Mgd2lkdGguXG4gICAgICogRG8gbm90IGFjY2VzcyB0aGlzIHZhcmlhYmxlIGRpcmVjdGx5LCB1c2Ugc2Nyb2xsYmFyV2lkdGgoKSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHZhciBTQ1JPTExCQVJfV0lEVEg7XG4gICAgLyoqXG4gICAgICogc2Nyb2xsYmFyIG9uIGJvZHkgYW5kIGh0bWwgZWxlbWVudCBpbiBJRSBhbmQgRWRnZSBvdmVybGF5XG4gICAgICogY29udGVudCBhbmQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgMCB3aWR0aC5cbiAgICAgKi9cbiAgICB2YXIgQk9EWV9TQ1JPTExCQVJfV0lEVEg7XG4gICAgdmFyIE9WRVJGTE9XX1JFR0VYID0ge1xuICAgICAgbm9ybWFsOiAvKGF1dG98c2Nyb2xsKS8sXG4gICAgICBoaWRkZW46IC8oYXV0b3xzY3JvbGx8aGlkZGVuKS9cbiAgICB9O1xuICAgIHZhciBQTEFDRU1FTlRfUkVHRVggPSB7XG4gICAgICBhdXRvOiAvXFxzP2F1dG8/XFxzPy9pLFxuICAgICAgcHJpbWFyeTogL14odG9wfGJvdHRvbXxsZWZ0fHJpZ2h0KSQvLFxuICAgICAgc2Vjb25kYXJ5OiAvXih0b3B8Ym90dG9tfGxlZnR8cmlnaHR8Y2VudGVyKSQvLFxuICAgICAgdmVydGljYWw6IC9eKHRvcHxib3R0b20pJC9cbiAgICB9O1xuICAgIHZhciBCT0RZX1JFR0VYID0gLyhIVE1MfEJPRFkpLztcblxuICAgIHJldHVybiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYSByYXcgRE9NIGVsZW1lbnQgZnJvbSBhIGpRdWVyeS9qUUxpdGUgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgZWxlbWVudCB0byBjb252ZXJ0LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtlbGVtZW50fSBBIEhUTUwgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgZ2V0UmF3Tm9kZTogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZSA/IGVsZW0gOiBlbGVtWzBdIHx8IGVsZW07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGEgcGFyc2VkIG51bWJlciBmb3IgYSBzdHlsZSBwcm9wZXJ0eS4gIFN0cmlwc1xuICAgICAgICogdW5pdHMgYW5kIGNhc3RzIGludmFsaWQgbnVtYmVycyB0byAwLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBzdHlsZSB2YWx1ZSB0byBwYXJzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBBIHZhbGlkIG51bWJlci5cbiAgICAgICAqL1xuICAgICAgcGFyc2VTdHlsZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogMDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgdGhlIGNsb3Nlc3QgcG9zaXRpb25lZCBhbmNlc3Rvci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIG9mZmVzdCBwYXJlbnQgZm9yLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtlbGVtZW50fSBUaGUgY2xvc2VzdCBwb3NpdGlvbmVkIGFuY2VzdG9yLlxuICAgICAgICovXG4gICAgICBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICBmdW5jdGlvbiBpc1N0YXRpY1Bvc2l0aW9uZWQoZWwpIHtcbiAgICAgICAgICByZXR1cm4gKCR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkucG9zaXRpb24gfHwgJ3N0YXRpYycpID09PSAnc3RhdGljJztcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50ICYmIGlzU3RhdGljUG9zaXRpb25lZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgdGhlIHNjcm9sbGJhciB3aWR0aCwgY29uY2VwdCBmcm9tIFRXQlMgbWVhc3VyZVNjcm9sbGJhcigpXG4gICAgICAgKiBmdW5jdGlvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvanMvbW9kYWwuanNcbiAgICAgICAqIEluIElFIGFuZCBFZGdlLCBzY29sbGJhciBvbiBib2R5IGFuZCBodG1sIGVsZW1lbnQgb3ZlcmxheSBhbmQgc2hvdWxkXG4gICAgICAgKiByZXR1cm4gYSB3aWR0aCBvZiAwLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB3aWR0aCBvZiB0aGUgYnJvd3NlciBzY29sbGJhci5cbiAgICAgICAqL1xuICAgICAgc2Nyb2xsYmFyV2lkdGg6IGZ1bmN0aW9uKGlzQm9keSkge1xuICAgICAgICBpZiAoaXNCb2R5KSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoQk9EWV9TQ1JPTExCQVJfV0lEVEgpKSB7XG4gICAgICAgICAgICB2YXIgYm9keUVsZW0gPSAkZG9jdW1lbnQuZmluZCgnYm9keScpO1xuICAgICAgICAgICAgYm9keUVsZW0uYWRkQ2xhc3MoJ3VpYi1wb3NpdGlvbi1ib2R5LXNjcm9sbGJhci1tZWFzdXJlJyk7XG4gICAgICAgICAgICBCT0RZX1NDUk9MTEJBUl9XSURUSCA9ICR3aW5kb3cuaW5uZXJXaWR0aCAtIGJvZHlFbGVtWzBdLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgQk9EWV9TQ1JPTExCQVJfV0lEVEggPSBpc0Zpbml0ZShCT0RZX1NDUk9MTEJBUl9XSURUSCkgPyBCT0RZX1NDUk9MTEJBUl9XSURUSCA6IDA7XG4gICAgICAgICAgICBib2R5RWxlbS5yZW1vdmVDbGFzcygndWliLXBvc2l0aW9uLWJvZHktc2Nyb2xsYmFyLW1lYXN1cmUnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIEJPRFlfU0NST0xMQkFSX1dJRFRIO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoU0NST0xMQkFSX1dJRFRIKSkge1xuICAgICAgICAgIHZhciBzY3JvbGxFbGVtID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwidWliLXBvc2l0aW9uLXNjcm9sbGJhci1tZWFzdXJlXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5hcHBlbmQoc2Nyb2xsRWxlbSk7XG4gICAgICAgICAgU0NST0xMQkFSX1dJRFRIID0gc2Nyb2xsRWxlbVswXS5vZmZzZXRXaWR0aCAtIHNjcm9sbEVsZW1bMF0uY2xpZW50V2lkdGg7XG4gICAgICAgICAgU0NST0xMQkFSX1dJRFRIID0gaXNGaW5pdGUoU0NST0xMQkFSX1dJRFRIKSA/IFNDUk9MTEJBUl9XSURUSCA6IDA7XG4gICAgICAgICAgc2Nyb2xsRWxlbS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTQ1JPTExCQVJfV0lEVEg7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHRoZSBwYWRkaW5nIHJlcXVpcmVkIG9uIGFuIGVsZW1lbnQgdG8gcmVwbGFjZSB0aGUgc2Nyb2xsYmFyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKnNjcm9sbGJhcldpZHRoKio6IHRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsYmFyPC9saT5cbiAgICAgICAqICAgICA8bGk+Kip3aWR0aE92ZXJmbG93Kio6IHdoZXRoZXIgdGhlIHRoZSB3aWR0aCBpcyBvdmVyZmxvd2luZzwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcmlnaHQqKjogdGhlIGFtb3VudCBvZiByaWdodCBwYWRkaW5nIG9uIHRoZSBlbGVtZW50IG5lZWRlZCB0byByZXBsYWNlIHRoZSBzY3JvbGxiYXI8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnJpZ2h0T3JpZ2luYWwqKjogdGhlIGFtb3VudCBvZiByaWdodCBwYWRkaW5nIGN1cnJlbnRseSBvbiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqaGVpZ2h0T3ZlcmZsb3cqKjogd2hldGhlciB0aGUgdGhlIGhlaWdodCBpcyBvdmVyZmxvd2luZzwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqYm90dG9tKio6IHRoZSBhbW91bnQgb2YgYm90dG9tIHBhZGRpbmcgb24gdGhlIGVsZW1lbnQgbmVlZGVkIHRvIHJlcGxhY2UgdGhlIHNjcm9sbGJhcjwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqYm90dG9tT3JpZ2luYWwqKjogdGhlIGFtb3VudCBvZiBib3R0b20gcGFkZGluZyBjdXJyZW50bHkgb24gdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICovXG4gICAgICBzY3JvbGxiYXJQYWRkaW5nOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIGVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgdmFyIHBhZGRpbmdSaWdodCA9IHRoaXMucGFyc2VTdHlsZShlbGVtU3R5bGUucGFkZGluZ1JpZ2h0KTtcbiAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSB0aGlzLnBhcnNlU3R5bGUoZWxlbVN0eWxlLnBhZGRpbmdCb3R0b20pO1xuICAgICAgICB2YXIgc2Nyb2xsUGFyZW50ID0gdGhpcy5zY3JvbGxQYXJlbnQoZWxlbSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLnNjcm9sbGJhcldpZHRoKEJPRFlfUkVHRVgudGVzdChzY3JvbGxQYXJlbnQudGFnTmFtZSkpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2Nyb2xsYmFyV2lkdGg6IHNjcm9sbGJhcldpZHRoLFxuICAgICAgICAgIHdpZHRoT3ZlcmZsb3c6IHNjcm9sbFBhcmVudC5zY3JvbGxXaWR0aCA+IHNjcm9sbFBhcmVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICByaWdodDogcGFkZGluZ1JpZ2h0ICsgc2Nyb2xsYmFyV2lkdGgsXG4gICAgICAgICAgb3JpZ2luYWxSaWdodDogcGFkZGluZ1JpZ2h0LFxuICAgICAgICAgIGhlaWdodE92ZXJmbG93OiBzY3JvbGxQYXJlbnQuc2Nyb2xsSGVpZ2h0ID4gc2Nyb2xsUGFyZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgICBib3R0b206IHBhZGRpbmdCb3R0b20gKyBzY3JvbGxiYXJXaWR0aCxcbiAgICAgICAgICBvcmlnaW5hbEJvdHRvbTogcGFkZGluZ0JvdHRvbVxuICAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2tzIHRvIHNlZSBpZiB0aGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2luY2x1ZGVIaWRkZW49ZmFsc2VdIC0gU2hvdWxkIHNjcm9sbCBzdHlsZSBvZiAnaGlkZGVuJyBiZSBjb25zaWRlcmVkLFxuICAgICAgICogICBkZWZhdWx0IGlzIGZhbHNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBlbGVtZW50IGlzIHNjcm9sbGFibGUuXG4gICAgICAgKi9cbiAgICAgIGlzU2Nyb2xsYWJsZTogZnVuY3Rpb24oZWxlbSwgaW5jbHVkZUhpZGRlbikge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBvdmVyZmxvd1JlZ2V4ID0gaW5jbHVkZUhpZGRlbiA/IE9WRVJGTE9XX1JFR0VYLmhpZGRlbiA6IE9WRVJGTE9XX1JFR0VYLm5vcm1hbDtcbiAgICAgICAgdmFyIGVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgcmV0dXJuIG92ZXJmbG93UmVnZXgudGVzdChlbGVtU3R5bGUub3ZlcmZsb3cgKyBlbGVtU3R5bGUub3ZlcmZsb3dZICsgZWxlbVN0eWxlLm92ZXJmbG93WCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHRoZSBjbG9zZXN0IHNjcm9sbGFibGUgYW5jZXN0b3IuXG4gICAgICAgKiBBIHBvcnQgb2YgdGhlIGpRdWVyeSBVSSBzY3JvbGxQYXJlbnQgbWV0aG9kOlxuICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktdWkvYmxvYi9tYXN0ZXIvdWkvc2Nyb2xsLXBhcmVudC5qc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGZpbmQgdGhlIHNjcm9sbCBwYXJlbnQgb2YuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZUhpZGRlbj1mYWxzZV0gLSBTaG91bGQgc2Nyb2xsIHN0eWxlIG9mICdoaWRkZW4nIGJlIGNvbnNpZGVyZWQsXG4gICAgICAgKiAgIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZVNlbGY9ZmFsc2VdIC0gU2hvdWxkIHRoZSBlbGVtZW50IGJlaW5nIHBhc3NlZCBiZVxuICAgICAgICogaW5jbHVkZWQgaW4gdGhlIHNjcm9sbGFibGUgbGxva3VwLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtlbGVtZW50fSBBIEhUTUwgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgc2Nyb2xsUGFyZW50OiBmdW5jdGlvbihlbGVtLCBpbmNsdWRlSGlkZGVuLCBpbmNsdWRlU2VsZikge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBvdmVyZmxvd1JlZ2V4ID0gaW5jbHVkZUhpZGRlbiA/IE9WRVJGTE9XX1JFR0VYLmhpZGRlbiA6IE9WRVJGTE9XX1JFR0VYLm5vcm1hbDtcbiAgICAgICAgdmFyIGRvY3VtZW50RWwgPSAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgZWxlbVN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICBpZiAoaW5jbHVkZVNlbGYgJiYgb3ZlcmZsb3dSZWdleC50ZXN0KGVsZW1TdHlsZS5vdmVyZmxvdyArIGVsZW1TdHlsZS5vdmVyZmxvd1kgKyBlbGVtU3R5bGUub3ZlcmZsb3dYKSkge1xuICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICB9XG4gICAgICAgIHZhciBleGNsdWRlU3RhdGljID0gZWxlbVN0eWxlLnBvc2l0aW9uID09PSAnYWJzb2x1dGUnO1xuICAgICAgICB2YXIgc2Nyb2xsUGFyZW50ID0gZWxlbS5wYXJlbnRFbGVtZW50IHx8IGRvY3VtZW50RWw7XG5cbiAgICAgICAgaWYgKHNjcm9sbFBhcmVudCA9PT0gZG9jdW1lbnRFbCB8fCBlbGVtU3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgICAgICByZXR1cm4gZG9jdW1lbnRFbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChzY3JvbGxQYXJlbnQucGFyZW50RWxlbWVudCAmJiBzY3JvbGxQYXJlbnQgIT09IGRvY3VtZW50RWwpIHtcbiAgICAgICAgICB2YXIgc3BTdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxQYXJlbnQpO1xuICAgICAgICAgIGlmIChleGNsdWRlU3RhdGljICYmIHNwU3R5bGUucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICBleGNsdWRlU3RhdGljID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFleGNsdWRlU3RhdGljICYmIG92ZXJmbG93UmVnZXgudGVzdChzcFN0eWxlLm92ZXJmbG93ICsgc3BTdHlsZS5vdmVyZmxvd1kgKyBzcFN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzY3JvbGxQYXJlbnQgPSBzY3JvbGxQYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzY3JvbGxQYXJlbnQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHJlYWQtb25seSBlcXVpdmFsZW50IG9mIGpRdWVyeSdzIHBvc2l0aW9uIGZ1bmN0aW9uOlxuICAgICAgICogaHR0cDovL2FwaS5qcXVlcnkuY29tL3Bvc2l0aW9uLyAtIGRpc3RhbmNlIHRvIGNsb3Nlc3QgcG9zaXRpb25lZFxuICAgICAgICogYW5jZXN0b3IuICBEb2VzIG5vdCBhY2NvdW50IGZvciBtYXJnaW5zIGJ5IGRlZmF1bHQgbGlrZSBqUXVlcnkgcG9zaXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIGVsZW1lbnQgdG8gY2FjbHVsYXRlIHRoZSBwb3NpdGlvbiBvbi5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbmNsdWRlTWFyZ2lucz1mYWxzZV0gLSBTaG91bGQgbWFyZ2lucyBiZSBhY2NvdW50ZWRcbiAgICAgICAqIGZvciwgZGVmYXVsdCBpcyBmYWxzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+Kip3aWR0aCoqOiB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmhlaWdodCoqOiB0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+Kip0b3AqKjogZGlzdGFuY2UgdG8gdG9wIGVkZ2Ugb2Ygb2Zmc2V0IHBhcmVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqbGVmdCoqOiBkaXN0YW5jZSB0byBsZWZ0IGVkZ2Ugb2Ygb2Zmc2V0IHBhcmVudDwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIHBvc2l0aW9uOiBmdW5jdGlvbihlbGVtLCBpbmNsdWRlTWFnaW5zKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIGVsZW1PZmZzZXQgPSB0aGlzLm9mZnNldChlbGVtKTtcbiAgICAgICAgaWYgKGluY2x1ZGVNYWdpbnMpIHtcbiAgICAgICAgICB2YXIgZWxlbVN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICAgIGVsZW1PZmZzZXQudG9wIC09IHRoaXMucGFyc2VTdHlsZShlbGVtU3R5bGUubWFyZ2luVG9wKTtcbiAgICAgICAgICBlbGVtT2Zmc2V0LmxlZnQgLT0gdGhpcy5wYXJzZVN0eWxlKGVsZW1TdHlsZS5tYXJnaW5MZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoZWxlbSk7XG4gICAgICAgIHZhciBwYXJlbnRPZmZzZXQgPSB7dG9wOiAwLCBsZWZ0OiAwfTtcblxuICAgICAgICBpZiAocGFyZW50ICE9PSAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgcGFyZW50T2Zmc2V0ID0gdGhpcy5vZmZzZXQocGFyZW50KTtcbiAgICAgICAgICBwYXJlbnRPZmZzZXQudG9wICs9IHBhcmVudC5jbGllbnRUb3AgLSBwYXJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgIHBhcmVudE9mZnNldC5sZWZ0ICs9IHBhcmVudC5jbGllbnRMZWZ0IC0gcGFyZW50LnNjcm9sbExlZnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIoZWxlbU9mZnNldC53aWR0aCkgPyBlbGVtT2Zmc2V0LndpZHRoIDogZWxlbS5vZmZzZXRXaWR0aCksXG4gICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIoZWxlbU9mZnNldC5oZWlnaHQpID8gZWxlbU9mZnNldC5oZWlnaHQgOiBlbGVtLm9mZnNldEhlaWdodCksXG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKGVsZW1PZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChlbGVtT2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdClcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgcmVhZC1vbmx5IGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3Mgb2Zmc2V0IGZ1bmN0aW9uOlxuICAgICAgICogaHR0cDovL2FwaS5qcXVlcnkuY29tL29mZnNldC8gLSBkaXN0YW5jZSB0byB2aWV3cG9ydC4gIERvZXNcbiAgICAgICAqIG5vdCBhY2NvdW50IGZvciBib3JkZXJzLCBtYXJnaW5zLCBvciBwYWRkaW5nIG9uIHRoZSBib2R5XG4gICAgICAgKiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0IG9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKndpZHRoKio6IHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqaGVpZ2h0Kio6IHRoZSBoZWlnaHQgb2YgdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnRvcCoqOiBkaXN0YW5jZSB0byB0b3AgZWRnZSBvZiB2aWV3cG9ydDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcmlnaHQqKjogZGlzdGFuY2UgdG8gYm90dG9tIGVkZ2Ugb2Ygdmlld3BvcnQ8L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICovXG4gICAgICBvZmZzZXQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgZWxlbUJDUiA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihlbGVtQkNSLndpZHRoKSA/IGVsZW1CQ1Iud2lkdGggOiBlbGVtLm9mZnNldFdpZHRoKSxcbiAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihlbGVtQkNSLmhlaWdodCkgPyBlbGVtQkNSLmhlaWdodCA6IGVsZW0ub2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICB0b3A6IE1hdGgucm91bmQoZWxlbUJDUi50b3AgKyAoJHdpbmRvdy5wYWdlWU9mZnNldCB8fCAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkpLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoZWxlbUJDUi5sZWZ0ICsgKCR3aW5kb3cucGFnZVhPZmZzZXQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KSlcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgb2Zmc2V0IGRpc3RhbmNlIHRvIHRoZSBjbG9zZXN0IHNjcm9sbGFibGUgYW5jZXN0b3JcbiAgICAgICAqIG9yIHZpZXdwb3J0LiAgQWNjb3VudHMgZm9yIGJvcmRlciBhbmQgc2Nyb2xsYmFyIHdpZHRoLlxuICAgICAgICpcbiAgICAgICAqIFJpZ2h0IGFuZCBib3R0b20gZGltZW5zaW9ucyByZXByZXNlbnQgdGhlIGRpc3RhbmNlIHRvIHRoZVxuICAgICAgICogcmVzcGVjdGl2ZSBlZGdlIG9mIHRoZSB2aWV3cG9ydCBlbGVtZW50LiAgSWYgdGhlIGVsZW1lbnRcbiAgICAgICAqIGVkZ2UgZXh0ZW5kcyBiZXlvbmQgdGhlIHZpZXdwb3J0LCBhIG5lZ2F0aXZlIHZhbHVlIHdpbGwgYmVcbiAgICAgICAqIHJlcG9ydGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgdmlld3BvcnQgb2Zmc2V0IGZvci5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFt1c2VEb2N1bWVudD1mYWxzZV0gLSBTaG91bGQgdGhlIHZpZXdwb3J0IGJlIHRoZSBkb2N1bWVudCBlbGVtZW50IGluc3RlYWRcbiAgICAgICAqIG9mIHRoZSBmaXJzdCBzY3JvbGxhYmxlIGVsZW1lbnQsIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZVBhZGRpbmc9dHJ1ZV0gLSBTaG91bGQgdGhlIHBhZGRpbmcgb24gdGhlIG9mZnNldCBwYXJlbnQgZWxlbWVudFxuICAgICAgICogYmUgYWNjb3VudGVkIGZvciwgZGVmYXVsdCBpcyB0cnVlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKnRvcCoqOiBkaXN0YW5jZSB0byB0aGUgdG9wIGNvbnRlbnQgZWRnZSBvZiB2aWV3cG9ydCBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+Kipib3R0b20qKjogZGlzdGFuY2UgdG8gdGhlIGJvdHRvbSBjb250ZW50IGVkZ2Ugb2Ygdmlld3BvcnQgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqbGVmdCoqOiBkaXN0YW5jZSB0byB0aGUgbGVmdCBjb250ZW50IGVkZ2Ugb2Ygdmlld3BvcnQgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcmlnaHQqKjogZGlzdGFuY2UgdG8gdGhlIHJpZ2h0IGNvbnRlbnQgZWRnZSBvZiB2aWV3cG9ydCBlbGVtZW50PC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqL1xuICAgICAgdmlld3BvcnRPZmZzZXQ6IGZ1bmN0aW9uKGVsZW0sIHVzZURvY3VtZW50LCBpbmNsdWRlUGFkZGluZykge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuICAgICAgICBpbmNsdWRlUGFkZGluZyA9IGluY2x1ZGVQYWRkaW5nICE9PSBmYWxzZSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICB2YXIgZWxlbUJDUiA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBvZmZzZXRCQ1IgPSB7dG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwfTtcblxuICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gdXNlRG9jdW1lbnQgPyAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50IDogdGhpcy5zY3JvbGxQYXJlbnQoZWxlbSk7XG4gICAgICAgIHZhciBvZmZzZXRQYXJlbnRCQ1IgPSBvZmZzZXRQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgb2Zmc2V0QkNSLnRvcCA9IG9mZnNldFBhcmVudEJDUi50b3AgKyBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgICAgICBvZmZzZXRCQ1IubGVmdCA9IG9mZnNldFBhcmVudEJDUi5sZWZ0ICsgb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICAgIGlmIChvZmZzZXRQYXJlbnQgPT09ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBvZmZzZXRCQ1IudG9wICs9ICR3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgb2Zmc2V0QkNSLmxlZnQgKz0gJHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXRCQ1IuYm90dG9tID0gb2Zmc2V0QkNSLnRvcCArIG9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIG9mZnNldEJDUi5yaWdodCA9IG9mZnNldEJDUi5sZWZ0ICsgb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoO1xuXG4gICAgICAgIGlmIChpbmNsdWRlUGFkZGluZykge1xuICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnRTdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpO1xuICAgICAgICAgIG9mZnNldEJDUi50b3AgKz0gdGhpcy5wYXJzZVN0eWxlKG9mZnNldFBhcmVudFN0eWxlLnBhZGRpbmdUb3ApO1xuICAgICAgICAgIG9mZnNldEJDUi5ib3R0b20gLT0gdGhpcy5wYXJzZVN0eWxlKG9mZnNldFBhcmVudFN0eWxlLnBhZGRpbmdCb3R0b20pO1xuICAgICAgICAgIG9mZnNldEJDUi5sZWZ0ICs9IHRoaXMucGFyc2VTdHlsZShvZmZzZXRQYXJlbnRTdHlsZS5wYWRkaW5nTGVmdCk7XG4gICAgICAgICAgb2Zmc2V0QkNSLnJpZ2h0IC09IHRoaXMucGFyc2VTdHlsZShvZmZzZXRQYXJlbnRTdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0b3A6IE1hdGgucm91bmQoZWxlbUJDUi50b3AgLSBvZmZzZXRCQ1IudG9wKSxcbiAgICAgICAgICBib3R0b206IE1hdGgucm91bmQob2Zmc2V0QkNSLmJvdHRvbSAtIGVsZW1CQ1IuYm90dG9tKSxcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKGVsZW1CQ1IubGVmdCAtIG9mZnNldEJDUi5sZWZ0KSxcbiAgICAgICAgICByaWdodDogTWF0aC5yb3VuZChvZmZzZXRCQ1IucmlnaHQgLSBlbGVtQkNSLnJpZ2h0KVxuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhbiBhcnJheSBvZiBwbGFjZW1lbnQgdmFsdWVzIHBhcnNlZCBmcm9tIGEgcGxhY2VtZW50IHN0cmluZy5cbiAgICAgICAqIEFsb25nIHdpdGggdGhlICdhdXRvJyBpbmRpY2F0b3IsIHN1cHBvcnRlZCBwbGFjZW1lbnQgc3RyaW5ncyBhcmU6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+dG9wOiBlbGVtZW50IG9uIHRvcCwgaG9yaXpvbnRhbGx5IGNlbnRlcmVkIG9uIGhvc3QgZWxlbWVudC48L2xpPlxuICAgICAgICogICAgIDxsaT50b3AtbGVmdDogZWxlbWVudCBvbiB0b3AsIGxlZnQgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IGxlZnQgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT50b3AtcmlnaHQ6IGVsZW1lbnQgb24gdG9wLCBsZXJpZ2h0ZnQgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IHJpZ2h0IGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+Ym90dG9tOiBlbGVtZW50IG9uIGJvdHRvbSwgaG9yaXpvbnRhbGx5IGNlbnRlcmVkIG9uIGhvc3QgZWxlbWVudC48L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b20tbGVmdDogZWxlbWVudCBvbiBib3R0b20sIGxlZnQgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IGxlZnQgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b20tcmlnaHQ6IGVsZW1lbnQgb24gYm90dG9tLCByaWdodCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgcmlnaHQgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0OiBlbGVtZW50IG9uIGxlZnQsIHZlcnRpY2FsbHkgY2VudGVyZWQgb24gaG9zdCBlbGVtZW50LjwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQtdG9wOiBlbGVtZW50IG9uIGxlZnQsIHRvcCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgdG9wIGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+bGVmdC1ib3R0b206IGVsZW1lbnQgb24gbGVmdCwgYm90dG9tIGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCBib3R0b20gZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodDogZWxlbWVudCBvbiByaWdodCwgdmVydGljYWxseSBjZW50ZXJlZCBvbiBob3N0IGVsZW1lbnQuPC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQtdG9wOiBlbGVtZW50IG9uIHJpZ2h0LCB0b3AgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IHRvcCBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPnJpZ2h0LWJvdHRvbTogZWxlbWVudCBvbiByaWdodCwgYm90dG9tIGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCBib3R0b20gZWRnZS48L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICogQSBwbGFjZW1lbnQgc3RyaW5nIHdpdGggYW4gJ2F1dG8nIGluZGljYXRvciBpcyBleHBlY3RlZCB0byBiZVxuICAgICAgICogc3BhY2Ugc2VwYXJhdGVkIGZyb20gdGhlIHBsYWNlbWVudCwgaS5lOiAnYXV0byBib3R0b20tbGVmdCcgIElmXG4gICAgICAgKiB0aGUgcHJpbWFyeSBhbmQgc2Vjb25kYXJ5IHBsYWNlbWVudCB2YWx1ZXMgZG8gbm90IG1hdGNoICd0b3AsXG4gICAgICAgKiBib3R0b20sIGxlZnQsIHJpZ2h0JyB0aGVuICd0b3AnIHdpbGwgYmUgdGhlIHByaW1hcnkgcGxhY2VtZW50IGFuZFxuICAgICAgICogJ2NlbnRlcicgd2lsbCBiZSB0aGUgc2Vjb25kYXJ5IHBsYWNlbWVudC4gIElmICdhdXRvJyBpcyBwYXNzZWQsIHRydWVcbiAgICAgICAqIHdpbGwgYmUgcmV0dXJuZWQgYXMgdGhlIDNyZCB2YWx1ZSBvZiB0aGUgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBsYWNlbWVudCAtIFRoZSBwbGFjZW1lbnQgc3RyaW5nIHRvIHBhcnNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHthcnJheX0gQW4gYXJyYXkgd2l0aCB0aGUgZm9sbG93aW5nIHZhbHVlc1xuICAgICAgICogPHVsPlxuICAgICAgICogICA8bGk+KipbMF0qKjogVGhlIHByaW1hcnkgcGxhY2VtZW50LjwvbGk+XG4gICAgICAgKiAgIDxsaT4qKlsxXSoqOiBUaGUgc2Vjb25kYXJ5IHBsYWNlbWVudC48L2xpPlxuICAgICAgICogICA8bGk+KipbMl0qKjogSWYgYXV0byBpcyBwYXNzZWQ6IHRydWUsIGVsc2UgdW5kZWZpbmVkLjwvbGk+XG4gICAgICAgKiA8L3VsPlxuICAgICAgICovXG4gICAgICBwYXJzZVBsYWNlbWVudDogZnVuY3Rpb24ocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBhdXRvUGxhY2UgPSBQTEFDRU1FTlRfUkVHRVguYXV0by50ZXN0KHBsYWNlbWVudCk7XG4gICAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShQTEFDRU1FTlRfUkVHRVguYXV0bywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJyk7XG5cbiAgICAgICAgcGxhY2VtZW50WzBdID0gcGxhY2VtZW50WzBdIHx8ICd0b3AnO1xuICAgICAgICBpZiAoIVBMQUNFTUVOVF9SRUdFWC5wcmltYXJ5LnRlc3QocGxhY2VtZW50WzBdKSkge1xuICAgICAgICAgIHBsYWNlbWVudFswXSA9ICd0b3AnO1xuICAgICAgICB9XG5cbiAgICAgICAgcGxhY2VtZW50WzFdID0gcGxhY2VtZW50WzFdIHx8ICdjZW50ZXInO1xuICAgICAgICBpZiAoIVBMQUNFTUVOVF9SRUdFWC5zZWNvbmRhcnkudGVzdChwbGFjZW1lbnRbMV0pKSB7XG4gICAgICAgICAgcGxhY2VtZW50WzFdID0gJ2NlbnRlcic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgICAgcGxhY2VtZW50WzJdID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGFjZW1lbnRbMl0gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGNvb3JkaW5hdGVzIGZvciBhbiBlbGVtZW50IHRvIGJlIHBvc2l0aW9uZWQgcmVsYXRpdmUgdG9cbiAgICAgICAqIGFub3RoZXIgZWxlbWVudC4gIFBhc3NpbmcgJ2F1dG8nIGFzIHBhcnQgb2YgdGhlIHBsYWNlbWVudCBwYXJhbWV0ZXJcbiAgICAgICAqIHdpbGwgZW5hYmxlIHNtYXJ0IHBsYWNlbWVudCAtIHdoZXJlIHRoZSBlbGVtZW50IGZpdHMuIGkuZTpcbiAgICAgICAqICdhdXRvIGxlZnQtdG9wJyB3aWxsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBlbm91Z2ggc3BhY2UgdG8gdGhlIGxlZnRcbiAgICAgICAqIG9mIHRoZSBob3N0RWxlbSB0byBmaXQgdGhlIHRhcmdldEVsZW0sIGlmIG5vdCBwbGFjZSByaWdodCAoc2FtZSBmb3Igc2Vjb25kYXJ5XG4gICAgICAgKiB0b3AgcGxhY2VtZW50KS4gIEF2YWlsYWJsZSBzcGFjZSBpcyBjYWxjdWxhdGVkIHVzaW5nIHRoZSB2aWV3cG9ydE9mZnNldFxuICAgICAgICogZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBob3N0RWxlbSAtIFRoZSBlbGVtZW50IHRvIHBvc2l0aW9uIGFnYWluc3QuXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IHRhcmdldEVsZW0gLSBUaGUgZWxlbWVudCB0byBwb3NpdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gW3BsYWNlbWVudD10b3BdIC0gVGhlIHBsYWNlbWVudCBmb3IgdGhlIHRhcmdldEVsZW0sXG4gICAgICAgKiAgIGRlZmF1bHQgaXMgJ3RvcCcuICdjZW50ZXInIGlzIGFzc3VtZWQgYXMgc2Vjb25kYXJ5IHBsYWNlbWVudCBmb3JcbiAgICAgICAqICAgJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgYW5kICdib3R0b20nIHBsYWNlbWVudHMuICBBdmFpbGFibGUgcGxhY2VtZW50cyBhcmU6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+dG9wPC9saT5cbiAgICAgICAqICAgICA8bGk+dG9wLXJpZ2h0PC9saT5cbiAgICAgICAqICAgICA8bGk+dG9wLWxlZnQ8L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b208L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b20tbGVmdDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmJvdHRvbS1yaWdodDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQ8L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0LXRvcDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQtYm90dG9tPC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQ8L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodC10b3A8L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodC1ib3R0b208L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2FwcGVuZFRvQm9keT1mYWxzZV0gLSBTaG91bGQgdGhlIHRvcCBhbmQgbGVmdCB2YWx1ZXMgcmV0dXJuZWRcbiAgICAgICAqICAgYmUgY2FsY3VsYXRlZCBmcm9tIHRoZSBib2R5IGVsZW1lbnQsIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPioqdG9wKio6IFZhbHVlIGZvciB0YXJnZXRFbGVtIHRvcC48L2xpPlxuICAgICAgICogICAgIDxsaT4qKmxlZnQqKjogVmFsdWUgZm9yIHRhcmdldEVsZW0gbGVmdC48L2xpPlxuICAgICAgICogICAgIDxsaT4qKnBsYWNlbWVudCoqOiBUaGUgcmVzb2x2ZWQgcGxhY2VtZW50LjwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIHBvc2l0aW9uRWxlbWVudHM6IGZ1bmN0aW9uKGhvc3RFbGVtLCB0YXJnZXRFbGVtLCBwbGFjZW1lbnQsIGFwcGVuZFRvQm9keSkge1xuICAgICAgICBob3N0RWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShob3N0RWxlbSk7XG4gICAgICAgIHRhcmdldEVsZW0gPSB0aGlzLmdldFJhd05vZGUodGFyZ2V0RWxlbSk7XG5cbiAgICAgICAgLy8gbmVlZCB0byByZWFkIGZyb20gcHJvcCB0byBzdXBwb3J0IHRlc3RzLlxuICAgICAgICB2YXIgdGFyZ2V0V2lkdGggPSBhbmd1bGFyLmlzRGVmaW5lZCh0YXJnZXRFbGVtLm9mZnNldFdpZHRoKSA/IHRhcmdldEVsZW0ub2Zmc2V0V2lkdGggOiB0YXJnZXRFbGVtLnByb3AoJ29mZnNldFdpZHRoJyk7XG4gICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBhbmd1bGFyLmlzRGVmaW5lZCh0YXJnZXRFbGVtLm9mZnNldEhlaWdodCkgPyB0YXJnZXRFbGVtLm9mZnNldEhlaWdodCA6IHRhcmdldEVsZW0ucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG5cbiAgICAgICAgcGxhY2VtZW50ID0gdGhpcy5wYXJzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgICAgIHZhciBob3N0RWxlbVBvcyA9IGFwcGVuZFRvQm9keSA/IHRoaXMub2Zmc2V0KGhvc3RFbGVtKSA6IHRoaXMucG9zaXRpb24oaG9zdEVsZW0pO1xuICAgICAgICB2YXIgdGFyZ2V0RWxlbVBvcyA9IHt0b3A6IDAsIGxlZnQ6IDAsIHBsYWNlbWVudDogJyd9O1xuXG4gICAgICAgIGlmIChwbGFjZW1lbnRbMl0pIHtcbiAgICAgICAgICB2YXIgdmlld3BvcnRPZmZzZXQgPSB0aGlzLnZpZXdwb3J0T2Zmc2V0KGhvc3RFbGVtLCBhcHBlbmRUb0JvZHkpO1xuXG4gICAgICAgICAgdmFyIHRhcmdldEVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXRFbGVtKTtcbiAgICAgICAgICB2YXIgYWRqdXN0ZWRTaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6IHRhcmdldFdpZHRoICsgTWF0aC5yb3VuZChNYXRoLmFicyh0aGlzLnBhcnNlU3R5bGUodGFyZ2V0RWxlbVN0eWxlLm1hcmdpbkxlZnQpICsgdGhpcy5wYXJzZVN0eWxlKHRhcmdldEVsZW1TdHlsZS5tYXJnaW5SaWdodCkpKSxcbiAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0ICsgTWF0aC5yb3VuZChNYXRoLmFicyh0aGlzLnBhcnNlU3R5bGUodGFyZ2V0RWxlbVN0eWxlLm1hcmdpblRvcCkgKyB0aGlzLnBhcnNlU3R5bGUodGFyZ2V0RWxlbVN0eWxlLm1hcmdpbkJvdHRvbSkpKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBwbGFjZW1lbnRbMF0gPSBwbGFjZW1lbnRbMF0gPT09ICd0b3AnICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgPiB2aWV3cG9ydE9mZnNldC50b3AgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC5ib3R0b20gPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzBdID09PSAnYm90dG9tJyAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQuYm90dG9tICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQudG9wID8gJ3RvcCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFswXSA9PT0gJ2xlZnQnICYmIGFkanVzdGVkU2l6ZS53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LmxlZnQgJiYgYWRqdXN0ZWRTaXplLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LnJpZ2h0ID8gJ3JpZ2h0JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzBdID09PSAncmlnaHQnICYmIGFkanVzdGVkU2l6ZS53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LnJpZ2h0ICYmIGFkanVzdGVkU2l6ZS53aWR0aCA8PSB2aWV3cG9ydE9mZnNldC5sZWZ0ID8gJ2xlZnQnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMF07XG5cbiAgICAgICAgICBwbGFjZW1lbnRbMV0gPSBwbGFjZW1lbnRbMV0gPT09ICd0b3AnICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPiB2aWV3cG9ydE9mZnNldC5ib3R0b20gJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC50b3AgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID09PSAnYm90dG9tJyAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQudG9wICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQuYm90dG9tID8gJ3RvcCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9PT0gJ2xlZnQnICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoID4gdmlld3BvcnRPZmZzZXQucmlnaHQgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPD0gdmlld3BvcnRPZmZzZXQubGVmdCA/ICdyaWdodCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9PT0gJ3JpZ2h0JyAmJiBhZGp1c3RlZFNpemUud2lkdGggLSBob3N0RWxlbVBvcy53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LmxlZnQgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPD0gdmlld3BvcnRPZmZzZXQucmlnaHQgPyAnbGVmdCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXTtcblxuICAgICAgICAgIGlmIChwbGFjZW1lbnRbMV0gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICBpZiAoUExBQ0VNRU5UX1JFR0VYLnZlcnRpY2FsLnRlc3QocGxhY2VtZW50WzBdKSkge1xuICAgICAgICAgICAgICB2YXIgeE92ZXJmbG93ID0gaG9zdEVsZW1Qb3Mud2lkdGggLyAyIC0gdGFyZ2V0V2lkdGggLyAyO1xuICAgICAgICAgICAgICBpZiAodmlld3BvcnRPZmZzZXQubGVmdCArIHhPdmVyZmxvdyA8IDAgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPD0gdmlld3BvcnRPZmZzZXQucmlnaHQpIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAnbGVmdCc7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmlld3BvcnRPZmZzZXQucmlnaHQgKyB4T3ZlcmZsb3cgPCAwICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LmxlZnQpIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAncmlnaHQnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgeU92ZXJmbG93ID0gaG9zdEVsZW1Qb3MuaGVpZ2h0IC8gMiAtIGFkanVzdGVkU2l6ZS5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICBpZiAodmlld3BvcnRPZmZzZXQudG9wICsgeU92ZXJmbG93IDwgMCAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0IDw9IHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9ICd0b3AnO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSArIHlPdmVyZmxvdyA8IDAgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC50b3ApIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAnYm90dG9tJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAocGxhY2VtZW50WzBdKSB7XG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wIC0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wICsgaG9zdEVsZW1Qb3MuaGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0IC0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0ICsgaG9zdEVsZW1Qb3Mud2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAocGxhY2VtZW50WzFdKSB7XG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wICsgaG9zdEVsZW1Qb3MuaGVpZ2h0IC0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gaG9zdEVsZW1Qb3MubGVmdCArIGhvc3RFbGVtUG9zLndpZHRoIC0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgaWYgKFBMQUNFTUVOVF9SRUdFWC52ZXJ0aWNhbC50ZXN0KHBsYWNlbWVudFswXSkpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gaG9zdEVsZW1Qb3MubGVmdCArIGhvc3RFbGVtUG9zLndpZHRoIC8gMiAtIHRhcmdldFdpZHRoIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gaG9zdEVsZW1Qb3MudG9wICsgaG9zdEVsZW1Qb3MuaGVpZ2h0IC8gMiAtIHRhcmdldEhlaWdodCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldEVsZW1Qb3MudG9wID0gTWF0aC5yb3VuZCh0YXJnZXRFbGVtUG9zLnRvcCk7XG4gICAgICAgIHRhcmdldEVsZW1Qb3MubGVmdCA9IE1hdGgucm91bmQodGFyZ2V0RWxlbVBvcy5sZWZ0KTtcbiAgICAgICAgdGFyZ2V0RWxlbVBvcy5wbGFjZW1lbnQgPSBwbGFjZW1lbnRbMV0gPT09ICdjZW50ZXInID8gcGxhY2VtZW50WzBdIDogcGxhY2VtZW50WzBdICsgJy0nICsgcGxhY2VtZW50WzFdO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXRFbGVtUG9zO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhIHdheSB0byBhZGp1c3QgdGhlIHRvcCBwb3NpdGlvbmluZyBhZnRlciBmaXJzdFxuICAgICAgICogcmVuZGVyIHRvIGNvcnJlY3RseSBhbGlnbiBlbGVtZW50IHRvIHRvcCBhZnRlciBjb250ZW50XG4gICAgICAgKiByZW5kZXJpbmcgY2F1c2VzIHJlc2l6ZWQgZWxlbWVudCBoZWlnaHRcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBwbGFjZW1lbnRDbGFzc2VzIC0gVGhlIGFycmF5IG9mIHN0cmluZ3Mgb2YgY2xhc3Nlc1xuICAgICAgICogZWxlbWVudCBzaG91bGQgaGF2ZS5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250YWluZXJQb3NpdGlvbiAtIFRoZSBvYmplY3Qgd2l0aCBjb250YWluZXJcbiAgICAgICAqIHBvc2l0aW9uIGluZm9ybWF0aW9uXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5pdGlhbEhlaWdodCAtIFRoZSBpbml0aWFsIGhlaWdodCBmb3IgdGhlIGVsZW0uXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gY3VycmVudEhlaWdodCAtIFRoZSBjdXJyZW50IGhlaWdodCBmb3IgdGhlIGVsZW0uXG4gICAgICAgKi9cbiAgICAgIGFkanVzdFRvcDogZnVuY3Rpb24ocGxhY2VtZW50Q2xhc3NlcywgY29udGFpbmVyUG9zaXRpb24sIGluaXRpYWxIZWlnaHQsIGN1cnJlbnRIZWlnaHQpIHtcbiAgICAgICAgaWYgKHBsYWNlbWVudENsYXNzZXMuaW5kZXhPZigndG9wJykgIT09IC0xICYmIGluaXRpYWxIZWlnaHQgIT09IGN1cnJlbnRIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiBjb250YWluZXJQb3NpdGlvbi50b3AgLSBjdXJyZW50SGVpZ2h0ICsgJ3B4J1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYSB3YXkgZm9yIHBvc2l0aW9uaW5nIHRvb2x0aXAgJiBkcm9wZG93blxuICAgICAgICogYXJyb3dzIHdoZW4gdXNpbmcgcGxhY2VtZW50IG9wdGlvbnMgYmV5b25kIHRoZSBzdGFuZGFyZFxuICAgICAgICogbGVmdCwgcmlnaHQsIHRvcCwgb3IgYm90dG9tLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSB0b29sdGlwL2Ryb3Bkb3duIGVsZW1lbnQuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhY2VtZW50IC0gVGhlIHBsYWNlbWVudCBmb3IgdGhlIGVsZW0uXG4gICAgICAgKi9cbiAgICAgIHBvc2l0aW9uQXJyb3c6IGZ1bmN0aW9uKGVsZW0sIHBsYWNlbWVudCkge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBpbm5lckVsZW0gPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy50b29sdGlwLWlubmVyLCAucG9wb3Zlci1pbm5lcicpO1xuICAgICAgICBpZiAoIWlubmVyRWxlbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1Rvb2x0aXAgPSBhbmd1bGFyLmVsZW1lbnQoaW5uZXJFbGVtKS5oYXNDbGFzcygndG9vbHRpcC1pbm5lcicpO1xuXG4gICAgICAgIHZhciBhcnJvd0VsZW0gPSBpc1Rvb2x0aXAgPyBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy50b29sdGlwLWFycm93JykgOiBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdycpO1xuICAgICAgICBpZiAoIWFycm93RWxlbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhcnJvd0NzcyA9IHtcbiAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgIGJvdHRvbTogJycsXG4gICAgICAgICAgbGVmdDogJycsXG4gICAgICAgICAgcmlnaHQ6ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgcGxhY2VtZW50ID0gdGhpcy5wYXJzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICAgICAgICBpZiAocGxhY2VtZW50WzFdID09PSAnY2VudGVyJykge1xuICAgICAgICAgIC8vIG5vIGFkanVzdG1lbnQgbmVjZXNzYXJ5IC0ganVzdCByZXNldCBzdHlsZXNcbiAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoYXJyb3dFbGVtKS5jc3MoYXJyb3dDc3MpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBib3JkZXJQcm9wID0gJ2JvcmRlci0nICsgcGxhY2VtZW50WzBdICsgJy13aWR0aCc7XG4gICAgICAgIHZhciBib3JkZXJXaWR0aCA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShhcnJvd0VsZW0pW2JvcmRlclByb3BdO1xuXG4gICAgICAgIHZhciBib3JkZXJSYWRpdXNQcm9wID0gJ2JvcmRlci0nO1xuICAgICAgICBpZiAoUExBQ0VNRU5UX1JFR0VYLnZlcnRpY2FsLnRlc3QocGxhY2VtZW50WzBdKSkge1xuICAgICAgICAgIGJvcmRlclJhZGl1c1Byb3AgKz0gcGxhY2VtZW50WzBdICsgJy0nICsgcGxhY2VtZW50WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJvcmRlclJhZGl1c1Byb3AgKz0gcGxhY2VtZW50WzFdICsgJy0nICsgcGxhY2VtZW50WzBdO1xuICAgICAgICB9XG4gICAgICAgIGJvcmRlclJhZGl1c1Byb3AgKz0gJy1yYWRpdXMnO1xuICAgICAgICB2YXIgYm9yZGVyUmFkaXVzID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlzVG9vbHRpcCA/IGlubmVyRWxlbSA6IGVsZW0pW2JvcmRlclJhZGl1c1Byb3BdO1xuXG4gICAgICAgIHN3aXRjaCAocGxhY2VtZW50WzBdKSB7XG4gICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgIGFycm93Q3NzLmJvdHRvbSA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIGFycm93Q3NzLnRvcCA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICBhcnJvd0Nzcy5yaWdodCA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgYXJyb3dDc3MubGVmdCA9IGlzVG9vbHRpcCA/ICcwJyA6ICctJyArIGJvcmRlcldpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBhcnJvd0Nzc1twbGFjZW1lbnRbMV1dID0gYm9yZGVyUmFkaXVzO1xuXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChhcnJvd0VsZW0pLmNzcyhhcnJvd0Nzcyk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJQb3B1cCcsIFsndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXInLCAndWkuYm9vdHN0cmFwLnBvc2l0aW9uJ10pXG5cbi52YWx1ZSgnJGRhdGVwaWNrZXJQb3B1cExpdGVyYWxXYXJuaW5nJywgdHJ1ZSlcblxuLmNvbnN0YW50KCd1aWJEYXRlcGlja2VyUG9wdXBDb25maWcnLCB7XG4gIGFsdElucHV0Rm9ybWF0czogW10sXG4gIGFwcGVuZFRvQm9keTogZmFsc2UsXG4gIGNsZWFyVGV4dDogJ0NsZWFyJyxcbiAgY2xvc2VPbkRhdGVTZWxlY3Rpb246IHRydWUsXG4gIGNsb3NlVGV4dDogJ0RvbmUnLFxuICBjdXJyZW50VGV4dDogJ1RvZGF5JyxcbiAgZGF0ZXBpY2tlclBvcHVwOiAneXl5eS1NTS1kZCcsXG4gIGRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXJQb3B1cC9wb3B1cC5odG1sJyxcbiAgZGF0ZXBpY2tlclRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sJyxcbiAgaHRtbDVUeXBlczoge1xuICAgIGRhdGU6ICd5eXl5LU1NLWRkJyxcbiAgICAnZGF0ZXRpbWUtbG9jYWwnOiAneXl5eS1NTS1kZFRISDptbTpzcy5zc3MnLFxuICAgICdtb250aCc6ICd5eXl5LU1NJ1xuICB9LFxuICBvbk9wZW5Gb2N1czogdHJ1ZSxcbiAgc2hvd0J1dHRvbkJhcjogdHJ1ZSxcbiAgcGxhY2VtZW50OiAnYXV0byBib3R0b20tbGVmdCdcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJEYXRlcGlja2VyUG9wdXBDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRjb21waWxlJywgJyRsb2cnLCAnJHBhcnNlJywgJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgJyRyb290U2NvcGUnLCAnJHVpYlBvc2l0aW9uJywgJ2RhdGVGaWx0ZXInLCAndWliRGF0ZVBhcnNlcicsICd1aWJEYXRlcGlja2VyUG9wdXBDb25maWcnLCAnJHRpbWVvdXQnLCAndWliRGF0ZXBpY2tlckNvbmZpZycsICckZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmcnLFxuZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkY29tcGlsZSwgJGxvZywgJHBhcnNlLCAkd2luZG93LCAkZG9jdW1lbnQsICRyb290U2NvcGUsICRwb3NpdGlvbiwgZGF0ZUZpbHRlciwgZGF0ZVBhcnNlciwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLCAkdGltZW91dCwgZGF0ZXBpY2tlckNvbmZpZywgJGRhdGVwaWNrZXJQb3B1cExpdGVyYWxXYXJuaW5nKSB7XG4gIHZhciBjYWNoZSA9IHt9LFxuICAgIGlzSHRtbDVEYXRlSW5wdXQgPSBmYWxzZTtcbiAgdmFyIGRhdGVGb3JtYXQsIGNsb3NlT25EYXRlU2VsZWN0aW9uLCBhcHBlbmRUb0JvZHksIG9uT3BlbkZvY3VzLFxuICAgIGRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsLCBkYXRlcGlja2VyVGVtcGxhdGVVcmwsIHBvcHVwRWwsIGRhdGVwaWNrZXJFbCwgc2Nyb2xsUGFyZW50RWwsXG4gICAgbmdNb2RlbCwgbmdNb2RlbE9wdGlvbnMsICRwb3B1cCwgYWx0SW5wdXRGb3JtYXRzLCB3YXRjaExpc3RlbmVycyA9IFtdO1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKF9uZ01vZGVsXykge1xuICAgIG5nTW9kZWwgPSBfbmdNb2RlbF87XG4gICAgbmdNb2RlbE9wdGlvbnMgPSBleHRyYWN0T3B0aW9ucyhuZ01vZGVsKTtcbiAgICBjbG9zZU9uRGF0ZVNlbGVjdGlvbiA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5jbG9zZU9uRGF0ZVNlbGVjdGlvbikgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmNsb3NlT25EYXRlU2VsZWN0aW9uKSA6XG4gICAgICBkYXRlcGlja2VyUG9wdXBDb25maWcuY2xvc2VPbkRhdGVTZWxlY3Rpb247XG4gICAgYXBwZW5kVG9Cb2R5ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRhdGVwaWNrZXJBcHBlbmRUb0JvZHkpID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5kYXRlcGlja2VyQXBwZW5kVG9Cb2R5KSA6XG4gICAgICBkYXRlcGlja2VyUG9wdXBDb25maWcuYXBwZW5kVG9Cb2R5O1xuICAgIG9uT3BlbkZvY3VzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm9uT3BlbkZvY3VzKSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMub25PcGVuRm9jdXMpIDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLm9uT3BlbkZvY3VzO1xuICAgIGRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsKSA/XG4gICAgICAkYXR0cnMuZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwgOlxuICAgICAgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsO1xuICAgIGRhdGVwaWNrZXJUZW1wbGF0ZVVybCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kYXRlcGlja2VyVGVtcGxhdGVVcmwpID9cbiAgICAgICRhdHRycy5kYXRlcGlja2VyVGVtcGxhdGVVcmwgOiBkYXRlcGlja2VyUG9wdXBDb25maWcuZGF0ZXBpY2tlclRlbXBsYXRlVXJsO1xuICAgIGFsdElucHV0Rm9ybWF0cyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5hbHRJbnB1dEZvcm1hdHMpID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5hbHRJbnB1dEZvcm1hdHMpIDpcbiAgICAgIGRhdGVwaWNrZXJQb3B1cENvbmZpZy5hbHRJbnB1dEZvcm1hdHM7XG5cbiAgICAkc2NvcGUuc2hvd0J1dHRvbkJhciA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5zaG93QnV0dG9uQmFyKSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuc2hvd0J1dHRvbkJhcikgOlxuICAgICAgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLnNob3dCdXR0b25CYXI7XG5cbiAgICBpZiAoZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmh0bWw1VHlwZXNbJGF0dHJzLnR5cGVdKSB7XG4gICAgICBkYXRlRm9ybWF0ID0gZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmh0bWw1VHlwZXNbJGF0dHJzLnR5cGVdO1xuICAgICAgaXNIdG1sNURhdGVJbnB1dCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVGb3JtYXQgPSAkYXR0cnMudWliRGF0ZXBpY2tlclBvcHVwIHx8IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5kYXRlcGlja2VyUG9wdXA7XG4gICAgICAkYXR0cnMuJG9ic2VydmUoJ3VpYkRhdGVwaWNrZXJQb3B1cCcsIGZ1bmN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YXIgbmV3RGF0ZUZvcm1hdCA9IHZhbHVlIHx8IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5kYXRlcGlja2VyUG9wdXA7XG4gICAgICAgIC8vIEludmFsaWRhdGUgdGhlICRtb2RlbFZhbHVlIHRvIGVuc3VyZSB0aGF0IGZvcm1hdHRlcnMgcmUtcnVuXG4gICAgICAgIC8vIEZJWE1FOiBSZWZhY3RvciB3aGVuIFBSIGlzIG1lcmdlZDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEwNzY0XG4gICAgICAgIGlmIChuZXdEYXRlRm9ybWF0ICE9PSBkYXRlRm9ybWF0KSB7XG4gICAgICAgICAgZGF0ZUZvcm1hdCA9IG5ld0RhdGVGb3JtYXQ7XG4gICAgICAgICAgbmdNb2RlbC4kbW9kZWxWYWx1ZSA9IG51bGw7XG5cbiAgICAgICAgICBpZiAoIWRhdGVGb3JtYXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndWliRGF0ZXBpY2tlclBvcHVwIG11c3QgaGF2ZSBhIGRhdGUgZm9ybWF0IHNwZWNpZmllZC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghZGF0ZUZvcm1hdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1aWJEYXRlcGlja2VyUG9wdXAgbXVzdCBoYXZlIGEgZGF0ZSBmb3JtYXQgc3BlY2lmaWVkLicpO1xuICAgIH1cblxuICAgIGlmIChpc0h0bWw1RGF0ZUlucHV0ICYmICRhdHRycy51aWJEYXRlcGlja2VyUG9wdXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSFRNTDUgZGF0ZSBpbnB1dCB0eXBlcyBkbyBub3Qgc3VwcG9ydCBjdXN0b20gZm9ybWF0cy4nKTtcbiAgICB9XG5cbiAgICAvLyBwb3B1cCBlbGVtZW50IHVzZWQgdG8gZGlzcGxheSBjYWxlbmRhclxuICAgIHBvcHVwRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgdWliLWRhdGVwaWNrZXItcG9wdXAtd3JhcD48ZGl2IHVpYi1kYXRlcGlja2VyPjwvZGl2PjwvZGl2PicpO1xuXG4gICAgcG9wdXBFbC5hdHRyKHtcbiAgICAgICduZy1tb2RlbCc6ICdkYXRlJyxcbiAgICAgICduZy1jaGFuZ2UnOiAnZGF0ZVNlbGVjdGlvbihkYXRlKScsXG4gICAgICAndGVtcGxhdGUtdXJsJzogZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmxcbiAgICB9KTtcblxuICAgIC8vIGRhdGVwaWNrZXIgZWxlbWVudFxuICAgIGRhdGVwaWNrZXJFbCA9IGFuZ3VsYXIuZWxlbWVudChwb3B1cEVsLmNoaWxkcmVuKClbMF0pO1xuICAgIGRhdGVwaWNrZXJFbC5hdHRyKCd0ZW1wbGF0ZS11cmwnLCBkYXRlcGlja2VyVGVtcGxhdGVVcmwpO1xuXG4gICAgaWYgKCEkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMpIHtcbiAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChpc0h0bWw1RGF0ZUlucHV0KSB7XG4gICAgICBpZiAoJGF0dHJzLnR5cGUgPT09ICdtb250aCcpIHtcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlID0gJ21vbnRoJztcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLm1pbk1vZGUgPSAnbW9udGgnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRhdGVwaWNrZXJFbC5hdHRyKCdkYXRlcGlja2VyLW9wdGlvbnMnLCAnZGF0ZXBpY2tlck9wdGlvbnMnKTtcblxuICAgIGlmICghaXNIdG1sNURhdGVJbnB1dCkge1xuICAgICAgLy8gSW50ZXJuYWwgQVBJIHRvIG1haW50YWluIHRoZSBjb3JyZWN0IG5nLWludmFsaWQtW2tleV0gY2xhc3NcbiAgICAgIG5nTW9kZWwuJCRwYXJzZXJOYW1lID0gJ2RhdGUnO1xuICAgICAgbmdNb2RlbC4kdmFsaWRhdG9ycy5kYXRlID0gdmFsaWRhdG9yO1xuICAgICAgbmdNb2RlbC4kcGFyc2Vycy51bnNoaWZ0KHBhcnNlRGF0ZSk7XG4gICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKG5nTW9kZWwuJGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgJHNjb3BlLmRhdGUgPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYW5ndWxhci5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5kYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUodmFsdWUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGVQYXJzZXIuZmlsdGVyKCRzY29wZS5kYXRlLCBkYXRlRm9ybWF0KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgJHNjb3BlLmRhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZSh2YWx1ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRGV0ZWN0IGNoYW5nZXMgaW4gdGhlIHZpZXcgZnJvbSB0aGUgdGV4dCBib3hcbiAgICBuZ01vZGVsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUuZGF0ZSA9IHBhcnNlRGF0ZVN0cmluZyhuZ01vZGVsLiR2aWV3VmFsdWUpO1xuICAgIH0pO1xuXG4gICAgJGVsZW1lbnQub24oJ2tleWRvd24nLCBpbnB1dEtleWRvd25CaW5kKTtcblxuICAgICRwb3B1cCA9ICRjb21waWxlKHBvcHVwRWwpKCRzY29wZSk7XG4gICAgLy8gUHJldmVudCBqUXVlcnkgY2FjaGUgbWVtb3J5IGxlYWsgKHRlbXBsYXRlIGlzIG5vdyByZWR1bmRhbnQgYWZ0ZXIgbGlua2luZylcbiAgICBwb3B1cEVsLnJlbW92ZSgpO1xuXG4gICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5hcHBlbmQoJHBvcHVwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsZW1lbnQuYWZ0ZXIoJHBvcHVwKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCRzY29wZS5pc09wZW4gPT09IHRydWUpIHtcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRwb3B1cC5yZW1vdmUoKTtcbiAgICAgICRlbGVtZW50Lm9mZigna2V5ZG93bicsIGlucHV0S2V5ZG93bkJpbmQpO1xuICAgICAgJGRvY3VtZW50Lm9mZignY2xpY2snLCBkb2N1bWVudENsaWNrQmluZCk7XG4gICAgICBpZiAoc2Nyb2xsUGFyZW50RWwpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50RWwub2ZmKCdzY3JvbGwnLCBwb3NpdGlvblBvcHVwKTtcbiAgICAgIH1cbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIHBvc2l0aW9uUG9wdXApO1xuXG4gICAgICAvL0NsZWFyIGFsbCB3YXRjaCBsaXN0ZW5lcnMgb24gZGVzdHJveVxuICAgICAgd2hpbGUgKHdhdGNoTGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICB3YXRjaExpc3RlbmVycy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgJHNjb3BlLmdldFRleHQgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gJHNjb3BlW2tleSArICdUZXh0J10gfHwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnW2tleSArICdUZXh0J107XG4gIH07XG5cbiAgJHNjb3BlLmlzRGlzYWJsZWQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgaWYgKGRhdGUgPT09ICd0b2RheScpIHtcbiAgICAgIGRhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShuZXcgRGF0ZSgpLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgIH1cblxuICAgIHZhciBkYXRlcyA9IHt9O1xuICAgIGFuZ3VsYXIuZm9yRWFjaChbJ21pbkRhdGUnLCAnbWF4RGF0ZSddLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGlmICghJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0pIHtcbiAgICAgICAgZGF0ZXNba2V5XSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEYXRlKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSkge1xuICAgICAgICBkYXRlc1trZXldID0gbmV3IERhdGUoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCRkYXRlcGlja2VyUG9wdXBMaXRlcmFsV2FybmluZykge1xuICAgICAgICAgICRsb2cud2FybignTGl0ZXJhbCBkYXRlIHN1cHBvcnQgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHN3aXRjaCB0byBkYXRlIG9iamVjdCB1c2FnZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0ZXNba2V5XSA9IG5ldyBEYXRlKGRhdGVGaWx0ZXIoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0sICdtZWRpdW0nKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zICYmXG4gICAgICBkYXRlcy5taW5EYXRlICYmICRzY29wZS5jb21wYXJlKGRhdGUsIGRhdGVzLm1pbkRhdGUpIDwgMCB8fFxuICAgICAgZGF0ZXMubWF4RGF0ZSAmJiAkc2NvcGUuY29tcGFyZShkYXRlLCBkYXRlcy5tYXhEYXRlKSA+IDA7XG4gIH07XG5cbiAgJHNjb3BlLmNvbXBhcmUgPSBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZTEuZ2V0RnVsbFllYXIoKSwgZGF0ZTEuZ2V0TW9udGgoKSwgZGF0ZTEuZ2V0RGF0ZSgpKSAtIG5ldyBEYXRlKGRhdGUyLmdldEZ1bGxZZWFyKCksIGRhdGUyLmdldE1vbnRoKCksIGRhdGUyLmdldERhdGUoKSk7XG4gIH07XG5cbiAgLy8gSW5uZXIgY2hhbmdlXG4gICRzY29wZS5kYXRlU2VsZWN0aW9uID0gZnVuY3Rpb24oZHQpIHtcbiAgICAkc2NvcGUuZGF0ZSA9IGR0O1xuICAgIHZhciBkYXRlID0gJHNjb3BlLmRhdGUgPyBkYXRlUGFyc2VyLmZpbHRlcigkc2NvcGUuZGF0ZSwgZGF0ZUZvcm1hdCkgOiBudWxsOyAvLyBTZXR0aW5nIHRvIE5VTEwgaXMgbmVjZXNzYXJ5IGZvciBmb3JtIHZhbGlkYXRvcnMgdG8gZnVuY3Rpb25cbiAgICAkZWxlbWVudC52YWwoZGF0ZSk7XG4gICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGRhdGUpO1xuXG4gICAgaWYgKGNsb3NlT25EYXRlU2VsZWN0aW9uKSB7XG4gICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAkZWxlbWVudFswXS5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUua2V5ZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGlmIChldnQud2hpY2ggPT09IDI3KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAkZWxlbWVudFswXS5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oZGF0ZSwgZXZ0KSB7XG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKGRhdGUgPT09ICd0b2RheScpIHtcbiAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICBpZiAoYW5ndWxhci5pc0RhdGUoJHNjb3BlLmRhdGUpKSB7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0ZSk7XG4gICAgICAgIGRhdGUuc2V0RnVsbFllYXIodG9kYXkuZ2V0RnVsbFllYXIoKSwgdG9kYXkuZ2V0TW9udGgoKSwgdG9kYXkuZ2V0RGF0ZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZSh0b2RheSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgJHNjb3BlLmRhdGVTZWxlY3Rpb24oZGF0ZSk7XG4gIH07XG5cbiAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG4gIH07XG5cbiAgJHNjb3BlLmRpc2FibGVkID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRpc2FibGVkKSB8fCBmYWxzZTtcbiAgaWYgKCRhdHRycy5uZ0Rpc2FibGVkKSB7XG4gICAgd2F0Y2hMaXN0ZW5lcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5uZ0Rpc2FibGVkKSwgZnVuY3Rpb24oZGlzYWJsZWQpIHtcbiAgICAgICRzY29wZS5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH0pKTtcbiAgfVxuXG4gICRzY29wZS4kd2F0Y2goJ2lzT3BlbicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAoISRzY29wZS5kaXNhYmxlZCkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBwb3NpdGlvblBvcHVwKCk7XG5cbiAgICAgICAgICBpZiAob25PcGVuRm9jdXMpIHtcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCd1aWI6ZGF0ZXBpY2tlci5mb2N1cycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRkb2N1bWVudC5vbignY2xpY2snLCBkb2N1bWVudENsaWNrQmluZCk7XG5cbiAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gJGF0dHJzLnBvcHVwUGxhY2VtZW50ID8gJGF0dHJzLnBvcHVwUGxhY2VtZW50IDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLnBsYWNlbWVudDtcbiAgICAgICAgICBpZiAoYXBwZW5kVG9Cb2R5IHx8ICRwb3NpdGlvbi5wYXJzZVBsYWNlbWVudChwbGFjZW1lbnQpWzJdKSB7XG4gICAgICAgICAgICBzY3JvbGxQYXJlbnRFbCA9IHNjcm9sbFBhcmVudEVsIHx8IGFuZ3VsYXIuZWxlbWVudCgkcG9zaXRpb24uc2Nyb2xsUGFyZW50KCRlbGVtZW50KSk7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsUGFyZW50RWwpIHtcbiAgICAgICAgICAgICAgc2Nyb2xsUGFyZW50RWwub24oJ3Njcm9sbCcsIHBvc2l0aW9uUG9wdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY3JvbGxQYXJlbnRFbCA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBwb3NpdGlvblBvcHVwKTtcbiAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcbiAgICAgIGlmIChzY3JvbGxQYXJlbnRFbCkge1xuICAgICAgICBzY3JvbGxQYXJlbnRFbC5vZmYoJ3Njcm9sbCcsIHBvc2l0aW9uUG9wdXApO1xuICAgICAgfVxuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgcG9zaXRpb25Qb3B1cCk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBjYW1lbHRvRGFzaChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24oJDEpIHsgcmV0dXJuICctJyArICQxLnRvTG93ZXJDYXNlKCk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VEYXRlU3RyaW5nKHZpZXdWYWx1ZSkge1xuICAgIHZhciBkYXRlID0gZGF0ZVBhcnNlci5wYXJzZSh2aWV3VmFsdWUsIGRhdGVGb3JtYXQsICRzY29wZS5kYXRlKTtcbiAgICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWx0SW5wdXRGb3JtYXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGUgPSBkYXRlUGFyc2VyLnBhcnNlKHZpZXdWYWx1ZSwgYWx0SW5wdXRGb3JtYXRzW2ldLCAkc2NvcGUuZGF0ZSk7XG4gICAgICAgIGlmICghaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF0ZSh2aWV3VmFsdWUpIHtcbiAgICBpZiAoYW5ndWxhci5pc051bWJlcih2aWV3VmFsdWUpKSB7XG4gICAgICAvLyBwcmVzdW1hYmx5IHRpbWVzdGFtcCB0byBkYXRlIG9iamVjdFxuICAgICAgdmlld1ZhbHVlID0gbmV3IERhdGUodmlld1ZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXZpZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNEYXRlKHZpZXdWYWx1ZSkgJiYgIWlzTmFOKHZpZXdWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB2aWV3VmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmlld1ZhbHVlKSkge1xuICAgICAgdmFyIGRhdGUgPSBwYXJzZURhdGVTdHJpbmcodmlld1ZhbHVlKTtcbiAgICAgIGlmICghaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGVQYXJzZXIudG9UaW1lem9uZShkYXRlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ2FsbG93SW52YWxpZCcpID8gdmlld1ZhbHVlIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuXG4gICAgaWYgKCEkYXR0cnMubmdSZXF1aXJlZCAmJiAhdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNEYXRlKHZhbHVlKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VEYXRlU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9jdW1lbnRDbGlja0JpbmQoZXZlbnQpIHtcbiAgICBpZiAoISRzY29wZS5pc09wZW4gJiYgJHNjb3BlLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBvcHVwID0gJHBvcHVwWzBdO1xuICAgIHZhciBkcENvbnRhaW5zVGFyZ2V0ID0gJGVsZW1lbnRbMF0uY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcbiAgICAvLyBUaGUgcG9wdXAgbm9kZSBtYXkgbm90IGJlIGFuIGVsZW1lbnQgbm9kZVxuICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKElFKSBvbmx5IGVsZW1lbnQgbm9kZXMgaGF2ZSB0aGUgJ2NvbnRhaW5zJyBmdW5jdGlvblxuICAgIHZhciBwb3B1cENvbnRhaW5zVGFyZ2V0ID0gcG9wdXAuY29udGFpbnMgIT09IHVuZGVmaW5lZCAmJiBwb3B1cC5jb250YWlucyhldmVudC50YXJnZXQpO1xuICAgIGlmICgkc2NvcGUuaXNPcGVuICYmICEoZHBDb250YWluc1RhcmdldCB8fCBwb3B1cENvbnRhaW5zVGFyZ2V0KSkge1xuICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5wdXRLZXlkb3duQmluZChldnQpIHtcbiAgICBpZiAoZXZ0LndoaWNoID09PSAyNyAmJiAkc2NvcGUuaXNPcGVuKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgJGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICB9IGVsc2UgaWYgKGV2dC53aGljaCA9PT0gNDAgJiYgISRzY29wZS5pc09wZW4pIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLmlzT3BlbiA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwb3NpdGlvblBvcHVwKCkge1xuICAgIGlmICgkc2NvcGUuaXNPcGVuKSB7XG4gICAgICB2YXIgZHBFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCRwb3B1cFswXS5xdWVyeVNlbGVjdG9yKCcudWliLWRhdGVwaWNrZXItcG9wdXAnKSk7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gJGF0dHJzLnBvcHVwUGxhY2VtZW50ID8gJGF0dHJzLnBvcHVwUGxhY2VtZW50IDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLnBsYWNlbWVudDtcbiAgICAgIHZhciBwb3NpdGlvbiA9ICRwb3NpdGlvbi5wb3NpdGlvbkVsZW1lbnRzKCRlbGVtZW50LCBkcEVsZW1lbnQsIHBsYWNlbWVudCwgYXBwZW5kVG9Cb2R5KTtcbiAgICAgIGRwRWxlbWVudC5jc3Moe3RvcDogcG9zaXRpb24udG9wICsgJ3B4JywgbGVmdDogcG9zaXRpb24ubGVmdCArICdweCd9KTtcbiAgICAgIGlmIChkcEVsZW1lbnQuaGFzQ2xhc3MoJ3VpYi1wb3NpdGlvbi1tZWFzdXJlJykpIHtcbiAgICAgICAgZHBFbGVtZW50LnJlbW92ZUNsYXNzKCd1aWItcG9zaXRpb24tbWVhc3VyZScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dHJhY3RPcHRpb25zKG5nTW9kZWxDdHJsKSB7XG4gICAgdmFyIG5nTW9kZWxPcHRpb25zO1xuXG4gICAgaWYgKGFuZ3VsYXIudmVyc2lvbi5taW5vciA8IDYpIHsgLy8gaW4gYW5ndWxhciA8IDEuNiAkb3B0aW9ucyBjb3VsZCBiZSBtaXNzaW5nXG4gICAgICAvLyBndWFyYW50ZWUgYSB2YWx1ZVxuICAgICAgbmdNb2RlbE9wdGlvbnMgPSBhbmd1bGFyLmlzT2JqZWN0KG5nTW9kZWxDdHJsLiRvcHRpb25zKSA/XG4gICAgICAgIG5nTW9kZWxDdHJsLiRvcHRpb25zIDpcbiAgICAgICAge1xuICAgICAgICAgIHRpbWV6b25lOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgIC8vIG1pbWljIDEuNisgYXBpXG4gICAgICBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBuZ01vZGVsT3B0aW9uc1trZXldO1xuICAgICAgfTtcbiAgICB9IGVsc2UgeyAvLyBpbiBhbmd1bGFyID49MS42ICRvcHRpb25zIGlzIGFsd2F5cyBwcmVzZW50XG4gICAgICBuZ01vZGVsT3B0aW9ucyA9IG5nTW9kZWxDdHJsLiRvcHRpb25zO1xuICAgIH1cblxuICAgIHJldHVybiBuZ01vZGVsT3B0aW9ucztcbiAgfVxuXG4gICRzY29wZS4kb24oJ3VpYjpkYXRlcGlja2VyLm1vZGUnLCBmdW5jdGlvbigpIHtcbiAgICAkdGltZW91dChwb3NpdGlvblBvcHVwLCAwLCBmYWxzZSk7XG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRhdGVwaWNrZXJQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICd1aWJEYXRlcGlja2VyUG9wdXAnXSxcbiAgICBjb250cm9sbGVyOiAnVWliRGF0ZXBpY2tlclBvcHVwQ29udHJvbGxlcicsXG4gICAgc2NvcGU6IHtcbiAgICAgIGRhdGVwaWNrZXJPcHRpb25zOiAnPT8nLFxuICAgICAgaXNPcGVuOiAnPT8nLFxuICAgICAgY3VycmVudFRleHQ6ICdAJyxcbiAgICAgIGNsZWFyVGV4dDogJ0AnLFxuICAgICAgY2xvc2VUZXh0OiAnQCdcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBuZ01vZGVsID0gY3RybHNbMF0sXG4gICAgICAgIGN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgY3RybC5pbml0KG5nTW9kZWwpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRhdGVwaWNrZXJQb3B1cFdyYXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyUG9wdXAvcG9wdXAuaHRtbCc7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGVib3VuY2UnLCBbXSlcbi8qKlxuICogQSBoZWxwZXIsIGludGVybmFsIHNlcnZpY2UgdGhhdCBkZWJvdW5jZXMgYSBmdW5jdGlvblxuICovXG4gIC5mYWN0b3J5KCckJGRlYm91bmNlJywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWJvdW5jZVRpbWUpIHtcbiAgICAgIHZhciB0aW1lb3V0UHJvbWlzZTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRpbWVvdXRQcm9taXNlKSB7XG4gICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVvdXRQcm9taXNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVvdXRQcm9taXNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FsbGJhY2suYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgIH0sIGRlYm91bmNlVGltZSk7XG4gICAgICB9O1xuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5tdWx0aU1hcCcsIFtdKVxuLyoqXG4gKiBBIGhlbHBlciwgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBzdG9yZXMgYWxsIHJlZmVyZW5jZXMgYXR0YWNoZWQgdG8ga2V5XG4gKi9cbiAgLmZhY3RvcnkoJyQkbXVsdGlNYXAnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlTmV3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1hcCA9IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IG1hcFtrZXldXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYXNLZXk6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuICEhbWFwW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIW1hcFtrZXldKSB7XG4gICAgICAgICAgICAgIG1hcFtrZXldID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hcFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbWFwW2tleV07XG5cbiAgICAgICAgICAgIGlmICghdmFsdWVzKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlkeCA9IHZhbHVlcy5pbmRleE9mKHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hcFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kcm9wZG93bicsIFsndWkuYm9vdHN0cmFwLm11bHRpTWFwJywgJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuXG4uY29uc3RhbnQoJ3VpYkRyb3Bkb3duQ29uZmlnJywge1xuICBhcHBlbmRUb09wZW5DbGFzczogJ3VpYi1kcm9wZG93bi1vcGVuJyxcbiAgb3BlbkNsYXNzOiAnb3Blbidcbn0pXG5cbi5zZXJ2aWNlKCd1aWJEcm9wZG93blNlcnZpY2UnLCBbJyRkb2N1bWVudCcsICckcm9vdFNjb3BlJywgJyQkbXVsdGlNYXAnLCBmdW5jdGlvbigkZG9jdW1lbnQsICRyb290U2NvcGUsICQkbXVsdGlNYXApIHtcbiAgdmFyIG9wZW5TY29wZSA9IG51bGw7XG4gIHZhciBvcGVuZWRDb250YWluZXJzID0gJCRtdWx0aU1hcC5jcmVhdGVOZXcoKTtcblxuICB0aGlzLmlzT25seU9wZW4gPSBmdW5jdGlvbihkcm9wZG93blNjb3BlLCBhcHBlbmRUbykge1xuICAgIHZhciBvcGVuZWREcm9wZG93bnMgPSBvcGVuZWRDb250YWluZXJzLmdldChhcHBlbmRUbyk7XG4gICAgaWYgKG9wZW5lZERyb3Bkb3ducykge1xuICAgICAgdmFyIG9wZW5Ecm9wZG93biA9IG9wZW5lZERyb3Bkb3ducy5yZWR1Y2UoZnVuY3Rpb24odG9DbG9zZSwgZHJvcGRvd24pIHtcbiAgICAgICAgaWYgKGRyb3Bkb3duLnNjb3BlID09PSBkcm9wZG93blNjb3BlKSB7XG4gICAgICAgICAgcmV0dXJuIGRyb3Bkb3duO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvQ2xvc2U7XG4gICAgICB9LCB7fSk7XG4gICAgICBpZiAob3BlbkRyb3Bkb3duKSB7XG4gICAgICAgIHJldHVybiBvcGVuZWREcm9wZG93bnMubGVuZ3RoID09PSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB0aGlzLm9wZW4gPSBmdW5jdGlvbihkcm9wZG93blNjb3BlLCBlbGVtZW50LCBhcHBlbmRUbykge1xuICAgIGlmICghb3BlblNjb3BlKSB7XG4gICAgICAkZG9jdW1lbnQub24oJ2NsaWNrJywgY2xvc2VEcm9wZG93bik7XG4gICAgfVxuXG4gICAgaWYgKG9wZW5TY29wZSAmJiBvcGVuU2NvcGUgIT09IGRyb3Bkb3duU2NvcGUpIHtcbiAgICAgIG9wZW5TY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvcGVuU2NvcGUgPSBkcm9wZG93blNjb3BlO1xuXG4gICAgaWYgKCFhcHBlbmRUbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcGVuZWREcm9wZG93bnMgPSBvcGVuZWRDb250YWluZXJzLmdldChhcHBlbmRUbyk7XG4gICAgaWYgKG9wZW5lZERyb3Bkb3ducykge1xuICAgICAgdmFyIG9wZW5lZFNjb3BlcyA9IG9wZW5lZERyb3Bkb3ducy5tYXAoZnVuY3Rpb24oZHJvcGRvd24pIHtcbiAgICAgICAgcmV0dXJuIGRyb3Bkb3duLnNjb3BlO1xuICAgICAgfSk7XG4gICAgICBpZiAob3BlbmVkU2NvcGVzLmluZGV4T2YoZHJvcGRvd25TY29wZSkgPT09IC0xKSB7XG4gICAgICAgIG9wZW5lZENvbnRhaW5lcnMucHV0KGFwcGVuZFRvLCB7XG4gICAgICAgICAgc2NvcGU6IGRyb3Bkb3duU2NvcGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wZW5lZENvbnRhaW5lcnMucHV0KGFwcGVuZFRvLCB7XG4gICAgICAgIHNjb3BlOiBkcm9wZG93blNjb3BlXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uKGRyb3Bkb3duU2NvcGUsIGVsZW1lbnQsIGFwcGVuZFRvKSB7XG4gICAgaWYgKG9wZW5TY29wZSA9PT0gZHJvcGRvd25TY29wZSkge1xuICAgICAgJGRvY3VtZW50Lm9mZignY2xpY2snLCBjbG9zZURyb3Bkb3duKTtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2tleWRvd24nLCB0aGlzLmtleWJpbmRGaWx0ZXIpO1xuICAgICAgb3BlblNjb3BlID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWFwcGVuZFRvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wZW5lZERyb3Bkb3ducyA9IG9wZW5lZENvbnRhaW5lcnMuZ2V0KGFwcGVuZFRvKTtcbiAgICBpZiAob3BlbmVkRHJvcGRvd25zKSB7XG4gICAgICB2YXIgZHJvcGRvd25Ub0Nsb3NlID0gb3BlbmVkRHJvcGRvd25zLnJlZHVjZShmdW5jdGlvbih0b0Nsb3NlLCBkcm9wZG93bikge1xuICAgICAgICBpZiAoZHJvcGRvd24uc2NvcGUgPT09IGRyb3Bkb3duU2NvcGUpIHtcbiAgICAgICAgICByZXR1cm4gZHJvcGRvd247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9DbG9zZTtcbiAgICAgIH0sIHt9KTtcbiAgICAgIGlmIChkcm9wZG93blRvQ2xvc2UpIHtcbiAgICAgICAgb3BlbmVkQ29udGFpbmVycy5yZW1vdmUoYXBwZW5kVG8sIGRyb3Bkb3duVG9DbG9zZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBjbG9zZURyb3Bkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgLy8gVGhpcyBtZXRob2QgbWF5IHN0aWxsIGJlIGNhbGxlZCBkdXJpbmcgdGhlIHNhbWUgbW91c2UgZXZlbnQgdGhhdFxuICAgIC8vIHVuYm91bmQgdGhpcyBldmVudCBoYW5kbGVyLiBTbyBjaGVjayBvcGVuU2NvcGUgYmVmb3JlIHByb2NlZWRpbmcuXG4gICAgaWYgKCFvcGVuU2NvcGUgfHwgIW9wZW5TY29wZS5pc09wZW4pIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAoZXZ0ICYmIG9wZW5TY29wZS5nZXRBdXRvQ2xvc2UoKSA9PT0gJ2Rpc2FibGVkJykgeyByZXR1cm47IH1cblxuICAgIGlmIChldnQgJiYgZXZ0LndoaWNoID09PSAzKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIHRvZ2dsZUVsZW1lbnQgPSBvcGVuU2NvcGUuZ2V0VG9nZ2xlRWxlbWVudCgpO1xuICAgIGlmIChldnQgJiYgdG9nZ2xlRWxlbWVudCAmJiB0b2dnbGVFbGVtZW50WzBdLmNvbnRhaW5zKGV2dC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9IG9wZW5TY29wZS5nZXREcm9wZG93bkVsZW1lbnQoKTtcbiAgICBpZiAoZXZ0ICYmIG9wZW5TY29wZS5nZXRBdXRvQ2xvc2UoKSA9PT0gJ291dHNpZGVDbGljaycgJiZcbiAgICAgIGRyb3Bkb3duRWxlbWVudCAmJiBkcm9wZG93bkVsZW1lbnRbMF0uY29udGFpbnMoZXZ0LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcGVuU2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50KCk7XG4gICAgb3BlblNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuXG4gICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgIG9wZW5TY29wZS4kYXBwbHkoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5rZXliaW5kRmlsdGVyID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgaWYgKCFvcGVuU2NvcGUpIHtcbiAgICAgIC8vIHNlZSB0aGlzLmNsb3NlIGFzIEVTQyBjb3VsZCBoYXZlIGJlZW4gcHJlc3NlZCB3aGljaCBraWxscyB0aGUgc2NvcGUgc28gd2UgY2FuIG5vdCBwcm9jZWVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9IG9wZW5TY29wZS5nZXREcm9wZG93bkVsZW1lbnQoKTtcbiAgICB2YXIgdG9nZ2xlRWxlbWVudCA9IG9wZW5TY29wZS5nZXRUb2dnbGVFbGVtZW50KCk7XG4gICAgdmFyIGRyb3Bkb3duRWxlbWVudFRhcmdldGVkID0gZHJvcGRvd25FbGVtZW50ICYmIGRyb3Bkb3duRWxlbWVudFswXS5jb250YWlucyhldnQudGFyZ2V0KTtcbiAgICB2YXIgdG9nZ2xlRWxlbWVudFRhcmdldGVkID0gdG9nZ2xlRWxlbWVudCAmJiB0b2dnbGVFbGVtZW50WzBdLmNvbnRhaW5zKGV2dC50YXJnZXQpO1xuICAgIGlmIChldnQud2hpY2ggPT09IDI3KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBvcGVuU2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50KCk7XG4gICAgICBjbG9zZURyb3Bkb3duKCk7XG4gICAgfSBlbHNlIGlmIChvcGVuU2NvcGUuaXNLZXluYXZFbmFibGVkKCkgJiYgWzM4LCA0MF0uaW5kZXhPZihldnQud2hpY2gpICE9PSAtMSAmJiBvcGVuU2NvcGUuaXNPcGVuICYmIChkcm9wZG93bkVsZW1lbnRUYXJnZXRlZCB8fCB0b2dnbGVFbGVtZW50VGFyZ2V0ZWQpKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIG9wZW5TY29wZS5mb2N1c0Ryb3Bkb3duRW50cnkoZXZ0LndoaWNoKTtcbiAgICB9XG4gIH07XG59XSlcblxuLmNvbnRyb2xsZXIoJ1VpYkRyb3Bkb3duQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckcGFyc2UnLCAndWliRHJvcGRvd25Db25maWcnLCAndWliRHJvcGRvd25TZXJ2aWNlJywgJyRhbmltYXRlJywgJyR1aWJQb3NpdGlvbicsICckZG9jdW1lbnQnLCAnJGNvbXBpbGUnLCAnJHRlbXBsYXRlUmVxdWVzdCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHBhcnNlLCBkcm9wZG93bkNvbmZpZywgdWliRHJvcGRvd25TZXJ2aWNlLCAkYW5pbWF0ZSwgJHBvc2l0aW9uLCAkZG9jdW1lbnQsICRjb21waWxlLCAkdGVtcGxhdGVSZXF1ZXN0KSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICBzY29wZSA9ICRzY29wZS4kbmV3KCksIC8vIGNyZWF0ZSBhIGNoaWxkIHNjb3BlIHNvIHdlIGFyZSBub3QgcG9sbHV0aW5nIG9yaWdpbmFsIG9uZVxuICAgIHRlbXBsYXRlU2NvcGUsXG4gICAgYXBwZW5kVG9PcGVuQ2xhc3MgPSBkcm9wZG93bkNvbmZpZy5hcHBlbmRUb09wZW5DbGFzcyxcbiAgICBvcGVuQ2xhc3MgPSBkcm9wZG93bkNvbmZpZy5vcGVuQ2xhc3MsXG4gICAgZ2V0SXNPcGVuLFxuICAgIHNldElzT3BlbiA9IGFuZ3VsYXIubm9vcCxcbiAgICB0b2dnbGVJbnZva2VyID0gJGF0dHJzLm9uVG9nZ2xlID8gJHBhcnNlKCRhdHRycy5vblRvZ2dsZSkgOiBhbmd1bGFyLm5vb3AsXG4gICAga2V5bmF2RW5hYmxlZCA9IGZhbHNlLFxuICAgIHNlbGVjdGVkT3B0aW9uID0gbnVsbCxcbiAgICBib2R5ID0gJGRvY3VtZW50LmZpbmQoJ2JvZHknKTtcblxuICAkZWxlbWVudC5hZGRDbGFzcygnZHJvcGRvd24nKTtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoJGF0dHJzLmlzT3Blbikge1xuICAgICAgZ2V0SXNPcGVuID0gJHBhcnNlKCRhdHRycy5pc09wZW4pO1xuICAgICAgc2V0SXNPcGVuID0gZ2V0SXNPcGVuLmFzc2lnbjtcblxuICAgICAgJHNjb3BlLiR3YXRjaChnZXRJc09wZW4sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHNjb3BlLmlzT3BlbiA9ICEhdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXluYXZFbmFibGVkID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmtleWJvYXJkTmF2KTtcbiAgfTtcblxuICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uKG9wZW4pIHtcbiAgICBzY29wZS5pc09wZW4gPSBhcmd1bWVudHMubGVuZ3RoID8gISFvcGVuIDogIXNjb3BlLmlzT3BlbjtcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHNldElzT3BlbikpIHtcbiAgICAgIHNldElzT3BlbihzY29wZSwgc2NvcGUuaXNPcGVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NvcGUuaXNPcGVuO1xuICB9O1xuXG4gIC8vIEFsbG93IG90aGVyIGRpcmVjdGl2ZXMgdG8gd2F0Y2ggc3RhdHVzXG4gIHRoaXMuaXNPcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNjb3BlLmlzT3BlbjtcbiAgfTtcblxuICBzY29wZS5nZXRUb2dnbGVFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYudG9nZ2xlRWxlbWVudDtcbiAgfTtcblxuICBzY29wZS5nZXRBdXRvQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJGF0dHJzLmF1dG9DbG9zZSB8fCAnYWx3YXlzJzsgLy9vciAnb3V0c2lkZUNsaWNrJyBvciAnZGlzYWJsZWQnXG4gIH07XG5cbiAgc2NvcGUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkZWxlbWVudDtcbiAgfTtcblxuICBzY29wZS5pc0tleW5hdkVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ga2V5bmF2RW5hYmxlZDtcbiAgfTtcblxuICBzY29wZS5mb2N1c0Ryb3Bkb3duRW50cnkgPSBmdW5jdGlvbihrZXlDb2RlKSB7XG4gICAgdmFyIGVsZW1zID0gc2VsZi5kcm9wZG93bk1lbnUgPyAvL0lmIGFwcGVuZCB0byBib2R5IGlzIHVzZWQuXG4gICAgICBhbmd1bGFyLmVsZW1lbnQoc2VsZi5kcm9wZG93bk1lbnUpLmZpbmQoJ2EnKSA6XG4gICAgICAkZWxlbWVudC5maW5kKCd1bCcpLmVxKDApLmZpbmQoJ2EnKTtcblxuICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgY2FzZSA0MDoge1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIoc2VsZi5zZWxlY3RlZE9wdGlvbikpIHtcbiAgICAgICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uID0gc2VsZi5zZWxlY3RlZE9wdGlvbiA9PT0gZWxlbXMubGVuZ3RoIC0gMSA/XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uIDpcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gKyAxO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzODoge1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIoc2VsZi5zZWxlY3RlZE9wdGlvbikpIHtcbiAgICAgICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uID0gZWxlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uID0gc2VsZi5zZWxlY3RlZE9wdGlvbiA9PT0gMCA/XG4gICAgICAgICAgICAwIDogc2VsZi5zZWxlY3RlZE9wdGlvbiAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGVsZW1zW3NlbGYuc2VsZWN0ZWRPcHRpb25dLmZvY3VzKCk7XG4gIH07XG5cbiAgc2NvcGUuZ2V0RHJvcGRvd25FbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuZHJvcGRvd25NZW51O1xuICB9O1xuXG4gIHNjb3BlLmZvY3VzVG9nZ2xlRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLnRvZ2dsZUVsZW1lbnQpIHtcbiAgICAgIHNlbGYudG9nZ2xlRWxlbWVudFswXS5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiByZW1vdmVEcm9wZG93bk1lbnUoKSB7XG4gICAgJGVsZW1lbnQuYXBwZW5kKHNlbGYuZHJvcGRvd25NZW51KTtcbiAgfVxuXG4gIHNjb3BlLiR3YXRjaCgnaXNPcGVuJywgZnVuY3Rpb24oaXNPcGVuLCB3YXNPcGVuKSB7XG4gICAgdmFyIGFwcGVuZFRvID0gbnVsbCxcbiAgICAgIGFwcGVuZFRvQm9keSA9IGZhbHNlO1xuXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kcm9wZG93bkFwcGVuZFRvKSkge1xuICAgICAgdmFyIGFwcGVuZFRvRWwgPSAkcGFyc2UoJGF0dHJzLmRyb3Bkb3duQXBwZW5kVG8pKHNjb3BlKTtcbiAgICAgIGlmIChhcHBlbmRUb0VsKSB7XG4gICAgICAgIGFwcGVuZFRvID0gYW5ndWxhci5lbGVtZW50KGFwcGVuZFRvRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZHJvcGRvd25BcHBlbmRUb0JvZHkpKSB7XG4gICAgICB2YXIgYXBwZW5kVG9Cb2R5VmFsdWUgPSAkcGFyc2UoJGF0dHJzLmRyb3Bkb3duQXBwZW5kVG9Cb2R5KShzY29wZSk7XG4gICAgICBpZiAoYXBwZW5kVG9Cb2R5VmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICAgIGFwcGVuZFRvQm9keSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFwcGVuZFRvQm9keSAmJiAhYXBwZW5kVG8pIHtcbiAgICAgIGFwcGVuZFRvID0gYm9keTtcbiAgICB9XG5cbiAgICBpZiAoYXBwZW5kVG8gJiYgc2VsZi5kcm9wZG93bk1lbnUpIHtcbiAgICAgIGlmIChpc09wZW4pIHtcbiAgICAgICAgYXBwZW5kVG8uYXBwZW5kKHNlbGYuZHJvcGRvd25NZW51KTtcbiAgICAgICAgJGVsZW1lbnQub24oJyRkZXN0cm95JywgcmVtb3ZlRHJvcGRvd25NZW51KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRlbGVtZW50Lm9mZignJGRlc3Ryb3knLCByZW1vdmVEcm9wZG93bk1lbnUpO1xuICAgICAgICByZW1vdmVEcm9wZG93bk1lbnUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXBwZW5kVG8gJiYgc2VsZi5kcm9wZG93bk1lbnUpIHtcbiAgICAgIHZhciBwb3MgPSAkcG9zaXRpb24ucG9zaXRpb25FbGVtZW50cygkZWxlbWVudCwgc2VsZi5kcm9wZG93bk1lbnUsICdib3R0b20tbGVmdCcsIHRydWUpLFxuICAgICAgICBjc3MsXG4gICAgICAgIHJpZ2h0YWxpZ24sXG4gICAgICAgIHNjcm9sbGJhclBhZGRpbmcsXG4gICAgICAgIHNjcm9sbGJhcldpZHRoID0gMDtcblxuICAgICAgY3NzID0ge1xuICAgICAgICB0b3A6IHBvcy50b3AgKyAncHgnLFxuICAgICAgICBkaXNwbGF5OiBpc09wZW4gPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICB9O1xuXG4gICAgICByaWdodGFsaWduID0gc2VsZi5kcm9wZG93bk1lbnUuaGFzQ2xhc3MoJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnKTtcbiAgICAgIGlmICghcmlnaHRhbGlnbikge1xuICAgICAgICBjc3MubGVmdCA9IHBvcy5sZWZ0ICsgJ3B4JztcbiAgICAgICAgY3NzLnJpZ2h0ID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3NzLmxlZnQgPSAnYXV0byc7XG4gICAgICAgIHNjcm9sbGJhclBhZGRpbmcgPSAkcG9zaXRpb24uc2Nyb2xsYmFyUGFkZGluZyhhcHBlbmRUbyk7XG5cbiAgICAgICAgaWYgKHNjcm9sbGJhclBhZGRpbmcuaGVpZ2h0T3ZlcmZsb3cgJiYgc2Nyb2xsYmFyUGFkZGluZy5zY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICAgIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsYmFyUGFkZGluZy5zY3JvbGxiYXJXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy5yaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gc2Nyb2xsYmFyV2lkdGggLVxuICAgICAgICAgIChwb3MubGVmdCArICRlbGVtZW50LnByb3AoJ29mZnNldFdpZHRoJykpICsgJ3B4JztcbiAgICAgIH1cblxuICAgICAgLy8gTmVlZCB0byBhZGp1c3Qgb3VyIHBvc2l0aW9uaW5nIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBhcHBlbmRUbyBjb250YWluZXJcbiAgICAgIC8vIGlmIGl0J3Mgbm90IHRoZSBib2R5IGVsZW1lbnRcbiAgICAgIGlmICghYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgIHZhciBhcHBlbmRPZmZzZXQgPSAkcG9zaXRpb24ub2Zmc2V0KGFwcGVuZFRvKTtcblxuICAgICAgICBjc3MudG9wID0gcG9zLnRvcCAtIGFwcGVuZE9mZnNldC50b3AgKyAncHgnO1xuXG4gICAgICAgIGlmICghcmlnaHRhbGlnbikge1xuICAgICAgICAgIGNzcy5sZWZ0ID0gcG9zLmxlZnQgLSBhcHBlbmRPZmZzZXQubGVmdCArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3NzLnJpZ2h0ID0gd2luZG93LmlubmVyV2lkdGggLVxuICAgICAgICAgICAgKHBvcy5sZWZ0IC0gYXBwZW5kT2Zmc2V0LmxlZnQgKyAkZWxlbWVudC5wcm9wKCdvZmZzZXRXaWR0aCcpKSArICdweCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5kcm9wZG93bk1lbnUuY3NzKGNzcyk7XG4gICAgfVxuXG4gICAgdmFyIG9wZW5Db250YWluZXIgPSBhcHBlbmRUbyA/IGFwcGVuZFRvIDogJGVsZW1lbnQ7XG4gICAgdmFyIGRyb3Bkb3duT3BlbkNsYXNzID0gYXBwZW5kVG8gPyBhcHBlbmRUb09wZW5DbGFzcyA6IG9wZW5DbGFzcztcbiAgICB2YXIgaGFzT3BlbkNsYXNzID0gb3BlbkNvbnRhaW5lci5oYXNDbGFzcyhkcm9wZG93bk9wZW5DbGFzcyk7XG4gICAgdmFyIGlzT25seU9wZW4gPSB1aWJEcm9wZG93blNlcnZpY2UuaXNPbmx5T3Blbigkc2NvcGUsIGFwcGVuZFRvKTtcblxuICAgIGlmIChoYXNPcGVuQ2xhc3MgPT09ICFpc09wZW4pIHtcbiAgICAgIHZhciB0b2dnbGVDbGFzcztcbiAgICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICB0b2dnbGVDbGFzcyA9ICFpc09ubHlPcGVuID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2dnbGVDbGFzcyA9IGlzT3BlbiA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnO1xuICAgICAgfVxuICAgICAgJGFuaW1hdGVbdG9nZ2xlQ2xhc3NdKG9wZW5Db250YWluZXIsIGRyb3Bkb3duT3BlbkNsYXNzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaXNPcGVuKSAmJiBpc09wZW4gIT09IHdhc09wZW4pIHtcbiAgICAgICAgICB0b2dnbGVJbnZva2VyKCRzY29wZSwgeyBvcGVuOiAhIWlzT3BlbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzT3Blbikge1xuICAgICAgaWYgKHNlbGYuZHJvcGRvd25NZW51VGVtcGxhdGVVcmwpIHtcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzZWxmLmRyb3Bkb3duTWVudVRlbXBsYXRlVXJsKS50aGVuKGZ1bmN0aW9uKHRwbENvbnRlbnQpIHtcbiAgICAgICAgICB0ZW1wbGF0ZVNjb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgICRjb21waWxlKHRwbENvbnRlbnQudHJpbSgpKSh0ZW1wbGF0ZVNjb3BlLCBmdW5jdGlvbihkcm9wZG93bkVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbCA9IGRyb3Bkb3duRWxlbWVudDtcbiAgICAgICAgICAgIHNlbGYuZHJvcGRvd25NZW51LnJlcGxhY2VXaXRoKG5ld0VsKTtcbiAgICAgICAgICAgIHNlbGYuZHJvcGRvd25NZW51ID0gbmV3RWw7XG4gICAgICAgICAgICAkZG9jdW1lbnQub24oJ2tleWRvd24nLCB1aWJEcm9wZG93blNlcnZpY2Uua2V5YmluZEZpbHRlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGRvY3VtZW50Lm9uKCdrZXlkb3duJywgdWliRHJvcGRvd25TZXJ2aWNlLmtleWJpbmRGaWx0ZXIpO1xuICAgICAgfVxuXG4gICAgICBzY29wZS5mb2N1c1RvZ2dsZUVsZW1lbnQoKTtcbiAgICAgIHVpYkRyb3Bkb3duU2VydmljZS5vcGVuKHNjb3BlLCAkZWxlbWVudCwgYXBwZW5kVG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1aWJEcm9wZG93blNlcnZpY2UuY2xvc2Uoc2NvcGUsICRlbGVtZW50LCBhcHBlbmRUbyk7XG4gICAgICBpZiAoc2VsZi5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCkge1xuICAgICAgICBpZiAodGVtcGxhdGVTY29wZSkge1xuICAgICAgICAgIHRlbXBsYXRlU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3RWwgPSBhbmd1bGFyLmVsZW1lbnQoJzx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj48L3VsPicpO1xuICAgICAgICBzZWxmLmRyb3Bkb3duTWVudS5yZXBsYWNlV2l0aChuZXdFbCk7XG4gICAgICAgIHNlbGYuZHJvcGRvd25NZW51ID0gbmV3RWw7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oc2V0SXNPcGVuKSkge1xuICAgICAgc2V0SXNPcGVuKCRzY29wZSwgaXNPcGVuKTtcbiAgICB9XG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRyb3Bkb3duJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogJ1VpYkRyb3Bkb3duQ29udHJvbGxlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBkcm9wZG93bkN0cmwpIHtcbiAgICAgIGRyb3Bkb3duQ3RybC5pbml0KCk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliRHJvcGRvd25NZW51JywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP151aWJEcm9wZG93bicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBkcm9wZG93bkN0cmwpIHtcbiAgICAgIGlmICghZHJvcGRvd25DdHJsIHx8IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmRyb3Bkb3duTmVzdGVkKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2Ryb3Bkb3duLW1lbnUnKTtcblxuICAgICAgdmFyIHRwbFVybCA9IGF0dHJzLnRlbXBsYXRlVXJsO1xuICAgICAgaWYgKHRwbFVybCkge1xuICAgICAgICBkcm9wZG93bkN0cmwuZHJvcGRvd25NZW51VGVtcGxhdGVVcmwgPSB0cGxVcmw7XG4gICAgICB9XG5cbiAgICAgIGlmICghZHJvcGRvd25DdHJsLmRyb3Bkb3duTWVudSkge1xuICAgICAgICBkcm9wZG93bkN0cmwuZHJvcGRvd25NZW51ID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJEcm9wZG93blRvZ2dsZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICc/XnVpYkRyb3Bkb3duJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGRyb3Bkb3duQ3RybCkge1xuICAgICAgaWYgKCFkcm9wZG93bkN0cmwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdkcm9wZG93bi10b2dnbGUnKTtcblxuICAgICAgZHJvcGRvd25DdHJsLnRvZ2dsZUVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICB2YXIgdG9nZ2xlRHJvcGRvd24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmICghZWxlbWVudC5oYXNDbGFzcygnZGlzYWJsZWQnKSAmJiAhYXR0cnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkcm9wZG93bkN0cmwudG9nZ2xlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgdG9nZ2xlRHJvcGRvd24pO1xuXG4gICAgICAvLyBXQUktQVJJQVxuICAgICAgZWxlbWVudC5hdHRyKHsgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLCAnYXJpYS1leHBhbmRlZCc6IGZhbHNlIH0pO1xuICAgICAgc2NvcGUuJHdhdGNoKGRyb3Bkb3duQ3RybC5pc09wZW4sIGZ1bmN0aW9uKGlzT3Blbikge1xuICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAhIWlzT3Blbik7XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50Lm9mZignY2xpY2snLCB0b2dnbGVEcm9wZG93bik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5zdGFja2VkTWFwJywgW10pXG4vKipcbiAqIEEgaGVscGVyLCBpbnRlcm5hbCBkYXRhIHN0cnVjdHVyZSB0aGF0IGFjdHMgYXMgYSBtYXAgYnV0IGFsc28gYWxsb3dzIGdldHRpbmcgLyByZW1vdmluZ1xuICogZWxlbWVudHMgaW4gdGhlIExJRk8gb3JkZXJcbiAqL1xuICAuZmFjdG9yeSgnJCRzdGFja2VkTWFwJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZU5ldzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFjayA9IFtdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWRkOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoa2V5ID09PSBzdGFja1tpXS5rZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2tbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2V5cy5wdXNoKHN0YWNrW2ldLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgdmFyIGlkeCA9IC0xO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoa2V5ID09PSBzdGFja1tpXS5rZXkpIHtcbiAgICAgICAgICAgICAgICBpZHggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhY2suc3BsaWNlKGlkeCwgMSlbMF07XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmVUb3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnBvcCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbGVuZ3RoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFjay5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5tb2RhbCcsIFsndWkuYm9vdHN0cmFwLm11bHRpTWFwJywgJ3VpLmJvb3RzdHJhcC5zdGFja2VkTWFwJywgJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuLyoqXG4gKiBQbHVnZ2FibGUgcmVzb2x2ZSBtZWNoYW5pc20gZm9yIHRoZSBtb2RhbCByZXNvbHZlIHJlc29sdXRpb25cbiAqIFN1cHBvcnRzIFVJIFJvdXRlcidzICRyZXNvbHZlIHNlcnZpY2VcbiAqL1xuICAucHJvdmlkZXIoJyR1aWJSZXNvbHZlJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc29sdmUgPSB0aGlzO1xuICAgIHRoaXMucmVzb2x2ZXIgPSBudWxsO1xuXG4gICAgdGhpcy5zZXRSZXNvbHZlciA9IGZ1bmN0aW9uKHJlc29sdmVyKSB7XG4gICAgICB0aGlzLnJlc29sdmVyID0gcmVzb2x2ZXI7XG4gICAgfTtcblxuICAgIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyRxJywgZnVuY3Rpb24oJGluamVjdG9yLCAkcSkge1xuICAgICAgdmFyIHJlc29sdmVyID0gcmVzb2x2ZS5yZXNvbHZlciA/ICRpbmplY3Rvci5nZXQocmVzb2x2ZS5yZXNvbHZlcikgOiBudWxsO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24oaW52b2NhYmxlcywgbG9jYWxzLCBwYXJlbnQsIHNlbGYpIHtcbiAgICAgICAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlci5yZXNvbHZlKGludm9jYWJsZXMsIGxvY2FscywgcGFyZW50LCBzZWxmKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcblxuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpbnZvY2FibGVzLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbih2YWx1ZSkgfHwgYW5ndWxhci5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKCRxLnJlc29sdmUoJGluamVjdG9yLmludm9rZSh2YWx1ZSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgkcS5yZXNvbHZlKCRpbmplY3Rvci5nZXQodmFsdWUpKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKCRxLnJlc29sdmUodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiAkcS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24ocmVzb2x2ZXMpIHtcbiAgICAgICAgICAgIHZhciByZXNvbHZlT2JqID0ge307XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZUl0ZXIgPSAwO1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGludm9jYWJsZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZU9ialtrZXldID0gcmVzb2x2ZXNbcmVzb2x2ZUl0ZXIrK107XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVPYmo7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfV07XG4gIH0pXG5cbi8qKlxuICogQSBoZWxwZXIgZGlyZWN0aXZlIGZvciB0aGUgJG1vZGFsIHNlcnZpY2UuIEl0IGNyZWF0ZXMgYSBiYWNrZHJvcCBlbGVtZW50LlxuICovXG4gIC5kaXJlY3RpdmUoJ3VpYk1vZGFsQmFja2Ryb3AnLCBbJyRhbmltYXRlJywgJyRpbmplY3RvcicsICckdWliTW9kYWxTdGFjaycsXG4gIGZ1bmN0aW9uKCRhbmltYXRlLCAkaW5qZWN0b3IsICRtb2RhbFN0YWNrKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgIHRFbGVtZW50LmFkZENsYXNzKHRBdHRycy5iYWNrZHJvcENsYXNzKTtcbiAgICAgICAgcmV0dXJuIGxpbmtGbjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgaWYgKGF0dHJzLm1vZGFsSW5DbGFzcykge1xuICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBhdHRycy5tb2RhbEluQ2xhc3MpO1xuXG4gICAgICAgIHNjb3BlLiRvbigkbW9kYWxTdGFjay5OT1dfQ0xPU0lOR19FVkVOVCwgZnVuY3Rpb24oZSwgc2V0SXNBc3luYykge1xuICAgICAgICAgIHZhciBkb25lID0gc2V0SXNBc3luYygpO1xuICAgICAgICAgIGlmIChzY29wZS5tb2RhbE9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBhdHRycy5tb2RhbEluQ2xhc3MpLnRoZW4oZG9uZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV0pXG5cbiAgLmRpcmVjdGl2ZSgndWliTW9kYWxXaW5kb3cnLCBbJyR1aWJNb2RhbFN0YWNrJywgJyRxJywgJyRhbmltYXRlQ3NzJywgJyRkb2N1bWVudCcsXG4gIGZ1bmN0aW9uKCRtb2RhbFN0YWNrLCAkcSwgJGFuaW1hdGVDc3MsICRkb2N1bWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZToge1xuICAgICAgICBpbmRleDogJ0AnXG4gICAgICB9LFxuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWwnO1xuICAgICAgfSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKGF0dHJzLndpbmRvd1RvcENsYXNzIHx8ICcnKTtcbiAgICAgICAgc2NvcGUuc2l6ZSA9IGF0dHJzLnNpemU7XG5cbiAgICAgICAgc2NvcGUuY2xvc2UgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICB2YXIgbW9kYWwgPSAkbW9kYWxTdGFjay5nZXRUb3AoKTtcbiAgICAgICAgICBpZiAobW9kYWwgJiYgbW9kYWwudmFsdWUuYmFja2Ryb3AgJiZcbiAgICAgICAgICAgIG1vZGFsLnZhbHVlLmJhY2tkcm9wICE9PSAnc3RhdGljJyAmJlxuICAgICAgICAgICAgZXZ0LnRhcmdldCA9PT0gZXZ0LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgJG1vZGFsU3RhY2suZGlzbWlzcyhtb2RhbC5rZXksICdiYWNrZHJvcCBjbGljaycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBtb3ZlZCBmcm9tIHRlbXBsYXRlIHRvIGZpeCBpc3N1ZSAjMjI4MFxuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIHNjb3BlLmNsb3NlKTtcblxuICAgICAgICAvLyBUaGlzIHByb3BlcnR5IGlzIG9ubHkgYWRkZWQgdG8gdGhlIHNjb3BlIGZvciB0aGUgcHVycG9zZSBvZiBkZXRlY3Rpbmcgd2hlbiB0aGlzIGRpcmVjdGl2ZSBpcyByZW5kZXJlZC5cbiAgICAgICAgLy8gV2UgY2FuIGRldGVjdCB0aGF0IGJ5IHVzaW5nIHRoaXMgcHJvcGVydHkgaW4gdGhlIHRlbXBsYXRlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRpcmVjdGl2ZSBhbmQgdGhlbiB1c2VcbiAgICAgICAgLy8ge0BsaW5rIEF0dHJpYnV0ZSMkb2JzZXJ2ZX0gb24gaXQuIEZvciBtb3JlIGRldGFpbHMgcGxlYXNlIHNlZSB7QGxpbmsgVGFibGVDb2x1bW5SZXNpemV9LlxuICAgICAgICBzY29wZS4kaXNSZW5kZXJlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gRGVmZXJyZWQgb2JqZWN0IHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoaXMgbW9kYWwgaXMgcmVuZGVyZWQuXG4gICAgICAgIHZhciBtb2RhbFJlbmRlckRlZmVyT2JqID0gJHEuZGVmZXIoKTtcbiAgICAgICAgLy8gUmVzb2x2ZSByZW5kZXIgcHJvbWlzZSBwb3N0LWRpZ2VzdFxuICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbW9kYWxSZW5kZXJEZWZlck9iai5yZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1vZGFsUmVuZGVyRGVmZXJPYmoucHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhbmltYXRpb25Qcm9taXNlID0gbnVsbDtcblxuICAgICAgICAgIGlmIChhdHRycy5tb2RhbEluQ2xhc3MpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblByb21pc2UgPSAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgIGFkZENsYXNzOiBhdHRycy5tb2RhbEluQ2xhc3NcbiAgICAgICAgICAgIH0pLnN0YXJ0KCk7XG5cbiAgICAgICAgICAgIHNjb3BlLiRvbigkbW9kYWxTdGFjay5OT1dfQ0xPU0lOR19FVkVOVCwgZnVuY3Rpb24oZSwgc2V0SXNBc3luYykge1xuICAgICAgICAgICAgICB2YXIgZG9uZSA9IHNldElzQXN5bmMoKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBhdHRycy5tb2RhbEluQ2xhc3NcbiAgICAgICAgICAgICAgfSkuc3RhcnQoKS50aGVuKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgICAkcS53aGVuKGFuaW1hdGlvblByb21pc2UpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBOb3RpZnkge0BsaW5rICRtb2RhbFN0YWNrfSB0aGF0IG1vZGFsIGlzIHJlbmRlcmVkLlxuICAgICAgICAgICAgdmFyIG1vZGFsID0gJG1vZGFsU3RhY2suZ2V0VG9wKCk7XG4gICAgICAgICAgICBpZiAobW9kYWwpIHtcbiAgICAgICAgICAgICAgJG1vZGFsU3RhY2subW9kYWxSZW5kZXJlZChtb2RhbC5rZXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHNvbWV0aGluZyB3aXRoaW4gdGhlIGZyZXNobHktb3BlbmVkIG1vZGFsIGFscmVhZHkgaGFzIGZvY3VzIChwZXJoYXBzIHZpYSBhXG4gICAgICAgICAgICAgKiBkaXJlY3RpdmUgdGhhdCBjYXVzZXMgZm9jdXMpIHRoZW4gdGhlcmUncyBubyBuZWVkIHRvIHRyeSB0byBmb2N1cyBhbnl0aGluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCEoJGRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgJiYgZWxlbWVudFswXS5jb250YWlucygkZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCkpKSB7XG4gICAgICAgICAgICAgIHZhciBpbnB1dFdpdGhBdXRvZm9jdXMgPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ1thdXRvZm9jdXNdJyk7XG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBBdXRvLWZvY3VzaW5nIG9mIGEgZnJlc2hseS1vcGVuZWQgbW9kYWwgZWxlbWVudCBjYXVzZXMgYW55IGNoaWxkIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAqIHdpdGggdGhlIGF1dG9mb2N1cyBhdHRyaWJ1dGUgdG8gbG9zZSBmb2N1cy4gVGhpcyBpcyBhbiBpc3N1ZSBvbiB0b3VjaFxuICAgICAgICAgICAgICAgKiBiYXNlZCBkZXZpY2VzIHdoaWNoIHdpbGwgc2hvdyBhbmQgdGhlbiBoaWRlIHRoZSBvbnNjcmVlbiBrZXlib2FyZC5cbiAgICAgICAgICAgICAgICogQXR0ZW1wdHMgdG8gcmVmb2N1cyB0aGUgYXV0b2ZvY3VzIGVsZW1lbnQgdmlhIEphdmFTY3JpcHQgd2lsbCBub3QgcmVvcGVuXG4gICAgICAgICAgICAgICAqIHRoZSBvbnNjcmVlbiBrZXlib2FyZC4gRml4ZWQgYnkgdXBkYXRlZCB0aGUgZm9jdXNpbmcgbG9naWMgdG8gb25seSBhdXRvZm9jdXNcbiAgICAgICAgICAgICAgICogdGhlIG1vZGFsIGVsZW1lbnQgaWYgdGhlIG1vZGFsIGRvZXMgbm90IGNvbnRhaW4gYW4gYXV0b2ZvY3VzIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBpZiAoaW5wdXRXaXRoQXV0b2ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRXaXRoQXV0b2ZvY3VzLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5kaXJlY3RpdmUoJ3VpYk1vZGFsQW5pbWF0aW9uQ2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgICBpZiAodEF0dHJzLm1vZGFsQW5pbWF0aW9uKSB7XG4gICAgICAgICAgdEVsZW1lbnQuYWRkQ2xhc3ModEF0dHJzLnVpYk1vZGFsQW5pbWF0aW9uQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSlcblxuICAuZGlyZWN0aXZlKCd1aWJNb2RhbFRyYW5zY2x1ZGUnLCBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlKSB7XG4gICAgICAgIHRyYW5zY2x1ZGUoc2NvcGUuJHBhcmVudCwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICBlbGVtZW50LmVtcHR5KCk7XG4gICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XSlcblxuICAuZmFjdG9yeSgnJHVpYk1vZGFsU3RhY2snLCBbJyRhbmltYXRlJywgJyRhbmltYXRlQ3NzJywgJyRkb2N1bWVudCcsXG4gICAgJyRjb21waWxlJywgJyRyb290U2NvcGUnLCAnJHEnLCAnJCRtdWx0aU1hcCcsICckJHN0YWNrZWRNYXAnLCAnJHVpYlBvc2l0aW9uJyxcbiAgICBmdW5jdGlvbigkYW5pbWF0ZSwgJGFuaW1hdGVDc3MsICRkb2N1bWVudCwgJGNvbXBpbGUsICRyb290U2NvcGUsICRxLCAkJG11bHRpTWFwLCAkJHN0YWNrZWRNYXAsICR1aWJQb3NpdGlvbikge1xuICAgICAgdmFyIE9QRU5FRF9NT0RBTF9DTEFTUyA9ICdtb2RhbC1vcGVuJztcblxuICAgICAgdmFyIGJhY2tkcm9wRG9tRWwsIGJhY2tkcm9wU2NvcGU7XG4gICAgICB2YXIgb3BlbmVkV2luZG93cyA9ICQkc3RhY2tlZE1hcC5jcmVhdGVOZXcoKTtcbiAgICAgIHZhciBvcGVuZWRDbGFzc2VzID0gJCRtdWx0aU1hcC5jcmVhdGVOZXcoKTtcbiAgICAgIHZhciAkbW9kYWxTdGFjayA9IHtcbiAgICAgICAgTk9XX0NMT1NJTkdfRVZFTlQ6ICdtb2RhbC5zdGFjay5ub3ctY2xvc2luZydcbiAgICAgIH07XG4gICAgICB2YXIgdG9wTW9kYWxJbmRleCA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNUb3BPcGVuZWRNb2RhbCA9IG51bGw7XG4gICAgICB2YXIgQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUgPSAnZGF0YS1ib290c3RyYXAtbW9kYWwtYXJpYS1oaWRkZW4tY291bnQnO1xuXG4gICAgICAvL01vZGFsIGZvY3VzIGJlaGF2aW9yXG4gICAgICB2YXIgdGFiYmFibGVTZWxlY3RvciA9ICdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD1cXCctMVxcJ10pLCAnICtcbiAgICAgICAgJ2J1dHRvbjpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD1cXCctMVxcJ10pLHNlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD1cXCctMVxcJ10pLCB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD1cXCctMVxcJ10pLCAnICtcbiAgICAgICAgJ2lmcmFtZSwgb2JqZWN0LCBlbWJlZCwgKlt0YWJpbmRleF06bm90KFt0YWJpbmRleD1cXCctMVxcJ10pLCAqW2NvbnRlbnRlZGl0YWJsZT10cnVlXSc7XG4gICAgICB2YXIgc2Nyb2xsYmFyUGFkZGluZztcbiAgICAgIHZhciBTTkFLRV9DQVNFX1JFR0VYUCA9IC9bQS1aXS9nO1xuXG4gICAgICAvLyBUT0RPOiBleHRyYWN0IGludG8gY29tbW9uIGRlcGVuZGVuY3kgd2l0aCB0b29sdGlwXG4gICAgICBmdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICctJztcbiAgICAgICAgcmV0dXJuIG5hbWUucmVwbGFjZShTTkFLRV9DQVNFX1JFR0VYUCwgZnVuY3Rpb24obGV0dGVyLCBwb3MpIHtcbiAgICAgICAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaXNWaXNpYmxlKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuICEhKGVsZW1lbnQub2Zmc2V0V2lkdGggfHxcbiAgICAgICAgICBlbGVtZW50Lm9mZnNldEhlaWdodCB8fFxuICAgICAgICAgIGVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBiYWNrZHJvcEluZGV4KCkge1xuICAgICAgICB2YXIgdG9wQmFja2Ryb3BJbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3BlbmVkID0gb3BlbmVkV2luZG93cy5rZXlzKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3BlbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG9wZW5lZFdpbmRvd3MuZ2V0KG9wZW5lZFtpXSkudmFsdWUuYmFja2Ryb3ApIHtcbiAgICAgICAgICAgIHRvcEJhY2tkcm9wSW5kZXggPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGFueSBiYWNrZHJvcCBleGlzdCwgZW5zdXJlIHRoYXQgaXQncyBpbmRleCBpcyBhbHdheXNcbiAgICAgICAgLy8gcmlnaHQgYmVsb3cgdGhlIHRvcCBtb2RhbFxuICAgICAgICBpZiAodG9wQmFja2Ryb3BJbmRleCA+IC0xICYmIHRvcEJhY2tkcm9wSW5kZXggPCB0b3BNb2RhbEluZGV4KSB7XG4gICAgICAgICAgdG9wQmFja2Ryb3BJbmRleCA9IHRvcE1vZGFsSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvcEJhY2tkcm9wSW5kZXg7XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJHdhdGNoKGJhY2tkcm9wSW5kZXgsIGZ1bmN0aW9uKG5ld0JhY2tkcm9wSW5kZXgpIHtcbiAgICAgICAgaWYgKGJhY2tkcm9wU2NvcGUpIHtcbiAgICAgICAgICBiYWNrZHJvcFNjb3BlLmluZGV4ID0gbmV3QmFja2Ryb3BJbmRleDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZU1vZGFsV2luZG93KG1vZGFsSW5zdGFuY2UsIGVsZW1lbnRUb1JlY2VpdmVGb2N1cykge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKS52YWx1ZTtcbiAgICAgICAgdmFyIGFwcGVuZFRvRWxlbWVudCA9IG1vZGFsV2luZG93LmFwcGVuZFRvO1xuXG4gICAgICAgIC8vY2xlYW4gdXAgdGhlIHN0YWNrXG4gICAgICAgIG9wZW5lZFdpbmRvd3MucmVtb3ZlKG1vZGFsSW5zdGFuY2UpO1xuICAgICAgICBwcmV2aW91c1RvcE9wZW5lZE1vZGFsID0gb3BlbmVkV2luZG93cy50b3AoKTtcbiAgICAgICAgaWYgKHByZXZpb3VzVG9wT3BlbmVkTW9kYWwpIHtcbiAgICAgICAgICB0b3BNb2RhbEluZGV4ID0gcGFyc2VJbnQocHJldmlvdXNUb3BPcGVuZWRNb2RhbC52YWx1ZS5tb2RhbERvbUVsLmF0dHIoJ2luZGV4JyksIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbW92ZUFmdGVyQW5pbWF0ZShtb2RhbFdpbmRvdy5tb2RhbERvbUVsLCBtb2RhbFdpbmRvdy5tb2RhbFNjb3BlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgbW9kYWxCb2R5Q2xhc3MgPSBtb2RhbFdpbmRvdy5vcGVuZWRDbGFzcyB8fCBPUEVORURfTU9EQUxfQ0xBU1M7XG4gICAgICAgICAgb3BlbmVkQ2xhc3Nlcy5yZW1vdmUobW9kYWxCb2R5Q2xhc3MsIG1vZGFsSW5zdGFuY2UpO1xuICAgICAgICAgIHZhciBhcmVBbnlPcGVuID0gb3BlbmVkQ2xhc3Nlcy5oYXNLZXkobW9kYWxCb2R5Q2xhc3MpO1xuICAgICAgICAgIGFwcGVuZFRvRWxlbWVudC50b2dnbGVDbGFzcyhtb2RhbEJvZHlDbGFzcywgYXJlQW55T3Blbik7XG4gICAgICAgICAgaWYgKCFhcmVBbnlPcGVuICYmIHNjcm9sbGJhclBhZGRpbmcgJiYgc2Nyb2xsYmFyUGFkZGluZy5oZWlnaHRPdmVyZmxvdyAmJiBzY3JvbGxiYXJQYWRkaW5nLnNjcm9sbGJhcldpZHRoKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsYmFyUGFkZGluZy5vcmlnaW5hbFJpZ2h0KSB7XG4gICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudC5jc3Moe3BhZGRpbmdSaWdodDogc2Nyb2xsYmFyUGFkZGluZy5vcmlnaW5hbFJpZ2h0ICsgJ3B4J30pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50LmNzcyh7cGFkZGluZ1JpZ2h0OiAnJ30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Nyb2xsYmFyUGFkZGluZyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRvZ2dsZVRvcFdpbmRvd0NsYXNzKHRydWUpO1xuICAgICAgICB9LCBtb2RhbFdpbmRvdy5jbG9zZWREZWZlcnJlZCk7XG4gICAgICAgIGNoZWNrUmVtb3ZlQmFja2Ryb3AoKTtcblxuICAgICAgICAvL21vdmUgZm9jdXMgdG8gc3BlY2lmaWVkIGVsZW1lbnQgaWYgYXZhaWxhYmxlLCBvciBlbHNlIHRvIGJvZHlcbiAgICAgICAgaWYgKGVsZW1lbnRUb1JlY2VpdmVGb2N1cyAmJiBlbGVtZW50VG9SZWNlaXZlRm9jdXMuZm9jdXMpIHtcbiAgICAgICAgICBlbGVtZW50VG9SZWNlaXZlRm9jdXMuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcHBlbmRUb0VsZW1lbnQuZm9jdXMpIHtcbiAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgb3IgcmVtb3ZlIFwid2luZG93VG9wQ2xhc3NcIiBmcm9tIHRoZSB0b3Agd2luZG93IGluIHRoZSBzdGFja1xuICAgICAgZnVuY3Rpb24gdG9nZ2xlVG9wV2luZG93Q2xhc3ModG9nZ2xlU3dpdGNoKSB7XG4gICAgICAgIHZhciBtb2RhbFdpbmRvdztcblxuICAgICAgICBpZiAob3BlbmVkV2luZG93cy5sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgICBtb2RhbFdpbmRvdyA9IG9wZW5lZFdpbmRvd3MudG9wKCkudmFsdWU7XG4gICAgICAgICAgbW9kYWxXaW5kb3cubW9kYWxEb21FbC50b2dnbGVDbGFzcyhtb2RhbFdpbmRvdy53aW5kb3dUb3BDbGFzcyB8fCAnJywgdG9nZ2xlU3dpdGNoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjaGVja1JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgICAvL3JlbW92ZSBiYWNrZHJvcCBpZiBubyBsb25nZXIgbmVlZGVkXG4gICAgICAgIGlmIChiYWNrZHJvcERvbUVsICYmIGJhY2tkcm9wSW5kZXgoKSA9PT0gLTEpIHtcbiAgICAgICAgICB2YXIgYmFja2Ryb3BTY29wZVJlZiA9IGJhY2tkcm9wU2NvcGU7XG4gICAgICAgICAgcmVtb3ZlQWZ0ZXJBbmltYXRlKGJhY2tkcm9wRG9tRWwsIGJhY2tkcm9wU2NvcGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYmFja2Ryb3BTY29wZVJlZiA9IG51bGw7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYmFja2Ryb3BEb21FbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBiYWNrZHJvcFNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZUFmdGVyQW5pbWF0ZShkb21FbCwgc2NvcGUsIGRvbmUsIGNsb3NlZERlZmVycmVkKSB7XG4gICAgICAgIHZhciBhc3luY0RlZmVycmVkO1xuICAgICAgICB2YXIgYXN5bmNQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdmFyIHNldElzQXN5bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIWFzeW5jRGVmZXJyZWQpIHtcbiAgICAgICAgICAgIGFzeW5jRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgYXN5bmNQcm9taXNlID0gYXN5bmNEZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBhc3luY0RvbmUoKSB7XG4gICAgICAgICAgICBhc3luY0RlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBzY29wZS4kYnJvYWRjYXN0KCRtb2RhbFN0YWNrLk5PV19DTE9TSU5HX0VWRU5ULCBzZXRJc0FzeW5jKTtcblxuICAgICAgICAvLyBOb3RlIHRoYXQgaXQncyBpbnRlbnRpb25hbCB0aGF0IGFzeW5jUHJvbWlzZSBtaWdodCBiZSBudWxsLlxuICAgICAgICAvLyBUaGF0J3Mgd2hlbiBzZXRJc0FzeW5jIGhhcyBub3QgYmVlbiBjYWxsZWQgZHVyaW5nIHRoZVxuICAgICAgICAvLyBOT1dfQ0xPU0lOR19FVkVOVCBicm9hZGNhc3QuXG4gICAgICAgIHJldHVybiAkcS53aGVuKGFzeW5jUHJvbWlzZSkudGhlbihhZnRlckFuaW1hdGluZyk7XG5cbiAgICAgICAgZnVuY3Rpb24gYWZ0ZXJBbmltYXRpbmcoKSB7XG4gICAgICAgICAgaWYgKGFmdGVyQW5pbWF0aW5nLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWZ0ZXJBbmltYXRpbmcuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShkb21FbCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9tRWwucmVtb3ZlKCk7XG4gICAgICAgICAgICBpZiAoY2xvc2VkRGVmZXJyZWQpIHtcbiAgICAgICAgICAgICAgY2xvc2VkRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkZG9jdW1lbnQub24oJ2tleWRvd24nLCBrZXlkb3duTGlzdGVuZXIpO1xuXG4gICAgICAkcm9vdFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJGRvY3VtZW50Lm9mZigna2V5ZG93bicsIGtleWRvd25MaXN0ZW5lcik7XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24ga2V5ZG93bkxpc3RlbmVyKGV2dCkge1xuICAgICAgICBpZiAoZXZ0LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIGV2dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb2RhbCA9IG9wZW5lZFdpbmRvd3MudG9wKCk7XG4gICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgIHN3aXRjaCAoZXZ0LndoaWNoKSB7XG4gICAgICAgICAgICBjYXNlIDI3OiB7XG4gICAgICAgICAgICAgIGlmIChtb2RhbC52YWx1ZS5rZXlib2FyZCkge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgJG1vZGFsU3RhY2suZGlzbWlzcyhtb2RhbC5rZXksICdlc2NhcGUga2V5IHByZXNzJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDk6IHtcbiAgICAgICAgICAgICAgdmFyIGxpc3QgPSAkbW9kYWxTdGFjay5sb2FkRm9jdXNFbGVtZW50TGlzdChtb2RhbCk7XG4gICAgICAgICAgICAgIHZhciBmb2N1c0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGV2dC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIGlmICgkbW9kYWxTdGFjay5pc0ZvY3VzSW5GaXJzdEl0ZW0oZXZ0LCBsaXN0KSB8fCAkbW9kYWxTdGFjay5pc01vZGFsRm9jdXNlZChldnQsIG1vZGFsKSkge1xuICAgICAgICAgICAgICAgICAgZm9jdXNDaGFuZ2VkID0gJG1vZGFsU3RhY2suZm9jdXNMYXN0Rm9jdXNhYmxlRWxlbWVudChsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCRtb2RhbFN0YWNrLmlzRm9jdXNJbkxhc3RJdGVtKGV2dCwgbGlzdCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvY3VzQ2hhbmdlZCA9ICRtb2RhbFN0YWNrLmZvY3VzRmlyc3RGb2N1c2FibGVFbGVtZW50KGxpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmb2N1c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJG1vZGFsU3RhY2sub3BlbiA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UsIG1vZGFsKSB7XG4gICAgICAgIHZhciBtb2RhbE9wZW5lciA9ICRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50LFxuICAgICAgICAgIG1vZGFsQm9keUNsYXNzID0gbW9kYWwub3BlbmVkQ2xhc3MgfHwgT1BFTkVEX01PREFMX0NMQVNTO1xuXG4gICAgICAgIHRvZ2dsZVRvcFdpbmRvd0NsYXNzKGZhbHNlKTtcblxuICAgICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCB0b3AgZmlyc3QsIHRvIGRldGVybWluZSB3aGF0IGluZGV4IHdlIG91Z2h0IHRvIHVzZVxuICAgICAgICAvLyBmb3IgdGhlIGN1cnJlbnQgdG9wIG1vZGFsXG4gICAgICAgIHByZXZpb3VzVG9wT3BlbmVkTW9kYWwgPSBvcGVuZWRXaW5kb3dzLnRvcCgpO1xuXG4gICAgICAgIG9wZW5lZFdpbmRvd3MuYWRkKG1vZGFsSW5zdGFuY2UsIHtcbiAgICAgICAgICBkZWZlcnJlZDogbW9kYWwuZGVmZXJyZWQsXG4gICAgICAgICAgcmVuZGVyRGVmZXJyZWQ6IG1vZGFsLnJlbmRlckRlZmVycmVkLFxuICAgICAgICAgIGNsb3NlZERlZmVycmVkOiBtb2RhbC5jbG9zZWREZWZlcnJlZCxcbiAgICAgICAgICBtb2RhbFNjb3BlOiBtb2RhbC5zY29wZSxcbiAgICAgICAgICBiYWNrZHJvcDogbW9kYWwuYmFja2Ryb3AsXG4gICAgICAgICAga2V5Ym9hcmQ6IG1vZGFsLmtleWJvYXJkLFxuICAgICAgICAgIG9wZW5lZENsYXNzOiBtb2RhbC5vcGVuZWRDbGFzcyxcbiAgICAgICAgICB3aW5kb3dUb3BDbGFzczogbW9kYWwud2luZG93VG9wQ2xhc3MsXG4gICAgICAgICAgYW5pbWF0aW9uOiBtb2RhbC5hbmltYXRpb24sXG4gICAgICAgICAgYXBwZW5kVG86IG1vZGFsLmFwcGVuZFRvXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9wZW5lZENsYXNzZXMucHV0KG1vZGFsQm9keUNsYXNzLCBtb2RhbEluc3RhbmNlKTtcblxuICAgICAgICB2YXIgYXBwZW5kVG9FbGVtZW50ID0gbW9kYWwuYXBwZW5kVG8sXG4gICAgICAgICAgICBjdXJyQmFja2Ryb3BJbmRleCA9IGJhY2tkcm9wSW5kZXgoKTtcblxuICAgICAgICBpZiAoY3VyckJhY2tkcm9wSW5kZXggPj0gMCAmJiAhYmFja2Ryb3BEb21FbCkge1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUgPSAkcm9vdFNjb3BlLiRuZXcodHJ1ZSk7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZS5tb2RhbE9wdGlvbnMgPSBtb2RhbDtcbiAgICAgICAgICBiYWNrZHJvcFNjb3BlLmluZGV4ID0gY3VyckJhY2tkcm9wSW5kZXg7XG4gICAgICAgICAgYmFja2Ryb3BEb21FbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiB1aWItbW9kYWwtYmFja2Ryb3A9XCJtb2RhbC1iYWNrZHJvcFwiPjwvZGl2PicpO1xuICAgICAgICAgIGJhY2tkcm9wRG9tRWwuYXR0cih7XG4gICAgICAgICAgICAnY2xhc3MnOiAnbW9kYWwtYmFja2Ryb3AnLFxuICAgICAgICAgICAgJ25nLXN0eWxlJzogJ3tcXCd6LWluZGV4XFwnOiAxMDQwICsgKGluZGV4ICYmIDEgfHwgMCkgKyBpbmRleCoxMH0nLFxuICAgICAgICAgICAgJ3VpYi1tb2RhbC1hbmltYXRpb24tY2xhc3MnOiAnZmFkZScsXG4gICAgICAgICAgICAnbW9kYWwtaW4tY2xhc3MnOiAnaW4nXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1vZGFsLmJhY2tkcm9wQ2xhc3MpIHtcbiAgICAgICAgICAgIGJhY2tkcm9wRG9tRWwuYWRkQ2xhc3MobW9kYWwuYmFja2Ryb3BDbGFzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG1vZGFsLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgYmFja2Ryb3BEb21FbC5hdHRyKCdtb2RhbC1hbmltYXRpb24nLCAndHJ1ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkY29tcGlsZShiYWNrZHJvcERvbUVsKShiYWNrZHJvcFNjb3BlKTtcbiAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihiYWNrZHJvcERvbUVsLCBhcHBlbmRUb0VsZW1lbnQpO1xuICAgICAgICAgIGlmICgkdWliUG9zaXRpb24uaXNTY3JvbGxhYmxlKGFwcGVuZFRvRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHNjcm9sbGJhclBhZGRpbmcgPSAkdWliUG9zaXRpb24uc2Nyb2xsYmFyUGFkZGluZyhhcHBlbmRUb0VsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHNjcm9sbGJhclBhZGRpbmcuaGVpZ2h0T3ZlcmZsb3cgJiYgc2Nyb2xsYmFyUGFkZGluZy5zY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQuY3NzKHtwYWRkaW5nUmlnaHQ6IHNjcm9sbGJhclBhZGRpbmcucmlnaHQgKyAncHgnfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRlbnQ7XG4gICAgICAgIGlmIChtb2RhbC5jb21wb25lbnQpIHtcbiAgICAgICAgICBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzbmFrZV9jYXNlKG1vZGFsLmNvbXBvbmVudC5uYW1lKSk7XG4gICAgICAgICAgY29udGVudCA9IGFuZ3VsYXIuZWxlbWVudChjb250ZW50KTtcbiAgICAgICAgICBjb250ZW50LmF0dHIoe1xuICAgICAgICAgICAgcmVzb2x2ZTogJyRyZXNvbHZlJyxcbiAgICAgICAgICAgICdtb2RhbC1pbnN0YW5jZSc6ICckdWliTW9kYWxJbnN0YW5jZScsXG4gICAgICAgICAgICBjbG9zZTogJyRjbG9zZSgkdmFsdWUpJyxcbiAgICAgICAgICAgIGRpc21pc3M6ICckZGlzbWlzcygkdmFsdWUpJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRlbnQgPSBtb2RhbC5jb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSB0b3AgbW9kYWwgaW5kZXggYmFzZWQgb24gdGhlIGluZGV4IG9mIHRoZSBwcmV2aW91cyB0b3AgbW9kYWxcbiAgICAgICAgdG9wTW9kYWxJbmRleCA9IHByZXZpb3VzVG9wT3BlbmVkTW9kYWwgPyBwYXJzZUludChwcmV2aW91c1RvcE9wZW5lZE1vZGFsLnZhbHVlLm1vZGFsRG9tRWwuYXR0cignaW5kZXgnKSwgMTApICsgMSA6IDA7XG4gICAgICAgIHZhciBhbmd1bGFyRG9tRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgdWliLW1vZGFsLXdpbmRvdz1cIm1vZGFsLXdpbmRvd1wiPjwvZGl2PicpO1xuICAgICAgICBhbmd1bGFyRG9tRWwuYXR0cih7XG4gICAgICAgICAgJ2NsYXNzJzogJ21vZGFsJyxcbiAgICAgICAgICAndGVtcGxhdGUtdXJsJzogbW9kYWwud2luZG93VGVtcGxhdGVVcmwsXG4gICAgICAgICAgJ3dpbmRvdy10b3AtY2xhc3MnOiBtb2RhbC53aW5kb3dUb3BDbGFzcyxcbiAgICAgICAgICAncm9sZSc6ICdkaWFsb2cnLFxuICAgICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBtb2RhbC5hcmlhTGFiZWxsZWRCeSxcbiAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IG1vZGFsLmFyaWFEZXNjcmliZWRCeSxcbiAgICAgICAgICAnc2l6ZSc6IG1vZGFsLnNpemUsXG4gICAgICAgICAgJ2luZGV4JzogdG9wTW9kYWxJbmRleCxcbiAgICAgICAgICAnYW5pbWF0ZSc6ICdhbmltYXRlJyxcbiAgICAgICAgICAnbmctc3R5bGUnOiAne1xcJ3otaW5kZXhcXCc6IDEwNTAgKyAkJHRvcE1vZGFsSW5kZXgqMTAsIGRpc3BsYXk6IFxcJ2Jsb2NrXFwnfScsXG4gICAgICAgICAgJ3RhYmluZGV4JzogLTEsXG4gICAgICAgICAgJ3VpYi1tb2RhbC1hbmltYXRpb24tY2xhc3MnOiAnZmFkZScsXG4gICAgICAgICAgJ21vZGFsLWluLWNsYXNzJzogJ2luJ1xuICAgICAgICB9KS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgIGlmIChtb2RhbC53aW5kb3dDbGFzcykge1xuICAgICAgICAgIGFuZ3VsYXJEb21FbC5hZGRDbGFzcyhtb2RhbC53aW5kb3dDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kYWwuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgYW5ndWxhckRvbUVsLmF0dHIoJ21vZGFsLWFuaW1hdGlvbicsICd0cnVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBhcHBlbmRUb0VsZW1lbnQuYWRkQ2xhc3MobW9kYWxCb2R5Q2xhc3MpO1xuICAgICAgICBpZiAobW9kYWwuc2NvcGUpIHtcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGV4cGxpY2l0bHkgYWRkIHRoZSBtb2RhbCBpbmRleCB0byB0aGUgbW9kYWwgc2NvcGVcbiAgICAgICAgICAvLyBiZWNhdXNlIGl0IGlzIG5lZWRlZCBieSBuZ1N0eWxlIHRvIGNvbXB1dGUgdGhlIHpJbmRleCBwcm9wZXJ0eS5cbiAgICAgICAgICBtb2RhbC5zY29wZS4kJHRvcE1vZGFsSW5kZXggPSB0b3BNb2RhbEluZGV4O1xuICAgICAgICB9XG4gICAgICAgICRhbmltYXRlLmVudGVyKCRjb21waWxlKGFuZ3VsYXJEb21FbCkobW9kYWwuc2NvcGUpLCBhcHBlbmRUb0VsZW1lbnQpO1xuXG4gICAgICAgIG9wZW5lZFdpbmRvd3MudG9wKCkudmFsdWUubW9kYWxEb21FbCA9IGFuZ3VsYXJEb21FbDtcbiAgICAgICAgb3BlbmVkV2luZG93cy50b3AoKS52YWx1ZS5tb2RhbE9wZW5lciA9IG1vZGFsT3BlbmVyO1xuXG4gICAgICAgIGFwcGx5QXJpYUhpZGRlbihhbmd1bGFyRG9tRWwpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5QXJpYUhpZGRlbihlbCkge1xuICAgICAgICAgIGlmICghZWwgfHwgZWxbMF0udGFnTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZ2V0U2libGluZ3MoZWwpLmZvckVhY2goZnVuY3Rpb24oc2libGluZykge1xuICAgICAgICAgICAgdmFyIGVsZW1Jc0FscmVhZHlIaWRkZW4gPSBzaWJsaW5nLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnLFxuICAgICAgICAgICAgICBhcmlhSGlkZGVuQ291bnQgPSBwYXJzZUludChzaWJsaW5nLmdldEF0dHJpYnV0ZShBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSksIDEwKTtcblxuICAgICAgICAgICAgaWYgKCFhcmlhSGlkZGVuQ291bnQpIHtcbiAgICAgICAgICAgICAgYXJpYUhpZGRlbkNvdW50ID0gZWxlbUlzQWxyZWFkeUhpZGRlbiA/IDEgOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaWJsaW5nLnNldEF0dHJpYnV0ZShBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSwgYXJpYUhpZGRlbkNvdW50ICsgMSk7XG4gICAgICAgICAgICBzaWJsaW5nLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIGFwcGx5QXJpYUhpZGRlbihlbC5wYXJlbnQoKSk7XG5cbiAgICAgICAgICBmdW5jdGlvbiBnZXRTaWJsaW5ncyhlbCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZWwucGFyZW50KCkgPyBlbC5wYXJlbnQoKS5jaGlsZHJlbigpIDogW107XG5cbiAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjaGlsZCAhPT0gZWxbMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGJyb2FkY2FzdENsb3NpbmcobW9kYWxXaW5kb3csIHJlc3VsdE9yUmVhc29uLCBjbG9zaW5nKSB7XG4gICAgICAgIHJldHVybiAhbW9kYWxXaW5kb3cudmFsdWUubW9kYWxTY29wZS4kYnJvYWRjYXN0KCdtb2RhbC5jbG9zaW5nJywgcmVzdWx0T3JSZWFzb24sIGNsb3NpbmcpLmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVuaGlkZUJhY2tncm91bmRFbGVtZW50cygpIHtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FICsgJ10nKSxcbiAgICAgICAgICBmdW5jdGlvbihoaWRkZW5FbCkge1xuICAgICAgICAgICAgdmFyIGFyaWFIaWRkZW5Db3VudCA9IHBhcnNlSW50KGhpZGRlbkVsLmdldEF0dHJpYnV0ZShBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSksIDEwKSxcbiAgICAgICAgICAgICAgbmV3SGlkZGVuQ291bnQgPSBhcmlhSGlkZGVuQ291bnQgLSAxO1xuICAgICAgICAgICAgaGlkZGVuRWwuc2V0QXR0cmlidXRlKEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FLCBuZXdIaWRkZW5Db3VudCk7XG5cbiAgICAgICAgICAgIGlmICghbmV3SGlkZGVuQ291bnQpIHtcbiAgICAgICAgICAgICAgaGlkZGVuRWwucmVtb3ZlQXR0cmlidXRlKEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FKTtcbiAgICAgICAgICAgICAgaGlkZGVuRWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgJG1vZGFsU3RhY2suY2xvc2UgPSBmdW5jdGlvbihtb2RhbEluc3RhbmNlLCByZXN1bHQpIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgIHVuaGlkZUJhY2tncm91bmRFbGVtZW50cygpO1xuICAgICAgICBpZiAobW9kYWxXaW5kb3cgJiYgYnJvYWRjYXN0Q2xvc2luZyhtb2RhbFdpbmRvdywgcmVzdWx0LCB0cnVlKSkge1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLm1vZGFsU2NvcGUuJCR1aWJEZXN0cnVjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUuZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIHJlbW92ZU1vZGFsV2luZG93KG1vZGFsSW5zdGFuY2UsIG1vZGFsV2luZG93LnZhbHVlLm1vZGFsT3BlbmVyKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhbW9kYWxXaW5kb3c7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5kaXNtaXNzID0gZnVuY3Rpb24obW9kYWxJbnN0YW5jZSwgcmVhc29uKSB7XG4gICAgICAgIHZhciBtb2RhbFdpbmRvdyA9IG9wZW5lZFdpbmRvd3MuZ2V0KG1vZGFsSW5zdGFuY2UpO1xuICAgICAgICB1bmhpZGVCYWNrZ3JvdW5kRWxlbWVudHMoKTtcbiAgICAgICAgaWYgKG1vZGFsV2luZG93ICYmIGJyb2FkY2FzdENsb3NpbmcobW9kYWxXaW5kb3csIHJlYXNvbiwgZmFsc2UpKSB7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUubW9kYWxTY29wZS4kJHVpYkRlc3RydWN0aW9uU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5kZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICByZW1vdmVNb2RhbFdpbmRvdyhtb2RhbEluc3RhbmNlLCBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbE9wZW5lcik7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFtb2RhbFdpbmRvdztcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmRpc21pc3NBbGwgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgdmFyIHRvcE1vZGFsID0gdGhpcy5nZXRUb3AoKTtcbiAgICAgICAgd2hpbGUgKHRvcE1vZGFsICYmIHRoaXMuZGlzbWlzcyh0b3BNb2RhbC5rZXksIHJlYXNvbikpIHtcbiAgICAgICAgICB0b3BNb2RhbCA9IHRoaXMuZ2V0VG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmdldFRvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gb3BlbmVkV2luZG93cy50b3AoKTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLm1vZGFsUmVuZGVyZWQgPSBmdW5jdGlvbihtb2RhbEluc3RhbmNlKSB7XG4gICAgICAgIHZhciBtb2RhbFdpbmRvdyA9IG9wZW5lZFdpbmRvd3MuZ2V0KG1vZGFsSW5zdGFuY2UpO1xuICAgICAgICBpZiAobW9kYWxXaW5kb3cpIHtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5yZW5kZXJEZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmZvY3VzRmlyc3RGb2N1c2FibGVFbGVtZW50ID0gZnVuY3Rpb24obGlzdCkge1xuICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbGlzdFswXS5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmZvY3VzTGFzdEZvY3VzYWJsZUVsZW1lbnQgPSBmdW5jdGlvbihsaXN0KSB7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBsaXN0W2xpc3QubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5pc01vZGFsRm9jdXNlZCA9IGZ1bmN0aW9uKGV2dCwgbW9kYWxXaW5kb3cpIHtcbiAgICAgICAgaWYgKGV2dCAmJiBtb2RhbFdpbmRvdykge1xuICAgICAgICAgIHZhciBtb2RhbERvbUVsID0gbW9kYWxXaW5kb3cudmFsdWUubW9kYWxEb21FbDtcbiAgICAgICAgICBpZiAobW9kYWxEb21FbCAmJiBtb2RhbERvbUVsLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIChldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50KSA9PT0gbW9kYWxEb21FbFswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suaXNGb2N1c0luRmlyc3RJdGVtID0gZnVuY3Rpb24oZXZ0LCBsaXN0KSB7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gKGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQpID09PSBsaXN0WzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmlzRm9jdXNJbkxhc3RJdGVtID0gZnVuY3Rpb24oZXZ0LCBsaXN0KSB7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gKGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQpID09PSBsaXN0W2xpc3QubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2subG9hZEZvY3VzRWxlbWVudExpc3QgPSBmdW5jdGlvbihtb2RhbFdpbmRvdykge1xuICAgICAgICBpZiAobW9kYWxXaW5kb3cpIHtcbiAgICAgICAgICB2YXIgbW9kYWxEb21FMSA9IG1vZGFsV2luZG93LnZhbHVlLm1vZGFsRG9tRWw7XG4gICAgICAgICAgaWYgKG1vZGFsRG9tRTEgJiYgbW9kYWxEb21FMS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IG1vZGFsRG9tRTFbMF0ucXVlcnlTZWxlY3RvckFsbCh0YWJiYWJsZVNlbGVjdG9yKTtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50cyA/XG4gICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1Zpc2libGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgIH0pIDogZWxlbWVudHM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gJG1vZGFsU3RhY2s7XG4gICAgfV0pXG5cbiAgLnByb3ZpZGVyKCckdWliTW9kYWwnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgJG1vZGFsUHJvdmlkZXIgPSB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgYmFja2Ryb3A6IHRydWUsIC8vY2FuIGFsc28gYmUgZmFsc2Ugb3IgJ3N0YXRpYydcbiAgICAgICAga2V5Ym9hcmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAkZ2V0OiBbJyRyb290U2NvcGUnLCAnJHEnLCAnJGRvY3VtZW50JywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJGNvbnRyb2xsZXInLCAnJHVpYlJlc29sdmUnLCAnJHVpYk1vZGFsU3RhY2snLFxuICAgICAgICBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHEsICRkb2N1bWVudCwgJHRlbXBsYXRlUmVxdWVzdCwgJGNvbnRyb2xsZXIsICR1aWJSZXNvbHZlLCAkbW9kYWxTdGFjaykge1xuICAgICAgICAgIHZhciAkbW9kYWwgPSB7fTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGdldFRlbXBsYXRlUHJvbWlzZShvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50ZW1wbGF0ZSA/ICRxLndoZW4ob3B0aW9ucy50ZW1wbGF0ZSkgOlxuICAgICAgICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KGFuZ3VsYXIuaXNGdW5jdGlvbihvcHRpb25zLnRlbXBsYXRlVXJsKSA/XG4gICAgICAgICAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZVVybCgpIDogb3B0aW9ucy50ZW1wbGF0ZVVybCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHByb21pc2VDaGFpbiA9IG51bGw7XG4gICAgICAgICAgJG1vZGFsLmdldFByb21pc2VDaGFpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VDaGFpbjtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgJG1vZGFsLm9wZW4gPSBmdW5jdGlvbihtb2RhbE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBtb2RhbFJlc3VsdERlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciBtb2RhbE9wZW5lZERlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciBtb2RhbENsb3NlZERlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciBtb2RhbFJlbmRlckRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgLy9wcmVwYXJlIGFuIGluc3RhbmNlIG9mIGEgbW9kYWwgdG8gYmUgaW5qZWN0ZWQgaW50byBjb250cm9sbGVycyBhbmQgcmV0dXJuZWQgdG8gYSBjYWxsZXJcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0ge1xuICAgICAgICAgICAgICByZXN1bHQ6IG1vZGFsUmVzdWx0RGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICAgICAgb3BlbmVkOiBtb2RhbE9wZW5lZERlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgICAgIGNsb3NlZDogbW9kYWxDbG9zZWREZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgICAgICByZW5kZXJlZDogbW9kYWxSZW5kZXJEZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkbW9kYWxTdGFjay5jbG9zZShtb2RhbEluc3RhbmNlLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkaXNtaXNzOiBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRtb2RhbFN0YWNrLmRpc21pc3MobW9kYWxJbnN0YW5jZSwgcmVhc29uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy9tZXJnZSBhbmQgY2xlYW4gdXAgb3B0aW9uc1xuICAgICAgICAgICAgbW9kYWxPcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sICRtb2RhbFByb3ZpZGVyLm9wdGlvbnMsIG1vZGFsT3B0aW9ucyk7XG4gICAgICAgICAgICBtb2RhbE9wdGlvbnMucmVzb2x2ZSA9IG1vZGFsT3B0aW9ucy5yZXNvbHZlIHx8IHt9O1xuICAgICAgICAgICAgbW9kYWxPcHRpb25zLmFwcGVuZFRvID0gbW9kYWxPcHRpb25zLmFwcGVuZFRvIHx8ICRkb2N1bWVudC5maW5kKCdib2R5JykuZXEoMCk7XG5cbiAgICAgICAgICAgIGlmICghbW9kYWxPcHRpb25zLmFwcGVuZFRvLmxlbmd0aCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FwcGVuZFRvIGVsZW1lbnQgbm90IGZvdW5kLiBNYWtlIHN1cmUgdGhhdCB0aGUgZWxlbWVudCBwYXNzZWQgaXMgaW4gRE9NLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3ZlcmlmeSBvcHRpb25zXG4gICAgICAgICAgICBpZiAoIW1vZGFsT3B0aW9ucy5jb21wb25lbnQgJiYgIW1vZGFsT3B0aW9ucy50ZW1wbGF0ZSAmJiAhbW9kYWxPcHRpb25zLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25lIG9mIGNvbXBvbmVudCBvciB0ZW1wbGF0ZSBvciB0ZW1wbGF0ZVVybCBvcHRpb25zIGlzIHJlcXVpcmVkLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZTtcbiAgICAgICAgICAgIGlmIChtb2RhbE9wdGlvbnMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgIHRlbXBsYXRlQW5kUmVzb2x2ZVByb21pc2UgPSAkcS53aGVuKCR1aWJSZXNvbHZlLnJlc29sdmUobW9kYWxPcHRpb25zLnJlc29sdmUsIHt9LCBudWxsLCBudWxsKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlID1cbiAgICAgICAgICAgICAgICAkcS5hbGwoW2dldFRlbXBsYXRlUHJvbWlzZShtb2RhbE9wdGlvbnMpLCAkdWliUmVzb2x2ZS5yZXNvbHZlKG1vZGFsT3B0aW9ucy5yZXNvbHZlLCB7fSwgbnVsbCwgbnVsbCldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVdpdGhUZW1wbGF0ZSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlQW5kUmVzb2x2ZVByb21pc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBleGlzdGluZyBwcm9taXNlIGNoYWluLlxuICAgICAgICAgICAgLy8gVGhlbiBzd2l0Y2ggdG8gb3VyIG93biBjb21iaW5lZCBwcm9taXNlIGRlcGVuZGVuY3kgKHJlZ2FyZGxlc3Mgb2YgaG93IHRoZSBwcmV2aW91cyBtb2RhbCBmYXJlZCkuXG4gICAgICAgICAgICAvLyBUaGVuIGFkZCB0byAkbW9kYWxTdGFjayBhbmQgcmVzb2x2ZSBvcGVuZWQuXG4gICAgICAgICAgICAvLyBGaW5hbGx5IGNsZWFuIHVwIHRoZSBjaGFpbiB2YXJpYWJsZSBpZiBubyBzdWJzZXF1ZW50IG1vZGFsIGhhcyBvdmVyd3JpdHRlbiBpdC5cbiAgICAgICAgICAgIHZhciBzYW1lUHJvbWlzZTtcbiAgICAgICAgICAgIHNhbWVQcm9taXNlID0gcHJvbWlzZUNoYWluID0gJHEuYWxsKFtwcm9taXNlQ2hhaW5dKVxuICAgICAgICAgICAgICAudGhlbihyZXNvbHZlV2l0aFRlbXBsYXRlLCByZXNvbHZlV2l0aFRlbXBsYXRlKVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiByZXNvbHZlU3VjY2Vzcyh0cGxBbmRWYXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVkU2NvcGUgPSBtb2RhbE9wdGlvbnMuc2NvcGUgfHwgJHJvb3RTY29wZTtcblxuICAgICAgICAgICAgICAgIHZhciBtb2RhbFNjb3BlID0gcHJvdmlkZWRTY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgICAgbW9kYWxTY29wZS4kY2xvc2UgPSBtb2RhbEluc3RhbmNlLmNsb3NlO1xuICAgICAgICAgICAgICAgIG1vZGFsU2NvcGUuJGRpc21pc3MgPSBtb2RhbEluc3RhbmNlLmRpc21pc3M7XG5cbiAgICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghbW9kYWxTY29wZS4kJHVpYkRlc3RydWN0aW9uU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsU2NvcGUuJGRpc21pc3MoJyR1aWJVbnNjaGVkdWxlZERlc3RydWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbW9kYWwgPSB7XG4gICAgICAgICAgICAgICAgICBzY29wZTogbW9kYWxTY29wZSxcbiAgICAgICAgICAgICAgICAgIGRlZmVycmVkOiBtb2RhbFJlc3VsdERlZmVycmVkLFxuICAgICAgICAgICAgICAgICAgcmVuZGVyRGVmZXJyZWQ6IG1vZGFsUmVuZGVyRGVmZXJyZWQsXG4gICAgICAgICAgICAgICAgICBjbG9zZWREZWZlcnJlZDogbW9kYWxDbG9zZWREZWZlcnJlZCxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogbW9kYWxPcHRpb25zLmFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiBtb2RhbE9wdGlvbnMuYmFja2Ryb3AsXG4gICAgICAgICAgICAgICAgICBrZXlib2FyZDogbW9kYWxPcHRpb25zLmtleWJvYXJkLFxuICAgICAgICAgICAgICAgICAgYmFja2Ryb3BDbGFzczogbW9kYWxPcHRpb25zLmJhY2tkcm9wQ2xhc3MsXG4gICAgICAgICAgICAgICAgICB3aW5kb3dUb3BDbGFzczogbW9kYWxPcHRpb25zLndpbmRvd1RvcENsYXNzLFxuICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6IG1vZGFsT3B0aW9ucy53aW5kb3dDbGFzcyxcbiAgICAgICAgICAgICAgICAgIHdpbmRvd1RlbXBsYXRlVXJsOiBtb2RhbE9wdGlvbnMud2luZG93VGVtcGxhdGVVcmwsXG4gICAgICAgICAgICAgICAgICBhcmlhTGFiZWxsZWRCeTogbW9kYWxPcHRpb25zLmFyaWFMYWJlbGxlZEJ5LFxuICAgICAgICAgICAgICAgICAgYXJpYURlc2NyaWJlZEJ5OiBtb2RhbE9wdGlvbnMuYXJpYURlc2NyaWJlZEJ5LFxuICAgICAgICAgICAgICAgICAgc2l6ZTogbW9kYWxPcHRpb25zLnNpemUsXG4gICAgICAgICAgICAgICAgICBvcGVuZWRDbGFzczogbW9kYWxPcHRpb25zLm9wZW5lZENsYXNzLFxuICAgICAgICAgICAgICAgICAgYXBwZW5kVG86IG1vZGFsT3B0aW9ucy5hcHBlbmRUb1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgY29tcG9uZW50ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGN0cmxJbnN0YW5jZSwgY3RybEluc3RhbnRpYXRlLCBjdHJsTG9jYWxzID0ge307XG5cbiAgICAgICAgICAgICAgICBpZiAobW9kYWxPcHRpb25zLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgY29uc3RydWN0TG9jYWxzKGNvbXBvbmVudCwgZmFsc2UsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5uYW1lID0gbW9kYWxPcHRpb25zLmNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgIG1vZGFsLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGFsT3B0aW9ucy5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RMb2NhbHMoY3RybExvY2FscywgdHJ1ZSwgZmFsc2UsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAvLyB0aGUgdGhpcmQgcGFyYW0gd2lsbCBtYWtlIHRoZSBjb250cm9sbGVyIGluc3RhbnRpYXRlIGxhdGVyLHByaXZhdGUgYXBpXG4gICAgICAgICAgICAgICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi9tYXN0ZXIvc3JjL25nL2NvbnRyb2xsZXIuanMjTDEyNlxuICAgICAgICAgICAgICAgICAgY3RybEluc3RhbnRpYXRlID0gJGNvbnRyb2xsZXIobW9kYWxPcHRpb25zLmNvbnRyb2xsZXIsIGN0cmxMb2NhbHMsIHRydWUsIG1vZGFsT3B0aW9ucy5jb250cm9sbGVyQXMpO1xuICAgICAgICAgICAgICAgICAgaWYgKG1vZGFsT3B0aW9ucy5jb250cm9sbGVyQXMgJiYgbW9kYWxPcHRpb25zLmJpbmRUb0NvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3RybEluc3RhbmNlID0gY3RybEluc3RhbnRpYXRlLmluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UuJGNsb3NlID0gbW9kYWxTY29wZS4kY2xvc2U7XG4gICAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW5jZS4kZGlzbWlzcyA9IG1vZGFsU2NvcGUuJGRpc21pc3M7XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGN0cmxJbnN0YW5jZSwge1xuICAgICAgICAgICAgICAgICAgICAgICRyZXNvbHZlOiBjdHJsTG9jYWxzLiRzY29wZS4kcmVzb2x2ZVxuICAgICAgICAgICAgICAgICAgICB9LCBwcm92aWRlZFNjb3BlKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgY3RybEluc3RhbmNlID0gY3RybEluc3RhbnRpYXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oY3RybEluc3RhbmNlLiRvbkluaXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW5jZS4kb25Jbml0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFtb2RhbE9wdGlvbnMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICBtb2RhbC5jb250ZW50ID0gdHBsQW5kVmFyc1swXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkbW9kYWxTdGFjay5vcGVuKG1vZGFsSW5zdGFuY2UsIG1vZGFsKTtcbiAgICAgICAgICAgICAgICBtb2RhbE9wZW5lZERlZmVycmVkLnJlc29sdmUodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb25zdHJ1Y3RMb2NhbHMob2JqLCB0ZW1wbGF0ZSwgaW5zdGFuY2VPblNjb3BlLCBpbmplY3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICBvYmouJHNjb3BlID0gbW9kYWxTY29wZTtcbiAgICAgICAgICAgICAgICAgIG9iai4kc2NvcGUuJHJlc29sdmUgPSB7fTtcbiAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZU9uU2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLiRzY29wZS4kdWliTW9kYWxJbnN0YW5jZSA9IG1vZGFsSW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvYmouJHVpYk1vZGFsSW5zdGFuY2UgPSBtb2RhbEluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB2YXIgcmVzb2x2ZXMgPSB0ZW1wbGF0ZSA/IHRwbEFuZFZhcnNbMV0gOiB0cGxBbmRWYXJzO1xuICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJlc29sdmVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmplY3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG9iai4kc2NvcGUuJHJlc29sdmVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gcmVzb2x2ZUVycm9yKHJlYXNvbikge1xuICAgICAgICAgICAgICBtb2RhbE9wZW5lZERlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgICBtb2RhbFJlc3VsdERlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgfSlbJ2ZpbmFsbHknXShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHByb21pc2VDaGFpbiA9PT0gc2FtZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlQ2hhaW4gPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG1vZGFsSW5zdGFuY2U7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiAkbW9kYWw7XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuXG4gICAgcmV0dXJuICRtb2RhbFByb3ZpZGVyO1xuICB9KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wYWdpbmcnLCBbXSlcbi8qKlxuICogSGVscGVyIGludGVybmFsIHNlcnZpY2UgZm9yIGdlbmVyYXRpbmcgY29tbW9uIGNvbnRyb2xsZXIgY29kZSBiZXR3ZWVuIHRoZVxuICogcGFnZXIgYW5kIHBhZ2luYXRpb24gY29tcG9uZW50c1xuICovXG4uZmFjdG9yeSgndWliUGFnaW5nJywgWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKGN0cmwsICRzY29wZSwgJGF0dHJzKSB7XG4gICAgICBjdHJsLnNldE51bVBhZ2VzID0gJGF0dHJzLm51bVBhZ2VzID8gJHBhcnNlKCRhdHRycy5udW1QYWdlcykuYXNzaWduIDogYW5ndWxhci5ub29wO1xuICAgICAgY3RybC5uZ01vZGVsQ3RybCA9IHsgJHNldFZpZXdWYWx1ZTogYW5ndWxhci5ub29wIH07IC8vIG51bGxNb2RlbEN0cmxcbiAgICAgIGN0cmwuX3dhdGNoZXJzID0gW107XG5cbiAgICAgIGN0cmwuaW5pdCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsLCBjb25maWcpIHtcbiAgICAgICAgY3RybC5uZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsO1xuICAgICAgICBjdHJsLmNvbmZpZyA9IGNvbmZpZztcblxuICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY3RybC5yZW5kZXIoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoJGF0dHJzLml0ZW1zUGVyUGFnZSkge1xuICAgICAgICAgIGN0cmwuX3dhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRhdHRycy5pdGVtc1BlclBhZ2UsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBjdHJsLml0ZW1zUGVyUGFnZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgICAkc2NvcGUudG90YWxQYWdlcyA9IGN0cmwuY2FsY3VsYXRlVG90YWxQYWdlcygpO1xuICAgICAgICAgICAgY3RybC51cGRhdGVQYWdlKCk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0cmwuaXRlbXNQZXJQYWdlID0gY29uZmlnLml0ZW1zUGVyUGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3RvdGFsSXRlbXMnLCBmdW5jdGlvbihuZXdUb3RhbCwgb2xkVG90YWwpIHtcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQobmV3VG90YWwpIHx8IG5ld1RvdGFsICE9PSBvbGRUb3RhbCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvdGFsUGFnZXMgPSBjdHJsLmNhbGN1bGF0ZVRvdGFsUGFnZXMoKTtcbiAgICAgICAgICAgIGN0cmwudXBkYXRlUGFnZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLmNhbGN1bGF0ZVRvdGFsUGFnZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRvdGFsUGFnZXMgPSBjdHJsLml0ZW1zUGVyUGFnZSA8IDEgPyAxIDogTWF0aC5jZWlsKCRzY29wZS50b3RhbEl0ZW1zIC8gY3RybC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgodG90YWxQYWdlcyB8fCAwLCAxKTtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5wYWdlID0gcGFyc2VJbnQoY3RybC5uZ01vZGVsQ3RybC4kdmlld1ZhbHVlLCAxMCkgfHwgMTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5zZWxlY3RQYWdlID0gZnVuY3Rpb24ocGFnZSwgZXZ0KSB7XG4gICAgICAgIGlmIChldnQpIHtcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjbGlja0FsbG93ZWQgPSAhJHNjb3BlLm5nRGlzYWJsZWQgfHwgIWV2dDtcbiAgICAgICAgaWYgKGNsaWNrQWxsb3dlZCAmJiAkc2NvcGUucGFnZSAhPT0gcGFnZSAmJiBwYWdlID4gMCAmJiBwYWdlIDw9ICRzY29wZS50b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgaWYgKGV2dCAmJiBldnQudGFyZ2V0KSB7XG4gICAgICAgICAgICBldnQudGFyZ2V0LmJsdXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3RybC5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHBhZ2UpO1xuICAgICAgICAgIGN0cmwubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gJHNjb3BlW2tleSArICdUZXh0J10gfHwgY3RybC5jb25maWdba2V5ICsgJ1RleHQnXTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5ub1ByZXZpb3VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUucGFnZSA9PT0gMTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5ub05leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5wYWdlID09PSAkc2NvcGUudG90YWxQYWdlcztcbiAgICAgIH07XG5cbiAgICAgIGN0cmwudXBkYXRlUGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLnNldE51bVBhZ2VzKCRzY29wZS4kcGFyZW50LCAkc2NvcGUudG90YWxQYWdlcyk7IC8vIFJlYWRvbmx5IHZhcmlhYmxlXG5cbiAgICAgICAgaWYgKCRzY29wZS5wYWdlID4gJHNjb3BlLnRvdGFsUGFnZXMpIHtcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0UGFnZSgkc2NvcGUudG90YWxQYWdlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3RybC5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHdoaWxlIChjdHJsLl93YXRjaGVycy5sZW5ndGgpIHtcbiAgICAgICAgICBjdHJsLl93YXRjaGVycy5zaGlmdCgpKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wYWdlcicsIFsndWkuYm9vdHN0cmFwLnBhZ2luZycsICd1aS5ib290c3RyYXAudGFiaW5kZXgnXSlcblxuLmNvbnRyb2xsZXIoJ1VpYlBhZ2VyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICd1aWJQYWdpbmcnLCAndWliUGFnZXJDb25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgdWliUGFnaW5nLCB1aWJQYWdlckNvbmZpZykge1xuICAkc2NvcGUuYWxpZ24gPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYWxpZ24pID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmFsaWduKSA6IHVpYlBhZ2VyQ29uZmlnLmFsaWduO1xuXG4gIHVpYlBhZ2luZy5jcmVhdGUodGhpcywgJHNjb3BlLCAkYXR0cnMpO1xufV0pXG5cbi5jb25zdGFudCgndWliUGFnZXJDb25maWcnLCB7XG4gIGl0ZW1zUGVyUGFnZTogMTAsXG4gIHByZXZpb3VzVGV4dDogJ8KrIFByZXZpb3VzJyxcbiAgbmV4dFRleHQ6ICdOZXh0IMK7JyxcbiAgYWxpZ246IHRydWVcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBhZ2VyJywgWyd1aWJQYWdlckNvbmZpZycsIGZ1bmN0aW9uKHVpYlBhZ2VyQ29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6IHtcbiAgICAgIHRvdGFsSXRlbXM6ICc9JyxcbiAgICAgIHByZXZpb3VzVGV4dDogJ0AnLFxuICAgICAgbmV4dFRleHQ6ICdAJyxcbiAgICAgIG5nRGlzYWJsZWQ6ICc9J1xuICAgIH0sXG4gICAgcmVxdWlyZTogWyd1aWJQYWdlcicsICc/bmdNb2RlbCddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYlBhZ2VyQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAncGFnZXInLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvcGFnZXIvcGFnZXIuaHRtbCc7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdwYWdlcicpO1xuICAgICAgdmFyIHBhZ2luYXRpb25DdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHtcbiAgICAgICAgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG4gICAgICB9XG5cbiAgICAgIHBhZ2luYXRpb25DdHJsLmluaXQobmdNb2RlbEN0cmwsIHVpYlBhZ2VyQ29uZmlnKTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucGFnaW5hdGlvbicsIFsndWkuYm9vdHN0cmFwLnBhZ2luZycsICd1aS5ib290c3RyYXAudGFiaW5kZXgnXSlcbi5jb250cm9sbGVyKCdVaWJQYWdpbmF0aW9uQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICckcGFyc2UnLCAndWliUGFnaW5nJywgJ3VpYlBhZ2luYXRpb25Db25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgJHBhcnNlLCB1aWJQYWdpbmcsIHVpYlBhZ2luYXRpb25Db25maWcpIHtcbiAgdmFyIGN0cmwgPSB0aGlzO1xuICAvLyBTZXR1cCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnNcbiAgdmFyIG1heFNpemUgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubWF4U2l6ZSkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMubWF4U2l6ZSkgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLm1heFNpemUsXG4gICAgcm90YXRlID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnJvdGF0ZSkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMucm90YXRlKSA6IHVpYlBhZ2luYXRpb25Db25maWcucm90YXRlLFxuICAgIGZvcmNlRWxsaXBzZXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZm9yY2VFbGxpcHNlcykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuZm9yY2VFbGxpcHNlcykgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLmZvcmNlRWxsaXBzZXMsXG4gICAgYm91bmRhcnlMaW5rTnVtYmVycyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5ib3VuZGFyeUxpbmtOdW1iZXJzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5ib3VuZGFyeUxpbmtOdW1iZXJzKSA6IHVpYlBhZ2luYXRpb25Db25maWcuYm91bmRhcnlMaW5rTnVtYmVycyxcbiAgICBwYWdlTGFiZWwgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMucGFnZUxhYmVsKSA/IGZ1bmN0aW9uKGlkeCkgeyByZXR1cm4gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnBhZ2VMYWJlbCwgeyRwYWdlOiBpZHh9KTsgfSA6IGFuZ3VsYXIuaWRlbnRpdHk7XG4gICRzY29wZS5ib3VuZGFyeUxpbmtzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmJvdW5kYXJ5TGlua3MpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmJvdW5kYXJ5TGlua3MpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5ib3VuZGFyeUxpbmtzO1xuICAkc2NvcGUuZGlyZWN0aW9uTGlua3MgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGlyZWN0aW9uTGlua3MpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmRpcmVjdGlvbkxpbmtzKSA6IHVpYlBhZ2luYXRpb25Db25maWcuZGlyZWN0aW9uTGlua3M7XG4gICRhdHRycy4kc2V0KCdyb2xlJywgJ21lbnUnKTtcblxuICB1aWJQYWdpbmcuY3JlYXRlKHRoaXMsICRzY29wZSwgJGF0dHJzKTtcblxuICBpZiAoJGF0dHJzLm1heFNpemUpIHtcbiAgICBjdHJsLl93YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLm1heFNpemUpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbWF4U2l6ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICBjdHJsLnJlbmRlcigpO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBwYWdlIG9iamVjdCB1c2VkIGluIHRlbXBsYXRlXG4gIGZ1bmN0aW9uIG1ha2VQYWdlKG51bWJlciwgdGV4dCwgaXNBY3RpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyOiBudW1iZXIsXG4gICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgYWN0aXZlOiBpc0FjdGl2ZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYWdlcyhjdXJyZW50UGFnZSwgdG90YWxQYWdlcykge1xuICAgIHZhciBwYWdlcyA9IFtdO1xuXG4gICAgLy8gRGVmYXVsdCBwYWdlIGxpbWl0c1xuICAgIHZhciBzdGFydFBhZ2UgPSAxLCBlbmRQYWdlID0gdG90YWxQYWdlcztcbiAgICB2YXIgaXNNYXhTaXplZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKG1heFNpemUpICYmIG1heFNpemUgPCB0b3RhbFBhZ2VzO1xuXG4gICAgLy8gcmVjb21wdXRlIGlmIG1heFNpemVcbiAgICBpZiAoaXNNYXhTaXplZCkge1xuICAgICAgaWYgKHJvdGF0ZSkge1xuICAgICAgICAvLyBDdXJyZW50IHBhZ2UgaXMgZGlzcGxheWVkIGluIHRoZSBtaWRkbGUgb2YgdGhlIHZpc2libGUgb25lc1xuICAgICAgICBzdGFydFBhZ2UgPSBNYXRoLm1heChjdXJyZW50UGFnZSAtIE1hdGguZmxvb3IobWF4U2l6ZSAvIDIpLCAxKTtcbiAgICAgICAgZW5kUGFnZSA9IHN0YXJ0UGFnZSArIG1heFNpemUgLSAxO1xuXG4gICAgICAgIC8vIEFkanVzdCBpZiBsaW1pdCBpcyBleGNlZWRlZFxuICAgICAgICBpZiAoZW5kUGFnZSA+IHRvdGFsUGFnZXMpIHtcbiAgICAgICAgICBlbmRQYWdlID0gdG90YWxQYWdlcztcbiAgICAgICAgICBzdGFydFBhZ2UgPSBlbmRQYWdlIC0gbWF4U2l6ZSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFZpc2libGUgcGFnZXMgYXJlIHBhZ2luYXRlZCB3aXRoIG1heFNpemVcbiAgICAgICAgc3RhcnRQYWdlID0gKE1hdGguY2VpbChjdXJyZW50UGFnZSAvIG1heFNpemUpIC0gMSkgKiBtYXhTaXplICsgMTtcblxuICAgICAgICAvLyBBZGp1c3QgbGFzdCBwYWdlIGlmIGxpbWl0IGlzIGV4Y2VlZGVkXG4gICAgICAgIGVuZFBhZ2UgPSBNYXRoLm1pbihzdGFydFBhZ2UgKyBtYXhTaXplIC0gMSwgdG90YWxQYWdlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIHBhZ2UgbnVtYmVyIGxpbmtzXG4gICAgZm9yICh2YXIgbnVtYmVyID0gc3RhcnRQYWdlOyBudW1iZXIgPD0gZW5kUGFnZTsgbnVtYmVyKyspIHtcbiAgICAgIHZhciBwYWdlID0gbWFrZVBhZ2UobnVtYmVyLCBwYWdlTGFiZWwobnVtYmVyKSwgbnVtYmVyID09PSBjdXJyZW50UGFnZSk7XG4gICAgICBwYWdlcy5wdXNoKHBhZ2UpO1xuICAgIH1cblxuICAgIC8vIEFkZCBsaW5rcyB0byBtb3ZlIGJldHdlZW4gcGFnZSBzZXRzXG4gICAgaWYgKGlzTWF4U2l6ZWQgJiYgbWF4U2l6ZSA+IDAgJiYgKCFyb3RhdGUgfHwgZm9yY2VFbGxpcHNlcyB8fCBib3VuZGFyeUxpbmtOdW1iZXJzKSkge1xuICAgICAgaWYgKHN0YXJ0UGFnZSA+IDEpIHtcbiAgICAgICAgaWYgKCFib3VuZGFyeUxpbmtOdW1iZXJzIHx8IHN0YXJ0UGFnZSA+IDMpIHsgLy9uZWVkIGVsbGlwc2lzIGZvciBhbGwgb3B0aW9ucyB1bmxlc3MgcmFuZ2UgaXMgdG9vIGNsb3NlIHRvIGJlZ2lubmluZ1xuICAgICAgICB2YXIgcHJldmlvdXNQYWdlU2V0ID0gbWFrZVBhZ2Uoc3RhcnRQYWdlIC0gMSwgJy4uLicsIGZhbHNlKTtcbiAgICAgICAgcGFnZXMudW5zaGlmdChwcmV2aW91c1BhZ2VTZXQpO1xuICAgICAgfVxuICAgICAgICBpZiAoYm91bmRhcnlMaW5rTnVtYmVycykge1xuICAgICAgICAgIGlmIChzdGFydFBhZ2UgPT09IDMpIHsgLy9uZWVkIHRvIHJlcGxhY2UgZWxsaXBzaXMgd2hlbiB0aGUgYnV0dG9ucyB3b3VsZCBiZSBzZXF1ZW50aWFsXG4gICAgICAgICAgICB2YXIgc2Vjb25kUGFnZUxpbmsgPSBtYWtlUGFnZSgyLCAnMicsIGZhbHNlKTtcbiAgICAgICAgICAgIHBhZ2VzLnVuc2hpZnQoc2Vjb25kUGFnZUxpbmspO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL2FkZCB0aGUgZmlyc3QgcGFnZVxuICAgICAgICAgIHZhciBmaXJzdFBhZ2VMaW5rID0gbWFrZVBhZ2UoMSwgJzEnLCBmYWxzZSk7XG4gICAgICAgICAgcGFnZXMudW5zaGlmdChmaXJzdFBhZ2VMaW5rKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZW5kUGFnZSA8IHRvdGFsUGFnZXMpIHtcbiAgICAgICAgaWYgKCFib3VuZGFyeUxpbmtOdW1iZXJzIHx8IGVuZFBhZ2UgPCB0b3RhbFBhZ2VzIC0gMikgeyAvL25lZWQgZWxsaXBzaXMgZm9yIGFsbCBvcHRpb25zIHVubGVzcyByYW5nZSBpcyB0b28gY2xvc2UgdG8gZW5kXG4gICAgICAgIHZhciBuZXh0UGFnZVNldCA9IG1ha2VQYWdlKGVuZFBhZ2UgKyAxLCAnLi4uJywgZmFsc2UpO1xuICAgICAgICBwYWdlcy5wdXNoKG5leHRQYWdlU2V0KTtcbiAgICAgIH1cbiAgICAgICAgaWYgKGJvdW5kYXJ5TGlua051bWJlcnMpIHtcbiAgICAgICAgICBpZiAoZW5kUGFnZSA9PT0gdG90YWxQYWdlcyAtIDIpIHsgLy9uZWVkIHRvIHJlcGxhY2UgZWxsaXBzaXMgd2hlbiB0aGUgYnV0dG9ucyB3b3VsZCBiZSBzZXF1ZW50aWFsXG4gICAgICAgICAgICB2YXIgc2Vjb25kVG9MYXN0UGFnZUxpbmsgPSBtYWtlUGFnZSh0b3RhbFBhZ2VzIC0gMSwgdG90YWxQYWdlcyAtIDEsIGZhbHNlKTtcbiAgICAgICAgICAgIHBhZ2VzLnB1c2goc2Vjb25kVG9MYXN0UGFnZUxpbmspO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL2FkZCB0aGUgbGFzdCBwYWdlXG4gICAgICAgICAgdmFyIGxhc3RQYWdlTGluayA9IG1ha2VQYWdlKHRvdGFsUGFnZXMsIHRvdGFsUGFnZXMsIGZhbHNlKTtcbiAgICAgICAgICBwYWdlcy5wdXNoKGxhc3RQYWdlTGluayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhZ2VzO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsUmVuZGVyID0gdGhpcy5yZW5kZXI7XG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgb3JpZ2luYWxSZW5kZXIoKTtcbiAgICBpZiAoJHNjb3BlLnBhZ2UgPiAwICYmICRzY29wZS5wYWdlIDw9ICRzY29wZS50b3RhbFBhZ2VzKSB7XG4gICAgICAkc2NvcGUucGFnZXMgPSBnZXRQYWdlcygkc2NvcGUucGFnZSwgJHNjb3BlLnRvdGFsUGFnZXMpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4uY29uc3RhbnQoJ3VpYlBhZ2luYXRpb25Db25maWcnLCB7XG4gIGl0ZW1zUGVyUGFnZTogMTAsXG4gIGJvdW5kYXJ5TGlua3M6IGZhbHNlLFxuICBib3VuZGFyeUxpbmtOdW1iZXJzOiBmYWxzZSxcbiAgZGlyZWN0aW9uTGlua3M6IHRydWUsXG4gIGZpcnN0VGV4dDogJ0ZpcnN0JyxcbiAgcHJldmlvdXNUZXh0OiAnUHJldmlvdXMnLFxuICBuZXh0VGV4dDogJ05leHQnLFxuICBsYXN0VGV4dDogJ0xhc3QnLFxuICByb3RhdGU6IHRydWUsXG4gIGZvcmNlRWxsaXBzZXM6IGZhbHNlXG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQYWdpbmF0aW9uJywgWyckcGFyc2UnLCAndWliUGFnaW5hdGlvbkNvbmZpZycsIGZ1bmN0aW9uKCRwYXJzZSwgdWliUGFnaW5hdGlvbkNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7XG4gICAgICB0b3RhbEl0ZW1zOiAnPScsXG4gICAgICBmaXJzdFRleHQ6ICdAJyxcbiAgICAgIHByZXZpb3VzVGV4dDogJ0AnLFxuICAgICAgbmV4dFRleHQ6ICdAJyxcbiAgICAgIGxhc3RUZXh0OiAnQCcsXG4gICAgICBuZ0Rpc2FibGVkOic9J1xuICAgIH0sXG4gICAgcmVxdWlyZTogWyd1aWJQYWdpbmF0aW9uJywgJz9uZ01vZGVsJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliUGFnaW5hdGlvbkNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ3BhZ2luYXRpb24nLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWwnO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygncGFnaW5hdGlvbicpO1xuICAgICAgdmFyIHBhZ2luYXRpb25DdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHtcbiAgICAgICAgIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxuICAgICAgfVxuXG4gICAgICBwYWdpbmF0aW9uQ3RybC5pbml0KG5nTW9kZWxDdHJsLCB1aWJQYWdpbmF0aW9uQ29uZmlnKTtcbiAgICB9XG4gIH07XG59XSk7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBmZWF0dXJlcyBhcmUgc3RpbGwgb3V0c3RhbmRpbmc6IGFuaW1hdGlvbiBhcyBhXG4gKiBmdW5jdGlvbiwgcGxhY2VtZW50IGFzIGEgZnVuY3Rpb24sIGluc2lkZSwgc3VwcG9ydCBmb3IgbW9yZSB0cmlnZ2VycyB0aGFuXG4gKiBqdXN0IG1vdXNlIGVudGVyL2xlYXZlLCBodG1sIHRvb2x0aXBzLCBhbmQgc2VsZWN0b3IgZGVsZWdhdGlvbi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50b29sdGlwJywgWyd1aS5ib290c3RyYXAucG9zaXRpb24nLCAndWkuYm9vdHN0cmFwLnN0YWNrZWRNYXAnXSlcblxuLyoqXG4gKiBUaGUgJHRvb2x0aXAgc2VydmljZSBjcmVhdGVzIHRvb2x0aXAtIGFuZCBwb3BvdmVyLWxpa2UgZGlyZWN0aXZlcyBhcyB3ZWxsIGFzXG4gKiBob3VzZXMgZ2xvYmFsIG9wdGlvbnMgZm9yIHRoZW0uXG4gKi9cbi5wcm92aWRlcignJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigpIHtcbiAgLy8gVGhlIGRlZmF1bHQgb3B0aW9ucyB0b29sdGlwIGFuZCBwb3BvdmVyLlxuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBwbGFjZW1lbnRDbGFzc1ByZWZpeDogJycsXG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIHBvcHVwRGVsYXk6IDAsXG4gICAgcG9wdXBDbG9zZURlbGF5OiAwLFxuICAgIHVzZUNvbnRlbnRFeHA6IGZhbHNlXG4gIH07XG5cbiAgLy8gRGVmYXVsdCBoaWRlIHRyaWdnZXJzIGZvciBlYWNoIHNob3cgdHJpZ2dlclxuICB2YXIgdHJpZ2dlck1hcCA9IHtcbiAgICAnbW91c2VlbnRlcic6ICdtb3VzZWxlYXZlJyxcbiAgICAnY2xpY2snOiAnY2xpY2snLFxuICAgICdvdXRzaWRlQ2xpY2snOiAnb3V0c2lkZUNsaWNrJyxcbiAgICAnZm9jdXMnOiAnYmx1cicsXG4gICAgJ25vbmUnOiAnJ1xuICB9O1xuXG4gIC8vIFRoZSBvcHRpb25zIHNwZWNpZmllZCB0byB0aGUgcHJvdmlkZXIgZ2xvYmFsbHkuXG4gIHZhciBnbG9iYWxPcHRpb25zID0ge307XG5cbiAgLyoqXG4gICAqIGBvcHRpb25zKHt9KWAgYWxsb3dzIGdsb2JhbCBjb25maWd1cmF0aW9uIG9mIGFsbCB0b29sdGlwcyBpbiB0aGVcbiAgICogYXBwbGljYXRpb24uXG4gICAqXG4gICAqICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCAnQXBwJywgWyd1aS5ib290c3RyYXAudG9vbHRpcCddLCBmdW5jdGlvbiggJHRvb2x0aXBQcm92aWRlciApIHtcbiAgICogICAgIC8vIHBsYWNlIHRvb2x0aXBzIGxlZnQgaW5zdGVhZCBvZiB0b3AgYnkgZGVmYXVsdFxuICAgKiAgICAgJHRvb2x0aXBQcm92aWRlci5vcHRpb25zKCB7IHBsYWNlbWVudDogJ2xlZnQnIH0gKTtcbiAgICogICB9KTtcbiAgICovXG5cdHRoaXMub3B0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0YW5ndWxhci5leHRlbmQoZ2xvYmFsT3B0aW9ucywgdmFsdWUpO1xuXHR9O1xuXG4gIC8qKlxuICAgKiBUaGlzIGFsbG93cyB5b3UgdG8gZXh0ZW5kIHRoZSBzZXQgb2YgdHJpZ2dlciBtYXBwaW5ncyBhdmFpbGFibGUuIEUuZy46XG4gICAqXG4gICAqICAgJHRvb2x0aXBQcm92aWRlci5zZXRUcmlnZ2VycyggeyAnb3BlblRyaWdnZXInOiAnY2xvc2VUcmlnZ2VyJyB9ICk7XG4gICAqL1xuICB0aGlzLnNldFRyaWdnZXJzID0gZnVuY3Rpb24gc2V0VHJpZ2dlcnModHJpZ2dlcnMpIHtcbiAgICBhbmd1bGFyLmV4dGVuZCh0cmlnZ2VyTWFwLCB0cmlnZ2Vycyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIHRyYW5zbGF0aW5nIGNhbWVsLWNhc2UgdG8gc25ha2VfY2FzZS5cbiAgICovXG4gIGZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSkge1xuICAgIHZhciByZWdleHAgPSAvW0EtWl0vZztcbiAgICB2YXIgc2VwYXJhdG9yID0gJy0nO1xuICAgIHJldHVybiBuYW1lLnJlcGxhY2UocmVnZXhwLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xuICAgICAgcmV0dXJuIChwb3MgPyBzZXBhcmF0b3IgOiAnJykgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhY3R1YWwgaW5zdGFuY2Ugb2YgdGhlICR0b29sdGlwIHNlcnZpY2UuXG4gICAqIFRPRE8gc3VwcG9ydCBtdWx0aXBsZSB0cmlnZ2Vyc1xuICAgKi9cbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRjb21waWxlJywgJyR0aW1lb3V0JywgJyRkb2N1bWVudCcsICckdWliUG9zaXRpb24nLCAnJGludGVycG9sYXRlJywgJyRyb290U2NvcGUnLCAnJHBhcnNlJywgJyQkc3RhY2tlZE1hcCcsIGZ1bmN0aW9uKCR3aW5kb3csICRjb21waWxlLCAkdGltZW91dCwgJGRvY3VtZW50LCAkcG9zaXRpb24sICRpbnRlcnBvbGF0ZSwgJHJvb3RTY29wZSwgJHBhcnNlLCAkJHN0YWNrZWRNYXApIHtcbiAgICB2YXIgb3BlbmVkVG9vbHRpcHMgPSAkJHN0YWNrZWRNYXAuY3JlYXRlTmV3KCk7XG4gICAgJGRvY3VtZW50Lm9uKCdrZXl1cCcsIGtleXByZXNzTGlzdGVuZXIpO1xuXG4gICAgJHJvb3RTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdrZXl1cCcsIGtleXByZXNzTGlzdGVuZXIpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24ga2V5cHJlc3NMaXN0ZW5lcihlKSB7XG4gICAgICBpZiAoZS53aGljaCA9PT0gMjcpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBvcGVuZWRUb29sdGlwcy50b3AoKTtcbiAgICAgICAgaWYgKGxhc3QpIHtcbiAgICAgICAgICBsYXN0LnZhbHVlLmNsb3NlKCk7XG4gICAgICAgICAgbGFzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gJHRvb2x0aXAodHRUeXBlLCBwcmVmaXgsIGRlZmF1bHRUcmlnZ2VyU2hvdywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgZ2xvYmFsT3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyBhbiBvYmplY3Qgb2Ygc2hvdyBhbmQgaGlkZSB0cmlnZ2Vycy5cbiAgICAgICAqXG4gICAgICAgKiBJZiBhIHRyaWdnZXIgaXMgc3VwcGxpZWQsXG4gICAgICAgKiBpdCBpcyB1c2VkIHRvIHNob3cgdGhlIHRvb2x0aXA7IG90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0cmlnZ2VyYFxuICAgICAgICogb3B0aW9uIHBhc3NlZCB0byB0aGUgYCR0b29sdGlwUHJvdmlkZXIub3B0aW9uc2AgbWV0aG9kOyBlbHNlIGl0IHdpbGxcbiAgICAgICAqIGRlZmF1bHQgdG8gdGhlIHRyaWdnZXIgc3VwcGxpZWQgdG8gdGhpcyBkaXJlY3RpdmUgZmFjdG9yeS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgaGlkZSB0cmlnZ2VyIGlzIGJhc2VkIG9uIHRoZSBzaG93IHRyaWdnZXIuIElmIHRoZSBgdHJpZ2dlcmAgb3B0aW9uXG4gICAgICAgKiB3YXMgcGFzc2VkIHRvIHRoZSBgJHRvb2x0aXBQcm92aWRlci5vcHRpb25zYCBtZXRob2QsIGl0IHdpbGwgdXNlIHRoZVxuICAgICAgICogbWFwcGVkIHRyaWdnZXIgZnJvbSBgdHJpZ2dlck1hcGAgb3IgdGhlIHBhc3NlZCB0cmlnZ2VyIGlmIHRoZSBtYXAgaXNcbiAgICAgICAqIHVuZGVmaW5lZDsgb3RoZXJ3aXNlLCBpdCB1c2VzIHRoZSBgdHJpZ2dlck1hcGAgdmFsdWUgb2YgdGhlIHNob3dcbiAgICAgICAqIHRyaWdnZXI7IGVsc2UgaXQgd2lsbCBqdXN0IHVzZSB0aGUgc2hvdyB0cmlnZ2VyLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZXRUcmlnZ2Vycyh0cmlnZ2VyKSB7XG4gICAgICAgIHZhciBzaG93ID0gKHRyaWdnZXIgfHwgb3B0aW9ucy50cmlnZ2VyIHx8IGRlZmF1bHRUcmlnZ2VyU2hvdykuc3BsaXQoJyAnKTtcbiAgICAgICAgdmFyIGhpZGUgPSBzaG93Lm1hcChmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXJNYXBbdHJpZ2dlcl0gfHwgdHJpZ2dlcjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvdzogc2hvdyxcbiAgICAgICAgICBoaWRlOiBoaWRlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXJlY3RpdmVOYW1lID0gc25ha2VfY2FzZSh0dFR5cGUpO1xuXG4gICAgICB2YXIgc3RhcnRTeW0gPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKTtcbiAgICAgIHZhciBlbmRTeW0gPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCk7XG4gICAgICB2YXIgdGVtcGxhdGUgPVxuICAgICAgICAnPGRpdiAnKyBkaXJlY3RpdmVOYW1lICsgJy1wb3B1cCAnICtcbiAgICAgICAgICAndWliLXRpdGxlPVwiJyArIHN0YXJ0U3ltICsgJ3RpdGxlJyArIGVuZFN5bSArICdcIiAnICtcbiAgICAgICAgICAob3B0aW9ucy51c2VDb250ZW50RXhwID9cbiAgICAgICAgICAgICdjb250ZW50LWV4cD1cImNvbnRlbnRFeHAoKVwiICcgOlxuICAgICAgICAgICAgJ2NvbnRlbnQ9XCInICsgc3RhcnRTeW0gKyAnY29udGVudCcgKyBlbmRTeW0gKyAnXCIgJykgK1xuICAgICAgICAgICdvcmlnaW4tc2NvcGU9XCJvcmlnU2NvcGVcIiAnICtcbiAgICAgICAgICAnY2xhc3M9XCJ1aWItcG9zaXRpb24tbWVhc3VyZSAnICsgcHJlZml4ICsgJ1wiICcgK1xuICAgICAgICAgICd0b29sdGlwLWFuaW1hdGlvbi1jbGFzcz1cImZhZGVcIicgK1xuICAgICAgICAgICd1aWItdG9vbHRpcC1jbGFzc2VzICcgK1xuICAgICAgICAgICduZy1jbGFzcz1cInsgaW46IGlzT3BlbiB9XCIgJyArXG4gICAgICAgICAgJz4nICtcbiAgICAgICAgJzwvZGl2Pic7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtLCB0QXR0cnMpIHtcbiAgICAgICAgICB2YXIgdG9vbHRpcExpbmtlciA9ICRjb21waWxlKHRlbXBsYXRlKTtcblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgdG9vbHRpcEN0cmwpIHtcbiAgICAgICAgICAgIHZhciB0b29sdGlwO1xuICAgICAgICAgICAgdmFyIHRvb2x0aXBMaW5rZWRTY29wZTtcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgICAgICAgIHZhciBzaG93VGltZW91dDtcbiAgICAgICAgICAgIHZhciBoaWRlVGltZW91dDtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvblRpbWVvdXQ7XG4gICAgICAgICAgICB2YXIgYWRqdXN0bWVudFRpbWVvdXQ7XG4gICAgICAgICAgICB2YXIgYXBwZW5kVG9Cb2R5ID0gYW5ndWxhci5pc0RlZmluZWQob3B0aW9ucy5hcHBlbmRUb0JvZHkpID8gb3B0aW9ucy5hcHBlbmRUb0JvZHkgOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VycyA9IGdldFRyaWdnZXJzKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB2YXIgaGFzRW5hYmxlRXhwID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnNbcHJlZml4ICsgJ0VuYWJsZSddKTtcbiAgICAgICAgICAgIHZhciB0dFNjb3BlID0gc2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgICAgIHZhciByZXBvc2l0aW9uU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaXNPcGVuUGFyc2UgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyc1twcmVmaXggKyAnSXNPcGVuJ10pID8gJHBhcnNlKGF0dHJzW3ByZWZpeCArICdJc09wZW4nXSkgOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciBjb250ZW50UGFyc2UgPSBvcHRpb25zLnVzZUNvbnRlbnRFeHAgPyAkcGFyc2UoYXR0cnNbdHRUeXBlXSkgOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBsYXN0UGxhY2VtZW50O1xuXG4gICAgICAgICAgICB2YXIgcG9zaXRpb25Ub29sdGlwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRvb2x0aXAgZXhpc3RzIGFuZCBpcyBub3QgZW1wdHlcbiAgICAgICAgICAgICAgaWYgKCF0b29sdGlwIHx8ICF0b29sdGlwLmh0bWwoKSkgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgICBpZiAoIXBvc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uVGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHR0UG9zaXRpb24gPSAkcG9zaXRpb24ucG9zaXRpb25FbGVtZW50cyhlbGVtZW50LCB0b29sdGlwLCB0dFNjb3BlLnBsYWNlbWVudCwgYXBwZW5kVG9Cb2R5KTtcbiAgICAgICAgICAgICAgICAgIHZhciBpbml0aWFsSGVpZ2h0ID0gYW5ndWxhci5pc0RlZmluZWQodG9vbHRpcC5vZmZzZXRIZWlnaHQpID8gdG9vbHRpcC5vZmZzZXRIZWlnaHQgOiB0b29sdGlwLnByb3AoJ29mZnNldEhlaWdodCcpO1xuICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRQb3MgPSBhcHBlbmRUb0JvZHkgPyAkcG9zaXRpb24ub2Zmc2V0KGVsZW1lbnQpIDogJHBvc2l0aW9uLnBvc2l0aW9uKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgdG9vbHRpcC5jc3MoeyB0b3A6IHR0UG9zaXRpb24udG9wICsgJ3B4JywgbGVmdDogdHRQb3NpdGlvbi5sZWZ0ICsgJ3B4JyB9KTtcbiAgICAgICAgICAgICAgICAgIHZhciBwbGFjZW1lbnRDbGFzc2VzID0gdHRQb3NpdGlvbi5wbGFjZW1lbnQuc3BsaXQoJy0nKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKCF0b29sdGlwLmhhc0NsYXNzKHBsYWNlbWVudENsYXNzZXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAucmVtb3ZlQ2xhc3MobGFzdFBsYWNlbWVudC5zcGxpdCgnLScpWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5hZGRDbGFzcyhwbGFjZW1lbnRDbGFzc2VzWzBdKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKCF0b29sdGlwLmhhc0NsYXNzKG9wdGlvbnMucGxhY2VtZW50Q2xhc3NQcmVmaXggKyB0dFBvc2l0aW9uLnBsYWNlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmVDbGFzcyhvcHRpb25zLnBsYWNlbWVudENsYXNzUHJlZml4ICsgbGFzdFBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuYWRkQ2xhc3Mob3B0aW9ucy5wbGFjZW1lbnRDbGFzc1ByZWZpeCArIHR0UG9zaXRpb24ucGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYWRqdXN0bWVudFRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBhbmd1bGFyLmlzRGVmaW5lZCh0b29sdGlwLm9mZnNldEhlaWdodCkgPyB0b29sdGlwLm9mZnNldEhlaWdodCA6IHRvb2x0aXAucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhZGp1c3RtZW50ID0gJHBvc2l0aW9uLmFkanVzdFRvcChwbGFjZW1lbnRDbGFzc2VzLCBlbGVtZW50UG9zLCBpbml0aWFsSGVpZ2h0LCBjdXJyZW50SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkanVzdG1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwLmNzcyhhZGp1c3RtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhZGp1c3RtZW50VGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIGZpcnN0IHRpbWUgdGhyb3VnaCB0dCBlbGVtZW50IHdpbGwgaGF2ZSB0aGVcbiAgICAgICAgICAgICAgICAgIC8vIHVpYi1wb3NpdGlvbi1tZWFzdXJlIGNsYXNzIG9yIGlmIHRoZSBwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICAgIC8vIGhhcyBjaGFuZ2VkIHdlIG5lZWQgdG8gcG9zaXRpb24gdGhlIGFycm93LlxuICAgICAgICAgICAgICAgICAgaWYgKHRvb2x0aXAuaGFzQ2xhc3MoJ3VpYi1wb3NpdGlvbi1tZWFzdXJlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJHBvc2l0aW9uLnBvc2l0aW9uQXJyb3codG9vbHRpcCwgdHRQb3NpdGlvbi5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLnJlbW92ZUNsYXNzKCd1aWItcG9zaXRpb24tbWVhc3VyZScpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0UGxhY2VtZW50ICE9PSB0dFBvc2l0aW9uLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAkcG9zaXRpb24ucG9zaXRpb25BcnJvdyh0b29sdGlwLCB0dFBvc2l0aW9uLnBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBsYXN0UGxhY2VtZW50ID0gdHRQb3NpdGlvbi5wbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBTZXQgdXAgdGhlIGNvcnJlY3Qgc2NvcGUgdG8gYWxsb3cgdHJhbnNjbHVzaW9uIGxhdGVyXG4gICAgICAgICAgICB0dFNjb3BlLm9yaWdTY29wZSA9IHNjb3BlO1xuXG4gICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCB0aGUgdG9vbHRpcCBpcyBub3Qgb3Blbi5cbiAgICAgICAgICAgIC8vIFRPRE8gYWRkIGFiaWxpdHkgdG8gc3RhcnQgdG9vbHRpcCBvcGVuZWRcbiAgICAgICAgICAgIHR0U2NvcGUuaXNPcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvZ2dsZVRvb2x0aXBCaW5kKCkge1xuICAgICAgICAgICAgICBpZiAoIXR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgc2hvd1Rvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hvdyB0aGUgdG9vbHRpcCB3aXRoIGRlbGF5IGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIHNob3cgaXQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dUb29sdGlwQmluZCgpIHtcbiAgICAgICAgICAgICAgaWYgKGhhc0VuYWJsZUV4cCAmJiAhc2NvcGUuJGV2YWwoYXR0cnNbcHJlZml4ICsgJ0VuYWJsZSddKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNhbmNlbEhpZGUoKTtcbiAgICAgICAgICAgICAgcHJlcGFyZVRvb2x0aXAoKTtcblxuICAgICAgICAgICAgICBpZiAodHRTY29wZS5wb3B1cERlbGF5KSB7XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiB0aGUgdG9vbHRpcCB3YXMgYWxyZWFkeSBzY2hlZHVsZWQgdG8gcG9wLXVwLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaGFwcGVucyBpZiBzaG93IGlzIHRyaWdnZXJlZCBtdWx0aXBsZSB0aW1lcyBiZWZvcmUgYW55IGhpZGUgaXMgdHJpZ2dlcmVkLlxuICAgICAgICAgICAgICAgIGlmICghc2hvd1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgIHNob3dUaW1lb3V0ID0gJHRpbWVvdXQoc2hvdywgdHRTY29wZS5wb3B1cERlbGF5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBoaWRlVG9vbHRpcEJpbmQoKSB7XG4gICAgICAgICAgICAgIGNhbmNlbFNob3coKTtcblxuICAgICAgICAgICAgICBpZiAodHRTY29wZS5wb3B1cENsb3NlRGVsYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhpZGVUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICBoaWRlVGltZW91dCA9ICR0aW1lb3V0KGhpZGUsIHR0U2NvcGUucG9wdXBDbG9zZURlbGF5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTaG93IHRoZSB0b29sdGlwIHBvcHVwIGVsZW1lbnQuXG4gICAgICAgICAgICBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICAgICAgICBjYW5jZWxTaG93KCk7XG4gICAgICAgICAgICAgIGNhbmNlbEhpZGUoKTtcblxuICAgICAgICAgICAgICAvLyBEb24ndCBzaG93IGVtcHR5IHRvb2x0aXBzLlxuICAgICAgICAgICAgICBpZiAoIXR0U2NvcGUuY29udGVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLm5vb3A7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjcmVhdGVUb29sdGlwKCk7XG5cbiAgICAgICAgICAgICAgLy8gQW5kIHNob3cgdGhlIHRvb2x0aXAuXG4gICAgICAgICAgICAgIHR0U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0dFNjb3BlLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXNzaWduSXNPcGVuKHRydWUpO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsU2hvdygpIHtcbiAgICAgICAgICAgICAgaWYgKHNob3dUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHNob3dUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBzaG93VGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocG9zaXRpb25UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHBvc2l0aW9uVGltZW91dCk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25UaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSB0b29sdGlwIHBvcHVwIGVsZW1lbnQuXG4gICAgICAgICAgICBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICAgICAgICBpZiAoIXR0U2NvcGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBGaXJzdCB0aGluZ3MgZmlyc3Q6IHdlIGRvbid0IHNob3cgaXQgYW55bW9yZS5cbiAgICAgICAgICAgICAgdHRTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICB0dFNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgYXNzaWduSXNPcGVuKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIC8vIEFuZCBub3cgd2UgcmVtb3ZlIGl0IGZyb20gdGhlIERPTS4gSG93ZXZlciwgaWYgd2UgaGF2ZSBhbmltYXRpb24sIHdlXG4gICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHdhaXQgZm9yIGl0IHRvIGV4cGlyZSBiZWZvcmVoYW5kLlxuICAgICAgICAgICAgICAgICAgLy8gRklYTUU6IHRoaXMgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSBwb3J0IG9mIHRoZSB0cmFuc2l0aW9ucyBsaWJyYXJ5LlxuICAgICAgICAgICAgICAgICAgLy8gVGhlIGZhZGUgdHJhbnNpdGlvbiBpbiBUV0JTIGlzIDE1MG1zLlxuICAgICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNpdGlvblRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltZW91dCA9ICR0aW1lb3V0KHJlbW92ZVRvb2x0aXAsIDE1MCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVUb29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FuY2VsSGlkZSgpIHtcbiAgICAgICAgICAgICAgaWYgKGhpZGVUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGhpZGVUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBoaWRlVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodHJhbnNpdGlvblRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVUb29sdGlwKCkge1xuICAgICAgICAgICAgICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgdG9vbHRpcCBlbGVtZW50IHBlciBkaXJlY3RpdmUgc2hvd24gYXQgb25jZS5cbiAgICAgICAgICAgICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUgPSB0dFNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgdG9vbHRpcCA9IHRvb2x0aXBMaW5rZXIodG9vbHRpcExpbmtlZFNjb3BlLCBmdW5jdGlvbih0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgICAgICAgICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5hcHBlbmQodG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWZ0ZXIodG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBvcGVuZWRUb29sdGlwcy5hZGQodHRTY29wZSwge1xuICAgICAgICAgICAgICAgIGNsb3NlOiBoaWRlXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHByZXBPYnNlcnZlcnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVG9vbHRpcCgpIHtcbiAgICAgICAgICAgICAgY2FuY2VsU2hvdygpO1xuICAgICAgICAgICAgICBjYW5jZWxIaWRlKCk7XG4gICAgICAgICAgICAgIHVucmVnaXN0ZXJPYnNlcnZlcnMoKTtcblxuICAgICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHRvb2x0aXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdG9vbHRpcCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGFkanVzdG1lbnRUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoYWRqdXN0bWVudFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9wZW5lZFRvb2x0aXBzLnJlbW92ZSh0dFNjb3BlKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGlmICh0b29sdGlwTGlua2VkU2NvcGUpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IHRoZSBpbml0aWFsIHNjb3BlIHZhbHVlcy4gT25jZVxuICAgICAgICAgICAgICogdGhlIHRvb2x0aXAgaXMgY3JlYXRlZCwgdGhlIG9ic2VydmVyc1xuICAgICAgICAgICAgICogd2lsbCBiZSBhZGRlZCB0byBrZWVwIHRoaW5ncyBpbiBzeW5jLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVwYXJlVG9vbHRpcCgpIHtcbiAgICAgICAgICAgICAgdHRTY29wZS50aXRsZSA9IGF0dHJzW3ByZWZpeCArICdUaXRsZSddO1xuICAgICAgICAgICAgICBpZiAoY29udGVudFBhcnNlKSB7XG4gICAgICAgICAgICAgICAgdHRTY29wZS5jb250ZW50ID0gY29udGVudFBhcnNlKHNjb3BlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnQgPSBhdHRyc1t0dFR5cGVdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdHRTY29wZS5wb3B1cENsYXNzID0gYXR0cnNbcHJlZml4ICsgJ0NsYXNzJ107XG4gICAgICAgICAgICAgIHR0U2NvcGUucGxhY2VtZW50ID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnNbcHJlZml4ICsgJ1BsYWNlbWVudCddKSA/IGF0dHJzW3ByZWZpeCArICdQbGFjZW1lbnQnXSA6IG9wdGlvbnMucGxhY2VtZW50O1xuICAgICAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gJHBvc2l0aW9uLnBhcnNlUGxhY2VtZW50KHR0U2NvcGUucGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgbGFzdFBsYWNlbWVudCA9IHBsYWNlbWVudFsxXSA/IHBsYWNlbWVudFswXSArICctJyArIHBsYWNlbWVudFsxXSA6IHBsYWNlbWVudFswXTtcblxuICAgICAgICAgICAgICB2YXIgZGVsYXkgPSBwYXJzZUludChhdHRyc1twcmVmaXggKyAnUG9wdXBEZWxheSddLCAxMCk7XG4gICAgICAgICAgICAgIHZhciBjbG9zZURlbGF5ID0gcGFyc2VJbnQoYXR0cnNbcHJlZml4ICsgJ1BvcHVwQ2xvc2VEZWxheSddLCAxMCk7XG4gICAgICAgICAgICAgIHR0U2NvcGUucG9wdXBEZWxheSA9ICFpc05hTihkZWxheSkgPyBkZWxheSA6IG9wdGlvbnMucG9wdXBEZWxheTtcbiAgICAgICAgICAgICAgdHRTY29wZS5wb3B1cENsb3NlRGVsYXkgPSAhaXNOYU4oY2xvc2VEZWxheSkgPyBjbG9zZURlbGF5IDogb3B0aW9ucy5wb3B1cENsb3NlRGVsYXk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFzc2lnbklzT3Blbihpc09wZW4pIHtcbiAgICAgICAgICAgICAgaWYgKGlzT3BlblBhcnNlICYmIGFuZ3VsYXIuaXNGdW5jdGlvbihpc09wZW5QYXJzZS5hc3NpZ24pKSB7XG4gICAgICAgICAgICAgICAgaXNPcGVuUGFyc2UuYXNzaWduKHNjb3BlLCBpc09wZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR0U2NvcGUuY29udGVudEV4cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHRTY29wZS5jb250ZW50O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPYnNlcnZlIHRoZSByZWxldmFudCBhdHRyaWJ1dGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZSgnZGlzYWJsZWQnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgIGNhbmNlbFNob3coKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh2YWwgJiYgdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoaXNPcGVuUGFyc2UpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGlzT3BlblBhcnNlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHRTY29wZSAmJiAhdmFsID09PSB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgdG9nZ2xlVG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVwT2JzZXJ2ZXJzKCkge1xuICAgICAgICAgICAgICBvYnNlcnZlcnMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICBpZiAoY29udGVudFBhcnNlKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goY29udGVudFBhcnNlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdHRTY29wZS5jb250ZW50ID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbCAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcG9zaXRpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXBvc2l0aW9uU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3NpdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUgJiYgdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKHR0VHlwZSwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHR0U2NvcGUuY29udGVudCA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWwgJiYgdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKFxuICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKHByZWZpeCArICdUaXRsZScsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgdHRTY29wZS50aXRsZSA9IHZhbDtcbiAgICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKFxuICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKHByZWZpeCArICdQbGFjZW1lbnQnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgIHR0U2NvcGUucGxhY2VtZW50ID0gdmFsID8gdmFsIDogb3B0aW9ucy5wbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgICBpZiAodHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdW5yZWdpc3Rlck9ic2VydmVycygpIHtcbiAgICAgICAgICAgICAgaWYgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gob2JzZXJ2ZXJzLCBmdW5jdGlvbihvYnNlcnZlcikge1xuICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBoaWRlIHRvb2x0aXBzL3BvcG92ZXJzIGZvciBvdXRzaWRlQ2xpY2sgdHJpZ2dlclxuICAgICAgICAgICAgZnVuY3Rpb24gYm9keUhpZGVUb29sdGlwQmluZChlKSB7XG4gICAgICAgICAgICAgIGlmICghdHRTY29wZSB8fCAhdHRTY29wZS5pc09wZW4gfHwgIXRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSB0b29sdGlwL3BvcG92ZXIgbGluayBvciB0b29sIHRvb2x0aXAvcG9wb3ZlciBpdHNlbGYgd2VyZSBub3QgY2xpY2tlZFxuICAgICAgICAgICAgICBpZiAoIWVsZW1lbnRbMF0uY29udGFpbnMoZS50YXJnZXQpICYmICF0b29sdGlwWzBdLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIGhpZGVUb29sdGlwQmluZCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtleWJvYXJkRXZlbnQgaGFuZGxlciB0byBoaWRlIHRoZSB0b29sdGlwIG9uIEVzY2FwZSBrZXkgcHJlc3NcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGVPbkVzY2FwZUtleShlKSB7XG4gICAgICAgICAgICAgIGlmIChlLndoaWNoID09PSAyNykge1xuICAgICAgICAgICAgICAgIGhpZGVUb29sdGlwQmluZCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB1bnJlZ2lzdGVyVHJpZ2dlcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdHJpZ2dlcnMuc2hvdy5mb3JFYWNoKGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ291dHNpZGVDbGljaycpIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQub2ZmKCdjbGljaycsIHRvZ2dsZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vZmYodHJpZ2dlciwgc2hvd1Rvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQub2ZmKHRyaWdnZXIsIHRvZ2dsZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudC5vZmYoJ2tleXByZXNzJywgaGlkZU9uRXNjYXBlS2V5KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHRyaWdnZXJzLmhpZGUuZm9yRWFjaChmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdvdXRzaWRlQ2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGJvZHlIaWRlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZih0cmlnZ2VyLCBoaWRlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVwVHJpZ2dlcnMoKSB7XG4gICAgICAgICAgICAgIHZhciBzaG93VHJpZ2dlcnMgPSBbXSwgaGlkZVRyaWdnZXJzID0gW107XG4gICAgICAgICAgICAgIHZhciB2YWwgPSBzY29wZS4kZXZhbChhdHRyc1twcmVmaXggKyAnVHJpZ2dlciddKTtcbiAgICAgICAgICAgICAgdW5yZWdpc3RlclRyaWdnZXJzKCk7XG5cbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QodmFsKSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICAgIHNob3dUcmlnZ2Vycy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICBoaWRlVHJpZ2dlcnMucHVzaCh2YWxba2V5XSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcnMgPSB7XG4gICAgICAgICAgICAgICAgICBzaG93OiBzaG93VHJpZ2dlcnMsXG4gICAgICAgICAgICAgICAgICBoaWRlOiBoaWRlVHJpZ2dlcnNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJzID0gZ2V0VHJpZ2dlcnModmFsKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0cmlnZ2Vycy5zaG93ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2Vycy5zaG93LmZvckVhY2goZnVuY3Rpb24odHJpZ2dlciwgaWR4KSB7XG4gICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ291dHNpZGVDbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbignY2xpY2snLCB0b2dnbGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5vbignY2xpY2snLCBib2R5SGlkZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciA9PT0gdHJpZ2dlcnMuaGlkZVtpZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24odHJpZ2dlciwgdG9nZ2xlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24odHJpZ2dlciwgc2hvd1Rvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbih0cmlnZ2Vycy5oaWRlW2lkeF0sIGhpZGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdrZXlwcmVzcycsIGhpZGVPbkVzY2FwZUtleSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJlcFRyaWdnZXJzKCk7XG5cbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBzY29wZS4kZXZhbChhdHRyc1twcmVmaXggKyAnQW5pbWF0aW9uJ10pO1xuICAgICAgICAgICAgdHRTY29wZS5hbmltYXRpb24gPSBhbmd1bGFyLmlzRGVmaW5lZChhbmltYXRpb24pID8gISFhbmltYXRpb24gOiBvcHRpb25zLmFuaW1hdGlvbjtcblxuICAgICAgICAgICAgdmFyIGFwcGVuZFRvQm9keVZhbDtcbiAgICAgICAgICAgIHZhciBhcHBlbmRLZXkgPSBwcmVmaXggKyAnQXBwZW5kVG9Cb2R5JztcbiAgICAgICAgICAgIGlmIChhcHBlbmRLZXkgaW4gYXR0cnMgJiYgYXR0cnNbYXBwZW5kS2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGFwcGVuZFRvQm9keVZhbCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhcHBlbmRUb0JvZHlWYWwgPSBzY29wZS4kZXZhbChhdHRyc1thcHBlbmRLZXldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBwZW5kVG9Cb2R5ID0gYW5ndWxhci5pc0RlZmluZWQoYXBwZW5kVG9Cb2R5VmFsKSA/IGFwcGVuZFRvQm9keVZhbCA6IGFwcGVuZFRvQm9keTtcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRvb2x0aXAgaXMgZGVzdHJveWVkIGFuZCByZW1vdmVkLlxuICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIG9uRGVzdHJveVRvb2x0aXAoKSB7XG4gICAgICAgICAgICAgIHVucmVnaXN0ZXJUcmlnZ2VycygpO1xuICAgICAgICAgICAgICByZW1vdmVUb29sdGlwKCk7XG4gICAgICAgICAgICAgIHR0U2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XTtcbn0pXG5cbi8vIFRoaXMgaXMgbW9zdGx5IG5nSW5jbHVkZSBjb2RlIGJ1dCB3aXRoIGEgY3VzdG9tIHNjb3BlXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlJywgW1xuICAgICAgICAgJyRhbmltYXRlJywgJyRzY2UnLCAnJGNvbXBpbGUnLCAnJHRlbXBsYXRlUmVxdWVzdCcsXG5mdW5jdGlvbiAoJGFuaW1hdGUsICRzY2UsICRjb21waWxlLCAkdGVtcGxhdGVSZXF1ZXN0KSB7XG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgICB2YXIgb3JpZ1Njb3BlID0gc2NvcGUuJGV2YWwoYXR0cnMudG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZVNjb3BlKTtcblxuICAgICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwLFxuICAgICAgICBjdXJyZW50U2NvcGUsXG4gICAgICAgIHByZXZpb3VzRWxlbWVudCxcbiAgICAgICAgY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgIHZhciBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQpIHtcbiAgICAgICAgICBwcmV2aW91c0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUoY3VycmVudEVsZW1lbnQpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IGN1cnJlbnRFbGVtZW50O1xuICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKGF0dHJzLnVpYlRvb2x0aXBUZW1wbGF0ZVRyYW5zY2x1ZGUpLCBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcblxuICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgIC8vY29udGVudHMgYW5kIHNjb3BlIGNhbiBiZSBjbGVhbmVkIHVwLlxuICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Qoc3JjLCB0cnVlKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgdmFyIG5ld1Njb3BlID0gb3JpZ1Njb3BlLiRuZXcoKTtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICB2YXIgY2xvbmUgPSAkY29tcGlsZSh0ZW1wbGF0ZSkobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIGVsZW0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjbG9uZTtcblxuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCA9PT0gY2hhbmdlQ291bnRlcikge1xuICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4vKipcbiAqIE5vdGUgdGhhdCBpdCdzIGludGVudGlvbmFsIHRoYXQgdGhlc2UgY2xhc3NlcyBhcmUgKm5vdCogYXBwbGllZCB0aHJvdWdoICRhbmltYXRlLlxuICogVGhleSBtdXN0IG5vdCBiZSBhbmltYXRlZCBhcyB0aGV5J3JlIGV4cGVjdGVkIHRvIGJlIHByZXNlbnQgb24gdGhlIHRvb2x0aXAgb25cbiAqIGluaXRpYWxpemF0aW9uLlxuICovXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwQ2xhc3NlcycsIFsnJHVpYlBvc2l0aW9uJywgZnVuY3Rpb24oJHVpYlBvc2l0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIC8vIG5lZWQgdG8gc2V0IHRoZSBwcmltYXJ5IHBvc2l0aW9uIHNvIHRoZVxuICAgICAgLy8gYXJyb3cgaGFzIHNwYWNlIGR1cmluZyBwb3NpdGlvbiBtZWFzdXJlLlxuICAgICAgLy8gdG9vbHRpcC5wb3NpdGlvblRvb2x0aXAoKVxuICAgICAgaWYgKHNjb3BlLnBsYWNlbWVudCkge1xuICAgICAgICAvLyAvLyBUaGVyZSBhcmUgbm8gdG9wLWxlZnQgZXRjLi4uIGNsYXNzZXNcbiAgICAgICAgLy8gLy8gaW4gVFdCUywgc28gd2UgbmVlZCB0aGUgcHJpbWFyeSBwb3NpdGlvbi5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gJHVpYlBvc2l0aW9uLnBhcnNlUGxhY2VtZW50KHNjb3BlLnBsYWNlbWVudCk7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MocG9zaXRpb25bMF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NvcGUucG9wdXBDbGFzcykge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKHNjb3BlLnBvcHVwQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NvcGUuYW5pbWF0aW9uKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoYXR0cnMudG9vbHRpcEFuaW1hdGlvbkNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcFBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogeyBjb250ZW50OiAnQCcgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXAnLCBbICckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliVG9vbHRpcCcsICd0b29sdGlwJywgJ21vdXNlZW50ZXInKTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwVGVtcGxhdGVQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgY29udGVudEV4cDogJyYnLCBvcmlnaW5TY29wZTogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwVGVtcGxhdGUnLCBbJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJUb29sdGlwVGVtcGxhdGUnLCAndG9vbHRpcCcsICdtb3VzZWVudGVyJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcEh0bWxQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgY29udGVudEV4cDogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBIdG1sJywgWyckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliVG9vbHRpcEh0bWwnLCAndG9vbHRpcCcsICdtb3VzZWVudGVyJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSk7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBmZWF0dXJlcyBhcmUgc3RpbGwgb3V0c3RhbmRpbmc6IHBvcHVwIGRlbGF5LCBhbmltYXRpb24gYXMgYVxuICogZnVuY3Rpb24sIHBsYWNlbWVudCBhcyBhIGZ1bmN0aW9uLCBpbnNpZGUsIHN1cHBvcnQgZm9yIG1vcmUgdHJpZ2dlcnMgdGhhblxuICoganVzdCBtb3VzZSBlbnRlci9sZWF2ZSwgYW5kIHNlbGVjdG9yIGRlbGVnYXRhdGlvbi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wb3BvdmVyJywgWyd1aS5ib290c3RyYXAudG9vbHRpcCddKVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVyVGVtcGxhdGVQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgdWliVGl0bGU6ICdAJywgY29udGVudEV4cDogJyYnLCBvcmlnaW5TY29wZTogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLXRlbXBsYXRlLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVyVGVtcGxhdGUnLCBbJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJQb3BvdmVyVGVtcGxhdGUnLCAncG9wb3ZlcicsICdjbGljaycsIHtcbiAgICB1c2VDb250ZW50RXhwOiB0cnVlXG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBvcG92ZXJIdG1sUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IGNvbnRlbnRFeHA6ICcmJywgdWliVGl0bGU6ICdAJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci1odG1sLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVySHRtbCcsIFsnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlBvcG92ZXJIdG1sJywgJ3BvcG92ZXInLCAnY2xpY2snLCB7XG4gICAgdXNlQ29udGVudEV4cDogdHJ1ZVxuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVyUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IHVpYlRpdGxlOiAnQCcsIGNvbnRlbnQ6ICdAJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliUG9wb3ZlcicsIFsnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlBvcG92ZXInLCAncG9wb3ZlcicsICdjbGljaycpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnByb2dyZXNzYmFyJywgW10pXG5cbi5jb25zdGFudCgndWliUHJvZ3Jlc3NDb25maWcnLCB7XG4gIGFuaW1hdGU6IHRydWUsXG4gIG1heDogMTAwXG59KVxuXG4uY29udHJvbGxlcignVWliUHJvZ3Jlc3NDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ3VpYlByb2dyZXNzQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsIHByb2dyZXNzQ29uZmlnKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGFuaW1hdGUgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYW5pbWF0ZSkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYW5pbWF0ZSkgOiBwcm9ncmVzc0NvbmZpZy5hbmltYXRlO1xuXG4gIHRoaXMuYmFycyA9IFtdO1xuICAkc2NvcGUubWF4ID0gZ2V0TWF4T3JEZWZhdWx0KCk7XG5cbiAgdGhpcy5hZGRCYXIgPSBmdW5jdGlvbihiYXIsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgaWYgKCFhbmltYXRlKSB7XG4gICAgICBlbGVtZW50LmNzcyh7J3RyYW5zaXRpb24nOiAnbm9uZSd9KTtcbiAgICB9XG5cbiAgICB0aGlzLmJhcnMucHVzaChiYXIpO1xuXG4gICAgYmFyLm1heCA9IGdldE1heE9yRGVmYXVsdCgpO1xuICAgIGJhci50aXRsZSA9IGF0dHJzICYmIGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnRpdGxlKSA/IGF0dHJzLnRpdGxlIDogJ3Byb2dyZXNzYmFyJztcblxuICAgIGJhci4kd2F0Y2goJ3ZhbHVlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICB9KTtcblxuICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0b3RhbFBlcmNlbnRhZ2UgPSBzZWxmLmJhcnMucmVkdWNlKGZ1bmN0aW9uKHRvdGFsLCBiYXIpIHtcbiAgICAgICAgYmFyLnBlcmNlbnQgPSArKDEwMCAqIGJhci52YWx1ZSAvIGJhci5tYXgpLnRvRml4ZWQoMik7XG4gICAgICAgIHJldHVybiB0b3RhbCArIGJhci5wZXJjZW50O1xuICAgICAgfSwgMCk7XG5cbiAgICAgIGlmICh0b3RhbFBlcmNlbnRhZ2UgPiAxMDApIHtcbiAgICAgICAgYmFyLnBlcmNlbnQgLT0gdG90YWxQZXJjZW50YWdlIC0gMTAwO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBiYXIuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgZWxlbWVudCA9IG51bGw7XG4gICAgICBzZWxmLnJlbW92ZUJhcihiYXIpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMucmVtb3ZlQmFyID0gZnVuY3Rpb24oYmFyKSB7XG4gICAgdGhpcy5iYXJzLnNwbGljZSh0aGlzLmJhcnMuaW5kZXhPZihiYXIpLCAxKTtcbiAgICB0aGlzLmJhcnMuZm9yRWFjaChmdW5jdGlvbiAoYmFyKSB7XG4gICAgICBiYXIucmVjYWxjdWxhdGVQZXJjZW50YWdlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8kYXR0cnMuJG9ic2VydmUoJ21heFBhcmFtJywgZnVuY3Rpb24obWF4UGFyYW0pIHtcbiAgJHNjb3BlLiR3YXRjaCgnbWF4UGFyYW0nLCBmdW5jdGlvbihtYXhQYXJhbSkge1xuICAgIHNlbGYuYmFycy5mb3JFYWNoKGZ1bmN0aW9uKGJhcikge1xuICAgICAgYmFyLm1heCA9IGdldE1heE9yRGVmYXVsdCgpO1xuICAgICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBmdW5jdGlvbiBnZXRNYXhPckRlZmF1bHQgKCkge1xuICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUubWF4UGFyYW0pID8gJHNjb3BlLm1heFBhcmFtIDogcHJvZ3Jlc3NDb25maWcubWF4O1xuICB9XG59XSlcblxuLmRpcmVjdGl2ZSgndWliUHJvZ3Jlc3MnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ1VpYlByb2dyZXNzQ29udHJvbGxlcicsXG4gICAgcmVxdWlyZTogJ3VpYlByb2dyZXNzJyxcbiAgICBzY29wZToge1xuICAgICAgbWF4UGFyYW06ICc9P21heCdcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJCYXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgcmVxdWlyZTogJ151aWJQcm9ncmVzcycsXG4gICAgc2NvcGU6IHtcbiAgICAgIHZhbHVlOiAnPScsXG4gICAgICB0eXBlOiAnQCdcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIHByb2dyZXNzQ3RybCkge1xuICAgICAgcHJvZ3Jlc3NDdHJsLmFkZEJhcihzY29wZSwgZWxlbWVudCwgYXR0cnMpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlByb2dyZXNzYmFyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJQcm9ncmVzc0NvbnRyb2xsZXInLFxuICAgIHNjb3BlOiB7XG4gICAgICB2YWx1ZTogJz0nLFxuICAgICAgbWF4UGFyYW06ICc9P21heCcsXG4gICAgICB0eXBlOiAnQCdcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzYmFyLmh0bWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgcHJvZ3Jlc3NDdHJsKSB7XG4gICAgICBwcm9ncmVzc0N0cmwuYWRkQmFyKHNjb3BlLCBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudC5jaGlsZHJlbigpWzBdKSwge3RpdGxlOiBhdHRycy50aXRsZX0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnJhdGluZycsIFtdKVxuXG4uY29uc3RhbnQoJ3VpYlJhdGluZ0NvbmZpZycsIHtcbiAgbWF4OiA1LFxuICBzdGF0ZU9uOiBudWxsLFxuICBzdGF0ZU9mZjogbnVsbCxcbiAgZW5hYmxlUmVzZXQ6IHRydWUsXG4gIHRpdGxlczogWydvbmUnLCAndHdvJywgJ3RocmVlJywgJ2ZvdXInLCAnZml2ZSddXG59KVxuXG4uY29udHJvbGxlcignVWliUmF0aW5nQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICd1aWJSYXRpbmdDb25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgcmF0aW5nQ29uZmlnKSB7XG4gIHZhciBuZ01vZGVsQ3RybCA9IHsgJHNldFZpZXdWYWx1ZTogYW5ndWxhci5ub29wIH0sXG4gICAgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfKSB7XG4gICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87XG4gICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IHRoaXMucmVuZGVyO1xuXG4gICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlIDw8IDAgIT09IHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuc3RhdGVPbiA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5zdGF0ZU9uKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5zdGF0ZU9uKSA6IHJhdGluZ0NvbmZpZy5zdGF0ZU9uO1xuICAgIHRoaXMuc3RhdGVPZmYgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc3RhdGVPZmYpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnN0YXRlT2ZmKSA6IHJhdGluZ0NvbmZpZy5zdGF0ZU9mZjtcbiAgICB0aGlzLmVuYWJsZVJlc2V0ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmVuYWJsZVJlc2V0KSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuZW5hYmxlUmVzZXQpIDogcmF0aW5nQ29uZmlnLmVuYWJsZVJlc2V0O1xuICAgIHZhciB0bXBUaXRsZXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMudGl0bGVzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy50aXRsZXMpIDogcmF0aW5nQ29uZmlnLnRpdGxlcztcbiAgICB0aGlzLnRpdGxlcyA9IGFuZ3VsYXIuaXNBcnJheSh0bXBUaXRsZXMpICYmIHRtcFRpdGxlcy5sZW5ndGggPiAwID9cbiAgICAgIHRtcFRpdGxlcyA6IHJhdGluZ0NvbmZpZy50aXRsZXM7XG5cbiAgICB2YXIgcmF0aW5nU3RhdGVzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnJhdGluZ1N0YXRlcykgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnJhdGluZ1N0YXRlcykgOlxuICAgICAgbmV3IEFycmF5KGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5tYXgpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1heCkgOiByYXRpbmdDb25maWcubWF4KTtcbiAgICAkc2NvcGUucmFuZ2UgPSB0aGlzLmJ1aWxkVGVtcGxhdGVPYmplY3RzKHJhdGluZ1N0YXRlcyk7XG4gIH07XG5cbiAgdGhpcy5idWlsZFRlbXBsYXRlT2JqZWN0cyA9IGZ1bmN0aW9uKHN0YXRlcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gc3RhdGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgc3RhdGVzW2ldID0gYW5ndWxhci5leHRlbmQoeyBpbmRleDogaSB9LCB7IHN0YXRlT246IHRoaXMuc3RhdGVPbiwgc3RhdGVPZmY6IHRoaXMuc3RhdGVPZmYsIHRpdGxlOiB0aGlzLmdldFRpdGxlKGkpIH0sIHN0YXRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZXM7XG4gIH07XG5cbiAgdGhpcy5nZXRUaXRsZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHRoaXMudGl0bGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50aXRsZXNbaW5kZXhdO1xuICB9O1xuXG4gICRzY29wZS5yYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoISRzY29wZS5yZWFkb25seSAmJiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9ICRzY29wZS5yYW5nZS5sZW5ndGgpIHtcbiAgICAgIHZhciBuZXdWaWV3VmFsdWUgPSBzZWxmLmVuYWJsZVJlc2V0ICYmIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT09IHZhbHVlID8gMCA6IHZhbHVlO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXdWaWV3VmFsdWUpO1xuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZW50ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghJHNjb3BlLnJlYWRvbmx5KSB7XG4gICAgICAkc2NvcGUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgJHNjb3BlLm9uSG92ZXIoe3ZhbHVlOiB2YWx1ZX0pO1xuICB9O1xuXG4gICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS52YWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgJHNjb3BlLm9uTGVhdmUoKTtcbiAgfTtcblxuICAkc2NvcGUub25LZXlkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgaWYgKC8oMzd8Mzh8Mzl8NDApLy50ZXN0KGV2dC53aGljaCkpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgJHNjb3BlLnJhdGUoJHNjb3BlLnZhbHVlICsgKGV2dC53aGljaCA9PT0gMzggfHwgZXZ0LndoaWNoID09PSAzOSA/IDEgOiAtMSkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICRzY29wZS52YWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgJHNjb3BlLnRpdGxlID0gc2VsZi5nZXRUaXRsZSgkc2NvcGUudmFsdWUgLSAxKTtcbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJSYXRpbmcnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ3VpYlJhdGluZycsICduZ01vZGVsJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcmVhZG9ubHk6ICc9P3JlYWRPbmx5JyxcbiAgICAgIG9uSG92ZXI6ICcmJyxcbiAgICAgIG9uTGVhdmU6ICcmJ1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogJ1VpYlJhdGluZ0NvbnRyb2xsZXInLFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIHJhdGluZ0N0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIHJhdGluZ0N0cmwuaW5pdChuZ01vZGVsQ3RybCk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGFicycsIFtdKVxuXG4uY29udHJvbGxlcignVWliVGFic2V0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICB2YXIgY3RybCA9IHRoaXMsXG4gICAgb2xkSW5kZXg7XG4gIGN0cmwudGFicyA9IFtdO1xuXG4gIGN0cmwuc2VsZWN0ID0gZnVuY3Rpb24oaW5kZXgsIGV2dCkge1xuICAgIGlmICghZGVzdHJveWVkKSB7XG4gICAgICB2YXIgcHJldmlvdXNJbmRleCA9IGZpbmRUYWJJbmRleChvbGRJbmRleCk7XG4gICAgICB2YXIgcHJldmlvdXNTZWxlY3RlZCA9IGN0cmwudGFic1twcmV2aW91c0luZGV4XTtcbiAgICAgIGlmIChwcmV2aW91c1NlbGVjdGVkKSB7XG4gICAgICAgIHByZXZpb3VzU2VsZWN0ZWQudGFiLm9uRGVzZWxlY3Qoe1xuICAgICAgICAgICRldmVudDogZXZ0LFxuICAgICAgICAgICRzZWxlY3RlZEluZGV4OiBpbmRleFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGV2dCAmJiBldnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNTZWxlY3RlZC50YWIuYWN0aXZlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RlZCA9IGN0cmwudGFic1tpbmRleF07XG4gICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgc2VsZWN0ZWQudGFiLm9uU2VsZWN0KHtcbiAgICAgICAgICAkZXZlbnQ6IGV2dFxuICAgICAgICB9KTtcbiAgICAgICAgc2VsZWN0ZWQudGFiLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGN0cmwuYWN0aXZlID0gc2VsZWN0ZWQuaW5kZXg7XG4gICAgICAgIG9sZEluZGV4ID0gc2VsZWN0ZWQuaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKCFzZWxlY3RlZCAmJiBhbmd1bGFyLmlzRGVmaW5lZChvbGRJbmRleCkpIHtcbiAgICAgICAgY3RybC5hY3RpdmUgPSBudWxsO1xuICAgICAgICBvbGRJbmRleCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGN0cmwuYWRkVGFiID0gZnVuY3Rpb24gYWRkVGFiKHRhYikge1xuICAgIGN0cmwudGFicy5wdXNoKHtcbiAgICAgIHRhYjogdGFiLFxuICAgICAgaW5kZXg6IHRhYi5pbmRleFxuICAgIH0pO1xuICAgIGN0cmwudGFicy5zb3J0KGZ1bmN0aW9uKHQxLCB0Mikge1xuICAgICAgaWYgKHQxLmluZGV4ID4gdDIuaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0MS5pbmRleCA8IHQyLmluZGV4KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG5cbiAgICBpZiAodGFiLmluZGV4ID09PSBjdHJsLmFjdGl2ZSB8fCAhYW5ndWxhci5pc0RlZmluZWQoY3RybC5hY3RpdmUpICYmIGN0cmwudGFicy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBuZXdBY3RpdmVJbmRleCA9IGZpbmRUYWJJbmRleCh0YWIuaW5kZXgpO1xuICAgICAgY3RybC5zZWxlY3QobmV3QWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfTtcblxuICBjdHJsLnJlbW92ZVRhYiA9IGZ1bmN0aW9uIHJlbW92ZVRhYih0YWIpIHtcbiAgICB2YXIgaW5kZXg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLnRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjdHJsLnRhYnNbaV0udGFiID09PSB0YWIpIHtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3RybC50YWJzW2luZGV4XS5pbmRleCA9PT0gY3RybC5hY3RpdmUpIHtcbiAgICAgIHZhciBuZXdBY3RpdmVUYWJJbmRleCA9IGluZGV4ID09PSBjdHJsLnRhYnMubGVuZ3RoIC0gMSA/XG4gICAgICAgIGluZGV4IC0gMSA6IGluZGV4ICsgMSAlIGN0cmwudGFicy5sZW5ndGg7XG4gICAgICBjdHJsLnNlbGVjdChuZXdBY3RpdmVUYWJJbmRleCk7XG4gICAgfVxuXG4gICAgY3RybC50YWJzLnNwbGljZShpbmRleCwgMSk7XG4gIH07XG5cbiAgJHNjb3BlLiR3YXRjaCgndGFic2V0LmFjdGl2ZScsIGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCh2YWwpICYmIHZhbCAhPT0gb2xkSW5kZXgpIHtcbiAgICAgIGN0cmwuc2VsZWN0KGZpbmRUYWJJbmRleCh2YWwpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBkZXN0cm95ZWQ7XG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZmluZFRhYkluZGV4KGluZGV4KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLnRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjdHJsLnRhYnNbaV0uaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRhYnNldCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBzY29wZToge30sXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgYWN0aXZlOiAnPT8nLFxuICAgICAgdHlwZTogJ0AnXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiAnVWliVGFic2V0Q29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAndGFic2V0JyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWwnO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICBzY29wZS52ZXJ0aWNhbCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnZlcnRpY2FsKSA/XG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMudmVydGljYWwpIDogZmFsc2U7XG4gICAgICBzY29wZS5qdXN0aWZpZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5qdXN0aWZpZWQpID9cbiAgICAgICAgc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5qdXN0aWZpZWQpIDogZmFsc2U7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliVGFiJywgWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXnVpYlRhYnNldCcsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3RhYnMvdGFiLmh0bWwnO1xuICAgIH0sXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBzY29wZToge1xuICAgICAgaGVhZGluZzogJ0AnLFxuICAgICAgaW5kZXg6ICc9PycsXG4gICAgICBjbGFzc2VzOiAnQD8nLFxuICAgICAgb25TZWxlY3Q6ICcmc2VsZWN0JywgLy9UaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCBpbiBjb250ZW50SGVhZGluZ1RyYW5zY2x1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmNlIGl0IGluc2VydHMgdGhlIHRhYidzIGNvbnRlbnQgaW50byB0aGUgZG9tXG4gICAgICBvbkRlc2VsZWN0OiAnJmRlc2VsZWN0J1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAvL0VtcHR5IGNvbnRyb2xsZXIgc28gb3RoZXIgZGlyZWN0aXZlcyBjYW4gcmVxdWlyZSBiZWluZyAndW5kZXInIGEgdGFiXG4gICAgfSxcbiAgICBjb250cm9sbGVyQXM6ICd0YWInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzLCB0YWJzZXRDdHJsLCB0cmFuc2NsdWRlKSB7XG4gICAgICBzY29wZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgaWYgKGF0dHJzLmRpc2FibGUpIHtcbiAgICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKGF0dHJzLmRpc2FibGUpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHNjb3BlLmRpc2FibGVkID0gISEgdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChhdHRycy5pbmRleCkpIHtcbiAgICAgICAgaWYgKHRhYnNldEN0cmwudGFicyAmJiB0YWJzZXRDdHJsLnRhYnMubGVuZ3RoKSB7XG4gICAgICAgICAgc2NvcGUuaW5kZXggPSBNYXRoLm1heC5hcHBseShudWxsLCB0YWJzZXRDdHJsLnRhYnMubWFwKGZ1bmN0aW9uKHQpIHsgcmV0dXJuIHQuaW5kZXg7IH0pKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NvcGUuaW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGF0dHJzLmNsYXNzZXMpKSB7XG4gICAgICAgIHNjb3BlLmNsYXNzZXMgPSAnJztcbiAgICAgIH1cblxuICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGlmICghc2NvcGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJzZXRDdHJsLnRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0YWJzZXRDdHJsLnRhYnNbaV0udGFiID09PSBzY29wZSkge1xuICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhYnNldEN0cmwuc2VsZWN0KGluZGV4LCBldnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0YWJzZXRDdHJsLmFkZFRhYihzY29wZSk7XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRhYnNldEN0cmwucmVtb3ZlVGFiKHNjb3BlKTtcbiAgICAgIH0pO1xuXG4gICAgICAvL1dlIG5lZWQgdG8gdHJhbnNjbHVkZSBsYXRlciwgb25jZSB0aGUgY29udGVudCBjb250YWluZXIgaXMgcmVhZHkuXG4gICAgICAvL3doZW4gdGhpcyBsaW5rIGhhcHBlbnMsIHdlJ3JlIGluc2lkZSBhIHRhYiBoZWFkaW5nLlxuICAgICAgc2NvcGUuJHRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGU7XG4gICAgfVxuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRhYkhlYWRpbmdUcmFuc2NsdWRlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnXnVpYlRhYicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSkge1xuICAgICAgc2NvcGUuJHdhdGNoKCdoZWFkaW5nRWxlbWVudCcsIGZ1bmN0aW9uIHVwZGF0ZUhlYWRpbmdFbGVtZW50KGhlYWRpbmcpIHtcbiAgICAgICAgaWYgKGhlYWRpbmcpIHtcbiAgICAgICAgICBlbG0uaHRtbCgnJyk7XG4gICAgICAgICAgZWxtLmFwcGVuZChoZWFkaW5nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliVGFiQ29udGVudFRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdedWliVGFic2V0JyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycykge1xuICAgICAgdmFyIHRhYiA9IHNjb3BlLiRldmFsKGF0dHJzLnVpYlRhYkNvbnRlbnRUcmFuc2NsdWRlKS50YWI7XG5cbiAgICAgIC8vTm93IG91ciB0YWIgaXMgcmVhZHkgdG8gYmUgdHJhbnNjbHVkZWQ6IGJvdGggdGhlIHRhYiBoZWFkaW5nIGFyZWFcbiAgICAgIC8vYW5kIHRoZSB0YWIgY29udGVudCBhcmVhIGFyZSBsb2FkZWQuICBUcmFuc2NsdWRlICdlbSBib3RoLlxuICAgICAgdGFiLiR0cmFuc2NsdWRlRm4odGFiLiRwYXJlbnQsIGZ1bmN0aW9uKGNvbnRlbnRzKSB7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb250ZW50cywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChpc1RhYkhlYWRpbmcobm9kZSkpIHtcbiAgICAgICAgICAgIC8vTGV0IHRhYkhlYWRpbmdUcmFuc2NsdWRlIGtub3cuXG4gICAgICAgICAgICB0YWIuaGVhZGluZ0VsZW1lbnQgPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbG0uYXBwZW5kKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gaXNUYWJIZWFkaW5nKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lICYmIChcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCd1aWItdGFiLWhlYWRpbmcnKSB8fFxuICAgICAgbm9kZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdWliLXRhYi1oZWFkaW5nJykgfHxcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCd4LXVpYi10YWItaGVhZGluZycpIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3VpYi10YWItaGVhZGluZycgfHxcbiAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnZGF0YS11aWItdGFiLWhlYWRpbmcnIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3gtdWliLXRhYi1oZWFkaW5nJyB8fFxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd1aWI6dGFiLWhlYWRpbmcnXG4gICAgKTtcbiAgfVxufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGltZXBpY2tlcicsIFtdKVxuXG4uY29uc3RhbnQoJ3VpYlRpbWVwaWNrZXJDb25maWcnLCB7XG4gIGhvdXJTdGVwOiAxLFxuICBtaW51dGVTdGVwOiAxLFxuICBzZWNvbmRTdGVwOiAxLFxuICBzaG93TWVyaWRpYW46IHRydWUsXG4gIHNob3dTZWNvbmRzOiBmYWxzZSxcbiAgbWVyaWRpYW5zOiBudWxsLFxuICByZWFkb25seUlucHV0OiBmYWxzZSxcbiAgbW91c2V3aGVlbDogdHJ1ZSxcbiAgYXJyb3drZXlzOiB0cnVlLFxuICBzaG93U3Bpbm5lcnM6IHRydWUsXG4gIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sJ1xufSlcblxuLmNvbnRyb2xsZXIoJ1VpYlRpbWVwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRwYXJzZScsICckbG9nJywgJyRsb2NhbGUnLCAndWliVGltZXBpY2tlckNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHBhcnNlLCAkbG9nLCAkbG9jYWxlLCB0aW1lcGlja2VyQ29uZmlnKSB7XG4gIHZhciBob3Vyc01vZGVsQ3RybCwgbWludXRlc01vZGVsQ3RybCwgc2Vjb25kc01vZGVsQ3RybDtcbiAgdmFyIHNlbGVjdGVkID0gbmV3IERhdGUoKSxcbiAgICB3YXRjaGVycyA9IFtdLFxuICAgIG5nTW9kZWxDdHJsID0geyAkc2V0Vmlld1ZhbHVlOiBhbmd1bGFyLm5vb3AgfSwgLy8gbnVsbE1vZGVsQ3RybFxuICAgIG1lcmlkaWFucyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5tZXJpZGlhbnMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1lcmlkaWFucykgOiB0aW1lcGlja2VyQ29uZmlnLm1lcmlkaWFucyB8fCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuQU1QTVMsXG4gICAgcGFkSG91cnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMucGFkSG91cnMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnBhZEhvdXJzKSA6IHRydWU7XG5cbiAgJHNjb3BlLnRhYmluZGV4ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnRhYmluZGV4KSA/ICRhdHRycy50YWJpbmRleCA6IDA7XG4gICRlbGVtZW50LnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfLCBpbnB1dHMpIHtcbiAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXztcbiAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gdGhpcy5yZW5kZXI7XG5cbiAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHtcbiAgICAgIHJldHVybiBtb2RlbFZhbHVlID8gbmV3IERhdGUobW9kZWxWYWx1ZSkgOiBudWxsO1xuICAgIH0pO1xuXG4gICAgdmFyIGhvdXJzSW5wdXRFbCA9IGlucHV0cy5lcSgwKSxcbiAgICAgICAgbWludXRlc0lucHV0RWwgPSBpbnB1dHMuZXEoMSksXG4gICAgICAgIHNlY29uZHNJbnB1dEVsID0gaW5wdXRzLmVxKDIpO1xuXG4gICAgaG91cnNNb2RlbEN0cmwgPSBob3Vyc0lucHV0RWwuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIG1pbnV0ZXNNb2RlbEN0cmwgPSBtaW51dGVzSW5wdXRFbC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgc2Vjb25kc01vZGVsQ3RybCA9IHNlY29uZHNJbnB1dEVsLmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcblxuICAgIHZhciBtb3VzZXdoZWVsID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm1vdXNld2hlZWwpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1vdXNld2hlZWwpIDogdGltZXBpY2tlckNvbmZpZy5tb3VzZXdoZWVsO1xuXG4gICAgaWYgKG1vdXNld2hlZWwpIHtcbiAgICAgIHRoaXMuc2V0dXBNb3VzZXdoZWVsRXZlbnRzKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKTtcbiAgICB9XG5cbiAgICB2YXIgYXJyb3drZXlzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmFycm93a2V5cykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYXJyb3drZXlzKSA6IHRpbWVwaWNrZXJDb25maWcuYXJyb3drZXlzO1xuICAgIGlmIChhcnJvd2tleXMpIHtcbiAgICAgIHRoaXMuc2V0dXBBcnJvd2tleUV2ZW50cyhob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnJlYWRvbmx5SW5wdXQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMucmVhZG9ubHlJbnB1dCkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMucmVhZG9ubHlJbnB1dCkgOiB0aW1lcGlja2VyQ29uZmlnLnJlYWRvbmx5SW5wdXQ7XG4gICAgdGhpcy5zZXR1cElucHV0RXZlbnRzKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKTtcbiAgfTtcblxuICB2YXIgaG91clN0ZXAgPSB0aW1lcGlja2VyQ29uZmlnLmhvdXJTdGVwO1xuICBpZiAoJGF0dHJzLmhvdXJTdGVwKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5ob3VyU3RlcCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBob3VyU3RlcCA9ICt2YWx1ZTtcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgbWludXRlU3RlcCA9IHRpbWVwaWNrZXJDb25maWcubWludXRlU3RlcDtcbiAgaWYgKCRhdHRycy5taW51dGVTdGVwKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5taW51dGVTdGVwKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIG1pbnV0ZVN0ZXAgPSArdmFsdWU7XG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIG1pbjtcbiAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5taW4pLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBkdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICBtaW4gPSBpc05hTihkdCkgPyB1bmRlZmluZWQgOiBkdDtcbiAgfSkpO1xuXG4gIHZhciBtYXg7XG4gIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubWF4KSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgZHQgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgbWF4ID0gaXNOYU4oZHQpID8gdW5kZWZpbmVkIDogZHQ7XG4gIH0pKTtcblxuICB2YXIgZGlzYWJsZWQgPSBmYWxzZTtcbiAgaWYgKCRhdHRycy5uZ0Rpc2FibGVkKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5uZ0Rpc2FibGVkKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGRpc2FibGVkID0gdmFsdWU7XG4gICAgfSkpO1xuICB9XG5cbiAgJHNjb3BlLm5vSW5jcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5jcmVtZW50ZWRTZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIGhvdXJTdGVwICogNjApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBpbmNyZW1lbnRlZFNlbGVjdGVkID4gbWF4IHx8XG4gICAgICBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgc2VsZWN0ZWQgJiYgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IG1pbjtcbiAgfTtcblxuICAkc2NvcGUubm9EZWNyZW1lbnRIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWNyZW1lbnRlZFNlbGVjdGVkID0gYWRkTWludXRlcyhzZWxlY3RlZCwgLWhvdXJTdGVwICogNjApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBkZWNyZW1lbnRlZFNlbGVjdGVkIDwgbWluIHx8XG4gICAgICBkZWNyZW1lbnRlZFNlbGVjdGVkID4gc2VsZWN0ZWQgJiYgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IG1heDtcbiAgfTtcblxuICAkc2NvcGUubm9JbmNyZW1lbnRNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRNaW51dGVzKHNlbGVjdGVkLCBtaW51dGVTdGVwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgaW5jcmVtZW50ZWRTZWxlY3RlZCA+IG1heCB8fFxuICAgICAgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IHNlbGVjdGVkICYmIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW47XG4gIH07XG5cbiAgJHNjb3BlLm5vRGVjcmVtZW50TWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWNyZW1lbnRlZFNlbGVjdGVkID0gYWRkTWludXRlcyhzZWxlY3RlZCwgLW1pbnV0ZVN0ZXApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBkZWNyZW1lbnRlZFNlbGVjdGVkIDwgbWluIHx8XG4gICAgICBkZWNyZW1lbnRlZFNlbGVjdGVkID4gc2VsZWN0ZWQgJiYgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IG1heDtcbiAgfTtcblxuICAkc2NvcGUubm9JbmNyZW1lbnRTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRTZWNvbmRzKHNlbGVjdGVkLCBzZWNvbmRTdGVwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgaW5jcmVtZW50ZWRTZWxlY3RlZCA+IG1heCB8fFxuICAgICAgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IHNlbGVjdGVkICYmIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW47XG4gIH07XG5cbiAgJHNjb3BlLm5vRGVjcmVtZW50U2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWNyZW1lbnRlZFNlbGVjdGVkID0gYWRkU2Vjb25kcyhzZWxlY3RlZCwgLXNlY29uZFN0ZXApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBkZWNyZW1lbnRlZFNlbGVjdGVkIDwgbWluIHx8XG4gICAgICBkZWNyZW1lbnRlZFNlbGVjdGVkID4gc2VsZWN0ZWQgJiYgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IG1heDtcbiAgfTtcblxuICAkc2NvcGUubm9Ub2dnbGVNZXJpZGlhbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxlY3RlZC5nZXRIb3VycygpIDwgMTIpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlZCB8fCBhZGRNaW51dGVzKHNlbGVjdGVkLCAxMiAqIDYwKSA+IG1heDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgYWRkTWludXRlcyhzZWxlY3RlZCwgLTEyICogNjApIDwgbWluO1xuICB9O1xuXG4gIHZhciBzZWNvbmRTdGVwID0gdGltZXBpY2tlckNvbmZpZy5zZWNvbmRTdGVwO1xuICBpZiAoJGF0dHJzLnNlY29uZFN0ZXApIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLnNlY29uZFN0ZXApLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgc2Vjb25kU3RlcCA9ICt2YWx1ZTtcbiAgICB9KSk7XG4gIH1cblxuICAkc2NvcGUuc2hvd1NlY29uZHMgPSB0aW1lcGlja2VyQ29uZmlnLnNob3dTZWNvbmRzO1xuICBpZiAoJGF0dHJzLnNob3dTZWNvbmRzKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5zaG93U2Vjb25kcyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAkc2NvcGUuc2hvd1NlY29uZHMgPSAhIXZhbHVlO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8vIDEySCAvIDI0SCBtb2RlXG4gICRzY29wZS5zaG93TWVyaWRpYW4gPSB0aW1lcGlja2VyQ29uZmlnLnNob3dNZXJpZGlhbjtcbiAgaWYgKCRhdHRycy5zaG93TWVyaWRpYW4pIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLnNob3dNZXJpZGlhbiksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAkc2NvcGUuc2hvd01lcmlkaWFuID0gISF2YWx1ZTtcblxuICAgICAgaWYgKG5nTW9kZWxDdHJsLiRlcnJvci50aW1lKSB7XG4gICAgICAgIC8vIEV2YWx1YXRlIGZyb20gdGVtcGxhdGVcbiAgICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSwgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKTtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSkge1xuICAgICAgICAgIHNlbGVjdGVkLnNldEhvdXJzKGhvdXJzKTtcbiAgICAgICAgICByZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZVRlbXBsYXRlKCk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gR2V0ICRzY29wZS5ob3VycyBpbiAyNEggbW9kZSBpZiB2YWxpZFxuICBmdW5jdGlvbiBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSgpIHtcbiAgICB2YXIgaG91cnMgPSArJHNjb3BlLmhvdXJzO1xuICAgIHZhciB2YWxpZCA9ICRzY29wZS5zaG93TWVyaWRpYW4gPyBob3VycyA+IDAgJiYgaG91cnMgPCAxMyA6XG4gICAgICBob3VycyA+PSAwICYmIGhvdXJzIDwgMjQ7XG4gICAgaWYgKCF2YWxpZCB8fCAkc2NvcGUuaG91cnMgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgkc2NvcGUuc2hvd01lcmlkaWFuKSB7XG4gICAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICAgIGhvdXJzID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICgkc2NvcGUubWVyaWRpYW4gPT09IG1lcmlkaWFuc1sxXSkge1xuICAgICAgICBob3VycyA9IGhvdXJzICsgMTI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBob3VycztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKSB7XG4gICAgdmFyIG1pbnV0ZXMgPSArJHNjb3BlLm1pbnV0ZXM7XG4gICAgdmFyIHZhbGlkID0gbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPCA2MDtcbiAgICBpZiAoIXZhbGlkIHx8ICRzY29wZS5taW51dGVzID09PSAnJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbnV0ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTZWNvbmRzRnJvbVRlbXBsYXRlKCkge1xuICAgIHZhciBzZWNvbmRzID0gKyRzY29wZS5zZWNvbmRzO1xuICAgIHJldHVybiBzZWNvbmRzID49IDAgJiYgc2Vjb25kcyA8IDYwID8gc2Vjb25kcyA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhZCh2YWx1ZSwgbm9QYWQpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQodmFsdWUpICYmIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoIDwgMiAmJiAhbm9QYWQgP1xuICAgICAgJzAnICsgdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgLy8gUmVzcG9uZCBvbiBtb3VzZXdoZWVsIHNwaW5cbiAgdGhpcy5zZXR1cE1vdXNld2hlZWxFdmVudHMgPSBmdW5jdGlvbihob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCkge1xuICAgIHZhciBpc1Njcm9sbGluZ1VwID0gZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkge1xuICAgICAgICBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICAgICAgfVxuICAgICAgLy9waWNrIGNvcnJlY3QgZGVsdGEgdmFyaWFibGUgZGVwZW5kaW5nIG9uIGV2ZW50XG4gICAgICB2YXIgZGVsdGEgPSBlLndoZWVsRGVsdGEgPyBlLndoZWVsRGVsdGEgOiAtZS5kZWx0YVk7XG4gICAgICByZXR1cm4gZS5kZXRhaWwgfHwgZGVsdGEgPiAwO1xuICAgIH07XG5cbiAgICBob3Vyc0lucHV0RWwub24oJ21vdXNld2hlZWwgd2hlZWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoaXNTY3JvbGxpbmdVcChlKSA/ICRzY29wZS5pbmNyZW1lbnRIb3VycygpIDogJHNjb3BlLmRlY3JlbWVudEhvdXJzKCkpO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgbWludXRlc0lucHV0RWwub24oJ21vdXNld2hlZWwgd2hlZWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoaXNTY3JvbGxpbmdVcChlKSA/ICRzY29wZS5pbmNyZW1lbnRNaW51dGVzKCkgOiAkc2NvcGUuZGVjcmVtZW50TWludXRlcygpKTtcbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgICBzZWNvbmRzSW5wdXRFbC5vbignbW91c2V3aGVlbCB3aGVlbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShpc1Njcm9sbGluZ1VwKGUpID8gJHNjb3BlLmluY3JlbWVudFNlY29uZHMoKSA6ICRzY29wZS5kZWNyZW1lbnRTZWNvbmRzKCkpO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFJlc3BvbmQgb24gdXAvZG93biBhcnJvd2tleXNcbiAgdGhpcy5zZXR1cEFycm93a2V5RXZlbnRzID0gZnVuY3Rpb24oaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpIHtcbiAgICBob3Vyc0lucHV0RWwub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgIGlmIChlLndoaWNoID09PSAzOCkgeyAvLyB1cFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAkc2NvcGUuaW5jcmVtZW50SG91cnMoKTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PT0gNDApIHsgLy8gZG93blxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAkc2NvcGUuZGVjcmVtZW50SG91cnMoKTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG1pbnV0ZXNJbnB1dEVsLm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICBpZiAoZS53aGljaCA9PT0gMzgpIHsgLy8gdXBcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJHNjb3BlLmluY3JlbWVudE1pbnV0ZXMoKTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PT0gNDApIHsgLy8gZG93blxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAkc2NvcGUuZGVjcmVtZW50TWludXRlcygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2Vjb25kc0lucHV0RWwub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgIGlmIChlLndoaWNoID09PSAzOCkgeyAvLyB1cFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAkc2NvcGUuaW5jcmVtZW50U2Vjb25kcygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5kZWNyZW1lbnRTZWNvbmRzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5zZXR1cElucHV0RXZlbnRzID0gZnVuY3Rpb24oaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpIHtcbiAgICBpZiAoJHNjb3BlLnJlYWRvbmx5SW5wdXQpIHtcbiAgICAgICRzY29wZS51cGRhdGVIb3VycyA9IGFuZ3VsYXIubm9vcDtcbiAgICAgICRzY29wZS51cGRhdGVNaW51dGVzID0gYW5ndWxhci5ub29wO1xuICAgICAgJHNjb3BlLnVwZGF0ZVNlY29uZHMgPSBhbmd1bGFyLm5vb3A7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGludmFsaWRhdGUgPSBmdW5jdGlvbihpbnZhbGlkSG91cnMsIGludmFsaWRNaW51dGVzLCBpbnZhbGlkU2Vjb25kcykge1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShudWxsKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgndGltZScsIGZhbHNlKTtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnZhbGlkSG91cnMpKSB7XG4gICAgICAgICRzY29wZS5pbnZhbGlkSG91cnMgPSBpbnZhbGlkSG91cnM7XG4gICAgICAgIGlmIChob3Vyc01vZGVsQ3RybCkge1xuICAgICAgICAgIGhvdXJzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnaG91cnMnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGludmFsaWRNaW51dGVzKSkge1xuICAgICAgICAkc2NvcGUuaW52YWxpZE1pbnV0ZXMgPSBpbnZhbGlkTWludXRlcztcbiAgICAgICAgaWYgKG1pbnV0ZXNNb2RlbEN0cmwpIHtcbiAgICAgICAgICBtaW51dGVzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnbWludXRlcycsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaW52YWxpZFNlY29uZHMpKSB7XG4gICAgICAgICRzY29wZS5pbnZhbGlkU2Vjb25kcyA9IGludmFsaWRTZWNvbmRzO1xuICAgICAgICBpZiAoc2Vjb25kc01vZGVsQ3RybCkge1xuICAgICAgICAgIHNlY29uZHNNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdzZWNvbmRzJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS51cGRhdGVIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSxcbiAgICAgICAgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKTtcblxuICAgICAgbmdNb2RlbEN0cmwuJHNldERpcnR5KCk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChob3VycykgJiYgYW5ndWxhci5pc0RlZmluZWQobWludXRlcykpIHtcbiAgICAgICAgc2VsZWN0ZWQuc2V0SG91cnMoaG91cnMpO1xuICAgICAgICBzZWxlY3RlZC5zZXRNaW51dGVzKG1pbnV0ZXMpO1xuICAgICAgICBpZiAoc2VsZWN0ZWQgPCBtaW4gfHwgc2VsZWN0ZWQgPiBtYXgpIHtcbiAgICAgICAgICBpbnZhbGlkYXRlKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnJlc2goJ2gnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52YWxpZGF0ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaG91cnNJbnB1dEVsLm9uKCdibHVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFRvdWNoZWQoKTtcbiAgICAgIGlmIChtb2RlbElzRW1wdHkoKSkge1xuICAgICAgICBtYWtlVmFsaWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmhvdXJzID09PSBudWxsIHx8ICRzY29wZS5ob3VycyA9PT0gJycpIHtcbiAgICAgICAgaW52YWxpZGF0ZSh0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoISRzY29wZS5pbnZhbGlkSG91cnMgJiYgJHNjb3BlLmhvdXJzIDwgMTApIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUuaG91cnMgPSBwYWQoJHNjb3BlLmhvdXJzLCAhcGFkSG91cnMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS51cGRhdGVNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKSxcbiAgICAgICAgaG91cnMgPSBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSgpO1xuXG4gICAgICBuZ01vZGVsQ3RybC4kc2V0RGlydHkoKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG1pbnV0ZXMpICYmIGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSkge1xuICAgICAgICBzZWxlY3RlZC5zZXRIb3Vycyhob3Vycyk7XG4gICAgICAgIHNlbGVjdGVkLnNldE1pbnV0ZXMobWludXRlcyk7XG4gICAgICAgIGlmIChzZWxlY3RlZCA8IG1pbiB8fCBzZWxlY3RlZCA+IG1heCkge1xuICAgICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWZyZXNoKCdtJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbWludXRlc0lucHV0RWwub24oJ2JsdXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICAgICAgaWYgKG1vZGVsSXNFbXB0eSgpKSB7XG4gICAgICAgIG1ha2VWYWxpZCgpO1xuICAgICAgfSBlbHNlIGlmICgkc2NvcGUubWludXRlcyA9PT0gbnVsbCkge1xuICAgICAgICBpbnZhbGlkYXRlKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCEkc2NvcGUuaW52YWxpZE1pbnV0ZXMgJiYgJHNjb3BlLm1pbnV0ZXMgPCAxMCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5taW51dGVzID0gcGFkKCRzY29wZS5taW51dGVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUudXBkYXRlU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlY29uZHMgPSBnZXRTZWNvbmRzRnJvbVRlbXBsYXRlKCk7XG5cbiAgICAgIG5nTW9kZWxDdHJsLiRzZXREaXJ0eSgpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoc2Vjb25kcykpIHtcbiAgICAgICAgc2VsZWN0ZWQuc2V0U2Vjb25kcyhzZWNvbmRzKTtcbiAgICAgICAgcmVmcmVzaCgncycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52YWxpZGF0ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlY29uZHNJbnB1dEVsLm9uKCdibHVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKG1vZGVsSXNFbXB0eSgpKSB7XG4gICAgICAgIG1ha2VWYWxpZCgpO1xuICAgICAgfSBlbHNlIGlmICghJHNjb3BlLmludmFsaWRTZWNvbmRzICYmICRzY29wZS5zZWNvbmRzIDwgMTApIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseSggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLnNlY29uZHMgPSBwYWQoJHNjb3BlLnNlY29uZHMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9O1xuXG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuXG4gICAgaWYgKGlzTmFOKGRhdGUpKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3RpbWUnLCBmYWxzZSk7XG4gICAgICAkbG9nLmVycm9yKCdUaW1lcGlja2VyIGRpcmVjdGl2ZTogXCJuZy1tb2RlbFwiIHZhbHVlIG11c3QgYmUgYSBEYXRlIG9iamVjdCwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDAxLjAxLjE5NzAgb3IgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGFuIFJGQzI4MjIgb3IgSVNPIDg2MDEgZGF0ZS4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSBkYXRlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0ZWQgPCBtaW4gfHwgc2VsZWN0ZWQgPiBtYXgpIHtcbiAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCd0aW1lJywgZmFsc2UpO1xuICAgICAgICAkc2NvcGUuaW52YWxpZEhvdXJzID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLmludmFsaWRNaW51dGVzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1ha2VWYWxpZCgpO1xuICAgICAgfVxuICAgICAgdXBkYXRlVGVtcGxhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2FsbCBpbnRlcm5hbGx5IHdoZW4gd2Uga25vdyB0aGF0IG1vZGVsIGlzIHZhbGlkLlxuICBmdW5jdGlvbiByZWZyZXNoKGtleWJvYXJkQ2hhbmdlKSB7XG4gICAgbWFrZVZhbGlkKCk7XG4gICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXcgRGF0ZShzZWxlY3RlZCkpO1xuICAgIHVwZGF0ZVRlbXBsYXRlKGtleWJvYXJkQ2hhbmdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VWYWxpZCgpIHtcbiAgICBpZiAoaG91cnNNb2RlbEN0cmwpIHtcbiAgICAgIGhvdXJzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnaG91cnMnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAobWludXRlc01vZGVsQ3RybCkge1xuICAgICAgbWludXRlc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ21pbnV0ZXMnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vjb25kc01vZGVsQ3RybCkge1xuICAgICAgc2Vjb25kc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3NlY29uZHMnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3RpbWUnLCB0cnVlKTtcbiAgICAkc2NvcGUuaW52YWxpZEhvdXJzID0gZmFsc2U7XG4gICAgJHNjb3BlLmludmFsaWRNaW51dGVzID0gZmFsc2U7XG4gICAgJHNjb3BlLmludmFsaWRTZWNvbmRzID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVUZW1wbGF0ZShrZXlib2FyZENoYW5nZSkge1xuICAgIGlmICghbmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUpIHtcbiAgICAgICRzY29wZS5ob3VycyA9IG51bGw7XG4gICAgICAkc2NvcGUubWludXRlcyA9IG51bGw7XG4gICAgICAkc2NvcGUuc2Vjb25kcyA9IG51bGw7XG4gICAgICAkc2NvcGUubWVyaWRpYW4gPSBtZXJpZGlhbnNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBob3VycyA9IHNlbGVjdGVkLmdldEhvdXJzKCksXG4gICAgICAgIG1pbnV0ZXMgPSBzZWxlY3RlZC5nZXRNaW51dGVzKCksXG4gICAgICAgIHNlY29uZHMgPSBzZWxlY3RlZC5nZXRTZWNvbmRzKCk7XG5cbiAgICAgIGlmICgkc2NvcGUuc2hvd01lcmlkaWFuKSB7XG4gICAgICAgIGhvdXJzID0gaG91cnMgPT09IDAgfHwgaG91cnMgPT09IDEyID8gMTIgOiBob3VycyAlIDEyOyAvLyBDb252ZXJ0IDI0IHRvIDEyIGhvdXIgc3lzdGVtXG4gICAgICB9XG5cbiAgICAgICRzY29wZS5ob3VycyA9IGtleWJvYXJkQ2hhbmdlID09PSAnaCcgPyBob3VycyA6IHBhZChob3VycywgIXBhZEhvdXJzKTtcbiAgICAgIGlmIChrZXlib2FyZENoYW5nZSAhPT0gJ20nKSB7XG4gICAgICAgICRzY29wZS5taW51dGVzID0gcGFkKG1pbnV0ZXMpO1xuICAgICAgfVxuICAgICAgJHNjb3BlLm1lcmlkaWFuID0gc2VsZWN0ZWQuZ2V0SG91cnMoKSA8IDEyID8gbWVyaWRpYW5zWzBdIDogbWVyaWRpYW5zWzFdO1xuXG4gICAgICBpZiAoa2V5Ym9hcmRDaGFuZ2UgIT09ICdzJykge1xuICAgICAgICAkc2NvcGUuc2Vjb25kcyA9IHBhZChzZWNvbmRzKTtcbiAgICAgIH1cbiAgICAgICRzY29wZS5tZXJpZGlhbiA9IHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IG1lcmlkaWFuc1swXSA6IG1lcmlkaWFuc1sxXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRTZWNvbmRzVG9TZWxlY3RlZChzZWNvbmRzKSB7XG4gICAgc2VsZWN0ZWQgPSBhZGRTZWNvbmRzKHNlbGVjdGVkLCBzZWNvbmRzKTtcbiAgICByZWZyZXNoKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRNaW51dGVzKHNlbGVjdGVkLCBtaW51dGVzKSB7XG4gICAgcmV0dXJuIGFkZFNlY29uZHMoc2VsZWN0ZWQsIG1pbnV0ZXMqNjApO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkU2Vjb25kcyhkYXRlLCBzZWNvbmRzKSB7XG4gICAgdmFyIGR0ID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgKyBzZWNvbmRzICogMTAwMCk7XG4gICAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICBuZXdEYXRlLnNldEhvdXJzKGR0LmdldEhvdXJzKCksIGR0LmdldE1pbnV0ZXMoKSwgZHQuZ2V0U2Vjb25kcygpKTtcbiAgICByZXR1cm4gbmV3RGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vZGVsSXNFbXB0eSgpIHtcbiAgICByZXR1cm4gKCRzY29wZS5ob3VycyA9PT0gbnVsbCB8fCAkc2NvcGUuaG91cnMgPT09ICcnKSAmJlxuICAgICAgKCRzY29wZS5taW51dGVzID09PSBudWxsIHx8ICRzY29wZS5taW51dGVzID09PSAnJykgJiZcbiAgICAgICghJHNjb3BlLnNob3dTZWNvbmRzIHx8ICRzY29wZS5zaG93U2Vjb25kcyAmJiAoJHNjb3BlLnNlY29uZHMgPT09IG51bGwgfHwgJHNjb3BlLnNlY29uZHMgPT09ICcnKSk7XG4gIH1cblxuICAkc2NvcGUuc2hvd1NwaW5uZXJzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnNob3dTcGlubmVycykgP1xuICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5zaG93U3Bpbm5lcnMpIDogdGltZXBpY2tlckNvbmZpZy5zaG93U3Bpbm5lcnM7XG5cbiAgJHNjb3BlLmluY3JlbWVudEhvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9JbmNyZW1lbnRIb3VycygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZChob3VyU3RlcCAqIDYwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZGVjcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0RlY3JlbWVudEhvdXJzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKC1ob3VyU3RlcCAqIDYwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuaW5jcmVtZW50TWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vSW5jcmVtZW50TWludXRlcygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZChtaW51dGVTdGVwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZGVjcmVtZW50TWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vRGVjcmVtZW50TWludXRlcygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZCgtbWludXRlU3RlcCAqIDYwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmluY3JlbWVudFNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0luY3JlbWVudFNlY29uZHMoKSkge1xuICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQoc2Vjb25kU3RlcCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5kZWNyZW1lbnRTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9EZWNyZW1lbnRTZWNvbmRzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKC1zZWNvbmRTdGVwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLnRvZ2dsZU1lcmlkaWFuID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1pbnV0ZXMgPSBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCksXG4gICAgICAgIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKTtcblxuICAgIGlmICghJHNjb3BlLm5vVG9nZ2xlTWVyaWRpYW4oKSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG1pbnV0ZXMpICYmIGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSkge1xuICAgICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZCgxMiAqIDYwICogKHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IDYwIDogLTYwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkc2NvcGUubWVyaWRpYW4gPSAkc2NvcGUubWVyaWRpYW4gPT09IG1lcmlkaWFuc1swXSA/IG1lcmlkaWFuc1sxXSA6IG1lcmlkaWFuc1swXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmJsdXIgPSBmdW5jdGlvbigpIHtcbiAgICBuZ01vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICB9O1xuXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgd2hpbGUgKHdhdGNoZXJzLmxlbmd0aCkge1xuICAgICAgd2F0Y2hlcnMuc2hpZnQoKSgpO1xuICAgIH1cbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVGltZXBpY2tlcicsIFsndWliVGltZXBpY2tlckNvbmZpZycsIGZ1bmN0aW9uKHVpYlRpbWVwaWNrZXJDb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ3VpYlRpbWVwaWNrZXInLCAnP15uZ01vZGVsJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliVGltZXBpY2tlckNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ3RpbWVwaWNrZXInLFxuICAgIHNjb3BlOiB7fSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCB1aWJUaW1lcGlja2VyQ29uZmlnLnRlbXBsYXRlVXJsO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIHRpbWVwaWNrZXJDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGlmIChuZ01vZGVsQ3RybCkge1xuICAgICAgICB0aW1lcGlja2VyQ3RybC5pbml0KG5nTW9kZWxDdHJsLCBlbGVtZW50LmZpbmQoJ2lucHV0JykpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50eXBlYWhlYWQnLCBbJ3VpLmJvb3RzdHJhcC5kZWJvdW5jZScsICd1aS5ib290c3RyYXAucG9zaXRpb24nXSlcblxuLyoqXG4gKiBBIGhlbHBlciBzZXJ2aWNlIHRoYXQgY2FuIHBhcnNlIHR5cGVhaGVhZCdzIHN5bnRheCAoc3RyaW5nIHByb3ZpZGVkIGJ5IHVzZXJzKVxuICogRXh0cmFjdGVkIHRvIGEgc2VwYXJhdGUgc2VydmljZSBmb3IgZWFzZSBvZiB1bml0IHRlc3RpbmdcbiAqL1xuICAuZmFjdG9yeSgndWliVHlwZWFoZWFkUGFyc2VyJywgWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAwMDAwMDExMTExMTExMDAwMDAwMDAwMDAwMDIyMjIyMjIyMDAwMDAwMDAwMDAwMDAwMDMzMzMzMzMzMzMzMzMzMzAwMDAwMDAwMDAwNDQ0NDQ0NDQwMDBcbiAgICB2YXIgVFlQRUFIRUFEX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd1xcZF0qKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pJC87XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBpbnB1dC5tYXRjaChUWVBFQUhFQURfUkVHRVhQKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdFeHBlY3RlZCB0eXBlYWhlYWQgc3BlY2lmaWNhdGlvbiBpbiBmb3JtIG9mIFwiX21vZGVsVmFsdWVfIChhcyBfbGFiZWxfKT8gZm9yIF9pdGVtXyBpbiBfY29sbGVjdGlvbl9cIicgK1xuICAgICAgICAgICAgICAnIGJ1dCBnb3QgXCInICsgaW5wdXQgKyAnXCIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGl0ZW1OYW1lOiBtYXRjaFszXSxcbiAgICAgICAgICBzb3VyY2U6ICRwYXJzZShtYXRjaFs0XSksXG4gICAgICAgICAgdmlld01hcHBlcjogJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSxcbiAgICAgICAgICBtb2RlbE1hcHBlcjogJHBhcnNlKG1hdGNoWzFdKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5jb250cm9sbGVyKCdVaWJUeXBlYWhlYWRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRjb21waWxlJywgJyRwYXJzZScsICckcScsICckdGltZW91dCcsICckZG9jdW1lbnQnLCAnJHdpbmRvdycsICckcm9vdFNjb3BlJywgJyQkZGVib3VuY2UnLCAnJHVpYlBvc2l0aW9uJywgJ3VpYlR5cGVhaGVhZFBhcnNlcicsXG4gICAgZnVuY3Rpb24ob3JpZ2luYWxTY29wZSwgZWxlbWVudCwgYXR0cnMsICRjb21waWxlLCAkcGFyc2UsICRxLCAkdGltZW91dCwgJGRvY3VtZW50LCAkd2luZG93LCAkcm9vdFNjb3BlLCAkJGRlYm91bmNlLCAkcG9zaXRpb24sIHR5cGVhaGVhZFBhcnNlcikge1xuICAgIHZhciBIT1RfS0VZUyA9IFs5LCAxMywgMjcsIDM4LCA0MF07XG4gICAgdmFyIGV2ZW50RGVib3VuY2VUaW1lID0gMjAwO1xuICAgIHZhciBtb2RlbEN0cmwsIG5nTW9kZWxPcHRpb25zO1xuICAgIC8vU1VQUE9SVEVEIEFUVFJJQlVURVMgKE9QVElPTlMpXG5cbiAgICAvL21pbmltYWwgbm8gb2YgY2hhcmFjdGVycyB0aGF0IG5lZWRzIHRvIGJlIGVudGVyZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgIHZhciBtaW5MZW5ndGggPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZE1pbkxlbmd0aCk7XG4gICAgaWYgKCFtaW5MZW5ndGggJiYgbWluTGVuZ3RoICE9PSAwKSB7XG4gICAgICBtaW5MZW5ndGggPSAxO1xuICAgIH1cblxuICAgIG9yaWdpbmFsU2NvcGUuJHdhdGNoKGF0dHJzLnR5cGVhaGVhZE1pbkxlbmd0aCwgZnVuY3Rpb24gKG5ld1ZhbCkge1xuICAgICAgICBtaW5MZW5ndGggPSAhbmV3VmFsICYmIG5ld1ZhbCAhPT0gMCA/IDEgOiBuZXdWYWw7XG4gICAgfSk7XG5cbiAgICAvL21pbmltYWwgd2FpdCB0aW1lIGFmdGVyIGxhc3QgY2hhcmFjdGVyIHR5cGVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICB2YXIgd2FpdFRpbWUgPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFdhaXRNcykgfHwgMDtcblxuICAgIC8vc2hvdWxkIGl0IHJlc3RyaWN0IG1vZGVsIHZhbHVlcyB0byB0aGUgb25lcyBzZWxlY3RlZCBmcm9tIHRoZSBwb3B1cCBvbmx5P1xuICAgIHZhciBpc0VkaXRhYmxlID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRFZGl0YWJsZSkgIT09IGZhbHNlO1xuICAgIG9yaWdpbmFsU2NvcGUuJHdhdGNoKGF0dHJzLnR5cGVhaGVhZEVkaXRhYmxlLCBmdW5jdGlvbiAobmV3VmFsKSB7XG4gICAgICBpc0VkaXRhYmxlID0gbmV3VmFsICE9PSBmYWxzZTtcbiAgICB9KTtcblxuICAgIC8vYmluZGluZyB0byBhIHZhcmlhYmxlIHRoYXQgaW5kaWNhdGVzIGlmIG1hdGNoZXMgYXJlIGJlaW5nIHJldHJpZXZlZCBhc3luY2hyb25vdXNseVxuICAgIHZhciBpc0xvYWRpbmdTZXR0ZXIgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkTG9hZGluZykuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcblxuICAgIC8vYSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgYW4gZXZlbnQgc2hvdWxkIGNhdXNlIHNlbGVjdGlvblxuICAgIHZhciBpc1NlbGVjdEV2ZW50ID0gYXR0cnMudHlwZWFoZWFkU2hvdWxkU2VsZWN0ID8gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZFNob3VsZFNlbGVjdCkgOiBmdW5jdGlvbihzY29wZSwgdmFscykge1xuICAgICAgdmFyIGV2dCA9IHZhbHMuJGV2ZW50O1xuICAgICAgcmV0dXJuIGV2dC53aGljaCA9PT0gMTMgfHwgZXZ0LndoaWNoID09PSA5O1xuICAgIH07XG5cbiAgICAvL2EgY2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiBhIG1hdGNoIGlzIHNlbGVjdGVkXG4gICAgdmFyIG9uU2VsZWN0Q2FsbGJhY2sgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkT25TZWxlY3QpO1xuXG4gICAgLy9zaG91bGQgaXQgc2VsZWN0IGhpZ2hsaWdodGVkIHBvcHVwIHZhbHVlIHdoZW4gbG9zaW5nIGZvY3VzP1xuICAgIHZhciBpc1NlbGVjdE9uQmx1ciA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uQmx1cikgPyBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uQmx1cikgOiBmYWxzZTtcblxuICAgIC8vYmluZGluZyB0byBhIHZhcmlhYmxlIHRoYXQgaW5kaWNhdGVzIGlmIHRoZXJlIHdlcmUgbm8gcmVzdWx0cyBhZnRlciB0aGUgcXVlcnkgaXMgY29tcGxldGVkXG4gICAgdmFyIGlzTm9SZXN1bHRzU2V0dGVyID0gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZE5vUmVzdWx0cykuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcblxuICAgIHZhciBpbnB1dEZvcm1hdHRlciA9IGF0dHJzLnR5cGVhaGVhZElucHV0Rm9ybWF0dGVyID8gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZElucHV0Rm9ybWF0dGVyKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBhcHBlbmRUb0JvZHkgPSBhdHRycy50eXBlYWhlYWRBcHBlbmRUb0JvZHkgPyBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEFwcGVuZFRvQm9keSkgOiBmYWxzZTtcblxuICAgIHZhciBhcHBlbmRUbyA9IGF0dHJzLnR5cGVhaGVhZEFwcGVuZFRvID9cbiAgICAgIG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkQXBwZW5kVG8pIDogbnVsbDtcblxuICAgIHZhciBmb2N1c0ZpcnN0ID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRGb2N1c0ZpcnN0KSAhPT0gZmFsc2U7XG5cbiAgICAvL0lmIGlucHV0IG1hdGNoZXMgYW4gaXRlbSBvZiB0aGUgbGlzdCBleGFjdGx5LCBzZWxlY3QgaXQgYXV0b21hdGljYWxseVxuICAgIHZhciBzZWxlY3RPbkV4YWN0ID0gYXR0cnMudHlwZWFoZWFkU2VsZWN0T25FeGFjdCA/IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkU2VsZWN0T25FeGFjdCkgOiBmYWxzZTtcblxuICAgIC8vYmluZGluZyB0byBhIHZhcmlhYmxlIHRoYXQgaW5kaWNhdGVzIGlmIGRyb3Bkb3duIGlzIG9wZW5cbiAgICB2YXIgaXNPcGVuU2V0dGVyID0gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZElzT3BlbikuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcblxuICAgIHZhciBzaG93SGludCA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkU2hvd0hpbnQpIHx8IGZhbHNlO1xuXG4gICAgLy9JTlRFUk5BTCBWQVJJQUJMRVNcblxuICAgIC8vbW9kZWwgc2V0dGVyIGV4ZWN1dGVkIHVwb24gbWF0Y2ggc2VsZWN0aW9uXG4gICAgdmFyIHBhcnNlZE1vZGVsID0gJHBhcnNlKGF0dHJzLm5nTW9kZWwpO1xuICAgIHZhciBpbnZva2VNb2RlbFNldHRlciA9ICRwYXJzZShhdHRycy5uZ01vZGVsICsgJygkJCRwKScpO1xuICAgIHZhciAkc2V0TW9kZWxWYWx1ZSA9IGZ1bmN0aW9uKHNjb3BlLCBuZXdWYWx1ZSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihwYXJzZWRNb2RlbChvcmlnaW5hbFNjb3BlKSkgJiZcbiAgICAgICAgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCdnZXR0ZXJTZXR0ZXInKSkge1xuICAgICAgICByZXR1cm4gaW52b2tlTW9kZWxTZXR0ZXIoc2NvcGUsIHskJCRwOiBuZXdWYWx1ZX0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyc2VkTW9kZWwuYXNzaWduKHNjb3BlLCBuZXdWYWx1ZSk7XG4gICAgfTtcblxuICAgIC8vZXhwcmVzc2lvbnMgdXNlZCBieSB0eXBlYWhlYWRcbiAgICB2YXIgcGFyc2VyUmVzdWx0ID0gdHlwZWFoZWFkUGFyc2VyLnBhcnNlKGF0dHJzLnVpYlR5cGVhaGVhZCk7XG5cbiAgICB2YXIgaGFzRm9jdXM7XG5cbiAgICAvL1VzZWQgdG8gYXZvaWQgYnVnIGluIGlPUyB3ZWJ2aWV3IHdoZXJlIGlPUyBrZXlib2FyZCBkb2VzIG5vdCBmaXJlXG4gICAgLy9tb3VzZWRvd24gJiBtb3VzZXVwIGV2ZW50c1xuICAgIC8vSXNzdWUgIzM2OTlcbiAgICB2YXIgc2VsZWN0ZWQ7XG5cbiAgICAvL2NyZWF0ZSBhIGNoaWxkIHNjb3BlIGZvciB0aGUgdHlwZWFoZWFkIGRpcmVjdGl2ZSBzbyB3ZSBhcmUgbm90IHBvbGx1dGluZyBvcmlnaW5hbCBzY29wZVxuICAgIC8vd2l0aCB0eXBlYWhlYWQtc3BlY2lmaWMgZGF0YSAobWF0Y2hlcywgcXVlcnkgZXRjLilcbiAgICB2YXIgc2NvcGUgPSBvcmlnaW5hbFNjb3BlLiRuZXcoKTtcbiAgICB2YXIgb2ZmRGVzdHJveSA9IG9yaWdpbmFsU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgc2NvcGUuJGRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICBzY29wZS4kb24oJyRkZXN0cm95Jywgb2ZmRGVzdHJveSk7XG5cbiAgICAvLyBXQUktQVJJQVxuICAgIHZhciBwb3B1cElkID0gJ3R5cGVhaGVhZC0nICsgc2NvcGUuJGlkICsgJy0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgIGVsZW1lbnQuYXR0cih7XG4gICAgICAnYXJpYS1hdXRvY29tcGxldGUnOiAnbGlzdCcsXG4gICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgJ2FyaWEtb3ducyc6IHBvcHVwSWRcbiAgICB9KTtcblxuICAgIHZhciBpbnB1dHNDb250YWluZXIsIGhpbnRJbnB1dEVsZW07XG4gICAgLy9hZGQgcmVhZC1vbmx5IGlucHV0IHRvIHNob3cgaGludFxuICAgIGlmIChzaG93SGludCkge1xuICAgICAgaW5wdXRzQ29udGFpbmVyID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2PjwvZGl2PicpO1xuICAgICAgaW5wdXRzQ29udGFpbmVyLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcbiAgICAgIGVsZW1lbnQuYWZ0ZXIoaW5wdXRzQ29udGFpbmVyKTtcbiAgICAgIGhpbnRJbnB1dEVsZW0gPSBlbGVtZW50LmNsb25lKCk7XG4gICAgICBoaW50SW5wdXRFbGVtLmF0dHIoJ3BsYWNlaG9sZGVyJywgJycpO1xuICAgICAgaGludElucHV0RWxlbS5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgaGludElucHV0RWxlbS52YWwoJycpO1xuICAgICAgaGludElucHV0RWxlbS5jc3Moe1xuICAgICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxuICAgICAgICAndG9wJzogJzBweCcsXG4gICAgICAgICdsZWZ0JzogJzBweCcsXG4gICAgICAgICdib3JkZXItY29sb3InOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAnYm94LXNoYWRvdyc6ICdub25lJyxcbiAgICAgICAgJ29wYWNpdHknOiAxLFxuICAgICAgICAnYmFja2dyb3VuZCc6ICdub25lIDAlIDAlIC8gYXV0byByZXBlYXQgc2Nyb2xsIHBhZGRpbmctYm94IGJvcmRlci1ib3ggcmdiKDI1NSwgMjU1LCAyNTUpJyxcbiAgICAgICAgJ2NvbG9yJzogJyM5OTknXG4gICAgICB9KTtcbiAgICAgIGVsZW1lbnQuY3NzKHtcbiAgICAgICAgJ3Bvc2l0aW9uJzogJ3JlbGF0aXZlJyxcbiAgICAgICAgJ3ZlcnRpY2FsLWFsaWduJzogJ3RvcCcsXG4gICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJ3RyYW5zcGFyZW50J1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChoaW50SW5wdXRFbGVtLmF0dHIoJ2lkJykpIHtcbiAgICAgICAgaGludElucHV0RWxlbS5yZW1vdmVBdHRyKCdpZCcpOyAvLyByZW1vdmUgZHVwbGljYXRlIGlkIGlmIHByZXNlbnQuXG4gICAgICB9XG4gICAgICBpbnB1dHNDb250YWluZXIuYXBwZW5kKGhpbnRJbnB1dEVsZW0pO1xuICAgICAgaGludElucHV0RWxlbS5hZnRlcihlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvL3BvcC11cCBlbGVtZW50IHVzZWQgdG8gZGlzcGxheSBtYXRjaGVzXG4gICAgdmFyIHBvcFVwRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgdWliLXR5cGVhaGVhZC1wb3B1cD48L2Rpdj4nKTtcbiAgICBwb3BVcEVsLmF0dHIoe1xuICAgICAgaWQ6IHBvcHVwSWQsXG4gICAgICBtYXRjaGVzOiAnbWF0Y2hlcycsXG4gICAgICBhY3RpdmU6ICdhY3RpdmVJZHgnLFxuICAgICAgc2VsZWN0OiAnc2VsZWN0KGFjdGl2ZUlkeCwgZXZ0KScsXG4gICAgICAnbW92ZS1pbi1wcm9ncmVzcyc6ICdtb3ZlSW5Qcm9ncmVzcycsXG4gICAgICBxdWVyeTogJ3F1ZXJ5JyxcbiAgICAgIHBvc2l0aW9uOiAncG9zaXRpb24nLFxuICAgICAgJ2Fzc2lnbi1pcy1vcGVuJzogJ2Fzc2lnbklzT3Blbihpc09wZW4pJyxcbiAgICAgIGRlYm91bmNlOiAnZGVib3VuY2VVcGRhdGUnXG4gICAgfSk7XG4gICAgLy9jdXN0b20gaXRlbSB0ZW1wbGF0ZVxuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRycy50eXBlYWhlYWRUZW1wbGF0ZVVybCkpIHtcbiAgICAgIHBvcFVwRWwuYXR0cigndGVtcGxhdGUtdXJsJywgYXR0cnMudHlwZWFoZWFkVGVtcGxhdGVVcmwpO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRycy50eXBlYWhlYWRQb3B1cFRlbXBsYXRlVXJsKSkge1xuICAgICAgcG9wVXBFbC5hdHRyKCdwb3B1cC10ZW1wbGF0ZS11cmwnLCBhdHRycy50eXBlYWhlYWRQb3B1cFRlbXBsYXRlVXJsKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzZXRIaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2hvd0hpbnQpIHtcbiAgICAgICAgaGludElucHV0RWxlbS52YWwoJycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzZXRNYXRjaGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS5tYXRjaGVzID0gW107XG4gICAgICBzY29wZS5hY3RpdmVJZHggPSAtMTtcbiAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgIHJlc2V0SGludCgpO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0TWF0Y2hJZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gcG9wdXBJZCArICctb3B0aW9uLScgKyBpbmRleDtcbiAgICB9O1xuXG4gICAgLy8gSW5kaWNhdGUgdGhhdCB0aGUgc3BlY2lmaWVkIG1hdGNoIGlzIHRoZSBhY3RpdmUgKHByZS1zZWxlY3RlZCkgaXRlbSBpbiB0aGUgbGlzdCBvd25lZCBieSB0aGlzIHR5cGVhaGVhZC5cbiAgICAvLyBUaGlzIGF0dHJpYnV0ZSBpcyBhZGRlZCBvciByZW1vdmVkIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgYGFjdGl2ZUlkeGAgY2hhbmdlcy5cbiAgICBzY29wZS4kd2F0Y2goJ2FjdGl2ZUlkeCcsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsIGdldE1hdGNoSWQoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBpbnB1dElzRXhhY3RNYXRjaCA9IGZ1bmN0aW9uKGlucHV0VmFsdWUsIGluZGV4KSB7XG4gICAgICBpZiAoc2NvcGUubWF0Y2hlcy5sZW5ndGggPiBpbmRleCAmJiBpbnB1dFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dFZhbHVlLnRvVXBwZXJDYXNlKCkgPT09IHNjb3BlLm1hdGNoZXNbaW5kZXhdLmxhYmVsLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgdmFyIGdldE1hdGNoZXNBc3luYyA9IGZ1bmN0aW9uKGlucHV0VmFsdWUsIGV2dCkge1xuICAgICAgdmFyIGxvY2FscyA9IHskdmlld1ZhbHVlOiBpbnB1dFZhbHVlfTtcbiAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCB0cnVlKTtcbiAgICAgIGlzTm9SZXN1bHRzU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICRxLndoZW4ocGFyc2VyUmVzdWx0LnNvdXJjZShvcmlnaW5hbFNjb3BlLCBsb2NhbHMpKS50aGVuKGZ1bmN0aW9uKG1hdGNoZXMpIHtcbiAgICAgICAgLy9pdCBtaWdodCBoYXBwZW4gdGhhdCBzZXZlcmFsIGFzeW5jIHF1ZXJpZXMgd2VyZSBpbiBwcm9ncmVzcyBpZiBhIHVzZXIgd2VyZSB0eXBpbmcgZmFzdFxuICAgICAgICAvL2J1dCB3ZSBhcmUgaW50ZXJlc3RlZCBvbmx5IGluIHJlc3BvbnNlcyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIGN1cnJlbnQgdmlldyB2YWx1ZVxuICAgICAgICB2YXIgb25DdXJyZW50UmVxdWVzdCA9IGlucHV0VmFsdWUgPT09IG1vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICAgICBpZiAob25DdXJyZW50UmVxdWVzdCAmJiBoYXNGb2N1cykge1xuICAgICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gZm9jdXNGaXJzdCA/IDAgOiAtMTtcbiAgICAgICAgICAgIGlzTm9SZXN1bHRzU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgIHNjb3BlLm1hdGNoZXMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgLy90cmFuc2Zvcm0gbGFiZWxzXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSBtYXRjaGVzW2ldO1xuICAgICAgICAgICAgICBzY29wZS5tYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBnZXRNYXRjaElkKGkpLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBwYXJzZXJSZXN1bHQudmlld01hcHBlcihzY29wZSwgbG9jYWxzKSxcbiAgICAgICAgICAgICAgICBtb2RlbDogbWF0Y2hlc1tpXVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2NvcGUucXVlcnkgPSBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgLy9wb3NpdGlvbiBwb3AtdXAgd2l0aCBtYXRjaGVzIC0gd2UgbmVlZCB0byByZS1jYWxjdWxhdGUgaXRzIHBvc2l0aW9uIGVhY2ggdGltZSB3ZSBhcmUgb3BlbmluZyBhIHdpbmRvd1xuICAgICAgICAgICAgLy93aXRoIG1hdGNoZXMgYXMgYSBwb3AtdXAgbWlnaHQgYmUgYWJzb2x1dGUtcG9zaXRpb25lZCBhbmQgcG9zaXRpb24gb2YgYW4gaW5wdXQgbWlnaHQgaGF2ZSBjaGFuZ2VkIG9uIGEgcGFnZVxuICAgICAgICAgICAgLy9kdWUgdG8gb3RoZXIgZWxlbWVudHMgYmVpbmcgcmVuZGVyZWRcbiAgICAgICAgICAgIHJlY2FsY3VsYXRlUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vU2VsZWN0IHRoZSBzaW5nbGUgcmVtYWluaW5nIG9wdGlvbiBpZiB1c2VyIGlucHV0IG1hdGNoZXNcbiAgICAgICAgICAgIGlmIChzZWxlY3RPbkV4YWN0ICYmIHNjb3BlLm1hdGNoZXMubGVuZ3RoID09PSAxICYmIGlucHV0SXNFeGFjdE1hdGNoKGlucHV0VmFsdWUsIDApKSB7XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHNjb3BlLmRlYm91bmNlVXBkYXRlKSB8fCBhbmd1bGFyLmlzT2JqZWN0KHNjb3BlLmRlYm91bmNlVXBkYXRlKSkge1xuICAgICAgICAgICAgICAgICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3QoMCwgZXZ0KTtcbiAgICAgICAgICAgICAgICB9LCBhbmd1bGFyLmlzTnVtYmVyKHNjb3BlLmRlYm91bmNlVXBkYXRlKSA/IHNjb3BlLmRlYm91bmNlVXBkYXRlIDogc2NvcGUuZGVib3VuY2VVcGRhdGVbJ2RlZmF1bHQnXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0KDAsIGV2dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3dIaW50KSB7XG4gICAgICAgICAgICAgIHZhciBmaXJzdExhYmVsID0gc2NvcGUubWF0Y2hlc1swXS5sYWJlbDtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoaW5wdXRWYWx1ZSkgJiZcbiAgICAgICAgICAgICAgICBpbnB1dFZhbHVlLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBmaXJzdExhYmVsLnNsaWNlKDAsIGlucHV0VmFsdWUubGVuZ3RoKS50b1VwcGVyQ2FzZSgpID09PSBpbnB1dFZhbHVlLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBoaW50SW5wdXRFbGVtLnZhbChpbnB1dFZhbHVlICsgZmlyc3RMYWJlbC5zbGljZShpbnB1dFZhbHVlLmxlbmd0aCkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpbnRJbnB1dEVsZW0udmFsKCcnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgICAgIGlzTm9SZXN1bHRzU2V0dGVyKG9yaWdpbmFsU2NvcGUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob25DdXJyZW50UmVxdWVzdCkge1xuICAgICAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgaXNOb1Jlc3VsdHNTZXR0ZXIob3JpZ2luYWxTY29wZSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gYmluZCBldmVudHMgb25seSBpZiBhcHBlbmRUb0JvZHkgcGFyYW1zIGV4aXN0IC0gcGVyZm9ybWFuY2UgZmVhdHVyZVxuICAgIGlmIChhcHBlbmRUb0JvZHkpIHtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgZmlyZVJlY2FsY3VsYXRpbmcpO1xuICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5vbignc2Nyb2xsJywgZmlyZVJlY2FsY3VsYXRpbmcpO1xuICAgIH1cblxuICAgIC8vIERlY2xhcmUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBvdXRzaWRlIHJlY2FsY3VsYXRpbmcgZm9yXG4gICAgLy8gcHJvcGVyIGRlYm91bmNpbmdcbiAgICB2YXIgZGVib3VuY2VkUmVjYWxjdWxhdGUgPSAkJGRlYm91bmNlKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgcG9wdXAgaXMgdmlzaWJsZVxuICAgICAgaWYgKHNjb3BlLm1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlY2FsY3VsYXRlUG9zaXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgc2NvcGUubW92ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB9LCBldmVudERlYm91bmNlVGltZSk7XG5cbiAgICAvLyBEZWZhdWx0IHByb2dyZXNzIHR5cGVcbiAgICBzY29wZS5tb3ZlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZmlyZVJlY2FsY3VsYXRpbmcoKSB7XG4gICAgICBpZiAoIXNjb3BlLm1vdmVJblByb2dyZXNzKSB7XG4gICAgICAgIHNjb3BlLm1vdmVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgfVxuXG4gICAgICBkZWJvdW5jZWRSZWNhbGN1bGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIHJlY2FsY3VsYXRlIGFjdHVhbCBwb3NpdGlvbiBhbmQgc2V0IG5ldyB2YWx1ZXMgdG8gc2NvcGVcbiAgICAvLyBhZnRlciBkaWdlc3QgbG9vcCBpcyBwb3B1cCBpbiByaWdodCBwb3NpdGlvblxuICAgIGZ1bmN0aW9uIHJlY2FsY3VsYXRlUG9zaXRpb24oKSB7XG4gICAgICBzY29wZS5wb3NpdGlvbiA9IGFwcGVuZFRvQm9keSA/ICRwb3NpdGlvbi5vZmZzZXQoZWxlbWVudCkgOiAkcG9zaXRpb24ucG9zaXRpb24oZWxlbWVudCk7XG4gICAgICBzY29wZS5wb3NpdGlvbi50b3AgKz0gZWxlbWVudC5wcm9wKCdvZmZzZXRIZWlnaHQnKTtcbiAgICB9XG5cbiAgICAvL3dlIG5lZWQgdG8gcHJvcGFnYXRlIHVzZXIncyBxdWVyeSBzbyB3ZSBjYW4gaGlnbGlnaHQgbWF0Y2hlc1xuICAgIHNjb3BlLnF1ZXJ5ID0gdW5kZWZpbmVkO1xuXG4gICAgLy9EZWNsYXJlIHRoZSB0aW1lb3V0IHByb21pc2UgdmFyIG91dHNpZGUgdGhlIGZ1bmN0aW9uIHNjb3BlIHNvIHRoYXQgc3RhY2tlZCBjYWxscyBjYW4gYmUgY2FuY2VsbGVkIGxhdGVyXG4gICAgdmFyIHRpbWVvdXRQcm9taXNlO1xuXG4gICAgdmFyIHNjaGVkdWxlU2VhcmNoV2l0aFRpbWVvdXQgPSBmdW5jdGlvbihpbnB1dFZhbHVlKSB7XG4gICAgICB0aW1lb3V0UHJvbWlzZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBnZXRNYXRjaGVzQXN5bmMoaW5wdXRWYWx1ZSk7XG4gICAgICB9LCB3YWl0VGltZSk7XG4gICAgfTtcblxuICAgIHZhciBjYW5jZWxQcmV2aW91c1RpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aW1lb3V0UHJvbWlzZSkge1xuICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dFByb21pc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXNldE1hdGNoZXMoKTtcblxuICAgIHNjb3BlLmFzc2lnbklzT3BlbiA9IGZ1bmN0aW9uIChpc09wZW4pIHtcbiAgICAgIGlzT3BlblNldHRlcihvcmlnaW5hbFNjb3BlLCBpc09wZW4pO1xuICAgIH07XG5cbiAgICBzY29wZS5zZWxlY3QgPSBmdW5jdGlvbihhY3RpdmVJZHgsIGV2dCkge1xuICAgICAgLy9jYWxsZWQgZnJvbSB3aXRoaW4gdGhlICRkaWdlc3QoKSBjeWNsZVxuICAgICAgdmFyIGxvY2FscyA9IHt9O1xuICAgICAgdmFyIG1vZGVsLCBpdGVtO1xuXG4gICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICBsb2NhbHNbcGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IGl0ZW0gPSBzY29wZS5tYXRjaGVzW2FjdGl2ZUlkeF0ubW9kZWw7XG4gICAgICBtb2RlbCA9IHBhcnNlclJlc3VsdC5tb2RlbE1hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xuICAgICAgJHNldE1vZGVsVmFsdWUob3JpZ2luYWxTY29wZSwgbW9kZWwpO1xuICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCB0cnVlKTtcbiAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3BhcnNlJywgdHJ1ZSk7XG5cbiAgICAgIG9uU2VsZWN0Q2FsbGJhY2sob3JpZ2luYWxTY29wZSwge1xuICAgICAgICAkaXRlbTogaXRlbSxcbiAgICAgICAgJG1vZGVsOiBtb2RlbCxcbiAgICAgICAgJGxhYmVsOiBwYXJzZXJSZXN1bHQudmlld01hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpLFxuICAgICAgICAkZXZlbnQ6IGV2dFxuICAgICAgfSk7XG5cbiAgICAgIHJlc2V0TWF0Y2hlcygpO1xuXG4gICAgICAvL3JldHVybiBmb2N1cyB0byB0aGUgaW5wdXQgZWxlbWVudCBpZiBhIG1hdGNoIHdhcyBzZWxlY3RlZCB2aWEgYSBtb3VzZSBjbGljayBldmVudFxuICAgICAgLy8gdXNlIHRpbWVvdXQgdG8gYXZvaWQgJHJvb3RTY29wZTppbnByb2cgZXJyb3JcbiAgICAgIGlmIChzY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRGb2N1c09uU2VsZWN0KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7IGVsZW1lbnRbMF0uZm9jdXMoKTsgfSwgMCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvL2JpbmQga2V5Ym9hcmQgZXZlbnRzOiBhcnJvd3MgdXAoMzgpIC8gZG93big0MCksIGVudGVyKDEzKSBhbmQgdGFiKDkpLCBlc2MoMjcpXG4gICAgZWxlbWVudC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgLy90eXBlYWhlYWQgaXMgb3BlbiBhbmQgYW4gXCJpbnRlcmVzdGluZ1wiIGtleSB3YXMgcHJlc3NlZFxuICAgICAgaWYgKHNjb3BlLm1hdGNoZXMubGVuZ3RoID09PSAwIHx8IEhPVF9LRVlTLmluZGV4T2YoZXZ0LndoaWNoKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvdWxkU2VsZWN0ID0gaXNTZWxlY3RFdmVudChvcmlnaW5hbFNjb3BlLCB7JGV2ZW50OiBldnR9KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBpZiB0aGVyZSdzIG5vdGhpbmcgc2VsZWN0ZWQgKGkuZS4gZm9jdXNGaXJzdCkgYW5kIGVudGVyIG9yIHRhYiBpcyBoaXRcbiAgICAgICAqIG9yXG4gICAgICAgKiBzaGlmdCArIHRhYiBpcyBwcmVzc2VkIHRvIGJyaW5nIGZvY3VzIHRvIHRoZSBwcmV2aW91cyBlbGVtZW50XG4gICAgICAgKiB0aGVuIGNsZWFyIHRoZSByZXN1bHRzXG4gICAgICAgKi9cbiAgICAgIGlmIChzY29wZS5hY3RpdmVJZHggPT09IC0xICYmIHNob3VsZFNlbGVjdCB8fCBldnQud2hpY2ggPT09IDkgJiYgISFldnQuc2hpZnRLZXkpIHtcbiAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciB0YXJnZXQ7XG4gICAgICBzd2l0Y2ggKGV2dC53aGljaCkge1xuICAgICAgICBjYXNlIDI3OiAvLyBlc2NhcGVcbiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgICBvcmlnaW5hbFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzODogLy8gdXAgYXJyb3dcbiAgICAgICAgICBzY29wZS5hY3RpdmVJZHggPSAoc2NvcGUuYWN0aXZlSWR4ID4gMCA/IHNjb3BlLmFjdGl2ZUlkeCA6IHNjb3BlLm1hdGNoZXMubGVuZ3RoKSAtIDE7XG4gICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIHRhcmdldCA9IHBvcFVwRWxbMF0ucXVlcnlTZWxlY3RvckFsbCgnLnVpYi10eXBlYWhlYWQtbWF0Y2gnKVtzY29wZS5hY3RpdmVJZHhdO1xuICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLnNjcm9sbFRvcCA9IHRhcmdldC5vZmZzZXRUb3A7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDA6IC8vIGRvd24gYXJyb3dcbiAgICAgICAgICBzY29wZS5hY3RpdmVJZHggPSAoc2NvcGUuYWN0aXZlSWR4ICsgMSkgJSBzY29wZS5tYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgdGFyZ2V0ID0gcG9wVXBFbFswXS5xdWVyeVNlbGVjdG9yQWxsKCcudWliLXR5cGVhaGVhZC1tYXRjaCcpW3Njb3BlLmFjdGl2ZUlkeF07XG4gICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuc2Nyb2xsVG9wID0gdGFyZ2V0Lm9mZnNldFRvcDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoc2hvdWxkU2VsZWN0KSB7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHNjb3BlLmRlYm91bmNlVXBkYXRlKSB8fCBhbmd1bGFyLmlzT2JqZWN0KHNjb3BlLmRlYm91bmNlVXBkYXRlKSkge1xuICAgICAgICAgICAgICAgICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3Qoc2NvcGUuYWN0aXZlSWR4LCBldnQpO1xuICAgICAgICAgICAgICAgIH0sIGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUpID8gc2NvcGUuZGVib3VuY2VVcGRhdGUgOiBzY29wZS5kZWJvdW5jZVVwZGF0ZVsnZGVmYXVsdCddKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3Qoc2NvcGUuYWN0aXZlSWR4LCBldnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIGhhc0ZvY3VzID0gdHJ1ZTtcbiAgICAgIGlmIChtaW5MZW5ndGggPT09IDAgJiYgIW1vZGVsQ3RybC4kdmlld1ZhbHVlKSB7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGdldE1hdGNoZXNBc3luYyhtb2RlbEN0cmwuJHZpZXdWYWx1ZSwgZXZ0KTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdibHVyJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBpZiAoaXNTZWxlY3RPbkJsdXIgJiYgc2NvcGUubWF0Y2hlcy5sZW5ndGggJiYgc2NvcGUuYWN0aXZlSWR4ICE9PSAtMSAmJiAhc2VsZWN0ZWQpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3Qoc2NvcGUuZGVib3VuY2VVcGRhdGUpICYmIGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUuYmx1cikpIHtcbiAgICAgICAgICAgICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgsIGV2dCk7XG4gICAgICAgICAgICB9LCBzY29wZS5kZWJvdW5jZVVwZGF0ZS5ibHVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NvcGUuc2VsZWN0KHNjb3BlLmFjdGl2ZUlkeCwgZXZ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0VkaXRhYmxlICYmIG1vZGVsQ3RybC4kZXJyb3IuZWRpdGFibGUpIHtcbiAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoKTtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIFJlc2V0IHZhbGlkaXR5IGFzIHdlIGFyZSBjbGVhcmluZ1xuICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgncGFyc2UnLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnQudmFsKCcnKTtcbiAgICAgIH1cbiAgICAgIGhhc0ZvY3VzID0gZmFsc2U7XG4gICAgICBzZWxlY3RlZCA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy8gS2VlcCByZWZlcmVuY2UgdG8gY2xpY2sgaGFuZGxlciB0byB1bmJpbmQgaXQuXG4gICAgdmFyIGRpc21pc3NDbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgIC8vIElzc3VlICMzOTczXG4gICAgICAvLyBGaXJlZm94IHRyZWF0cyByaWdodCBjbGljayBhcyBhIGNsaWNrIG9uIGRvY3VtZW50XG4gICAgICBpZiAoZWxlbWVudFswXSAhPT0gZXZ0LnRhcmdldCAmJiBldnQud2hpY2ggIT09IDMgJiYgc2NvcGUubWF0Y2hlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgb3JpZ2luYWxTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJGRvY3VtZW50Lm9uKCdjbGljaycsIGRpc21pc3NDbGlja0hhbmRsZXIpO1xuXG4gICAgb3JpZ2luYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGRpc21pc3NDbGlja0hhbmRsZXIpO1xuICAgICAgaWYgKGFwcGVuZFRvQm9keSB8fCBhcHBlbmRUbykge1xuICAgICAgICAkcG9wdXAucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcHBlbmRUb0JvZHkpIHtcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgZmlyZVJlY2FsY3VsYXRpbmcpO1xuICAgICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLm9mZignc2Nyb2xsJywgZmlyZVJlY2FsY3VsYXRpbmcpO1xuICAgICAgfVxuICAgICAgLy8gUHJldmVudCBqUXVlcnkgY2FjaGUgbWVtb3J5IGxlYWtcbiAgICAgIHBvcFVwRWwucmVtb3ZlKCk7XG5cbiAgICAgIGlmIChzaG93SGludCkge1xuICAgICAgICAgIGlucHV0c0NvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciAkcG9wdXAgPSAkY29tcGlsZShwb3BVcEVsKShzY29wZSk7XG5cbiAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZCgkcG9wdXApO1xuICAgIH0gZWxzZSBpZiAoYXBwZW5kVG8pIHtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudChhcHBlbmRUbykuZXEoMCkuYXBwZW5kKCRwb3B1cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuYWZ0ZXIoJHBvcHVwKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQgPSBmdW5jdGlvbihfbW9kZWxDdHJsKSB7XG4gICAgICBtb2RlbEN0cmwgPSBfbW9kZWxDdHJsO1xuICAgICAgbmdNb2RlbE9wdGlvbnMgPSBleHRyYWN0T3B0aW9ucyhtb2RlbEN0cmwpO1xuXG4gICAgICBzY29wZS5kZWJvdW5jZVVwZGF0ZSA9ICRwYXJzZShuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ2RlYm91bmNlJykpKG9yaWdpbmFsU2NvcGUpO1xuXG4gICAgICAvL3BsdWcgaW50byAkcGFyc2VycyBwaXBlbGluZSB0byBvcGVuIGEgdHlwZWFoZWFkIG9uIHZpZXcgY2hhbmdlcyBpbml0aWF0ZWQgZnJvbSBET01cbiAgICAgIC8vJHBhcnNlcnMga2ljay1pbiBvbiBhbGwgdGhlIGNoYW5nZXMgY29taW5nIGZyb20gdGhlIHZpZXcgYXMgd2VsbCBhcyBtYW51YWxseSB0cmlnZ2VyZWQgYnkgJHNldFZpZXdWYWx1ZVxuICAgICAgbW9kZWxDdHJsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24oaW5wdXRWYWx1ZSkge1xuICAgICAgICBoYXNGb2N1cyA9IHRydWU7XG5cbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gMCB8fCBpbnB1dFZhbHVlICYmIGlucHV0VmFsdWUubGVuZ3RoID49IG1pbkxlbmd0aCkge1xuICAgICAgICAgIGlmICh3YWl0VGltZSA+IDApIHtcbiAgICAgICAgICAgIGNhbmNlbFByZXZpb3VzVGltZW91dCgpO1xuICAgICAgICAgICAgc2NoZWR1bGVTZWFyY2hXaXRoVGltZW91dChpbnB1dFZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0TWF0Y2hlc0FzeW5jKGlucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0xvYWRpbmdTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgICAgIGNhbmNlbFByZXZpb3VzVGltZW91dCgpO1xuICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIC8vIFJlc2V0IGluIGNhc2UgdXNlciBoYWQgdHlwZWQgc29tZXRoaW5nIHByZXZpb3VzbHkuXG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCB0cnVlKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSk7XG5cbiAgICAgIG1vZGVsQ3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZVZpZXdWYWx1ZSwgZW1wdHlWaWV3VmFsdWU7XG4gICAgICAgIHZhciBsb2NhbHMgPSB7fTtcblxuICAgICAgICAvLyBUaGUgdmFsaWRpdHkgbWF5IGJlIHNldCB0byBmYWxzZSB2aWEgJHBhcnNlcnMgKHNlZSBhYm92ZSkgaWZcbiAgICAgICAgLy8gdGhlIG1vZGVsIGlzIHJlc3RyaWN0ZWQgdG8gc2VsZWN0ZWQgdmFsdWVzLiBJZiB0aGUgbW9kZWxcbiAgICAgICAgLy8gaXMgc2V0IG1hbnVhbGx5IGl0IGlzIGNvbnNpZGVyZWQgdG8gYmUgdmFsaWQuXG4gICAgICAgIGlmICghaXNFZGl0YWJsZSkge1xuICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXRGb3JtYXR0ZXIpIHtcbiAgICAgICAgICBsb2NhbHMuJG1vZGVsID0gbW9kZWxWYWx1ZTtcbiAgICAgICAgICByZXR1cm4gaW5wdXRGb3JtYXR0ZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaXQgbWlnaHQgaGFwcGVuIHRoYXQgd2UgZG9uJ3QgaGF2ZSBlbm91Z2ggaW5mbyB0byBwcm9wZXJseSByZW5kZXIgaW5wdXQgdmFsdWVcbiAgICAgICAgLy93ZSBuZWVkIHRvIGNoZWNrIGZvciB0aGlzIHNpdHVhdGlvbiBhbmQgc2ltcGx5IHJldHVybiBtb2RlbCB2YWx1ZSBpZiB3ZSBjYW4ndCBhcHBseSBjdXN0b20gZm9ybWF0dGluZ1xuICAgICAgICBsb2NhbHNbcGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IG1vZGVsVmFsdWU7XG4gICAgICAgIGNhbmRpZGF0ZVZpZXdWYWx1ZSA9IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XG4gICAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICBlbXB0eVZpZXdWYWx1ZSA9IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XG5cbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZVZpZXdWYWx1ZSAhPT0gZW1wdHlWaWV3VmFsdWUgPyBjYW5kaWRhdGVWaWV3VmFsdWUgOiBtb2RlbFZhbHVlO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RPcHRpb25zKG5nTW9kZWxDdHJsKSB7XG4gICAgICB2YXIgbmdNb2RlbE9wdGlvbnM7XG5cbiAgICAgIGlmIChhbmd1bGFyLnZlcnNpb24ubWlub3IgPCA2KSB7IC8vIGluIGFuZ3VsYXIgPCAxLjYgJG9wdGlvbnMgY291bGQgYmUgbWlzc2luZ1xuICAgICAgICAvLyBndWFyYW50ZWUgYSB2YWx1ZVxuICAgICAgICBuZ01vZGVsT3B0aW9ucyA9IG5nTW9kZWxDdHJsLiRvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIC8vIG1pbWljIDEuNisgYXBpXG4gICAgICAgIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbmdNb2RlbE9wdGlvbnNba2V5XTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7IC8vIGluIGFuZ3VsYXIgPj0xLjYgJG9wdGlvbnMgaXMgYWx3YXlzIHByZXNlbnRcbiAgICAgICAgbmdNb2RlbE9wdGlvbnMgPSBuZ01vZGVsQ3RybC4kb3B0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5nTW9kZWxPcHRpb25zO1xuICAgIH1cbiAgfV0pXG5cbiAgLmRpcmVjdGl2ZSgndWliVHlwZWFoZWFkJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRyb2xsZXI6ICdVaWJUeXBlYWhlYWRDb250cm9sbGVyJyxcbiAgICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICd1aWJUeXBlYWhlYWQnXSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKG9yaWdpbmFsU2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgICBjdHJsc1sxXS5pbml0KGN0cmxzWzBdKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KVxuXG4gIC5kaXJlY3RpdmUoJ3VpYlR5cGVhaGVhZFBvcHVwJywgWyckJGRlYm91bmNlJywgZnVuY3Rpb24oJCRkZWJvdW5jZSkge1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZToge1xuICAgICAgICBtYXRjaGVzOiAnPScsXG4gICAgICAgIHF1ZXJ5OiAnPScsXG4gICAgICAgIGFjdGl2ZTogJz0nLFxuICAgICAgICBwb3NpdGlvbjogJyYnLFxuICAgICAgICBtb3ZlSW5Qcm9ncmVzczogJz0nLFxuICAgICAgICBzZWxlY3Q6ICcmJyxcbiAgICAgICAgYXNzaWduSXNPcGVuOiAnJicsXG4gICAgICAgIGRlYm91bmNlOiAnJidcbiAgICAgIH0sXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHJldHVybiBhdHRycy5wb3B1cFRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sJztcbiAgICAgIH0sXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgc2NvcGUudGVtcGxhdGVVcmwgPSBhdHRycy50ZW1wbGF0ZVVybDtcblxuICAgICAgICBzY29wZS5pc09wZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaXNEcm9wZG93bk9wZW4gPSBzY29wZS5tYXRjaGVzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgc2NvcGUuYXNzaWduSXNPcGVuKHsgaXNPcGVuOiBpc0Ryb3Bkb3duT3BlbiB9KTtcbiAgICAgICAgICByZXR1cm4gaXNEcm9wZG93bk9wZW47XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbihtYXRjaElkeCkge1xuICAgICAgICAgIHJldHVybiBzY29wZS5hY3RpdmUgPT09IG1hdGNoSWR4O1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLnNlbGVjdEFjdGl2ZSA9IGZ1bmN0aW9uKG1hdGNoSWR4KSB7XG4gICAgICAgICAgc2NvcGUuYWN0aXZlID0gbWF0Y2hJZHg7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuc2VsZWN0TWF0Y2ggPSBmdW5jdGlvbihhY3RpdmVJZHgsIGV2dCkge1xuICAgICAgICAgIHZhciBkZWJvdW5jZSA9IHNjb3BlLmRlYm91bmNlKCk7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoZGVib3VuY2UpIHx8IGFuZ3VsYXIuaXNPYmplY3QoZGVib3VuY2UpKSB7XG4gICAgICAgICAgICAkJGRlYm91bmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzY29wZS5zZWxlY3Qoe2FjdGl2ZUlkeDogYWN0aXZlSWR4LCBldnQ6IGV2dH0pO1xuICAgICAgICAgICAgfSwgYW5ndWxhci5pc051bWJlcihkZWJvdW5jZSkgPyBkZWJvdW5jZSA6IGRlYm91bmNlWydkZWZhdWx0J10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS5zZWxlY3Qoe2FjdGl2ZUlkeDogYWN0aXZlSWR4LCBldnQ6IGV2dH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XSlcblxuICAuZGlyZWN0aXZlKCd1aWJUeXBlYWhlYWRNYXRjaCcsIFsnJHRlbXBsYXRlUmVxdWVzdCcsICckY29tcGlsZScsICckcGFyc2UnLCBmdW5jdGlvbigkdGVtcGxhdGVSZXF1ZXN0LCAkY29tcGlsZSwgJHBhcnNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGluZGV4OiAnPScsXG4gICAgICAgIG1hdGNoOiAnPScsXG4gICAgICAgIHF1ZXJ5OiAnPSdcbiAgICAgIH0sXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIHRwbFVybCA9ICRwYXJzZShhdHRycy50ZW1wbGF0ZVVybCkoc2NvcGUuJHBhcmVudCkgfHwgJ3VpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWwnO1xuICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHRwbFVybCkudGhlbihmdW5jdGlvbih0cGxDb250ZW50KSB7XG4gICAgICAgICAgdmFyIHRwbEVsID0gYW5ndWxhci5lbGVtZW50KHRwbENvbnRlbnQudHJpbSgpKTtcbiAgICAgICAgICBlbGVtZW50LnJlcGxhY2VXaXRoKHRwbEVsKTtcbiAgICAgICAgICAkY29tcGlsZSh0cGxFbCkoc2NvcGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XSlcblxuICAuZmlsdGVyKCd1aWJUeXBlYWhlYWRIaWdobGlnaHQnLCBbJyRzY2UnLCAnJGluamVjdG9yJywgJyRsb2cnLCBmdW5jdGlvbigkc2NlLCAkaW5qZWN0b3IsICRsb2cpIHtcbiAgICB2YXIgaXNTYW5pdGl6ZVByZXNlbnQ7XG4gICAgaXNTYW5pdGl6ZVByZXNlbnQgPSAkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKTtcblxuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ2V4cChxdWVyeVRvRXNjYXBlKSB7XG4gICAgICAvLyBSZWdleDogY2FwdHVyZSB0aGUgd2hvbGUgcXVlcnkgc3RyaW5nIGFuZCByZXBsYWNlIGl0IHdpdGggdGhlIHN0cmluZyB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYXRjaFxuICAgICAgLy8gdGhlIHJlc3VsdHMsIGZvciBleGFtcGxlIGlmIHRoZSBjYXB0dXJlIGlzIFwiYVwiIHRoZSByZXN1bHQgd2lsbCBiZSBcXGFcbiAgICAgIHJldHVybiBxdWVyeVRvRXNjYXBlLnJlcGxhY2UoLyhbLj8qK14kW1xcXVxcXFwoKXt9fC1dKS9nLCAnXFxcXCQxJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udGFpbnNIdG1sKG1hdGNoSXRlbSkge1xuICAgICAgcmV0dXJuIC88Lio+L2cudGVzdChtYXRjaEl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihtYXRjaEl0ZW0sIHF1ZXJ5KSB7XG4gICAgICBpZiAoIWlzU2FuaXRpemVQcmVzZW50ICYmIGNvbnRhaW5zSHRtbChtYXRjaEl0ZW0pKSB7XG4gICAgICAgICRsb2cud2FybignVW5zYWZlIHVzZSBvZiB0eXBlYWhlYWQgcGxlYXNlIHVzZSBuZ1Nhbml0aXplJyk7IC8vIFdhcm4gdGhlIHVzZXIgYWJvdXQgdGhlIGRhbmdlclxuICAgICAgfVxuICAgICAgbWF0Y2hJdGVtID0gcXVlcnkgPyAoJycgKyBtYXRjaEl0ZW0pLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVSZWdleHAocXVlcnkpLCAnZ2knKSwgJzxzdHJvbmc+JCY8L3N0cm9uZz4nKSA6IG1hdGNoSXRlbTsgLy8gUmVwbGFjZXMgdGhlIGNhcHR1cmUgc3RyaW5nIHdpdGggYSB0aGUgc2FtZSBzdHJpbmcgaW5zaWRlIG9mIGEgXCJzdHJvbmdcIiB0YWdcbiAgICAgIGlmICghaXNTYW5pdGl6ZVByZXNlbnQpIHtcbiAgICAgICAgbWF0Y2hJdGVtID0gJHNjZS50cnVzdEFzSHRtbChtYXRjaEl0ZW0pOyAvLyBJZiAkc2FuaXRpemUgaXMgbm90IHByZXNlbnQgd2UgcGFjayB0aGUgc3RyaW5nIGluIGEgJHNjZSBvYmplY3QgZm9yIHRoZSBuZy1iaW5kLWh0bWwgZGlyZWN0aXZlXG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hJdGVtO1xuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi1ncm91cC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLFxuICAgIFwiPGRpdiByb2xlPVxcXCJ0YWJcXFwiIGlkPVxcXCJ7ezo6aGVhZGluZ0lkfX1cXFwiIGFyaWEtc2VsZWN0ZWQ9XFxcInt7aXNPcGVufX1cXFwiIGNsYXNzPVxcXCJwYW5lbC1oZWFkaW5nXFxcIiBuZy1rZXlwcmVzcz1cXFwidG9nZ2xlT3BlbigkZXZlbnQpXFxcIj5cXG5cIiArXG4gICAgXCIgIDxoNCBjbGFzcz1cXFwicGFuZWwtdGl0bGVcXFwiPlxcblwiICtcbiAgICBcIiAgICA8YSByb2xlPVxcXCJidXR0b25cXFwiIGRhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCIgaHJlZiBhcmlhLWV4cGFuZGVkPVxcXCJ7e2lzT3Blbn19XFxcIiBhcmlhLWNvbnRyb2xzPVxcXCJ7ezo6cGFuZWxJZH19XFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcImFjY29yZGlvbi10b2dnbGVcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVPcGVuKClcXFwiIHVpYi1hY2NvcmRpb24tdHJhbnNjbHVkZT1cXFwiaGVhZGluZ1xcXCIgbmctZGlzYWJsZWQ9XFxcImlzRGlzYWJsZWRcXFwiIHVpYi10YWJpbmRleC10b2dnbGU+PHNwYW4gdWliLWFjY29yZGlvbi1oZWFkZXIgbmctY2xhc3M9XFxcInsndGV4dC1tdXRlZCc6IGlzRGlzYWJsZWR9XFxcIj57e2hlYWRpbmd9fTwvc3Bhbj48L2E+XFxuXCIgK1xuICAgIFwiICA8L2g0PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIjxkaXYgaWQ9XFxcInt7OjpwYW5lbElkfX1cXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OmhlYWRpbmdJZH19XFxcIiBhcmlhLWhpZGRlbj1cXFwie3shaXNPcGVufX1cXFwiIHJvbGU9XFxcInRhYnBhbmVsXFxcIiBjbGFzcz1cXFwicGFuZWwtY29sbGFwc2UgY29sbGFwc2VcXFwiIHVpYi1jb2xsYXBzZT1cXFwiIWlzT3BlblxcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJwYW5lbC1ib2R5XFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbFwiLFxuICAgIFwiPGRpdiByb2xlPVxcXCJ0YWJsaXN0XFxcIiBjbGFzcz1cXFwicGFuZWwtZ3JvdXBcXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWxcIixcbiAgICBcIjxidXR0b24gbmctc2hvdz1cXFwiY2xvc2VhYmxlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJjbG9zZVxcXCIgbmctY2xpY2s9XFxcImNsb3NlKHskZXZlbnQ6ICRldmVudH0pXFxcIj5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj4mdGltZXM7PC9zcGFuPlxcblwiICtcbiAgICBcIiAgPHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPkNsb3NlPC9zcGFuPlxcblwiICtcbiAgICBcIjwvYnV0dG9uPlxcblwiICtcbiAgICBcIjxkaXYgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2Nhcm91c2VsL2Nhcm91c2VsLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtaW5uZXJcXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiPGEgcm9sZT1cXFwiYnV0dG9uXFxcIiBocmVmIGNsYXNzPVxcXCJsZWZ0IGNhcm91c2VsLWNvbnRyb2xcXFwiIG5nLWNsaWNrPVxcXCJwcmV2KClcXFwiIG5nLWNsYXNzPVxcXCJ7IGRpc2FibGVkOiBpc1ByZXZEaXNhYmxlZCgpIH1cXFwiIG5nLXNob3c9XFxcInNsaWRlcy5sZW5ndGggPiAxXFxcIj5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvc3Bhbj5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5wcmV2aW91czwvc3Bhbj5cXG5cIiArXG4gICAgXCI8L2E+XFxuXCIgK1xuICAgIFwiPGEgcm9sZT1cXFwiYnV0dG9uXFxcIiBocmVmIGNsYXNzPVxcXCJyaWdodCBjYXJvdXNlbC1jb250cm9sXFxcIiBuZy1jbGljaz1cXFwibmV4dCgpXFxcIiBuZy1jbGFzcz1cXFwieyBkaXNhYmxlZDogaXNOZXh0RGlzYWJsZWQoKSB9XFxcIiBuZy1zaG93PVxcXCJzbGlkZXMubGVuZ3RoID4gMVxcXCI+XFxuXCIgK1xuICAgIFwiICA8c3BhbiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFxcXCI+PC9zcGFuPlxcblwiICtcbiAgICBcIiAgPHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPm5leHQ8L3NwYW4+XFxuXCIgK1xuICAgIFwiPC9hPlxcblwiICtcbiAgICBcIjxvbCBjbGFzcz1cXFwiY2Fyb3VzZWwtaW5kaWNhdG9yc1xcXCIgbmctc2hvdz1cXFwic2xpZGVzLmxlbmd0aCA+IDFcXFwiPlxcblwiICtcbiAgICBcIiAgPGxpIG5nLXJlcGVhdD1cXFwic2xpZGUgaW4gc2xpZGVzIHwgb3JkZXJCeTppbmRleE9mU2xpZGUgdHJhY2sgYnkgJGluZGV4XFxcIiBuZy1jbGFzcz1cXFwieyBhY3RpdmU6IGlzQWN0aXZlKHNsaWRlKSB9XFxcIiBuZy1jbGljaz1cXFwic2VsZWN0KHNsaWRlKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5zbGlkZSB7eyAkaW5kZXggKyAxIH19IG9mIHt7IHNsaWRlcy5sZW5ndGggfX08c3BhbiBuZy1pZj1cXFwiaXNBY3RpdmUoc2xpZGUpXFxcIj4sIGN1cnJlbnRseSBhY3RpdmU8L3NwYW4+PC9zcGFuPlxcblwiICtcbiAgICBcIiAgPC9saT5cXG5cIiArXG4gICAgXCI8L29sPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sXCIsXG4gICAgXCI8ZGl2IG5nLXN3aXRjaD1cXFwiZGF0ZXBpY2tlck1vZGVcXFwiPlxcblwiICtcbiAgICBcIiAgPGRpdiB1aWItZGF5cGlja2VyIG5nLXN3aXRjaC13aGVuPVxcXCJkYXlcXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwidWliLWRheXBpY2tlclxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiICA8ZGl2IHVpYi1tb250aHBpY2tlciBuZy1zd2l0Y2gtd2hlbj1cXFwibW9udGhcXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwidWliLW1vbnRocGlja2VyXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCIgIDxkaXYgdWliLXllYXJwaWNrZXIgbmctc3dpdGNoLXdoZW49XFxcInllYXJcXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwidWliLXllYXJwaWNrZXJcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sXCIsXG4gICAgXCI8dGFibGUgcm9sZT1cXFwiZ3JpZFxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVxcXCJ7e2FjdGl2ZURhdGVJZH19XFxcIj5cXG5cIiArXG4gICAgXCIgIDx0aGVhZD5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1sZWZ0IHVpYi1sZWZ0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgtMSlcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5wcmV2aW91czwvc3Bhbj48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aCBjb2xzcGFuPVxcXCJ7ezo6NSArIHNob3dXZWVrc319XFxcIj48YnV0dG9uIGlkPVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgcm9sZT1cXFwiaGVhZGluZ1xcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHVpYi10aXRsZVxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU1vZGUoKVxcXCIgbmctZGlzYWJsZWQ9XFxcImRhdGVwaWNrZXJNb2RlID09PSBtYXhNb2RlXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzdHJvbmc+e3t0aXRsZX19PC9zdHJvbmc+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtcmlnaHQgdWliLXJpZ2h0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgxKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5uZXh0PC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGggbmctaWY9XFxcInNob3dXZWVrc1xcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aCBuZy1yZXBlYXQ9XFxcImxhYmVsIGluIDo6bGFiZWxzIHRyYWNrIGJ5ICRpbmRleFxcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj48c21hbGwgYXJpYS1sYWJlbD1cXFwie3s6OmxhYmVsLmZ1bGx9fVxcXCI+e3s6OmxhYmVsLmFiYnJ9fTwvc21hbGw+PC90aD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGhlYWQ+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidWliLXdlZWtzXFxcIiBuZy1yZXBlYXQ9XFxcInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFxcXCIgcm9sZT1cXFwicm93XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctaWY9XFxcInNob3dXZWVrc1xcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyIGg2XFxcIj48ZW0+e3sgd2Vla051bWJlcnNbJGluZGV4XSB9fTwvZW0+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctcmVwZWF0PVxcXCJkdCBpbiByb3dcXFwiIGNsYXNzPVxcXCJ1aWItZGF5IHRleHQtY2VudGVyXFxcIiByb2xlPVxcXCJncmlkY2VsbFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIGlkPVxcXCJ7ezo6ZHQudWlkfX1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBuZy1jbGFzcz1cXFwiOjpkdC5jdXN0b21DbGFzc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHVpYi1pcy1jbGFzcz1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2J0bi1pbmZvJyBmb3Igc2VsZWN0ZWREdCxcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYWN0aXZlJyBmb3IgYWN0aXZlRHRcXG5cIiArXG4gICAgXCIgICAgICAgICAgICBvbiBkdFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctY2xpY2s9XFxcInNlbGVjdChkdC5kYXRlKVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctZGlzYWJsZWQ9XFxcIjo6ZHQuZGlzYWJsZWRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gbmctY2xhc3M9XFxcIjo6eyd0ZXh0LW11dGVkJzogZHQuc2Vjb25kYXJ5LCAndGV4dC1pbmZvJzogZHQuY3VycmVudH1cXFwiPnt7OjpkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsXG4gICAgXCI8dGFibGUgcm9sZT1cXFwiZ3JpZFxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVxcXCJ7e2FjdGl2ZURhdGVJZH19XFxcIj5cXG5cIiArXG4gICAgXCIgIDx0aGVhZD5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1sZWZ0IHVpYi1sZWZ0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgtMSlcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5wcmV2aW91czwvc3Bhbj48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aCBjb2xzcGFuPVxcXCJ7ezo6eWVhckhlYWRlckNvbHNwYW59fVxcXCI+PGJ1dHRvbiBpZD1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIHJvbGU9XFxcImhlYWRpbmdcXFwiIGFyaWEtbGl2ZT1cXFwiYXNzZXJ0aXZlXFxcIiBhcmlhLWF0b21pYz1cXFwidHJ1ZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSB1aWItdGl0bGVcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVNb2RlKClcXFwiIG5nLWRpc2FibGVkPVxcXCJkYXRlcGlja2VyTW9kZSA9PT0gbWF4TW9kZVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3Ryb25nPnt7dGl0bGV9fTwvc3Ryb25nPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLXJpZ2h0IHVpYi1yaWdodFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoMSlcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+bmV4dDwvc3Bhbj48L2k+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGhlYWQ+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidWliLW1vbnRoc1xcXCIgbmctcmVwZWF0PVxcXCJyb3cgaW4gcm93cyB0cmFjayBieSAkaW5kZXhcXFwiIHJvbGU9XFxcInJvd1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXJlcGVhdD1cXFwiZHQgaW4gcm93XFxcIiBjbGFzcz1cXFwidWliLW1vbnRoIHRleHQtY2VudGVyXFxcIiByb2xlPVxcXCJncmlkY2VsbFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIGlkPVxcXCJ7ezo6ZHQudWlkfX1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBuZy1jbGFzcz1cXFwiOjpkdC5jdXN0b21DbGFzc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdWliLWlzLWNsYXNzPVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYnRuLWluZm8nIGZvciBzZWxlY3RlZER0LFxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdhY3RpdmUnIGZvciBhY3RpdmVEdFxcblwiICtcbiAgICBcIiAgICAgICAgICAgIG9uIGR0XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1jbGljaz1cXFwic2VsZWN0KGR0LmRhdGUpXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1kaXNhYmxlZD1cXFwiOjpkdC5kaXNhYmxlZFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBuZy1jbGFzcz1cXFwiOjp7J3RleHQtaW5mbyc6IGR0LmN1cnJlbnR9XFxcIj57ezo6ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIixcbiAgICBcIjx0YWJsZSByb2xlPVxcXCJncmlkXFxcIiBhcmlhLWxhYmVsbGVkYnk9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XFxcInt7YWN0aXZlRGF0ZUlkfX1cXFwiPlxcblwiICtcbiAgICBcIiAgPHRoZWFkPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLWxlZnQgdWliLWxlZnRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKC0xKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPnByZXZpb3VzPC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIGNvbHNwYW49XFxcInt7Ojpjb2x1bW5zIC0gMn19XFxcIj48YnV0dG9uIGlkPVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgcm9sZT1cXFwiaGVhZGluZ1xcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHVpYi10aXRsZVxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU1vZGUoKVxcXCIgbmctZGlzYWJsZWQ9XFxcImRhdGVwaWNrZXJNb2RlID09PSBtYXhNb2RlXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzdHJvbmc+e3t0aXRsZX19PC9zdHJvbmc+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtcmlnaHQgdWliLXJpZ2h0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgxKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5uZXh0PC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3RoZWFkPlxcblwiICtcbiAgICBcIiAgPHRib2R5PlxcblwiICtcbiAgICBcIiAgICA8dHIgY2xhc3M9XFxcInVpYi15ZWFyc1xcXCIgbmctcmVwZWF0PVxcXCJyb3cgaW4gcm93cyB0cmFjayBieSAkaW5kZXhcXFwiIHJvbGU9XFxcInJvd1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXJlcGVhdD1cXFwiZHQgaW4gcm93XFxcIiBjbGFzcz1cXFwidWliLXllYXIgdGV4dC1jZW50ZXJcXFwiIHJvbGU9XFxcImdyaWRjZWxsXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgaWQ9XFxcInt7OjpkdC51aWR9fVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIG5nLWNsYXNzPVxcXCI6OmR0LmN1c3RvbUNsYXNzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB1aWItaXMtY2xhc3M9XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdidG4taW5mbycgZm9yIHNlbGVjdGVkRHQsXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2FjdGl2ZScgZm9yIGFjdGl2ZUR0XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgb24gZHRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWNsaWNrPVxcXCJzZWxlY3QoZHQuZGF0ZSlcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWRpc2FibGVkPVxcXCI6OmR0LmRpc2FibGVkXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIG5nLWNsYXNzPVxcXCI6OnsndGV4dC1pbmZvJzogZHQuY3VycmVudH1cXFwiPnt7OjpkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyUG9wdXAvcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyUG9wdXAvcG9wdXAuaHRtbFwiLFxuICAgIFwiPHVsIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCIgY2xhc3M9XFxcInVpYi1kYXRlcGlja2VyLXBvcHVwIGRyb3Bkb3duLW1lbnUgdWliLXBvc2l0aW9uLW1lYXN1cmVcXFwiIGRyb3Bkb3duLW5lc3RlZCBuZy1pZj1cXFwiaXNPcGVuXFxcIiBuZy1rZXlkb3duPVxcXCJrZXlkb3duKCRldmVudClcXFwiIG5nLWNsaWNrPVxcXCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcXFwiPlxcblwiICtcbiAgICBcIiAgPGxpIG5nLXRyYW5zY2x1ZGU+PC9saT5cXG5cIiArXG4gICAgXCIgIDxsaSBuZy1pZj1cXFwic2hvd0J1dHRvbkJhclxcXCIgY2xhc3M9XFxcInVpYi1idXR0b24tYmFyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPHNwYW4gY2xhc3M9XFxcImJ0bi1ncm91cCBwdWxsLWxlZnRcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zbSBidG4taW5mbyB1aWItZGF0ZXBpY2tlci1jdXJyZW50XFxcIiBuZy1jbGljaz1cXFwic2VsZWN0KCd0b2RheScsICRldmVudClcXFwiIG5nLWRpc2FibGVkPVxcXCJpc0Rpc2FibGVkKCd0b2RheScpXFxcIj57eyBnZXRUZXh0KCdjdXJyZW50JykgfX08L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLWRhbmdlciB1aWItY2xlYXJcXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3QobnVsbCwgJGV2ZW50KVxcXCI+e3sgZ2V0VGV4dCgnY2xlYXInKSB9fTwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICA8L3NwYW4+XFxuXCIgK1xuICAgIFwiICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zbSBidG4tc3VjY2VzcyBwdWxsLXJpZ2h0IHVpYi1jbG9zZVxcXCIgbmctY2xpY2s9XFxcImNsb3NlKCRldmVudClcXFwiPnt7IGdldFRleHQoJ2Nsb3NlJykgfX08L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgIDwvbGk+XFxuXCIgK1xuICAgIFwiPC91bD5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL21vZGFsL3dpbmRvdy5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL21vZGFsL3dpbmRvdy5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbC1kaWFsb2cge3tzaXplID8gJ21vZGFsLScgKyBzaXplIDogJyd9fVxcXCI+PGRpdiBjbGFzcz1cXFwibW9kYWwtY29udGVudFxcXCIgdWliLW1vZGFsLXRyYW5zY2x1ZGU+PC9kaXY+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wYWdlci9wYWdlci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BhZ2VyL3BhZ2VyLmh0bWxcIixcbiAgICBcIjxsaSBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub1ByZXZpb3VzKCl8fG5nRGlzYWJsZWQsIHByZXZpb3VzOiBhbGlnbn1cXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UocGFnZSAtIDEsICRldmVudClcXFwiIG5nLWRpc2FibGVkPVxcXCJub1ByZXZpb3VzKCl8fG5nRGlzYWJsZWRcXFwiIHVpYi10YWJpbmRleC10b2dnbGU+e3s6OmdldFRleHQoJ3ByZXZpb3VzJyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjxsaSBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub05leHQoKXx8bmdEaXNhYmxlZCwgbmV4dDogYWxpZ259XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UgKyAxLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9OZXh0KCl8fG5nRGlzYWJsZWRcXFwiIHVpYi10YWJpbmRleC10b2dnbGU+e3s6OmdldFRleHQoJ25leHQnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbFwiLFxuICAgIFwiPGxpIHJvbGU9XFxcIm1lbnVpdGVtXFxcIiBuZy1pZj1cXFwiOjpib3VuZGFyeUxpbmtzXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub1ByZXZpb3VzKCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1maXJzdFxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZSgxLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCdmaXJzdCcpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCI8bGkgcm9sZT1cXFwibWVudWl0ZW1cXFwiIG5nLWlmPVxcXCI6OmRpcmVjdGlvbkxpbmtzXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub1ByZXZpb3VzKCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1wcmV2XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UgLSAxLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCdwcmV2aW91cycpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCI8bGkgcm9sZT1cXFwibWVudWl0ZW1cXFwiIG5nLXJlcGVhdD1cXFwicGFnZSBpbiBwYWdlcyB0cmFjayBieSAkaW5kZXhcXFwiIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBwYWdlLmFjdGl2ZSxkaXNhYmxlZDogbmdEaXNhYmxlZCYmIXBhZ2UuYWN0aXZlfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tcGFnZVxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlLm51bWJlciwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5nRGlzYWJsZWQmJiFwYWdlLmFjdGl2ZVxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57e3BhZ2UudGV4dH19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIHJvbGU9XFxcIm1lbnVpdGVtXFxcIiBuZy1pZj1cXFwiOjpkaXJlY3Rpb25MaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9OZXh0KCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1uZXh0XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UgKyAxLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9OZXh0KCl8fG5nRGlzYWJsZWRcXFwiIHVpYi10YWJpbmRleC10b2dnbGU+e3s6OmdldFRleHQoJ25leHQnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIHJvbGU9XFxcIm1lbnVpdGVtXFxcIiBuZy1pZj1cXFwiOjpib3VuZGFyeUxpbmtzXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub05leHQoKXx8bmdEaXNhYmxlZH1cXFwiIGNsYXNzPVxcXCJwYWdpbmF0aW9uLWxhc3RcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UodG90YWxQYWdlcywgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vTmV4dCgpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCdsYXN0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC1wb3B1cC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWFycm93XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWlubmVyXFxcIiBuZy1iaW5kLWh0bWw9XFxcImNvbnRlbnRFeHAoKVxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1hcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgbmctYmluZD1cXFwiY29udGVudFxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1hcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCJcXG5cIiArXG4gICAgXCIgIHVpYi10b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGU9XFxcImNvbnRlbnRFeHAoKVxcXCJcXG5cIiArXG4gICAgXCIgIHRvb2x0aXAtdGVtcGxhdGUtdHJhbnNjbHVkZS1zY29wZT1cXFwib3JpZ2luU2NvcGUoKVxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItaHRtbC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci1odG1sLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcImFycm93XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCJcXG5cIiArXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWlubmVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGgzIGNsYXNzPVxcXCJwb3BvdmVyLXRpdGxlXFxcIiBuZy1iaW5kPVxcXCJ1aWJUaXRsZVxcXCIgbmctaWY9XFxcInVpYlRpdGxlXFxcIj48L2gzPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWNvbnRlbnRcXFwiIG5nLWJpbmQtaHRtbD1cXFwiY29udGVudEV4cCgpXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci10ZW1wbGF0ZS5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci10ZW1wbGF0ZS5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxoMyBjbGFzcz1cXFwicG9wb3Zlci10aXRsZVxcXCIgbmctYmluZD1cXFwidWliVGl0bGVcXFwiIG5nLWlmPVxcXCJ1aWJUaXRsZVxcXCI+PC9oMz5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIlxcblwiICtcbiAgICBcIiAgICAgIHVpYi10b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGU9XFxcImNvbnRlbnRFeHAoKVxcXCJcXG5cIiArXG4gICAgXCIgICAgICB0b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGUtc2NvcGU9XFxcIm9yaWdpblNjb3BlKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcImFycm93XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCJcXG5cIiArXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWlubmVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGgzIGNsYXNzPVxcXCJwb3BvdmVyLXRpdGxlXFxcIiBuZy1iaW5kPVxcXCJ1aWJUaXRsZVxcXCIgbmctaWY9XFxcInVpYlRpdGxlXFxcIj48L2gzPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWNvbnRlbnRcXFwiIG5nLWJpbmQ9XFxcImNvbnRlbnRcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInByb2dyZXNzLWJhclxcXCIgbmctY2xhc3M9XFxcInR5cGUgJiYgJ3Byb2dyZXNzLWJhci0nICsgdHlwZVxcXCIgcm9sZT1cXFwicHJvZ3Jlc3NiYXJcXFwiIGFyaWEtdmFsdWVub3c9XFxcInt7dmFsdWV9fVxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwie3ttYXh9fVxcXCIgbmctc3R5bGU9XFxcInt3aWR0aDogKHBlcmNlbnQgPCAxMDAgPyBwZXJjZW50IDogMTAwKSArICclJ31cXFwiIGFyaWEtdmFsdWV0ZXh0PVxcXCJ7e3BlcmNlbnQgfCBudW1iZXI6MH19JVxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dGl0bGV9fVxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3MuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3NcXFwiIG5nLXRyYW5zY2x1ZGUgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dGl0bGV9fVxcXCI+PC9kaXY+XCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzYmFyLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzLWJhclxcXCIgbmctY2xhc3M9XFxcInR5cGUgJiYgJ3Byb2dyZXNzLWJhci0nICsgdHlwZVxcXCIgcm9sZT1cXFwicHJvZ3Jlc3NiYXJcXFwiIGFyaWEtdmFsdWVub3c9XFxcInt7dmFsdWV9fVxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwie3ttYXh9fVxcXCIgbmctc3R5bGU9XFxcInt3aWR0aDogKHBlcmNlbnQgPCAxMDAgPyBwZXJjZW50IDogMTAwKSArICclJ31cXFwiIGFyaWEtdmFsdWV0ZXh0PVxcXCJ7e3BlcmNlbnQgfCBudW1iZXI6MH19JVxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dGl0bGV9fVxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWxcIixcbiAgICBcIjxzcGFuIG5nLW1vdXNlbGVhdmU9XFxcInJlc2V0KClcXFwiIG5nLWtleWRvd249XFxcIm9uS2V5ZG93bigkZXZlbnQpXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgcm9sZT1cXFwic2xpZGVyXFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCJ7e3JhbmdlLmxlbmd0aH19XFxcIiBhcmlhLXZhbHVlbm93PVxcXCJ7e3ZhbHVlfX1cXFwiIGFyaWEtdmFsdWV0ZXh0PVxcXCJ7e3RpdGxlfX1cXFwiPlxcblwiICtcbiAgICBcIiAgICA8c3BhbiBuZy1yZXBlYXQtc3RhcnQ9XFxcInIgaW4gcmFuZ2UgdHJhY2sgYnkgJGluZGV4XFxcIiBjbGFzcz1cXFwic3Itb25seVxcXCI+KHt7ICRpbmRleCA8IHZhbHVlID8gJyonIDogJyAnIH19KTwvc3Bhbj5cXG5cIiArXG4gICAgXCIgICAgPGkgbmctcmVwZWF0LWVuZCBuZy1tb3VzZWVudGVyPVxcXCJlbnRlcigkaW5kZXggKyAxKVxcXCIgbmctY2xpY2s9XFxcInJhdGUoJGluZGV4ICsgMSlcXFwiIGNsYXNzPVxcXCJnbHlwaGljb25cXFwiIG5nLWNsYXNzPVxcXCIkaW5kZXggPCB2YWx1ZSAmJiAoci5zdGF0ZU9uIHx8ICdnbHlwaGljb24tc3RhcicpIHx8IChyLnN0YXRlT2ZmIHx8ICdnbHlwaGljb24tc3Rhci1lbXB0eScpXFxcIiBuZy1hdHRyLXRpdGxlPVxcXCJ7e3IudGl0bGV9fVxcXCI+PC9pPlxcblwiICtcbiAgICBcIjwvc3Bhbj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdGFicy90YWIuaHRtbFwiLFxuICAgIFwiPGxpIG5nLWNsYXNzPVxcXCJbe2FjdGl2ZTogYWN0aXZlLCBkaXNhYmxlZDogZGlzYWJsZWR9LCBjbGFzc2VzXVxcXCIgY2xhc3M9XFxcInVpYi10YWIgbmF2LWl0ZW1cXFwiPlxcblwiICtcbiAgICBcIiAgPGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0KCRldmVudClcXFwiIGNsYXNzPVxcXCJuYXYtbGlua1xcXCIgdWliLXRhYi1oZWFkaW5nLXRyYW5zY2x1ZGU+e3toZWFkaW5nfX08L2E+XFxuXCIgK1xuICAgIFwiPC9saT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdGFicy90YWJzZXQuaHRtbFwiLFxuICAgIFwiPGRpdj5cXG5cIiArXG4gICAgXCIgIDx1bCBjbGFzcz1cXFwibmF2IG5hdi17e3RhYnNldC50eXBlIHx8ICd0YWJzJ319XFxcIiBuZy1jbGFzcz1cXFwieyduYXYtc3RhY2tlZCc6IHZlcnRpY2FsLCAnbmF2LWp1c3RpZmllZCc6IGp1c3RpZmllZH1cXFwiIG5nLXRyYW5zY2x1ZGU+PC91bD5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInRhYi1jb250ZW50XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgbmctcmVwZWF0PVxcXCJ0YWIgaW4gdGFic2V0LnRhYnNcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgbmctY2xhc3M9XFxcInthY3RpdmU6IHRhYnNldC5hY3RpdmUgPT09IHRhYi5pbmRleH1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgdWliLXRhYi1jb250ZW50LXRyYW5zY2x1ZGU9XFxcInRhYlxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgPC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLFxuICAgIFwiPHRhYmxlIGNsYXNzPVxcXCJ1aWItdGltZXBpY2tlclxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXNob3c9XFxcIjo6c2hvd1NwaW5uZXJzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1pbmNyZW1lbnQgaG91cnNcXFwiPjxhIG5nLWNsaWNrPVxcXCJpbmNyZW1lbnRIb3VycygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0luY3JlbWVudEhvdXJzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9JbmNyZW1lbnRIb3VycygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXBcXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQ+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1pbmNyZW1lbnQgbWludXRlc1xcXCI+PGEgbmctY2xpY2s9XFxcImluY3JlbWVudE1pbnV0ZXMoKVxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9JbmNyZW1lbnRNaW51dGVzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9JbmNyZW1lbnRNaW51dGVzKClcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cFxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItaW5jcmVtZW50IHNlY29uZHNcXFwiPjxhIG5nLWNsaWNrPVxcXCJpbmNyZW1lbnRTZWNvbmRzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vSW5jcmVtZW50U2Vjb25kcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50U2Vjb25kcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXBcXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd01lcmlkaWFuXFxcIj48L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJmb3JtLWdyb3VwIHVpYi10aW1lIGhvdXJzXFxcIiBuZy1jbGFzcz1cXFwieydoYXMtZXJyb3InOiBpbnZhbGlkSG91cnN9XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiSEhcXFwiIG5nLW1vZGVsPVxcXCJob3Vyc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVIb3VycygpXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXFxcIiBuZy1yZWFkb25seT1cXFwiOjpyZWFkb25seUlucHV0XFxcIiBtYXhsZW5ndGg9XFxcIjJcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50SG91cnMoKVxcXCIgbmctYmx1cj1cXFwiYmx1cigpXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwidWliLXNlcGFyYXRvclxcXCI+OjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJmb3JtLWdyb3VwIHVpYi10aW1lIG1pbnV0ZXNcXFwiIG5nLWNsYXNzPVxcXCJ7J2hhcy1lcnJvcic6IGludmFsaWRNaW51dGVzfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIk1NXFxcIiBuZy1tb2RlbD1cXFwibWludXRlc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVNaW51dGVzKClcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXJcXFwiIG5nLXJlYWRvbmx5PVxcXCI6OnJlYWRvbmx5SW5wdXRcXFwiIG1heGxlbmd0aD1cXFwiMlxcXCIgdGFiaW5kZXg9XFxcInt7Ojp0YWJpbmRleH19XFxcIiBuZy1kaXNhYmxlZD1cXFwibm9JbmNyZW1lbnRNaW51dGVzKClcXFwiIG5nLWJsdXI9XFxcImJsdXIoKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItc2VwYXJhdG9yXFxcIj46PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcImZvcm0tZ3JvdXAgdWliLXRpbWUgc2Vjb25kc1xcXCIgbmctY2xhc3M9XFxcInsnaGFzLWVycm9yJzogaW52YWxpZFNlY29uZHN9XFxcIiBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIlNTXFxcIiBuZy1tb2RlbD1cXFwic2Vjb25kc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVTZWNvbmRzKClcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXJcXFwiIG5nLXJlYWRvbmx5PVxcXCJyZWFkb25seUlucHV0XFxcIiBtYXhsZW5ndGg9XFxcIjJcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50U2Vjb25kcygpXFxcIiBuZy1ibHVyPVxcXCJibHVyKClcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dNZXJpZGlhblxcXCIgY2xhc3M9XFxcInVpYi10aW1lIGFtLXBtXFxcIj48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9Ub2dnbGVNZXJpZGlhbigpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCB0ZXh0LWNlbnRlclxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU1lcmlkaWFuKClcXFwiIG5nLWRpc2FibGVkPVxcXCJub1RvZ2dsZU1lcmlkaWFuKClcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCI+e3ttZXJpZGlhbn19PC9idXR0b24+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCIgbmctc2hvdz1cXFwiOjpzaG93U3Bpbm5lcnNcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwidWliLWRlY3JlbWVudCBob3Vyc1xcXCI+PGEgbmctY2xpY2s9XFxcImRlY3JlbWVudEhvdXJzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50SG91cnMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiIG5nLWRpc2FibGVkPVxcXCJub0RlY3JlbWVudEhvdXJzKClcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duXFxcIj48L3NwYW4+PC9hPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkPiZuYnNwOzwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJ1aWItZGVjcmVtZW50IG1pbnV0ZXNcXFwiPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRNaW51dGVzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50TWludXRlcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vRGVjcmVtZW50TWludXRlcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItZGVjcmVtZW50IHNlY29uZHNcXFwiPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRTZWNvbmRzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50U2Vjb25kcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vRGVjcmVtZW50U2Vjb25kcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93TWVyaWRpYW5cXFwiPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsXG4gICAgXCI8YSBocmVmXFxuXCIgK1xuICAgIFwiICAgdGFiaW5kZXg9XFxcIi0xXFxcIlxcblwiICtcbiAgICBcIiAgIG5nLWJpbmQtaHRtbD1cXFwibWF0Y2gubGFiZWwgfCB1aWJUeXBlYWhlYWRIaWdobGlnaHQ6cXVlcnlcXFwiXFxuXCIgK1xuICAgIFwiICAgbmctYXR0ci10aXRsZT1cXFwie3ttYXRjaC5sYWJlbH19XFxcIj48L2E+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsXG4gICAgXCI8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnVcXFwiIG5nLXNob3c9XFxcImlzT3BlbigpICYmICFtb3ZlSW5Qcm9ncmVzc1xcXCIgbmctc3R5bGU9XFxcInt0b3A6IHBvc2l0aW9uKCkudG9wKydweCcsIGxlZnQ6IHBvc2l0aW9uKCkubGVmdCsncHgnfVxcXCIgcm9sZT1cXFwibGlzdGJveFxcXCIgYXJpYS1oaWRkZW49XFxcInt7IWlzT3BlbigpfX1cXFwiPlxcblwiICtcbiAgICBcIiAgICA8bGkgY2xhc3M9XFxcInVpYi10eXBlYWhlYWQtbWF0Y2hcXFwiIG5nLXJlcGVhdD1cXFwibWF0Y2ggaW4gbWF0Y2hlcyB0cmFjayBieSAkaW5kZXhcXFwiIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBpc0FjdGl2ZSgkaW5kZXgpIH1cXFwiIG5nLW1vdXNlZW50ZXI9XFxcInNlbGVjdEFjdGl2ZSgkaW5kZXgpXFxcIiBuZy1jbGljaz1cXFwic2VsZWN0TWF0Y2goJGluZGV4LCAkZXZlbnQpXFxcIiByb2xlPVxcXCJvcHRpb25cXFwiIGlkPVxcXCJ7ezo6bWF0Y2guaWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8ZGl2IHVpYi10eXBlYWhlYWQtbWF0Y2ggaW5kZXg9XFxcIiRpbmRleFxcXCIgbWF0Y2g9XFxcIm1hdGNoXFxcIiBxdWVyeT1cXFwicXVlcnlcXFwiIHRlbXBsYXRlLXVybD1cXFwidGVtcGxhdGVVcmxcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8L2xpPlxcblwiICtcbiAgICBcIjwvdWw+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5jYXJvdXNlbCcpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJDYXJvdXNlbENzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+Lm5nLWFuaW1hdGUuaXRlbTpub3QoLmxlZnQpOm5vdCgucmlnaHQpey13ZWJraXQtdHJhbnNpdGlvbjowcyBlYXNlLWluLW91dCBsZWZ0O3RyYW5zaXRpb246MHMgZWFzZS1pbi1vdXQgbGVmdH08L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliQ2Fyb3VzZWxDc3MgPSB0cnVlOyB9KTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBpY2tlcicpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJEYXRlcGlja2VyQ3NzICYmIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4udWliLWRhdGVwaWNrZXIgLnVpYi10aXRsZXt3aWR0aDoxMDAlO30udWliLWRheSBidXR0b24sLnVpYi1tb250aCBidXR0b24sLnVpYi15ZWFyIGJ1dHRvbnttaW4td2lkdGg6MTAwJTt9LnVpYi1sZWZ0LC51aWItcmlnaHR7d2lkdGg6MTAwJX08L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliRGF0ZXBpY2tlckNzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbicpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJQb3NpdGlvbkNzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnVpYi1wb3NpdGlvbi1tZWFzdXJle2Rpc3BsYXk6YmxvY2sgIWltcG9ydGFudDt2aXNpYmlsaXR5OmhpZGRlbiAhaW1wb3J0YW50O3Bvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7dG9wOi05OTk5cHggIWltcG9ydGFudDtsZWZ0Oi05OTk5cHggIWltcG9ydGFudDt9LnVpYi1wb3NpdGlvbi1zY3JvbGxiYXItbWVhc3VyZXtwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O3RvcDotOTk5OXB4ICFpbXBvcnRhbnQ7d2lkdGg6NTBweCAhaW1wb3J0YW50O2hlaWdodDo1MHB4ICFpbXBvcnRhbnQ7b3ZlcmZsb3c6c2Nyb2xsICFpbXBvcnRhbnQ7fS51aWItcG9zaXRpb24tYm9keS1zY3JvbGxiYXItbWVhc3VyZXtvdmVyZmxvdzpzY3JvbGwgIWltcG9ydGFudDt9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYlBvc2l0aW9uQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJQb3B1cCcpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJEYXRlcGlja2VycG9wdXBDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi51aWItZGF0ZXBpY2tlci1wb3B1cC5kcm9wZG93bi1tZW51e2Rpc3BsYXk6YmxvY2s7ZmxvYXQ6bm9uZTttYXJnaW46MDt9LnVpYi1idXR0b24tYmFye3BhZGRpbmc6MTBweCA5cHggMnB4O308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliRGF0ZXBpY2tlcnBvcHVwQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRvb2x0aXAnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliVG9vbHRpcENzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+W3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnRvcC1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnRvcC1yaWdodCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC5ib3R0b20tbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC5ib3R0b20tcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAubGVmdC10b3AgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAubGVmdC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAucmlnaHQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnJpZ2h0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnRvcC1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAudG9wLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAuYm90dG9tLWxlZnQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC5ib3R0b20tcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC5sZWZ0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLmxlZnQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAucmlnaHQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAucmlnaHQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnRvcC1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnRvcC1yaWdodCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC5ib3R0b20tbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC5ib3R0b20tcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAubGVmdC10b3AgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAubGVmdC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAucmlnaHQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnJpZ2h0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci50b3AtbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIudG9wLXJpZ2h0ID4gLmFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci5ib3R0b20tbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIuYm90dG9tLXJpZ2h0ID4gLmFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci5sZWZ0LXRvcCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIubGVmdC1ib3R0b20gPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LXRvcCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIucmlnaHQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnRvcC1sZWZ0ID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnRvcC1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci5ib3R0b20tbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci5ib3R0b20tcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIubGVmdC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIubGVmdC1ib3R0b20gPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIucmlnaHQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LWJvdHRvbSA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIudG9wLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLnRvcC1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIuYm90dG9tLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmJvdHRvbS1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIubGVmdC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmxlZnQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5yaWdodC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LWJvdHRvbSA+IC5hcnJvd3t0b3A6YXV0bztib3R0b206YXV0bztsZWZ0OmF1dG87cmlnaHQ6YXV0bzttYXJnaW46MDt9W3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3ZlcntkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQ7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJUb29sdGlwQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRpbWVwaWNrZXInKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliVGltZXBpY2tlckNzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnVpYi10aW1lIGlucHV0e3dpZHRoOjUwcHg7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJUaW1lcGlja2VyQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnR5cGVhaGVhZCcpLnJ1bihmdW5jdGlvbigpIHshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgIWFuZ3VsYXIuJCR1aWJUeXBlYWhlYWRDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlt1aWItdHlwZWFoZWFkLXBvcHVwXS5kcm9wZG93bi1tZW51e2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJUeXBlYWhlYWRDc3MgPSB0cnVlOyB9KTtcbi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjYuNFxuICogKGMpIDIwMTAtMjAxNyBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiAqIExpY2Vuc2U6IE1JVFxuICovXG4oZnVuY3Rpb24od2luZG93LCBhbmd1bGFyKSB7J3VzZSBzdHJpY3QnO1xuXG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBDT01NRU5UX05PREUgPSA4O1xuXG52YXIgQUREX0NMQVNTX1NVRkZJWCA9ICctYWRkJztcbnZhciBSRU1PVkVfQ0xBU1NfU1VGRklYID0gJy1yZW1vdmUnO1xudmFyIEVWRU5UX0NMQVNTX1BSRUZJWCA9ICduZy0nO1xudmFyIEFDVElWRV9DTEFTU19TVUZGSVggPSAnLWFjdGl2ZSc7XG52YXIgUFJFUEFSRV9DTEFTU19TVUZGSVggPSAnLXByZXBhcmUnO1xuXG52YXIgTkdfQU5JTUFURV9DTEFTU05BTUUgPSAnbmctYW5pbWF0ZSc7XG52YXIgTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBID0gJyQkbmdBbmltYXRlQ2hpbGRyZW4nO1xuXG4vLyBEZXRlY3QgcHJvcGVyIHRyYW5zaXRpb25lbmQvYW5pbWF0aW9uZW5kIGV2ZW50IG5hbWVzLlxudmFyIENTU19QUkVGSVggPSAnJywgVFJBTlNJVElPTl9QUk9QLCBUUkFOU0lUSU9ORU5EX0VWRU5ULCBBTklNQVRJT05fUFJPUCwgQU5JTUFUSU9ORU5EX0VWRU5UO1xuXG4vLyBJZiB1bnByZWZpeGVkIGV2ZW50cyBhcmUgbm90IHN1cHBvcnRlZCBidXQgd2Via2l0LXByZWZpeGVkIGFyZSwgdXNlIHRoZSBsYXR0ZXIuXG4vLyBPdGhlcndpc2UsIGp1c3QgdXNlIFczQyBuYW1lcywgYnJvd3NlcnMgbm90IHN1cHBvcnRpbmcgdGhlbSBhdCBhbGwgd2lsbCBqdXN0IGlnbm9yZSB0aGVtLlxuLy8gTm90ZTogQ2hyb21lIGltcGxlbWVudHMgYHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZGAgYW5kIGRvZXNuJ3QgaW1wbGVtZW50IGB3aW5kb3cub25hbmltYXRpb25lbmRgXG4vLyBidXQgYXQgdGhlIHNhbWUgdGltZSBkaXNwYXRjaGVzIHRoZSBgYW5pbWF0aW9uZW5kYCBldmVudCBhbmQgbm90IGB3ZWJraXRBbmltYXRpb25FbmRgLlxuLy8gUmVnaXN0ZXIgYm90aCBldmVudHMgaW4gY2FzZSBgd2luZG93Lm9uYW5pbWF0aW9uZW5kYCBpcyBub3Qgc3VwcG9ydGVkIGJlY2F1c2Ugb2YgdGhhdCxcbi8vIGRvIHRoZSBzYW1lIGZvciBgdHJhbnNpdGlvbmVuZGAgYXMgU2FmYXJpIGlzIGxpa2VseSB0byBleGhpYml0IHNpbWlsYXIgYmVoYXZpb3IuXG4vLyBBbHNvLCB0aGUgb25seSBtb2Rlcm4gYnJvd3NlciB0aGF0IHVzZXMgdmVuZG9yIHByZWZpeGVzIGZvciB0cmFuc2l0aW9ucy9rZXlmcmFtZXMgaXMgd2Via2l0XG4vLyB0aGVyZWZvcmUgdGhlcmUgaXMgbm8gcmVhc29uIHRvIHRlc3QgYW55bW9yZSBmb3Igb3RoZXIgdmVuZG9yIHByZWZpeGVzOlxuLy8gaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNpdGlvblxuaWYgKCh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQpICYmICh3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWQpKSB7XG4gIENTU19QUkVGSVggPSAnLXdlYmtpdC0nO1xuICBUUkFOU0lUSU9OX1BST1AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gIFRSQU5TSVRJT05FTkRfRVZFTlQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJztcbn0gZWxzZSB7XG4gIFRSQU5TSVRJT05fUFJPUCA9ICd0cmFuc2l0aW9uJztcbiAgVFJBTlNJVElPTkVORF9FVkVOVCA9ICd0cmFuc2l0aW9uZW5kJztcbn1cblxuaWYgKCh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCkgJiYgKHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSkge1xuICBDU1NfUFJFRklYID0gJy13ZWJraXQtJztcbiAgQU5JTUFUSU9OX1BST1AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgQU5JTUFUSU9ORU5EX0VWRU5UID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCBhbmltYXRpb25lbmQnO1xufSBlbHNlIHtcbiAgQU5JTUFUSU9OX1BST1AgPSAnYW5pbWF0aW9uJztcbiAgQU5JTUFUSU9ORU5EX0VWRU5UID0gJ2FuaW1hdGlvbmVuZCc7XG59XG5cbnZhciBEVVJBVElPTl9LRVkgPSAnRHVyYXRpb24nO1xudmFyIFBST1BFUlRZX0tFWSA9ICdQcm9wZXJ0eSc7XG52YXIgREVMQVlfS0VZID0gJ0RlbGF5JztcbnZhciBUSU1JTkdfS0VZID0gJ1RpbWluZ0Z1bmN0aW9uJztcbnZhciBBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWSA9ICdJdGVyYXRpb25Db3VudCc7XG52YXIgQU5JTUFUSU9OX1BMQVlTVEFURV9LRVkgPSAnUGxheVN0YXRlJztcbnZhciBTQUZFX0ZBU1RfRk9SV0FSRF9EVVJBVElPTl9WQUxVRSA9IDk5OTk7XG5cbnZhciBBTklNQVRJT05fREVMQVlfUFJPUCA9IEFOSU1BVElPTl9QUk9QICsgREVMQVlfS0VZO1xudmFyIEFOSU1BVElPTl9EVVJBVElPTl9QUk9QID0gQU5JTUFUSU9OX1BST1AgKyBEVVJBVElPTl9LRVk7XG52YXIgVFJBTlNJVElPTl9ERUxBWV9QUk9QID0gVFJBTlNJVElPTl9QUk9QICsgREVMQVlfS0VZO1xudmFyIFRSQU5TSVRJT05fRFVSQVRJT05fUFJPUCA9IFRSQU5TSVRJT05fUFJPUCArIERVUkFUSU9OX0tFWTtcblxudmFyIG5nTWluRXJyID0gYW5ndWxhci4kJG1pbkVycignbmcnKTtcbmZ1bmN0aW9uIGFzc2VydEFyZyhhcmcsIG5hbWUsIHJlYXNvbikge1xuICBpZiAoIWFyZykge1xuICAgIHRocm93IG5nTWluRXJyKCdhcmVxJywgJ0FyZ3VtZW50IFxcJ3swfVxcJyBpcyB7MX0nLCAobmFtZSB8fCAnPycpLCAocmVhc29uIHx8ICdyZXF1aXJlZCcpKTtcbiAgfVxuICByZXR1cm4gYXJnO1xufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzZXMoYSxiKSB7XG4gIGlmICghYSAmJiAhYikgcmV0dXJuICcnO1xuICBpZiAoIWEpIHJldHVybiBiO1xuICBpZiAoIWIpIHJldHVybiBhO1xuICBpZiAoaXNBcnJheShhKSkgYSA9IGEuam9pbignICcpO1xuICBpZiAoaXNBcnJheShiKSkgYiA9IGIuam9pbignICcpO1xuICByZXR1cm4gYSArICcgJyArIGI7XG59XG5cbmZ1bmN0aW9uIHBhY2thZ2VTdHlsZXMob3B0aW9ucykge1xuICB2YXIgc3R5bGVzID0ge307XG4gIGlmIChvcHRpb25zICYmIChvcHRpb25zLnRvIHx8IG9wdGlvbnMuZnJvbSkpIHtcbiAgICBzdHlsZXMudG8gPSBvcHRpb25zLnRvO1xuICAgIHN0eWxlcy5mcm9tID0gb3B0aW9ucy5mcm9tO1xuICB9XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIHBlbmRDbGFzc2VzKGNsYXNzZXMsIGZpeCwgaXNQcmVmaXgpIHtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICBjbGFzc2VzID0gaXNBcnJheShjbGFzc2VzKVxuICAgICAgPyBjbGFzc2VzXG4gICAgICA6IGNsYXNzZXMgJiYgaXNTdHJpbmcoY2xhc3NlcykgJiYgY2xhc3Nlcy5sZW5ndGhcbiAgICAgICAgICA/IGNsYXNzZXMuc3BsaXQoL1xccysvKVxuICAgICAgICAgIDogW107XG4gIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MsIGkpIHtcbiAgICBpZiAoa2xhc3MgJiYga2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgY2xhc3NOYW1lICs9IChpID4gMCkgPyAnICcgOiAnJztcbiAgICAgIGNsYXNzTmFtZSArPSBpc1ByZWZpeCA/IGZpeCArIGtsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBrbGFzcyArIGZpeDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGcm9tQXJyYXkoYXJyLCB2YWwpIHtcbiAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YodmFsKTtcbiAgaWYgKHZhbCA+PSAwKSB7XG4gICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBqcUxpdGUpIHtcbiAgICBzd2l0Y2ggKGVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuXG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IG9mIHN0cmlwcGluZyBhbnl0aGluZyBpZiB0aGUgZWxlbWVudFxuICAgICAgICAvLyBpcyB0aGUgb25seSBlbGVtZW50IHdpdGhpbiB0aGUganFMaXRlIHdyYXBwZXIuXG4gICAgICAgIC8vIChpdCdzIGltcG9ydGFudCB0aGF0IHdlIHJldGFpbiB0aGUgZWxlbWVudCBpbnN0YW5jZS4pXG4gICAgICAgIGlmIChlbGVtZW50WzBdLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGpxTGl0ZShleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICByZXR1cm4ganFMaXRlKGVsZW1lbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudFswXSkgcmV0dXJuIGVsZW1lbnQ7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbG0gPSBlbGVtZW50W2ldO1xuICAgIGlmIChlbG0ubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuIGVsbTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gJCRhZGRDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XG4gICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxtLCBjbGFzc05hbWUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gJCRyZW1vdmVDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XG4gICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxtLCBjbGFzc05hbWUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25DbGFzc2VzRmFjdG9yeSgkJGpxTGl0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmFkZENsYXNzKSB7XG4gICAgICAkJGFkZENsYXNzKCQkanFMaXRlLCBlbGVtZW50LCBvcHRpb25zLmFkZENsYXNzKTtcbiAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgICAgJCRyZW1vdmVDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgb3B0aW9ucy5yZW1vdmVDbGFzcyk7XG4gICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICghb3B0aW9ucy4kJHByZXBhcmVkKSB7XG4gICAgdmFyIGRvbU9wZXJhdGlvbiA9IG9wdGlvbnMuZG9tT3BlcmF0aW9uIHx8IG5vb3A7XG4gICAgb3B0aW9ucy5kb21PcGVyYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIG9wdGlvbnMuJCRkb21PcGVyYXRpb25GaXJlZCA9IHRydWU7XG4gICAgICBkb21PcGVyYXRpb24oKTtcbiAgICAgIGRvbU9wZXJhdGlvbiA9IG5vb3A7XG4gICAgfTtcbiAgICBvcHRpb25zLiQkcHJlcGFyZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKSB7XG4gIGFwcGx5QW5pbWF0aW9uRnJvbVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgYXBwbHlBbmltYXRpb25Ub1N0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25Gcm9tU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgb3B0aW9ucy5mcm9tID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseUFuaW1hdGlvblRvU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudG8pIHtcbiAgICBlbGVtZW50LmNzcyhvcHRpb25zLnRvKTtcbiAgICBvcHRpb25zLnRvID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgb2xkQW5pbWF0aW9uLCBuZXdBbmltYXRpb24pIHtcbiAgdmFyIHRhcmdldCA9IG9sZEFuaW1hdGlvbi5vcHRpb25zIHx8IHt9O1xuICB2YXIgbmV3T3B0aW9ucyA9IG5ld0FuaW1hdGlvbi5vcHRpb25zIHx8IHt9O1xuXG4gIHZhciB0b0FkZCA9ICh0YXJnZXQuYWRkQ2xhc3MgfHwgJycpICsgJyAnICsgKG5ld09wdGlvbnMuYWRkQ2xhc3MgfHwgJycpO1xuICB2YXIgdG9SZW1vdmUgPSAodGFyZ2V0LnJlbW92ZUNsYXNzIHx8ICcnKSArICcgJyArIChuZXdPcHRpb25zLnJlbW92ZUNsYXNzIHx8ICcnKTtcbiAgdmFyIGNsYXNzZXMgPSByZXNvbHZlRWxlbWVudENsYXNzZXMoZWxlbWVudC5hdHRyKCdjbGFzcycpLCB0b0FkZCwgdG9SZW1vdmUpO1xuXG4gIGlmIChuZXdPcHRpb25zLnByZXBhcmF0aW9uQ2xhc3Nlcykge1xuICAgIHRhcmdldC5wcmVwYXJhdGlvbkNsYXNzZXMgPSBjb25jYXRXaXRoU3BhY2UobmV3T3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMsIHRhcmdldC5wcmVwYXJhdGlvbkNsYXNzZXMpO1xuICAgIGRlbGV0ZSBuZXdPcHRpb25zLnByZXBhcmF0aW9uQ2xhc3NlcztcbiAgfVxuXG4gIC8vIG5vb3AgaXMgYmFzaWNhbGx5IHdoZW4gdGhlcmUgaXMgbm8gY2FsbGJhY2s7IG90aGVyd2lzZSBzb21ldGhpbmcgaGFzIGJlZW4gc2V0XG4gIHZhciByZWFsRG9tT3BlcmF0aW9uID0gdGFyZ2V0LmRvbU9wZXJhdGlvbiAhPT0gbm9vcCA/IHRhcmdldC5kb21PcGVyYXRpb24gOiBudWxsO1xuXG4gIGV4dGVuZCh0YXJnZXQsIG5ld09wdGlvbnMpO1xuXG4gIC8vIFRPRE8obWF0c2tvIG9yIHNyZWVyYW11KTogcHJvcGVyIGZpeCBpcyB0byBtYWludGFpbiBhbGwgYW5pbWF0aW9uIGNhbGxiYWNrIGluIGFycmF5IGFuZCBjYWxsIGF0IGxhc3QsYnV0IG5vdyBvbmx5IGxlYXZlIGhhcyB0aGUgY2FsbGJhY2sgc28gbm8gaXNzdWUgd2l0aCB0aGlzLlxuICBpZiAocmVhbERvbU9wZXJhdGlvbikge1xuICAgIHRhcmdldC5kb21PcGVyYXRpb24gPSByZWFsRG9tT3BlcmF0aW9uO1xuICB9XG5cbiAgaWYgKGNsYXNzZXMuYWRkQ2xhc3MpIHtcbiAgICB0YXJnZXQuYWRkQ2xhc3MgPSBjbGFzc2VzLmFkZENsYXNzO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5hZGRDbGFzcyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2xhc3Nlcy5yZW1vdmVDbGFzcykge1xuICAgIHRhcmdldC5yZW1vdmVDbGFzcyA9IGNsYXNzZXMucmVtb3ZlQ2xhc3M7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgfVxuXG4gIG9sZEFuaW1hdGlvbi5hZGRDbGFzcyA9IHRhcmdldC5hZGRDbGFzcztcbiAgb2xkQW5pbWF0aW9uLnJlbW92ZUNsYXNzID0gdGFyZ2V0LnJlbW92ZUNsYXNzO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVFbGVtZW50Q2xhc3NlcyhleGlzdGluZywgdG9BZGQsIHRvUmVtb3ZlKSB7XG4gIHZhciBBRERfQ0xBU1MgPSAxO1xuICB2YXIgUkVNT1ZFX0NMQVNTID0gLTE7XG5cbiAgdmFyIGZsYWdzID0ge307XG4gIGV4aXN0aW5nID0gc3BsaXRDbGFzc2VzVG9Mb29rdXAoZXhpc3RpbmcpO1xuXG4gIHRvQWRkID0gc3BsaXRDbGFzc2VzVG9Mb29rdXAodG9BZGQpO1xuICBmb3JFYWNoKHRvQWRkLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgZmxhZ3Nba2V5XSA9IEFERF9DTEFTUztcbiAgfSk7XG5cbiAgdG9SZW1vdmUgPSBzcGxpdENsYXNzZXNUb0xvb2t1cCh0b1JlbW92ZSk7XG4gIGZvckVhY2godG9SZW1vdmUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICBmbGFnc1trZXldID0gZmxhZ3Nba2V5XSA9PT0gQUREX0NMQVNTID8gbnVsbCA6IFJFTU9WRV9DTEFTUztcbiAgfSk7XG5cbiAgdmFyIGNsYXNzZXMgPSB7XG4gICAgYWRkQ2xhc3M6ICcnLFxuICAgIHJlbW92ZUNsYXNzOiAnJ1xuICB9O1xuXG4gIGZvckVhY2goZmxhZ3MsIGZ1bmN0aW9uKHZhbCwga2xhc3MpIHtcbiAgICB2YXIgcHJvcCwgYWxsb3c7XG4gICAgaWYgKHZhbCA9PT0gQUREX0NMQVNTKSB7XG4gICAgICBwcm9wID0gJ2FkZENsYXNzJztcbiAgICAgIGFsbG93ID0gIWV4aXN0aW5nW2tsYXNzXSB8fCBleGlzdGluZ1trbGFzcyArIFJFTU9WRV9DTEFTU19TVUZGSVhdO1xuICAgIH0gZWxzZSBpZiAodmFsID09PSBSRU1PVkVfQ0xBU1MpIHtcbiAgICAgIHByb3AgPSAncmVtb3ZlQ2xhc3MnO1xuICAgICAgYWxsb3cgPSBleGlzdGluZ1trbGFzc10gfHwgZXhpc3Rpbmdba2xhc3MgKyBBRERfQ0xBU1NfU1VGRklYXTtcbiAgICB9XG4gICAgaWYgKGFsbG93KSB7XG4gICAgICBpZiAoY2xhc3Nlc1twcm9wXS5sZW5ndGgpIHtcbiAgICAgICAgY2xhc3Nlc1twcm9wXSArPSAnICc7XG4gICAgICB9XG4gICAgICBjbGFzc2VzW3Byb3BdICs9IGtsYXNzO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc3BsaXRDbGFzc2VzVG9Mb29rdXAoY2xhc3Nlcykge1xuICAgIGlmIChpc1N0cmluZyhjbGFzc2VzKSkge1xuICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICB9XG5cbiAgICB2YXIgb2JqID0ge307XG4gICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihrbGFzcykge1xuICAgICAgLy8gc29tZXRpbWVzIHRoZSBzcGxpdCBsZWF2ZXMgZW1wdHkgc3RyaW5nIHZhbHVlc1xuICAgICAgLy8gaW5jYXNlIGV4dHJhIHNwYWNlcyB3ZXJlIGFwcGxpZWQgdG8gdGhlIG9wdGlvbnNcbiAgICAgIGlmIChrbGFzcy5sZW5ndGgpIHtcbiAgICAgICAgb2JqW2tsYXNzXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBjbGFzc2VzO1xufVxuXG5mdW5jdGlvbiBnZXREb21Ob2RlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIChlbGVtZW50IGluc3RhbmNlb2YganFMaXRlKSA/IGVsZW1lbnRbMF0gOiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBhcHBseUdlbmVyYXRlZFByZXBhcmF0aW9uQ2xhc3NlcyhlbGVtZW50LCBldmVudCwgb3B0aW9ucykge1xuICB2YXIgY2xhc3NlcyA9ICcnO1xuICBpZiAoZXZlbnQpIHtcbiAgICBjbGFzc2VzID0gcGVuZENsYXNzZXMoZXZlbnQsIEVWRU5UX0NMQVNTX1BSRUZJWCwgdHJ1ZSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcbiAgICBjbGFzc2VzID0gY29uY2F0V2l0aFNwYWNlKGNsYXNzZXMsIHBlbmRDbGFzc2VzKG9wdGlvbnMuYWRkQ2xhc3MsIEFERF9DTEFTU19TVUZGSVgpKTtcbiAgfVxuICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgIGNsYXNzZXMgPSBjb25jYXRXaXRoU3BhY2UoY2xhc3NlcywgcGVuZENsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgUkVNT1ZFX0NMQVNTX1NVRkZJWCkpO1xuICB9XG4gIGlmIChjbGFzc2VzLmxlbmd0aCkge1xuICAgIG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzID0gY2xhc3NlcztcbiAgICBlbGVtZW50LmFkZENsYXNzKGNsYXNzZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFyR2VuZXJhdGVkQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnByZXBhcmF0aW9uQ2xhc3Nlcykge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3Mob3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMpO1xuICAgIG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzID0gbnVsbDtcbiAgfVxuICBpZiAob3B0aW9ucy5hY3RpdmVDbGFzc2VzKSB7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLmFjdGl2ZUNsYXNzZXMpO1xuICAgIG9wdGlvbnMuYWN0aXZlQ2xhc3NlcyA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmxvY2tUcmFuc2l0aW9ucyhub2RlLCBkdXJhdGlvbikge1xuICAvLyB3ZSB1c2UgYSBuZWdhdGl2ZSBkZWxheSB2YWx1ZSBzaW5jZSBpdCBwZXJmb3JtcyBibG9ja2luZ1xuICAvLyB5ZXQgaXQgZG9lc24ndCBraWxsIGFueSBleGlzdGluZyB0cmFuc2l0aW9ucyBydW5uaW5nIG9uIHRoZVxuICAvLyBzYW1lIGVsZW1lbnQgd2hpY2ggbWFrZXMgdGhpcyBzYWZlIGZvciBjbGFzcy1iYXNlZCBhbmltYXRpb25zXG4gIHZhciB2YWx1ZSA9IGR1cmF0aW9uID8gJy0nICsgZHVyYXRpb24gKyAncycgOiAnJztcbiAgYXBwbHlJbmxpbmVTdHlsZShub2RlLCBbVFJBTlNJVElPTl9ERUxBWV9QUk9QLCB2YWx1ZV0pO1xuICByZXR1cm4gW1RSQU5TSVRJT05fREVMQVlfUFJPUCwgdmFsdWVdO1xufVxuXG5mdW5jdGlvbiBibG9ja0tleWZyYW1lQW5pbWF0aW9ucyhub2RlLCBhcHBseUJsb2NrKSB7XG4gIHZhciB2YWx1ZSA9IGFwcGx5QmxvY2sgPyAncGF1c2VkJyA6ICcnO1xuICB2YXIga2V5ID0gQU5JTUFUSU9OX1BST1AgKyBBTklNQVRJT05fUExBWVNUQVRFX0tFWTtcbiAgYXBwbHlJbmxpbmVTdHlsZShub2RlLCBba2V5LCB2YWx1ZV0pO1xuICByZXR1cm4gW2tleSwgdmFsdWVdO1xufVxuXG5mdW5jdGlvbiBhcHBseUlubGluZVN0eWxlKG5vZGUsIHN0eWxlVHVwbGUpIHtcbiAgdmFyIHByb3AgPSBzdHlsZVR1cGxlWzBdO1xuICB2YXIgdmFsdWUgPSBzdHlsZVR1cGxlWzFdO1xuICBub2RlLnN0eWxlW3Byb3BdID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdFdpdGhTcGFjZShhLGIpIHtcbiAgaWYgKCFhKSByZXR1cm4gYjtcbiAgaWYgKCFiKSByZXR1cm4gYTtcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xufVxuXG52YXIgJCRyQUZTY2hlZHVsZXJGYWN0b3J5ID0gWyckJHJBRicsIGZ1bmN0aW9uKCQkckFGKSB7XG4gIHZhciBxdWV1ZSwgY2FuY2VsRm47XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVyKHRhc2tzKSB7XG4gICAgLy8gd2UgbWFrZSBhIGNvcHkgc2luY2UgUkFGU2NoZWR1bGVyIG11dGF0ZXMgdGhlIHN0YXRlXG4gICAgLy8gb2YgdGhlIHBhc3NlZCBpbiBhcnJheSB2YXJpYWJsZSBhbmQgdGhpcyB3b3VsZCBiZSBkaWZmaWN1bHRcbiAgICAvLyB0byB0cmFjayBkb3duIG9uIHRoZSBvdXRzaWRlIGNvZGVcbiAgICBxdWV1ZSA9IHF1ZXVlLmNvbmNhdCh0YXNrcyk7XG4gICAgbmV4dFRpY2soKTtcbiAgfVxuXG4gIHF1ZXVlID0gc2NoZWR1bGVyLnF1ZXVlID0gW107XG5cbiAgLyogd2FpdFVudGlsUXVpZXQgZG9lcyB0d28gdGhpbmdzOlxuICAgKiAxLiBJdCB3aWxsIHJ1biB0aGUgRklOQUwgYGZuYCB2YWx1ZSBvbmx5IHdoZW4gYW4gdW5jYW5jZWxlZCBSQUYgaGFzIHBhc3NlZCB0aHJvdWdoXG4gICAqIDIuIEl0IHdpbGwgZGVsYXkgdGhlIG5leHQgd2F2ZSBvZiB0YXNrcyBmcm9tIHJ1bm5pbmcgdW50aWwgdGhlIHF1aWV0IGBmbmAgaGFzIHJ1bi5cbiAgICpcbiAgICogVGhlIG1vdGl2YXRpb24gaGVyZSBpcyB0aGF0IGFuaW1hdGlvbiBjb2RlIGNhbiByZXF1ZXN0IG1vcmUgdGltZSBmcm9tIHRoZSBzY2hlZHVsZXJcbiAgICogYmVmb3JlIHRoZSBuZXh0IHdhdmUgcnVucy4gVGhpcyBhbGxvd3MgZm9yIGNlcnRhaW4gRE9NIHByb3BlcnRpZXMgc3VjaCBhcyBjbGFzc2VzIHRvXG4gICAqIGJlIHJlc29sdmVkIGluIHRpbWUgZm9yIHRoZSBuZXh0IGFuaW1hdGlvbiB0byBydW4uXG4gICAqL1xuICBzY2hlZHVsZXIud2FpdFVudGlsUXVpZXQgPSBmdW5jdGlvbihmbikge1xuICAgIGlmIChjYW5jZWxGbikgY2FuY2VsRm4oKTtcblxuICAgIGNhbmNlbEZuID0gJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICBjYW5jZWxGbiA9IG51bGw7XG4gICAgICBmbigpO1xuICAgICAgbmV4dFRpY2soKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gc2NoZWR1bGVyO1xuXG4gIGZ1bmN0aW9uIG5leHRUaWNrKCkge1xuICAgIGlmICghcXVldWUubGVuZ3RoKSByZXR1cm47XG5cbiAgICB2YXIgaXRlbXMgPSBxdWV1ZS5zaGlmdCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGl0ZW1zW2ldKCk7XG4gICAgfVxuXG4gICAgaWYgKCFjYW5jZWxGbikge1xuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghY2FuY2VsRm4pIG5leHRUaWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQW5pbWF0ZUNoaWxkcmVuXG4gKiBAcmVzdHJpY3QgQUVcbiAqIEBlbGVtZW50IEFOWVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nQW5pbWF0ZUNoaWxkcmVuIGFsbG93cyB5b3UgdG8gc3BlY2lmeSB0aGF0IGNoaWxkcmVuIG9mIHRoaXMgZWxlbWVudCBzaG91bGQgYW5pbWF0ZSBldmVuIGlmIGFueVxuICogb2YgdGhlIGNoaWxkcmVuJ3MgcGFyZW50cyBhcmUgY3VycmVudGx5IGFuaW1hdGluZy4gQnkgZGVmYXVsdCwgd2hlbiBhbiBlbGVtZW50IGhhcyBhbiBhY3RpdmUgYGVudGVyYCwgYGxlYXZlYCwgb3IgYG1vdmVgXG4gKiAoc3RydWN0dXJhbCkgYW5pbWF0aW9uLCBjaGlsZCBlbGVtZW50cyB0aGF0IGFsc28gaGF2ZSBhbiBhY3RpdmUgc3RydWN0dXJhbCBhbmltYXRpb24gYXJlIG5vdCBhbmltYXRlZC5cbiAqXG4gKiBOb3RlIHRoYXQgZXZlbiBpZiBgbmdBbmltYXRlQ2hpbGRyZW5gIGlzIHNldCwgbm8gY2hpbGQgYW5pbWF0aW9ucyB3aWxsIHJ1biB3aGVuIHRoZSBwYXJlbnQgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSAoYGxlYXZlYCBhbmltYXRpb24pLlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdBbmltYXRlQ2hpbGRyZW4gSWYgdGhlIHZhbHVlIGlzIGVtcHR5LCBgdHJ1ZWAgb3IgYG9uYCxcbiAqICAgICB0aGVuIGNoaWxkIGFuaW1hdGlvbnMgYXJlIGFsbG93ZWQuIElmIHRoZSB2YWx1ZSBpcyBgZmFsc2VgLCBjaGlsZCBhbmltYXRpb25zIGFyZSBub3QgYWxsb3dlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlQ2hpbGRyZW5cIiBuYW1lPVwibmdBbmltYXRlQ2hpbGRyZW5cIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNYWluQ29udHJvbGxlciBhcyBtYWluXCI+XG4gICAgICAgICA8bGFiZWw+U2hvdyBjb250YWluZXI/IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm1haW4uZW50ZXJFbGVtZW50XCIgLz48L2xhYmVsPlxuICAgICAgICAgPGxhYmVsPkFuaW1hdGUgY2hpbGRyZW4/IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm1haW4uYW5pbWF0ZUNoaWxkcmVuXCIgLz48L2xhYmVsPlxuICAgICAgICAgPGhyPlxuICAgICAgICAgPGRpdiBuZy1hbmltYXRlLWNoaWxkcmVuPVwie3ttYWluLmFuaW1hdGVDaGlsZHJlbn19XCI+XG4gICAgICAgICAgIDxkaXYgbmctaWY9XCJtYWluLmVudGVyRWxlbWVudFwiIGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgTGlzdCBvZiBpdGVtczpcbiAgICAgICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cIml0ZW0gaW4gWzAsIDEsIDIsIDNdXCIgY2xhc3M9XCJpdGVtXCI+SXRlbSB7e2l0ZW19fTwvZGl2PlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuXG4gICAgICAuY29udGFpbmVyLm5nLWVudGVyLFxuICAgICAgLmNvbnRhaW5lci5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCBlYXNlIDEuNXM7XG4gICAgICB9XG5cbiAgICAgIC5jb250YWluZXIubmctZW50ZXIsXG4gICAgICAuY29udGFpbmVyLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB9XG5cbiAgICAgIC5jb250YWluZXIubmctbGVhdmUsXG4gICAgICAuY29udGFpbmVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtIHtcbiAgICAgICAgYmFja2dyb3VuZDogZmlyZWJyaWNrO1xuICAgICAgICBjb2xvcjogI0ZGRjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIH1cblxuICAgICAgLml0ZW0ubmctZW50ZXIsXG4gICAgICAuaXRlbS5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxLjVzIGVhc2U7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLm5nLWVudGVyIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDUwcHgpO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ0FuaW1hdGVDaGlsZHJlbicsIFsnbmdBbmltYXRlJ10pXG4gICAgICAgIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIGZ1bmN0aW9uIE1haW5Db250cm9sbGVyKCkge1xuICAgICAgICAgIHRoaXMuYW5pbWF0ZUNoaWxkcmVuID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5lbnRlckVsZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciAkJEFuaW1hdGVDaGlsZHJlbkRpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGludGVycG9sYXRlKSB7XG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICB2YXIgdmFsID0gYXR0cnMubmdBbmltYXRlQ2hpbGRyZW47XG4gICAgICBpZiAoaXNTdHJpbmcodmFsKSAmJiB2YWwubGVuZ3RoID09PSAwKSB7IC8vZW1wdHkgYXR0cmlidXRlXG4gICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NISUxEUkVOX0RBVEEsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSW50ZXJwb2xhdGUgYW5kIHNldCB0aGUgdmFsdWUsIHNvIHRoYXQgaXQgaXMgYXZhaWxhYmxlIHRvXG4gICAgICAgIC8vIGFuaW1hdGlvbnMgdGhhdCBydW4gcmlnaHQgYWZ0ZXIgY29tcGlsYXRpb25cbiAgICAgICAgc2V0RGF0YSgkaW50ZXJwb2xhdGUodmFsKShzY29wZSkpO1xuICAgICAgICBhdHRycy4kb2JzZXJ2ZSgnbmdBbmltYXRlQ2hpbGRyZW4nLCBzZXREYXRhKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0RGF0YSh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSAnb24nIHx8IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NISUxEUkVOX0RBVEEsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuLyogZXhwb3J0ZWQgJEFuaW1hdGVDc3NQcm92aWRlciAqL1xuXG52YXIgQU5JTUFURV9USU1FUl9LRVkgPSAnJCRhbmltYXRlQ3NzJztcblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGFuaW1hdGVDc3NcbiAqIEBraW5kIG9iamVjdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSBpcyBhIHVzZWZ1bCB1dGlsaXR5IHRvIHRyaWdnZXIgY3VzdG9taXplZCBDU1MtYmFzZWQgdHJhbnNpdGlvbnMva2V5ZnJhbWVzXG4gKiBmcm9tIGEgSmF2YVNjcmlwdC1iYXNlZCBhbmltYXRpb24gb3IgZGlyZWN0bHkgZnJvbSBhIGRpcmVjdGl2ZS4gVGhlIHB1cnBvc2Ugb2YgYCRhbmltYXRlQ3NzYCBpcyBOT1RcbiAqIHRvIHNpZGUtc3RlcCBob3cgYCRhbmltYXRlYCBhbmQgbmdBbmltYXRlIHdvcmssIGJ1dCB0aGUgZ29hbCBpcyB0byBhbGxvdyBwcmUtZXhpc3RpbmcgYW5pbWF0aW9ucyBvclxuICogZGlyZWN0aXZlcyB0byBjcmVhdGUgbW9yZSBjb21wbGV4IGFuaW1hdGlvbnMgdGhhdCBjYW4gYmUgcHVyZWx5IGRyaXZlbiB1c2luZyBDU1MgY29kZS5cbiAqXG4gKiBOb3RlIHRoYXQgb25seSBicm93c2VycyB0aGF0IHN1cHBvcnQgQ1NTIHRyYW5zaXRpb25zIGFuZC9vciBrZXlmcmFtZSBhbmltYXRpb25zIGFyZSBjYXBhYmxlIG9mXG4gKiByZW5kZXJpbmcgYW5pbWF0aW9ucyB0cmlnZ2VyZWQgdmlhIGAkYW5pbWF0ZUNzc2AgKGJhZCBuZXdzIGZvciBJRTkgYW5kIGxvd2VyKS5cbiAqXG4gKiAjIyBVc2FnZVxuICogT25jZSBhZ2FpbiwgYCRhbmltYXRlQ3NzYCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBhIHJlZ2lzdGVyZWQgSmF2YVNjcmlwdCBhbmltYXRpb24gdGhhdFxuICogaXMgcG93ZXJlZCBieSBuZ0FuaW1hdGUuIEl0IGlzIHBvc3NpYmxlIHRvIHVzZSBgJGFuaW1hdGVDc3NgIGRpcmVjdGx5IGluc2lkZSBvZiBhIGRpcmVjdGl2ZSwgaG93ZXZlcixcbiAqIGFueSBhdXRvbWF0aWMgY29udHJvbCBvdmVyIGNhbmNlbGxpbmcgYW5pbWF0aW9ucyBhbmQvb3IgcHJldmVudGluZyBhbmltYXRpb25zIGZyb20gYmVpbmcgcnVuIG9uXG4gKiBjaGlsZCBlbGVtZW50cyB3aWxsIG5vdCBiZSBoYW5kbGVkIGJ5IEFuZ3VsYXIuIEZvciB0aGlzIHRvIHdvcmsgYXMgZXhwZWN0ZWQsIHBsZWFzZSB1c2UgYCRhbmltYXRlYCB0b1xuICogdHJpZ2dlciB0aGUgYW5pbWF0aW9uIGFuZCB0aGVuIHNldHVwIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gdGhhdCBpbmplY3RzIGAkYW5pbWF0ZUNzc2AgdG8gdHJpZ2dlclxuICogdGhlIENTUyBhbmltYXRpb24uXG4gKlxuICogVGhlIGV4YW1wbGUgYmVsb3cgc2hvd3MgaG93IHdlIGNhbiBjcmVhdGUgYSBmb2xkaW5nIGFuaW1hdGlvbiBvbiBhbiBlbGVtZW50IHVzaW5nIGBuZy1pZmA6XG4gKlxuICogYGBgaHRtbFxuICogPCEtLSBub3RpY2UgdGhlIGBmb2xkLWFuaW1hdGlvbmAgQ1NTIGNsYXNzIC0tPlxuICogPGRpdiBuZy1pZj1cIm9uT2ZmXCIgY2xhc3M9XCJmb2xkLWFuaW1hdGlvblwiPlxuICogICBUaGlzIGVsZW1lbnQgd2lsbCBnbyBCT09NXG4gKiA8L2Rpdj5cbiAqIDxidXR0b24gbmctY2xpY2s9XCJvbk9mZj10cnVlXCI+Rm9sZCBJbjwvYnV0dG9uPlxuICogYGBgXG4gKlxuICogTm93IHdlIGNyZWF0ZSB0aGUgKipKYXZhU2NyaXB0IGFuaW1hdGlvbioqIHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSBDU1MgdHJhbnNpdGlvbjpcbiAqXG4gKiBgYGBqc1xuICogbmdNb2R1bGUuYW5pbWF0aW9uKCcuZm9sZC1hbmltYXRpb24nLCBbJyRhbmltYXRlQ3NzJywgZnVuY3Rpb24oJGFuaW1hdGVDc3MpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XG4gKiAgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudFswXS5vZmZzZXRIZWlnaHQ7XG4gKiAgICAgICByZXR1cm4gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICogICAgICAgICBmcm9tOiB7IGhlaWdodDonMHB4JyB9LFxuICogICAgICAgICB0bzogeyBoZWlnaHQ6aGVpZ2h0ICsgJ3B4JyB9LFxuICogICAgICAgICBkdXJhdGlvbjogMSAvLyBvbmUgc2Vjb25kXG4gKiAgICAgICB9KTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1dKTtcbiAqIGBgYFxuICpcbiAqICMjIE1vcmUgQWR2YW5jZWQgVXNlc1xuICpcbiAqIGAkYW5pbWF0ZUNzc2AgaXMgdGhlIHVuZGVybHlpbmcgY29kZSB0aGF0IG5nQW5pbWF0ZSB1c2VzIHRvIHBvd2VyICoqQ1NTLWJhc2VkIGFuaW1hdGlvbnMqKiBiZWhpbmQgdGhlIHNjZW5lcy4gVGhlcmVmb3JlIENTUyBob29rc1xuICogbGlrZSBgLm5nLUVWRU5UYCwgYC5uZy1FVkVOVC1hY3RpdmVgLCBgLm5nLUVWRU5ULXN0YWdnZXJgIGFyZSBhbGwgZmVhdHVyZXMgdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHVzaW5nIGAkYW5pbWF0ZUNzc2AgdmlhIEphdmFTY3JpcHQgY29kZS5cbiAqXG4gKiBUaGlzIGFsc28gbWVhbnMgdGhhdCBqdXN0IGFib3V0IGFueSBjb21iaW5hdGlvbiBvZiBhZGRpbmcgY2xhc3NlcywgcmVtb3ZpbmcgY2xhc3Nlcywgc2V0dGluZyBzdHlsZXMsIGR5bmFtaWNhbGx5IHNldHRpbmcgYSBrZXlmcmFtZSBhbmltYXRpb24sXG4gKiBhcHBseWluZyBhIGhhcmRjb2RlZCBkdXJhdGlvbiBvciBkZWxheSB2YWx1ZSwgY2hhbmdpbmcgdGhlIGFuaW1hdGlvbiBlYXNpbmcgb3IgYXBwbHlpbmcgYSBzdGFnZ2VyIGFuaW1hdGlvbiBhcmUgYWxsIG9wdGlvbnMgdGhhdCB3b3JrIHdpdGhcbiAqIGAkYW5pbWF0ZUNzc2AuIFRoZSBzZXJ2aWNlIGl0c2VsZiBpcyBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCB0aGUgY29tYmluYXRpb24gb2Ygb3B0aW9ucyBhbmQgZXhhbWluZSB0aGUgZWxlbWVudCBzdHlsaW5nIHByb3BlcnRpZXMgaW4gb3JkZXJcbiAqIHRvIHByb3ZpZGUgYSB3b3JraW5nIGFuaW1hdGlvbiB0aGF0IHdpbGwgcnVuIGluIENTUy5cbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBzaG93Y2FzZXMgYSBtb3JlIGFkdmFuY2VkIHZlcnNpb24gb2YgdGhlIGAuZm9sZC1hbmltYXRpb25gIGZyb20gdGhlIGV4YW1wbGUgYWJvdmU6XG4gKlxuICogYGBganNcbiAqIG5nTW9kdWxlLmFuaW1hdGlvbignLmZvbGQtYW5pbWF0aW9uJywgWyckYW5pbWF0ZUNzcycsIGZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xuICogICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0O1xuICogICAgICAgcmV0dXJuICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAqICAgICAgICAgYWRkQ2xhc3M6ICdyZWQgbGFyZ2UtdGV4dCBwdWxzZS10d2ljZScsXG4gKiAgICAgICAgIGVhc2luZzogJ2Vhc2Utb3V0JyxcbiAqICAgICAgICAgZnJvbTogeyBoZWlnaHQ6JzBweCcgfSxcbiAqICAgICAgICAgdG86IHsgaGVpZ2h0OmhlaWdodCArICdweCcgfSxcbiAqICAgICAgICAgZHVyYXRpb246IDEgLy8gb25lIHNlY29uZFxuICogICAgICAgfSk7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiBTaW5jZSB3ZSdyZSBhZGRpbmcvcmVtb3ZpbmcgQ1NTIGNsYXNzZXMgdGhlbiB0aGUgQ1NTIHRyYW5zaXRpb24gd2lsbCBhbHNvIHBpY2sgdGhvc2UgdXA6XG4gKlxuICogYGBgY3NzXG4gKiAvJiM0Mjsgc2luY2UgYSBoYXJkY29kZWQgZHVyYXRpb24gdmFsdWUgb2YgMSB3YXMgcHJvdmlkZWQgaW4gdGhlIEphdmFTY3JpcHQgYW5pbWF0aW9uIGNvZGUsXG4gKiB0aGUgQ1NTIGNsYXNzZXMgYmVsb3cgd2lsbCBiZSB0cmFuc2l0aW9uZWQgZGVzcGl0ZSB0aGVtIGJlaW5nIGRlZmluZWQgYXMgcmVndWxhciBDU1MgY2xhc3NlcyAmIzQyOy9cbiAqIC5yZWQgeyBiYWNrZ3JvdW5kOnJlZDsgfVxuICogLmxhcmdlLXRleHQgeyBmb250LXNpemU6MjBweDsgfVxuICpcbiAqIC8mIzQyOyB3ZSBjYW4gYWxzbyB1c2UgYSBrZXlmcmFtZSBhbmltYXRpb24gYW5kICRhbmltYXRlQ3NzIHdpbGwgbWFrZSBpdCB3b3JrIGFsb25nc2lkZSB0aGUgdHJhbnNpdGlvbiAmIzQyOy9cbiAqIC5wdWxzZS10d2ljZSB7XG4gKiAgIGFuaW1hdGlvbjogMC41cyBwdWxzZSBsaW5lYXIgMjtcbiAqICAgLXdlYmtpdC1hbmltYXRpb246IDAuNXMgcHVsc2UgbGluZWFyIDI7XG4gKiB9XG4gKlxuICogQGtleWZyYW1lcyBwdWxzZSB7XG4gKiAgIGZyb20geyB0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IH1cbiAqICAgdG8geyB0cmFuc2Zvcm06IHNjYWxlKDEuNSk7IH1cbiAqIH1cbiAqXG4gKiBALXdlYmtpdC1rZXlmcmFtZXMgcHVsc2Uge1xuICogICBmcm9tIHsgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuNSk7IH1cbiAqICAgdG8geyAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS41KTsgfVxuICogfVxuICogYGBgXG4gKlxuICogR2l2ZW4gdGhpcyBjb21wbGV4IGNvbWJpbmF0aW9uIG9mIENTUyBjbGFzc2VzLCBzdHlsZXMgYW5kIG9wdGlvbnMsIGAkYW5pbWF0ZUNzc2Agd2lsbCBmaWd1cmUgZXZlcnl0aGluZyBvdXQgYW5kIG1ha2UgdGhlIGFuaW1hdGlvbiBoYXBwZW4uXG4gKlxuICogIyMgSG93IHRoZSBPcHRpb25zIGFyZSBoYW5kbGVkXG4gKlxuICogYCRhbmltYXRlQ3NzYCBpcyB2ZXJ5IHZlcnNhdGlsZSBhbmQgaW50ZWxsaWdlbnQgd2hlbiBpdCBjb21lcyB0byBmaWd1cmluZyBvdXQgd2hhdCBjb25maWd1cmF0aW9ucyB0byBhcHBseSB0byB0aGUgZWxlbWVudCB0byBlbnN1cmUgdGhlIGFuaW1hdGlvblxuICogd29ya3Mgd2l0aCB0aGUgb3B0aW9ucyBwcm92aWRlZC4gU2F5IGZvciBleGFtcGxlIHdlIHdlcmUgYWRkaW5nIGEgY2xhc3MgdGhhdCBjb250YWluZWQgYSBrZXlmcmFtZSB2YWx1ZSBhbmQgd2Ugd2FudGVkIHRvIGFsc28gYW5pbWF0ZSBzb21lIGlubGluZVxuICogc3R5bGVzIHVzaW5nIHRoZSBgZnJvbWAgYW5kIGB0b2AgcHJvcGVydGllcy5cbiAqXG4gKiBgYGBqc1xuICogdmFyIGFuaW1hdG9yID0gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICogICBmcm9tOiB7IGJhY2tncm91bmQ6J3JlZCcgfSxcbiAqICAgdG86IHsgYmFja2dyb3VuZDonYmx1ZScgfVxuICogfSk7XG4gKiBhbmltYXRvci5zdGFydCgpO1xuICogYGBgXG4gKlxuICogYGBgY3NzXG4gKiAucm90YXRpbmctYW5pbWF0aW9uIHtcbiAqICAgYW5pbWF0aW9uOjAuNXMgcm90YXRlIGxpbmVhcjtcbiAqICAgLXdlYmtpdC1hbmltYXRpb246MC41cyByb3RhdGUgbGluZWFyO1xuICogfVxuICpcbiAqIEBrZXlmcmFtZXMgcm90YXRlIHtcbiAqICAgZnJvbSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XG4gKiAgIHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxuICogfVxuICpcbiAqIEAtd2Via2l0LWtleWZyYW1lcyByb3RhdGUge1xuICogICBmcm9tIHsgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxuICogICB0byB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxuICogfVxuICogYGBgXG4gKlxuICogVGhlIG1pc3NpbmcgcGllY2VzIGhlcmUgYXJlIHRoYXQgd2UgZG8gbm90IGhhdmUgYSB0cmFuc2l0aW9uIHNldCAod2l0aGluIHRoZSBDU1MgY29kZSBub3Igd2l0aGluIHRoZSBgJGFuaW1hdGVDc3NgIG9wdGlvbnMpIGFuZCB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpc1xuICogZ29pbmcgdG8gYmUgZGV0ZWN0ZWQgZnJvbSB3aGF0IHRoZSBrZXlmcmFtZSBzdHlsZXMgb24gdGhlIENTUyBjbGFzcyBhcmUuIEluIHRoaXMgZXZlbnQsIGAkYW5pbWF0ZUNzc2Agd2lsbCBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBhbiBpbmxpbmUgdHJhbnNpdGlvblxuICogc3R5bGUgbWF0Y2hpbmcgdGhlIGR1cmF0aW9uIGRldGVjdGVkIGZyb20gdGhlIGtleWZyYW1lIHN0eWxlICh3aGljaCBpcyBwcmVzZW50IGluIHRoZSBDU1MgY2xhc3MgdGhhdCBpcyBiZWluZyBhZGRlZCkgYW5kIHRoZW4gcHJlcGFyZSBib3RoIHRoZSB0cmFuc2l0aW9uXG4gKiBhbmQga2V5ZnJhbWUgYW5pbWF0aW9ucyB0byBydW4gaW4gcGFyYWxsZWwgb24gdGhlIGVsZW1lbnQuIFRoZW4gd2hlbiB0aGUgYW5pbWF0aW9uIGlzIHVuZGVyd2F5IHRoZSBwcm92aWRlZCBgZnJvbWAgYW5kIGB0b2AgQ1NTIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWRcbiAqIGFuZCBzcHJlYWQgYWNyb3NzIHRoZSB0cmFuc2l0aW9uIGFuZCBrZXlmcmFtZSBhbmltYXRpb24uXG4gKlxuICogIyMgV2hhdCBpcyByZXR1cm5lZFxuICpcbiAqIGAkYW5pbWF0ZUNzc2Agd29ya3MgaW4gdHdvIHN0YWdlczogYSBwcmVwYXJhdGlvbiBwaGFzZSBhbmQgYW4gYW5pbWF0aW9uIHBoYXNlLiBUaGVyZWZvcmUgd2hlbiBgJGFuaW1hdGVDc3NgIGlzIGZpcnN0IGNhbGxlZCBpdCB3aWxsIE5PVCBhY3R1YWxseVxuICogc3RhcnQgdGhlIGFuaW1hdGlvbi4gQWxsIHRoYXQgaXMgZ29pbmcgb24gaGVyZSBpcyB0aGF0IHRoZSBlbGVtZW50IGlzIGJlaW5nIHByZXBhcmVkIGZvciB0aGUgYW5pbWF0aW9uICh3aGljaCBtZWFucyB0aGF0IHRoZSBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlXG4gKiBhZGRlZCBhbmQgcmVtb3ZlZCBvbiB0aGUgZWxlbWVudCkuIE9uY2UgYCRhbmltYXRlQ3NzYCBpcyBjYWxsZWQgaXQgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgYW5pbWF0b3IgPSAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7IC4uLiB9KTtcbiAqIGBgYFxuICpcbiAqIE5vdyB3aGF0IGRvIHRoZSBjb250ZW50cyBvZiBvdXIgYGFuaW1hdG9yYCB2YXJpYWJsZSBsb29rIGxpa2U6XG4gKlxuICogYGBganNcbiAqIHtcbiAqICAgLy8gc3RhcnRzIHRoZSBhbmltYXRpb25cbiAqICAgc3RhcnQ6IEZ1bmN0aW9uLFxuICpcbiAqICAgLy8gZW5kcyAoYWJvcnRzKSB0aGUgYW5pbWF0aW9uXG4gKiAgIGVuZDogRnVuY3Rpb25cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRvIGFjdHVhbGx5IHN0YXJ0IHRoZSBhbmltYXRpb24gd2UgbmVlZCB0byBydW4gYGFuaW1hdGlvbi5zdGFydCgpYCB3aGljaCB3aWxsIHRoZW4gcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdlIGNhbiBob29rIGludG8gdG8gZGV0ZWN0IHdoZW4gdGhlIGFuaW1hdGlvbiBlbmRzLlxuICogSWYgd2UgY2hvb3NlIG5vdCB0byBydW4gdGhlIGFuaW1hdGlvbiB0aGVuIHdlIE1VU1QgcnVuIGBhbmltYXRpb24uZW5kKClgIHRvIHBlcmZvcm0gYSBjbGVhbnVwIG9uIHRoZSBlbGVtZW50IChzaW5jZSBzb21lIENTUyBjbGFzc2VzIGFuZCBzdHlsZXMgbWF5IGhhdmUgYmVlblxuICogYXBwbGllZCB0byB0aGUgZWxlbWVudCBkdXJpbmcgdGhlIHByZXBhcmF0aW9uIHBoYXNlKS4gTm90ZSB0aGF0IGFsbCBvdGhlciBwcm9wZXJ0aWVzIHN1Y2ggYXMgZHVyYXRpb24sIGRlbGF5LCB0cmFuc2l0aW9ucyBhbmQga2V5ZnJhbWVzIGFyZSBqdXN0IHByb3BlcnRpZXNcbiAqIGFuZCB0aGF0IGNoYW5naW5nIHRoZW0gd2lsbCBub3QgcmVjb25maWd1cmUgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiAjIyMgcnVubmVyLmRvbmUoKSB2cyBydW5uZXIudGhlbigpXG4gKiBJdCBpcyBkb2N1bWVudGVkIHRoYXQgYGFuaW1hdGlvbi5zdGFydCgpYCB3aWxsIHJldHVybiBhIHByb21pc2Ugb2JqZWN0IGFuZCB0aGlzIGlzIHRydWUsIGhvd2V2ZXIsIHRoZXJlIGlzIGFsc28gYW4gYWRkaXRpb25hbCBtZXRob2QgYXZhaWxhYmxlIG9uIHRoZVxuICogcnVubmVyIGNhbGxlZCBgLmRvbmUoY2FsbGJhY2tGbilgLiBUaGUgZG9uZSBtZXRob2Qgd29ya3MgdGhlIHNhbWUgYXMgYC5maW5hbGx5KGNhbGxiYWNrRm4pYCwgaG93ZXZlciwgaXQgZG9lcyAqKm5vdCB0cmlnZ2VyIGEgZGlnZXN0IHRvIG9jY3VyKiouXG4gKiBUaGVyZWZvcmUsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBpdCdzIGFsd2F5cyBiZXN0IHRvIHVzZSBgcnVubmVyLmRvbmUoY2FsbGJhY2spYCBpbnN0ZWFkIG9mIGBydW5uZXIudGhlbigpYCwgYHJ1bm5lci5jYXRjaCgpYCBvciBgcnVubmVyLmZpbmFsbHkoKWBcbiAqIHVubGVzcyB5b3UgcmVhbGx5IG5lZWQgYSBkaWdlc3QgdG8ga2ljayBvZmYgYWZ0ZXJ3YXJkcy5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgdG8gbWFrZSB0aGlzIGVhc2llciwgbmdBbmltYXRlIGhhcyB0d2Vha2VkIHRoZSBKUyBhbmltYXRpb25zIEFQSSB0byByZWNvZ25pemUgd2hlbiBhIHJ1bm5lciBpbnN0YW5jZSBpcyByZXR1cm5lZCBmcm9tICRhbmltYXRlQ3NzXG4gKiAoc28gdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGBydW5uZXIuZG9uZShkb25lRm4pYCBpbnNpZGUgb2YgeW91ciBKYXZhU2NyaXB0IGFuaW1hdGlvbiBjb2RlKS5cbiAqIENoZWNrIHRoZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlQ3NzI3VzYWdlIGFuaW1hdGlvbiBjb2RlIGFib3ZlfSB0byBzZWUgaG93IHRoaXMgd29ya3MuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSBhbmltYXRlZFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgdGhlIGFuaW1hdGlvbi1yZWxhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgZHVyaW5nIHRoZSBhbmltYXRpb25cbiAqXG4gKiAqIGBldmVudGAgLSBUaGUgRE9NIGV2ZW50IChlLmcuIGVudGVyLCBsZWF2ZSwgbW92ZSkuIFdoZW4gdXNlZCwgYSBnZW5lcmF0ZWQgQ1NTIGNsYXNzIG9mIGBuZy1FVkVOVGAgYW5kIGBuZy1FVkVOVC1hY3RpdmVgIHdpbGwgYmUgYXBwbGllZFxuICogdG8gdGhlIGVsZW1lbnQgZHVyaW5nIHRoZSBhbmltYXRpb24uIE11bHRpcGxlIGV2ZW50cyBjYW4gYmUgcHJvdmlkZWQgd2hlbiBzcGFjZXMgYXJlIHVzZWQgYXMgYSBzZXBhcmF0b3IuIChOb3RlIHRoYXQgdGhpcyB3aWxsIG5vdCBwZXJmb3JtIGFueSBET00gb3BlcmF0aW9uLilcbiAqICogYHN0cnVjdHVyYWxgIC0gSW5kaWNhdGVzIHRoYXQgdGhlIGBuZy1gIHByZWZpeCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBldmVudCBjbGFzcy4gU2V0dGluZyB0byBgZmFsc2VgIG9yIG9taXR0aW5nIHdpbGwgdHVybiBgbmctRVZFTlRgIGFuZFxuICogYG5nLUVWRU5ULWFjdGl2ZWAgaW4gYEVWRU5UYCBhbmQgYEVWRU5ULWFjdGl2ZWAuIFVudXNlZCBpZiBgZXZlbnRgIGlzIG9taXR0ZWQuXG4gKiAqIGBlYXNpbmdgIC0gVGhlIENTUyBlYXNpbmcgdmFsdWUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHRyYW5zaXRpb24gb3Iga2V5ZnJhbWUgYW5pbWF0aW9uIChvciBib3RoKS5cbiAqICogYHRyYW5zaXRpb25TdHlsZWAgLSBUaGUgcmF3IENTUyB0cmFuc2l0aW9uIHN0eWxlIHRoYXQgd2lsbCBiZSB1c2VkIChlLmcuIGAxcyBsaW5lYXIgYWxsYCkuXG4gKiAqIGBrZXlmcmFtZVN0eWxlYCAtIFRoZSByYXcgQ1NTIGtleWZyYW1lIGFuaW1hdGlvbiBzdHlsZSB0aGF0IHdpbGwgYmUgdXNlZCAoZS5nLiBgMXMgbXlfYW5pbWF0aW9uIGxpbmVhcmApLlxuICogKiBgZnJvbWAgLSBUaGUgc3RhcnRpbmcgQ1NTIHN0eWxlcyAoYSBrZXkvdmFsdWUgb2JqZWN0KSB0aGF0IHdpbGwgYmUgYXBwbGllZCBhdCB0aGUgc3RhcnQgb2YgdGhlIGFuaW1hdGlvbi5cbiAqICogYHRvYCAtIFRoZSBlbmRpbmcgQ1NTIHN0eWxlcyAoYSBrZXkvdmFsdWUgb2JqZWN0KSB0aGF0IHdpbGwgYmUgYXBwbGllZCBhY3Jvc3MgdGhlIGFuaW1hdGlvbiB2aWEgYSBDU1MgdHJhbnNpdGlvbi5cbiAqICogYGFkZENsYXNzYCAtIEEgc3BhY2Ugc2VwYXJhdGVkIGxpc3Qgb2YgQ1NTIGNsYXNzZXMgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50IGFuZCBzcHJlYWQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gKiAqIGByZW1vdmVDbGFzc2AgLSBBIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIENTUyBjbGFzc2VzIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgYW5kIHNwcmVhZCBhY3Jvc3MgdGhlIGFuaW1hdGlvbi5cbiAqICogYGR1cmF0aW9uYCAtIEEgbnVtYmVyIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgdG90YWwgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24gYW5kL29yIGtleWZyYW1lIChub3RlIHRoYXQgYSB2YWx1ZSBvZiAxIGlzIDEwMDBtcykuIElmIGEgdmFsdWUgb2YgYDBgXG4gKiBpcyBwcm92aWRlZCB0aGVuIHRoZSBhbmltYXRpb24gd2lsbCBiZSBza2lwcGVkIGVudGlyZWx5LlxuICogKiBgZGVsYXlgIC0gQSBudW1iZXIgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB0b3RhbCBkZWxheSBvZiB0aGUgdHJhbnNpdGlvbiBhbmQvb3Iga2V5ZnJhbWUgKG5vdGUgdGhhdCBhIHZhbHVlIG9mIDEgaXMgMTAwMG1zKS4gSWYgYSB2YWx1ZSBvZiBgdHJ1ZWAgaXNcbiAqIHVzZWQgdGhlbiB3aGF0ZXZlciBkZWxheSB2YWx1ZSBpcyBkZXRlY3RlZCBmcm9tIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIG1pcnJvcmVkIG9uIHRoZSBlbGVtZW50cyBzdHlsZXMgKGUuZy4gYnkgc2V0dGluZyBkZWxheSB0cnVlIHRoZW4gdGhlIHN0eWxlIHZhbHVlXG4gKiBvZiB0aGUgZWxlbWVudCB3aWxsIGJlIGB0cmFuc2l0aW9uLWRlbGF5OiBERVRFQ1RFRF9WQUxVRWApLiBVc2luZyBgdHJ1ZWAgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdGhlIENTUyBjbGFzc2VzIGFuZCBpbmxpbmUgc3R5bGVzIHRvIGFsbCBzaGFyZSB0aGUgc2FtZVxuICogQ1NTIGRlbGF5IHZhbHVlLlxuICogKiBgc3RhZ2dlcmAgLSBBIG51bWVyaWMgdGltZSB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIGRlbGF5IGJldHdlZW4gc3VjY2Vzc2l2ZWx5IGFuaW1hdGVkIGVsZW1lbnRzXG4gKiAoe0BsaW5rIG5nQW5pbWF0ZSNjc3Mtc3RhZ2dlcmluZy1hbmltYXRpb25zIENsaWNrIGhlcmUgdG8gbGVhcm4gaG93IENTUy1iYXNlZCBzdGFnZ2VyaW5nIHdvcmtzIGluIG5nQW5pbWF0ZS59KVxuICogKiBgc3RhZ2dlckluZGV4YCAtIFRoZSBudW1lcmljIGluZGV4IHJlcHJlc2VudGluZyB0aGUgc3RhZ2dlciBpdGVtIChlLmcuIGEgdmFsdWUgb2YgNSBpcyBlcXVhbCB0byB0aGUgc2l4dGggaXRlbSBpbiB0aGUgc3RhZ2dlcjsgdGhlcmVmb3JlIHdoZW4gYVxuICogICBgc3RhZ2dlcmAgb3B0aW9uIHZhbHVlIG9mIGAwLjFgIGlzIHVzZWQgdGhlbiB0aGVyZSB3aWxsIGJlIGEgc3RhZ2dlciBkZWxheSBvZiBgNjAwbXNgKVxuICogKiBgYXBwbHlDbGFzc2VzRWFybHlgIC0gV2hldGhlciBvciBub3QgdGhlIGNsYXNzZXMgYmVpbmcgYWRkZWQgb3IgcmVtb3ZlZCB3aWxsIGJlIHVzZWQgd2hlbiBkZXRlY3RpbmcgdGhlIGFuaW1hdGlvbi4gVGhpcyBpcyBzZXQgYnkgYCRhbmltYXRlYCB3aGVuIGVudGVyL2xlYXZlL21vdmUgYW5pbWF0aW9ucyBhcmUgZmlyZWQgdG8gZW5zdXJlIHRoYXQgdGhlIENTUyBjbGFzc2VzIGFyZSByZXNvbHZlZCBpbiB0aW1lLiAoTm90ZSB0aGF0IHRoaXMgd2lsbCBwcmV2ZW50IGFueSB0cmFuc2l0aW9ucyBmcm9tIG9jY3VycmluZyBvbiB0aGUgY2xhc3NlcyBiZWluZyBhZGRlZCBhbmQgcmVtb3ZlZC4pXG4gKiAqIGBjbGVhbnVwU3R5bGVzYCAtIFdoZXRoZXIgb3Igbm90IHRoZSBwcm92aWRlZCBgZnJvbWAgYW5kIGB0b2Agc3R5bGVzIHdpbGwgYmUgcmVtb3ZlZCBvbmNlXG4gKiAgICB0aGUgYW5pbWF0aW9uIGlzIGNsb3NlZC4gVGhpcyBpcyB1c2VmdWwgZm9yIHdoZW4gdGhlIHN0eWxlcyBhcmUgdXNlZCBwdXJlbHkgZm9yIHRoZSBzYWtlIG9mXG4gKiAgICB0aGUgYW5pbWF0aW9uIGFuZCBkbyBub3QgaGF2ZSBhIGxhc3RpbmcgdmlzdWFsIGVmZmVjdCBvbiB0aGUgZWxlbWVudCAoZS5nLiBhIGNvbGxhcHNlIGFuZCBvcGVuIGFuaW1hdGlvbikuXG4gKiAgICBCeSBkZWZhdWx0IHRoaXMgdmFsdWUgaXMgc2V0IHRvIGBmYWxzZWAuXG4gKlxuICogQHJldHVybiB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCBzdGFydCBhbmQgZW5kIG1ldGhvZHMgYW5kIGRldGFpbHMgYWJvdXQgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiAqIGBzdGFydGAgLSBUaGUgbWV0aG9kIHRvIHN0YXJ0IHRoZSBhbmltYXRpb24uIFRoaXMgd2lsbCByZXR1cm4gYSBgUHJvbWlzZWAgd2hlbiBjYWxsZWQuXG4gKiAqIGBlbmRgIC0gVGhpcyBtZXRob2Qgd2lsbCBjYW5jZWwgdGhlIGFuaW1hdGlvbiBhbmQgcmVtb3ZlIGFsbCBhcHBsaWVkIENTUyBjbGFzc2VzIGFuZCBzdHlsZXMuXG4gKi9cbnZhciBPTkVfU0VDT05EID0gMTAwMDtcblxudmFyIEVMQVBTRURfVElNRV9NQVhfREVDSU1BTF9QTEFDRVMgPSAzO1xudmFyIENMT1NJTkdfVElNRV9CVUZGRVIgPSAxLjU7XG5cbnZhciBERVRFQ1RfQ1NTX1BST1BFUlRJRVMgPSB7XG4gIHRyYW5zaXRpb25EdXJhdGlvbjogICAgICBUUkFOU0lUSU9OX0RVUkFUSU9OX1BST1AsXG4gIHRyYW5zaXRpb25EZWxheTogICAgICAgICBUUkFOU0lUSU9OX0RFTEFZX1BST1AsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogICAgICBUUkFOU0lUSU9OX1BST1AgKyBQUk9QRVJUWV9LRVksXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiAgICAgICBBTklNQVRJT05fRFVSQVRJT05fUFJPUCxcbiAgYW5pbWF0aW9uRGVsYXk6ICAgICAgICAgIEFOSU1BVElPTl9ERUxBWV9QUk9QLFxuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogQU5JTUFUSU9OX1BST1AgKyBBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWVxufTtcblxudmFyIERFVEVDVF9TVEFHR0VSX0NTU19QUk9QRVJUSUVTID0ge1xuICB0cmFuc2l0aW9uRHVyYXRpb246ICAgICAgVFJBTlNJVElPTl9EVVJBVElPTl9QUk9QLFxuICB0cmFuc2l0aW9uRGVsYXk6ICAgICAgICAgVFJBTlNJVElPTl9ERUxBWV9QUk9QLFxuICBhbmltYXRpb25EdXJhdGlvbjogICAgICAgQU5JTUFUSU9OX0RVUkFUSU9OX1BST1AsXG4gIGFuaW1hdGlvbkRlbGF5OiAgICAgICAgICBBTklNQVRJT05fREVMQVlfUFJPUFxufTtcblxuZnVuY3Rpb24gZ2V0Q3NzS2V5ZnJhbWVEdXJhdGlvblN0eWxlKGR1cmF0aW9uKSB7XG4gIHJldHVybiBbQU5JTUFUSU9OX0RVUkFUSU9OX1BST1AsIGR1cmF0aW9uICsgJ3MnXTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3NzRGVsYXlTdHlsZShkZWxheSwgaXNLZXlmcmFtZUFuaW1hdGlvbikge1xuICB2YXIgcHJvcCA9IGlzS2V5ZnJhbWVBbmltYXRpb24gPyBBTklNQVRJT05fREVMQVlfUFJPUCA6IFRSQU5TSVRJT05fREVMQVlfUFJPUDtcbiAgcmV0dXJuIFtwcm9wLCBkZWxheSArICdzJ107XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVDc3NTdHlsZXMoJHdpbmRvdywgZWxlbWVudCwgcHJvcGVydGllcykge1xuICB2YXIgc3R5bGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGRldGVjdGVkU3R5bGVzID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHx8IHt9O1xuICBmb3JFYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKGZvcm1hbFN0eWxlTmFtZSwgYWN0dWFsU3R5bGVOYW1lKSB7XG4gICAgdmFyIHZhbCA9IGRldGVjdGVkU3R5bGVzW2Zvcm1hbFN0eWxlTmFtZV07XG4gICAgaWYgKHZhbCkge1xuICAgICAgdmFyIGMgPSB2YWwuY2hhckF0KDApO1xuXG4gICAgICAvLyBvbmx5IG51bWVyaWNhbC1iYXNlZCB2YWx1ZXMgaGF2ZSBhIG5lZ2F0aXZlIHNpZ24gb3IgZGlnaXQgYXMgdGhlIGZpcnN0IHZhbHVlXG4gICAgICBpZiAoYyA9PT0gJy0nIHx8IGMgPT09ICcrJyB8fCBjID49IDApIHtcbiAgICAgICAgdmFsID0gcGFyc2VNYXhUaW1lKHZhbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGJ5IHNldHRpbmcgdGhpcyB0byBudWxsIGluIHRoZSBldmVudCB0aGF0IHRoZSBkZWxheSBpcyBub3Qgc2V0IG9yIGlzIHNldCBkaXJlY3RseSBhcyAwXG4gICAgICAvLyB0aGVuIHdlIGNhbiBzdGlsbCBhbGxvdyBmb3IgbmVnYXRpdmUgdmFsdWVzIHRvIGJlIHVzZWQgbGF0ZXIgb24gYW5kIG5vdCBtaXN0YWtlIHRoaXNcbiAgICAgIC8vIHZhbHVlIGZvciBiZWluZyBncmVhdGVyIHRoYW4gYW55IG90aGVyIG5lZ2F0aXZlIHZhbHVlLlxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xuICAgICAgICB2YWwgPSBudWxsO1xuICAgICAgfVxuICAgICAgc3R5bGVzW2FjdHVhbFN0eWxlTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1heFRpbWUoc3RyKSB7XG4gIHZhciBtYXhWYWx1ZSA9IDA7XG4gIHZhciB2YWx1ZXMgPSBzdHIuc3BsaXQoL1xccyosXFxzKi8pO1xuICBmb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBpdCdzIGFsd2F5cyBzYWZlIHRvIGNvbnNpZGVyIG9ubHkgc2Vjb25kIHZhbHVlcyBhbmQgb21pdCBgbXNgIHZhbHVlcyBzaW5jZVxuICAgIC8vIGdldENvbXB1dGVkU3R5bGUgd2lsbCBhbHdheXMgaGFuZGxlIHRoZSBjb252ZXJzaW9uIGZvciB1c1xuICAgIGlmICh2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgPT09ICdzJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICBtYXhWYWx1ZSA9IG1heFZhbHVlID8gTWF0aC5tYXgodmFsdWUsIG1heFZhbHVlKSA6IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIG1heFZhbHVlO1xufVxuXG5mdW5jdGlvbiB0cnV0aHlUaW1pbmdWYWx1ZSh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gMCB8fCB2YWwgIT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0Q3NzVHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUoZHVyYXRpb24sIGFwcGx5T25seUR1cmF0aW9uKSB7XG4gIHZhciBzdHlsZSA9IFRSQU5TSVRJT05fUFJPUDtcbiAgdmFyIHZhbHVlID0gZHVyYXRpb24gKyAncyc7XG4gIGlmIChhcHBseU9ubHlEdXJhdGlvbikge1xuICAgIHN0eWxlICs9IERVUkFUSU9OX0tFWTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSArPSAnIGxpbmVhciBhbGwnO1xuICB9XG4gIHJldHVybiBbc3R5bGUsIHZhbHVlXTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCgpIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBmbHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfSxcblxuICAgIGNvdW50OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBlbnRyeSA9IGNhY2hlW2tleV07XG4gICAgICByZXR1cm4gZW50cnkgPyBlbnRyeS50b3RhbCA6IDA7XG4gICAgfSxcblxuICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xuICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICAgIH0sXG5cbiAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICghY2FjaGVba2V5XSkge1xuICAgICAgICBjYWNoZVtrZXldID0geyB0b3RhbDogMSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldLnRvdGFsKys7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vLyB3ZSBkbyBub3QgcmVhc3NpZ24gYW4gYWxyZWFkeSBwcmVzZW50IHN0eWxlIHZhbHVlIHNpbmNlXG4vLyBpZiB3ZSBkZXRlY3QgdGhlIHN0eWxlIHByb3BlcnR5IHZhbHVlIGFnYWluIHdlIG1heSBiZVxuLy8gZGV0ZWN0aW5nIHN0eWxlcyB0aGF0IHdlcmUgYWRkZWQgdmlhIHRoZSBgZnJvbWAgc3R5bGVzLlxuLy8gV2UgbWFrZSB1c2Ugb2YgYGlzRGVmaW5lZGAgaGVyZSBzaW5jZSBhbiBlbXB0eSBzdHJpbmdcbi8vIG9yIG51bGwgdmFsdWUgKHdoaWNoIGlzIHdoYXQgZ2V0UHJvcGVydHlWYWx1ZSB3aWxsIHJldHVyblxuLy8gZm9yIGEgbm9uLWV4aXN0aW5nIHN0eWxlKSB3aWxsIHN0aWxsIGJlIG1hcmtlZCBhcyBhIHZhbGlkXG4vLyB2YWx1ZSBmb3IgdGhlIHN0eWxlIChhIGZhbHN5IHZhbHVlIGltcGxpZXMgdGhhdCB0aGUgc3R5bGVcbi8vIGlzIHRvIGJlIHJlbW92ZWQgYXQgdGhlIGVuZCBvZiB0aGUgYW5pbWF0aW9uKS4gSWYgd2UgaGFkIGEgc2ltcGxlXG4vLyBcIk9SXCIgc3RhdGVtZW50IHRoZW4gaXQgd291bGQgbm90IGJlIGVub3VnaCB0byBjYXRjaCB0aGF0LlxuZnVuY3Rpb24gcmVnaXN0ZXJSZXN0b3JhYmxlU3R5bGVzKGJhY2t1cCwgbm9kZSwgcHJvcGVydGllcykge1xuICBmb3JFYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3ApIHtcbiAgICBiYWNrdXBbcHJvcF0gPSBpc0RlZmluZWQoYmFja3VwW3Byb3BdKVxuICAgICAgICA/IGJhY2t1cFtwcm9wXVxuICAgICAgICA6IG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSk7XG59XG5cbnZhciAkQW5pbWF0ZUNzc1Byb3ZpZGVyID0gWyckYW5pbWF0ZVByb3ZpZGVyJywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcbiAgdmFyIGdjc0xvb2t1cCA9IGNyZWF0ZUxvY2FsQ2FjaGVMb29rdXAoKTtcbiAgdmFyIGdjc1N0YWdnZXJMb29rdXAgPSBjcmVhdGVMb2NhbENhY2hlTG9va3VwKCk7XG5cbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyQkanFMaXRlJywgJyQkQW5pbWF0ZVJ1bm5lcicsICckdGltZW91dCcsXG4gICAgICAgICAgICAgICAnJCRmb3JjZVJlZmxvdycsICckc25pZmZlcicsICckJHJBRlNjaGVkdWxlcicsICckJGFuaW1hdGVRdWV1ZScsXG4gICAgICAgZnVuY3Rpb24oJHdpbmRvdywgICAkJGpxTGl0ZSwgICAkJEFuaW1hdGVSdW5uZXIsICAgJHRpbWVvdXQsXG4gICAgICAgICAgICAgICAgJCRmb3JjZVJlZmxvdywgICAkc25pZmZlciwgICAkJHJBRlNjaGVkdWxlciwgJCRhbmltYXRlUXVldWUpIHtcblxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcblxuICAgIHZhciBwYXJlbnRDb3VudGVyID0gMDtcbiAgICBmdW5jdGlvbiBnY3NIYXNoRm4obm9kZSwgZXh0cmFDbGFzc2VzKSB7XG4gICAgICB2YXIgS0VZID0gJyQkbmdBbmltYXRlUGFyZW50S2V5JztcbiAgICAgIHZhciBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBhcmVudElEID0gcGFyZW50Tm9kZVtLRVldIHx8IChwYXJlbnROb2RlW0tFWV0gPSArK3BhcmVudENvdW50ZXIpO1xuICAgICAgcmV0dXJuIHBhcmVudElEICsgJy0nICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgKyAnLScgKyBleHRyYUNsYXNzZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUNhY2hlZENzc1N0eWxlcyhub2RlLCBjbGFzc05hbWUsIGNhY2hlS2V5LCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgdGltaW5ncyA9IGdjc0xvb2t1cC5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICBpZiAoIXRpbWluZ3MpIHtcbiAgICAgICAgdGltaW5ncyA9IGNvbXB1dGVDc3NTdHlsZXMoJHdpbmRvdywgbm9kZSwgcHJvcGVydGllcyk7XG4gICAgICAgIGlmICh0aW1pbmdzLmFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50ID09PSAnaW5maW5pdGUnKSB7XG4gICAgICAgICAgdGltaW5ncy5hbmltYXRpb25JdGVyYXRpb25Db3VudCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gd2Uga2VlcCBwdXR0aW5nIHRoaXMgaW4gbXVsdGlwbGUgdGltZXMgZXZlbiB0aG91Z2ggdGhlIHZhbHVlIGFuZCB0aGUgY2FjaGVLZXkgYXJlIHRoZSBzYW1lXG4gICAgICAvLyBiZWNhdXNlIHdlJ3JlIGtlZXBpbmcgYW4gaW50ZXJuYWwgdGFsbHkgb2YgaG93IG1hbnkgZHVwbGljYXRlIGFuaW1hdGlvbnMgYXJlIGRldGVjdGVkLlxuICAgICAgZ2NzTG9va3VwLnB1dChjYWNoZUtleSwgdGltaW5ncyk7XG4gICAgICByZXR1cm4gdGltaW5ncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlQ2FjaGVkQ3NzU3RhZ2dlclN0eWxlcyhub2RlLCBjbGFzc05hbWUsIGNhY2hlS2V5LCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgc3RhZ2dlcjtcblxuICAgICAgLy8gaWYgd2UgaGF2ZSBvbmUgb3IgbW9yZSBleGlzdGluZyBtYXRjaGVzIG9mIG1hdGNoaW5nIGVsZW1lbnRzXG4gICAgICAvLyBjb250YWluaW5nIHRoZSBzYW1lIHBhcmVudCArIENTUyBzdHlsZXMgKHdoaWNoIGlzIGhvdyBjYWNoZUtleSB3b3JrcylcbiAgICAgIC8vIHRoZW4gc3RhZ2dlcmluZyBpcyBwb3NzaWJsZVxuICAgICAgaWYgKGdjc0xvb2t1cC5jb3VudChjYWNoZUtleSkgPiAwKSB7XG4gICAgICAgIHN0YWdnZXIgPSBnY3NTdGFnZ2VyTG9va3VwLmdldChjYWNoZUtleSk7XG5cbiAgICAgICAgaWYgKCFzdGFnZ2VyKSB7XG4gICAgICAgICAgdmFyIHN0YWdnZXJDbGFzc05hbWUgPSBwZW5kQ2xhc3NlcyhjbGFzc05hbWUsICctc3RhZ2dlcicpO1xuXG4gICAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3Mobm9kZSwgc3RhZ2dlckNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdGFnZ2VyID0gY29tcHV0ZUNzc1N0eWxlcygkd2luZG93LCBub2RlLCBwcm9wZXJ0aWVzKTtcblxuICAgICAgICAgIC8vIGZvcmNlIHRoZSBjb252ZXJzaW9uIG9mIGEgbnVsbCB2YWx1ZSB0byB6ZXJvIGluY2FzZSBub3Qgc2V0XG4gICAgICAgICAgc3RhZ2dlci5hbmltYXRpb25EdXJhdGlvbiA9IE1hdGgubWF4KHN0YWdnZXIuYW5pbWF0aW9uRHVyYXRpb24sIDApO1xuICAgICAgICAgIHN0YWdnZXIudHJhbnNpdGlvbkR1cmF0aW9uID0gTWF0aC5tYXgoc3RhZ2dlci50cmFuc2l0aW9uRHVyYXRpb24sIDApO1xuXG4gICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3Mobm9kZSwgc3RhZ2dlckNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBnY3NTdGFnZ2VyTG9va3VwLnB1dChjYWNoZUtleSwgc3RhZ2dlcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YWdnZXIgfHwge307XG4gICAgfVxuXG4gICAgdmFyIHJhZldhaXRRdWV1ZSA9IFtdO1xuICAgIGZ1bmN0aW9uIHdhaXRVbnRpbFF1aWV0KGNhbGxiYWNrKSB7XG4gICAgICByYWZXYWl0UXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgICAkJHJBRlNjaGVkdWxlci53YWl0VW50aWxRdWlldChmdW5jdGlvbigpIHtcbiAgICAgICAgZ2NzTG9va3VwLmZsdXNoKCk7XG4gICAgICAgIGdjc1N0YWdnZXJMb29rdXAuZmx1c2goKTtcblxuICAgICAgICAvLyBETyBOT1QgUkVNT1ZFIFRISVMgTElORSBPUiBSRUZBQ1RPUiBPVVQgVEhFIGBwYWdlV2lkdGhgIHZhcmlhYmxlLlxuICAgICAgICAvLyBQTEVBU0UgRVhBTUlORSBUSEUgYCQkZm9yY2VSZWZsb3dgIHNlcnZpY2UgdG8gdW5kZXJzdGFuZCB3aHkuXG4gICAgICAgIHZhciBwYWdlV2lkdGggPSAkJGZvcmNlUmVmbG93KCk7XG5cbiAgICAgICAgLy8gd2UgdXNlIGEgZm9yIGxvb3AgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHF1ZXVlIGlzIGNoYW5nZWRcbiAgICAgICAgLy8gZHVyaW5nIHRoaXMgbG9vcGluZyB0aGVuIGl0IHdpbGwgY29uc2lkZXIgbmV3IHJlcXVlc3RzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFmV2FpdFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcmFmV2FpdFF1ZXVlW2ldKHBhZ2VXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmFmV2FpdFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlVGltaW5ncyhub2RlLCBjbGFzc05hbWUsIGNhY2hlS2V5KSB7XG4gICAgICB2YXIgdGltaW5ncyA9IGNvbXB1dGVDYWNoZWRDc3NTdHlsZXMobm9kZSwgY2xhc3NOYW1lLCBjYWNoZUtleSwgREVURUNUX0NTU19QUk9QRVJUSUVTKTtcbiAgICAgIHZhciBhRCA9IHRpbWluZ3MuYW5pbWF0aW9uRGVsYXk7XG4gICAgICB2YXIgdEQgPSB0aW1pbmdzLnRyYW5zaXRpb25EZWxheTtcbiAgICAgIHRpbWluZ3MubWF4RGVsYXkgPSBhRCAmJiB0RFxuICAgICAgICAgID8gTWF0aC5tYXgoYUQsIHREKVxuICAgICAgICAgIDogKGFEIHx8IHREKTtcbiAgICAgIHRpbWluZ3MubWF4RHVyYXRpb24gPSBNYXRoLm1heChcbiAgICAgICAgICB0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uICogdGltaW5ncy5hbmltYXRpb25JdGVyYXRpb25Db3VudCxcbiAgICAgICAgICB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbik7XG5cbiAgICAgIHJldHVybiB0aW1pbmdzO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBpbml0KGVsZW1lbnQsIGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAvLyBhbGwgb2YgdGhlIGFuaW1hdGlvbiBmdW5jdGlvbnMgc2hvdWxkIGNyZWF0ZVxuICAgICAgLy8gYSBjb3B5IG9mIHRoZSBvcHRpb25zIGRhdGEsIGhvd2V2ZXIsIGlmIGFcbiAgICAgIC8vIHBhcmVudCBzZXJ2aWNlIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBjb3B5IHRoZW5cbiAgICAgIC8vIHdlIHNob3VsZCBzdGljayB0byB1c2luZyB0aGF0XG4gICAgICB2YXIgb3B0aW9ucyA9IGluaXRpYWxPcHRpb25zIHx8IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLiQkcHJlcGFyZWQpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKGNvcHkob3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdG9yZVN0eWxlcyA9IHt9O1xuICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xuICAgICAgaWYgKCFub2RlXG4gICAgICAgICAgfHwgIW5vZGUucGFyZW50Tm9kZVxuICAgICAgICAgIHx8ICEkJGFuaW1hdGVRdWV1ZS5lbmFibGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIGNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZW1wb3JhcnlTdHlsZXMgPSBbXTtcbiAgICAgIHZhciBjbGFzc2VzID0gZWxlbWVudC5hdHRyKCdjbGFzcycpO1xuICAgICAgdmFyIHN0eWxlcyA9IHBhY2thZ2VTdHlsZXMob3B0aW9ucyk7XG4gICAgICB2YXIgYW5pbWF0aW9uQ2xvc2VkO1xuICAgICAgdmFyIGFuaW1hdGlvblBhdXNlZDtcbiAgICAgIHZhciBhbmltYXRpb25Db21wbGV0ZWQ7XG4gICAgICB2YXIgcnVubmVyO1xuICAgICAgdmFyIHJ1bm5lckhvc3Q7XG4gICAgICB2YXIgbWF4RGVsYXk7XG4gICAgICB2YXIgbWF4RGVsYXlUaW1lO1xuICAgICAgdmFyIG1heER1cmF0aW9uO1xuICAgICAgdmFyIG1heER1cmF0aW9uVGltZTtcbiAgICAgIHZhciBzdGFydFRpbWU7XG4gICAgICB2YXIgZXZlbnRzID0gW107XG5cbiAgICAgIGlmIChvcHRpb25zLmR1cmF0aW9uID09PSAwIHx8ICghJHNuaWZmZXIuYW5pbWF0aW9ucyAmJiAhJHNuaWZmZXIudHJhbnNpdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBjbG9zZUFuZFJldHVybk5vb3BBbmltYXRvcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5ldmVudCAmJiBpc0FycmF5KG9wdGlvbnMuZXZlbnQpXG4gICAgICAgICAgICA/IG9wdGlvbnMuZXZlbnQuam9pbignICcpXG4gICAgICAgICAgICA6IG9wdGlvbnMuZXZlbnQ7XG5cbiAgICAgIHZhciBpc1N0cnVjdHVyYWwgPSBtZXRob2QgJiYgb3B0aW9ucy5zdHJ1Y3R1cmFsO1xuICAgICAgdmFyIHN0cnVjdHVyYWxDbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBhZGRSZW1vdmVDbGFzc05hbWUgPSAnJztcblxuICAgICAgaWYgKGlzU3RydWN0dXJhbCkge1xuICAgICAgICBzdHJ1Y3R1cmFsQ2xhc3NOYW1lID0gcGVuZENsYXNzZXMobWV0aG9kLCBFVkVOVF9DTEFTU19QUkVGSVgsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgICAgc3RydWN0dXJhbENsYXNzTmFtZSA9IG1ldGhvZDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcbiAgICAgICAgYWRkUmVtb3ZlQ2xhc3NOYW1lICs9IHBlbmRDbGFzc2VzKG9wdGlvbnMuYWRkQ2xhc3MsIEFERF9DTEFTU19TVUZGSVgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgICAgICBpZiAoYWRkUmVtb3ZlQ2xhc3NOYW1lLmxlbmd0aCkge1xuICAgICAgICAgIGFkZFJlbW92ZUNsYXNzTmFtZSArPSAnICc7XG4gICAgICAgIH1cbiAgICAgICAgYWRkUmVtb3ZlQ2xhc3NOYW1lICs9IHBlbmRDbGFzc2VzKG9wdGlvbnMucmVtb3ZlQ2xhc3MsIFJFTU9WRV9DTEFTU19TVUZGSVgpO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGVyZSBtYXkgYmUgYSBzaXR1YXRpb24gd2hlcmUgYSBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiBpcyBjb21iaW5lZCB0b2dldGhlclxuICAgICAgLy8gd2l0aCBDU1MgY2xhc3NlcyB0aGF0IG5lZWQgdG8gcmVzb2x2ZSBiZWZvcmUgdGhlIGFuaW1hdGlvbiBpcyBjb21wdXRlZC5cbiAgICAgIC8vIEhvd2V2ZXIgdGhpcyBtZWFucyB0aGF0IHRoZXJlIGlzIG5vIGV4cGxpY2l0IENTUyBjb2RlIHRvIGJsb2NrIHRoZSBhbmltYXRpb25cbiAgICAgIC8vIGZyb20gaGFwcGVuaW5nIChieSBzZXR0aW5nIDBzIG5vbmUgaW4gdGhlIGNsYXNzIG5hbWUpLiBJZiB0aGlzIGlzIHRoZSBjYXNlXG4gICAgICAvLyB3ZSBuZWVkIHRvIGFwcGx5IHRoZSBjbGFzc2VzIGJlZm9yZSB0aGUgZmlyc3QgckFGIHNvIHdlIGtub3cgdG8gY29udGludWUgaWZcbiAgICAgIC8vIHRoZXJlIGFjdHVhbGx5IGlzIGEgZGV0ZWN0ZWQgdHJhbnNpdGlvbiBvciBrZXlmcmFtZSBhbmltYXRpb25cbiAgICAgIGlmIChvcHRpb25zLmFwcGx5Q2xhc3Nlc0Vhcmx5ICYmIGFkZFJlbW92ZUNsYXNzTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlcGFyYXRpb25DbGFzc2VzID0gW3N0cnVjdHVyYWxDbGFzc05hbWUsIGFkZFJlbW92ZUNsYXNzTmFtZV0uam9pbignICcpLnRyaW0oKTtcbiAgICAgIHZhciBmdWxsQ2xhc3NOYW1lID0gY2xhc3NlcyArICcgJyArIHByZXBhcmF0aW9uQ2xhc3NlcztcbiAgICAgIHZhciBhY3RpdmVDbGFzc2VzID0gcGVuZENsYXNzZXMocHJlcGFyYXRpb25DbGFzc2VzLCBBQ1RJVkVfQ0xBU1NfU1VGRklYKTtcbiAgICAgIHZhciBoYXNUb1N0eWxlcyA9IHN0eWxlcy50byAmJiBPYmplY3Qua2V5cyhzdHlsZXMudG8pLmxlbmd0aCA+IDA7XG4gICAgICB2YXIgY29udGFpbnNLZXlmcmFtZUFuaW1hdGlvbiA9IChvcHRpb25zLmtleWZyYW1lU3R5bGUgfHwgJycpLmxlbmd0aCA+IDA7XG5cbiAgICAgIC8vIHRoZXJlIGlzIG5vIHdheSB3ZSBjYW4gdHJpZ2dlciBhbiBhbmltYXRpb24gaWYgbm8gc3R5bGVzIGFuZFxuICAgICAgLy8gbm8gY2xhc3NlcyBhcmUgYmVpbmcgYXBwbGllZCB3aGljaCB3b3VsZCB0aGVuIHRyaWdnZXIgYSB0cmFuc2l0aW9uLFxuICAgICAgLy8gdW5sZXNzIHRoZXJlIGEgaXMgcmF3IGtleWZyYW1lIHZhbHVlIHRoYXQgaXMgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgIGlmICghY29udGFpbnNLZXlmcmFtZUFuaW1hdGlvblxuICAgICAgICAgICAmJiAhaGFzVG9TdHlsZXNcbiAgICAgICAgICAgJiYgIXByZXBhcmF0aW9uQ2xhc3Nlcykge1xuICAgICAgICByZXR1cm4gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhY2hlS2V5LCBzdGFnZ2VyO1xuICAgICAgaWYgKG9wdGlvbnMuc3RhZ2dlciA+IDApIHtcbiAgICAgICAgdmFyIHN0YWdnZXJWYWwgPSBwYXJzZUZsb2F0KG9wdGlvbnMuc3RhZ2dlcik7XG4gICAgICAgIHN0YWdnZXIgPSB7XG4gICAgICAgICAgdHJhbnNpdGlvbkRlbGF5OiBzdGFnZ2VyVmFsLFxuICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBzdGFnZ2VyVmFsLFxuICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogMCxcbiAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogMFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVLZXkgPSBnY3NIYXNoRm4obm9kZSwgZnVsbENsYXNzTmFtZSk7XG4gICAgICAgIHN0YWdnZXIgPSBjb21wdXRlQ2FjaGVkQ3NzU3RhZ2dlclN0eWxlcyhub2RlLCBwcmVwYXJhdGlvbkNsYXNzZXMsIGNhY2hlS2V5LCBERVRFQ1RfU1RBR0dFUl9DU1NfUFJPUEVSVElFUyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy4kJHNraXBQcmVwYXJhdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxlbWVudCwgcHJlcGFyYXRpb25DbGFzc2VzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFwcGx5T25seUR1cmF0aW9uO1xuXG4gICAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uU3R5bGUpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IFtUUkFOU0lUSU9OX1BST1AsIG9wdGlvbnMudHJhbnNpdGlvblN0eWxlXTtcbiAgICAgICAgYXBwbHlJbmxpbmVTdHlsZShub2RlLCB0cmFuc2l0aW9uU3R5bGUpO1xuICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaCh0cmFuc2l0aW9uU3R5bGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5kdXJhdGlvbiA+PSAwKSB7XG4gICAgICAgIGFwcGx5T25seUR1cmF0aW9uID0gbm9kZS5zdHlsZVtUUkFOU0lUSU9OX1BST1BdLmxlbmd0aCA+IDA7XG4gICAgICAgIHZhciBkdXJhdGlvblN0eWxlID0gZ2V0Q3NzVHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUob3B0aW9ucy5kdXJhdGlvbiwgYXBwbHlPbmx5RHVyYXRpb24pO1xuXG4gICAgICAgIC8vIHdlIHNldCB0aGUgZHVyYXRpb24gc28gdGhhdCBpdCB3aWxsIGJlIHBpY2tlZCB1cCBieSBnZXRDb21wdXRlZFN0eWxlIGxhdGVyXG4gICAgICAgIGFwcGx5SW5saW5lU3R5bGUobm9kZSwgZHVyYXRpb25TdHlsZSk7XG4gICAgICAgIHRlbXBvcmFyeVN0eWxlcy5wdXNoKGR1cmF0aW9uU3R5bGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5rZXlmcmFtZVN0eWxlKSB7XG4gICAgICAgIHZhciBrZXlmcmFtZVN0eWxlID0gW0FOSU1BVElPTl9QUk9QLCBvcHRpb25zLmtleWZyYW1lU3R5bGVdO1xuICAgICAgICBhcHBseUlubGluZVN0eWxlKG5vZGUsIGtleWZyYW1lU3R5bGUpO1xuICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChrZXlmcmFtZVN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW1JbmRleCA9IHN0YWdnZXJcbiAgICAgICAgICA/IG9wdGlvbnMuc3RhZ2dlckluZGV4ID49IDBcbiAgICAgICAgICAgICAgPyBvcHRpb25zLnN0YWdnZXJJbmRleFxuICAgICAgICAgICAgICA6IGdjc0xvb2t1cC5jb3VudChjYWNoZUtleSlcbiAgICAgICAgICA6IDA7XG5cbiAgICAgIHZhciBpc0ZpcnN0ID0gaXRlbUluZGV4ID09PSAwO1xuXG4gICAgICAvLyB0aGlzIGlzIGEgcHJlLWVtcHRpdmUgd2F5IG9mIGZvcmNpbmcgdGhlIHNldHVwIGNsYXNzZXMgdG8gYmUgYWRkZWQgYW5kIGFwcGxpZWQgSU5TVEFOVExZXG4gICAgICAvLyB3aXRob3V0IGNhdXNpbmcgYW55IGNvbWJpbmF0aW9uIG9mIHRyYW5zaXRpb25zIHRvIGtpY2sgaW4uIEJ5IGFkZGluZyBhIG5lZ2F0aXZlIGRlbGF5IHZhbHVlXG4gICAgICAvLyBpdCBmb3JjZXMgdGhlIHNldHVwIGNsYXNzJyB0cmFuc2l0aW9uIHRvIGVuZCBpbW1lZGlhdGVseS4gV2UgbGF0ZXIgdGhlbiByZW1vdmUgdGhlIG5lZ2F0aXZlXG4gICAgICAvLyB0cmFuc2l0aW9uIGRlbGF5IHRvIGFsbG93IGZvciB0aGUgdHJhbnNpdGlvbiB0byBuYXR1cmFsbHkgZG8gaXQncyB0aGluZy4gVGhlIGJlYXV0eSBoZXJlIGlzXG4gICAgICAvLyB0aGF0IGlmIHRoZXJlIGlzIG5vIHRyYW5zaXRpb24gZGVmaW5lZCB0aGVuIG5vdGhpbmcgd2lsbCBoYXBwZW4gYW5kIHRoaXMgd2lsbCBhbHNvIGFsbG93XG4gICAgICAvLyBvdGhlciB0cmFuc2l0aW9ucyB0byBiZSBzdGFja2VkIG9uIHRvcCBvZiBlYWNoIG90aGVyIHdpdGhvdXQgYW55IGNob3BwaW5nIHRoZW0gb3V0LlxuICAgICAgaWYgKGlzRmlyc3QgJiYgIW9wdGlvbnMuc2tpcEJsb2NraW5nKSB7XG4gICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgU0FGRV9GQVNUX0ZPUldBUkRfRFVSQVRJT05fVkFMVUUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltaW5ncyA9IGNvbXB1dGVUaW1pbmdzKG5vZGUsIGZ1bGxDbGFzc05hbWUsIGNhY2hlS2V5KTtcbiAgICAgIHZhciByZWxhdGl2ZURlbGF5ID0gdGltaW5ncy5tYXhEZWxheTtcbiAgICAgIG1heERlbGF5ID0gTWF0aC5tYXgocmVsYXRpdmVEZWxheSwgMCk7XG4gICAgICBtYXhEdXJhdGlvbiA9IHRpbWluZ3MubWF4RHVyYXRpb247XG5cbiAgICAgIHZhciBmbGFncyA9IHt9O1xuICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbnMgICAgICAgICAgPSB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA+IDA7XG4gICAgICBmbGFncy5oYXNBbmltYXRpb25zICAgICAgICAgICA9IHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPiAwO1xuICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbkFsbCAgICAgICAgPSBmbGFncy5oYXNUcmFuc2l0aW9ucyAmJiB0aW1pbmdzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9PT0gJ2FsbCc7XG4gICAgICBmbGFncy5hcHBseVRyYW5zaXRpb25EdXJhdGlvbiA9IGhhc1RvU3R5bGVzICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZmxhZ3MuaGFzVHJhbnNpdGlvbnMgJiYgIWZsYWdzLmhhc1RyYW5zaXRpb25BbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IChmbGFncy5oYXNBbmltYXRpb25zICYmICFmbGFncy5oYXNUcmFuc2l0aW9ucykpO1xuICAgICAgZmxhZ3MuYXBwbHlBbmltYXRpb25EdXJhdGlvbiAgPSBvcHRpb25zLmR1cmF0aW9uICYmIGZsYWdzLmhhc0FuaW1hdGlvbnM7XG4gICAgICBmbGFncy5hcHBseVRyYW5zaXRpb25EZWxheSAgICA9IHRydXRoeVRpbWluZ1ZhbHVlKG9wdGlvbnMuZGVsYXkpICYmIChmbGFncy5hcHBseVRyYW5zaXRpb25EdXJhdGlvbiB8fCBmbGFncy5oYXNUcmFuc2l0aW9ucyk7XG4gICAgICBmbGFncy5hcHBseUFuaW1hdGlvbkRlbGF5ICAgICA9IHRydXRoeVRpbWluZ1ZhbHVlKG9wdGlvbnMuZGVsYXkpICYmIGZsYWdzLmhhc0FuaW1hdGlvbnM7XG4gICAgICBmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcyA9IGFkZFJlbW92ZUNsYXNzTmFtZS5sZW5ndGggPiAwO1xuXG4gICAgICBpZiAoZmxhZ3MuYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24gfHwgZmxhZ3MuYXBwbHlBbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgICBtYXhEdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gPyBwYXJzZUZsb2F0KG9wdGlvbnMuZHVyYXRpb24pIDogbWF4RHVyYXRpb247XG5cbiAgICAgICAgaWYgKGZsYWdzLmFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uID0gbWF4RHVyYXRpb247XG4gICAgICAgICAgYXBwbHlPbmx5RHVyYXRpb24gPSBub2RlLnN0eWxlW1RSQU5TSVRJT05fUFJPUCArIFBST1BFUlRZX0tFWV0ubGVuZ3RoID4gMDtcbiAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChnZXRDc3NUcmFuc2l0aW9uRHVyYXRpb25TdHlsZShtYXhEdXJhdGlvbiwgYXBwbHlPbmx5RHVyYXRpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmbGFncy5hcHBseUFuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgZmxhZ3MuaGFzQW5pbWF0aW9ucyA9IHRydWU7XG4gICAgICAgICAgdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiA9IG1heER1cmF0aW9uO1xuICAgICAgICAgIHRlbXBvcmFyeVN0eWxlcy5wdXNoKGdldENzc0tleWZyYW1lRHVyYXRpb25TdHlsZShtYXhEdXJhdGlvbikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXhEdXJhdGlvbiA9PT0gMCAmJiAhZmxhZ3MucmVjYWxjdWxhdGVUaW1pbmdTdHlsZXMpIHtcbiAgICAgICAgcmV0dXJuIGNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRlbGF5ICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGRlbGF5U3R5bGU7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZWxheSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZGVsYXlTdHlsZSA9IHBhcnNlRmxvYXQob3B0aW9ucy5kZWxheSk7XG4gICAgICAgICAgLy8gbnVtYmVyIGluIG9wdGlvbnMuZGVsYXkgbWVhbnMgd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGUgZGVsYXkgZm9yIHRoZSBjbG9zaW5nIHRpbWVvdXRcbiAgICAgICAgICBtYXhEZWxheSA9IE1hdGgubWF4KGRlbGF5U3R5bGUsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZsYWdzLmFwcGx5VHJhbnNpdGlvbkRlbGF5KSB7XG4gICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZ2V0Q3NzRGVsYXlTdHlsZShkZWxheVN0eWxlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmxhZ3MuYXBwbHlBbmltYXRpb25EZWxheSkge1xuICAgICAgICAgIHRlbXBvcmFyeVN0eWxlcy5wdXNoKGdldENzc0RlbGF5U3R5bGUoZGVsYXlTdHlsZSwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgdGhlIGRlbGF5IHZhbHVlIHNpbmNlIHdlIHVzZWQgYSBwcmUtZW1wdGl2ZSBuZWdhdGl2ZVxuICAgICAgLy8gZGVsYXkgdmFsdWUgYW5kIHRoZSBkZWxheSB2YWx1ZSBpcyByZXF1aXJlZCBmb3IgdGhlIGZpbmFsIGV2ZW50IGNoZWNraW5nLiBUaGlzXG4gICAgICAvLyBwcm9wZXJ0eSB3aWxsIGVuc3VyZSB0aGF0IHRoaXMgd2lsbCBoYXBwZW4gYWZ0ZXIgdGhlIFJBRiBwaGFzZSBoYXMgcGFzc2VkLlxuICAgICAgaWYgKG9wdGlvbnMuZHVyYXRpb24gPT0gbnVsbCAmJiB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA+IDApIHtcbiAgICAgICAgZmxhZ3MucmVjYWxjdWxhdGVUaW1pbmdTdHlsZXMgPSBmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcyB8fCBpc0ZpcnN0O1xuICAgICAgfVxuXG4gICAgICBtYXhEZWxheVRpbWUgPSBtYXhEZWxheSAqIE9ORV9TRUNPTkQ7XG4gICAgICBtYXhEdXJhdGlvblRpbWUgPSBtYXhEdXJhdGlvbiAqIE9ORV9TRUNPTkQ7XG4gICAgICBpZiAoIW9wdGlvbnMuc2tpcEJsb2NraW5nKSB7XG4gICAgICAgIGZsYWdzLmJsb2NrVHJhbnNpdGlvbiA9IHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uID4gMDtcbiAgICAgICAgZmxhZ3MuYmxvY2tLZXlmcmFtZUFuaW1hdGlvbiA9IHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFnZ2VyLmFuaW1hdGlvbkRlbGF5ID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2dlci5hbmltYXRpb25EdXJhdGlvbiA9PT0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgICBpZiAob3B0aW9ucy5jbGVhbnVwU3R5bGVzKSB7XG4gICAgICAgICAgcmVnaXN0ZXJSZXN0b3JhYmxlU3R5bGVzKHJlc3RvcmVTdHlsZXMsIG5vZGUsIE9iamVjdC5rZXlzKG9wdGlvbnMuZnJvbSkpO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5QW5pbWF0aW9uRnJvbVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsYWdzLmJsb2NrVHJhbnNpdGlvbiB8fCBmbGFncy5ibG9ja0tleWZyYW1lQW5pbWF0aW9uKSB7XG4gICAgICAgIGFwcGx5QmxvY2tpbmcobWF4RHVyYXRpb24pO1xuICAgICAgfSBlbHNlIGlmICghb3B0aW9ucy5za2lwQmxvY2tpbmcpIHtcbiAgICAgICAgYmxvY2tUcmFuc2l0aW9ucyhub2RlLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE8obWF0c2tvKTogZm9yIDEuNSBjaGFuZ2UgdGhpcyBjb2RlIHRvIGhhdmUgYW4gYW5pbWF0b3Igb2JqZWN0IGZvciBiZXR0ZXIgZGVidWdnaW5nXG4gICAgICByZXR1cm4ge1xuICAgICAgICAkJHdpbGxBbmltYXRlOiB0cnVlLFxuICAgICAgICBlbmQ6IGVuZEZuLFxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkNsb3NlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgcnVubmVySG9zdCA9IHtcbiAgICAgICAgICAgIGVuZDogZW5kRm4sXG4gICAgICAgICAgICBjYW5jZWw6IGNhbmNlbEZuLFxuICAgICAgICAgICAgcmVzdW1lOiBudWxsLCAvL3RoaXMgd2lsbCBiZSBzZXQgZHVyaW5nIHRoZSBzdGFydCgpIHBoYXNlXG4gICAgICAgICAgICBwYXVzZTogbnVsbFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHJ1bm5lckhvc3QpO1xuXG4gICAgICAgICAgd2FpdFVudGlsUXVpZXQoc3RhcnQpO1xuXG4gICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gcGF1c2UvcmVzdW1lIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAvLyBzaW5jZSBpdCBoYXNuJ3QgcnVuIHlldC4gQW5pbWF0ZVJ1bm5lciB3aWxsIHRoZXJlZm9yZVxuICAgICAgICAgIC8vIHNldCBub29wIGZ1bmN0aW9ucyBmb3IgcmVzdW1lIGFuZCBwYXVzZSBhbmQgdGhleSB3aWxsXG4gICAgICAgICAgLy8gbGF0ZXIgYmUgb3ZlcnJpZGRlbiBvbmNlIHRoZSBhbmltYXRpb24gaXMgdHJpZ2dlcmVkXG4gICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gZW5kRm4oKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbEZuKCkge1xuICAgICAgICBjbG9zZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvc2UocmVqZWN0ZWQpIHtcbiAgICAgICAgLy8gaWYgdGhlIHByb21pc2UgaGFzIGJlZW4gY2FsbGVkIGFscmVhZHkgdGhlbiB3ZSBzaG91bGRuJ3QgY2xvc2VcbiAgICAgICAgLy8gdGhlIGFuaW1hdGlvbiBhZ2FpblxuICAgICAgICBpZiAoYW5pbWF0aW9uQ2xvc2VkIHx8IChhbmltYXRpb25Db21wbGV0ZWQgJiYgYW5pbWF0aW9uUGF1c2VkKSkgcmV0dXJuO1xuICAgICAgICBhbmltYXRpb25DbG9zZWQgPSB0cnVlO1xuICAgICAgICBhbmltYXRpb25QYXVzZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuJCRza2lwUHJlcGFyYXRpb25DbGFzc2VzKSB7XG4gICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgcHJlcGFyYXRpb25DbGFzc2VzKTtcbiAgICAgICAgfVxuICAgICAgICAkJGpxTGl0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBhY3RpdmVDbGFzc2VzKTtcblxuICAgICAgICBibG9ja0tleWZyYW1lQW5pbWF0aW9ucyhub2RlLCBmYWxzZSk7XG4gICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgZmFsc2UpO1xuXG4gICAgICAgIGZvckVhY2godGVtcG9yYXJ5U3R5bGVzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgIC8vIFRoZXJlIGlzIG9ubHkgb25lIHdheSB0byByZW1vdmUgaW5saW5lIHN0eWxlIHByb3BlcnRpZXMgZW50aXJlbHkgZnJvbSBlbGVtZW50cy5cbiAgICAgICAgICAvLyBCeSB1c2luZyBgcmVtb3ZlUHJvcGVydHlgIHRoaXMgd29ya3MsIGJ1dCB3ZSBuZWVkIHRvIGNvbnZlcnQgY2FtZWwtY2FzZWQgQ1NTXG4gICAgICAgICAgLy8gc3R5bGVzIGRvd24gdG8gaHlwaGVuYXRlZCB2YWx1ZXMuXG4gICAgICAgICAgbm9kZS5zdHlsZVtlbnRyeVswXV0gPSAnJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMocmVzdG9yZVN0eWxlcykubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yRWFjaChyZXN0b3JlU3R5bGVzLCBmdW5jdGlvbih2YWx1ZSwgcHJvcCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSByZWFzb24gd2h5IHdlIGhhdmUgdGhpcyBvcHRpb24gaXMgdG8gYWxsb3cgYSBzeW5jaHJvbm91cyBjbG9zaW5nIGNhbGxiYWNrXG4gICAgICAgIC8vIHRoYXQgaXMgZmlyZWQgYXMgU09PTiBhcyB0aGUgYW5pbWF0aW9uIGVuZHMgKHdoZW4gdGhlIENTUyBpcyByZW1vdmVkKSBvciBpZlxuICAgICAgICAvLyB0aGUgYW5pbWF0aW9uIG5ldmVyIHRha2VzIG9mZiBhdCBhbGwuIEEgZ29vZCBleGFtcGxlIGlzIGEgbGVhdmUgYW5pbWF0aW9uIHNpbmNlXG4gICAgICAgIC8vIHRoZSBlbGVtZW50IG11c3QgYmUgcmVtb3ZlZCBqdXN0IGFmdGVyIHRoZSBhbmltYXRpb24gaXMgb3ZlciBvciBlbHNlIHRoZSBlbGVtZW50XG4gICAgICAgIC8vIHdpbGwgYXBwZWFyIG9uIHNjcmVlbiBmb3Igb25lIGFuaW1hdGlvbiBmcmFtZSBjYXVzaW5nIGFuIG92ZXJiZWFyaW5nIGZsaWNrZXIuXG4gICAgICAgIGlmIChvcHRpb25zLm9uRG9uZSkge1xuICAgICAgICAgIG9wdGlvbnMub25Eb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIHRyYW5zaXRpb25lbmQgLyBhbmltYXRpb25lbmQgbGlzdGVuZXIocylcbiAgICAgICAgICBlbGVtZW50Lm9mZihldmVudHMuam9pbignICcpLCBvbkFuaW1hdGlvblByb2dyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQ2FuY2VsIHRoZSBmYWxsYmFjayBjbG9zaW5nIHRpbWVvdXQgYW5kIHJlbW92ZSB0aGUgdGltZXIgZGF0YVxuICAgICAgICB2YXIgYW5pbWF0aW9uVGltZXJEYXRhID0gZWxlbWVudC5kYXRhKEFOSU1BVEVfVElNRVJfS0VZKTtcbiAgICAgICAgaWYgKGFuaW1hdGlvblRpbWVyRGF0YSkge1xuICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChhbmltYXRpb25UaW1lckRhdGFbMF0udGltZXIpO1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShBTklNQVRFX1RJTUVSX0tFWSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGUgcHJlcGFyYXRpb24gZnVuY3Rpb24gZmFpbHMgdGhlbiB0aGUgcHJvbWlzZSBpcyBub3Qgc2V0dXBcbiAgICAgICAgaWYgKHJ1bm5lcikge1xuICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSghcmVqZWN0ZWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGx5QmxvY2tpbmcoZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGZsYWdzLmJsb2NrVHJhbnNpdGlvbikge1xuICAgICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgZHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZsYWdzLmJsb2NrS2V5ZnJhbWVBbmltYXRpb24pIHtcbiAgICAgICAgICBibG9ja0tleWZyYW1lQW5pbWF0aW9ucyhub2RlLCAhIWR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbG9zZUFuZFJldHVybk5vb3BBbmltYXRvcigpIHtcbiAgICAgICAgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcih7XG4gICAgICAgICAgZW5kOiBlbmRGbixcbiAgICAgICAgICBjYW5jZWw6IGNhbmNlbEZuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNob3VsZCBmbHVzaCB0aGUgY2FjaGUgYW5pbWF0aW9uXG4gICAgICAgIHdhaXRVbnRpbFF1aWV0KG5vb3ApO1xuICAgICAgICBjbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgJCR3aWxsQW5pbWF0ZTogZmFsc2UsXG4gICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuZDogZW5kRm5cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyIGV2ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudDtcblxuICAgICAgICAvLyB3ZSBub3cgYWx3YXlzIHVzZSBgRGF0ZS5ub3coKWAgZHVlIHRvIHRoZSByZWNlbnQgY2hhbmdlcyB3aXRoXG4gICAgICAgIC8vIGV2ZW50LnRpbWVTdGFtcCBpbiBGaXJlZm94LCBXZWJraXQgYW5kIENocm9tZSAoc2VlICMxMzQ5NCBmb3IgbW9yZSBpbmZvKVxuICAgICAgICB2YXIgdGltZVN0YW1wID0gZXYuJG1hbnVhbFRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG4gICAgICAgIC8qIEZpcmVmb3ggKG9yIHBvc3NpYmx5IGp1c3QgR2Vja28pIGxpa2VzIHRvIG5vdCByb3VuZCB2YWx1ZXMgdXBcbiAgICAgICAgICogd2hlbiBhIG1zIG1lYXN1cmVtZW50IGlzIHVzZWQgZm9yIHRoZSBhbmltYXRpb24gKi9cbiAgICAgICAgdmFyIGVsYXBzZWRUaW1lID0gcGFyc2VGbG9hdChldi5lbGFwc2VkVGltZS50b0ZpeGVkKEVMQVBTRURfVElNRV9NQVhfREVDSU1BTF9QTEFDRVMpKTtcblxuICAgICAgICAvKiAkbWFudWFsVGltZVN0YW1wIGlzIGEgbW9ja2VkIHRpbWVTdGFtcCB2YWx1ZSB3aGljaCBpcyBzZXRcbiAgICAgICAgICogd2l0aGluIGJyb3dzZXJUcmlnZ2VyKCkuIFRoaXMgaXMgb25seSBoZXJlIHNvIHRoYXQgdGVzdHMgY2FuXG4gICAgICAgICAqIG1vY2sgYW5pbWF0aW9ucyBwcm9wZXJseS4gUmVhbCBldmVudHMgZmFsbGJhY2sgdG8gZXZlbnQudGltZVN0YW1wLFxuICAgICAgICAgKiBvciwgaWYgdGhleSBkb24ndCwgdGhlbiBhIHRpbWVTdGFtcCBpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgZm9yIHRoZW0uXG4gICAgICAgICAqIFdlJ3JlIGNoZWNraW5nIHRvIHNlZSBpZiB0aGUgdGltZVN0YW1wIHN1cnBhc3NlcyB0aGUgZXhwZWN0ZWQgZGVsYXksXG4gICAgICAgICAqIGJ1dCB3ZSdyZSB1c2luZyBlbGFwc2VkVGltZSBpbnN0ZWFkIG9mIHRoZSB0aW1lU3RhbXAgb24gdGhlIDJuZFxuICAgICAgICAgKiBwcmUtY29uZGl0aW9uIHNpbmNlIGFuaW1hdGlvblBhdXNlZHMgc29tZXRpbWVzIGNsb3NlIG9mZiBlYXJseSAqL1xuICAgICAgICBpZiAoTWF0aC5tYXgodGltZVN0YW1wIC0gc3RhcnRUaW1lLCAwKSA+PSBtYXhEZWxheVRpbWUgJiYgZWxhcHNlZFRpbWUgPj0gbWF4RHVyYXRpb24pIHtcbiAgICAgICAgICAvLyB3ZSBzZXQgdGhpcyBmbGFnIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSB0cmFuc2l0aW9uIGlzIHBhdXNlZCB0aGVuLCB3aGVuIHJlc3VtZWQsXG4gICAgICAgICAgLy8gdGhlIGFuaW1hdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xvc2UgaXRzZWxmIHNpbmNlIHRyYW5zaXRpb25zIGNhbm5vdCBiZSBwYXVzZWQuXG4gICAgICAgICAgYW5pbWF0aW9uQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uQ2xvc2VkKSByZXR1cm47XG4gICAgICAgIGlmICghbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBldmVuIHRob3VnaCB3ZSBvbmx5IHBhdXNlIGtleWZyYW1lIGFuaW1hdGlvbnMgaGVyZSB0aGUgcGF1c2UgZmxhZ1xuICAgICAgICAvLyB3aWxsIHN0aWxsIGhhcHBlbiB3aGVuIHRyYW5zaXRpb25zIGFyZSB1c2VkLiBPbmx5IHRoZSB0cmFuc2l0aW9uIHdpbGxcbiAgICAgICAgLy8gbm90IGJlIHBhdXNlZCBzaW5jZSB0aGF0IGlzIG5vdCBwb3NzaWJsZS4gSWYgdGhlIGFuaW1hdGlvbiBlbmRzIHdoZW5cbiAgICAgICAgLy8gcGF1c2VkIHRoZW4gaXQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdW5wYXVzZWQgb3IgY2FuY2VsbGVkLlxuICAgICAgICB2YXIgcGxheVBhdXNlID0gZnVuY3Rpb24ocGxheUFuaW1hdGlvbikge1xuICAgICAgICAgIGlmICghYW5pbWF0aW9uQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBhbmltYXRpb25QYXVzZWQgPSAhcGxheUFuaW1hdGlvbjtcbiAgICAgICAgICAgIGlmICh0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKG5vZGUsIGFuaW1hdGlvblBhdXNlZCk7XG4gICAgICAgICAgICAgIGlmIChhbmltYXRpb25QYXVzZWQpIHtcbiAgICAgICAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRnJvbUFycmF5KHRlbXBvcmFyeVN0eWxlcywgdmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhbmltYXRpb25QYXVzZWQgJiYgcGxheUFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uUGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBjaGVja2luZyB0aGUgc3RhZ2dlciBkdXJhdGlvbiBwcmV2ZW50cyBhbiBhY2NpZGVudGFsbHkgY2FzY2FkZSBvZiB0aGUgQ1NTIGRlbGF5IHN0eWxlXG4gICAgICAgIC8vIGJlaW5nIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQuIElmIHRoZSB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIHplcm8gdGhlbiB3ZSBjYW4gc2FmZWx5XG4gICAgICAgIC8vIHJlbHkgdGhhdCB0aGUgZGVsYXkgdmFsdWUgaXMgYW4gaW50ZW50aW9uYWwgc3RhZ2dlciBkZWxheSBzdHlsZS5cbiAgICAgICAgdmFyIG1heFN0YWdnZXIgPSBpdGVtSW5kZXggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiAmJiBzdGFnZ2VyLnRyYW5zaXRpb25EdXJhdGlvbiA9PT0gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiAmJiBzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uID09PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAmJiBNYXRoLm1heChzdGFnZ2VyLmFuaW1hdGlvbkRlbGF5LCBzdGFnZ2VyLnRyYW5zaXRpb25EZWxheSk7XG4gICAgICAgIGlmIChtYXhTdGFnZ2VyKSB7XG4gICAgICAgICAgJHRpbWVvdXQodHJpZ2dlckFuaW1hdGlvblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IobWF4U3RhZ2dlciAqIGl0ZW1JbmRleCAqIE9ORV9TRUNPTkQpLFxuICAgICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmlnZ2VyQW5pbWF0aW9uU3RhcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgd2lsbCBkZWNvcmF0ZSB0aGUgZXhpc3RpbmcgcHJvbWlzZSBydW5uZXIgd2l0aCBwYXVzZS9yZXN1bWUgbWV0aG9kc1xuICAgICAgICBydW5uZXJIb3N0LnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBsYXlQYXVzZSh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBydW5uZXJIb3N0LnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcGxheVBhdXNlKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyQW5pbWF0aW9uU3RhcnQoKSB7XG4gICAgICAgICAgLy8ganVzdCBpbmNhc2UgYSBzdGFnZ2VyIGFuaW1hdGlvbiBraWNrcyBpbiB3aGVuIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAvLyBpdHNlbGYgd2FzIGNhbmNlbGxlZCBlbnRpcmVseVxuICAgICAgICAgIGlmIChhbmltYXRpb25DbG9zZWQpIHJldHVybjtcblxuICAgICAgICAgIGFwcGx5QmxvY2tpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgZm9yRWFjaCh0ZW1wb3JhcnlTdHlsZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgIG5vZGUuc3R5bGVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIGFjdGl2ZUNsYXNzZXMpO1xuXG4gICAgICAgICAgaWYgKGZsYWdzLnJlY2FsY3VsYXRlVGltaW5nU3R5bGVzKSB7XG4gICAgICAgICAgICBmdWxsQ2xhc3NOYW1lID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgKyAnICcgKyBwcmVwYXJhdGlvbkNsYXNzZXM7XG4gICAgICAgICAgICBjYWNoZUtleSA9IGdjc0hhc2hGbihub2RlLCBmdWxsQ2xhc3NOYW1lKTtcblxuICAgICAgICAgICAgdGltaW5ncyA9IGNvbXB1dGVUaW1pbmdzKG5vZGUsIGZ1bGxDbGFzc05hbWUsIGNhY2hlS2V5KTtcbiAgICAgICAgICAgIHJlbGF0aXZlRGVsYXkgPSB0aW1pbmdzLm1heERlbGF5O1xuICAgICAgICAgICAgbWF4RGVsYXkgPSBNYXRoLm1heChyZWxhdGl2ZURlbGF5LCAwKTtcbiAgICAgICAgICAgIG1heER1cmF0aW9uID0gdGltaW5ncy5tYXhEdXJhdGlvbjtcblxuICAgICAgICAgICAgaWYgKG1heER1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbnMgPSB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA+IDA7XG4gICAgICAgICAgICBmbGFncy5oYXNBbmltYXRpb25zID0gdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiA+IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZsYWdzLmFwcGx5QW5pbWF0aW9uRGVsYXkpIHtcbiAgICAgICAgICAgIHJlbGF0aXZlRGVsYXkgPSB0eXBlb2Ygb3B0aW9ucy5kZWxheSAhPT0gJ2Jvb2xlYW4nICYmIHRydXRoeVRpbWluZ1ZhbHVlKG9wdGlvbnMuZGVsYXkpXG4gICAgICAgICAgICAgICAgICA/IHBhcnNlRmxvYXQob3B0aW9ucy5kZWxheSlcbiAgICAgICAgICAgICAgICAgIDogcmVsYXRpdmVEZWxheTtcblxuICAgICAgICAgICAgbWF4RGVsYXkgPSBNYXRoLm1heChyZWxhdGl2ZURlbGF5LCAwKTtcbiAgICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uRGVsYXkgPSByZWxhdGl2ZURlbGF5O1xuICAgICAgICAgICAgZGVsYXlTdHlsZSA9IGdldENzc0RlbGF5U3R5bGUocmVsYXRpdmVEZWxheSwgdHJ1ZSk7XG4gICAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChkZWxheVN0eWxlKTtcbiAgICAgICAgICAgIG5vZGUuc3R5bGVbZGVsYXlTdHlsZVswXV0gPSBkZWxheVN0eWxlWzFdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1heERlbGF5VGltZSA9IG1heERlbGF5ICogT05FX1NFQ09ORDtcbiAgICAgICAgICBtYXhEdXJhdGlvblRpbWUgPSBtYXhEdXJhdGlvbiAqIE9ORV9TRUNPTkQ7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5lYXNpbmcpIHtcbiAgICAgICAgICAgIHZhciBlYXNlUHJvcCwgZWFzZVZhbCA9IG9wdGlvbnMuZWFzaW5nO1xuICAgICAgICAgICAgaWYgKGZsYWdzLmhhc1RyYW5zaXRpb25zKSB7XG4gICAgICAgICAgICAgIGVhc2VQcm9wID0gVFJBTlNJVElPTl9QUk9QICsgVElNSU5HX0tFWTtcbiAgICAgICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goW2Vhc2VQcm9wLCBlYXNlVmFsXSk7XG4gICAgICAgICAgICAgIG5vZGUuc3R5bGVbZWFzZVByb3BdID0gZWFzZVZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmbGFncy5oYXNBbmltYXRpb25zKSB7XG4gICAgICAgICAgICAgIGVhc2VQcm9wID0gQU5JTUFUSU9OX1BST1AgKyBUSU1JTkdfS0VZO1xuICAgICAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChbZWFzZVByb3AsIGVhc2VWYWxdKTtcbiAgICAgICAgICAgICAgbm9kZS5zdHlsZVtlYXNlUHJvcF0gPSBlYXNlVmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbikge1xuICAgICAgICAgICAgZXZlbnRzLnB1c2goVFJBTlNJVElPTkVORF9FVkVOVCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50cy5wdXNoKEFOSU1BVElPTkVORF9FVkVOVCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICB2YXIgdGltZXJUaW1lID0gbWF4RGVsYXlUaW1lICsgQ0xPU0lOR19USU1FX0JVRkZFUiAqIG1heER1cmF0aW9uVGltZTtcbiAgICAgICAgICB2YXIgZW5kVGltZSA9IHN0YXJ0VGltZSArIHRpbWVyVGltZTtcblxuICAgICAgICAgIHZhciBhbmltYXRpb25zRGF0YSA9IGVsZW1lbnQuZGF0YShBTklNQVRFX1RJTUVSX0tFWSkgfHwgW107XG4gICAgICAgICAgdmFyIHNldHVwRmFsbGJhY2tUaW1lciA9IHRydWU7XG4gICAgICAgICAgaWYgKGFuaW1hdGlvbnNEYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lckRhdGEgPSBhbmltYXRpb25zRGF0YVswXTtcbiAgICAgICAgICAgIHNldHVwRmFsbGJhY2tUaW1lciA9IGVuZFRpbWUgPiBjdXJyZW50VGltZXJEYXRhLmV4cGVjdGVkRW5kVGltZTtcbiAgICAgICAgICAgIGlmIChzZXR1cEZhbGxiYWNrVGltZXIpIHtcbiAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGN1cnJlbnRUaW1lckRhdGEudGltZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uc0RhdGEucHVzaChjbG9zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNldHVwRmFsbGJhY2tUaW1lcikge1xuICAgICAgICAgICAgdmFyIHRpbWVyID0gJHRpbWVvdXQob25BbmltYXRpb25FeHBpcmVkLCB0aW1lclRpbWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnNEYXRhWzBdID0ge1xuICAgICAgICAgICAgICB0aW1lcjogdGltZXIsXG4gICAgICAgICAgICAgIGV4cGVjdGVkRW5kVGltZTogZW5kVGltZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnNEYXRhLnB1c2goY2xvc2UpO1xuICAgICAgICAgICAgZWxlbWVudC5kYXRhKEFOSU1BVEVfVElNRVJfS0VZLCBhbmltYXRpb25zRGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVsZW1lbnQub24oZXZlbnRzLmpvaW4oJyAnKSwgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMudG8pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNsZWFudXBTdHlsZXMpIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZXN0b3JhYmxlU3R5bGVzKHJlc3RvcmVTdHlsZXMsIG5vZGUsIE9iamVjdC5rZXlzKG9wdGlvbnMudG8pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcGx5QW5pbWF0aW9uVG9TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25BbmltYXRpb25FeHBpcmVkKCkge1xuICAgICAgICAgIHZhciBhbmltYXRpb25zRGF0YSA9IGVsZW1lbnQuZGF0YShBTklNQVRFX1RJTUVSX0tFWSk7XG5cbiAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgZmFsc2UgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGVsZW1lbnQgd2FzXG4gICAgICAgICAgLy8gcmVtb3ZlZCBmcm9tIHRoZSBET00gKHZpYSBhIGxlYXZlIGFuaW1hdGlvbiBvciBzb21ldGhpbmdcbiAgICAgICAgICAvLyBzaW1pbGFyKVxuICAgICAgICAgIGlmIChhbmltYXRpb25zRGF0YSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhbmltYXRpb25zRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBhbmltYXRpb25zRGF0YVtpXSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVEYXRhKEFOSU1BVEVfVElNRVJfS0VZKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn1dO1xuXG52YXIgJCRBbmltYXRlQ3NzRHJpdmVyUHJvdmlkZXIgPSBbJyQkYW5pbWF0aW9uUHJvdmlkZXInLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJCRhbmltYXRpb25Qcm92aWRlcikge1xuICAkJGFuaW1hdGlvblByb3ZpZGVyLmRyaXZlcnMucHVzaCgnJCRhbmltYXRlQ3NzRHJpdmVyJyk7XG5cbiAgdmFyIE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FID0gJ25nLWFuaW1hdGUtc2hpbSc7XG4gIHZhciBOR19BTklNQVRFX0FOQ0hPUl9DTEFTU19OQU1FID0gJ25nLWFuY2hvcic7XG5cbiAgdmFyIE5HX09VVF9BTkNIT1JfQ0xBU1NfTkFNRSA9ICduZy1hbmNob3Itb3V0JztcbiAgdmFyIE5HX0lOX0FOQ0hPUl9DTEFTU19OQU1FID0gJ25nLWFuY2hvci1pbic7XG5cbiAgZnVuY3Rpb24gaXNEb2N1bWVudEZyYWdtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlICYmIG5vZGUucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMTE7XG4gIH1cblxuICB0aGlzLiRnZXQgPSBbJyRhbmltYXRlQ3NzJywgJyRyb290U2NvcGUnLCAnJCRBbmltYXRlUnVubmVyJywgJyRyb290RWxlbWVudCcsICckc25pZmZlcicsICckJGpxTGl0ZScsICckZG9jdW1lbnQnLFxuICAgICAgIGZ1bmN0aW9uKCRhbmltYXRlQ3NzLCAgICRyb290U2NvcGUsICAgJCRBbmltYXRlUnVubmVyLCAgICRyb290RWxlbWVudCwgICAkc25pZmZlciwgICAkJGpxTGl0ZSwgICAkZG9jdW1lbnQpIHtcblxuICAgIC8vIG9ubHkgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHRoZXNlIHByb3BlcnRpZXMgY2FuIHJlbmRlciBhbmltYXRpb25zXG4gICAgaWYgKCEkc25pZmZlci5hbmltYXRpb25zICYmICEkc25pZmZlci50cmFuc2l0aW9ucykgcmV0dXJuIG5vb3A7XG5cbiAgICB2YXIgYm9keU5vZGUgPSAkZG9jdW1lbnRbMF0uYm9keTtcbiAgICB2YXIgcm9vdE5vZGUgPSBnZXREb21Ob2RlKCRyb290RWxlbWVudCk7XG5cbiAgICB2YXIgcm9vdEJvZHlFbGVtZW50ID0ganFMaXRlKFxuICAgICAgLy8gdGhpcyBpcyB0byBhdm9pZCB1c2luZyBzb21ldGhpbmcgdGhhdCBleGlzdHMgb3V0c2lkZSBvZiB0aGUgYm9keVxuICAgICAgLy8gd2UgYWxzbyBzcGVjaWFsIGNhc2UgdGhlIGRvYyBmcmFnbWVudCBjYXNlIGJlY2F1c2Ugb3VyIHVuaXQgdGVzdCBjb2RlXG4gICAgICAvLyBhcHBlbmRzIHRoZSAkcm9vdEVsZW1lbnQgdG8gdGhlIGJvZHkgYWZ0ZXIgdGhlIGFwcCBoYXMgYmVlbiBib290c3RyYXBwZWRcbiAgICAgIGlzRG9jdW1lbnRGcmFnbWVudChyb290Tm9kZSkgfHwgYm9keU5vZGUuY29udGFpbnMocm9vdE5vZGUpID8gcm9vdE5vZGUgOiBib2R5Tm9kZVxuICAgICk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW5pdERyaXZlckZuKGFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgIHJldHVybiBhbmltYXRpb25EZXRhaWxzLmZyb20gJiYgYW5pbWF0aW9uRGV0YWlscy50b1xuICAgICAgICAgID8gcHJlcGFyZUZyb21Ub0FuY2hvckFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzLmZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRldGFpbHMudG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRldGFpbHMuY2xhc3NlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRGV0YWlscy5hbmNob3JzKVxuICAgICAgICAgIDogcHJlcGFyZVJlZ3VsYXJBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZpbHRlckNzc0NsYXNzZXMoY2xhc3Nlcykge1xuICAgICAgLy9yZW1vdmUgYWxsIHRoZSBgbmctYCBzdHVmZlxuICAgICAgcmV0dXJuIGNsYXNzZXMucmVwbGFjZSgvXFxibmctXFxTK1xcYi9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VW5pcXVlVmFsdWVzKGEsIGIpIHtcbiAgICAgIGlmIChpc1N0cmluZyhhKSkgYSA9IGEuc3BsaXQoJyAnKTtcbiAgICAgIGlmIChpc1N0cmluZyhiKSkgYiA9IGIuc3BsaXQoJyAnKTtcbiAgICAgIHJldHVybiBhLmZpbHRlcihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgcmV0dXJuIGIuaW5kZXhPZih2YWwpID09PSAtMTtcbiAgICAgIH0pLmpvaW4oJyAnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQW5jaG9yZWRBbmltYXRpb24oY2xhc3Nlcywgb3V0QW5jaG9yLCBpbkFuY2hvcikge1xuICAgICAgdmFyIGNsb25lID0ganFMaXRlKGdldERvbU5vZGUob3V0QW5jaG9yKS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgdmFyIHN0YXJ0aW5nQ2xhc3NlcyA9IGZpbHRlckNzc0NsYXNzZXMoZ2V0Q2xhc3NWYWwoY2xvbmUpKTtcblxuICAgICAgb3V0QW5jaG9yLmFkZENsYXNzKE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FKTtcbiAgICAgIGluQW5jaG9yLmFkZENsYXNzKE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FKTtcblxuICAgICAgY2xvbmUuYWRkQ2xhc3MoTkdfQU5JTUFURV9BTkNIT1JfQ0xBU1NfTkFNRSk7XG5cbiAgICAgIHJvb3RCb2R5RWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuXG4gICAgICB2YXIgYW5pbWF0b3JJbiwgYW5pbWF0b3JPdXQgPSBwcmVwYXJlT3V0QW5pbWF0aW9uKCk7XG5cbiAgICAgIC8vIHRoZSB1c2VyIG1heSBub3QgZW5kIHVwIHVzaW5nIHRoZSBgb3V0YCBhbmltYXRpb24gYW5kXG4gICAgICAvLyBvbmx5IG1ha2luZyB1c2Ugb2YgdGhlIGBpbmAgYW5pbWF0aW9uIG9yIHZpY2UtdmVyc2EuXG4gICAgICAvLyBJbiBlaXRoZXIgY2FzZSB3ZSBzaG91bGQgYWxsb3cgdGhpcyBhbmQgbm90IGFzc3VtZSB0aGVcbiAgICAgIC8vIGFuaW1hdGlvbiBpcyBvdmVyIHVubGVzcyBib3RoIGFuaW1hdGlvbnMgYXJlIG5vdCB1c2VkLlxuICAgICAgaWYgKCFhbmltYXRvck91dCkge1xuICAgICAgICBhbmltYXRvckluID0gcHJlcGFyZUluQW5pbWF0aW9uKCk7XG4gICAgICAgIGlmICghYW5pbWF0b3JJbikge1xuICAgICAgICAgIHJldHVybiBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRpbmdBbmltYXRvciA9IGFuaW1hdG9yT3V0IHx8IGFuaW1hdG9ySW47XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcnVubmVyO1xuXG4gICAgICAgICAgdmFyIGN1cnJlbnRBbmltYXRpb24gPSBzdGFydGluZ0FuaW1hdG9yLnN0YXJ0KCk7XG4gICAgICAgICAgY3VycmVudEFuaW1hdGlvbi5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIWFuaW1hdG9ySW4pIHtcbiAgICAgICAgICAgICAgYW5pbWF0b3JJbiA9IHByZXBhcmVJbkFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICBpZiAoYW5pbWF0b3JJbikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBhbmltYXRvckluLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvbi5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGVyZSBpcyBubyBgaW5gIGFuaW1hdGlvblxuICAgICAgICAgICAgZW5kKCk7XG4gICAgICAgICAgICBydW5uZXIuY29tcGxldGUoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICAgICAgZW5kOiBlbmRGbixcbiAgICAgICAgICAgIGNhbmNlbDogZW5kRm5cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBydW5uZXI7XG5cbiAgICAgICAgICBmdW5jdGlvbiBlbmRGbigpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24uZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBjYWxjdWxhdGVBbmNob3JTdHlsZXMoYW5jaG9yKSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSB7fTtcblxuICAgICAgICB2YXIgY29vcmRzID0gZ2V0RG9tTm9kZShhbmNob3IpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIC8vIHdlIGl0ZXJhdGUgZGlyZWN0bHkgc2luY2Ugc2FmYXJpIG1lc3NlcyB1cCBhbmQgZG9lc24ndCByZXR1cm5cbiAgICAgICAgLy8gYWxsIHRoZSBrZXlzIGZvciB0aGUgY29vcmRzIG9iamVjdCB3aGVuIGl0ZXJhdGVkXG4gICAgICAgIGZvckVhY2goWyd3aWR0aCcsJ2hlaWdodCcsJ3RvcCcsJ2xlZnQnXSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29vcmRzW2tleV07XG4gICAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgIHZhbHVlICs9IGJvZHlOb2RlLnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgdmFsdWUgKz0gYm9keU5vZGUuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0eWxlc1trZXldID0gTWF0aC5mbG9vcih2YWx1ZSkgKyAncHgnO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcHJlcGFyZU91dEFuaW1hdGlvbigpIHtcbiAgICAgICAgdmFyIGFuaW1hdG9yID0gJGFuaW1hdGVDc3MoY2xvbmUsIHtcbiAgICAgICAgICBhZGRDbGFzczogTkdfT1VUX0FOQ0hPUl9DTEFTU19OQU1FLFxuICAgICAgICAgIGRlbGF5OiB0cnVlLFxuICAgICAgICAgIGZyb206IGNhbGN1bGF0ZUFuY2hvclN0eWxlcyhvdXRBbmNob3IpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlYWQgdGhlIGNvbW1lbnQgd2l0aGluIGBwcmVwYXJlUmVndWxhckFuaW1hdGlvbmAgdG8gdW5kZXJzdGFuZFxuICAgICAgICAvLyB3aHkgdGhpcyBjaGVjayBpcyBuZWNlc3NhcnlcbiAgICAgICAgcmV0dXJuIGFuaW1hdG9yLiQkd2lsbEFuaW1hdGUgPyBhbmltYXRvciA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldENsYXNzVmFsKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYXR0cignY2xhc3MnKSB8fCAnJztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcHJlcGFyZUluQW5pbWF0aW9uKCkge1xuICAgICAgICB2YXIgZW5kaW5nQ2xhc3NlcyA9IGZpbHRlckNzc0NsYXNzZXMoZ2V0Q2xhc3NWYWwoaW5BbmNob3IpKTtcbiAgICAgICAgdmFyIHRvQWRkID0gZ2V0VW5pcXVlVmFsdWVzKGVuZGluZ0NsYXNzZXMsIHN0YXJ0aW5nQ2xhc3Nlcyk7XG4gICAgICAgIHZhciB0b1JlbW92ZSA9IGdldFVuaXF1ZVZhbHVlcyhzdGFydGluZ0NsYXNzZXMsIGVuZGluZ0NsYXNzZXMpO1xuXG4gICAgICAgIHZhciBhbmltYXRvciA9ICRhbmltYXRlQ3NzKGNsb25lLCB7XG4gICAgICAgICAgdG86IGNhbGN1bGF0ZUFuY2hvclN0eWxlcyhpbkFuY2hvciksXG4gICAgICAgICAgYWRkQ2xhc3M6IE5HX0lOX0FOQ0hPUl9DTEFTU19OQU1FICsgJyAnICsgdG9BZGQsXG4gICAgICAgICAgcmVtb3ZlQ2xhc3M6IE5HX09VVF9BTkNIT1JfQ0xBU1NfTkFNRSArICcgJyArIHRvUmVtb3ZlLFxuICAgICAgICAgIGRlbGF5OiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlYWQgdGhlIGNvbW1lbnQgd2l0aGluIGBwcmVwYXJlUmVndWxhckFuaW1hdGlvbmAgdG8gdW5kZXJzdGFuZFxuICAgICAgICAvLyB3aHkgdGhpcyBjaGVjayBpcyBuZWNlc3NhcnlcbiAgICAgICAgcmV0dXJuIGFuaW1hdG9yLiQkd2lsbEFuaW1hdGUgPyBhbmltYXRvciA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgICAgY2xvbmUucmVtb3ZlKCk7XG4gICAgICAgIG91dEFuY2hvci5yZW1vdmVDbGFzcyhOR19BTklNQVRFX1NISU1fQ0xBU1NfTkFNRSk7XG4gICAgICAgIGluQW5jaG9yLnJlbW92ZUNsYXNzKE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlRnJvbVRvQW5jaG9yQW5pbWF0aW9uKGZyb20sIHRvLCBjbGFzc2VzLCBhbmNob3JzKSB7XG4gICAgICB2YXIgZnJvbUFuaW1hdGlvbiA9IHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uKGZyb20sIG5vb3ApO1xuICAgICAgdmFyIHRvQW5pbWF0aW9uID0gcHJlcGFyZVJlZ3VsYXJBbmltYXRpb24odG8sIG5vb3ApO1xuXG4gICAgICB2YXIgYW5jaG9yQW5pbWF0aW9ucyA9IFtdO1xuICAgICAgZm9yRWFjaChhbmNob3JzLCBmdW5jdGlvbihhbmNob3IpIHtcbiAgICAgICAgdmFyIG91dEVsZW1lbnQgPSBhbmNob3JbJ291dCddO1xuICAgICAgICB2YXIgaW5FbGVtZW50ID0gYW5jaG9yWydpbiddO1xuICAgICAgICB2YXIgYW5pbWF0b3IgPSBwcmVwYXJlQW5jaG9yZWRBbmltYXRpb24oY2xhc3Nlcywgb3V0RWxlbWVudCwgaW5FbGVtZW50KTtcbiAgICAgICAgaWYgKGFuaW1hdG9yKSB7XG4gICAgICAgICAgYW5jaG9yQW5pbWF0aW9ucy5wdXNoKGFuaW1hdG9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIG5vIHBvaW50IGluIGRvaW5nIGFueXRoaW5nIHdoZW4gdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHRvIGFuaW1hdGVcbiAgICAgIGlmICghZnJvbUFuaW1hdGlvbiAmJiAhdG9BbmltYXRpb24gJiYgYW5jaG9yQW5pbWF0aW9ucy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhbmltYXRpb25SdW5uZXJzID0gW107XG5cbiAgICAgICAgICBpZiAoZnJvbUFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uUnVubmVycy5wdXNoKGZyb21BbmltYXRpb24uc3RhcnQoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRvQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBhbmltYXRpb25SdW5uZXJzLnB1c2godG9BbmltYXRpb24uc3RhcnQoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yRWFjaChhbmNob3JBbmltYXRpb25zLCBmdW5jdGlvbihhbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lcnMucHVzaChhbmltYXRpb24uc3RhcnQoKSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcih7XG4gICAgICAgICAgICBlbmQ6IGVuZEZuLFxuICAgICAgICAgICAgY2FuY2VsOiBlbmRGbiAvLyBDU1MtZHJpdmVuIGFuaW1hdGlvbnMgY2Fubm90IGJlIGNhbmNlbGxlZCwgb25seSBlbmRlZFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgJCRBbmltYXRlUnVubmVyLmFsbChhbmltYXRpb25SdW5uZXJzLCBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZShzdGF0dXMpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcblxuICAgICAgICAgIGZ1bmN0aW9uIGVuZEZuKCkge1xuICAgICAgICAgICAgZm9yRWFjaChhbmltYXRpb25SdW5uZXJzLCBmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgICAgICAgcnVubmVyLmVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gYW5pbWF0aW9uRGV0YWlscy5lbGVtZW50O1xuICAgICAgdmFyIG9wdGlvbnMgPSBhbmltYXRpb25EZXRhaWxzLm9wdGlvbnMgfHwge307XG5cbiAgICAgIGlmIChhbmltYXRpb25EZXRhaWxzLnN0cnVjdHVyYWwpIHtcbiAgICAgICAgb3B0aW9ucy5ldmVudCA9IGFuaW1hdGlvbkRldGFpbHMuZXZlbnQ7XG4gICAgICAgIG9wdGlvbnMuc3RydWN0dXJhbCA9IHRydWU7XG4gICAgICAgIG9wdGlvbnMuYXBwbHlDbGFzc2VzRWFybHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIHdlIHNwZWNpYWwgY2FzZSB0aGUgbGVhdmUgYW5pbWF0aW9uIHNpbmNlIHdlIHdhbnQgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgLy8gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBhcyBzb29uIGFzIHRoZSBhbmltYXRpb24gaXMgb3Zlci4gT3RoZXJ3aXNlXG4gICAgICAgIC8vIGEgZmxpY2tlciBtaWdodCBhcHBlYXIgb3IgdGhlIGVsZW1lbnQgbWF5IG5vdCBiZSByZW1vdmVkIGF0IGFsbFxuICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscy5ldmVudCA9PT0gJ2xlYXZlJykge1xuICAgICAgICAgIG9wdGlvbnMub25Eb25lID0gb3B0aW9ucy5kb21PcGVyYXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gV2UgYXNzaWduIHRoZSBwcmVwYXJhdGlvbkNsYXNzZXMgYXMgdGhlIGFjdHVhbCBhbmltYXRpb24gZXZlbnQgc2luY2VcbiAgICAgIC8vIHRoZSBpbnRlcm5hbHMgb2YgJGFuaW1hdGVDc3Mgd2lsbCBqdXN0IHN1ZmZpeCB0aGUgZXZlbnQgdG9rZW4gdmFsdWVzXG4gICAgICAvLyB3aXRoIGAtYWN0aXZlYCB0byB0cmlnZ2VyIHRoZSBhbmltYXRpb24uXG4gICAgICBpZiAob3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgb3B0aW9ucy5ldmVudCA9IGNvbmNhdFdpdGhTcGFjZShvcHRpb25zLmV2ZW50LCBvcHRpb25zLnByZXBhcmF0aW9uQ2xhc3Nlcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbmltYXRvciA9ICRhbmltYXRlQ3NzKGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgICAvLyB0aGUgZHJpdmVyIGxvb2t1cCBjb2RlIGluc2lkZSBvZiAkJGFuaW1hdGlvbiBhdHRlbXB0cyB0byBzcGF3biBhXG4gICAgICAvLyBkcml2ZXIgb25lIGJ5IG9uZSB1bnRpbCBhIGRyaXZlciByZXR1cm5zIGEuJCR3aWxsQW5pbWF0ZSBhbmltYXRvciBvYmplY3QuXG4gICAgICAvLyAkYW5pbWF0ZUNzcyB3aWxsIGFsd2F5cyByZXR1cm4gYW4gb2JqZWN0LCBob3dldmVyLCBpdCB3aWxsIHBhc3MgaW5cbiAgICAgIC8vIGEgZmxhZyBhcyBhIGhpbnQgYXMgdG8gd2hldGhlciBhbiBhbmltYXRpb24gd2FzIGRldGVjdGVkIG9yIG5vdFxuICAgICAgcmV0dXJuIGFuaW1hdG9yLiQkd2lsbEFuaW1hdGUgPyBhbmltYXRvciA6IG51bGw7XG4gICAgfVxuICB9XTtcbn1dO1xuXG4vLyBUT0RPKG1hdHNrbyk6IHVzZSBjYWNoaW5nIGhlcmUgdG8gc3BlZWQgdGhpbmdzIHVwIGZvciBkZXRlY3Rpb25cbi8vIFRPRE8obWF0c2tvKTogYWRkIGRvY3VtZW50YXRpb25cbi8vICBieSB0aGUgdGltZS4uLlxuXG52YXIgJCRBbmltYXRlSnNQcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbigkYW5pbWF0ZVByb3ZpZGVyKSB7XG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyQkQW5pbWF0ZVJ1bm5lcicsICckJGpxTGl0ZScsXG4gICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkJGpxTGl0ZSkge1xuXG4gICAgdmFyIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyA9IGFwcGx5QW5pbWF0aW9uQ2xhc3Nlc0ZhY3RvcnkoJCRqcUxpdGUpO1xuICAgICAgICAgLy8gJGFuaW1hdGVKcyhlbGVtZW50LCAnZW50ZXInKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGNsYXNzZXMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhbmltYXRpb25DbG9zZWQgPSBmYWxzZTtcblxuICAgICAgLy8gdGhlIGBjbGFzc2VzYCBhcmd1bWVudCBpcyBvcHRpb25hbCBhbmQgaWYgaXQgaXMgbm90IHVzZWRcbiAgICAgIC8vIHRoZW4gdGhlIGNsYXNzZXMgd2lsbCBiZSByZXNvbHZlZCBmcm9tIHRoZSBlbGVtZW50J3MgY2xhc3NOYW1lXG4gICAgICAvLyBwcm9wZXJ0eSBhcyB3ZWxsIGFzIG9wdGlvbnMuYWRkQ2xhc3Mvb3B0aW9ucy5yZW1vdmVDbGFzcy5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIGlzT2JqZWN0KGNsYXNzZXMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBjbGFzc2VzO1xuICAgICAgICBjbGFzc2VzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgaWYgKCFjbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgPSBlbGVtZW50LmF0dHIoJ2NsYXNzJykgfHwgJyc7XG4gICAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzKSB7XG4gICAgICAgICAgY2xhc3NlcyArPSAnICcgKyBvcHRpb25zLmFkZENsYXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgY2xhc3NlcyArPSAnICcgKyBvcHRpb25zLnJlbW92ZUNsYXNzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjbGFzc2VzVG9BZGQgPSBvcHRpb25zLmFkZENsYXNzO1xuICAgICAgdmFyIGNsYXNzZXNUb1JlbW92ZSA9IG9wdGlvbnMucmVtb3ZlQ2xhc3M7XG5cbiAgICAgIC8vIHRoZSBsb29rdXBBbmltYXRpb25zIGZ1bmN0aW9uIHJldHVybnMgYSBzZXJpZXMgb2YgYW5pbWF0aW9uIG9iamVjdHMgdGhhdCBhcmVcbiAgICAgIC8vIG1hdGNoZWQgdXAgd2l0aCBvbmUgb3IgbW9yZSBvZiB0aGUgQ1NTIGNsYXNzZXMuIFRoZXNlIGFuaW1hdGlvbiBvYmplY3RzIGFyZVxuICAgICAgLy8gZGVmaW5lZCB2aWEgdGhlIG1vZHVsZS5hbmltYXRpb24gZmFjdG9yeSBmdW5jdGlvbi4gSWYgbm90aGluZyBpcyBkZXRlY3RlZCB0aGVuXG4gICAgICAvLyB3ZSBkb24ndCByZXR1cm4gYW55dGhpbmcgd2hpY2ggdGhlbiBtYWtlcyAkYW5pbWF0aW9uIHF1ZXJ5IHRoZSBuZXh0IGRyaXZlci5cbiAgICAgIHZhciBhbmltYXRpb25zID0gbG9va3VwQW5pbWF0aW9ucyhjbGFzc2VzKTtcbiAgICAgIHZhciBiZWZvcmUsIGFmdGVyO1xuICAgICAgaWYgKGFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhZnRlckZuLCBiZWZvcmVGbjtcbiAgICAgICAgaWYgKGV2ZW50ID09PSAnbGVhdmUnKSB7XG4gICAgICAgICAgYmVmb3JlRm4gPSAnbGVhdmUnO1xuICAgICAgICAgIGFmdGVyRm4gPSAnYWZ0ZXJMZWF2ZSc7IC8vIFRPRE8obWF0c2tvKTogZ2V0IHJpZCBvZiB0aGlzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmVmb3JlRm4gPSAnYmVmb3JlJyArIGV2ZW50LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZXZlbnQuc3Vic3RyKDEpO1xuICAgICAgICAgIGFmdGVyRm4gPSBldmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudCAhPT0gJ2VudGVyJyAmJiBldmVudCAhPT0gJ21vdmUnKSB7XG4gICAgICAgICAgYmVmb3JlID0gcGFja2FnZUFuaW1hdGlvbnMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGFuaW1hdGlvbnMsIGJlZm9yZUZuKTtcbiAgICAgICAgfVxuICAgICAgICBhZnRlciAgPSBwYWNrYWdlQW5pbWF0aW9ucyhlbGVtZW50LCBldmVudCwgb3B0aW9ucywgYW5pbWF0aW9ucywgYWZ0ZXJGbik7XG4gICAgICB9XG5cbiAgICAgIC8vIG5vIG1hdGNoaW5nIGFuaW1hdGlvbnNcbiAgICAgIGlmICghYmVmb3JlICYmICFhZnRlcikgcmV0dXJuO1xuXG4gICAgICBmdW5jdGlvbiBhcHBseU9wdGlvbnMoKSB7XG4gICAgICAgIG9wdGlvbnMuZG9tT3BlcmF0aW9uKCk7XG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgIGFuaW1hdGlvbkNsb3NlZCA9IHRydWU7XG4gICAgICAgIGFwcGx5T3B0aW9ucygpO1xuICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJ1bm5lcjtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJCR3aWxsQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAocnVubmVyKSB7XG4gICAgICAgICAgICBydW5uZXIuZW5kKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG4gICAgICAgICAgICBydW5uZXIuY29tcGxldGUodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAocnVubmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoKTtcbiAgICAgICAgICB2YXIgY2xvc2VBY3RpdmVBbmltYXRpb25zO1xuICAgICAgICAgIHZhciBjaGFpbiA9IFtdO1xuXG4gICAgICAgICAgaWYgKGJlZm9yZSkge1xuICAgICAgICAgICAgY2hhaW4ucHVzaChmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgICBjbG9zZUFjdGl2ZUFuaW1hdGlvbnMgPSBiZWZvcmUoZm4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNoYWluLmxlbmd0aCkge1xuICAgICAgICAgICAgY2hhaW4ucHVzaChmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgICBhcHBseU9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgZm4odHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXBwbHlPcHRpb25zKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgICAgICBjaGFpbi5wdXNoKGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICAgIGNsb3NlQWN0aXZlQW5pbWF0aW9ucyA9IGFmdGVyKGZuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJ1bm5lci5zZXRIb3N0KHtcbiAgICAgICAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGVuZEFuaW1hdGlvbnMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlbmRBbmltYXRpb25zKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgJCRBbmltYXRlUnVubmVyLmNoYWluKGNoYWluLCBvbkNvbXBsZXRlKTtcbiAgICAgICAgICByZXR1cm4gcnVubmVyO1xuXG4gICAgICAgICAgZnVuY3Rpb24gb25Db21wbGV0ZShzdWNjZXNzKSB7XG4gICAgICAgICAgICBjbG9zZShzdWNjZXNzKTtcbiAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZShzdWNjZXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBlbmRBbmltYXRpb25zKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgaWYgKCFhbmltYXRpb25DbG9zZWQpIHtcbiAgICAgICAgICAgICAgKGNsb3NlQWN0aXZlQW5pbWF0aW9ucyB8fCBub29wKShjYW5jZWxsZWQpO1xuICAgICAgICAgICAgICBvbkNvbXBsZXRlKGNhbmNlbGxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBleGVjdXRlQW5pbWF0aW9uRm4oZm4sIGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBvbkRvbmUpIHtcbiAgICAgICAgdmFyIGFyZ3M7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgICBjYXNlICdhbmltYXRlJzpcbiAgICAgICAgICAgIGFyZ3MgPSBbZWxlbWVudCwgb3B0aW9ucy5mcm9tLCBvcHRpb25zLnRvLCBvbkRvbmVdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdzZXRDbGFzcyc6XG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIGNsYXNzZXNUb0FkZCwgY2xhc3Nlc1RvUmVtb3ZlLCBvbkRvbmVdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdhZGRDbGFzcyc6XG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIGNsYXNzZXNUb0FkZCwgb25Eb25lXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncmVtb3ZlQ2xhc3MnOlxuICAgICAgICAgICAgYXJncyA9IFtlbGVtZW50LCBjbGFzc2VzVG9SZW1vdmUsIG9uRG9uZV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIG9uRG9uZV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZ3MucHVzaChvcHRpb25zKTtcblxuICAgICAgICB2YXIgdmFsdWUgPSBmbi5hcHBseShmbiwgYXJncyk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlLnN0YXJ0KSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdGFydCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mICQkQW5pbWF0ZVJ1bm5lcikge1xuICAgICAgICAgICAgdmFsdWUuZG9uZShvbkRvbmUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIG9wdGlvbmFsIG9uRW5kIC8gb25DYW5jZWwgY2FsbGJhY2tcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyhlbGVtZW50LCBldmVudCwgb3B0aW9ucywgYW5pbWF0aW9ucywgZm5OYW1lKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvckVhY2goYW5pbWF0aW9ucywgZnVuY3Rpb24oYW5pKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IGFuaVtmbk5hbWVdO1xuICAgICAgICAgIGlmICghYW5pbWF0aW9uKSByZXR1cm47XG5cbiAgICAgICAgICAvLyBub3RlIHRoYXQgYWxsIG9mIHRoZXNlIGFuaW1hdGlvbnMgd2lsbCBydW4gaW4gcGFyYWxsZWxcbiAgICAgICAgICBvcGVyYXRpb25zLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcnVubmVyO1xuICAgICAgICAgICAgdmFyIGVuZFByb2dyZXNzQ2I7XG5cbiAgICAgICAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG9uQW5pbWF0aW9uQ29tcGxldGUgPSBmdW5jdGlvbihyZWplY3RlZCkge1xuICAgICAgICAgICAgICBpZiAoIXJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIChlbmRQcm9ncmVzc0NiIHx8IG5vb3ApKHJlamVjdGVkKTtcbiAgICAgICAgICAgICAgICBydW5uZXIuY29tcGxldGUoIXJlamVjdGVkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcih7XG4gICAgICAgICAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgb25BbmltYXRpb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG9uQW5pbWF0aW9uQ29tcGxldGUodHJ1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBlbmRQcm9ncmVzc0NiID0gZXhlY3V0ZUFuaW1hdGlvbkZuKGFuaW1hdGlvbiwgZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICB2YXIgY2FuY2VsbGVkID0gcmVzdWx0ID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgb25BbmltYXRpb25Db21wbGV0ZShjYW5jZWxsZWQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvcGVyYXRpb25zO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYWNrYWdlQW5pbWF0aW9ucyhlbGVtZW50LCBldmVudCwgb3B0aW9ucywgYW5pbWF0aW9ucywgZm5OYW1lKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyhlbGVtZW50LCBldmVudCwgb3B0aW9ucywgYW5pbWF0aW9ucywgZm5OYW1lKTtcbiAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdmFyIGEsIGI7XG4gICAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ2JlZm9yZVNldENsYXNzJykge1xuICAgICAgICAgICAgYSA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ3JlbW92ZUNsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ2JlZm9yZVJlbW92ZUNsYXNzJyk7XG4gICAgICAgICAgICBiID0gZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyhlbGVtZW50LCAnYWRkQ2xhc3MnLCBvcHRpb25zLCBhbmltYXRpb25zLCAnYmVmb3JlQWRkQ2xhc3MnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZuTmFtZSA9PT0gJ3NldENsYXNzJykge1xuICAgICAgICAgICAgYSA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ3JlbW92ZUNsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ3JlbW92ZUNsYXNzJyk7XG4gICAgICAgICAgICBiID0gZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyhlbGVtZW50LCAnYWRkQ2xhc3MnLCBvcHRpb25zLCBhbmltYXRpb25zLCAnYWRkQ2xhc3MnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMuY29uY2F0KGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYikge1xuICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMuY29uY2F0KGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcGVyYXRpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFRPRE8obWF0c2tvKTogYWRkIGRvY3VtZW50YXRpb25cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHJ1bm5lcnMgPSBbXTtcbiAgICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvckVhY2gob3BlcmF0aW9ucywgZnVuY3Rpb24oYW5pbWF0ZUZuKSB7XG4gICAgICAgICAgICAgIHJ1bm5lcnMucHVzaChhbmltYXRlRm4oKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocnVubmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICQkQW5pbWF0ZVJ1bm5lci5hbGwocnVubmVycywgY2FsbGJhY2spO1xuICAgICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZW5kRm4ocmVqZWN0KSB7XG4gICAgICAgICAgICBmb3JFYWNoKHJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICAgICAgICBpZiAocmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgcnVubmVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9va3VwQW5pbWF0aW9ucyhjbGFzc2VzKSB7XG4gICAgICBjbGFzc2VzID0gaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBjbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgICB2YXIgbWF0Y2hlcyA9IFtdLCBmbGFnTWFwID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtsYXNzID0gY2xhc3Nlc1tpXSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkZhY3RvcnkgPSAkYW5pbWF0ZVByb3ZpZGVyLiQkcmVnaXN0ZXJlZEFuaW1hdGlvbnNba2xhc3NdO1xuICAgICAgICBpZiAoYW5pbWF0aW9uRmFjdG9yeSAmJiAhZmxhZ01hcFtrbGFzc10pIHtcbiAgICAgICAgICBtYXRjaGVzLnB1c2goJGluamVjdG9yLmdldChhbmltYXRpb25GYWN0b3J5KSk7XG4gICAgICAgICAgZmxhZ01hcFtrbGFzc10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9XG4gIH1dO1xufV07XG5cbnZhciAkJEFuaW1hdGVKc0RyaXZlclByb3ZpZGVyID0gWyckJGFuaW1hdGlvblByb3ZpZGVyJywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKCQkYW5pbWF0aW9uUHJvdmlkZXIpIHtcbiAgJCRhbmltYXRpb25Qcm92aWRlci5kcml2ZXJzLnB1c2goJyQkYW5pbWF0ZUpzRHJpdmVyJyk7XG4gIHRoaXMuJGdldCA9IFsnJCRhbmltYXRlSnMnLCAnJCRBbmltYXRlUnVubmVyJywgZnVuY3Rpb24oJCRhbmltYXRlSnMsICQkQW5pbWF0ZVJ1bm5lcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBpbml0RHJpdmVyRm4oYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMuZnJvbSAmJiBhbmltYXRpb25EZXRhaWxzLnRvKSB7XG4gICAgICAgIHZhciBmcm9tQW5pbWF0aW9uID0gcHJlcGFyZUFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzLmZyb20pO1xuICAgICAgICB2YXIgdG9BbmltYXRpb24gPSBwcmVwYXJlQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMudG8pO1xuICAgICAgICBpZiAoIWZyb21BbmltYXRpb24gJiYgIXRvQW5pbWF0aW9uKSByZXR1cm47XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uUnVubmVycyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoZnJvbUFuaW1hdGlvbikge1xuICAgICAgICAgICAgICBhbmltYXRpb25SdW5uZXJzLnB1c2goZnJvbUFuaW1hdGlvbi5zdGFydCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRvQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lcnMucHVzaCh0b0FuaW1hdGlvbi5zdGFydCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCRBbmltYXRlUnVubmVyLmFsbChhbmltYXRpb25SdW5uZXJzLCBkb25lKTtcblxuICAgICAgICAgICAgdmFyIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICAgICAgICBlbmQ6IGVuZEZuRmFjdG9yeSgpLFxuICAgICAgICAgICAgICBjYW5jZWw6IGVuZEZuRmFjdG9yeSgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZW5kRm5GYWN0b3J5KCkge1xuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm9yRWFjaChhbmltYXRpb25SdW5uZXJzLCBmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQgd2UgY2Fubm90IGNhbmNlbCBhbmltYXRpb25zIGZvciBncm91cHMganVzdCB5ZXQuIDEuNStcbiAgICAgICAgICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMpIHtcbiAgICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKHN0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHByZXBhcmVBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHByZXBhcmVBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBtYWtlIHN1cmUgdG8gY2hlY2sgZm9yIGdyb3VwZWQgYW5pbWF0aW9ucyBhbmQgZGVsZWdhdGUgZG93biB0byBub3JtYWwgYW5pbWF0aW9uc1xuICAgICAgdmFyIGVsZW1lbnQgPSBhbmltYXRpb25EZXRhaWxzLmVsZW1lbnQ7XG4gICAgICB2YXIgZXZlbnQgPSBhbmltYXRpb25EZXRhaWxzLmV2ZW50O1xuICAgICAgdmFyIG9wdGlvbnMgPSBhbmltYXRpb25EZXRhaWxzLm9wdGlvbnM7XG4gICAgICB2YXIgY2xhc3NlcyA9IGFuaW1hdGlvbkRldGFpbHMuY2xhc3NlcztcbiAgICAgIHJldHVybiAkJGFuaW1hdGVKcyhlbGVtZW50LCBldmVudCwgY2xhc3Nlcywgb3B0aW9ucyk7XG4gICAgfVxuICB9XTtcbn1dO1xuXG52YXIgTkdfQU5JTUFURV9BVFRSX05BTUUgPSAnZGF0YS1uZy1hbmltYXRlJztcbnZhciBOR19BTklNQVRFX1BJTl9EQVRBID0gJyRuZ0FuaW1hdGVQaW4nO1xudmFyICQkQW5pbWF0ZVF1ZXVlUHJvdmlkZXIgPSBbJyRhbmltYXRlUHJvdmlkZXInLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJGFuaW1hdGVQcm92aWRlcikge1xuICB2YXIgUFJFX0RJR0VTVF9TVEFURSA9IDE7XG4gIHZhciBSVU5OSU5HX1NUQVRFID0gMjtcbiAgdmFyIE9ORV9TUEFDRSA9ICcgJztcblxuICB2YXIgcnVsZXMgPSB0aGlzLnJ1bGVzID0ge1xuICAgIHNraXA6IFtdLFxuICAgIGNhbmNlbDogW10sXG4gICAgam9pbjogW11cbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlVHJ1dGh5Q3NzQ2xhc3NNYXAoY2xhc3NTdHJpbmcpIHtcbiAgICBpZiAoIWNsYXNzU3RyaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGNsYXNzU3RyaW5nLnNwbGl0KE9ORV9TUEFDRSk7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3JFYWNoKGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgbWFwW2tleV0gPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNNYXRjaGluZ0NsYXNzZXMobmV3Q2xhc3NTdHJpbmcsIGN1cnJlbnRDbGFzc1N0cmluZykge1xuICAgIGlmIChuZXdDbGFzc1N0cmluZyAmJiBjdXJyZW50Q2xhc3NTdHJpbmcpIHtcbiAgICAgIHZhciBjdXJyZW50Q2xhc3NNYXAgPSBtYWtlVHJ1dGh5Q3NzQ2xhc3NNYXAoY3VycmVudENsYXNzU3RyaW5nKTtcbiAgICAgIHJldHVybiBuZXdDbGFzc1N0cmluZy5zcGxpdChPTkVfU1BBQ0UpLnNvbWUoZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50Q2xhc3NNYXBbY2xhc3NOYW1lXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQWxsb3dlZChydWxlVHlwZSwgY3VycmVudEFuaW1hdGlvbiwgcHJldmlvdXNBbmltYXRpb24pIHtcbiAgICByZXR1cm4gcnVsZXNbcnVsZVR5cGVdLnNvbWUoZnVuY3Rpb24oZm4pIHtcbiAgICAgIHJldHVybiBmbihjdXJyZW50QW5pbWF0aW9uLCBwcmV2aW91c0FuaW1hdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNBbmltYXRpb25DbGFzc2VzKGFuaW1hdGlvbiwgYW5kKSB7XG4gICAgdmFyIGEgPSAoYW5pbWF0aW9uLmFkZENsYXNzIHx8ICcnKS5sZW5ndGggPiAwO1xuICAgIHZhciBiID0gKGFuaW1hdGlvbi5yZW1vdmVDbGFzcyB8fCAnJykubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gYW5kID8gYSAmJiBiIDogYSB8fCBiO1xuICB9XG5cbiAgcnVsZXMuam9pbi5wdXNoKGZ1bmN0aW9uKG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIGlmIHRoZSBuZXcgYW5pbWF0aW9uIGlzIGNsYXNzLWJhc2VkIHRoZW4gd2UgY2FuIGp1c3QgdGFjayB0aGF0IG9uXG4gICAgcmV0dXJuICFuZXdBbmltYXRpb24uc3RydWN0dXJhbCAmJiBoYXNBbmltYXRpb25DbGFzc2VzKG5ld0FuaW1hdGlvbik7XG4gIH0pO1xuXG4gIHJ1bGVzLnNraXAucHVzaChmdW5jdGlvbihuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIGFuaW1hdGUgYW55dGhpbmcgaWYgbm8gY2xhc3NlcyBhcmUgYmVpbmcgYWRkZWQgYW5kXG4gICAgLy8gdGhlcmUgaXMgbm8gc3RydWN0dXJhbCBhbmltYXRpb24gdGhhdCB3aWxsIGJlIHRyaWdnZXJlZFxuICAgIHJldHVybiAhbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWwgJiYgIWhhc0FuaW1hdGlvbkNsYXNzZXMobmV3QW5pbWF0aW9uKTtcbiAgfSk7XG5cbiAgcnVsZXMuc2tpcC5wdXNoKGZ1bmN0aW9uKG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIHdoeSBzaG91bGQgd2UgdHJpZ2dlciBhIG5ldyBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiBpZiB0aGUgZWxlbWVudCB3aWxsXG4gICAgLy8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET00gYW55d2F5P1xuICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uLmV2ZW50ID09PSAnbGVhdmUnICYmIG5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsO1xuICB9KTtcblxuICBydWxlcy5za2lwLnB1c2goZnVuY3Rpb24obmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgLy8gaWYgdGhlcmUgaXMgYW4gb25nb2luZyBjdXJyZW50IGFuaW1hdGlvbiB0aGVuIGRvbid0IGV2ZW4gYm90aGVyIHJ1bm5pbmcgdGhlIGNsYXNzLWJhc2VkIGFuaW1hdGlvblxuICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uLnN0cnVjdHVyYWwgJiYgY3VycmVudEFuaW1hdGlvbi5zdGF0ZSA9PT0gUlVOTklOR19TVEFURSAmJiAhbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWw7XG4gIH0pO1xuXG4gIHJ1bGVzLmNhbmNlbC5wdXNoKGZ1bmN0aW9uKG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIHRoZXJlIGNhbiBuZXZlciBiZSB0d28gc3RydWN0dXJhbCBhbmltYXRpb25zIHJ1bm5pbmcgYXQgdGhlIHNhbWUgdGltZVxuICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uLnN0cnVjdHVyYWwgJiYgbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWw7XG4gIH0pO1xuXG4gIHJ1bGVzLmNhbmNlbC5wdXNoKGZ1bmN0aW9uKG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIGlmIHRoZSBwcmV2aW91cyBhbmltYXRpb24gaXMgYWxyZWFkeSBydW5uaW5nLCBidXQgdGhlIG5ldyBhbmltYXRpb24gd2lsbFxuICAgIC8vIGJlIHRyaWdnZXJlZCwgYnV0IHRoZSBuZXcgYW5pbWF0aW9uIGlzIHN0cnVjdHVyYWxcbiAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbi5zdGF0ZSA9PT0gUlVOTklOR19TVEFURSAmJiBuZXdBbmltYXRpb24uc3RydWN0dXJhbDtcbiAgfSk7XG5cbiAgcnVsZXMuY2FuY2VsLnB1c2goZnVuY3Rpb24obmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgLy8gY2FuY2VsIHRoZSBhbmltYXRpb24gaWYgY2xhc3NlcyBhZGRlZCAvIHJlbW92ZWQgaW4gYm90aCBhbmltYXRpb24gY2FuY2VsIGVhY2ggb3RoZXIgb3V0LFxuICAgIC8vIGJ1dCBvbmx5IGlmIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBpc24ndCBzdHJ1Y3R1cmFsXG5cbiAgICBpZiAoY3VycmVudEFuaW1hdGlvbi5zdHJ1Y3R1cmFsKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbkEgPSBuZXdBbmltYXRpb24uYWRkQ2xhc3M7XG4gICAgdmFyIG5SID0gbmV3QW5pbWF0aW9uLnJlbW92ZUNsYXNzO1xuICAgIHZhciBjQSA9IGN1cnJlbnRBbmltYXRpb24uYWRkQ2xhc3M7XG4gICAgdmFyIGNSID0gY3VycmVudEFuaW1hdGlvbi5yZW1vdmVDbGFzcztcblxuICAgIC8vIGVhcmx5IGRldGVjdGlvbiB0byBzYXZlIHRoZSBnbG9iYWwgQ1BVIHNob3J0YWdlIDopXG4gICAgaWYgKChpc1VuZGVmaW5lZChuQSkgJiYgaXNVbmRlZmluZWQoblIpKSB8fCAoaXNVbmRlZmluZWQoY0EpICYmIGlzVW5kZWZpbmVkKGNSKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzTWF0Y2hpbmdDbGFzc2VzKG5BLCBjUikgfHwgaGFzTWF0Y2hpbmdDbGFzc2VzKG5SLCBjQSk7XG4gIH0pO1xuXG4gIHRoaXMuJGdldCA9IFsnJCRyQUYnLCAnJHJvb3RTY29wZScsICckcm9vdEVsZW1lbnQnLCAnJGRvY3VtZW50JywgJyQkTWFwJyxcbiAgICAgICAgICAgICAgICckJGFuaW1hdGlvbicsICckJEFuaW1hdGVSdW5uZXInLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckJGpxTGl0ZScsICckJGZvcmNlUmVmbG93JyxcbiAgICAgICAgICAgICAgICckJGlzRG9jdW1lbnRIaWRkZW4nLFxuICAgICAgIGZ1bmN0aW9uKCQkckFGLCAgICRyb290U2NvcGUsICAgJHJvb3RFbGVtZW50LCAgICRkb2N1bWVudCwgICAkJE1hcCxcbiAgICAgICAgICAgICAgICAkJGFuaW1hdGlvbiwgICAkJEFuaW1hdGVSdW5uZXIsICAgJHRlbXBsYXRlUmVxdWVzdCwgICAkJGpxTGl0ZSwgICAkJGZvcmNlUmVmbG93LFxuICAgICAgICAgICAgICAgICQkaXNEb2N1bWVudEhpZGRlbikge1xuXG4gICAgdmFyIGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAgPSBuZXcgJCRNYXAoKTtcbiAgICB2YXIgZGlzYWJsZWRFbGVtZW50c0xvb2t1cCA9IG5ldyAkJE1hcCgpO1xuICAgIHZhciBhbmltYXRpb25zRW5hYmxlZCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBwb3N0RGlnZXN0VGFza0ZhY3RvcnkoKSB7XG4gICAgICB2YXIgcG9zdERpZ2VzdENhbGxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIC8vIHdlIG9ubHkgaXNzdWUgYSBjYWxsIHRvIHBvc3REaWdlc3QgYmVmb3JlXG4gICAgICAgIC8vIGl0IGhhcyBmaXJzdCBwYXNzZWQuIFRoaXMgcHJldmVudHMgYW55IGNhbGxiYWNrc1xuICAgICAgICAvLyBmcm9tIG5vdCBmaXJpbmcgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWRcbiAgICAgICAgLy8gc2luY2UgaXQgd2lsbCBiZSBvdXQgb2YgdGhlIGRpZ2VzdCBjeWNsZS5cbiAgICAgICAgaWYgKHBvc3REaWdlc3RDYWxsZWQpIHtcbiAgICAgICAgICBmbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcG9zdERpZ2VzdENhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFdhaXQgdW50aWwgYWxsIGRpcmVjdGl2ZSBhbmQgcm91dGUtcmVsYXRlZCB0ZW1wbGF0ZXMgYXJlIGRvd25sb2FkZWQgYW5kXG4gICAgLy8gY29tcGlsZWQuIFRoZSAkdGVtcGxhdGVSZXF1ZXN0LnRvdGFsUGVuZGluZ1JlcXVlc3RzIHZhcmlhYmxlIGtlZXBzIHRyYWNrIG9mXG4gICAgLy8gYWxsIG9mIHRoZSByZW1vdGUgdGVtcGxhdGVzIGJlaW5nIGN1cnJlbnRseSBkb3dubG9hZGVkLiBJZiB0aGVyZSBhcmUgbm9cbiAgICAvLyB0ZW1wbGF0ZXMgY3VycmVudGx5IGRvd25sb2FkaW5nIHRoZW4gdGhlIHdhdGNoZXIgd2lsbCBzdGlsbCBmaXJlIGFueXdheS5cbiAgICB2YXIgZGVyZWdpc3RlcldhdGNoID0gJHJvb3RTY29wZS4kd2F0Y2goXG4gICAgICBmdW5jdGlvbigpIHsgcmV0dXJuICR0ZW1wbGF0ZVJlcXVlc3QudG90YWxQZW5kaW5nUmVxdWVzdHMgPT09IDA7IH0sXG4gICAgICBmdW5jdGlvbihpc0VtcHR5KSB7XG4gICAgICAgIGlmICghaXNFbXB0eSkgcmV0dXJuO1xuICAgICAgICBkZXJlZ2lzdGVyV2F0Y2goKTtcblxuICAgICAgICAvLyBOb3cgdGhhdCBhbGwgdGVtcGxhdGVzIGhhdmUgYmVlbiBkb3dubG9hZGVkLCAkYW5pbWF0ZSB3aWxsIHdhaXQgdW50aWxcbiAgICAgICAgLy8gdGhlIHBvc3QgZGlnZXN0IHF1ZXVlIGlzIGVtcHR5IGJlZm9yZSBlbmFibGluZyBhbmltYXRpb25zLiBCeSBoYXZpbmcgdHdvXG4gICAgICAgIC8vIGNhbGxzIHRvICRwb3N0RGlnZXN0IGNhbGxzIHdlIGNhbiBlbnN1cmUgdGhhdCB0aGUgZmxhZyBpcyBlbmFibGVkIGF0IHRoZVxuICAgICAgICAvLyB2ZXJ5IGVuZCBvZiB0aGUgcG9zdCBkaWdlc3QgcXVldWUuIFNpbmNlIGFsbCBvZiB0aGUgYW5pbWF0aW9ucyBpbiAkYW5pbWF0ZVxuICAgICAgICAvLyB1c2UgJHBvc3REaWdlc3QsIGl0J3MgaW1wb3J0YW50IHRoYXQgdGhlIGNvZGUgYmVsb3cgZXhlY3V0ZXMgYXQgdGhlIGVuZC5cbiAgICAgICAgLy8gVGhpcyBiYXNpY2FsbHkgbWVhbnMgdGhhdCB0aGUgcGFnZSBpcyBmdWxseSBkb3dubG9hZGVkIGFuZCBjb21waWxlZCBiZWZvcmVcbiAgICAgICAgLy8gYW55IGFuaW1hdGlvbnMgYXJlIHRyaWdnZXJlZC5cbiAgICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyB3ZSBjaGVjayBmb3IgbnVsbCBkaXJlY3RseSBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgYXBwbGljYXRpb24gYWxyZWFkeSBjYWxsZWRcbiAgICAgICAgICAgIC8vIC5lbmFibGVkKCkgd2l0aCB3aGF0ZXZlciBhcmd1bWVudHMgdGhhdCBpdCBwcm92aWRlZCBpdCB3aXRoXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uc0VuYWJsZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIGNhbGxiYWNrUmVnaXN0cnkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgLy8gcmVtZW1iZXIgdGhhdCB0aGUgY2xhc3NOYW1lRmlsdGVyIGlzIHNldCBkdXJpbmcgdGhlIHByb3ZpZGVyL2NvbmZpZ1xuICAgIC8vIHN0YWdlIHRoZXJlZm9yZSB3ZSBjYW4gb3B0aW1pemUgaGVyZSBhbmQgc2V0dXAgYSBoZWxwZXIgZnVuY3Rpb25cbiAgICB2YXIgY2xhc3NOYW1lRmlsdGVyID0gJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIoKTtcbiAgICB2YXIgaXNBbmltYXRhYmxlQ2xhc3NOYW1lID0gIWNsYXNzTmFtZUZpbHRlclxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGFzc05hbWVGaWx0ZXIudGVzdChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgdmFyIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyA9IGFwcGx5QW5pbWF0aW9uQ2xhc3Nlc0ZhY3RvcnkoJCRqcUxpdGUpO1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBhbmltYXRpb24pIHtcbiAgICAgIHJldHVybiBtZXJnZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgYW5pbWF0aW9uLCB7fSk7XG4gICAgfVxuXG4gICAgLy8gSUU5LTExIGhhcyBubyBtZXRob2QgXCJjb250YWluc1wiIGluIFNWRyBlbGVtZW50IGFuZCBpbiBOb2RlLnByb3RvdHlwZS4gQnVnICMxMDI1OS5cbiAgICB2YXIgY29udGFpbnMgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgfHwgLyoqIEB0aGlzICovIGZ1bmN0aW9uKGFyZykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgIHJldHVybiB0aGlzID09PSBhcmcgfHwgISEodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhcmcpICYgMTYpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBmaW5kQ2FsbGJhY2tzKHRhcmdldFBhcmVudE5vZGUsIHRhcmdldE5vZGUsIGV2ZW50KSB7XG4gICAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuICAgICAgdmFyIGVudHJpZXMgPSBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XTtcbiAgICAgIGlmIChlbnRyaWVzKSB7XG4gICAgICAgIGZvckVhY2goZW50cmllcywgZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICBpZiAoY29udGFpbnMuY2FsbChlbnRyeS5ub2RlLCB0YXJnZXROb2RlKSkge1xuICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGVudHJ5LmNhbGxiYWNrKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSAnbGVhdmUnICYmIGNvbnRhaW5zLmNhbGwoZW50cnkubm9kZSwgdGFyZ2V0UGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChlbnRyeS5jYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyRnJvbVJlZ2lzdHJ5KGxpc3QsIG1hdGNoQ29udGFpbmVyLCBtYXRjaENhbGxiYWNrKSB7XG4gICAgICB2YXIgY29udGFpbmVyTm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShtYXRjaENvbnRhaW5lcik7XG4gICAgICByZXR1cm4gbGlzdC5maWx0ZXIoZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgdmFyIGlzTWF0Y2ggPSBlbnRyeS5ub2RlID09PSBjb250YWluZXJOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIW1hdGNoQ2FsbGJhY2sgfHwgZW50cnkuY2FsbGJhY2sgPT09IG1hdGNoQ2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gIWlzTWF0Y2g7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwRXZlbnRMaXN0ZW5lcnMocGhhc2UsIG5vZGUpIHtcbiAgICAgIGlmIChwaGFzZSA9PT0gJ2Nsb3NlJyAmJiAhbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZCB0byBhIHBhcmVudE5vZGUsIGl0IGhhcyBiZWVuIHJlbW92ZWQgYnlcbiAgICAgICAgLy8gdGhlIGRvbU9wZXJhdGlvbiwgYW5kIHdlIGNhbiBzYWZlbHkgcmVtb3ZlIHRoZSBldmVudCBjYWxsYmFja3NcbiAgICAgICAgJGFuaW1hdGUub2ZmKG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciAkYW5pbWF0ZSA9IHtcbiAgICAgIG9uOiBmdW5jdGlvbihldmVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgbm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShjb250YWluZXIpO1xuICAgICAgICBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XSA9IGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdIHx8IFtdO1xuICAgICAgICBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGNhbGxiYWNrIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAganFMaXRlKGNvbnRhaW5lcikub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvbkRldGFpbHMgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChub2RlKTtcblxuICAgICAgICAgIGlmICghYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhbiBhbmltYXRpb24gb25nb2luZywgdGhlIGNhbGxiYWNrIGNhbGxpbmcgY29kZSB3aWxsIHJlbW92ZVxuICAgICAgICAgICAgLy8gdGhlIGV2ZW50IGxpc3RlbmVycy4gSWYgd2UnZCByZW1vdmUgaGVyZSwgdGhlIGNhbGxiYWNrcyB3b3VsZCBiZSByZW1vdmVkXG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIGFuaW1hdGlvbiBlbmRzXG4gICAgICAgICAgICAkYW5pbWF0ZS5vZmYoZXZlbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmICFpc1N0cmluZyhhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgY29udGFpbmVyID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIGZvciAodmFyIGV2ZW50VHlwZSBpbiBjYWxsYmFja1JlZ2lzdHJ5KSB7XG4gICAgICAgICAgICBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50VHlwZV0gPSBmaWx0ZXJGcm9tUmVnaXN0cnkoY2FsbGJhY2tSZWdpc3RyeVtldmVudFR5cGVdLCBjb250YWluZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbnRyaWVzID0gY2FsbGJhY2tSZWdpc3RyeVtldmVudF07XG4gICAgICAgIGlmICghZW50cmllcykgcmV0dXJuO1xuXG4gICAgICAgIGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IGZpbHRlckZyb21SZWdpc3RyeShlbnRyaWVzLCBjb250YWluZXIsIGNhbGxiYWNrKTtcbiAgICAgIH0sXG5cbiAgICAgIHBpbjogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50RWxlbWVudCkge1xuICAgICAgICBhc3NlcnRBcmcoaXNFbGVtZW50KGVsZW1lbnQpLCAnZWxlbWVudCcsICdub3QgYW4gZWxlbWVudCcpO1xuICAgICAgICBhc3NlcnRBcmcoaXNFbGVtZW50KHBhcmVudEVsZW1lbnQpLCAncGFyZW50RWxlbWVudCcsICdub3QgYW4gZWxlbWVudCcpO1xuICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9QSU5fREFUQSwgcGFyZW50RWxlbWVudCk7XG4gICAgICB9LFxuXG4gICAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgb3B0aW9ucywgZG9tT3BlcmF0aW9uKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmRvbU9wZXJhdGlvbiA9IGRvbU9wZXJhdGlvbjtcbiAgICAgICAgcmV0dXJuIHF1ZXVlQW5pbWF0aW9uKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIHRoaXMgbWV0aG9kIGhhcyBmb3VyIHNpZ25hdHVyZXM6XG4gICAgICAvLyAgKCkgLSBnbG9iYWwgZ2V0dGVyXG4gICAgICAvLyAgKGJvb2wpIC0gZ2xvYmFsIHNldHRlclxuICAgICAgLy8gIChlbGVtZW50KSAtIGVsZW1lbnQgZ2V0dGVyXG4gICAgICAvLyAgKGVsZW1lbnQsIGJvb2wpIC0gZWxlbWVudCBzZXR0ZXI8RjM3PlxuICAgICAgZW5hYmxlZDogZnVuY3Rpb24oZWxlbWVudCwgYm9vbCkge1xuICAgICAgICB2YXIgYXJnQ291bnQgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChhcmdDb3VudCA9PT0gMCkge1xuICAgICAgICAgIC8vICgpIC0gR2xvYmFsIGdldHRlclxuICAgICAgICAgIGJvb2wgPSAhIWFuaW1hdGlvbnNFbmFibGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBoYXNFbGVtZW50ID0gaXNFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgaWYgKCFoYXNFbGVtZW50KSB7XG4gICAgICAgICAgICAvLyAoYm9vbCkgLSBHbG9iYWwgc2V0dGVyXG4gICAgICAgICAgICBib29sID0gYW5pbWF0aW9uc0VuYWJsZWQgPSAhIWVsZW1lbnQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcblxuICAgICAgICAgICAgaWYgKGFyZ0NvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgIC8vIChlbGVtZW50KSAtIEVsZW1lbnQgZ2V0dGVyXG4gICAgICAgICAgICAgIGJvb2wgPSAhZGlzYWJsZWRFbGVtZW50c0xvb2t1cC5nZXQobm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyAoZWxlbWVudCwgYm9vbCkgLSBFbGVtZW50IHNldHRlclxuICAgICAgICAgICAgICBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLnNldChub2RlLCAhYm9vbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiAkYW5pbWF0ZTtcblxuICAgIGZ1bmN0aW9uIHF1ZXVlQW5pbWF0aW9uKG9yaWdpbmFsRWxlbWVudCwgZXZlbnQsIGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAvLyB3ZSBhbHdheXMgbWFrZSBhIGNvcHkgb2YgdGhlIG9wdGlvbnMgc2luY2VcbiAgICAgIC8vIHRoZXJlIHNob3VsZCBuZXZlciBiZSBhbnkgc2lkZSBlZmZlY3RzIG9uXG4gICAgICAvLyB0aGUgaW5wdXQgZGF0YSB3aGVuIHJ1bm5pbmcgYCRhbmltYXRlQ3NzYC5cbiAgICAgIHZhciBvcHRpb25zID0gY29weShpbml0aWFsT3B0aW9ucyk7XG5cbiAgICAgIHZhciBlbGVtZW50ID0gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KG9yaWdpbmFsRWxlbWVudCk7XG4gICAgICB2YXIgbm9kZSA9IGdldERvbU5vZGUoZWxlbWVudCk7XG4gICAgICB2YXIgcGFyZW50Tm9kZSA9IG5vZGUgJiYgbm9kZS5wYXJlbnROb2RlO1xuXG4gICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGlvbk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAgIC8vIHdlIGNyZWF0ZSBhIGZha2UgcnVubmVyIHdpdGggYSB3b3JraW5nIHByb21pc2UuXG4gICAgICAvLyBUaGVzZSBtZXRob2RzIHdpbGwgYmVjb21lIGF2YWlsYWJsZSBhZnRlciB0aGUgZGlnZXN0IGhhcyBwYXNzZWRcbiAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG5cbiAgICAgIC8vIHRoaXMgaXMgdXNlZCB0byB0cmlnZ2VyIGNhbGxiYWNrcyBpbiBwb3N0RGlnZXN0IG1vZGVcbiAgICAgIHZhciBydW5Jbk5leHRQb3N0RGlnZXN0T3JOb3cgPSBwb3N0RGlnZXN0VGFza0ZhY3RvcnkoKTtcblxuICAgICAgaWYgKGlzQXJyYXkob3B0aW9ucy5hZGRDbGFzcykpIHtcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG9wdGlvbnMuYWRkQ2xhc3Muam9pbignICcpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcyAmJiAhaXNTdHJpbmcob3B0aW9ucy5hZGRDbGFzcykpIHtcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KG9wdGlvbnMucmVtb3ZlQ2xhc3MpKSB7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBvcHRpb25zLnJlbW92ZUNsYXNzLmpvaW4oJyAnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MgJiYgIWlzU3RyaW5nKG9wdGlvbnMucmVtb3ZlQ2xhc3MpKSB7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5mcm9tICYmICFpc09iamVjdChvcHRpb25zLmZyb20pKSB7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRvICYmICFpc09iamVjdChvcHRpb25zLnRvKSkge1xuICAgICAgICBvcHRpb25zLnRvID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gdGhlcmUgYXJlIHNpdHVhdGlvbnMgd2hlcmUgYSBkaXJlY3RpdmUgaXNzdWVzIGFuIGFuaW1hdGlvbiBmb3JcbiAgICAgIC8vIGEganFMaXRlIHdyYXBwZXIgdGhhdCBjb250YWlucyBvbmx5IGNvbW1lbnQgbm9kZXMuLi4gSWYgdGhpc1xuICAgICAgLy8gaGFwcGVucyB0aGVuIHRoZXJlIGlzIG5vIHdheSB3ZSBjYW4gcGVyZm9ybSBhbiBhbmltYXRpb25cbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3NOYW1lID0gW25vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpLCBvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzXS5qb2luKCcgJyk7XG4gICAgICBpZiAoIWlzQW5pbWF0YWJsZUNsYXNzTmFtZShjbGFzc05hbWUpKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc1N0cnVjdHVyYWwgPSBbJ2VudGVyJywgJ21vdmUnLCAnbGVhdmUnXS5pbmRleE9mKGV2ZW50KSA+PSAwO1xuXG4gICAgICB2YXIgZG9jdW1lbnRIaWRkZW4gPSAkJGlzRG9jdW1lbnRIaWRkZW4oKTtcblxuICAgICAgLy8gdGhpcyBpcyBhIGhhcmQgZGlzYWJsZSBvZiBhbGwgYW5pbWF0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uIG9yIG9uXG4gICAgICAvLyB0aGUgZWxlbWVudCBpdHNlbGYsIHRoZXJlZm9yZSAgdGhlcmUgaXMgbm8gbmVlZCB0byBjb250aW51ZSBmdXJ0aGVyXG4gICAgICAvLyBwYXN0IHRoaXMgcG9pbnQgaWYgbm90IGVuYWJsZWRcbiAgICAgIC8vIEFuaW1hdGlvbnMgYXJlIGFsc28gZGlzYWJsZWQgaWYgdGhlIGRvY3VtZW50IGlzIGN1cnJlbnRseSBoaWRkZW4gKHBhZ2UgaXMgbm90IHZpc2libGVcbiAgICAgIC8vIHRvIHRoZSB1c2VyKSwgYmVjYXVzZSBicm93c2VycyBzbG93IGRvd24gb3IgZG8gbm90IGZsdXNoIGNhbGxzIHRvIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgdmFyIHNraXBBbmltYXRpb25zID0gIWFuaW1hdGlvbnNFbmFibGVkIHx8IGRvY3VtZW50SGlkZGVuIHx8IGRpc2FibGVkRWxlbWVudHNMb29rdXAuZ2V0KG5vZGUpO1xuICAgICAgdmFyIGV4aXN0aW5nQW5pbWF0aW9uID0gKCFza2lwQW5pbWF0aW9ucyAmJiBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChub2RlKSkgfHwge307XG4gICAgICB2YXIgaGFzRXhpc3RpbmdBbmltYXRpb24gPSAhIWV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlO1xuXG4gICAgICAvLyB0aGVyZSBpcyBubyBwb2ludCBpbiB0cmF2ZXJzaW5nIHRoZSBzYW1lIGNvbGxlY3Rpb24gb2YgcGFyZW50IGFuY2VzdG9ycyBpZiBhIGZvbGxvd3VwXG4gICAgICAvLyBhbmltYXRpb24gd2lsbCBiZSBydW4gb24gdGhlIHNhbWUgZWxlbWVudCB0aGF0IGFscmVhZHkgZGlkIGFsbCB0aGF0IGNoZWNraW5nIHdvcmtcbiAgICAgIGlmICghc2tpcEFuaW1hdGlvbnMgJiYgKCFoYXNFeGlzdGluZ0FuaW1hdGlvbiB8fCBleGlzdGluZ0FuaW1hdGlvbi5zdGF0ZSAhPT0gUFJFX0RJR0VTVF9TVEFURSkpIHtcbiAgICAgICAgc2tpcEFuaW1hdGlvbnMgPSAhYXJlQW5pbWF0aW9uc0FsbG93ZWQobm9kZSwgcGFyZW50Tm9kZSwgZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2tpcEFuaW1hdGlvbnMpIHtcbiAgICAgICAgLy8gQ2FsbGJhY2tzIHNob3VsZCBmaXJlIGV2ZW4gaWYgdGhlIGRvY3VtZW50IGlzIGhpZGRlbiAocmVncmVzc2lvbiBmaXggZm9yIGlzc3VlICMxNDEyMClcbiAgICAgICAgaWYgKGRvY3VtZW50SGlkZGVuKSBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCAnc3RhcnQnKTtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgaWYgKGRvY3VtZW50SGlkZGVuKSBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCAnY2xvc2UnKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RydWN0dXJhbCkge1xuICAgICAgICBjbG9zZUNoaWxkQW5pbWF0aW9ucyhub2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld0FuaW1hdGlvbiA9IHtcbiAgICAgICAgc3RydWN0dXJhbDogaXNTdHJ1Y3R1cmFsLFxuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIGFkZENsYXNzOiBvcHRpb25zLmFkZENsYXNzLFxuICAgICAgICByZW1vdmVDbGFzczogb3B0aW9ucy5yZW1vdmVDbGFzcyxcbiAgICAgICAgY2xvc2U6IGNsb3NlLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBydW5uZXI6IHJ1bm5lclxuICAgICAgfTtcblxuICAgICAgaWYgKGhhc0V4aXN0aW5nQW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBza2lwQW5pbWF0aW9uRmxhZyA9IGlzQWxsb3dlZCgnc2tpcCcsIG5ld0FuaW1hdGlvbiwgZXhpc3RpbmdBbmltYXRpb24pO1xuICAgICAgICBpZiAoc2tpcEFuaW1hdGlvbkZsYWcpIHtcbiAgICAgICAgICBpZiAoZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUpIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXJnZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgZXhpc3RpbmdBbmltYXRpb24sIG5ld0FuaW1hdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBbmltYXRpb24ucnVubmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRmxhZyA9IGlzQWxsb3dlZCgnY2FuY2VsJywgbmV3QW5pbWF0aW9uLCBleGlzdGluZ0FuaW1hdGlvbik7XG4gICAgICAgIGlmIChjYW5jZWxBbmltYXRpb25GbGFnKSB7XG4gICAgICAgICAgaWYgKGV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlID09PSBSVU5OSU5HX1NUQVRFKSB7XG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgZW5kIHRoZSBhbmltYXRpb24gcmlnaHQgYXdheSBhbmQgaXQgaXMgc2FmZVxuICAgICAgICAgICAgLy8gdG8gZG8gc28gc2luY2UgdGhlIGFuaW1hdGlvbiBpcyBhbHJlYWR5IHJ1bm5pbmcgYW5kIHRoZVxuICAgICAgICAgICAgLy8gcnVubmVyIGNhbGxiYWNrIGNvZGUgd2lsbCBydW4gaW4gYXN5bmNcbiAgICAgICAgICAgIGV4aXN0aW5nQW5pbWF0aW9uLnJ1bm5lci5lbmQoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGV4aXN0aW5nQW5pbWF0aW9uLnN0cnVjdHVyYWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgbWVhbnMgdGhhdCB0aGUgYW5pbWF0aW9uIGlzIHF1ZXVlZCBpbnRvIGEgZGlnZXN0LCBidXRcbiAgICAgICAgICAgIC8vIGhhc24ndCBzdGFydGVkIHlldC4gVGhlcmVmb3JlIGl0IGlzIHNhZmUgdG8gcnVuIHRoZSBjbG9zZVxuICAgICAgICAgICAgLy8gbWV0aG9kIHdoaWNoIHdpbGwgY2FsbCB0aGUgcnVubmVyIG1ldGhvZHMgaW4gYXN5bmMuXG4gICAgICAgICAgICBleGlzdGluZ0FuaW1hdGlvbi5jbG9zZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgbWVyZ2UgdGhlIG5ldyBhbmltYXRpb24gb3B0aW9ucyBpbnRvIGV4aXN0aW5nIGFuaW1hdGlvbiBvcHRpb25zXG4gICAgICAgICAgICBtZXJnZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgZXhpc3RpbmdBbmltYXRpb24sIG5ld0FuaW1hdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0FuaW1hdGlvbi5ydW5uZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGEgam9pbmVkIGFuaW1hdGlvbiBtZWFucyB0aGF0IHRoaXMgYW5pbWF0aW9uIHdpbGwgdGFrZSBvdmVyIHRoZSBleGlzdGluZyBvbmVcbiAgICAgICAgICAvLyBzbyBhbiBleGFtcGxlIHdvdWxkIGludm9sdmUgYSBsZWF2ZSBhbmltYXRpb24gdGFraW5nIG92ZXIgYW4gZW50ZXIuIFRoZW4gd2hlblxuICAgICAgICAgIC8vIHRoZSBwb3N0RGlnZXN0IGtpY2tzIGluIHRoZSBlbnRlciB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICAgICAgdmFyIGpvaW5BbmltYXRpb25GbGFnID0gaXNBbGxvd2VkKCdqb2luJywgbmV3QW5pbWF0aW9uLCBleGlzdGluZ0FuaW1hdGlvbik7XG4gICAgICAgICAgaWYgKGpvaW5BbmltYXRpb25GbGFnKSB7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUpIHtcbiAgICAgICAgICAgICAgbm9ybWFsaXplQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBuZXdBbmltYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXBwbHlHZW5lcmF0ZWRQcmVwYXJhdGlvbkNsYXNzZXMoZWxlbWVudCwgaXNTdHJ1Y3R1cmFsID8gZXZlbnQgOiBudWxsLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgICBldmVudCA9IG5ld0FuaW1hdGlvbi5ldmVudCA9IGV4aXN0aW5nQW5pbWF0aW9uLmV2ZW50O1xuICAgICAgICAgICAgICBvcHRpb25zID0gbWVyZ2VBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGV4aXN0aW5nQW5pbWF0aW9uLCBuZXdBbmltYXRpb24pO1xuXG4gICAgICAgICAgICAgIC8vd2UgcmV0dXJuIHRoZSBzYW1lIHJ1bm5lciBzaW5jZSBvbmx5IHRoZSBvcHRpb24gdmFsdWVzIG9mIHRoaXMgYW5pbWF0aW9uIHdpbGxcbiAgICAgICAgICAgICAgLy9iZSBmZWQgaW50byB0aGUgYGV4aXN0aW5nQW5pbWF0aW9uYC5cbiAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQW5pbWF0aW9uLnJ1bm5lcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vcm1hbGl6YXRpb24gaW4gdGhpcyBjYXNlIG1lYW5zIHRoYXQgaXQgcmVtb3ZlcyByZWR1bmRhbnQgQ1NTIGNsYXNzZXMgdGhhdFxuICAgICAgICAvLyBhbHJlYWR5IGV4aXN0IChhZGRDbGFzcykgb3IgZG8gbm90IGV4aXN0IChyZW1vdmVDbGFzcykgb24gdGhlIGVsZW1lbnRcbiAgICAgICAgbm9ybWFsaXplQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBuZXdBbmltYXRpb24pO1xuICAgICAgfVxuXG4gICAgICAvLyB3aGVuIHRoZSBvcHRpb25zIGFyZSBtZXJnZWQgYW5kIGNsZWFuZWQgdXAgd2UgbWF5IGVuZCB1cCBub3QgaGF2aW5nIHRvIGRvXG4gICAgICAvLyBhbiBhbmltYXRpb24gYXQgYWxsLCB0aGVyZWZvcmUgd2Ugc2hvdWxkIGNoZWNrIHRoaXMgYmVmb3JlIGlzc3VpbmcgYSBwb3N0XG4gICAgICAvLyBkaWdlc3QgY2FsbGJhY2suIFN0cnVjdHVyYWwgYW5pbWF0aW9ucyB3aWxsIGFsd2F5cyBydW4gbm8gbWF0dGVyIHdoYXQuXG4gICAgICB2YXIgaXNWYWxpZEFuaW1hdGlvbiA9IG5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsO1xuICAgICAgaWYgKCFpc1ZhbGlkQW5pbWF0aW9uKSB7XG4gICAgICAgIC8vIGFuaW1hdGUgKGZyb20vdG8pIGNhbiBiZSBxdWlja2x5IGNoZWNrZWQgZmlyc3QsIG90aGVyd2lzZSB3ZSBjaGVjayBpZiBhbnkgY2xhc3NlcyBhcmUgcHJlc2VudFxuICAgICAgICBpc1ZhbGlkQW5pbWF0aW9uID0gKG5ld0FuaW1hdGlvbi5ldmVudCA9PT0gJ2FuaW1hdGUnICYmIE9iamVjdC5rZXlzKG5ld0FuaW1hdGlvbi5vcHRpb25zLnRvIHx8IHt9KS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGhhc0FuaW1hdGlvbkNsYXNzZXMobmV3QW5pbWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1ZhbGlkQW5pbWF0aW9uKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIGNsZWFyRWxlbWVudEFuaW1hdGlvblN0YXRlKG5vZGUpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGUgY291bnRlciBrZWVwcyB0cmFjayBvZiBjYW5jZWxsZWQgYW5pbWF0aW9uc1xuICAgICAgdmFyIGNvdW50ZXIgPSAoZXhpc3RpbmdBbmltYXRpb24uY291bnRlciB8fCAwKSArIDE7XG4gICAgICBuZXdBbmltYXRpb24uY291bnRlciA9IGNvdW50ZXI7XG5cbiAgICAgIG1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUobm9kZSwgUFJFX0RJR0VTVF9TVEFURSwgbmV3QW5pbWF0aW9uKTtcblxuICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRoYXQgdGhlIERPTSBub2RlcyBpbnNpZGUgYG9yaWdpbmFsRWxlbWVudGAgaGF2ZSBiZWVuIHJlcGxhY2VkLiBUaGlzIGNhblxuICAgICAgICAvLyBoYXBwZW4gaWYgdGhlIGFuaW1hdGVkIGVsZW1lbnQgaXMgYSB0cmFuc2NsdWRlZCBjbG9uZSBhbmQgYWxzbyBoYXMgYSBgdGVtcGxhdGVVcmxgXG4gICAgICAgIC8vIGRpcmVjdGl2ZSBvbiBpdC4gVGhlcmVmb3JlLCB3ZSBtdXN0IHJlY3JlYXRlIGBlbGVtZW50YCBpbiBvcmRlciB0byBpbnRlcmFjdCB3aXRoIHRoZVxuICAgICAgICAvLyBhY3R1YWwgRE9NIG5vZGVzLlxuICAgICAgICAvLyBOb3RlOiBXZSBzdGlsbCBuZWVkIHRvIHVzZSB0aGUgb2xkIGBub2RlYCBmb3IgY2VydGFpbiB0aGluZ3MsIHN1Y2ggYXMgbG9va2luZyB1cCBpblxuICAgICAgICAvLyAgICAgICBIYXNoTWFwcyB3aGVyZSBpdCB3YXMgdXNlZCBhcyB0aGUga2V5LlxuXG4gICAgICAgIGVsZW1lbnQgPSBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQob3JpZ2luYWxFbGVtZW50KTtcblxuICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KG5vZGUpO1xuICAgICAgICB2YXIgYW5pbWF0aW9uQ2FuY2VsbGVkID0gIWFuaW1hdGlvbkRldGFpbHM7XG4gICAgICAgIGFuaW1hdGlvbkRldGFpbHMgPSBhbmltYXRpb25EZXRhaWxzIHx8IHt9O1xuXG4gICAgICAgIC8vIGlmIGFkZENsYXNzL3JlbW92ZUNsYXNzIGlzIGNhbGxlZCBiZWZvcmUgc29tZXRoaW5nIGxpa2UgZW50ZXIgdGhlbiB0aGVcbiAgICAgICAgLy8gcmVnaXN0ZXJlZCBwYXJlbnQgZWxlbWVudCBtYXkgbm90IGJlIHByZXNlbnQuIFRoZSBjb2RlIGJlbG93IHdpbGwgZW5zdXJlXG4gICAgICAgIC8vIHRoYXQgYSBmaW5hbCB2YWx1ZSBmb3IgcGFyZW50IGVsZW1lbnQgaXMgb2J0YWluZWRcbiAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudCgpIHx8IFtdO1xuXG4gICAgICAgIC8vIGFuaW1hdGUvc3RydWN0dXJhbC9jbGFzcy1iYXNlZCBhbmltYXRpb25zIGFsbCBoYXZlIHJlcXVpcmVtZW50cy4gT3RoZXJ3aXNlIHRoZXJlXG4gICAgICAgIC8vIGlzIG5vIHBvaW50IGluIHBlcmZvcm1pbmcgYW4gYW5pbWF0aW9uLiBUaGUgcGFyZW50IG5vZGUgbXVzdCBhbHNvIGJlIHNldC5cbiAgICAgICAgdmFyIGlzVmFsaWRBbmltYXRpb24gPSBwYXJlbnRFbGVtZW50Lmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKGFuaW1hdGlvbkRldGFpbHMuZXZlbnQgPT09ICdhbmltYXRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYW5pbWF0aW9uRGV0YWlscy5zdHJ1Y3R1cmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBoYXNBbmltYXRpb25DbGFzc2VzKGFuaW1hdGlvbkRldGFpbHMpKTtcblxuICAgICAgICAvLyB0aGlzIG1lYW5zIHRoYXQgdGhlIHByZXZpb3VzIGFuaW1hdGlvbiB3YXMgY2FuY2VsbGVkXG4gICAgICAgIC8vIGV2ZW4gaWYgdGhlIGZvbGxvdy11cCBhbmltYXRpb24gaXMgdGhlIHNhbWUgZXZlbnRcbiAgICAgICAgaWYgKGFuaW1hdGlvbkNhbmNlbGxlZCB8fCBhbmltYXRpb25EZXRhaWxzLmNvdW50ZXIgIT09IGNvdW50ZXIgfHwgIWlzVmFsaWRBbmltYXRpb24pIHtcbiAgICAgICAgICAvLyBpZiBhbm90aGVyIGFuaW1hdGlvbiBkaWQgbm90IHRha2Ugb3ZlciB0aGVuIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgdGhhdCB0aGUgZG9tT3BlcmF0aW9uIGFuZCBvcHRpb25zIGFyZVxuICAgICAgICAgIC8vIGhhbmRsZWQgYWNjb3JkaW5nbHlcbiAgICAgICAgICBpZiAoYW5pbWF0aW9uQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBhcHBseUFuaW1hdGlvbkNsYXNzZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpZiB0aGUgZXZlbnQgY2hhbmdlZCBmcm9tIHNvbWV0aGluZyBsaWtlIGVudGVyIHRvIGxlYXZlIHRoZW4gd2UgZG9cbiAgICAgICAgICAvLyBpdCwgb3RoZXJ3aXNlIGlmIGl0J3MgdGhlIHNhbWUgdGhlbiB0aGUgZW5kIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHRvb1xuICAgICAgICAgIGlmIChhbmltYXRpb25DYW5jZWxsZWQgfHwgKGlzU3RydWN0dXJhbCAmJiBhbmltYXRpb25EZXRhaWxzLmV2ZW50ICE9PSBldmVudCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZG9tT3BlcmF0aW9uKCk7XG4gICAgICAgICAgICBydW5uZXIuZW5kKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGVsZW1lbnQgYW5pbWF0aW9uIHdhcyBub3QgY2FuY2VsbGVkIG9yIGEgZm9sbG93LXVwIGFuaW1hdGlvblxuICAgICAgICAgIC8vIGlzbid0IGFsbG93ZWQgdG8gYW5pbWF0ZSBmcm9tIGhlcmUgdGhlbiB3ZSBuZWVkIHRvIGNsZWFyIHRoZSBzdGF0ZSBvZiB0aGUgZWxlbWVudFxuICAgICAgICAgIC8vIHNvIHRoYXQgYW55IGZ1dHVyZSBhbmltYXRpb25zIHdvbid0IHJlYWQgdGhlIGV4cGlyZWQgYW5pbWF0aW9uIGRhdGEuXG4gICAgICAgICAgaWYgKCFpc1ZhbGlkQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBjbGVhckVsZW1lbnRBbmltYXRpb25TdGF0ZShub2RlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzIGNvbWJpbmVkIG11bHRpcGxlIGNsYXNzIHRvIGFkZENsYXNzIC8gcmVtb3ZlQ2xhc3MgaW50byBhIHNldENsYXNzIGV2ZW50XG4gICAgICAgIC8vIHNvIGxvbmcgYXMgYSBzdHJ1Y3R1cmFsIGV2ZW50IGRpZCBub3QgdGFrZSBvdmVyIHRoZSBhbmltYXRpb25cbiAgICAgICAgZXZlbnQgPSAhYW5pbWF0aW9uRGV0YWlscy5zdHJ1Y3R1cmFsICYmIGhhc0FuaW1hdGlvbkNsYXNzZXMoYW5pbWF0aW9uRGV0YWlscywgdHJ1ZSlcbiAgICAgICAgICAgID8gJ3NldENsYXNzJ1xuICAgICAgICAgICAgOiBhbmltYXRpb25EZXRhaWxzLmV2ZW50O1xuXG4gICAgICAgIG1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUobm9kZSwgUlVOTklOR19TVEFURSk7XG4gICAgICAgIHZhciByZWFsUnVubmVyID0gJCRhbmltYXRpb24oZWxlbWVudCwgZXZlbnQsIGFuaW1hdGlvbkRldGFpbHMub3B0aW9ucyk7XG5cbiAgICAgICAgLy8gdGhpcyB3aWxsIHVwZGF0ZSB0aGUgcnVubmVyJ3MgZmxvdy1jb250cm9sIGV2ZW50cyBiYXNlZCBvblxuICAgICAgICAvLyB0aGUgYHJlYWxSdW5uZXJgIG9iamVjdC5cbiAgICAgICAgcnVubmVyLnNldEhvc3QocmVhbFJ1bm5lcik7XG4gICAgICAgIG5vdGlmeVByb2dyZXNzKHJ1bm5lciwgZXZlbnQsICdzdGFydCcsIHt9KTtcblxuICAgICAgICByZWFsUnVubmVyLmRvbmUoZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgY2xvc2UoIXN0YXR1cyk7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvbkRldGFpbHMgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChub2RlKTtcbiAgICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscyAmJiBhbmltYXRpb25EZXRhaWxzLmNvdW50ZXIgPT09IGNvdW50ZXIpIHtcbiAgICAgICAgICAgIGNsZWFyRWxlbWVudEFuaW1hdGlvblN0YXRlKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCAnY2xvc2UnLCB7fSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBydW5uZXI7XG5cbiAgICAgIGZ1bmN0aW9uIG5vdGlmeVByb2dyZXNzKHJ1bm5lciwgZXZlbnQsIHBoYXNlLCBkYXRhKSB7XG4gICAgICAgIHJ1bkluTmV4dFBvc3REaWdlc3RPck5vdyhmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gZmluZENhbGxiYWNrcyhwYXJlbnROb2RlLCBub2RlLCBldmVudCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdCBvcHRpbWl6ZSB0aGlzIGNhbGwgaGVyZSB0byBSQUYgYmVjYXVzZVxuICAgICAgICAgICAgLy8gd2UgZG9uJ3Qga25vdyBob3cgaGVhdnkgdGhlIGNhbGxiYWNrIGNvZGUgaGVyZSB3aWxsXG4gICAgICAgICAgICAvLyBiZSBhbmQgaWYgdGhpcyBjb2RlIGlzIGJ1ZmZlcmVkIHRoZW4gdGhpcyBjYW5cbiAgICAgICAgICAgIC8vIGxlYWQgdG8gYSBwZXJmb3JtYW5jZSByZWdyZXNzaW9uLlxuICAgICAgICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGZvckVhY2goY2FsbGJhY2tzLCBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnQsIHBoYXNlLCBkYXRhKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNsZWFudXBFdmVudExpc3RlbmVycyhwaGFzZSwgbm9kZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYW51cEV2ZW50TGlzdGVuZXJzKHBoYXNlLCBub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBydW5uZXIucHJvZ3Jlc3MoZXZlbnQsIHBoYXNlLCBkYXRhKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvc2UocmVqZWN0KSB7XG4gICAgICAgIGNsZWFyR2VuZXJhdGVkQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcbiAgICAgICAgcnVubmVyLmNvbXBsZXRlKCFyZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlQ2hpbGRBbmltYXRpb25zKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgnWycgKyBOR19BTklNQVRFX0FUVFJfTkFNRSArICddJyk7XG4gICAgICBmb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBwYXJzZUludChjaGlsZC5nZXRBdHRyaWJ1dGUoTkdfQU5JTUFURV9BVFRSX05BTUUpLCAxMCk7XG4gICAgICAgIHZhciBhbmltYXRpb25EZXRhaWxzID0gYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQoY2hpbGQpO1xuICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgUlVOTklOR19TVEFURTpcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGV0YWlscy5ydW5uZXIuZW5kKCk7XG4gICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGNhc2UgUFJFX0RJR0VTVF9TVEFURTpcbiAgICAgICAgICAgICAgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5kZWxldGUoY2hpbGQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyRWxlbWVudEFuaW1hdGlvblN0YXRlKG5vZGUpIHtcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKE5HX0FOSU1BVEVfQVRUUl9OQU1FKTtcbiAgICAgIGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZGVsZXRlKG5vZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZm4gcmV0dXJucyBmYWxzZSBpZiBhbnkgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAgICAqIGEpIGFuaW1hdGlvbnMgb24gYW55IHBhcmVudCBlbGVtZW50IGFyZSBkaXNhYmxlZCwgYW5kIGFuaW1hdGlvbnMgb24gdGhlIGVsZW1lbnQgYXJlbid0IGV4cGxpY2l0bHkgYWxsb3dlZFxuICAgICAqIGIpIGEgcGFyZW50IGVsZW1lbnQgaGFzIGFuIG9uZ29pbmcgc3RydWN0dXJhbCBhbmltYXRpb24sIGFuZCBhbmltYXRlQ2hpbGRyZW4gaXMgZmFsc2VcbiAgICAgKiBjKSB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiB0aGUgYm9keVxuICAgICAqIGQpIHRoZSBlbGVtZW50IGlzIG5vdCBhIGNoaWxkIG9mIHRoZSAkcm9vdEVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcmVBbmltYXRpb25zQWxsb3dlZChub2RlLCBwYXJlbnROb2RlLCBldmVudCkge1xuICAgICAgdmFyIGJvZHlOb2RlID0gJGRvY3VtZW50WzBdLmJvZHk7XG4gICAgICB2YXIgcm9vdE5vZGUgPSBnZXREb21Ob2RlKCRyb290RWxlbWVudCk7XG5cbiAgICAgIHZhciBib2R5Tm9kZURldGVjdGVkID0gKG5vZGUgPT09IGJvZHlOb2RlKSB8fCBub2RlLm5vZGVOYW1lID09PSAnSFRNTCc7XG4gICAgICB2YXIgcm9vdE5vZGVEZXRlY3RlZCA9IChub2RlID09PSByb290Tm9kZSk7XG4gICAgICB2YXIgcGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBlbGVtZW50RGlzYWJsZWQgPSBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLmdldChub2RlKTtcbiAgICAgIHZhciBhbmltYXRlQ2hpbGRyZW47XG5cbiAgICAgIHZhciBwYXJlbnRIb3N0ID0ganFMaXRlLmRhdGEobm9kZSwgTkdfQU5JTUFURV9QSU5fREFUQSk7XG4gICAgICBpZiAocGFyZW50SG9zdCkge1xuICAgICAgICBwYXJlbnROb2RlID0gZ2V0RG9tTm9kZShwYXJlbnRIb3N0KTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgaWYgKCFyb290Tm9kZURldGVjdGVkKSB7XG4gICAgICAgICAgLy8gYW5ndWxhciBkb2Vzbid0IHdhbnQgdG8gYXR0ZW1wdCB0byBhbmltYXRlIGVsZW1lbnRzIG91dHNpZGUgb2YgdGhlIGFwcGxpY2F0aW9uXG4gICAgICAgICAgLy8gdGhlcmVmb3JlIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgdGhlIHJvb3RFbGVtZW50IGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgICAgICByb290Tm9kZURldGVjdGVkID0gKHBhcmVudE5vZGUgPT09IHJvb3ROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJlbnROb2RlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAvLyBubyBwb2ludCBpbiBpbnNwZWN0aW5nIHRoZSAjZG9jdW1lbnQgZWxlbWVudFxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRldGFpbHMgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChwYXJlbnROb2RlKSB8fCB7fTtcbiAgICAgICAgLy8gZWl0aGVyIGFuIGVudGVyLCBsZWF2ZSBvciBtb3ZlIGFuaW1hdGlvbiB3aWxsIGNvbW1lbmNlXG4gICAgICAgIC8vIHRoZXJlZm9yZSB3ZSBjYW4ndCBhbGxvdyBhbnkgYW5pbWF0aW9ucyB0byB0YWtlIHBsYWNlXG4gICAgICAgIC8vIGJ1dCBpZiBhIHBhcmVudCBhbmltYXRpb24gaXMgY2xhc3MtYmFzZWQgdGhlbiB0aGF0J3Mgb2tcbiAgICAgICAgaWYgKCFwYXJlbnRBbmltYXRpb25EZXRlY3RlZCkge1xuICAgICAgICAgIHZhciBwYXJlbnROb2RlRGlzYWJsZWQgPSBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLmdldChwYXJlbnROb2RlKTtcblxuICAgICAgICAgIGlmIChwYXJlbnROb2RlRGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbWVudERpc2FibGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gZGlzYWJsZSBhbmltYXRpb25zIGlmIHRoZSB1c2VyIGhhc24ndCBleHBsaWNpdGx5IGVuYWJsZWQgYW5pbWF0aW9ucyBvbiB0aGVcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgZWxlbWVudFxuICAgICAgICAgICAgZWxlbWVudERpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGVsZW1lbnQgaXMgZGlzYWJsZWQgdmlhIHBhcmVudCBlbGVtZW50LCBubyBuZWVkIHRvIGNoZWNrIGFueXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50Tm9kZURpc2FibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZWxlbWVudERpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudEFuaW1hdGlvbkRldGVjdGVkID0gZGV0YWlscy5zdHJ1Y3R1cmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGFuaW1hdGVDaGlsZHJlbikgfHwgYW5pbWF0ZUNoaWxkcmVuID09PSB0cnVlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0ganFMaXRlLmRhdGEocGFyZW50Tm9kZSwgTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBKTtcbiAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgYW5pbWF0ZUNoaWxkcmVuID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBjb250aW51ZSB0cmF2ZXJzaW5nIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgaWYgKHBhcmVudEFuaW1hdGlvbkRldGVjdGVkICYmIGFuaW1hdGVDaGlsZHJlbiA9PT0gZmFsc2UpIGJyZWFrO1xuXG4gICAgICAgIGlmICghYm9keU5vZGVEZXRlY3RlZCkge1xuICAgICAgICAgIC8vIHdlIGFsc28gbmVlZCB0byBlbnN1cmUgdGhhdCB0aGUgZWxlbWVudCBpcyBvciB3aWxsIGJlIGEgcGFydCBvZiB0aGUgYm9keSBlbGVtZW50XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIGl0IGlzIHBvaW50bGVzcyB0byBldmVuIGlzc3VlIGFuIGFuaW1hdGlvbiB0byBiZSByZW5kZXJlZFxuICAgICAgICAgIGJvZHlOb2RlRGV0ZWN0ZWQgPSAocGFyZW50Tm9kZSA9PT0gYm9keU5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlOb2RlRGV0ZWN0ZWQgJiYgcm9vdE5vZGVEZXRlY3RlZCkge1xuICAgICAgICAgIC8vIElmIGJvdGggYm9keSBhbmQgcm9vdCBoYXZlIGJlZW4gZm91bmQsIGFueSBvdGhlciBjaGVja3MgYXJlIHBvaW50bGVzcyxcbiAgICAgICAgICAvLyBhcyBubyBhbmltYXRpb24gZGF0YSBzaG91bGQgbGl2ZSBvdXRzaWRlIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyb290Tm9kZURldGVjdGVkKSB7XG4gICAgICAgICAgLy8gSWYgYHJvb3ROb2RlYCBpcyBub3QgZGV0ZWN0ZWQsIGNoZWNrIGlmIGBwYXJlbnROb2RlYCBpcyBwaW5uZWQgdG8gYW5vdGhlciBlbGVtZW50XG4gICAgICAgICAgcGFyZW50SG9zdCA9IGpxTGl0ZS5kYXRhKHBhcmVudE5vZGUsIE5HX0FOSU1BVEVfUElOX0RBVEEpO1xuICAgICAgICAgIGlmIChwYXJlbnRIb3N0KSB7XG4gICAgICAgICAgICAvLyBUaGUgcGluIHRhcmdldCBlbGVtZW50IGJlY29tZXMgdGhlIG5leHQgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgICAgIHBhcmVudE5vZGUgPSBnZXREb21Ob2RlKHBhcmVudEhvc3QpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFsbG93QW5pbWF0aW9uID0gKCFwYXJlbnRBbmltYXRpb25EZXRlY3RlZCB8fCBhbmltYXRlQ2hpbGRyZW4pICYmIGVsZW1lbnREaXNhYmxlZCAhPT0gdHJ1ZTtcbiAgICAgIHJldHVybiBhbGxvd0FuaW1hdGlvbiAmJiByb290Tm9kZURldGVjdGVkICYmIGJvZHlOb2RlRGV0ZWN0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFya0VsZW1lbnRBbmltYXRpb25TdGF0ZShub2RlLCBzdGF0ZSwgZGV0YWlscykge1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMgfHwge307XG4gICAgICBkZXRhaWxzLnN0YXRlID0gc3RhdGU7XG5cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKE5HX0FOSU1BVEVfQVRUUl9OQU1FLCBzdGF0ZSk7XG5cbiAgICAgIHZhciBvbGRWYWx1ZSA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KG5vZGUpO1xuICAgICAgdmFyIG5ld1ZhbHVlID0gb2xkVmFsdWVcbiAgICAgICAgICA/IGV4dGVuZChvbGRWYWx1ZSwgZGV0YWlscylcbiAgICAgICAgICA6IGRldGFpbHM7XG4gICAgICBhY3RpdmVBbmltYXRpb25zTG9va3VwLnNldChub2RlLCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XTtcbn1dO1xuXG4vKiBleHBvcnRlZCAkJEFuaW1hdGlvblByb3ZpZGVyICovXG5cbnZhciAkJEFuaW1hdGlvblByb3ZpZGVyID0gWyckYW5pbWF0ZVByb3ZpZGVyJywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcbiAgdmFyIE5HX0FOSU1BVEVfUkVGX0FUVFIgPSAnbmctYW5pbWF0ZS1yZWYnO1xuXG4gIHZhciBkcml2ZXJzID0gdGhpcy5kcml2ZXJzID0gW107XG5cbiAgdmFyIFJVTk5FUl9TVE9SQUdFX0tFWSA9ICckJGFuaW1hdGlvblJ1bm5lcic7XG5cbiAgZnVuY3Rpb24gc2V0UnVubmVyKGVsZW1lbnQsIHJ1bm5lcikge1xuICAgIGVsZW1lbnQuZGF0YShSVU5ORVJfU1RPUkFHRV9LRVksIHJ1bm5lcik7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVSdW5uZXIoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucmVtb3ZlRGF0YShSVU5ORVJfU1RPUkFHRV9LRVkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UnVubmVyKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5kYXRhKFJVTk5FUl9TVE9SQUdFX0tFWSk7XG4gIH1cblxuICB0aGlzLiRnZXQgPSBbJyQkanFMaXRlJywgJyRyb290U2NvcGUnLCAnJGluamVjdG9yJywgJyQkQW5pbWF0ZVJ1bm5lcicsICckJE1hcCcsICckJHJBRlNjaGVkdWxlcicsXG4gICAgICAgZnVuY3Rpb24oJCRqcUxpdGUsICAgJHJvb3RTY29wZSwgICAkaW5qZWN0b3IsICAgJCRBbmltYXRlUnVubmVyLCAgICQkTWFwLCAgICQkckFGU2NoZWR1bGVyKSB7XG5cbiAgICB2YXIgYW5pbWF0aW9uUXVldWUgPSBbXTtcbiAgICB2YXIgYXBwbHlBbmltYXRpb25DbGFzc2VzID0gYXBwbHlBbmltYXRpb25DbGFzc2VzRmFjdG9yeSgkJGpxTGl0ZSk7XG5cbiAgICBmdW5jdGlvbiBzb3J0QW5pbWF0aW9ucyhhbmltYXRpb25zKSB7XG4gICAgICB2YXIgdHJlZSA9IHsgY2hpbGRyZW46IFtdIH07XG4gICAgICB2YXIgaSwgbG9va3VwID0gbmV3ICQkTWFwKCk7XG5cbiAgICAgIC8vIHRoaXMgaXMgZG9uZSBmaXJzdCBiZWZvcmVoYW5kIHNvIHRoYXQgdGhlIG1hcFxuICAgICAgLy8gaXMgZmlsbGVkIHdpdGggYSBsaXN0IG9mIHRoZSBlbGVtZW50cyB0aGF0IHdpbGwgYmUgYW5pbWF0ZWRcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhbmltYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBhbmltYXRpb24gPSBhbmltYXRpb25zW2ldO1xuICAgICAgICBsb29rdXAuc2V0KGFuaW1hdGlvbi5kb21Ob2RlLCBhbmltYXRpb25zW2ldID0ge1xuICAgICAgICAgIGRvbU5vZGU6IGFuaW1hdGlvbi5kb21Ob2RlLFxuICAgICAgICAgIGZuOiBhbmltYXRpb24uZm4sXG4gICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcm9jZXNzTm9kZShhbmltYXRpb25zW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZsYXR0ZW4odHJlZSk7XG5cbiAgICAgIGZ1bmN0aW9uIHByb2Nlc3NOb2RlKGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeS5wcm9jZXNzZWQpIHJldHVybiBlbnRyeTtcbiAgICAgICAgZW50cnkucHJvY2Vzc2VkID0gdHJ1ZTtcblxuICAgICAgICB2YXIgZWxlbWVudE5vZGUgPSBlbnRyeS5kb21Ob2RlO1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGVsZW1lbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIGxvb2t1cC5zZXQoZWxlbWVudE5vZGUsIGVudHJ5KTtcblxuICAgICAgICB2YXIgcGFyZW50RW50cnk7XG4gICAgICAgIHdoaWxlIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgcGFyZW50RW50cnkgPSBsb29rdXAuZ2V0KHBhcmVudE5vZGUpO1xuICAgICAgICAgIGlmIChwYXJlbnRFbnRyeSkge1xuICAgICAgICAgICAgaWYgKCFwYXJlbnRFbnRyeS5wcm9jZXNzZWQpIHtcbiAgICAgICAgICAgICAgcGFyZW50RW50cnkgPSBwcm9jZXNzTm9kZShwYXJlbnRFbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIChwYXJlbnRFbnRyeSB8fCB0cmVlKS5jaGlsZHJlbi5wdXNoKGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbGF0dGVuKHRyZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyZWUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKHRyZWUuY2hpbGRyZW5baV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlbWFpbmluZ0xldmVsRW50cmllcyA9IHF1ZXVlLmxlbmd0aDtcbiAgICAgICAgdmFyIG5leHRMZXZlbEVudHJpZXMgPSAwO1xuICAgICAgICB2YXIgcm93ID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gcXVldWVbaV07XG4gICAgICAgICAgaWYgKHJlbWFpbmluZ0xldmVsRW50cmllcyA8PSAwKSB7XG4gICAgICAgICAgICByZW1haW5pbmdMZXZlbEVudHJpZXMgPSBuZXh0TGV2ZWxFbnRyaWVzO1xuICAgICAgICAgICAgbmV4dExldmVsRW50cmllcyA9IDA7XG4gICAgICAgICAgICByZXN1bHQucHVzaChyb3cpO1xuICAgICAgICAgICAgcm93ID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHJvdy5wdXNoKGVudHJ5LmZuKTtcbiAgICAgICAgICBlbnRyeS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkRW50cnkpIHtcbiAgICAgICAgICAgIG5leHRMZXZlbEVudHJpZXMrKztcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goY2hpbGRFbnRyeSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVtYWluaW5nTGV2ZWxFbnRyaWVzLS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm93Lmxlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHJvdyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE8obWF0c2tvKTogZG9jdW1lbnQgdGhlIHNpZ25hdHVyZSBpbiBhIGJldHRlciB3YXlcbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0aW9uT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHZhciBpc1N0cnVjdHVyYWwgPSBbJ2VudGVyJywgJ21vdmUnLCAnbGVhdmUnXS5pbmRleE9mKGV2ZW50KSA+PSAwO1xuXG4gICAgICAvLyB0aGVyZSBpcyBubyBhbmltYXRpb24gYXQgdGhlIGN1cnJlbnQgbW9tZW50LCBob3dldmVyXG4gICAgICAvLyB0aGVzZSBydW5uZXIgbWV0aG9kcyB3aWxsIGdldCBsYXRlciB1cGRhdGVkIHdpdGggdGhlXG4gICAgICAvLyBtZXRob2RzIGxlYWRpbmcgaW50byB0aGUgZHJpdmVyJ3MgZW5kL2NhbmNlbCBtZXRob2RzXG4gICAgICAvLyBmb3Igbm93IHRoZXkganVzdCBzdG9wIHRoZSBhbmltYXRpb24gZnJvbSBzdGFydGluZ1xuICAgICAgdmFyIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkgeyBjbG9zZSgpOyB9LFxuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkgeyBjbG9zZSh0cnVlKTsgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZHJpdmVycy5sZW5ndGgpIHtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgIH1cblxuICAgICAgc2V0UnVubmVyKGVsZW1lbnQsIHJ1bm5lcik7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gbWVyZ2VDbGFzc2VzKGVsZW1lbnQuYXR0cignY2xhc3MnKSwgbWVyZ2VDbGFzc2VzKG9wdGlvbnMuYWRkQ2xhc3MsIG9wdGlvbnMucmVtb3ZlQ2xhc3MpKTtcbiAgICAgIHZhciB0ZW1wQ2xhc3NlcyA9IG9wdGlvbnMudGVtcENsYXNzZXM7XG4gICAgICBpZiAodGVtcENsYXNzZXMpIHtcbiAgICAgICAgY2xhc3NlcyArPSAnICcgKyB0ZW1wQ2xhc3NlcztcbiAgICAgICAgb3B0aW9ucy50ZW1wQ2xhc3NlcyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmVwYXJlQ2xhc3NOYW1lO1xuICAgICAgaWYgKGlzU3RydWN0dXJhbCkge1xuICAgICAgICBwcmVwYXJlQ2xhc3NOYW1lID0gJ25nLScgKyBldmVudCArIFBSRVBBUkVfQ0xBU1NfU1VGRklYO1xuICAgICAgICAkJGpxTGl0ZS5hZGRDbGFzcyhlbGVtZW50LCBwcmVwYXJlQ2xhc3NOYW1lKTtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uUXVldWUucHVzaCh7XG4gICAgICAgIC8vIHRoaXMgZGF0YSBpcyB1c2VkIGJ5IHRoZSBwb3N0RGlnZXN0IGNvZGUgYW5kIHBhc3NlZCBpbnRvXG4gICAgICAgIC8vIHRoZSBkcml2ZXIgc3RlcCBmdW5jdGlvblxuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIHN0cnVjdHVyYWw6IGlzU3RydWN0dXJhbCxcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgYmVmb3JlU3RhcnQ6IGJlZm9yZVN0YXJ0LFxuICAgICAgICBjbG9zZTogY2xvc2VcbiAgICAgIH0pO1xuXG4gICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGhhbmRsZURlc3Ryb3llZEVsZW1lbnQpO1xuXG4gICAgICAvLyB3ZSBvbmx5IHdhbnQgdGhlcmUgdG8gYmUgb25lIGZ1bmN0aW9uIGNhbGxlZCB3aXRoaW4gdGhlIHBvc3QgZGlnZXN0XG4gICAgICAvLyBibG9jay4gVGhpcyB3YXkgd2UgY2FuIGdyb3VwIGFuaW1hdGlvbnMgZm9yIGFsbCB0aGUgYW5pbWF0aW9ucyB0aGF0XG4gICAgICAvLyB3ZXJlIGFwYXJ0IG9mIHRoZSBzYW1lIHBvc3REaWdlc3QgZmx1c2ggY2FsbC5cbiAgICAgIGlmIChhbmltYXRpb25RdWV1ZS5sZW5ndGggPiAxKSByZXR1cm4gcnVubmVyO1xuXG4gICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yRWFjaChhbmltYXRpb25RdWV1ZSwgZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAvLyB0aGUgZWxlbWVudCB3YXMgZGVzdHJveWVkIGVhcmx5IG9uIHdoaWNoIHJlbW92ZWQgdGhlIHJ1bm5lclxuICAgICAgICAgIC8vIGZvcm0gaXRzIHN0b3JhZ2UuIFRoaXMgbWVhbnMgd2UgY2FuJ3QgYW5pbWF0ZSB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAvLyBhdCBhbGwgYW5kIGl0IGFscmVhZHkgaGFzIGJlZW4gY2xvc2VkIGR1ZSB0byBkZXN0cnVjdGlvbi5cbiAgICAgICAgICBpZiAoZ2V0UnVubmVyKGVudHJ5LmVsZW1lbnQpKSB7XG4gICAgICAgICAgICBhbmltYXRpb25zLnB1c2goZW50cnkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnRyeS5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbm93IGFueSBmdXR1cmUgYW5pbWF0aW9ucyB3aWxsIGJlIGluIGFub3RoZXIgcG9zdERpZ2VzdFxuICAgICAgICBhbmltYXRpb25RdWV1ZS5sZW5ndGggPSAwO1xuXG4gICAgICAgIHZhciBncm91cGVkQW5pbWF0aW9ucyA9IGdyb3VwQW5pbWF0aW9ucyhhbmltYXRpb25zKTtcbiAgICAgICAgdmFyIHRvQmVTb3J0ZWRBbmltYXRpb25zID0gW107XG5cbiAgICAgICAgZm9yRWFjaChncm91cGVkQW5pbWF0aW9ucywgZnVuY3Rpb24oYW5pbWF0aW9uRW50cnkpIHtcbiAgICAgICAgICB0b0JlU29ydGVkQW5pbWF0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGRvbU5vZGU6IGdldERvbU5vZGUoYW5pbWF0aW9uRW50cnkuZnJvbSA/IGFuaW1hdGlvbkVudHJ5LmZyb20uZWxlbWVudCA6IGFuaW1hdGlvbkVudHJ5LmVsZW1lbnQpLFxuICAgICAgICAgICAgZm46IGZ1bmN0aW9uIHRyaWdnZXJBbmltYXRpb25TdGFydCgpIHtcbiAgICAgICAgICAgICAgLy8gaXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBhcHBseSB0aGUgYG5nLWFuaW1hdGVgIENTUyBjbGFzcyBhbmQgdGhlXG4gICAgICAgICAgICAgIC8vIHRlbXBvcmFyeSBjbGFzc2VzIGJlZm9yZSB3ZSBkbyBhbnkgZHJpdmVyIGludm9raW5nIHNpbmNlIHRoZXNlXG4gICAgICAgICAgICAgIC8vIENTUyBjbGFzc2VzIG1heSBiZSByZXF1aXJlZCBmb3IgcHJvcGVyIENTUyBkZXRlY3Rpb24uXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkVudHJ5LmJlZm9yZVN0YXJ0KCk7XG5cbiAgICAgICAgICAgICAgdmFyIHN0YXJ0QW5pbWF0aW9uRm4sIGNsb3NlRm4gPSBhbmltYXRpb25FbnRyeS5jbG9zZTtcblxuICAgICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgZWxlbWVudCB3YXMgcmVtb3ZlZCBiZWZvcmUgdGhlIGRpZ2VzdCBydW5zIG9yXG4gICAgICAgICAgICAgIC8vIGR1cmluZyB0aGUgUkFGIHNlcXVlbmNpbmcgdGhlbiB3ZSBzaG91bGQgbm90IHRyaWdnZXIgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBhbmltYXRpb25FbnRyeS5hbmNob3JzXG4gICAgICAgICAgICAgICAgICA/IChhbmltYXRpb25FbnRyeS5mcm9tLmVsZW1lbnQgfHwgYW5pbWF0aW9uRW50cnkudG8uZWxlbWVudClcbiAgICAgICAgICAgICAgICAgIDogYW5pbWF0aW9uRW50cnkuZWxlbWVudDtcblxuICAgICAgICAgICAgICBpZiAoZ2V0UnVubmVyKHRhcmdldEVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IGludm9rZUZpcnN0RHJpdmVyKGFuaW1hdGlvbkVudHJ5KTtcbiAgICAgICAgICAgICAgICBpZiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBzdGFydEFuaW1hdGlvbkZuID0gb3BlcmF0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghc3RhcnRBbmltYXRpb25Gbikge1xuICAgICAgICAgICAgICAgIGNsb3NlRm4oKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uUnVubmVyID0gc3RhcnRBbmltYXRpb25GbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lci5kb25lKGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgY2xvc2VGbighc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmltYXRpb25SdW5uZXJzKGFuaW1hdGlvbkVudHJ5LCBhbmltYXRpb25SdW5uZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc29ydCBlYWNoIG9mIHRoZSBhbmltYXRpb25zIGluIG9yZGVyIG9mIHBhcmVudCB0byBjaGlsZFxuICAgICAgICAvLyByZWxhdGlvbnNoaXBzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgY2hpbGQgY2xhc3NlcyBhcmUgYXBwbGllZCBhdCB0aGVcbiAgICAgICAgLy8gcmlnaHQgdGltZS5cbiAgICAgICAgJCRyQUZTY2hlZHVsZXIoc29ydEFuaW1hdGlvbnModG9CZVNvcnRlZEFuaW1hdGlvbnMpKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcnVubmVyO1xuXG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGNoYW5nZSB0byByZWZlcmVuY2Ugbm9kZXNcbiAgICAgIGZ1bmN0aW9uIGdldEFuY2hvck5vZGVzKG5vZGUpIHtcbiAgICAgICAgdmFyIFNFTEVDVE9SID0gJ1snICsgTkdfQU5JTUFURV9SRUZfQVRUUiArICddJztcbiAgICAgICAgdmFyIGl0ZW1zID0gbm9kZS5oYXNBdHRyaWJ1dGUoTkdfQU5JTUFURV9SRUZfQVRUUilcbiAgICAgICAgICAgICAgPyBbbm9kZV1cbiAgICAgICAgICAgICAgOiBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1IpO1xuICAgICAgICB2YXIgYW5jaG9ycyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgdmFyIGF0dHIgPSBub2RlLmdldEF0dHJpYnV0ZShOR19BTklNQVRFX1JFRl9BVFRSKTtcbiAgICAgICAgICBpZiAoYXR0ciAmJiBhdHRyLmxlbmd0aCkge1xuICAgICAgICAgICAgYW5jaG9ycy5wdXNoKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbmNob3JzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBncm91cEFuaW1hdGlvbnMoYW5pbWF0aW9ucykge1xuICAgICAgICB2YXIgcHJlcGFyZWRBbmltYXRpb25zID0gW107XG4gICAgICAgIHZhciByZWZMb29rdXAgPSB7fTtcbiAgICAgICAgZm9yRWFjaChhbmltYXRpb25zLCBmdW5jdGlvbihhbmltYXRpb24sIGluZGV4KSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSBhbmltYXRpb24uZWxlbWVudDtcbiAgICAgICAgICB2YXIgbm9kZSA9IGdldERvbU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gYW5pbWF0aW9uLmV2ZW50O1xuICAgICAgICAgIHZhciBlbnRlck9yTW92ZSA9IFsnZW50ZXInLCAnbW92ZSddLmluZGV4T2YoZXZlbnQpID49IDA7XG4gICAgICAgICAgdmFyIGFuY2hvck5vZGVzID0gYW5pbWF0aW9uLnN0cnVjdHVyYWwgPyBnZXRBbmNob3JOb2Rlcyhub2RlKSA6IFtdO1xuXG4gICAgICAgICAgaWYgKGFuY2hvck5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGVudGVyT3JNb3ZlID8gJ3RvJyA6ICdmcm9tJztcblxuICAgICAgICAgICAgZm9yRWFjaChhbmNob3JOb2RlcywgZnVuY3Rpb24oYW5jaG9yKSB7XG4gICAgICAgICAgICAgIHZhciBrZXkgPSBhbmNob3IuZ2V0QXR0cmlidXRlKE5HX0FOSU1BVEVfUkVGX0FUVFIpO1xuICAgICAgICAgICAgICByZWZMb29rdXBba2V5XSA9IHJlZkxvb2t1cFtrZXldIHx8IHt9O1xuICAgICAgICAgICAgICByZWZMb29rdXBba2V5XVtkaXJlY3Rpb25dID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbklEOiBpbmRleCxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBqcUxpdGUoYW5jaG9yKVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZXBhcmVkQW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdXNlZEluZGljZXNMb29rdXAgPSB7fTtcbiAgICAgICAgdmFyIGFuY2hvckdyb3VwcyA9IHt9O1xuICAgICAgICBmb3JFYWNoKHJlZkxvb2t1cCwgZnVuY3Rpb24ob3BlcmF0aW9ucywga2V5KSB7XG4gICAgICAgICAgdmFyIGZyb20gPSBvcGVyYXRpb25zLmZyb207XG4gICAgICAgICAgdmFyIHRvID0gb3BlcmF0aW9ucy50bztcblxuICAgICAgICAgIGlmICghZnJvbSB8fCAhdG8pIHtcbiAgICAgICAgICAgIC8vIG9ubHkgb25lIG9mIHRoZXNlIGlzIHNldCB0aGVyZWZvcmUgd2UgY2FuJ3QgaGF2ZSBhblxuICAgICAgICAgICAgLy8gYW5jaG9yIGFuaW1hdGlvbiBzaW5jZSBhbGwgdGhyZWUgcGllY2VzIGFyZSByZXF1aXJlZFxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZnJvbSA/IGZyb20uYW5pbWF0aW9uSUQgOiB0by5hbmltYXRpb25JRDtcbiAgICAgICAgICAgIHZhciBpbmRleEtleSA9IGluZGV4LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoIXVzZWRJbmRpY2VzTG9va3VwW2luZGV4S2V5XSkge1xuICAgICAgICAgICAgICB1c2VkSW5kaWNlc0xvb2t1cFtpbmRleEtleV0gPSB0cnVlO1xuICAgICAgICAgICAgICBwcmVwYXJlZEFuaW1hdGlvbnMucHVzaChhbmltYXRpb25zW2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGZyb21BbmltYXRpb24gPSBhbmltYXRpb25zW2Zyb20uYW5pbWF0aW9uSURdO1xuICAgICAgICAgIHZhciB0b0FuaW1hdGlvbiA9IGFuaW1hdGlvbnNbdG8uYW5pbWF0aW9uSURdO1xuICAgICAgICAgIHZhciBsb29rdXBLZXkgPSBmcm9tLmFuaW1hdGlvbklELnRvU3RyaW5nKCk7XG4gICAgICAgICAgaWYgKCFhbmNob3JHcm91cHNbbG9va3VwS2V5XSkge1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gYW5jaG9yR3JvdXBzW2xvb2t1cEtleV0gPSB7XG4gICAgICAgICAgICAgIHN0cnVjdHVyYWw6IHRydWUsXG4gICAgICAgICAgICAgIGJlZm9yZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmcm9tQW5pbWF0aW9uLmJlZm9yZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdG9BbmltYXRpb24uYmVmb3JlU3RhcnQoKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZyb21BbmltYXRpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0b0FuaW1hdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjbGFzc2VzOiBjc3NDbGFzc2VzSW50ZXJzZWN0aW9uKGZyb21BbmltYXRpb24uY2xhc3NlcywgdG9BbmltYXRpb24uY2xhc3NlcyksXG4gICAgICAgICAgICAgIGZyb206IGZyb21BbmltYXRpb24sXG4gICAgICAgICAgICAgIHRvOiB0b0FuaW1hdGlvbixcbiAgICAgICAgICAgICAgYW5jaG9yczogW10gLy8gVE9ETyhtYXRza28pOiBjaGFuZ2UgdG8gcmVmZXJlbmNlIG5vZGVzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyB0aGUgYW5jaG9yIGFuaW1hdGlvbnMgcmVxdWlyZSB0aGF0IHRoZSBmcm9tIGFuZCB0byBlbGVtZW50cyBib3RoIGhhdmUgYXQgbGVhc3RcbiAgICAgICAgICAgIC8vIG9uZSBzaGFyZWQgQ1NTIGNsYXNzIHdoaWNoIGVmZmVjdGl2ZWx5IG1hcnJpZXMgdGhlIHR3byBlbGVtZW50cyB0b2dldGhlciB0byB1c2VcbiAgICAgICAgICAgIC8vIHRoZSBzYW1lIGFuaW1hdGlvbiBkcml2ZXIgYW5kIHRvIHByb3Blcmx5IHNlcXVlbmNlIHRoZSBhbmNob3IgYW5pbWF0aW9uLlxuICAgICAgICAgICAgaWYgKGdyb3VwLmNsYXNzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHByZXBhcmVkQW5pbWF0aW9ucy5wdXNoKGdyb3VwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByZXBhcmVkQW5pbWF0aW9ucy5wdXNoKGZyb21BbmltYXRpb24pO1xuICAgICAgICAgICAgICBwcmVwYXJlZEFuaW1hdGlvbnMucHVzaCh0b0FuaW1hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYW5jaG9yR3JvdXBzW2xvb2t1cEtleV0uYW5jaG9ycy5wdXNoKHtcbiAgICAgICAgICAgICdvdXQnOiBmcm9tLmVsZW1lbnQsICdpbic6IHRvLmVsZW1lbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByZXBhcmVkQW5pbWF0aW9ucztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY3NzQ2xhc3Nlc0ludGVyc2VjdGlvbihhLGIpIHtcbiAgICAgICAgYSA9IGEuc3BsaXQoJyAnKTtcbiAgICAgICAgYiA9IGIuc3BsaXQoJyAnKTtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgYWEgPSBhW2ldO1xuICAgICAgICAgIGlmIChhYS5zdWJzdHJpbmcoMCwzKSA9PT0gJ25nLScpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoYWEgPT09IGJbal0pIHtcbiAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGFhKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoZXMuam9pbignICcpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGaXJzdERyaXZlcihhbmltYXRpb25EZXRhaWxzKSB7XG4gICAgICAgIC8vIHdlIGxvb3AgaW4gcmV2ZXJzZSBvcmRlciBzaW5jZSB0aGUgbW9yZSBnZW5lcmFsIGRyaXZlcnMgKGxpa2UgQ1NTIGFuZCBKUylcbiAgICAgICAgLy8gbWF5IGF0dGVtcHQgbW9yZSBlbGVtZW50cywgYnV0IGN1c3RvbSBkcml2ZXJzIGFyZSBtb3JlIHBhcnRpY3VsYXJcbiAgICAgICAgZm9yICh2YXIgaSA9IGRyaXZlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB2YXIgZHJpdmVyTmFtZSA9IGRyaXZlcnNbaV07XG4gICAgICAgICAgdmFyIGZhY3RvcnkgPSAkaW5qZWN0b3IuZ2V0KGRyaXZlck5hbWUpO1xuICAgICAgICAgIHZhciBkcml2ZXIgPSBmYWN0b3J5KGFuaW1hdGlvbkRldGFpbHMpO1xuICAgICAgICAgIGlmIChkcml2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkcml2ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJlZm9yZVN0YXJ0KCkge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKE5HX0FOSU1BVEVfQ0xBU1NOQU1FKTtcbiAgICAgICAgaWYgKHRlbXBDbGFzc2VzKSB7XG4gICAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxlbWVudCwgdGVtcENsYXNzZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVwYXJlQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgcHJlcGFyZUNsYXNzTmFtZSk7XG4gICAgICAgICAgcHJlcGFyZUNsYXNzTmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlQW5pbWF0aW9uUnVubmVycyhhbmltYXRpb24sIG5ld1J1bm5lcikge1xuICAgICAgICBpZiAoYW5pbWF0aW9uLmZyb20gJiYgYW5pbWF0aW9uLnRvKSB7XG4gICAgICAgICAgdXBkYXRlKGFuaW1hdGlvbi5mcm9tLmVsZW1lbnQpO1xuICAgICAgICAgIHVwZGF0ZShhbmltYXRpb24udG8uZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlKGFuaW1hdGlvbi5lbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZShlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHJ1bm5lciA9IGdldFJ1bm5lcihlbGVtZW50KTtcbiAgICAgICAgICBpZiAocnVubmVyKSBydW5uZXIuc2V0SG9zdChuZXdSdW5uZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZURlc3Ryb3llZEVsZW1lbnQoKSB7XG4gICAgICAgIHZhciBydW5uZXIgPSBnZXRSdW5uZXIoZWxlbWVudCk7XG4gICAgICAgIGlmIChydW5uZXIgJiYgKGV2ZW50ICE9PSAnbGVhdmUnIHx8ICFvcHRpb25zLiQkZG9tT3BlcmF0aW9uRmlyZWQpKSB7XG4gICAgICAgICAgcnVubmVyLmVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlKHJlamVjdGVkKSB7XG4gICAgICAgIGVsZW1lbnQub2ZmKCckZGVzdHJveScsIGhhbmRsZURlc3Ryb3llZEVsZW1lbnQpO1xuICAgICAgICByZW1vdmVSdW5uZXIoZWxlbWVudCk7XG5cbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcblxuICAgICAgICBpZiAodGVtcENsYXNzZXMpIHtcbiAgICAgICAgICAkJGpxTGl0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCB0ZW1wQ2xhc3Nlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKE5HX0FOSU1BVEVfQ0xBU1NOQU1FKTtcbiAgICAgICAgcnVubmVyLmNvbXBsZXRlKCFyZWplY3RlZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0FuaW1hdGVTd2FwXG4gKiBAcmVzdHJpY3QgQVxuICogQHNjb3BlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogbmdBbmltYXRlU3dhcCBpcyBhIGFuaW1hdGlvbi1vcmllbnRlZCBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgZm9yIHRoZSBjb250YWluZXIgdG9cbiAqIGJlIHJlbW92ZWQgYW5kIGVudGVyZWQgaW4gd2hlbmV2ZXIgdGhlIGFzc29jaWF0ZWQgZXhwcmVzc2lvbiBjaGFuZ2VzLiBBXG4gKiBjb21tb24gdXNlY2FzZSBmb3IgdGhpcyBkaXJlY3RpdmUgaXMgYSByb3RhdGluZyBiYW5uZXIgb3Igc2xpZGVyIGNvbXBvbmVudCB3aGljaFxuICogY29udGFpbnMgb25lIGltYWdlIGJlaW5nIHByZXNlbnQgYXQgYSB0aW1lLiBXaGVuIHRoZSBhY3RpdmUgaW1hZ2UgY2hhbmdlc1xuICogdGhlbiB0aGUgb2xkIGltYWdlIHdpbGwgcGVyZm9ybSBhIGBsZWF2ZWAgYW5pbWF0aW9uIGFuZCB0aGUgbmV3IGVsZW1lbnRcbiAqIHdpbGwgYmUgaW5zZXJ0ZWQgdmlhIGFuIGBlbnRlcmAgYW5pbWF0aW9uLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IHdoZW4gdGhlIG5ldyBlbGVtZW50IGlzIGluc2VydGVkIHRvIHRoZSBET00gIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCB3aGVuIHRoZSBvbGQgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSB8XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0FuaW1hdGVTd2FwLWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nQW5pbWF0ZVN3YXBFeGFtcGxlXCJcbiAqICAgICAgICAgIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIlxuICogICAgICAgICAgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIiBuZy1jb250cm9sbGVyPVwiQXBwQ3RybFwiPlxuICogICAgICAgPGRpdiBuZy1hbmltYXRlLXN3YXA9XCJudW1iZXJcIiBjbGFzcz1cImNlbGwgc3dhcC1hbmltYXRpb25cIiBuZy1jbGFzcz1cImNvbG9yQ2xhc3MobnVtYmVyKVwiPlxuICogICAgICAgICB7eyBudW1iZXIgfX1cbiAqICAgICAgIDwvZGl2PlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnbmdBbmltYXRlU3dhcEV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKVxuICogICAgICAgLmNvbnRyb2xsZXIoJ0FwcEN0cmwnLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLCBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICogICAgICAgICAkc2NvcGUubnVtYmVyID0gMDtcbiAqICAgICAgICAgJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICRzY29wZS5udW1iZXIrKztcbiAqICAgICAgICAgfSwgMTAwMCk7XG4gKlxuICogICAgICAgICB2YXIgY29sb3JzID0gWydyZWQnLCdibHVlJywnZ3JlZW4nLCd5ZWxsb3cnLCdvcmFuZ2UnXTtcbiAqICAgICAgICAgJHNjb3BlLmNvbG9yQ2xhc3MgPSBmdW5jdGlvbihudW1iZXIpIHtcbiAqICAgICAgICAgICByZXR1cm4gY29sb3JzW251bWJlciAlIGNvbG9ycy5sZW5ndGhdO1xuICogICAgICAgICB9O1xuICogICAgICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gKiAgLmNvbnRhaW5lciB7XG4gKiAgICBoZWlnaHQ6MjUwcHg7XG4gKiAgICB3aWR0aDoyNTBweDtcbiAqICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICogICAgb3ZlcmZsb3c6aGlkZGVuO1xuICogICAgYm9yZGVyOjJweCBzb2xpZCBibGFjaztcbiAqICB9XG4gKiAgLmNvbnRhaW5lciAuY2VsbCB7XG4gKiAgICBmb250LXNpemU6MTUwcHg7XG4gKiAgICB0ZXh0LWFsaWduOmNlbnRlcjtcbiAqICAgIGxpbmUtaGVpZ2h0OjI1MHB4O1xuICogICAgcG9zaXRpb246YWJzb2x1dGU7XG4gKiAgICB0b3A6MDtcbiAqICAgIGxlZnQ6MDtcbiAqICAgIHJpZ2h0OjA7XG4gKiAgICBib3JkZXItYm90dG9tOjJweCBzb2xpZCBibGFjaztcbiAqICB9XG4gKiAgLnN3YXAtYW5pbWF0aW9uLm5nLWVudGVyLCAuc3dhcC1hbmltYXRpb24ubmctbGVhdmUge1xuICogICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgfVxuICogIC5zd2FwLWFuaW1hdGlvbi5uZy1lbnRlciB7XG4gKiAgICB0b3A6LTI1MHB4O1xuICogIH1cbiAqICAuc3dhcC1hbmltYXRpb24ubmctZW50ZXItYWN0aXZlIHtcbiAqICAgIHRvcDowcHg7XG4gKiAgfVxuICogIC5zd2FwLWFuaW1hdGlvbi5uZy1sZWF2ZSB7XG4gKiAgICB0b3A6MHB4O1xuICogIH1cbiAqICAuc3dhcC1hbmltYXRpb24ubmctbGVhdmUtYWN0aXZlIHtcbiAqICAgIHRvcDoyNTBweDtcbiAqICB9XG4gKiAgLnJlZCB7IGJhY2tncm91bmQ6cmVkOyB9XG4gKiAgLmdyZWVuIHsgYmFja2dyb3VuZDpncmVlbjsgfVxuICogIC5ibHVlIHsgYmFja2dyb3VuZDpibHVlOyB9XG4gKiAgLnllbGxvdyB7IGJhY2tncm91bmQ6eWVsbG93OyB9XG4gKiAgLm9yYW5nZSB7IGJhY2tncm91bmQ6b3JhbmdlOyB9XG4gKiAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbmdBbmltYXRlU3dhcERpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRhbmltYXRlLCAkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcHJpb3JpdHk6IDYwMCwgLy8gd2UgdXNlIDYwMCBoZXJlIHRvIGVuc3VyZSB0aGF0IHRoZSBkaXJlY3RpdmUgaXMgY2F1Z2h0IGJlZm9yZSBvdGhlcnNcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgdmFyIHByZXZpb3VzRWxlbWVudCwgcHJldmlvdXNTY29wZTtcbiAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oYXR0cnMubmdBbmltYXRlU3dhcCB8fCBhdHRyc1snZm9yJ10sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShwcmV2aW91c0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2aW91c1Njb3BlKSB7XG4gICAgICAgICAgcHJldmlvdXNTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIHByZXZpb3VzU2NvcGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIHByZXZpb3VzU2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgJHRyYW5zY2x1ZGUocHJldmlvdXNTY29wZSwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGVsZW1lbnQsIG51bGwsICRlbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdBbmltYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgYG5nQW5pbWF0ZWAgbW9kdWxlIHByb3ZpZGVzIHN1cHBvcnQgZm9yIENTUy1iYXNlZCBhbmltYXRpb25zIChrZXlmcmFtZXMgYW5kIHRyYW5zaXRpb25zKSBhcyB3ZWxsIGFzIEphdmFTY3JpcHQtYmFzZWQgYW5pbWF0aW9ucyB2aWFcbiAqIGNhbGxiYWNrIGhvb2tzLiBBbmltYXRpb25zIGFyZSBub3QgZW5hYmxlZCBieSBkZWZhdWx0LCBob3dldmVyLCBieSBpbmNsdWRpbmcgYG5nQW5pbWF0ZWAgdGhlIGFuaW1hdGlvbiBob29rcyBhcmUgZW5hYmxlZCBmb3IgYW4gQW5ndWxhciBhcHAuXG4gKlxuICogPGRpdiBkb2MtbW9kdWxlLWNvbXBvbmVudHM9XCJuZ0FuaW1hdGVcIj48L2Rpdj5cbiAqXG4gKiAjIFVzYWdlXG4gKiBTaW1wbHkgcHV0LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gbWFrZSB1c2Ugb2YgYW5pbWF0aW9ucyB3aGVuIG5nQW5pbWF0ZSBpcyB1c2VkOiBieSB1c2luZyAqKkNTUyoqIGFuZCAqKkphdmFTY3JpcHQqKi4gVGhlIGZvcm1lciB3b3JrcyBwdXJlbHkgYmFzZWRcbiAqIHVzaW5nIENTUyAoYnkgdXNpbmcgbWF0Y2hpbmcgQ1NTIHNlbGVjdG9ycy9zdHlsZXMpIGFuZCB0aGUgbGF0dGVyIHRyaWdnZXJzIGFuaW1hdGlvbnMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB2aWEgYG1vZHVsZS5hbmltYXRpb24oKWAuIEZvclxuICogYm90aCBDU1MgYW5kIEpTIGFuaW1hdGlvbnMgdGhlIHNvbGUgcmVxdWlyZW1lbnQgaXMgdG8gaGF2ZSBhIG1hdGNoaW5nIGBDU1MgY2xhc3NgIHRoYXQgZXhpc3RzIGJvdGggaW4gdGhlIHJlZ2lzdGVyZWQgYW5pbWF0aW9uIGFuZCB3aXRoaW5cbiAqIHRoZSBIVE1MIGVsZW1lbnQgdGhhdCB0aGUgYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIG9uLlxuICpcbiAqICMjIERpcmVjdGl2ZSBTdXBwb3J0XG4gKiBUaGUgZm9sbG93aW5nIGRpcmVjdGl2ZXMgYXJlIFwiYW5pbWF0aW9uIGF3YXJlXCI6XG4gKlxuICogfCBEaXJlY3RpdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZCBBbmltYXRpb25zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCNhbmltYXRpb25zIG5nUmVwZWF0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciwgbGVhdmUgYW5kIG1vdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3I2FuaW1hdGlvbnMgbmdWaWV3fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlI2FuaW1hdGlvbnMgbmdJbmNsdWRlfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N3aXRjaCNhbmltYXRpb25zIG5nU3dpdGNofSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSWYjYW5pbWF0aW9ucyBuZ0lmfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyNhbmltYXRpb25zIG5nQ2xhc3N9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgKHRoZSBDU1MgY2xhc3MoZXMpIHByZXNlbnQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1Nob3cjYW5pbWF0aW9ucyBuZ1Nob3d9ICYge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0hpZGUjYW5pbWF0aW9ucyBuZ0hpZGV9ICAgICAgICAgICAgfCBhZGQgYW5kIHJlbW92ZSAodGhlIG5nLWhpZGUgY2xhc3MgdmFsdWUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0jYW5pbWF0aW9uLWhvb2tzIGZvcm19ICYge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsI2FuaW1hdGlvbi1ob29rcyBuZ01vZGVsfSAgICB8IGFkZCBhbmQgcmVtb3ZlIChkaXJ0eSwgcHJpc3RpbmUsIHZhbGlkLCBpbnZhbGlkICYgYWxsIG90aGVyIHZhbGlkYXRpb25zKSB8XG4gKiB8IHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyNhbmltYXRpb25zIG5nTWVzc2FnZXN9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgKG5nLWFjdGl2ZSAmIG5nLWluYWN0aXZlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG1vZHVsZTpuZ01lc3NhZ2VzI2FuaW1hdGlvbnMgbmdNZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIChNb3JlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBieSB2aXNpdGluZyBlYWNoIHRoZSBkb2N1bWVudGF0aW9uIGFzc29jaWF0ZWQgd2l0aCBlYWNoIGRpcmVjdGl2ZS4pXG4gKlxuICogIyMgQ1NTLWJhc2VkIEFuaW1hdGlvbnNcbiAqXG4gKiBDU1MtYmFzZWQgYW5pbWF0aW9ucyB3aXRoIG5nQW5pbWF0ZSBhcmUgdW5pcXVlIHNpbmNlIHRoZXkgcmVxdWlyZSBubyBKYXZhU2NyaXB0IGNvZGUgYXQgYWxsLiBCeSB1c2luZyBhIENTUyBjbGFzcyB0aGF0IHdlIHJlZmVyZW5jZSBiZXR3ZWVuIG91ciBIVE1MXG4gKiBhbmQgQ1NTIGNvZGUgd2UgY2FuIGNyZWF0ZSBhbiBhbmltYXRpb24gdGhhdCB3aWxsIGJlIHBpY2tlZCB1cCBieSBBbmd1bGFyIHdoZW4gYW4gdW5kZXJseWluZyBkaXJlY3RpdmUgcGVyZm9ybXMgYW4gb3BlcmF0aW9uLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IHNob3dzIGhvdyBhbiBgZW50ZXJgIGFuaW1hdGlvbiBjYW4gYmUgbWFkZSBwb3NzaWJsZSBvbiBhbiBlbGVtZW50IHVzaW5nIGBuZy1pZmA6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1pZj1cImJvb2xcIiBjbGFzcz1cImZhZGVcIj5cbiAqICAgIEZhZGUgbWUgaW4gb3V0XG4gKiA8L2Rpdj5cbiAqIDxidXR0b24gbmctY2xpY2s9XCJib29sPXRydWVcIj5GYWRlIEluITwvYnV0dG9uPlxuICogPGJ1dHRvbiBuZy1jbGljaz1cImJvb2w9ZmFsc2VcIj5GYWRlIE91dCE8L2J1dHRvbj5cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGUgQ1NTIGNsYXNzICoqZmFkZSoqPyBXZSBjYW4gbm93IGNyZWF0ZSB0aGUgQ1NTIHRyYW5zaXRpb24gY29kZSB0aGF0IHJlZmVyZW5jZXMgdGhpcyBjbGFzczpcbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyBUaGUgc3RhcnRpbmcgQ1NTIHN0eWxlcyBmb3IgdGhlIGVudGVyIGFuaW1hdGlvbiAmIzQyOy9cbiAqIC5mYWRlLm5nLWVudGVyIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIG9wYWNpdHk6MDtcbiAqIH1cbiAqXG4gKiAvJiM0MjsgVGhlIGZpbmlzaGluZyBDU1Mgc3R5bGVzIGZvciB0aGUgZW50ZXIgYW5pbWF0aW9uICYjNDI7L1xuICogLmZhZGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgb3BhY2l0eToxO1xuICogfVxuICogYGBgXG4gKlxuICogVGhlIGtleSB0aGluZyB0byByZW1lbWJlciBoZXJlIGlzIHRoYXQsIGRlcGVuZGluZyBvbiB0aGUgYW5pbWF0aW9uIGV2ZW50ICh3aGljaCBlYWNoIG9mIHRoZSBkaXJlY3RpdmVzIGFib3ZlIHRyaWdnZXIgZGVwZW5kaW5nIG9uIHdoYXQncyBnb2luZyBvbikgdHdvXG4gKiBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50OyBpbiB0aGUgZXhhbXBsZSBhYm92ZSB3ZSBoYXZlIGAubmctZW50ZXJgIGFuZCBgLm5nLWVudGVyLWFjdGl2ZWAuIEZvciBDU1MgdHJhbnNpdGlvbnMsIHRoZSB0cmFuc2l0aW9uXG4gKiBjb2RlICoqbXVzdCoqIGJlIGRlZmluZWQgd2l0aGluIHRoZSBzdGFydGluZyBDU1MgY2xhc3MgKGluIHRoaXMgY2FzZSBgLm5nLWVudGVyYCkuIFRoZSBkZXN0aW5hdGlvbiBjbGFzcyBpcyB3aGF0IHRoZSB0cmFuc2l0aW9uIHdpbGwgYW5pbWF0ZSB0b3dhcmRzLlxuICpcbiAqIElmIGZvciBleGFtcGxlIHdlIHdhbnRlZCB0byBjcmVhdGUgYW5pbWF0aW9ucyBmb3IgYGxlYXZlYCBhbmQgYG1vdmVgIChuZ1JlcGVhdCB0cmlnZ2VycyBtb3ZlKSB0aGVuIHdlIGNhbiBkbyBzbyB1c2luZyB0aGUgc2FtZSBDU1MgbmFtaW5nIGNvbnZlbnRpb25zOlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IG5vdyB0aGUgZWxlbWVudCB3aWxsIGZhZGUgb3V0IGJlZm9yZSBpdCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSAmIzQyOy9cbiAqIC5mYWRlLm5nLWxlYXZlIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIG9wYWNpdHk6MTtcbiAqIH1cbiAqIC5mYWRlLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gKiAgIG9wYWNpdHk6MDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdlIGNhbiBhbHNvIG1ha2UgdXNlIG9mICoqQ1NTIEtleWZyYW1lcyoqIGJ5IHJlZmVyZW5jaW5nIHRoZSBrZXlmcmFtZSBhbmltYXRpb24gd2l0aGluIHRoZSBzdGFydGluZyBDU1MgY2xhc3M6XG4gKlxuICogYGBgY3NzXG4gKiAvJiM0MjsgdGhlcmUgaXMgbm8gbmVlZCB0byBkZWZpbmUgYW55dGhpbmcgaW5zaWRlIG9mIHRoZSBkZXN0aW5hdGlvblxuICogQ1NTIGNsYXNzIHNpbmNlIHRoZSBrZXlmcmFtZSB3aWxsIHRha2UgY2hhcmdlIG9mIHRoZSBhbmltYXRpb24gJiM0MjsvXG4gKiAuZmFkZS5uZy1sZWF2ZSB7XG4gKiAgIGFuaW1hdGlvbjogbXlfZmFkZV9hbmltYXRpb24gMC41cyBsaW5lYXI7XG4gKiAgIC13ZWJraXQtYW5pbWF0aW9uOiBteV9mYWRlX2FuaW1hdGlvbiAwLjVzIGxpbmVhcjtcbiAqIH1cbiAqXG4gKiBAa2V5ZnJhbWVzIG15X2ZhZGVfYW5pbWF0aW9uIHtcbiAqICAgZnJvbSB7IG9wYWNpdHk6MTsgfVxuICogICB0byB7IG9wYWNpdHk6MDsgfVxuICogfVxuICpcbiAqIEAtd2Via2l0LWtleWZyYW1lcyBteV9mYWRlX2FuaW1hdGlvbiB7XG4gKiAgIGZyb20geyBvcGFjaXR5OjE7IH1cbiAqICAgdG8geyBvcGFjaXR5OjA7IH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEZlZWwgZnJlZSBhbHNvIG1peCB0cmFuc2l0aW9ucyBhbmQga2V5ZnJhbWVzIHRvZ2V0aGVyIGFzIHdlbGwgYXMgYW55IG90aGVyIENTUyBjbGFzc2VzIG9uIHRoZSBzYW1lIGVsZW1lbnQuXG4gKlxuICogIyMjIENTUyBDbGFzcy1iYXNlZCBBbmltYXRpb25zXG4gKlxuICogQ2xhc3MtYmFzZWQgYW5pbWF0aW9ucyAoYW5pbWF0aW9ucyB0aGF0IGFyZSB0cmlnZ2VyZWQgdmlhIGBuZ0NsYXNzYCwgYG5nU2hvd2AsIGBuZ0hpZGVgIGFuZCBzb21lIG90aGVyIGRpcmVjdGl2ZXMpIGhhdmUgYSBzbGlnaHRseSBkaWZmZXJlbnRcbiAqIG5hbWluZyBjb252ZW50aW9uLiBDbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSBiYXNpYyBlbm91Z2ggdGhhdCBhIHN0YW5kYXJkIHRyYW5zaXRpb24gb3Iga2V5ZnJhbWUgY2FuIGJlIHJlZmVyZW5jZWQgb24gdGhlIGNsYXNzIGJlaW5nIGFkZGVkXG4gKiBhbmQgcmVtb3ZlZC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBpZiB3ZSB3YW50ZWQgdG8gZG8gYSBDU1MgYW5pbWF0aW9uIGZvciBgbmdIaWRlYCB0aGVuIHdlIHBsYWNlIGFuIGFuaW1hdGlvbiBvbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3M6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1zaG93PVwiYm9vbFwiIGNsYXNzPVwiZmFkZVwiPlxuICogICBTaG93IGFuZCBoaWRlIG1lXG4gKiA8L2Rpdj5cbiAqIDxidXR0b24gbmctY2xpY2s9XCJib29sPSFib29sXCI+VG9nZ2xlPC9idXR0b24+XG4gKlxuICogPHN0eWxlPlxuICogLmZhZGUubmctaGlkZSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBvcGFjaXR5OjA7XG4gKiB9XG4gKiA8L3N0eWxlPlxuICogYGBgXG4gKlxuICogQWxsIHRoYXQgaXMgZ29pbmcgb24gaGVyZSB3aXRoIG5nU2hvdy9uZ0hpZGUgYmVoaW5kIHRoZSBzY2VuZXMgaXMgdGhlIGAubmctaGlkZWAgY2xhc3MgaXMgYWRkZWQvcmVtb3ZlZCAod2hlbiB0aGUgaGlkZGVuIHN0YXRlIGlzIHZhbGlkKS4gU2luY2VcbiAqIG5nU2hvdyBhbmQgbmdIaWRlIGFyZSBhbmltYXRpb24gYXdhcmUgdGhlbiB3ZSBjYW4gbWF0Y2ggdXAgYSB0cmFuc2l0aW9uIGFuZCBuZ0FuaW1hdGUgaGFuZGxlcyB0aGUgcmVzdC5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0aGUgYWRkaXRpb24gYW5kIHJlbW92YWwgb2YgdGhlIENTUyBjbGFzcywgbmdBbmltYXRlIGFsc28gcHJvdmlkZXMgdHdvIGhlbHBlciBtZXRob2RzIHRoYXQgd2UgY2FuIHVzZSB0byBmdXJ0aGVyIGRlY29yYXRlIHRoZSBhbmltYXRpb25cbiAqIHdpdGggQ1NTIHN0eWxlcy5cbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWNsYXNzPVwie29uOm9uT2ZmfVwiIGNsYXNzPVwiaGlnaGxpZ2h0XCI+XG4gKiAgIEhpZ2hsaWdodCB0aGlzIGJveFxuICogPC9kaXY+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwib25PZmY9IW9uT2ZmXCI+VG9nZ2xlPC9idXR0b24+XG4gKlxuICogPHN0eWxlPlxuICogLmhpZ2hsaWdodCB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogfVxuICogLmhpZ2hsaWdodC5vbi1hZGQge1xuICogICBiYWNrZ3JvdW5kOndoaXRlO1xuICogfVxuICogLmhpZ2hsaWdodC5vbiB7XG4gKiAgIGJhY2tncm91bmQ6eWVsbG93O1xuICogfVxuICogLmhpZ2hsaWdodC5vbi1yZW1vdmUge1xuICogICBiYWNrZ3JvdW5kOmJsYWNrO1xuICogfVxuICogPC9zdHlsZT5cbiAqIGBgYFxuICpcbiAqIFdlIGNhbiBhbHNvIG1ha2UgdXNlIG9mIENTUyBrZXlmcmFtZXMgYnkgcGxhY2luZyB0aGVtIHdpdGhpbiB0aGUgQ1NTIGNsYXNzZXMuXG4gKlxuICpcbiAqICMjIyBDU1MgU3RhZ2dlcmluZyBBbmltYXRpb25zXG4gKiBBIFN0YWdnZXJpbmcgYW5pbWF0aW9uIGlzIGEgY29sbGVjdGlvbiBvZiBhbmltYXRpb25zIHRoYXQgYXJlIGlzc3VlZCB3aXRoIGEgc2xpZ2h0IGRlbGF5IGluIGJldHdlZW4gZWFjaCBzdWNjZXNzaXZlIG9wZXJhdGlvbiByZXN1bHRpbmcgaW4gYVxuICogY3VydGFpbi1saWtlIGVmZmVjdC4gVGhlIG5nQW5pbWF0ZSBtb2R1bGUgKHZlcnNpb25zID49MS4yKSBzdXBwb3J0cyBzdGFnZ2VyaW5nIGFuaW1hdGlvbnMgYW5kIHRoZSBzdGFnZ2VyIGVmZmVjdCBjYW4gYmVcbiAqIHBlcmZvcm1lZCBieSBjcmVhdGluZyBhICoqbmctRVZFTlQtc3RhZ2dlcioqIENTUyBjbGFzcyBhbmQgYXR0YWNoaW5nIHRoYXQgY2xhc3MgdG8gdGhlIGJhc2UgQ1NTIGNsYXNzIHVzZWQgZm9yXG4gKiB0aGUgYW5pbWF0aW9uLiBUaGUgc3R5bGUgcHJvcGVydHkgZXhwZWN0ZWQgd2l0aGluIHRoZSBzdGFnZ2VyIGNsYXNzIGNhbiBlaXRoZXIgYmUgYSAqKnRyYW5zaXRpb24tZGVsYXkqKiBvciBhblxuICogKiphbmltYXRpb24tZGVsYXkqKiBwcm9wZXJ0eSAob3IgYm90aCBpZiB5b3VyIGFuaW1hdGlvbiBjb250YWlucyBib3RoIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZSBhbmltYXRpb25zKS5cbiAqXG4gKiBgYGBjc3NcbiAqIC5teS1hbmltYXRpb24ubmctZW50ZXIge1xuICogICAvJiM0Mjsgc3RhbmRhcmQgdHJhbnNpdGlvbiBjb2RlICYjNDI7L1xuICogICB0cmFuc2l0aW9uOiAxcyBsaW5lYXIgYWxsO1xuICogICBvcGFjaXR5OjA7XG4gKiB9XG4gKiAubXktYW5pbWF0aW9uLm5nLWVudGVyLXN0YWdnZXIge1xuICogICAvJiM0MjsgdGhpcyB3aWxsIGhhdmUgYSAxMDBtcyBkZWxheSBiZXR3ZWVuIGVhY2ggc3VjY2Vzc2l2ZSBsZWF2ZSBhbmltYXRpb24gJiM0MjsvXG4gKiAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMXM7XG4gKlxuICogICAvJiM0MjsgQXMgb2YgMS40LjQsIHRoaXMgbXVzdCBhbHdheXMgYmUgc2V0OiBpdCBzaWduYWxzIG5nQW5pbWF0ZVxuICogICAgIHRvIG5vdCBhY2NpZGVudGFsbHkgaW5oZXJpdCBhIGRlbGF5IHByb3BlcnR5IGZyb20gYW5vdGhlciBDU1MgY2xhc3MgJiM0MjsvXG4gKiAgIHRyYW5zaXRpb24tZHVyYXRpb246IDBzO1xuICpcbiAqICAgLyYjNDI7IGlmIHlvdSBhcmUgdXNpbmcgYW5pbWF0aW9ucyBpbnN0ZWFkIG9mIHRyYW5zaXRpb25zIHlvdSBzaG91bGQgY29uZmlndXJlIGFzIGZvbGxvd3M6XG4gKiAgICAgYW5pbWF0aW9uLWRlbGF5OiAwLjFzO1xuICogICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMHM7ICYjNDI7L1xuICogfVxuICogLm15LWFuaW1hdGlvbi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICogICAvJiM0Mjsgc3RhbmRhcmQgdHJhbnNpdGlvbiBzdHlsZXMgJiM0MjsvXG4gKiAgIG9wYWNpdHk6MTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFN0YWdnZXJpbmcgYW5pbWF0aW9ucyB3b3JrIGJ5IGRlZmF1bHQgaW4gbmdSZXBlYXQgKHNvIGxvbmcgYXMgdGhlIENTUyBjbGFzcyBpcyBkZWZpbmVkKS4gT3V0c2lkZSBvZiBuZ1JlcGVhdCwgdG8gdXNlIHN0YWdnZXJpbmcgYW5pbWF0aW9uc1xuICogb24geW91ciBvd24sIHRoZXkgY2FuIGJlIHRyaWdnZXJlZCBieSBmaXJpbmcgbXVsdGlwbGUgY2FsbHMgdG8gdGhlIHNhbWUgZXZlbnQgb24gJGFuaW1hdGUuIEhvd2V2ZXIsIHRoZSByZXN0cmljdGlvbnMgc3Vycm91bmRpbmcgdGhpc1xuICogYXJlIHRoYXQgZWFjaCBvZiB0aGUgZWxlbWVudHMgbXVzdCBoYXZlIHRoZSBzYW1lIENTUyBjbGFzc05hbWUgdmFsdWUgYXMgd2VsbCBhcyB0aGUgc2FtZSBwYXJlbnQgZWxlbWVudC4gQSBzdGFnZ2VyIG9wZXJhdGlvblxuICogd2lsbCBhbHNvIGJlIHJlc2V0IGlmIG9uZSBvciBtb3JlIGFuaW1hdGlvbiBmcmFtZXMgaGF2ZSBwYXNzZWQgc2luY2UgdGhlIG11bHRpcGxlIGNhbGxzIHRvIGAkYW5pbWF0ZWAgd2VyZSBmaXJlZC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGNvZGUgd2lsbCBpc3N1ZSB0aGUgKipuZy1sZWF2ZS1zdGFnZ2VyKiogZXZlbnQgb24gdGhlIGVsZW1lbnQgcHJvdmlkZWQ6XG4gKlxuICogYGBganNcbiAqIHZhciBraWRzID0gcGFyZW50LmNoaWxkcmVuKCk7XG4gKlxuICogJGFuaW1hdGUubGVhdmUoa2lkc1swXSk7IC8vc3RhZ2dlciBpbmRleD0wXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzFdKTsgLy9zdGFnZ2VyIGluZGV4PTFcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbMl0pOyAvL3N0YWdnZXIgaW5kZXg9MlxuICogJGFuaW1hdGUubGVhdmUoa2lkc1szXSk7IC8vc3RhZ2dlciBpbmRleD0zXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzRdKTsgLy9zdGFnZ2VyIGluZGV4PTRcbiAqXG4gKiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICogICAvL3N0YWdnZXIgaGFzIHJlc2V0IGl0c2VsZlxuICogICAkYW5pbWF0ZS5sZWF2ZShraWRzWzVdKTsgLy9zdGFnZ2VyIGluZGV4PTBcbiAqICAgJGFuaW1hdGUubGVhdmUoa2lkc1s2XSk7IC8vc3RhZ2dlciBpbmRleD0xXG4gKlxuICogICAkc2NvcGUuJGRpZ2VzdCgpO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBTdGFnZ2VyIGFuaW1hdGlvbnMgYXJlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCB3aXRoaW4gQ1NTLWRlZmluZWQgYW5pbWF0aW9ucy5cbiAqXG4gKiAjIyMgVGhlIGBuZy1hbmltYXRlYCBDU1MgY2xhc3NcbiAqXG4gKiBXaGVuIG5nQW5pbWF0ZSBpcyBhbmltYXRpbmcgYW4gZWxlbWVudCBpdCB3aWxsIGFwcGx5IHRoZSBgbmctYW5pbWF0ZWAgQ1NTIGNsYXNzIHRvIHRoZSBlbGVtZW50IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbi5cbiAqIFRoaXMgaXMgYSB0ZW1wb3JhcnkgQ1NTIGNsYXNzIGFuZCBpdCB3aWxsIGJlIHJlbW92ZWQgb25jZSB0aGUgYW5pbWF0aW9uIGlzIG92ZXIgKGZvciBib3RoIEphdmFTY3JpcHQgYW5kIENTUy1iYXNlZCBhbmltYXRpb25zKS5cbiAqXG4gKiBUaGVyZWZvcmUsIGFuaW1hdGlvbnMgY2FuIGJlIGFwcGxpZWQgdG8gYW4gZWxlbWVudCB1c2luZyB0aGlzIHRlbXBvcmFyeSBjbGFzcyBkaXJlY3RseSB2aWEgQ1NTLlxuICpcbiAqIGBgYGNzc1xuICogLnppcHBlci5uZy1hbmltYXRlIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiB9XG4gKiAuemlwcGVyLm5nLWVudGVyIHtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogLnppcHBlci5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICogICBvcGFjaXR5OjE7XG4gKiB9XG4gKiAuemlwcGVyLm5nLWxlYXZlIHtcbiAqICAgb3BhY2l0eToxO1xuICogfVxuICogLnppcHBlci5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICogICBvcGFjaXR5OjA7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAoTm90ZSB0aGF0IHRoZSBgbmctYW5pbWF0ZWAgQ1NTIGNsYXNzIGlzIHJlc2VydmVkIGFuZCBpdCBjYW5ub3QgYmUgYXBwbGllZCBvbiBhbiBlbGVtZW50IGRpcmVjdGx5IHNpbmNlIG5nQW5pbWF0ZSB3aWxsIGFsd2F5cyByZW1vdmVcbiAqIHRoZSBDU1MgY2xhc3Mgb25jZSBhbiBhbmltYXRpb24gaGFzIGNvbXBsZXRlZC4pXG4gKlxuICpcbiAqICMjIyBUaGUgYG5nLVtldmVudF0tcHJlcGFyZWAgY2xhc3NcbiAqXG4gKiBUaGlzIGlzIGEgc3BlY2lhbCBjbGFzcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHByZXZlbnQgdW53YW50ZWQgZmxpY2tlcmluZyAvIGZsYXNoIG9mIGNvbnRlbnQgYmVmb3JlXG4gKiB0aGUgYWN0dWFsIGFuaW1hdGlvbiBzdGFydHMuIFRoZSBjbGFzcyBpcyBhZGRlZCBhcyBzb29uIGFzIGFuIGFuaW1hdGlvbiBpcyBpbml0aWFsaXplZCwgYnV0IHJlbW92ZWRcbiAqIGJlZm9yZSB0aGUgYWN0dWFsIGFuaW1hdGlvbiBzdGFydHMgKGFmdGVyIHdhaXRpbmcgZm9yIGEgJGRpZ2VzdCkuXG4gKiBJdCBpcyBhbHNvIG9ubHkgYWRkZWQgZm9yICpzdHJ1Y3R1cmFsKiBhbmltYXRpb25zIChgZW50ZXJgLCBgbW92ZWAsIGFuZCBgbGVhdmVgKS5cbiAqXG4gKiBJbiBwcmFjdGljZSwgZmxpY2tlcmluZyBjYW4gYXBwZWFyIHdoZW4gbmVzdGluZyBlbGVtZW50cyB3aXRoIHN0cnVjdHVyYWwgYW5pbWF0aW9ucyBzdWNoIGFzIGBuZ0lmYFxuICogaW50byBlbGVtZW50cyB0aGF0IGhhdmUgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBzdWNoIGFzIGBuZ0NsYXNzYC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWNsYXNzPVwie3JlZDogbXlQcm9wfVwiPlxuICogICA8ZGl2IG5nLWNsYXNzPVwie2JsdWU6IG15UHJvcH1cIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZVwiIG5nLWlmPVwibXlQcm9wXCI+PC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0aGF0IGR1cmluZyB0aGUgYGVudGVyYCBhbmltYXRpb24sIHRoZSBgLm1lc3NhZ2VgIGRpdiB3aWxsIGJlIGJyaWVmbHkgdmlzaWJsZSBiZWZvcmUgaXQgc3RhcnRzIGFuaW1hdGluZy5cbiAqIEluIHRoYXQgY2FzZSwgeW91IGNhbiBhZGQgc3R5bGVzIHRvIHRoZSBDU1MgdGhhdCBtYWtlIHN1cmUgdGhlIGVsZW1lbnQgc3RheXMgaGlkZGVuIGJlZm9yZSB0aGUgYW5pbWF0aW9uIHN0YXJ0czpcbiAqXG4gKiBgYGBjc3NcbiAqIC5tZXNzYWdlLm5nLWVudGVyLXByZXBhcmUge1xuICogICBvcGFjaXR5OiAwO1xuICogfVxuICpcbiAqIGBgYFxuICpcbiAqICMjIEphdmFTY3JpcHQtYmFzZWQgQW5pbWF0aW9uc1xuICpcbiAqIG5nQW5pbWF0ZSBhbHNvIGFsbG93cyBmb3IgYW5pbWF0aW9ucyB0byBiZSBjb25zdW1lZCBieSBKYXZhU2NyaXB0IGNvZGUuIFRoZSBhcHByb2FjaCBpcyBzaW1pbGFyIHRvIENTUy1iYXNlZCBhbmltYXRpb25zICh3aGVyZSB0aGVyZSBpcyBhIHNoYXJlZFxuICogQ1NTIGNsYXNzIHRoYXQgaXMgcmVmZXJlbmNlZCBpbiBvdXIgSFRNTCBjb2RlKSBidXQgaW4gYWRkaXRpb24gd2UgbmVlZCB0byByZWdpc3RlciB0aGUgSmF2YVNjcmlwdCBhbmltYXRpb24gb24gdGhlIG1vZHVsZS4gQnkgbWFraW5nIHVzZSBvZiB0aGVcbiAqIGBtb2R1bGUuYW5pbWF0aW9uKClgIG1vZHVsZSBmdW5jdGlvbiB3ZSBjYW4gcmVnaXN0ZXIgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiBMZXQncyBzZWUgYW4gZXhhbXBsZSBvZiBhIGVudGVyL2xlYXZlIGFuaW1hdGlvbiB1c2luZyBgbmdSZXBlYXRgOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctcmVwZWF0PVwiaXRlbSBpbiBpdGVtc1wiIGNsYXNzPVwic2xpZGVcIj5cbiAqICAge3sgaXRlbSB9fVxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlICoqc2xpZGUqKiBDU1MgY2xhc3M/IExldCdzIHVzZSB0aGF0IGNsYXNzIHRvIGRlZmluZSBhbiBhbmltYXRpb24gdGhhdCB3ZSdsbCBzdHJ1Y3R1cmUgaW4gb3VyIG1vZHVsZSBjb2RlIGJ5IHVzaW5nIGBtb2R1bGUuYW5pbWF0aW9uYDpcbiAqXG4gKiBgYGBqc1xuICogbXlNb2R1bGUuYW5pbWF0aW9uKCcuc2xpZGUnLCBbZnVuY3Rpb24oKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgLy8gbWFrZSBub3RlIHRoYXQgb3RoZXIgZXZlbnRzIChsaWtlIGFkZENsYXNzL3JlbW92ZUNsYXNzKVxuICogICAgIC8vIGhhdmUgZGlmZmVyZW50IGZ1bmN0aW9uIGlucHV0IHBhcmFtZXRlcnNcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuZmFkZUluKDEwMDAsIGRvbmVGbik7XG4gKlxuICogICAgICAgLy8gcmVtZW1iZXIgdG8gY2FsbCBkb25lRm4gc28gdGhhdCBhbmd1bGFyXG4gKiAgICAgICAvLyBrbm93cyB0aGF0IHRoZSBhbmltYXRpb24gaGFzIGNvbmNsdWRlZFxuICogICAgIH0sXG4gKlxuICogICAgIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xuICogICAgICAgalF1ZXJ5KGVsZW1lbnQpLmZhZGVJbigxMDAwLCBkb25lRm4pO1xuICogICAgIH0sXG4gKlxuICogICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBkb25lRm4pIHtcbiAqICAgICAgIGpRdWVyeShlbGVtZW50KS5mYWRlT3V0KDEwMDAsIGRvbmVGbik7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgbmljZSB0aGluZyBhYm91dCBKUy1iYXNlZCBhbmltYXRpb25zIGlzIHRoYXQgd2UgY2FuIGluamVjdCBvdGhlciBzZXJ2aWNlcyBhbmQgbWFrZSB1c2Ugb2YgYWR2YW5jZWQgYW5pbWF0aW9uIGxpYnJhcmllcyBzdWNoIGFzXG4gKiBncmVlbnNvY2suanMgYW5kIHZlbG9jaXR5LmpzLlxuICpcbiAqIElmIG91ciBhbmltYXRpb24gY29kZSBjbGFzcy1iYXNlZCAobWVhbmluZyB0aGF0IHNvbWV0aGluZyBsaWtlIGBuZ0NsYXNzYCwgYG5nSGlkZWAgYW5kIGBuZ1Nob3dgIHRyaWdnZXJzIGl0KSB0aGVuIHdlIGNhbiBzdGlsbCBkZWZpbmVcbiAqIG91ciBhbmltYXRpb25zIGluc2lkZSBvZiB0aGUgc2FtZSByZWdpc3RlcmVkIGFuaW1hdGlvbiwgaG93ZXZlciwgdGhlIGZ1bmN0aW9uIGlucHV0IGFyZ3VtZW50cyBhcmUgYSBiaXQgZGlmZmVyZW50OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctY2xhc3M9XCJjb2xvclwiIGNsYXNzPVwiY29sb3JmdWxcIj5cbiAqICAgdGhpcyBib3ggaXMgbW9vZHlcbiAqIDwvZGl2PlxuICogPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9yPSdyZWQnXCI+Q2hhbmdlIHRvIHJlZDwvYnV0dG9uPlxuICogPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9yPSdibHVlJ1wiPkNoYW5nZSB0byBibHVlPC9idXR0b24+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3I9J2dyZWVuJ1wiPkNoYW5nZSB0byBncmVlbjwvYnV0dG9uPlxuICogYGBgXG4gKlxuICogYGBganNcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLmNvbG9yZnVsJywgW2Z1bmN0aW9uKCkge1xuICogICByZXR1cm4ge1xuICogICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmVGbikge1xuICogICAgICAgLy8gZG8gc29tZSBjb29sIGFuaW1hdGlvbiBhbmQgY2FsbCB0aGUgZG9uZUZuXG4gKiAgICAgfSxcbiAqICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lRm4pIHtcbiAqICAgICAgIC8vIGRvIHNvbWUgY29vbCBhbmltYXRpb24gYW5kIGNhbGwgdGhlIGRvbmVGblxuICogICAgIH0sXG4gKiAgICAgc2V0Q2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZGVkQ2xhc3MsIHJlbW92ZWRDbGFzcywgZG9uZUZuKSB7XG4gKiAgICAgICAvLyBkbyBzb21lIGNvb2wgYW5pbWF0aW9uIGFuZCBjYWxsIHRoZSBkb25lRm5cbiAqICAgICB9XG4gKiAgIH1cbiAqIH1dKTtcbiAqIGBgYFxuICpcbiAqICMjIENTUyArIEpTIEFuaW1hdGlvbnMgVG9nZXRoZXJcbiAqXG4gKiBBbmd1bGFySlMgMS40IGFuZCBoaWdoZXIgaGFzIHRha2VuIHN0ZXBzIHRvIG1ha2UgdGhlIGFtYWxnYW1hdGlvbiBvZiBDU1MgYW5kIEpTIGFuaW1hdGlvbnMgbW9yZSBmbGV4aWJsZS4gSG93ZXZlciwgdW5saWtlIGVhcmxpZXIgdmVyc2lvbnMgb2YgQW5ndWxhcixcbiAqIGRlZmluaW5nIENTUyBhbmQgSlMgYW5pbWF0aW9ucyB0byB3b3JrIG9mZiBvZiB0aGUgc2FtZSBDU1MgY2xhc3Mgd2lsbCBub3Qgd29yayBhbnltb3JlLiBUaGVyZWZvcmUgdGhlIGV4YW1wbGUgYmVsb3cgd2lsbCBvbmx5IHJlc3VsdCBpbiAqKkpTIGFuaW1hdGlvbnMgdGFraW5nXG4gKiBjaGFyZ2Ugb2YgdGhlIGFuaW1hdGlvbioqOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaWY9XCJib29sXCIgY2xhc3M9XCJzbGlkZVwiPlxuICogICBTbGlkZSBpbiBhbmQgb3V0XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBteU1vZHVsZS5hbmltYXRpb24oJy5zbGlkZScsIFtmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuc2xpZGVJbigxMDAwLCBkb25lRm4pO1xuICogICAgIH1cbiAqICAgfVxuICogfV0pO1xuICogYGBgXG4gKlxuICogYGBgY3NzXG4gKiAuc2xpZGUubmctZW50ZXIge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwMHB4KTtcbiAqIH1cbiAqIC5zbGlkZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICogICB0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIERvZXMgdGhpcyBtZWFuIHRoYXQgQ1NTIGFuZCBKUyBhbmltYXRpb25zIGNhbm5vdCBiZSB1c2VkIHRvZ2V0aGVyPyBEbyBKUy1iYXNlZCBhbmltYXRpb25zIGFsd2F5cyBoYXZlIGhpZ2hlciBwcmlvcml0eT8gV2UgY2FuIG1ha2UgdXAgZm9yIHRoZVxuICogbGFjayBvZiBDU1MgYW5pbWF0aW9ucyBieSB1c2luZyB0aGUgYCRhbmltYXRlQ3NzYCBzZXJ2aWNlIHRvIHRyaWdnZXIgb3VyIG93biB0d2Vha2VkLW91dCwgQ1NTLWJhc2VkIGFuaW1hdGlvbnMgZGlyZWN0bHkgZnJvbVxuICogb3VyIG93biBKUy1iYXNlZCBhbmltYXRpb24gY29kZTpcbiAqXG4gKiBgYGBqc1xuICogbXlNb2R1bGUuYW5pbWF0aW9uKCcuc2xpZGUnLCBbJyRhbmltYXRlQ3NzJywgZnVuY3Rpb24oJGFuaW1hdGVDc3MpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCkge1xuKiAgICAgICAgLy8gdGhpcyB3aWxsIHRyaWdnZXIgYC5zbGlkZS5uZy1lbnRlcmAgYW5kIGAuc2xpZGUubmctZW50ZXItYWN0aXZlYC5cbiAqICAgICAgIHJldHVybiAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gKiAgICAgICAgIGV2ZW50OiAnZW50ZXInLFxuICogICAgICAgICBzdHJ1Y3R1cmFsOiB0cnVlXG4gKiAgICAgICB9KTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1dKTtcbiAqIGBgYFxuICpcbiAqIFRoZSBuaWNlIHRoaW5nIGhlcmUgaXMgdGhhdCB3ZSBjYW4gc2F2ZSBiYW5kd2lkdGggYnkgc3RpY2tpbmcgdG8gb3VyIENTUy1iYXNlZCBhbmltYXRpb24gY29kZSBhbmQgd2UgZG9uJ3QgbmVlZCB0byByZWx5IG9uIGEgM3JkLXBhcnR5IGFuaW1hdGlvbiBmcmFtZXdvcmsuXG4gKlxuICogVGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSBpcyB2ZXJ5IHBvd2VyZnVsIHNpbmNlIHdlIGNhbiBmZWVkIGluIGFsbCBraW5kcyBvZiBleHRyYSBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSBldmFsdWF0ZWQgYW5kIGZlZCBpbnRvIGEgQ1NTIHRyYW5zaXRpb24gb3JcbiAqIGtleWZyYW1lIGFuaW1hdGlvbi4gRm9yIGV4YW1wbGUgaWYgd2Ugd2FudGVkIHRvIGFuaW1hdGUgdGhlIGhlaWdodCBvZiBhbiBlbGVtZW50IHdoaWxlIGFkZGluZyBhbmQgcmVtb3ZpbmcgY2xhc3NlcyB0aGVuIHdlIGNhbiBkbyBzbyBieSBwcm92aWRpbmcgdGhhdFxuICogZGF0YSBpbnRvIGAkYW5pbWF0ZUNzc2AgZGlyZWN0bHk6XG4gKlxuICogYGBganNcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLnNsaWRlJywgWyckYW5pbWF0ZUNzcycsIGZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAqICAgICAgIHJldHVybiAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gKiAgICAgICAgIGV2ZW50OiAnZW50ZXInLFxuICogICAgICAgICBzdHJ1Y3R1cmFsOiB0cnVlLFxuICogICAgICAgICBhZGRDbGFzczogJ21hcm9vbi1zZXR0aW5nJyxcbiAqICAgICAgICAgZnJvbTogeyBoZWlnaHQ6MCB9LFxuICogICAgICAgICB0bzogeyBoZWlnaHQ6IDIwMCB9XG4gKiAgICAgICB9KTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1dKTtcbiAqIGBgYFxuICpcbiAqIE5vdyB3ZSBjYW4gZmlsbCBpbiB0aGUgcmVzdCB2aWEgb3VyIHRyYW5zaXRpb24gQ1NTIGNvZGU6XG4gKlxuICogYGBgY3NzXG4gKiAvJiM0MjsgdGhlIHRyYW5zaXRpb24gdGVsbHMgbmdBbmltYXRlIHRvIG1ha2UgdGhlIGFuaW1hdGlvbiBoYXBwZW4gJiM0MjsvXG4gKiAuc2xpZGUubmctZW50ZXIgeyB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsgfVxuICpcbiAqIC8mIzQyOyB0aGlzIGV4dHJhIENTUyBjbGFzcyB3aWxsIGJlIGFic29yYmVkIGludG8gdGhlIHRyYW5zaXRpb25cbiAqIHNpbmNlIHRoZSAkYW5pbWF0ZUNzcyBjb2RlIGlzIGFkZGluZyB0aGUgY2xhc3MgJiM0MjsvXG4gKiAubWFyb29uLXNldHRpbmcgeyBiYWNrZ3JvdW5kOnJlZDsgfVxuICogYGBgXG4gKlxuICogQW5kIGAkYW5pbWF0ZUNzc2Agd2lsbCBmaWd1cmUgb3V0IHRoZSByZXN0LiBKdXN0IG1ha2Ugc3VyZSB0byBoYXZlIHRoZSBgZG9uZSgpYCBjYWxsYmFjayBmaXJlIHRoZSBgZG9uZUZuYCBmdW5jdGlvbiB0byBzaWduYWwgd2hlbiB0aGUgYW5pbWF0aW9uIGlzIG92ZXIuXG4gKlxuICogVG8gbGVhcm4gbW9yZSBhYm91dCB3aGF0J3MgcG9zc2libGUgYmUgc3VyZSB0byB2aXNpdCB0aGUge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZUNzcyAkYW5pbWF0ZUNzcyBzZXJ2aWNlfS5cbiAqXG4gKiAjIyBBbmltYXRpb24gQW5jaG9yaW5nICh2aWEgYG5nLWFuaW1hdGUtcmVmYClcbiAqXG4gKiBuZ0FuaW1hdGUgaW4gQW5ndWxhckpTIDEuNCBjb21lcyBwYWNrZWQgd2l0aCB0aGUgYWJpbGl0eSB0byBjcm9zcy1hbmltYXRlIGVsZW1lbnRzIGJldHdlZW5cbiAqIHN0cnVjdHVyYWwgYXJlYXMgb2YgYW4gYXBwbGljYXRpb24gKGxpa2Ugdmlld3MpIGJ5IHBhaXJpbmcgdXAgZWxlbWVudHMgdXNpbmcgYW4gYXR0cmlidXRlXG4gKiBjYWxsZWQgYG5nLWFuaW1hdGUtcmVmYC5cbiAqXG4gKiBMZXQncyBzYXkgZm9yIGV4YW1wbGUgd2UgaGF2ZSB0d28gdmlld3MgdGhhdCBhcmUgbWFuYWdlZCBieSBgbmctdmlld2AgYW5kIHdlIHdhbnQgdG8gc2hvd1xuICogdGhhdCB0aGVyZSBpcyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHR3byBjb21wb25lbnRzIHNpdHVhdGVkIGluIHdpdGhpbiB0aGVzZSB2aWV3cy4gQnkgdXNpbmcgdGhlXG4gKiBgbmctYW5pbWF0ZS1yZWZgIGF0dHJpYnV0ZSB3ZSBjYW4gaWRlbnRpZnkgdGhhdCB0aGUgdHdvIGNvbXBvbmVudHMgYXJlIHBhaXJlZCB0b2dldGhlciBhbmQgd2VcbiAqIGNhbiB0aGVuIGF0dGFjaCBhbiBhbmltYXRpb24sIHdoaWNoIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB2aWV3IGNoYW5nZXMuXG4gKlxuICogU2F5IGZvciBleGFtcGxlIHdlIGhhdmUgdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZSBjb2RlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gaW5kZXguaHRtbCAtLT5cbiAqIDxkaXYgbmctdmlldyBjbGFzcz1cInZpZXctYW5pbWF0aW9uXCI+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8IS0tIGhvbWUuaHRtbCAtLT5cbiAqIDxhIGhyZWY9XCIjL2Jhbm5lci1wYWdlXCI+XG4gKiAgIDxpbWcgc3JjPVwiLi9iYW5uZXIuanBnXCIgY2xhc3M9XCJiYW5uZXJcIiBuZy1hbmltYXRlLXJlZj1cImJhbm5lclwiPlxuICogPC9hPlxuICpcbiAqIDwhLS0gYmFubmVyLXBhZ2UuaHRtbCAtLT5cbiAqIDxpbWcgc3JjPVwiLi9iYW5uZXIuanBnXCIgY2xhc3M9XCJiYW5uZXJcIiBuZy1hbmltYXRlLXJlZj1cImJhbm5lclwiPlxuICogYGBgXG4gKlxuICogTm93LCB3aGVuIHRoZSB2aWV3IGNoYW5nZXMgKG9uY2UgdGhlIGxpbmsgaXMgY2xpY2tlZCksIG5nQW5pbWF0ZSB3aWxsIGV4YW1pbmUgdGhlXG4gKiBIVE1MIGNvbnRlbnRzIHRvIHNlZSBpZiB0aGVyZSBpcyBhIG1hdGNoIHJlZmVyZW5jZSBiZXR3ZWVuIGFueSBjb21wb25lbnRzIGluIHRoZSB2aWV3XG4gKiB0aGF0IGlzIGxlYXZpbmcgYW5kIHRoZSB2aWV3IHRoYXQgaXMgZW50ZXJpbmcuIEl0IHdpbGwgc2NhbiBib3RoIHRoZSB2aWV3IHdoaWNoIGlzIGJlaW5nXG4gKiByZW1vdmVkIChsZWF2ZSkgYW5kIGluc2VydGVkIChlbnRlcikgdG8gc2VlIGlmIHRoZXJlIGFyZSBhbnkgcGFpcmVkIERPTSBlbGVtZW50cyB0aGF0XG4gKiBjb250YWluIGEgbWF0Y2hpbmcgcmVmIHZhbHVlLlxuICpcbiAqIFRoZSB0d28gaW1hZ2VzIG1hdGNoIHNpbmNlIHRoZXkgc2hhcmUgdGhlIHNhbWUgcmVmIHZhbHVlLiBuZ0FuaW1hdGUgd2lsbCBub3cgY3JlYXRlIGFcbiAqIHRyYW5zcG9ydCBlbGVtZW50ICh3aGljaCBpcyBhIGNsb25lIG9mIHRoZSBmaXJzdCBpbWFnZSBlbGVtZW50KSBhbmQgaXQgd2lsbCB0aGVuIGF0dGVtcHRcbiAqIHRvIGFuaW1hdGUgdG8gdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWNvbmQgaW1hZ2UgZWxlbWVudCBpbiB0aGUgbmV4dCB2aWV3LiBGb3IgdGhlIGFuaW1hdGlvbiB0b1xuICogd29yayBhIHNwZWNpYWwgQ1NTIGNsYXNzIGNhbGxlZCBgbmctYW5jaG9yYCB3aWxsIGJlIGFkZGVkIHRvIHRoZSB0cmFuc3BvcnRlZCBlbGVtZW50LlxuICpcbiAqIFdlIGNhbiBub3cgYXR0YWNoIGEgdHJhbnNpdGlvbiBvbnRvIHRoZSBgLmJhbm5lci5uZy1hbmNob3JgIENTUyBjbGFzcyBhbmQgdGhlblxuICogbmdBbmltYXRlIHdpbGwgaGFuZGxlIHRoZSBlbnRpcmUgdHJhbnNpdGlvbiBmb3IgdXMgYXMgd2VsbCBhcyB0aGUgYWRkaXRpb24gYW5kIHJlbW92YWwgb2ZcbiAqIGFueSBjaGFuZ2VzIG9mIENTUyBjbGFzc2VzIGJldHdlZW4gdGhlIGVsZW1lbnRzOlxuICpcbiAqIGBgYGNzc1xuICogLmJhbm5lci5uZy1hbmNob3Ige1xuICogICAvJiM0MjsgdGhpcyBhbmltYXRpb24gd2lsbCBsYXN0IGZvciAxIHNlY29uZCBzaW5jZSB0aGVyZSBhcmVcbiAqICAgICAgICAgIHR3byBwaGFzZXMgdG8gdGhlIGFuaW1hdGlvbiAoYW4gYGluYCBhbmQgYW4gYG91dGAgcGhhc2UpICYjNDI7L1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdlIGFsc28gKiptdXN0KiogaW5jbHVkZSBhbmltYXRpb25zIGZvciB0aGUgdmlld3MgdGhhdCBhcmUgYmVpbmcgZW50ZXJlZCBhbmQgcmVtb3ZlZFxuICogKG90aGVyd2lzZSBhbmNob3Jpbmcgd291bGRuJ3QgYmUgcG9zc2libGUgc2luY2UgdGhlIG5ldyB2aWV3IHdvdWxkIGJlIGluc2VydGVkIHJpZ2h0IGF3YXkpLlxuICpcbiAqIGBgYGNzc1xuICogLnZpZXctYW5pbWF0aW9uLm5nLWVudGVyLCAudmlldy1hbmltYXRpb24ubmctbGVhdmUge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgcG9zaXRpb246Zml4ZWQ7XG4gKiAgIGxlZnQ6MDtcbiAqICAgdG9wOjA7XG4gKiAgIHdpZHRoOjEwMCU7XG4gKiB9XG4gKiAudmlldy1hbmltYXRpb24ubmctZW50ZXIge1xuICogICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKTtcbiAqIH1cbiAqIC52aWV3LWFuaW1hdGlvbi5uZy1sZWF2ZSxcbiAqIC52aWV3LWFuaW1hdGlvbi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICogICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7XG4gKiB9XG4gKiAudmlldy1hbmltYXRpb24ubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpO1xuICogfVxuICogYGBgXG4gKlxuICogTm93IHdlIGNhbiBqdW1wIGJhY2sgdG8gdGhlIGFuY2hvciBhbmltYXRpb24uIFdoZW4gdGhlIGFuaW1hdGlvbiBoYXBwZW5zLCB0aGVyZSBhcmUgdHdvIHN0YWdlcyB0aGF0IG9jY3VyOlxuICogYW4gYG91dGAgYW5kIGFuIGBpbmAgc3RhZ2UuIFRoZSBgb3V0YCBzdGFnZSBoYXBwZW5zIGZpcnN0IGFuZCB0aGF0IGlzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYW5pbWF0ZWQgYXdheVxuICogZnJvbSBpdHMgb3JpZ2luLiBPbmNlIHRoYXQgYW5pbWF0aW9uIGlzIG92ZXIgdGhlbiB0aGUgYGluYCBzdGFnZSBvY2N1cnMgd2hpY2ggYW5pbWF0ZXMgdGhlXG4gKiBlbGVtZW50IHRvIGl0cyBkZXN0aW5hdGlvbi4gVGhlIHJlYXNvbiB3aHkgdGhlcmUgYXJlIHR3byBhbmltYXRpb25zIGlzIHRvIGdpdmUgZW5vdWdoIHRpbWVcbiAqIGZvciB0aGUgZW50ZXIgYW5pbWF0aW9uIG9uIHRoZSBuZXcgZWxlbWVudCB0byBiZSByZWFkeS5cbiAqXG4gKiBUaGUgZXhhbXBsZSBhYm92ZSBzZXRzIHVwIGEgdHJhbnNpdGlvbiBmb3IgYm90aCB0aGUgaW4gYW5kIG91dCBwaGFzZXMsIGJ1dCB3ZSBjYW4gYWxzbyB0YXJnZXQgdGhlIG91dCBvclxuICogaW4gcGhhc2VzIGRpcmVjdGx5IHZpYSBgbmctYW5jaG9yLW91dGAgYW5kIGBuZy1hbmNob3ItaW5gLlxuICpcbiAqIGBgYGNzc1xuICogLmJhbm5lci5uZy1hbmNob3Itb3V0IHtcbiAqICAgdHJhbnNpdGlvbjogMC41cyBsaW5lYXIgYWxsO1xuICpcbiAqICAgLyYjNDI7IHRoZSBzY2FsZSB3aWxsIGJlIGFwcGxpZWQgZHVyaW5nIHRoZSBvdXQgYW5pbWF0aW9uLFxuICogICAgICAgICAgYnV0IHdpbGwgYmUgYW5pbWF0ZWQgYXdheSB3aGVuIHRoZSBpbiBhbmltYXRpb24gcnVucyAmIzQyOy9cbiAqICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xuICogfVxuICpcbiAqIC5iYW5uZXIubmctYW5jaG9yLWluIHtcbiAqICAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqXG4gKlxuICpcbiAqICMjIyBBbmNob3JpbmcgRGVtb1xuICpcbiAgPGV4YW1wbGUgbW9kdWxlPVwiYW5jaG9yaW5nRXhhbXBsZVwiXG4gICAgICAgICAgIG5hbWU9XCJhbmNob3JpbmdFeGFtcGxlXCJcbiAgICAgICAgICAgaWQ9XCJhbmNob3JpbmdFeGFtcGxlXCJcbiAgICAgICAgICAgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qczthbmd1bGFyLXJvdXRlLmpzXCJcbiAgICAgICAgICAgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGEgaHJlZj1cIiMhL1wiPkhvbWU8L2E+XG4gICAgICA8aHIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJ2aWV3LWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IG5nLXZpZXcgY2xhc3M9XCJ2aWV3XCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvcmluZ0V4YW1wbGUnLCBbJ25nQW5pbWF0ZScsICduZ1JvdXRlJ10pXG4gICAgICAgIC5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignLycsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnaG9tZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ29udHJvbGxlciBhcyBob21lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9wcm9maWxlLzppZCcsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJvZmlsZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQcm9maWxlQ29udHJvbGxlciBhcyBwcm9maWxlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XSlcbiAgICAgICAgLnJ1bihbJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS5yZWNvcmRzID0gW1xuICAgICAgICAgICAgeyBpZDogMSwgdGl0bGU6ICdNaXNzIEJldWxhaCBSb29iJyB9LFxuICAgICAgICAgICAgeyBpZDogMiwgdGl0bGU6ICdUcmVudCBNb3Jpc3NldHRlJyB9LFxuICAgICAgICAgICAgeyBpZDogMywgdGl0bGU6ICdNaXNzIEF2YSBQb3Vyb3MnIH0sXG4gICAgICAgICAgICB7IGlkOiA0LCB0aXRsZTogJ1JvZCBQb3Vyb3MnIH0sXG4gICAgICAgICAgICB7IGlkOiA1LCB0aXRsZTogJ0FiZHVsIFJpY2UnIH0sXG4gICAgICAgICAgICB7IGlkOiA2LCB0aXRsZTogJ0xhdXJpZSBSdXRoZXJmb3JkIFNyLicgfSxcbiAgICAgICAgICAgIHsgaWQ6IDcsIHRpdGxlOiAnTmFraWEgTWNMYXVnaGxpbicgfSxcbiAgICAgICAgICAgIHsgaWQ6IDgsIHRpdGxlOiAnSm9yZG9uIEJsYW5kYSBEVk0nIH0sXG4gICAgICAgICAgICB7IGlkOiA5LCB0aXRsZTogJ1Job2RhIEhhbmQnIH0sXG4gICAgICAgICAgICB7IGlkOiAxMCwgdGl0bGU6ICdBbGV4YW5kcmVhIFNhdWVyJyB9XG4gICAgICAgICAgXTtcbiAgICAgICAgfV0pXG4gICAgICAgIC5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIFtmdW5jdGlvbigpIHtcbiAgICAgICAgICAvL2VtcHR5XG4gICAgICAgIH1dKVxuICAgICAgICAuY29udHJvbGxlcignUHJvZmlsZUNvbnRyb2xsZXInLCBbJyRyb290U2NvcGUnLCAnJHJvdXRlUGFyYW1zJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIFByb2ZpbGVDb250cm9sbGVyKCRyb290U2NvcGUsICRyb3V0ZVBhcmFtcykge1xuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KCRyb3V0ZVBhcmFtcy5pZCwgMTApO1xuICAgICAgICAgIHZhciByZWNvcmQgPSAkcm9vdFNjb3BlLnJlY29yZHNbaW5kZXggLSAxXTtcblxuICAgICAgICAgIHRoaXMudGl0bGUgPSByZWNvcmQudGl0bGU7XG4gICAgICAgICAgdGhpcy5pZCA9IHJlY29yZC5pZDtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiaG9tZS5odG1sXCI+XG4gICAgICA8aDI+V2VsY29tZSB0byB0aGUgaG9tZSBwYWdlPC9oMT5cbiAgICAgIDxwPlBsZWFzZSBjbGljayBvbiBhbiBlbGVtZW50PC9wPlxuICAgICAgPGEgY2xhc3M9XCJyZWNvcmRcIlxuICAgICAgICAgbmctaHJlZj1cIiMhL3Byb2ZpbGUve3sgcmVjb3JkLmlkIH19XCJcbiAgICAgICAgIG5nLWFuaW1hdGUtcmVmPVwie3sgcmVjb3JkLmlkIH19XCJcbiAgICAgICAgIG5nLXJlcGVhdD1cInJlY29yZCBpbiByZWNvcmRzXCI+XG4gICAgICAgIHt7IHJlY29yZC50aXRsZSB9fVxuICAgICAgPC9hPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvZmlsZS5odG1sXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZSByZWNvcmRcIiBuZy1hbmltYXRlLXJlZj1cInt7IHByb2ZpbGUuaWQgfX1cIj5cbiAgICAgICAge3sgcHJvZmlsZS50aXRsZSB9fVxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLnJlY29yZCB7XG4gICAgICAgIGRpc3BsYXk6YmxvY2s7XG4gICAgICAgIGZvbnQtc2l6ZToyMHB4O1xuICAgICAgfVxuICAgICAgLnByb2ZpbGUge1xuICAgICAgICBiYWNrZ3JvdW5kOmJsYWNrO1xuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgZm9udC1zaXplOjEwMHB4O1xuICAgICAgfVxuICAgICAgLnZpZXctY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICB9XG4gICAgICAudmlldy1jb250YWluZXIgPiAudmlldy5uZy1hbmltYXRlIHtcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHdpZHRoOjEwMCU7XG4gICAgICAgIG1pbi1oZWlnaHQ6NTAwcHg7XG4gICAgICB9XG4gICAgICAudmlldy5uZy1lbnRlciwgLnZpZXcubmctbGVhdmUsXG4gICAgICAucmVjb3JkLm5nLWFuY2hvciB7XG4gICAgICAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICAgICAgfVxuICAgICAgLnZpZXcubmctZW50ZXIge1xuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKTtcbiAgICAgIH1cbiAgICAgIC52aWV3Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSwgLnZpZXcubmctbGVhdmUge1xuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7XG4gICAgICB9XG4gICAgICAudmlldy5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSk7XG4gICAgICB9XG4gICAgICAucmVjb3JkLm5nLWFuY2hvci1vdXQge1xuICAgICAgICBiYWNrZ3JvdW5kOnJlZDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgSG93IGlzIHRoZSBlbGVtZW50IHRyYW5zcG9ydGVkP1xuICpcbiAqIFdoZW4gYW4gYW5jaG9yIGFuaW1hdGlvbiBvY2N1cnMsIG5nQW5pbWF0ZSB3aWxsIGNsb25lIHRoZSBzdGFydGluZyBlbGVtZW50IGFuZCBwb3NpdGlvbiBpdCBleGFjdGx5IHdoZXJlIHRoZSBzdGFydGluZ1xuICogZWxlbWVudCBpcyBsb2NhdGVkIG9uIHNjcmVlbiB2aWEgYWJzb2x1dGUgcG9zaXRpb25pbmcuIFRoZSBjbG9uZWQgZWxlbWVudCB3aWxsIGJlIHBsYWNlZCBpbnNpZGUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICogb2YgdGhlIGFwcGxpY2F0aW9uICh3aGVyZSBuZy1hcHAgd2FzIGRlZmluZWQpIGFuZCBhbGwgb2YgdGhlIENTUyBjbGFzc2VzIG9mIHRoZSBzdGFydGluZyBlbGVtZW50IHdpbGwgYmUgYXBwbGllZC4gVGhlXG4gKiBlbGVtZW50IHdpbGwgdGhlbiBhbmltYXRlIGludG8gdGhlIGBvdXRgIGFuZCBgaW5gIGFuaW1hdGlvbnMgYW5kIHdpbGwgZXZlbnR1YWxseSByZWFjaCB0aGUgY29vcmRpbmF0ZXMgYW5kIG1hdGNoXG4gKiB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZGVzdGluYXRpb24gZWxlbWVudC4gRHVyaW5nIHRoZSBlbnRpcmUgYW5pbWF0aW9uIGEgQ1NTIGNsYXNzIG9mIGAubmctYW5pbWF0ZS1zaGltYCB3aWxsIGJlIGFwcGxpZWRcbiAqIHRvIGJvdGggdGhlIHN0YXJ0aW5nIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBpbiBvcmRlciB0byBoaWRlIHRoZW0gZnJvbSBiZWluZyB2aXNpYmxlICh0aGUgQ1NTIHN0eWxpbmcgZm9yIHRoZSBjbGFzc1xuICogaXM6IGB2aXNpYmlsaXR5OmhpZGRlbmApLiBPbmNlIHRoZSBhbmNob3IgcmVhY2hlcyBpdHMgZGVzdGluYXRpb24gdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYW5kIHRoZSBkZXN0aW5hdGlvbiBlbGVtZW50XG4gKiB3aWxsIGJlY29tZSB2aXNpYmxlIHNpbmNlIHRoZSBzaGltIGNsYXNzIHdpbGwgYmUgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgSG93IGlzIHRoZSBtb3JwaGluZyBoYW5kbGVkP1xuICpcbiAqIENTUyBBbmNob3JpbmcgcmVsaWVzIG9uIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgYW5kIHRoZSBpbnRlcm5hbCBjb2RlIGlzIGludGVsbGlnZW50IGVub3VnaCB0byBmaWd1cmUgb3V0XG4gKiB3aGF0IENTUyBjbGFzc2VzIGRpZmZlciBiZXR3ZWVuIHRoZSBzdGFydGluZyBlbGVtZW50IGFuZCB0aGUgZGVzdGluYXRpb24gZWxlbWVudC4gVGhlc2UgZGlmZmVyZW50IENTUyBjbGFzc2VzXG4gKiB3aWxsIGJlIGFkZGVkL3JlbW92ZWQgb24gdGhlIGFuY2hvciBlbGVtZW50IGFuZCBhIHRyYW5zaXRpb24gd2lsbCBiZSBhcHBsaWVkICh0aGUgdHJhbnNpdGlvbiB0aGF0IGlzIHByb3ZpZGVkXG4gKiBpbiB0aGUgYW5jaG9yIGNsYXNzKS4gTG9uZyBzdG9yeSBzaG9ydCwgbmdBbmltYXRlIHdpbGwgZmlndXJlIG91dCB3aGF0IGNsYXNzZXMgdG8gYWRkIGFuZCByZW1vdmUgd2hpY2ggd2lsbFxuICogbWFrZSB0aGUgdHJhbnNpdGlvbiBvZiB0aGUgZWxlbWVudCBhcyBzbW9vdGggYW5kIGF1dG9tYXRpYyBhcyBwb3NzaWJsZS4gQmUgc3VyZSB0byB1c2Ugc2ltcGxlIENTUyBjbGFzc2VzIHRoYXRcbiAqIGRvIG5vdCByZWx5IG9uIERPTSBuZXN0aW5nIHN0cnVjdHVyZSBzbyB0aGF0IHRoZSBhbmNob3IgZWxlbWVudCBhcHBlYXJzIHRoZSBzYW1lIGFzIHRoZSBzdGFydGluZyBlbGVtZW50IChzaW5jZVxuICogdGhlIGNsb25lZCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgb2Ygcm9vdCBlbGVtZW50IHdoaWNoIGlzIGxpa2VseSBjbG9zZSB0byB0aGUgYm9keSBlbGVtZW50KS5cbiAqXG4gKiBOb3RlIHRoYXQgaWYgdGhlIHJvb3QgZWxlbWVudCBpcyBvbiB0aGUgYDxodG1sPmAgZWxlbWVudCB0aGVuIHRoZSBjbG9uZWQgbm9kZSB3aWxsIGJlIHBsYWNlZCBpbnNpZGUgb2YgYm9keS5cbiAqXG4gKlxuICogIyMgVXNpbmcgJGFuaW1hdGUgaW4geW91ciBkaXJlY3RpdmUgY29kZVxuICpcbiAqIFNvIGZhciB3ZSd2ZSBleHBsb3JlZCBob3cgdG8gZmVlZCBpbiBhbmltYXRpb25zIGludG8gYW4gQW5ndWxhciBhcHBsaWNhdGlvbiwgYnV0IGhvdyBkbyB3ZSB0cmlnZ2VyIGFuaW1hdGlvbnMgd2l0aGluIG91ciBvd24gZGlyZWN0aXZlcyBpbiBvdXIgYXBwbGljYXRpb24/XG4gKiBCeSBpbmplY3RpbmcgdGhlIGAkYW5pbWF0ZWAgc2VydmljZSBpbnRvIG91ciBkaXJlY3RpdmUgY29kZSwgd2UgY2FuIHRyaWdnZXIgc3RydWN0dXJhbCBhbmQgY2xhc3MtYmFzZWQgaG9va3Mgd2hpY2ggY2FuIHRoZW4gYmUgY29uc3VtZWQgYnkgYW5pbWF0aW9ucy4gTGV0J3NcbiAqIGltYWdpbmUgd2UgaGF2ZSBhIGdyZWV0aW5nIGJveCB0aGF0IHNob3dzIGFuZCBoaWRlcyBpdHNlbGYgd2hlbiB0aGUgZGF0YSBjaGFuZ2VzXG4gKlxuICogYGBgaHRtbFxuICogPGdyZWV0aW5nLWJveCBhY3RpdmU9XCJvbk9yT2ZmXCI+SGkgdGhlcmU8L2dyZWV0aW5nLWJveD5cbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZHVsZS5kaXJlY3RpdmUoJ2dyZWV0aW5nQm94JywgWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAqICAgICBhdHRycy4kb2JzZXJ2ZSgnYWN0aXZlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICAgIHZhbHVlID8gJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ29uJykgOiAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCAnb24nKTtcbiAqICAgICB9KTtcbiAqICAgfSk7XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiBOb3cgdGhlIGBvbmAgQ1NTIGNsYXNzIGlzIGFkZGVkIGFuZCByZW1vdmVkIG9uIHRoZSBncmVldGluZyBib3ggY29tcG9uZW50LiBOb3cgaWYgd2UgYWRkIGEgQ1NTIGNsYXNzIG9uIHRvcCBvZiB0aGUgZ3JlZXRpbmcgYm94IGVsZW1lbnRcbiAqIGluIG91ciBIVE1MIGNvZGUgdGhlbiB3ZSBjYW4gdHJpZ2dlciBhIENTUyBvciBKUyBhbmltYXRpb24gdG8gaGFwcGVuLlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IG5vcm1hbGx5IHdlIHdvdWxkIGNyZWF0ZSBhIENTUyBjbGFzcyB0byByZWZlcmVuY2Ugb24gdGhlIGVsZW1lbnQgJiM0MjsvXG4gKiBncmVldGluZy1ib3gub24geyB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsgYmFja2dyb3VuZDpncmVlbjsgY29sb3I6d2hpdGU7IH1cbiAqIGBgYFxuICpcbiAqIFRoZSBgJGFuaW1hdGVgIHNlcnZpY2UgY29udGFpbnMgYSB2YXJpZXR5IG9mIG90aGVyIG1ldGhvZHMgbGlrZSBgZW50ZXJgLCBgbGVhdmVgLCBgYW5pbWF0ZWAgYW5kIGBzZXRDbGFzc2AuIFRvIGxlYXJuIG1vcmUgYWJvdXQgd2hhdCdzXG4gKiBwb3NzaWJsZSBiZSBzdXJlIHRvIHZpc2l0IHRoZSB7QGxpbmsgbmcuJGFuaW1hdGUgJGFuaW1hdGUgc2VydmljZSBBUEkgcGFnZX0uXG4gKlxuICpcbiAqICMjIENhbGxiYWNrcyBhbmQgUHJvbWlzZXNcbiAqXG4gKiBXaGVuIGAkYW5pbWF0ZWAgaXMgY2FsbGVkIGl0IHJldHVybnMgYSBwcm9taXNlIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FwdHVyZSB3aGVuIHRoZSBhbmltYXRpb24gaGFzIGVuZGVkLiBUaGVyZWZvcmUgaWYgd2Ugd2VyZSB0byB0cmlnZ2VyXG4gKiBhbiBhbmltYXRpb24gKHdpdGhpbiBvdXIgZGlyZWN0aXZlIGNvZGUpIHRoZW4gd2UgY2FuIGNvbnRpbnVlIHBlcmZvcm1pbmcgZGlyZWN0aXZlIGFuZCBzY29wZSByZWxhdGVkIGFjdGl2aXRpZXMgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBoYXNcbiAqIGVuZGVkIGJ5IGNoYWluaW5nIG9udG8gdGhlIHJldHVybmVkIHByb21pc2UgdGhhdCBhbmltYXRpb24gbWV0aG9kIHJldHVybnMuXG4gKlxuICogYGBganNcbiAqIC8vIHNvbWV3aGVyZSB3aXRoaW4gdGhlIGRlcHRocyBvZiB0aGUgZGlyZWN0aXZlXG4gKiAkYW5pbWF0ZS5lbnRlcihlbGVtZW50LCBwYXJlbnQpLnRoZW4oZnVuY3Rpb24oKSB7XG4gKiAgIC8vdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIChOb3RlIHRoYXQgZWFybGllciB2ZXJzaW9ucyBvZiBBbmd1bGFyIHByaW9yIHRvIHYxLjQgcmVxdWlyZWQgdGhlIHByb21pc2UgY29kZSB0byBiZSB3cmFwcGVkIHVzaW5nIGAkc2NvcGUuJGFwcGx5KC4uLilgLiBUaGlzIGlzIG5vdCB0aGUgY2FzZVxuICogYW55bW9yZS4pXG4gKlxuICogSW4gYWRkaXRpb24gdG8gdGhlIGFuaW1hdGlvbiBwcm9taXNlLCB3ZSBjYW4gYWxzbyBtYWtlIHVzZSBvZiBhbmltYXRpb24tcmVsYXRlZCBjYWxsYmFja3Mgd2l0aGluIG91ciBkaXJlY3RpdmVzIGFuZCBjb250cm9sbGVyIGNvZGUgYnkgcmVnaXN0ZXJpbmdcbiAqIGFuIGV2ZW50IGxpc3RlbmVyIHVzaW5nIHRoZSBgJGFuaW1hdGVgIHNlcnZpY2UuIExldCdzIHNheSBmb3IgZXhhbXBsZSB0aGF0IGFuIGFuaW1hdGlvbiB3YXMgdHJpZ2dlcmVkIG9uIG91ciB2aWV3XG4gKiByb3V0aW5nIGNvbnRyb2xsZXIgdG8gaG9vayBpbnRvIHRoYXQ6XG4gKlxuICogYGBganNcbiAqIG5nTW9kdWxlLmNvbnRyb2xsZXIoJ0hvbWVQYWdlQ29udHJvbGxlcicsIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICogICAkYW5pbWF0ZS5vbignZW50ZXInLCBuZ1ZpZXdFbGVtZW50LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gKiAgICAgLy8gdGhlIGFuaW1hdGlvbiBmb3IgdGhpcyByb3V0ZSBoYXMgY29tcGxldGVkXG4gKiAgIH1dKTtcbiAqIH1dKVxuICogYGBgXG4gKlxuICogKE5vdGUgdGhhdCB5b3Ugd2lsbCBuZWVkIHRvIHRyaWdnZXIgYSBkaWdlc3Qgd2l0aGluIHRoZSBjYWxsYmFjayB0byBnZXQgYW5ndWxhciB0byBub3RpY2UgYW55IHNjb3BlLXJlbGF0ZWQgY2hhbmdlcy4pXG4gKi9cblxudmFyIGNvcHk7XG52YXIgZXh0ZW5kO1xudmFyIGZvckVhY2g7XG52YXIgaXNBcnJheTtcbnZhciBpc0RlZmluZWQ7XG52YXIgaXNFbGVtZW50O1xudmFyIGlzRnVuY3Rpb247XG52YXIgaXNPYmplY3Q7XG52YXIgaXNTdHJpbmc7XG52YXIgaXNVbmRlZmluZWQ7XG52YXIganFMaXRlO1xudmFyIG5vb3A7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRhbmltYXRlXG4gKiBAa2luZCBvYmplY3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ0FuaW1hdGUgYCRhbmltYXRlYCBzZXJ2aWNlIGRvY3VtZW50YXRpb24gaXMgdGhlIHNhbWUgZm9yIHRoZSBjb3JlIGAkYW5pbWF0ZWAgc2VydmljZS5cbiAqXG4gKiBDbGljayBoZXJlIHtAbGluayBuZy4kYW5pbWF0ZSB0byBsZWFybiBtb3JlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgJGFuaW1hdGVgfS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ25nQW5pbWF0ZScsIFtdLCBmdW5jdGlvbiBpbml0QW5ndWxhckhlbHBlcnMoKSB7XG4gIC8vIEFjY2VzcyBoZWxwZXJzIGZyb20gYW5ndWxhciBjb3JlLlxuICAvLyBEbyBpdCBpbnNpZGUgYSBgY29uZmlnYCBibG9jayB0byBlbnN1cmUgYHdpbmRvdy5hbmd1bGFyYCBpcyBhdmFpbGFibGUuXG4gIG5vb3AgICAgICAgID0gYW5ndWxhci5ub29wO1xuICBjb3B5ICAgICAgICA9IGFuZ3VsYXIuY29weTtcbiAgZXh0ZW5kICAgICAgPSBhbmd1bGFyLmV4dGVuZDtcbiAganFMaXRlICAgICAgPSBhbmd1bGFyLmVsZW1lbnQ7XG4gIGZvckVhY2ggICAgID0gYW5ndWxhci5mb3JFYWNoO1xuICBpc0FycmF5ICAgICA9IGFuZ3VsYXIuaXNBcnJheTtcbiAgaXNTdHJpbmcgICAgPSBhbmd1bGFyLmlzU3RyaW5nO1xuICBpc09iamVjdCAgICA9IGFuZ3VsYXIuaXNPYmplY3Q7XG4gIGlzVW5kZWZpbmVkID0gYW5ndWxhci5pc1VuZGVmaW5lZDtcbiAgaXNEZWZpbmVkICAgPSBhbmd1bGFyLmlzRGVmaW5lZDtcbiAgaXNGdW5jdGlvbiAgPSBhbmd1bGFyLmlzRnVuY3Rpb247XG4gIGlzRWxlbWVudCAgID0gYW5ndWxhci5pc0VsZW1lbnQ7XG59KVxuICAuaW5mbyh7IGFuZ3VsYXJWZXJzaW9uOiAnMS42LjQnIH0pXG4gIC5kaXJlY3RpdmUoJ25nQW5pbWF0ZVN3YXAnLCBuZ0FuaW1hdGVTd2FwRGlyZWN0aXZlKVxuXG4gIC5kaXJlY3RpdmUoJ25nQW5pbWF0ZUNoaWxkcmVuJywgJCRBbmltYXRlQ2hpbGRyZW5EaXJlY3RpdmUpXG4gIC5mYWN0b3J5KCckJHJBRlNjaGVkdWxlcicsICQkckFGU2NoZWR1bGVyRmFjdG9yeSlcblxuICAucHJvdmlkZXIoJyQkYW5pbWF0ZVF1ZXVlJywgJCRBbmltYXRlUXVldWVQcm92aWRlcilcbiAgLnByb3ZpZGVyKCckJGFuaW1hdGlvbicsICQkQW5pbWF0aW9uUHJvdmlkZXIpXG5cbiAgLnByb3ZpZGVyKCckYW5pbWF0ZUNzcycsICRBbmltYXRlQ3NzUHJvdmlkZXIpXG4gIC5wcm92aWRlcignJCRhbmltYXRlQ3NzRHJpdmVyJywgJCRBbmltYXRlQ3NzRHJpdmVyUHJvdmlkZXIpXG5cbiAgLnByb3ZpZGVyKCckJGFuaW1hdGVKcycsICQkQW5pbWF0ZUpzUHJvdmlkZXIpXG4gIC5wcm92aWRlcignJCRhbmltYXRlSnNEcml2ZXInLCAkJEFuaW1hdGVKc0RyaXZlclByb3ZpZGVyKTtcblxuXG59KSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKTtcblxuLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNi40XG4gKiAoYykgMjAxMC0yMDE3IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIpIHsndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoO1xudmFyIGlzQXJyYXk7XG52YXIgaXNTdHJpbmc7XG52YXIganFMaXRlO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nTWVzc2FnZXNcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSBgbmdNZXNzYWdlc2AgbW9kdWxlIHByb3ZpZGVzIGVuaGFuY2VkIHN1cHBvcnQgZm9yIGRpc3BsYXlpbmcgbWVzc2FnZXMgd2l0aGluIHRlbXBsYXRlc1xuICogKHR5cGljYWxseSB3aXRoaW4gZm9ybXMgb3Igd2hlbiByZW5kZXJpbmcgbWVzc2FnZSBvYmplY3RzIHRoYXQgcmV0dXJuIGtleS92YWx1ZSBkYXRhKS5cbiAqIEluc3RlYWQgb2YgcmVseWluZyBvbiBKYXZhU2NyaXB0IGNvZGUgYW5kL29yIGNvbXBsZXggbmctaWYgc3RhdGVtZW50cyB3aXRoaW4geW91ciBmb3JtIHRlbXBsYXRlIHRvXG4gKiBzaG93IGFuZCBoaWRlIGVycm9yIG1lc3NhZ2VzIHNwZWNpZmljIHRvIHRoZSBzdGF0ZSBvZiBhbiBpbnB1dCBmaWVsZCwgdGhlIGBuZ01lc3NhZ2VzYCBhbmRcbiAqIGBuZ01lc3NhZ2VgIGRpcmVjdGl2ZXMgYXJlIGRlc2lnbmVkIHRvIGhhbmRsZSB0aGUgY29tcGxleGl0eSwgaW5oZXJpdGFuY2UgYW5kIHByaW9yaXR5XG4gKiBzZXF1ZW5jaW5nIGJhc2VkIG9uIHRoZSBvcmRlciBvZiBob3cgdGhlIG1lc3NhZ2VzIGFyZSBkZWZpbmVkIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBDdXJyZW50bHksIHRoZSBuZ01lc3NhZ2VzIG1vZHVsZSBvbmx5IGNvbnRhaW5zIHRoZSBjb2RlIGZvciB0aGUgYG5nTWVzc2FnZXNgLCBgbmdNZXNzYWdlc0luY2x1ZGVgXG4gKiBgbmdNZXNzYWdlYCBhbmQgYG5nTWVzc2FnZUV4cGAgZGlyZWN0aXZlcy5cbiAqXG4gKiAjIFVzYWdlXG4gKiBUaGUgYG5nTWVzc2FnZXNgIGRpcmVjdGl2ZSBhbGxvd3Mga2V5cyBpbiBhIGtleS92YWx1ZSBjb2xsZWN0aW9uIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCBhIGNoaWxkIGVsZW1lbnRcbiAqIChvciAnbWVzc2FnZScpIHRoYXQgd2lsbCBzaG93IG9yIGhpZGUgYmFzZWQgb24gdGhlIHRydXRoaW5lc3Mgb2YgdGhhdCBrZXkncyB2YWx1ZSBpbiB0aGUgY29sbGVjdGlvbi4gQSBjb21tb24gdXNlXG4gKiBjYXNlIGZvciBgbmdNZXNzYWdlc2AgaXMgdG8gZGlzcGxheSBlcnJvciBtZXNzYWdlcyBmb3IgaW5wdXRzIHVzaW5nIHRoZSBgJGVycm9yYCBvYmplY3QgZXhwb3NlZCBieSB0aGVcbiAqIHtAbGluayBuZ01vZGVsIG5nTW9kZWx9IGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGUgY2hpbGQgZWxlbWVudHMgb2YgdGhlIGBuZ01lc3NhZ2VzYCBkaXJlY3RpdmUgYXJlIG1hdGNoZWQgdG8gdGhlIGNvbGxlY3Rpb24ga2V5cyBieSBhIGBuZ01lc3NhZ2VgIG9yXG4gKiBgbmdNZXNzYWdlRXhwYCBkaXJlY3RpdmUuIFRoZSB2YWx1ZSBvZiB0aGVzZSBhdHRyaWJ1dGVzIG11c3QgbWF0Y2ggYSBrZXkgaW4gdGhlIGNvbGxlY3Rpb24gdGhhdCBpcyBwcm92aWRlZCBieVxuICogdGhlIGBuZ01lc3NhZ2VzYCBkaXJlY3RpdmUuXG4gKlxuICogQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBleGFtcGxlLCB3aGljaCBpbGx1c3RyYXRlcyBhIHR5cGljYWwgdXNlIGNhc2Ugb2YgYG5nTWVzc2FnZXNgLiBXaXRoaW4gdGhlIGZvcm0gYG15Rm9ybWAgd2VcbiAqIGhhdmUgYSB0ZXh0IGlucHV0IG5hbWVkIGBteUZpZWxkYCB3aGljaCBpcyBib3VuZCB0byB0aGUgc2NvcGUgdmFyaWFibGUgYGZpZWxkYCB1c2luZyB0aGUge0BsaW5rIG5nTW9kZWwgbmdNb2RlbH1cbiAqIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGUgYG15RmllbGRgIGZpZWxkIGlzIGEgcmVxdWlyZWQgaW5wdXQgb2YgdHlwZSBgZW1haWxgIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiAxNSBjaGFyYWN0ZXJzLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgPGxhYmVsPlxuICogICAgIEVudGVyIHRleHQ6XG4gKiAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiIG5nLW1vZGVsPVwiZmllbGRcIiBuYW1lPVwibXlGaWVsZFwiIHJlcXVpcmVkIG1heGxlbmd0aD1cIjE1XCIgLz5cbiAqICAgPC9sYWJlbD5cbiAqICAgPGRpdiBuZy1tZXNzYWdlcz1cIm15Rm9ybS5teUZpZWxkLiRlcnJvclwiIHJvbGU9XCJhbGVydFwiPlxuICogICAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+UGxlYXNlIGVudGVyIGEgdmFsdWUgZm9yIHRoaXMgZmllbGQuPC9kaXY+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlPVwiZW1haWxcIj5UaGlzIGZpZWxkIG11c3QgYmUgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLjwvZGl2PlxuICogICAgIDxkaXYgbmctbWVzc2FnZT1cIm1heGxlbmd0aFwiPlRoaXMgZmllbGQgY2FuIGJlIGF0IG1vc3QgMTUgY2hhcmFjdGVycyBsb25nLjwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZm9ybT5cbiAqIGBgYFxuICpcbiAqIEluIG9yZGVyIHRvIHNob3cgZXJyb3IgbWVzc2FnZXMgY29ycmVzcG9uZGluZyB0byBgbXlGaWVsZGAgd2UgZmlyc3QgY3JlYXRlIGFuIGVsZW1lbnQgd2l0aCBhbiBgbmdNZXNzYWdlc2AgYXR0cmlidXRlXG4gKiBzZXQgdG8gdGhlIGAkZXJyb3JgIG9iamVjdCBvd25lZCBieSB0aGUgYG15RmllbGRgIGlucHV0IGluIG91ciBgbXlGb3JtYCBmb3JtLlxuICpcbiAqIFdpdGhpbiB0aGlzIGVsZW1lbnQgd2UgdGhlbiBjcmVhdGUgc2VwYXJhdGUgZWxlbWVudHMgZm9yIGVhY2ggb2YgdGhlIHBvc3NpYmxlIGVycm9ycyB0aGF0IGBteUZpZWxkYCBjb3VsZCBoYXZlLlxuICogVGhlIGBuZ01lc3NhZ2VgIGF0dHJpYnV0ZSBpcyB1c2VkIHRvIGRlY2xhcmUgd2hpY2ggZWxlbWVudChzKSB3aWxsIGFwcGVhciBmb3Igd2hpY2ggZXJyb3IgLSBmb3IgZXhhbXBsZSxcbiAqIHNldHRpbmcgYG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiYCBzcGVjaWZpZXMgdGhhdCB0aGlzIHBhcnRpY3VsYXIgZWxlbWVudCBzaG91bGQgYmUgZGlzcGxheWVkIHdoZW4gdGhlcmVcbiAqIGlzIG5vIHZhbHVlIHByZXNlbnQgZm9yIHRoZSByZXF1aXJlZCBmaWVsZCBgbXlGaWVsZGAgKGJlY2F1c2UgdGhlIGtleSBgcmVxdWlyZWRgIHdpbGwgYmUgYHRydWVgIGluIHRoZSBvYmplY3RcbiAqIGBteUZvcm0ubXlGaWVsZC4kZXJyb3JgKS5cbiAqXG4gKiAjIyMgTWVzc2FnZSBvcmRlclxuICpcbiAqIEJ5IGRlZmF1bHQsIGBuZ01lc3NhZ2VzYCB3aWxsIG9ubHkgZGlzcGxheSBvbmUgbWVzc2FnZSBmb3IgYSBwYXJ0aWN1bGFyIGtleS92YWx1ZSBjb2xsZWN0aW9uIGF0IGFueSB0aW1lLiBJZiBtb3JlXG4gKiB0aGFuIG9uZSBtZXNzYWdlIChvciBlcnJvcikga2V5IGlzIGN1cnJlbnRseSB0cnVlLCB0aGVuIHdoaWNoIG1lc3NhZ2UgaXMgc2hvd24gaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgb2YgbWVzc2FnZXNcbiAqIGluIHRoZSBIVE1MIHRlbXBsYXRlIGNvZGUgKG1lc3NhZ2VzIGRlY2xhcmVkIGZpcnN0IGFyZSBwcmlvcml0aXNlZCkuIFRoaXMgbWVjaGFuaXNtIG1lYW5zIHRoZSBkZXZlbG9wZXIgZG9lcyBub3QgaGF2ZVxuICogdG8gcHJpb3JpdGl6ZSBtZXNzYWdlcyB1c2luZyBjdXN0b20gSmF2YVNjcmlwdCBjb2RlLlxuICpcbiAqIEdpdmVuIHRoZSBmb2xsb3dpbmcgZXJyb3Igb2JqZWN0IGZvciBvdXIgZXhhbXBsZSAod2hpY2ggaW5mb3JtcyB1cyB0aGF0IHRoZSBmaWVsZCBgbXlGaWVsZGAgY3VycmVudGx5IGhhcyBib3RoIHRoZVxuICogYHJlcXVpcmVkYCBhbmQgYGVtYWlsYCBlcnJvcnMpOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIDwhLS0ga2VlcCBpbiBtaW5kIHRoYXQgbmdNb2RlbCBhdXRvbWF0aWNhbGx5IHNldHMgdGhlc2UgZXJyb3IgZmxhZ3MgLS0+XG4gKiBteUZpZWxkLiRlcnJvciA9IHsgcmVxdWlyZWQgOiB0cnVlLCBlbWFpbDogdHJ1ZSwgbWF4bGVuZ3RoOiBmYWxzZSB9O1xuICogYGBgXG4gKiBUaGUgYHJlcXVpcmVkYCBtZXNzYWdlIHdpbGwgYmUgZGlzcGxheWVkIHRvIHRoZSB1c2VyIHNpbmNlIGl0IGFwcGVhcnMgYmVmb3JlIHRoZSBgZW1haWxgIG1lc3NhZ2UgaW4gdGhlIERPTS5cbiAqIE9uY2UgdGhlIHVzZXIgdHlwZXMgYSBzaW5nbGUgY2hhcmFjdGVyLCB0aGUgYHJlcXVpcmVkYCBtZXNzYWdlIHdpbGwgZGlzYXBwZWFyIChzaW5jZSB0aGUgZmllbGQgbm93IGhhcyBhIHZhbHVlKVxuICogYnV0IHRoZSBgZW1haWxgIG1lc3NhZ2Ugd2lsbCBiZSB2aXNpYmxlIGJlY2F1c2UgaXQgaXMgc3RpbGwgYXBwbGljYWJsZS5cbiAqXG4gKiAjIyMgRGlzcGxheWluZyBtdWx0aXBsZSBtZXNzYWdlcyBhdCB0aGUgc2FtZSB0aW1lXG4gKlxuICogV2hpbGUgYG5nTWVzc2FnZXNgIHdpbGwgYnkgZGVmYXVsdCBvbmx5IGRpc3BsYXkgb25lIGVycm9yIGVsZW1lbnQgYXQgYSB0aW1lLCB0aGUgYG5nLW1lc3NhZ2VzLW11bHRpcGxlYCBhdHRyaWJ1dGUgY2FuXG4gKiBiZSBhcHBsaWVkIHRvIHRoZSBgbmdNZXNzYWdlc2AgY29udGFpbmVyIGVsZW1lbnQgdG8gY2F1c2UgaXQgdG8gZGlzcGxheSBhbGwgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlcyBhdCBvbmNlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gYXR0cmlidXRlLXN0eWxlIHVzYWdlIC0tPlxuICogPGRpdiBuZy1tZXNzYWdlcz1cIm15Rm9ybS5teUZpZWxkLiRlcnJvclwiIG5nLW1lc3NhZ2VzLW11bHRpcGxlPi4uLjwvZGl2PlxuICpcbiAqIDwhLS0gZWxlbWVudC1zdHlsZSB1c2FnZSAtLT5cbiAqIDxuZy1tZXNzYWdlcyBmb3I9XCJteUZvcm0ubXlGaWVsZC4kZXJyb3JcIiBtdWx0aXBsZT4uLi48L25nLW1lc3NhZ2VzPlxuICogYGBgXG4gKlxuICogIyMgUmV1c2luZyBhbmQgT3ZlcnJpZGluZyBNZXNzYWdlc1xuICogSW4gYWRkaXRpb24gdG8gcHJpb3JpdGl6YXRpb24sIG5nTWVzc2FnZXMgYWxzbyBhbGxvd3MgZm9yIGluY2x1ZGluZyBtZXNzYWdlcyBmcm9tIGEgcmVtb3RlIG9yIGFuIGlubGluZVxuICogdGVtcGxhdGUuIFRoaXMgYWxsb3dzIGZvciBnZW5lcmljIGNvbGxlY3Rpb24gb2YgbWVzc2FnZXMgdG8gYmUgcmV1c2VkIGFjcm9zcyBtdWx0aXBsZSBwYXJ0cyBvZiBhblxuICogYXBwbGljYXRpb24uXG4gKlxuICogYGBgaHRtbFxuICogPHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwiZXJyb3ItbWVzc2FnZXNcIj5cbiAqICAgPGRpdiBuZy1tZXNzYWdlPVwicmVxdWlyZWRcIj5UaGlzIGZpZWxkIGlzIHJlcXVpcmVkPC9kaXY+XG4gKiAgIDxkaXYgbmctbWVzc2FnZT1cIm1pbmxlbmd0aFwiPlRoaXMgZmllbGQgaXMgdG9vIHNob3J0PC9kaXY+XG4gKiA8L3NjcmlwdD5cbiAqXG4gKiA8ZGl2IG5nLW1lc3NhZ2VzPVwibXlGb3JtLm15RmllbGQuJGVycm9yXCIgcm9sZT1cImFsZXJ0XCI+XG4gKiAgIDxkaXYgbmctbWVzc2FnZXMtaW5jbHVkZT1cImVycm9yLW1lc3NhZ2VzXCI+PC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEhvd2V2ZXIsIGluY2x1ZGluZyBnZW5lcmljIG1lc3NhZ2VzIG1heSBub3QgYmUgdXNlZnVsIGVub3VnaCB0byBtYXRjaCBhbGwgaW5wdXQgZmllbGRzLCB0aGVyZWZvcmUsXG4gKiBgbmdNZXNzYWdlc2AgcHJvdmlkZXMgdGhlIGFiaWxpdHkgdG8gb3ZlcnJpZGUgbWVzc2FnZXMgZGVmaW5lZCBpbiB0aGUgcmVtb3RlIHRlbXBsYXRlIGJ5IHJlZGVmaW5pbmdcbiAqIHRoZW0gd2l0aGluIHRoZSBkaXJlY3RpdmUgY29udGFpbmVyLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gYSBnZW5lcmljIHRlbXBsYXRlIG9mIGVycm9yIG1lc3NhZ2VzIGtub3duIGFzIFwibXktY3VzdG9tLW1lc3NhZ2VzXCIgLS0+XG4gKiA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCJteS1jdXN0b20tbWVzc2FnZXNcIj5cbiAqICAgPGRpdiBuZy1tZXNzYWdlPVwicmVxdWlyZWRcIj5UaGlzIGZpZWxkIGlzIHJlcXVpcmVkPC9kaXY+XG4gKiAgIDxkaXYgbmctbWVzc2FnZT1cIm1pbmxlbmd0aFwiPlRoaXMgZmllbGQgaXMgdG9vIHNob3J0PC9kaXY+XG4gKiA8L3NjcmlwdD5cbiAqXG4gKiA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgIDxsYWJlbD5cbiAqICAgICBFbWFpbCBhZGRyZXNzXG4gKiAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiXG4gKiAgICAgICAgICAgIGlkPVwiZW1haWxcIlxuICogICAgICAgICAgICBuYW1lPVwibXlFbWFpbFwiXG4gKiAgICAgICAgICAgIG5nLW1vZGVsPVwiZW1haWxcIlxuICogICAgICAgICAgICBtaW5sZW5ndGg9XCI1XCJcbiAqICAgICAgICAgICAgcmVxdWlyZWQgLz5cbiAqICAgPC9sYWJlbD5cbiAqICAgPCEtLSBhbnkgbmctbWVzc2FnZSBlbGVtZW50cyB0aGF0IGFwcGVhciBCRUZPUkUgdGhlIG5nLW1lc3NhZ2VzLWluY2x1ZGUgd2lsbFxuICogICAgICAgIG92ZXJyaWRlIHRoZSBtZXNzYWdlcyBwcmVzZW50IGluIHRoZSBuZy1tZXNzYWdlcy1pbmNsdWRlIHRlbXBsYXRlIC0tPlxuICogICA8ZGl2IG5nLW1lc3NhZ2VzPVwibXlGb3JtLm15RW1haWwuJGVycm9yXCIgcm9sZT1cImFsZXJ0XCI+XG4gKiAgICAgPCEtLSB0aGlzIHJlcXVpcmVkIG1lc3NhZ2UgaGFzIG92ZXJyaWRkZW4gdGhlIHRlbXBsYXRlIG1lc3NhZ2UgLS0+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlPVwicmVxdWlyZWRcIj5Zb3UgZGlkIG5vdCBlbnRlciB5b3VyIGVtYWlsIGFkZHJlc3M8L2Rpdj5cbiAqXG4gKiAgICAgPCEtLSB0aGlzIGlzIGEgYnJhbmQgbmV3IG1lc3NhZ2UgYW5kIHdpbGwgYXBwZWFyIGxhc3QgaW4gdGhlIHByaW9yaXRpemF0aW9uIC0tPlxuICogICAgIDxkaXYgbmctbWVzc2FnZT1cImVtYWlsXCI+WW91ciBlbWFpbCBhZGRyZXNzIGlzIGludmFsaWQ8L2Rpdj5cbiAqXG4gKiAgICAgPCEtLSBhbmQgaGVyZSBhcmUgdGhlIGdlbmVyaWMgZXJyb3IgbWVzc2FnZXMgLS0+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlcy1pbmNsdWRlPVwibXktY3VzdG9tLW1lc3NhZ2VzXCI+PC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9mb3JtPlxuICogYGBgXG4gKlxuICogSW4gdGhlIGV4YW1wbGUgSFRNTCBjb2RlIGFib3ZlIHRoZSBtZXNzYWdlIHRoYXQgaXMgc2V0IG9uIHJlcXVpcmVkIHdpbGwgb3ZlcnJpZGUgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIHJlcXVpcmVkIG1lc3NhZ2UgZGVmaW5lZCB3aXRoaW4gdGhlIHJlbW90ZSB0ZW1wbGF0ZS4gVGhlcmVmb3JlLCB3aXRoIHBhcnRpY3VsYXIgaW5wdXQgZmllbGRzIChzdWNoXG4gKiBlbWFpbCBhZGRyZXNzZXMsIGRhdGUgZmllbGRzLCBhdXRvY29tcGxldGUgaW5wdXRzLCBldGMuLi4pLCBzcGVjaWFsaXplZCBlcnJvciBtZXNzYWdlcyBjYW4gYmUgYXBwbGllZFxuICogd2hpbGUgbW9yZSBnZW5lcmljIG1lc3NhZ2VzIGNhbiBiZSB1c2VkIHRvIGhhbmRsZSBvdGhlciwgbW9yZSBnZW5lcmFsIGlucHV0IGVycm9ycy5cbiAqXG4gKiAjIyBEeW5hbWljIE1lc3NhZ2luZ1xuICogbmdNZXNzYWdlcyBhbHNvIHN1cHBvcnRzIHVzaW5nIGV4cHJlc3Npb25zIHRvIGR5bmFtaWNhbGx5IGNoYW5nZSBrZXkgdmFsdWVzLiBVc2luZyBhcnJheXMgYW5kXG4gKiByZXBlYXRlcnMgdG8gbGlzdCBtZXNzYWdlcyBpcyBhbHNvIHN1cHBvcnRlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBjb2RlIGJlbG93IHdpbGwgYmUgYWJsZSB0b1xuICogZnVsbHkgYWRhcHQgaXRzZWxmIGFuZCBkaXNwbGF5IHRoZSBhcHByb3ByaWF0ZSBtZXNzYWdlIHdoZW4gYW55IG9mIHRoZSBleHByZXNzaW9uIGRhdGEgY2hhbmdlczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgIDxsYWJlbD5cbiAqICAgICBFbWFpbCBhZGRyZXNzXG4gKiAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiXG4gKiAgICAgICAgICAgIG5hbWU9XCJteUVtYWlsXCJcbiAqICAgICAgICAgICAgbmctbW9kZWw9XCJlbWFpbFwiXG4gKiAgICAgICAgICAgIG1pbmxlbmd0aD1cIjVcIlxuICogICAgICAgICAgICByZXF1aXJlZCAvPlxuICogICA8L2xhYmVsPlxuICogICA8ZGl2IG5nLW1lc3NhZ2VzPVwibXlGb3JtLm15RW1haWwuJGVycm9yXCIgcm9sZT1cImFsZXJ0XCI+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlPVwicmVxdWlyZWRcIj5Zb3UgZGlkIG5vdCBlbnRlciB5b3VyIGVtYWlsIGFkZHJlc3M8L2Rpdj5cbiAqICAgICA8ZGl2IG5nLXJlcGVhdD1cImVycm9yTWVzc2FnZSBpbiBlcnJvck1lc3NhZ2VzXCI+XG4gKiAgICAgICA8IS0tIHVzZSBuZy1tZXNzYWdlLWV4cCBmb3IgYSBtZXNzYWdlIHdob3NlIGtleSBpcyBnaXZlbiBieSBhbiBleHByZXNzaW9uIC0tPlxuICogICAgICAgPGRpdiBuZy1tZXNzYWdlLWV4cD1cImVycm9yTWVzc2FnZS50eXBlXCI+e3sgZXJyb3JNZXNzYWdlLnRleHQgfX08L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2Zvcm0+XG4gKiBgYGBcbiAqXG4gKiBUaGUgYGVycm9yTWVzc2FnZS50eXBlYCBleHByZXNzaW9uIGNhbiBiZSBhIHN0cmluZyB2YWx1ZSBvciBpdCBjYW4gYmUgYW4gYXJyYXkgc29cbiAqIHRoYXQgbXVsdGlwbGUgZXJyb3JzIGNhbiBiZSBhc3NvY2lhdGVkIHdpdGggYSBzaW5nbGUgZXJyb3IgbWVzc2FnZTpcbiAqXG4gKiBgYGBodG1sXG4gKiAgIDxsYWJlbD5cbiAqICAgICBFbWFpbCBhZGRyZXNzXG4gKiAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiXG4gKiAgICAgICAgICAgIG5nLW1vZGVsPVwiZGF0YS5lbWFpbFwiXG4gKiAgICAgICAgICAgIG5hbWU9XCJteUVtYWlsXCJcbiAqICAgICAgICAgICAgbmctbWlubGVuZ3RoPVwiNVwiXG4gKiAgICAgICAgICAgIG5nLW1heGxlbmd0aD1cIjEwMFwiXG4gKiAgICAgICAgICAgIHJlcXVpcmVkIC8+XG4gKiAgIDwvbGFiZWw+XG4gKiAgIDxkaXYgbmctbWVzc2FnZXM9XCJteUZvcm0ubXlFbWFpbC4kZXJyb3JcIiByb2xlPVwiYWxlcnRcIj5cbiAqICAgICA8ZGl2IG5nLW1lc3NhZ2UtZXhwPVwiJ3JlcXVpcmVkJ1wiPllvdSBkaWQgbm90IGVudGVyIHlvdXIgZW1haWwgYWRkcmVzczwvZGl2PlxuICogICAgIDxkaXYgbmctbWVzc2FnZS1leHA9XCJbJ21pbmxlbmd0aCcsICdtYXhsZW5ndGgnXVwiPlxuICogICAgICAgWW91ciBlbWFpbCBtdXN0IGJlIGJldHdlZW4gNSBhbmQgMTAwIGNoYXJhY3RlcnMgbG9uZ1xuICogICAgIDwvZGl2PlxuICogICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEZlZWwgZnJlZSB0byB1c2Ugb3RoZXIgc3RydWN0dXJhbCBkaXJlY3RpdmVzIHN1Y2ggYXMgbmctaWYgYW5kIG5nLXN3aXRjaCB0byBmdXJ0aGVyIGNvbnRyb2xcbiAqIHdoYXQgbWVzc2FnZXMgYXJlIGFjdGl2ZSBhbmQgd2hlbi4gQmUgY2FyZWZ1bCwgaWYgeW91IHBsYWNlIG5nLW1lc3NhZ2Ugb24gdGhlIHNhbWUgZWxlbWVudFxuICogYXMgdGhlc2Ugc3RydWN0dXJhbCBkaXJlY3RpdmVzLCBBbmd1bGFyIG1heSBub3QgYmUgYWJsZSB0byBkZXRlcm1pbmUgaWYgYSBtZXNzYWdlIGlzIGFjdGl2ZVxuICogb3Igbm90LiBUaGVyZWZvcmUgaXQgaXMgYmVzdCB0byBwbGFjZSB0aGUgbmctbWVzc2FnZSBvbiBhIGNoaWxkIGVsZW1lbnQgb2YgdGhlIHN0cnVjdHVyYWxcbiAqIGRpcmVjdGl2ZS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLW1lc3NhZ2VzPVwibXlGb3JtLm15RW1haWwuJGVycm9yXCIgcm9sZT1cImFsZXJ0XCI+XG4gKiAgIDxkaXYgbmctaWY9XCJzaG93UmVxdWlyZWRFcnJvclwiPlxuICogICAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+UGxlYXNlIGVudGVyIHNvbWV0aGluZzwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogIyMgQW5pbWF0aW9uc1xuICogSWYgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBpcyBhY3RpdmUgd2l0aGluIHRoZSBhcHBsaWNhdGlvbiB0aGVuIHRoZSBgbmdNZXNzYWdlc2AsIGBuZ01lc3NhZ2VgIGFuZFxuICogYG5nTWVzc2FnZUV4cGAgZGlyZWN0aXZlcyB3aWxsIHRyaWdnZXIgYW5pbWF0aW9ucyB3aGVuZXZlciBhbnkgbWVzc2FnZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkIGZyb21cbiAqIHRoZSBET00gYnkgdGhlIGBuZ01lc3NhZ2VzYCBkaXJlY3RpdmUuXG4gKlxuICogV2hlbmV2ZXIgdGhlIGBuZ01lc3NhZ2VzYCBkaXJlY3RpdmUgY29udGFpbnMgb25lIG9yIG1vcmUgdmlzaWJsZSBtZXNzYWdlcyB0aGVuIHRoZSBgLm5nLWFjdGl2ZWAgQ1NTXG4gKiBjbGFzcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1pbmFjdGl2ZWAgQ1NTIGNsYXNzIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZXJlIGFyZSBub1xuICogbWVzc2FnZXMgcHJlc2VudC4gVGhlcmVmb3JlLCBDU1MgdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lcyBhcyB3ZWxsIGFzIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBjYW5cbiAqIGhvb2sgaW50byB0aGUgYW5pbWF0aW9ucyB3aGVuZXZlciB0aGVzZSBjbGFzc2VzIGFyZSBhZGRlZC9yZW1vdmVkLlxuICpcbiAqIExldCdzIHNheSB0aGF0IG91ciBIVE1MIGNvZGUgZm9yIG91ciBtZXNzYWdlcyBjb250YWluZXIgbG9va3MgbGlrZSBzbzpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLW1lc3NhZ2VzPVwibXlNZXNzYWdlc1wiIGNsYXNzPVwibXktbWVzc2FnZXNcIiByb2xlPVwiYWxlcnRcIj5cbiAqICAgPGRpdiBuZy1tZXNzYWdlPVwiYWxlcnRcIiBjbGFzcz1cInNvbWUtbWVzc2FnZVwiPi4uLjwvZGl2PlxuICogICA8ZGl2IG5nLW1lc3NhZ2U9XCJmYWlsXCIgY2xhc3M9XCJzb21lLW1lc3NhZ2VcIj4uLi48L2Rpdj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogVGhlbiB0aGUgQ1NTIGFuaW1hdGlvbiBjb2RlIGZvciB0aGUgbWVzc2FnZSBjb250YWluZXIgbG9va3MgbGlrZSBzbzpcbiAqXG4gKiBgYGBjc3NcbiAqIC5teS1tZXNzYWdlcyB7XG4gKiAgIHRyYW5zaXRpb246MXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqIC5teS1tZXNzYWdlcy5uZy1hY3RpdmUge1xuICogICAvLyBtZXNzYWdlcyBhcmUgdmlzaWJsZVxuICogfVxuICogLm15LW1lc3NhZ2VzLm5nLWluYWN0aXZlIHtcbiAqICAgLy8gbWVzc2FnZXMgYXJlIGhpZGRlblxuICogfVxuICogYGBgXG4gKlxuICogV2hlbmV2ZXIgYW4gaW5uZXIgbWVzc2FnZSBpcyBhdHRhY2hlZCAoYmVjb21lcyB2aXNpYmxlKSBvciByZW1vdmVkIChiZWNvbWVzIGhpZGRlbikgdGhlbiB0aGUgZW50ZXJcbiAqIGFuZCBsZWF2ZSBhbmltYXRpb24gaXMgdHJpZ2dlcmVkIGZvciBlYWNoIHBhcnRpY3VsYXIgZWxlbWVudCBib3VuZCB0byB0aGUgYG5nTWVzc2FnZWAgZGlyZWN0aXZlLlxuICpcbiAqIFRoZXJlZm9yZSwgdGhlIENTUyBjb2RlIGZvciB0aGUgaW5uZXIgbWVzc2FnZXMgbG9va3MgbGlrZSBzbzpcbiAqXG4gKiBgYGBjc3NcbiAqIC5zb21lLW1lc3NhZ2Uge1xuICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLnNvbWUtbWVzc2FnZS5uZy1lbnRlciB7fVxuICogLnNvbWUtbWVzc2FnZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge31cbiAqXG4gKiAuc29tZS1tZXNzYWdlLm5nLWxlYXZlIHt9XG4gKiAuc29tZS1tZXNzYWdlLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7fVxuICogYGBgXG4gKlxuICoge0BsaW5rIG5nQW5pbWF0ZSBDbGljayBoZXJlfSB0byBsZWFybiBob3cgdG8gdXNlIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBvciB0byBsZWFybiBtb3JlIGFib3V0IG5nQW5pbWF0ZS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ25nTWVzc2FnZXMnLCBbXSwgZnVuY3Rpb24gaW5pdEFuZ3VsYXJIZWxwZXJzKCkge1xuICAvLyBBY2Nlc3MgaGVscGVycyBmcm9tIGFuZ3VsYXIgY29yZS5cbiAgLy8gRG8gaXQgaW5zaWRlIGEgYGNvbmZpZ2AgYmxvY2sgdG8gZW5zdXJlIGB3aW5kb3cuYW5ndWxhcmAgaXMgYXZhaWxhYmxlLlxuICBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoO1xuICBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5O1xuICBpc1N0cmluZyA9IGFuZ3VsYXIuaXNTdHJpbmc7XG4gIGpxTGl0ZSA9IGFuZ3VsYXIuZWxlbWVudDtcbn0pXG4gIC5pbmZvKHsgYW5ndWxhclZlcnNpb246ICcxLjYuNCcgfSlcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbW9kdWxlIG5nTWVzc2FnZXNcbiAgICogQG5hbWUgbmdNZXNzYWdlc1xuICAgKiBAcmVzdHJpY3QgQUVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIGBuZ01lc3NhZ2VzYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGlzIGRlc2lnbmVkIHRvIHNob3cgYW5kIGhpZGUgbWVzc2FnZXMgYmFzZWQgb24gdGhlIHN0YXRlXG4gICAqIG9mIGEga2V5L3ZhbHVlIG9iamVjdCB0aGF0IGl0IGxpc3RlbnMgb24uIFRoZSBkaXJlY3RpdmUgaXRzZWxmIGNvbXBsZW1lbnRzIGVycm9yIG1lc3NhZ2VcbiAgICogcmVwb3J0aW5nIHdpdGggdGhlIGBuZ01vZGVsYCAkZXJyb3Igb2JqZWN0ICh3aGljaCBzdG9yZXMgYSBrZXkvdmFsdWUgc3RhdGUgb2YgdmFsaWRhdGlvbiBlcnJvcnMpLlxuICAgKlxuICAgKiBgbmdNZXNzYWdlc2AgbWFuYWdlcyB0aGUgc3RhdGUgb2YgaW50ZXJuYWwgbWVzc2FnZXMgd2l0aGluIGl0cyBjb250YWluZXIgZWxlbWVudC4gVGhlIGludGVybmFsXG4gICAqIG1lc3NhZ2VzIHVzZSB0aGUgYG5nTWVzc2FnZWAgZGlyZWN0aXZlIGFuZCB3aWxsIGJlIGluc2VydGVkL3JlbW92ZWQgZnJvbSB0aGUgcGFnZSBkZXBlbmRpbmdcbiAgICogb24gaWYgdGhleSdyZSBwcmVzZW50IHdpdGhpbiB0aGUga2V5L3ZhbHVlIG9iamVjdC4gQnkgZGVmYXVsdCwgb25seSBvbmUgbWVzc2FnZSB3aWxsIGJlIGRpc3BsYXllZFxuICAgKiBhdCBhIHRpbWUgYW5kIHRoaXMgZGVwZW5kcyBvbiB0aGUgcHJpb3JpdGl6YXRpb24gb2YgdGhlIG1lc3NhZ2VzIHdpdGhpbiB0aGUgdGVtcGxhdGUuIChUaGlzIGNhblxuICAgKiBiZSBjaGFuZ2VkIGJ5IHVzaW5nIHRoZSBgbmctbWVzc2FnZXMtbXVsdGlwbGVgIG9yIGBtdWx0aXBsZWAgYXR0cmlidXRlIG9uIHRoZSBkaXJlY3RpdmUgY29udGFpbmVyLilcbiAgICpcbiAgICogQSByZW1vdGUgdGVtcGxhdGUgY2FuIGFsc28gYmUgdXNlZCB0byBwcm9tb3RlIG1lc3NhZ2UgcmV1c2FiaWxpdHkgYW5kIG1lc3NhZ2VzIGNhbiBhbHNvIGJlXG4gICAqIG92ZXJyaWRkZW4uXG4gICAqXG4gICAqIHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyBDbGljayBoZXJlfSB0byBsZWFybiBtb3JlIGFib3V0IGBuZ01lc3NhZ2VzYCBhbmQgYG5nTWVzc2FnZWAuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBodG1sXG4gICAqIDwhLS0gdXNpbmcgYXR0cmlidXRlIGRpcmVjdGl2ZXMgLS0+XG4gICAqIDxBTlkgbmctbWVzc2FnZXM9XCJleHByZXNzaW9uXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAqICAgPEFOWSBuZy1tZXNzYWdlPVwic3RyaW5nVmFsdWVcIj4uLi48L0FOWT5cbiAgICogICA8QU5ZIG5nLW1lc3NhZ2U9XCJzdHJpbmdWYWx1ZTEsIHN0cmluZ1ZhbHVlMiwgLi4uXCI+Li4uPC9BTlk+XG4gICAqICAgPEFOWSBuZy1tZXNzYWdlLWV4cD1cImV4cHJlc3Npb25WYWx1ZVwiPi4uLjwvQU5ZPlxuICAgKiA8L0FOWT5cbiAgICpcbiAgICogPCEtLSBvciBieSB1c2luZyBlbGVtZW50IGRpcmVjdGl2ZXMgLS0+XG4gICAqIDxuZy1tZXNzYWdlcyBmb3I9XCJleHByZXNzaW9uXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAqICAgPG5nLW1lc3NhZ2Ugd2hlbj1cInN0cmluZ1ZhbHVlXCI+Li4uPC9uZy1tZXNzYWdlPlxuICAgKiAgIDxuZy1tZXNzYWdlIHdoZW49XCJzdHJpbmdWYWx1ZTEsIHN0cmluZ1ZhbHVlMiwgLi4uXCI+Li4uPC9uZy1tZXNzYWdlPlxuICAgKiAgIDxuZy1tZXNzYWdlIHdoZW4tZXhwPVwiZXhwcmVzc2lvblZhbHVlXCI+Li4uPC9uZy1tZXNzYWdlPlxuICAgKiA8L25nLW1lc3NhZ2VzPlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTWVzc2FnZXMgYW4gYW5ndWxhciBleHByZXNzaW9uIGV2YWx1YXRpbmcgdG8gYSBrZXkvdmFsdWUgb2JqZWN0XG4gICAqICAgICAgICAgICAgICAgICAodGhpcyBpcyB0eXBpY2FsbHkgdGhlICRlcnJvciBvYmplY3Qgb24gYW4gbmdNb2RlbCBpbnN0YW5jZSkuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdNZXNzYWdlc011bHRpcGxlfG11bHRpcGxlIHdoZW4gc2V0LCBhbGwgbWVzc2FnZXMgd2lsbCBiZSBkaXNwbGF5ZWQgd2l0aCB0cnVlXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxleGFtcGxlIG5hbWU9XCJuZ01lc3NhZ2VzLWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nTWVzc2FnZXNFeGFtcGxlXCJcbiAgICogICAgICAgICAgZGVwcz1cImFuZ3VsYXItbWVzc2FnZXMuanNcIlxuICAgKiAgICAgICAgICBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCI+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICogICAgICAgPGxhYmVsPlxuICAgKiAgICAgICAgIEVudGVyIHlvdXIgbmFtZTpcbiAgICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICAgKiAgICAgICAgICAgICAgICBuYW1lPVwibXlOYW1lXCJcbiAgICogICAgICAgICAgICAgICAgbmctbW9kZWw9XCJuYW1lXCJcbiAgICogICAgICAgICAgICAgICAgbmctbWlubGVuZ3RoPVwiNVwiXG4gICAqICAgICAgICAgICAgICAgIG5nLW1heGxlbmd0aD1cIjIwXCJcbiAgICogICAgICAgICAgICAgICAgcmVxdWlyZWQgLz5cbiAgICogICAgICAgPC9sYWJlbD5cbiAgICogICAgICAgPHByZT5teUZvcm0ubXlOYW1lLiRlcnJvciA9IHt7IG15Rm9ybS5teU5hbWUuJGVycm9yIHwganNvbiB9fTwvcHJlPlxuICAgKlxuICAgKiAgICAgICA8ZGl2IG5nLW1lc3NhZ2VzPVwibXlGb3JtLm15TmFtZS4kZXJyb3JcIiBzdHlsZT1cImNvbG9yOm1hcm9vblwiIHJvbGU9XCJhbGVydFwiPlxuICAgKiAgICAgICAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+WW91IGRpZCBub3QgZW50ZXIgYSBmaWVsZDwvZGl2PlxuICAgKiAgICAgICAgIDxkaXYgbmctbWVzc2FnZT1cIm1pbmxlbmd0aFwiPllvdXIgZmllbGQgaXMgdG9vIHNob3J0PC9kaXY+XG4gICAqICAgICAgICAgPGRpdiBuZy1tZXNzYWdlPVwibWF4bGVuZ3RoXCI+WW91ciBmaWVsZCBpcyB0b28gbG9uZzwvZGl2PlxuICAgKiAgICAgICA8L2Rpdj5cbiAgICogICAgIDwvZm9ybT5cbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ25nTWVzc2FnZXNFeGFtcGxlJywgWyduZ01lc3NhZ2VzJ10pO1xuICAgKiAgIDwvZmlsZT5cbiAgICogPC9leGFtcGxlPlxuICAgKi9cbiAgLmRpcmVjdGl2ZSgnbmdNZXNzYWdlcycsIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICAgIHZhciBBQ1RJVkVfQ0xBU1MgPSAnbmctYWN0aXZlJztcbiAgICB2YXIgSU5BQ1RJVkVfQ0xBU1MgPSAnbmctaW5hY3RpdmUnO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVpcmU6ICduZ01lc3NhZ2VzJyxcbiAgICAgIHJlc3RyaWN0OiAnQUUnLFxuICAgICAgY29udHJvbGxlcjogWyckZWxlbWVudCcsICckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24gTmdNZXNzYWdlc0N0cmwoJGVsZW1lbnQsICRzY29wZSwgJGF0dHJzKSB7XG4gICAgICAgIHZhciBjdHJsID0gdGhpcztcbiAgICAgICAgdmFyIGxhdGVzdEtleSA9IDA7XG4gICAgICAgIHZhciBuZXh0QXR0YWNoSWQgPSAwO1xuXG4gICAgICAgIHRoaXMuZ2V0QXR0YWNoSWQgPSBmdW5jdGlvbiBnZXRBdHRhY2hJZCgpIHsgcmV0dXJuIG5leHRBdHRhY2hJZCsrOyB9O1xuXG4gICAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMubWVzc2FnZXMgPSB7fTtcbiAgICAgICAgdmFyIHJlbmRlckxhdGVyLCBjYWNoZWRDb2xsZWN0aW9uO1xuXG4gICAgICAgIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uIHx8IHt9O1xuXG4gICAgICAgICAgcmVuZGVyTGF0ZXIgPSBmYWxzZTtcbiAgICAgICAgICBjYWNoZWRDb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcblxuICAgICAgICAgIC8vIHRoaXMgaXMgdHJ1ZSBpZiB0aGUgYXR0cmlidXRlIGlzIGVtcHR5IG9yIGlmIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdHJ1dGh5XG4gICAgICAgICAgdmFyIG11bHRpcGxlID0gaXNBdHRyVHJ1dGh5KCRzY29wZSwgJGF0dHJzLm5nTWVzc2FnZXNNdWx0aXBsZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBpc0F0dHJUcnV0aHkoJHNjb3BlLCAkYXR0cnMubXVsdGlwbGUpO1xuXG4gICAgICAgICAgdmFyIHVubWF0Y2hlZE1lc3NhZ2VzID0gW107XG4gICAgICAgICAgdmFyIG1hdGNoZWRLZXlzID0ge307XG4gICAgICAgICAgdmFyIG1lc3NhZ2VJdGVtID0gY3RybC5oZWFkO1xuICAgICAgICAgIHZhciBtZXNzYWdlRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgdG90YWxNZXNzYWdlcyA9IDA7XG5cbiAgICAgICAgICAvLyB3ZSB1c2UgIT0gaW5zdGVhZCBvZiAhPT0gdG8gYWxsb3cgZm9yIGJvdGggdW5kZWZpbmVkIGFuZCBudWxsIHZhbHVlc1xuICAgICAgICAgIHdoaWxlIChtZXNzYWdlSXRlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0b3RhbE1lc3NhZ2VzKys7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZUN0cmwgPSBtZXNzYWdlSXRlbS5tZXNzYWdlO1xuXG4gICAgICAgICAgICB2YXIgbWVzc2FnZVVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghbWVzc2FnZUZvdW5kKSB7XG4gICAgICAgICAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZVVzZWQgJiYgdHJ1dGh5KHZhbHVlKSAmJiBtZXNzYWdlQ3RybC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gcHJldmVudCB0aGUgc2FtZSBlcnJvciBuYW1lIGZyb20gc2hvd2luZyB1cCB0d2ljZVxuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZWRLZXlzW2tleV0pIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIG1hdGNoZWRLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlVXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlQ3RybC5hdHRhY2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWVzc2FnZVVzZWQpIHtcbiAgICAgICAgICAgICAgLy8gdW5sZXNzIHdlIHdhbnQgdG8gZGlzcGxheSBtdWx0aXBsZSBtZXNzYWdlcyB0aGVuIHdlIHNob3VsZFxuICAgICAgICAgICAgICAvLyBzZXQgYSBmbGFnIGhlcmUgdG8gYXZvaWQgZGlzcGxheWluZyB0aGUgbmV4dCBtZXNzYWdlIGluIHRoZSBsaXN0XG4gICAgICAgICAgICAgIG1lc3NhZ2VGb3VuZCA9ICFtdWx0aXBsZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVubWF0Y2hlZE1lc3NhZ2VzLnB1c2gobWVzc2FnZUN0cmwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZXNzYWdlSXRlbSA9IG1lc3NhZ2VJdGVtLm5leHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yRWFjaCh1bm1hdGNoZWRNZXNzYWdlcywgZnVuY3Rpb24obWVzc2FnZUN0cmwpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VDdHJsLmRldGFjaCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHVubWF0Y2hlZE1lc3NhZ2VzLmxlbmd0aCAhPT0gdG90YWxNZXNzYWdlcykge1xuICAgICAgICAgICAgJGFuaW1hdGUuc2V0Q2xhc3MoJGVsZW1lbnQsIEFDVElWRV9DTEFTUywgSU5BQ1RJVkVfQ0xBU1MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5zZXRDbGFzcygkZWxlbWVudCwgSU5BQ1RJVkVfQ0xBU1MsIEFDVElWRV9DTEFTUyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCRhdHRycy5uZ01lc3NhZ2VzIHx8ICRhdHRyc1snZm9yJ10sIGN0cmwucmVuZGVyKTtcblxuICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBkZXN0cm95ZWQsIHByb2FjdGl2ZWx5IGRlc3Ryb3kgYWxsIHRoZSBjdXJyZW50bHkgdmlzaWJsZSBtZXNzYWdlc1xuICAgICAgICAkZWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBmb3JFYWNoKG1lc3NhZ2VzLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLm1lc3NhZ2UuZGV0YWNoKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVSZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIXJlbmRlckxhdGVyKSB7XG4gICAgICAgICAgICByZW5kZXJMYXRlciA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHJlbmRlckxhdGVyICYmIGNhY2hlZENvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjdHJsLnJlbmRlcihjYWNoZWRDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihjb21tZW50LCBtZXNzYWdlQ3RybCkge1xuICAgICAgICAgIHZhciBuZXh0S2V5ID0gbGF0ZXN0S2V5LnRvU3RyaW5nKCk7XG4gICAgICAgICAgbWVzc2FnZXNbbmV4dEtleV0gPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlQ3RybFxuICAgICAgICAgIH07XG4gICAgICAgICAgaW5zZXJ0TWVzc2FnZU5vZGUoJGVsZW1lbnRbMF0sIGNvbW1lbnQsIG5leHRLZXkpO1xuICAgICAgICAgIGNvbW1lbnQuJCRuZ01lc3NhZ2VOb2RlID0gbmV4dEtleTtcbiAgICAgICAgICBsYXRlc3RLZXkrKztcblxuICAgICAgICAgIGN0cmwucmVSZW5kZXIoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmRlcmVnaXN0ZXIgPSBmdW5jdGlvbihjb21tZW50KSB7XG4gICAgICAgICAgdmFyIGtleSA9IGNvbW1lbnQuJCRuZ01lc3NhZ2VOb2RlO1xuICAgICAgICAgIGRlbGV0ZSBjb21tZW50LiQkbmdNZXNzYWdlTm9kZTtcbiAgICAgICAgICByZW1vdmVNZXNzYWdlTm9kZSgkZWxlbWVudFswXSwgY29tbWVudCwga2V5KTtcbiAgICAgICAgICBkZWxldGUgbWVzc2FnZXNba2V5XTtcbiAgICAgICAgICBjdHJsLnJlUmVuZGVyKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gZmluZFByZXZpb3VzTWVzc2FnZShwYXJlbnQsIGNvbW1lbnQpIHtcbiAgICAgICAgICB2YXIgcHJldk5vZGUgPSBjb21tZW50O1xuICAgICAgICAgIHZhciBwYXJlbnRMb29rdXAgPSBbXTtcblxuICAgICAgICAgIHdoaWxlIChwcmV2Tm9kZSAmJiBwcmV2Tm9kZSAhPT0gcGFyZW50KSB7XG4gICAgICAgICAgICB2YXIgcHJldktleSA9IHByZXZOb2RlLiQkbmdNZXNzYWdlTm9kZTtcbiAgICAgICAgICAgIGlmIChwcmV2S2V5ICYmIHByZXZLZXkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc1twcmV2S2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZGl2ZSBkZWVwZXIgaW50byB0aGUgRE9NIGFuZCBleGFtaW5lIGl0cyBjaGlsZHJlbiBmb3IgYW55IG5nTWVzc2FnZVxuICAgICAgICAgICAgLy8gY29tbWVudHMgdGhhdCBtYXkgYmUgaW4gYW4gZWxlbWVudCB0aGF0IGFwcGVhcnMgZGVlcGVyIGluIHRoZSBsaXN0XG4gICAgICAgICAgICBpZiAocHJldk5vZGUuY2hpbGROb2Rlcy5sZW5ndGggJiYgcGFyZW50TG9va3VwLmluZGV4T2YocHJldk5vZGUpID09PSAtMSkge1xuICAgICAgICAgICAgICBwYXJlbnRMb29rdXAucHVzaChwcmV2Tm9kZSk7XG4gICAgICAgICAgICAgIHByZXZOb2RlID0gcHJldk5vZGUuY2hpbGROb2Rlc1twcmV2Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2Tm9kZS5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgICAgICAgcHJldk5vZGUgPSBwcmV2Tm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcmV2Tm9kZSA9IHByZXZOb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIHBhcmVudExvb2t1cC5wdXNoKHByZXZOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbnNlcnRNZXNzYWdlTm9kZShwYXJlbnQsIGNvbW1lbnQsIGtleSkge1xuICAgICAgICAgIHZhciBtZXNzYWdlTm9kZSA9IG1lc3NhZ2VzW2tleV07XG4gICAgICAgICAgaWYgKCFjdHJsLmhlYWQpIHtcbiAgICAgICAgICAgIGN0cmwuaGVhZCA9IG1lc3NhZ2VOb2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBmaW5kUHJldmlvdXNNZXNzYWdlKHBhcmVudCwgY29tbWVudCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZU5vZGUubmV4dCA9IG1hdGNoLm5leHQ7XG4gICAgICAgICAgICAgIG1hdGNoLm5leHQgPSBtZXNzYWdlTm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VOb2RlLm5leHQgPSBjdHJsLmhlYWQ7XG4gICAgICAgICAgICAgIGN0cmwuaGVhZCA9IG1lc3NhZ2VOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZU1lc3NhZ2VOb2RlKHBhcmVudCwgY29tbWVudCwga2V5KSB7XG4gICAgICAgICAgdmFyIG1lc3NhZ2VOb2RlID0gbWVzc2FnZXNba2V5XTtcblxuICAgICAgICAgIHZhciBtYXRjaCA9IGZpbmRQcmV2aW91c01lc3NhZ2UocGFyZW50LCBjb21tZW50KTtcbiAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIG1hdGNoLm5leHQgPSBtZXNzYWdlTm9kZS5uZXh0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHJsLmhlYWQgPSBtZXNzYWdlTm9kZS5uZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaXNBdHRyVHJ1dGh5KHNjb3BlLCBhdHRyKSB7XG4gICAgIHJldHVybiAoaXNTdHJpbmcoYXR0cikgJiYgYXR0ci5sZW5ndGggPT09IDApIHx8IC8vZW1wdHkgYXR0cmlidXRlXG4gICAgICAgICAgICB0cnV0aHkoc2NvcGUuJGV2YWwoYXR0cikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRydXRoeSh2YWwpIHtcbiAgICAgIHJldHVybiBpc1N0cmluZyh2YWwpID8gdmFsLmxlbmd0aCA6ICEhdmFsO1xuICAgIH1cbiAgfV0pXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbmdNZXNzYWdlc0luY2x1ZGVcbiAgICogQHJlc3RyaWN0IEFFXG4gICAqIEBzY29wZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogYG5nTWVzc2FnZXNJbmNsdWRlYCBpcyBhIGRpcmVjdGl2ZSB3aXRoIHRoZSBwdXJwb3NlIHRvIGltcG9ydCBleGlzdGluZyBuZ01lc3NhZ2UgdGVtcGxhdGVcbiAgICogY29kZSBmcm9tIGEgcmVtb3RlIHRlbXBsYXRlIGFuZCBwbGFjZSB0aGUgZG93bmxvYWRlZCB0ZW1wbGF0ZSBjb2RlIGludG8gdGhlIGV4YWN0IHNwb3RcbiAgICogdGhhdCB0aGUgbmdNZXNzYWdlc0luY2x1ZGUgZGlyZWN0aXZlIGlzIHBsYWNlZCB3aXRoaW4gdGhlIG5nTWVzc2FnZXMgY29udGFpbmVyLiBUaGlzIGFsbG93c1xuICAgKiBmb3IgYSBzZXJpZXMgb2YgcHJlLWRlZmluZWQgbWVzc2FnZXMgdG8gYmUgcmV1c2VkIGFuZCBhbHNvIGFsbG93cyBmb3IgdGhlIGRldmVsb3BlciB0b1xuICAgKiBkZXRlcm1pbmUgd2hhdCBtZXNzYWdlcyBhcmUgb3ZlcnJpZGRlbiBkdWUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgbmdNZXNzYWdlc0luY2x1ZGUgZGlyZWN0aXZlLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgaHRtbFxuICAgKiA8IS0tIHVzaW5nIGF0dHJpYnV0ZSBkaXJlY3RpdmVzIC0tPlxuICAgKiA8QU5ZIG5nLW1lc3NhZ2VzPVwiZXhwcmVzc2lvblwiIHJvbGU9XCJhbGVydFwiPlxuICAgKiAgIDxBTlkgbmctbWVzc2FnZXMtaW5jbHVkZT1cInJlbW90ZVRwbFN0cmluZ1wiPi4uLjwvQU5ZPlxuICAgKiA8L0FOWT5cbiAgICpcbiAgICogPCEtLSBvciBieSB1c2luZyBlbGVtZW50IGRpcmVjdGl2ZXMgLS0+XG4gICAqIDxuZy1tZXNzYWdlcyBmb3I9XCJleHByZXNzaW9uXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAqICAgPG5nLW1lc3NhZ2VzLWluY2x1ZGUgc3JjPVwiZXhwcmVzc2lvblZhbHVlMVwiPi4uLjwvbmctbWVzc2FnZXMtaW5jbHVkZT5cbiAgICogPC9uZy1tZXNzYWdlcz5cbiAgICogYGBgXG4gICAqXG4gICAqIHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyBDbGljayBoZXJlfSB0byBsZWFybiBtb3JlIGFib3V0IGBuZ01lc3NhZ2VzYCBhbmQgYG5nTWVzc2FnZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01lc3NhZ2VzSW5jbHVkZXxzcmMgYSBzdHJpbmcgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcmVtb3RlIHRlbXBsYXRlLlxuICAgKi9cbiAgLmRpcmVjdGl2ZSgnbmdNZXNzYWdlc0luY2x1ZGUnLFxuICAgIFsnJHRlbXBsYXRlUmVxdWVzdCcsICckZG9jdW1lbnQnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkdGVtcGxhdGVSZXF1ZXN0LCAkZG9jdW1lbnQsICRjb21waWxlKSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBRScsXG4gICAgICByZXF1aXJlOiAnXl5uZ01lc3NhZ2VzJywgLy8gd2Ugb25seSByZXF1aXJlIHRoaXMgZm9yIHZhbGlkYXRpb24gc2FrZVxuICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgc3JjID0gYXR0cnMubmdNZXNzYWdlc0luY2x1ZGUgfHwgYXR0cnMuc3JjO1xuICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNyYykudGhlbihmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgaWYgKCRzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKGlzU3RyaW5nKGh0bWwpICYmICFodG1sLnRyaW0oKSkge1xuICAgICAgICAgICAgLy8gRW1wdHkgdGVtcGxhdGUgLSBub3RoaW5nIHRvIGNvbXBpbGVcbiAgICAgICAgICAgIHJlcGxhY2VFbGVtZW50V2l0aE1hcmtlcihlbGVtZW50LCBzcmMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOb24tZW1wdHkgdGVtcGxhdGUgLSBjb21waWxlIGFuZCBsaW5rXG4gICAgICAgICAgICAkY29tcGlsZShodG1sKSgkc2NvcGUsIGZ1bmN0aW9uKGNvbnRlbnRzKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuYWZ0ZXIoY29udGVudHMpO1xuICAgICAgICAgICAgICByZXBsYWNlRWxlbWVudFdpdGhNYXJrZXIoZWxlbWVudCwgc3JjKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEhlbHBlcnNcbiAgICBmdW5jdGlvbiByZXBsYWNlRWxlbWVudFdpdGhNYXJrZXIoZWxlbWVudCwgc3JjKSB7XG4gICAgICAvLyBBIGNvbW1lbnQgbWFya2VyIGlzIHBsYWNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG4gICAgICB2YXIgY29tbWVudCA9ICRjb21waWxlLiQkY3JlYXRlQ29tbWVudCA/XG4gICAgICAgICAgJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCduZ01lc3NhZ2VzSW5jbHVkZScsIHNyYykgOlxuICAgICAgICAgICRkb2N1bWVudFswXS5jcmVhdGVDb21tZW50KCcgbmdNZXNzYWdlc0luY2x1ZGU6ICcgKyBzcmMgKyAnICcpO1xuICAgICAgdmFyIG1hcmtlciA9IGpxTGl0ZShjb21tZW50KTtcbiAgICAgIGVsZW1lbnQuYWZ0ZXIobWFya2VyKTtcblxuICAgICAgLy8gRG9uJ3QgcG9sbHV0ZSB0aGUgRE9NIGFueW1vcmUgYnkga2VlcGluZyBhbiBlbXB0eSBkaXJlY3RpdmUgZWxlbWVudFxuICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG4gIH1dKVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nTWVzc2FnZVxuICAgKiBAcmVzdHJpY3QgQUVcbiAgICogQHNjb3BlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBgbmdNZXNzYWdlYCBpcyBhIGRpcmVjdGl2ZSB3aXRoIHRoZSBwdXJwb3NlIHRvIHNob3cgYW5kIGhpZGUgYSBwYXJ0aWN1bGFyIG1lc3NhZ2UuXG4gICAqIEZvciBgbmdNZXNzYWdlYCB0byBvcGVyYXRlLCBhIHBhcmVudCBgbmdNZXNzYWdlc2AgZGlyZWN0aXZlIG9uIGEgcGFyZW50IERPTSBlbGVtZW50XG4gICAqIG11c3QgYmUgc2l0dWF0ZWQgc2luY2UgaXQgZGV0ZXJtaW5lcyB3aGljaCBtZXNzYWdlcyBhcmUgdmlzaWJsZSBiYXNlZCBvbiB0aGUgc3RhdGVcbiAgICogb2YgdGhlIHByb3ZpZGVkIGtleS92YWx1ZSBtYXAgdGhhdCBgbmdNZXNzYWdlc2AgbGlzdGVucyBvbi5cbiAgICpcbiAgICogTW9yZSBpbmZvcm1hdGlvbiBhYm91dCB1c2luZyBgbmdNZXNzYWdlYCBjYW4gYmUgZm91bmQgaW4gdGhlXG4gICAqIHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyBgbmdNZXNzYWdlc2AgbW9kdWxlIGRvY3VtZW50YXRpb259LlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgaHRtbFxuICAgKiA8IS0tIHVzaW5nIGF0dHJpYnV0ZSBkaXJlY3RpdmVzIC0tPlxuICAgKiA8QU5ZIG5nLW1lc3NhZ2VzPVwiZXhwcmVzc2lvblwiIHJvbGU9XCJhbGVydFwiPlxuICAgKiAgIDxBTlkgbmctbWVzc2FnZT1cInN0cmluZ1ZhbHVlXCI+Li4uPC9BTlk+XG4gICAqICAgPEFOWSBuZy1tZXNzYWdlPVwic3RyaW5nVmFsdWUxLCBzdHJpbmdWYWx1ZTIsIC4uLlwiPi4uLjwvQU5ZPlxuICAgKiA8L0FOWT5cbiAgICpcbiAgICogPCEtLSBvciBieSB1c2luZyBlbGVtZW50IGRpcmVjdGl2ZXMgLS0+XG4gICAqIDxuZy1tZXNzYWdlcyBmb3I9XCJleHByZXNzaW9uXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAqICAgPG5nLW1lc3NhZ2Ugd2hlbj1cInN0cmluZ1ZhbHVlXCI+Li4uPC9uZy1tZXNzYWdlPlxuICAgKiAgIDxuZy1tZXNzYWdlIHdoZW49XCJzdHJpbmdWYWx1ZTEsIHN0cmluZ1ZhbHVlMiwgLi4uXCI+Li4uPC9uZy1tZXNzYWdlPlxuICAgKiA8L25nLW1lc3NhZ2VzPlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01lc3NhZ2V8d2hlbiBhIHN0cmluZyB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBtZXNzYWdlIGtleS5cbiAgICovXG4gIC5kaXJlY3RpdmUoJ25nTWVzc2FnZScsIG5nTWVzc2FnZURpcmVjdGl2ZUZhY3RvcnkoKSlcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nTWVzc2FnZUV4cFxuICAgKiBAcmVzdHJpY3QgQUVcbiAgICogQHByaW9yaXR5IDFcbiAgICogQHNjb3BlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBgbmdNZXNzYWdlRXhwYCBpcyB0aGUgc2FtZSBhcyB7QGxpbmsgZGlyZWN0aXZlOm5nTWVzc2FnZSBgbmdNZXNzYWdlYH0sIGJ1dCBpbnN0ZWFkIG9mIGEgc3RhdGljXG4gICAqIHZhbHVlLCBpdCBhY2NlcHRzIGFuIGV4cHJlc3Npb24gdG8gYmUgZXZhbHVhdGVkIGZvciB0aGUgbWVzc2FnZSBrZXkuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiBgYGBodG1sXG4gICAqIDwhLS0gdXNpbmcgYXR0cmlidXRlIGRpcmVjdGl2ZXMgLS0+XG4gICAqIDxBTlkgbmctbWVzc2FnZXM9XCJleHByZXNzaW9uXCI+XG4gICAqICAgPEFOWSBuZy1tZXNzYWdlLWV4cD1cImV4cHJlc3Npb25WYWx1ZVwiPi4uLjwvQU5ZPlxuICAgKiA8L0FOWT5cbiAgICpcbiAgICogPCEtLSBvciBieSB1c2luZyBlbGVtZW50IGRpcmVjdGl2ZXMgLS0+XG4gICAqIDxuZy1tZXNzYWdlcyBmb3I9XCJleHByZXNzaW9uXCI+XG4gICAqICAgPG5nLW1lc3NhZ2Ugd2hlbi1leHA9XCJleHByZXNzaW9uVmFsdWVcIj4uLi48L25nLW1lc3NhZ2U+XG4gICAqIDwvbmctbWVzc2FnZXM+XG4gICAqIGBgYFxuICAgKlxuICAgKiB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMgQ2xpY2sgaGVyZX0gdG8gbGVhcm4gbW9yZSBhYm91dCBgbmdNZXNzYWdlc2AgYW5kIGBuZ01lc3NhZ2VgLlxuICAgKlxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTWVzc2FnZUV4cHx3aGVuRXhwIGFuIGV4cHJlc3Npb24gdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgbWVzc2FnZSBrZXkuXG4gICAqL1xuICAuZGlyZWN0aXZlKCduZ01lc3NhZ2VFeHAnLCBuZ01lc3NhZ2VEaXJlY3RpdmVGYWN0b3J5KCkpO1xuXG5mdW5jdGlvbiBuZ01lc3NhZ2VEaXJlY3RpdmVGYWN0b3J5KCkge1xuICByZXR1cm4gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQUUnLFxuICAgICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgICAgcHJpb3JpdHk6IDEsIC8vIG11c3QgcnVuIGJlZm9yZSBuZ0JpbmQsIG90aGVyd2lzZSB0aGUgdGV4dCBpcyBzZXQgb24gdGhlIGNvbW1lbnRcbiAgICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICAgcmVxdWlyZTogJ15ebmdNZXNzYWdlcycsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTWVzc2FnZXNDdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgY29tbWVudE5vZGUgPSBlbGVtZW50WzBdO1xuXG4gICAgICAgIHZhciByZWNvcmRzO1xuICAgICAgICB2YXIgc3RhdGljRXhwID0gYXR0cnMubmdNZXNzYWdlIHx8IGF0dHJzLndoZW47XG4gICAgICAgIHZhciBkeW5hbWljRXhwID0gYXR0cnMubmdNZXNzYWdlRXhwIHx8IGF0dHJzLndoZW5FeHA7XG4gICAgICAgIHZhciBhc3NpZ25SZWNvcmRzID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgICAgICAgICByZWNvcmRzID0gaXRlbXNcbiAgICAgICAgICAgICAgPyAoaXNBcnJheShpdGVtcylcbiAgICAgICAgICAgICAgICAgID8gaXRlbXNcbiAgICAgICAgICAgICAgICAgIDogaXRlbXMuc3BsaXQoL1tcXHMsXSsvKSlcbiAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgIG5nTWVzc2FnZXNDdHJsLnJlUmVuZGVyKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGR5bmFtaWNFeHApIHtcbiAgICAgICAgICBhc3NpZ25SZWNvcmRzKHNjb3BlLiRldmFsKGR5bmFtaWNFeHApKTtcbiAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGR5bmFtaWNFeHAsIGFzc2lnblJlY29yZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblJlY29yZHMoc3RhdGljRXhwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyZW50RWxlbWVudCwgbWVzc2FnZUN0cmw7XG4gICAgICAgIG5nTWVzc2FnZXNDdHJsLnJlZ2lzdGVyKGNvbW1lbnROb2RlLCBtZXNzYWdlQ3RybCA9IHtcbiAgICAgICAgICB0ZXN0OiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbnMocmVjb3JkcywgbmFtZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdHRhY2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihlbG0sIG5ld1Njb3BlKSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoZWxtLCBudWxsLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGVsbTtcblxuICAgICAgICAgICAgICAgIC8vIEVhY2ggdGltZSB3ZSBhdHRhY2ggdGhpcyBub2RlIHRvIGEgbWVzc2FnZSB3ZSBnZXQgYSBuZXcgaWQgdGhhdCB3ZSBjYW4gbWF0Y2hcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHdlIGFyZSBkZXN0cm95aW5nIHRoZSBub2RlIGxhdGVyLlxuICAgICAgICAgICAgICAgIHZhciAkJGF0dGFjaElkID0gY3VycmVudEVsZW1lbnQuJCRhdHRhY2hJZCA9IG5nTWVzc2FnZXNDdHJsLmdldEF0dGFjaElkKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgZWxlbWVudCBvciBhIHBhcmVudCBlbGVtZW50IGlzIGRlc3Ryb3llZFxuICAgICAgICAgICAgICAgIC8vIGJ5IGFub3RoZXIgc3RydWN0dXJhbCBkaXJlY3RpdmUgdGhlbiBpdCdzIHRpbWVcbiAgICAgICAgICAgICAgICAvLyB0byBkZXJlZ2lzdGVyIHRoZSBtZXNzYWdlIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RWxlbWVudCAmJiBjdXJyZW50RWxlbWVudC4kJGF0dGFjaElkID09PSAkJGF0dGFjaElkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5nTWVzc2FnZXNDdHJsLmRlcmVnaXN0ZXIoY29tbWVudE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQ3RybC5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG5ld1Njb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICB2YXIgZWxtID0gY3VycmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4gIGZ1bmN0aW9uIGNvbnRhaW5zKGNvbGxlY3Rpb24sIGtleSkge1xuICAgIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gaXNBcnJheShjb2xsZWN0aW9uKVxuICAgICAgICAgID8gY29sbGVjdGlvbi5pbmRleE9mKGtleSkgPj0gMFxuICAgICAgICAgIDogY29sbGVjdGlvbi5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgIH1cbiAgfVxufVxuXG5cbn0pKHdpbmRvdywgd2luZG93LmFuZ3VsYXIpO1xuXG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdwcm9wZXJ0eS1hcHAnLCBbJ3VpLnJvdXRlcicsICduZ1Jlc291cmNlJywgJ3NhdGVsbGl6ZXInLCAnY2hlY2tsaXN0LW1vZGVsJywgJ3VpLmJvb3RzdHJhcCcsICduZ0FuaW1hdGUnLCAnbmdNZXNzYWdlcyddKS5jb25zdGFudCgnQVBJX1VSTCcsICdodHRwczovL3RoYXdpbmctc2NydWJsYW5kLTI0MzM3Lmhlcm9rdWFwcC5jb20nKS5maWx0ZXIoJ3N0YXJ0RnJvbScsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCBzdGFydCkge1xuICAgIHJldHVybiBkYXRhLnNsaWNlKHN0YXJ0KTtcbiAgfTtcbn0pO1xuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgncHJvcGVydHktYXBwJykuY29uZmlnKEF1dGgpO1xuXG5BdXRoLiRpbmplY3QgPSBbJyRhdXRoUHJvdmlkZXInLCAnQVBJX1VSTCddO1xuZnVuY3Rpb24gQXV0aCgkYXV0aFByb3ZpZGVyLCBBUElfVVJMKSB7XG4gICRhdXRoUHJvdmlkZXIuc2lnbnVwVXJsID0gQVBJX1VSTCArICcvcmVnaXN0ZXInO1xuICAkYXV0aFByb3ZpZGVyLmxvZ2luVXJsID0gQVBJX1VSTCArICcvbG9naW4nO1xufVxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgncHJvcGVydHktYXBwJykuY29uZmlnKFJvdXRlcik7XG5cblJvdXRlci4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInXTtcbmZ1bmN0aW9uIFJvdXRlcigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2hvbWUnLCB7XG4gICAgdXJsOiAnLycsXG4gICAgdGVtcGxhdGVVcmw6ICdqcy92aWV3cy9wb3N0cy9pbmRleC5odG1sJ1xuICB9KS5zdGF0ZSgncG9zdHNJbmRleCcsIHtcbiAgICB1cmw6ICcvcG9zdHMnLFxuICAgIHRlbXBsYXRlVXJsOiAnanMvdmlld3MvcG9zdHMvaW5kZXguaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Bvc3RzSW5kZXhDdHJsIGFzIHBvc3RzSW5kZXgnXG4gIH0pLnN0YXRlKCdwb3N0c05ldycsIHtcbiAgICB1cmw6ICcvcG9zdHMvbmV3JyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL3Bvc3RzL25ldy5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUG9zdHNOZXdDdHJsIGFzIHBvc3RzTmV3J1xuICB9KS5zdGF0ZSgncG9zdHNTaG93Jywge1xuICAgIHVybDogJy9wb3N0cy86aWQnLFxuICAgIHRlbXBsYXRlVXJsOiAnanMvdmlld3MvcG9zdHMvc2hvdy5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUG9zdHNTaG93Q3RybCBhcyBwb3N0c1Nob3cnXG4gIH0pLnN0YXRlKCdwb3N0c0VkaXQnLCB7XG4gICAgdXJsOiAnL3Bvc3RzLzppZC9lZGl0JyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL3Bvc3RzL2VkaXQuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1Bvc3RzRWRpdEN0cmwgYXMgcG9zdHNFZGl0J1xuICB9KS5zdGF0ZSgndXNlcnNTaG93Jywge1xuICAgIHVybDogJy91c2Vycy86aWQnLFxuICAgIHRlbXBsYXRlVXJsOiAnanMvdmlld3MvdXNlcnMvc2hvdy5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnVXNlcnNTaG93Q3RybCBhcyB1c2Vyc1Nob3cnXG4gIH0pLnN0YXRlKCdsb2dpbicsIHtcbiAgICB1cmw6ICcvbG9naW4nLFxuICAgIHRlbXBsYXRlVXJsOiAnanMvdmlld3MvYXV0aC9sb2dpbi5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnQXV0aEN0cmwgYXMgYXV0aCdcbiAgfSkuc3RhdGUoJ3JlZ2lzdGVyJywge1xuICAgIHVybDogJy9yZWdpc3RlcicsXG4gICAgdGVtcGxhdGVVcmw6ICdqcy92aWV3cy9hdXRoL3JlZ2lzdGVyLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdBdXRoQ3RybCBhcyBhdXRoJ1xuICB9KS5zdGF0ZSgnYWJvdXQnLCB7XG4gICAgdXJsOiAnL2Fib3V0JyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL3N0YXRpYy9hYm91dC5odG1sJ1xuICB9KTtcblxuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG59XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdwcm9wZXJ0eS1hcHAnKS5jb250cm9sbGVyKCdBdXRoQ3RybCcsIEF1dGhDdHJsKTtcblxuQXV0aEN0cmwuJGluamVjdCA9IFsnJGF1dGgnLCAnJHN0YXRlJ107XG5mdW5jdGlvbiBBdXRoQ3RybCgkYXV0aCwgJHN0YXRlKSB7XG4gIHZhciB2bSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgJGF1dGguc2lnbnVwKHZtLnVzZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZtLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgZnVuY3Rpb24gbG9naW4oKSB7XG4gICAgJGF1dGgubG9naW4odm0uY3JlZGVudGlhbHMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRzdGF0ZS5nbygncG9zdHNJbmRleCcpO1xuICAgIH0pO1xuICB9XG5cbiAgdm0ubG9naW4gPSBsb2dpbjtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3Byb3BlcnR5LWFwcCcpLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgTWFpbkN0cmwpO1xuXG5NYWluQ3RybC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICckYXV0aCddO1xuZnVuY3Rpb24gTWFpbkN0cmwoJHJvb3RTY29wZSwgJHN0YXRlLCAkYXV0aCkge1xuICB2YXIgdm0gPSB0aGlzO1xuXG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh2bS5zdGF0ZUhhc0NoYW5nZWQpIHZtLm1lc3NhZ2UgPSBudWxsO1xuICAgIGlmICghdm0uc3RhdGVIYXNDaGFuZ2VkKSB2bS5zdGF0ZUhhc0NoYW5nZWQgPSB0cnVlO1xuICAgIHZtLmlzTmF2Q29sbGFwc2VkID0gdHJ1ZTtcbiAgfSk7XG5cbiAgdm0uaXNBdXRoZW50aWNhdGVkID0gJGF1dGguaXNBdXRoZW50aWNhdGVkO1xuXG4gICRyb290U2NvcGUuJG9uKCdlcnJvcicsIGZ1bmN0aW9uIChlLCBlcnIpIHtcbiAgICB2bS5zdGF0ZUhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2bS5tZXNzYWdlID0gZXJyLmRhdGEubWVzc2FnZTtcbiAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh2bS5zdGF0ZUhhc0NoYW5nZWQpIHZtLm1lc3NhZ2UgPSBudWxsO1xuICAgIGlmICghdm0uc3RhdGVIYXNDaGFuZ2VkKSB2bS5zdGF0ZUhhc0NoYW5nZWQgPSB0cnVlO1xuICAgIGlmICgkYXV0aC5nZXRQYXlsb2FkKCkpIHZtLmN1cnJlbnRVc2VyID0gJGF1dGguZ2V0UGF5bG9hZCgpO1xuICB9KTtcblxuICB2YXIgcHJvdGVjdGVkU3RhdGVzID0gWydwb3N0c05ldycsICdwb3N0c0VkaXQnXTtcblxuICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZSwgdG9TdGF0ZSkge1xuICAgIGlmICghJGF1dGguaXNBdXRoZW50aWNhdGVkKCkgJiYgcHJvdGVjdGVkU3RhdGVzLmluY2x1ZGVzKHRvU3RhdGUubmFtZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgIHZtLm1lc3NhZ2UgPSAnWW91IG11c3QgYmUgbG9nZ2VkIGluIHRvIGFjY2VzcyB0aGlzIHBhZ2UuJztcbiAgICB9XG4gICAgdm0ucGFnZU5hbWUgPSB0b1N0YXRlLm5hbWU7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAkYXV0aC5sb2dvdXQoKTtcbiAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgfVxuXG4gIHZtLmxvZ291dCA9IGxvZ291dDtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3Byb3BlcnR5LWFwcCcpLmNvbnRyb2xsZXIoJ1BheW1lbnRDb250cm9sbGVyJywgUGF5bWVudENvbnRyb2xsZXIpO1xuXG5QYXltZW50Q29udHJvbGxlci4kaW5qZWN0ID0gWyckaHR0cCcsICdBUElfVVJMJ107XG5mdW5jdGlvbiBQYXltZW50Q29udHJvbGxlcigkaHR0cCwgQVBJX1VSTCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgc2VsZi5jYXJkID0ge307XG4gIHNlbGYucGF5ZWUgPSBudWxsO1xuICBzZWxmLmFtb3VudCA9IG51bGw7XG4gIHNlbGYuY3VycmVuY3kgPSBcImdicFwiO1xuICBzZWxmLnBheW1lbnRTdWNjZXNzZnVsID0gZmFsc2U7XG5cbiAgc2VsZi5wYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgU3RyaXBlLmNhcmQuY3JlYXRlVG9rZW4oc2VsZi5jYXJkLCBmdW5jdGlvbiAoc3RhdHVzLCByZXNwb25zZSkge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgIGNhcmQ6IHNlbGYuY2FyZCxcbiAgICAgICAgICB0b2tlbjogcmVzcG9uc2UuaWQsXG4gICAgICAgICAgYW1vdW50OiBzZWxmLmFtb3VudCxcbiAgICAgICAgICBjdXJyZW5jeTogc2VsZi5jdXJyZW5jeSxcbiAgICAgICAgICBwYXllZTogc2VsZi5wYXllZVxuICAgICAgICB9O1xuXG4gICAgICAgICRodHRwLnBvc3QoQVBJX1VSTCArICcvcGF5bWVudCcsIGRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHNlbGYucGF5bWVudFN1Y2Nlc3NmdWwgPSB0cnVlO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BheW1lbnRfbW9kYWwnKS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5wYXltZW50U3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgc2VsZi5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLmNhcmQgPSB7fTtcbiAgICBzZWxmLnBheWVlID0gXCJcIjtcbiAgICBzZWxmLmFtb3VudCA9IG51bGw7XG4gICAgc2VsZi5wYXltZW50U3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIHNlbGYuRm9ybS4kc2V0UHJpc3RpbmUodHJ1ZSk7XG4gICAgLy8gdXNlIHZhbmlsbGEgSlMgdG8gcmVzZXQgZm9ybSB0byByZW1vdmUgYnJvd3NlcidzIG5hdGl2ZSBhdXRvY29tcGxldGUgaGlnaGxpZ2h0aW5nXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Zvcm0nKVswXS5yZXNldCgpO1xuICB9O1xufVxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgncHJvcGVydHktYXBwJykuY29udHJvbGxlcignUG9zdHNJbmRleEN0cmwnLCBQb3N0c0luZGV4Q3RybCkuY29udHJvbGxlcignUG9zdHNOZXdDdHJsJywgUG9zdHNOZXdDdHJsKS5jb250cm9sbGVyKCdQb3N0c1Nob3dDdHJsJywgUG9zdHNTaG93Q3RybCkuY29udHJvbGxlcignUG9zdHNFZGl0Q3RybCcsIFBvc3RzRWRpdEN0cmwpO1xuXG5Qb3N0c0luZGV4Q3RybC4kaW5qZWN0ID0gWydQb3N0JywgJ2ZpbHRlckZpbHRlcicsICckc2NvcGUnXTtcbmZ1bmN0aW9uIFBvc3RzSW5kZXhDdHJsKFBvc3QsIGZpbHRlckZpbHRlciwgJHNjb3BlKSB7XG5cbiAgdmFyIHZtID0gdGhpcztcbiAgdm0uYWxsID0gUG9zdC5xdWVyeSgpO1xuICAkc2NvcGUucGFnZVNpemUgPSA2O1xuICAkc2NvcGUuY3VycmVudFBhZ2UgPSAxO1xufVxuXG5Qb3N0c05ld0N0cmwuJGluamVjdCA9IFsnUG9zdCcsICdVc2VyJywgJyRzdGF0ZSddO1xuZnVuY3Rpb24gUG9zdHNOZXdDdHJsKFBvc3QsIFVzZXIsICRzdGF0ZSkge1xuICB2YXIgdm0gPSB0aGlzO1xuICB2bS5wb3N0ID0ge1xuICAgICdpbWFnZSc6ICdodHRwOi8vcGxhY2Vob2xkLml0LzM1MHgxNTAnXG4gIH07XG4gIHZtLnVzZXJzID0gVXNlci5xdWVyeSgpO1xuXG4gIGZ1bmN0aW9uIHBvc3RzQ3JlYXRlKCkge1xuICAgIFBvc3Quc2F2ZSh7IHBvc3Q6IHZtLnBvc3QgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJHN0YXRlLmdvKCdwb3N0c0luZGV4Jyk7XG4gICAgfSk7XG4gIH1cblxuICB2bS5jcmVhdGUgPSBwb3N0c0NyZWF0ZTtcbn1cblxuUG9zdHNTaG93Q3RybC4kaW5qZWN0ID0gWydQb3N0JywgJ1VzZXInLCAnQ29tbWVudCcsICckc3RhdGVQYXJhbXMnLCAnJHN0YXRlJywgJyRhdXRoJ107XG5mdW5jdGlvbiBQb3N0c1Nob3dDdHJsKFBvc3QsIFVzZXIsIENvbW1lbnQsICRzdGF0ZVBhcmFtcywgJHN0YXRlLCAkYXV0aCkge1xuICB2YXIgdm0gPSB0aGlzO1xuXG4gIGlmICgkYXV0aC5nZXRQYXlsb2FkKCkpIHZtLmN1cnJlbnRVc2VyID0gVXNlci5nZXQoeyBpZDogJGF1dGguZ2V0UGF5bG9hZCgpLmlkIH0pO1xuXG4gIHZtLnBvc3QgPSBQb3N0LmdldCgkc3RhdGVQYXJhbXMpO1xuICB2bS5jb21tZW50ID0ge307XG5cbiAgZnVuY3Rpb24gcG9zdHNEZWxldGUoKSB7XG4gICAgdm0ucG9zdC4kcmVtb3ZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJHN0YXRlLmdvKCdwb3N0c0luZGV4Jyk7XG4gICAgfSk7XG4gIH1cbiAgdm0uZGVsZXRlID0gcG9zdHNEZWxldGU7XG59XG5cblBvc3RzRWRpdEN0cmwuJGluamVjdCA9IFsnUG9zdCcsICdVc2VyJywgJyRzdGF0ZVBhcmFtcycsICckc3RhdGUnXTtcbmZ1bmN0aW9uIFBvc3RzRWRpdEN0cmwoUG9zdCwgVXNlciwgJHN0YXRlUGFyYW1zLCAkc3RhdGUpIHtcbiAgdmFyIHZtID0gdGhpcztcblxuICBQb3N0LmdldCgkc3RhdGVQYXJhbXMpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHBvc3QpIHtcbiAgICB2bS5wb3N0ID0gcG9zdDtcbiAgfSk7XG5cbiAgdm0udXNlcnMgPSBVc2VyLnF1ZXJ5KCk7XG5cbiAgZnVuY3Rpb24gcG9zdHNVcGRhdGUoKSB7XG4gICAgUG9zdC51cGRhdGUoeyBpZDogdm0ucG9zdC5pZCwgcG9zdDogdm0ucG9zdCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3Bvc3RzU2hvdycsIHsgaWQ6IHZtLnBvc3QuaWQgfSk7XG4gICAgfSk7XG4gIH1cblxuICB2bS51cGRhdGUgPSBwb3N0c1VwZGF0ZTtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3Byb3BlcnR5LWFwcCcpLmNvbnRyb2xsZXIoJ1VzZXJzSW5kZXhDdHJsJywgVXNlcnNJbmRleEN0cmwpLmNvbnRyb2xsZXIoJ1VzZXJzU2hvd0N0cmwnLCBVc2Vyc1Nob3dDdHJsKTtcblxuVXNlcnNJbmRleEN0cmwuJGluamVjdCA9IFsnVXNlciddO1xuZnVuY3Rpb24gVXNlcnNJbmRleEN0cmwoVXNlcikge1xuICB2YXIgdm0gPSB0aGlzO1xuXG4gIHZtLmFsbCA9IFVzZXIucXVlcnkoKTtcbn1cblxuVXNlcnNTaG93Q3RybC4kaW5qZWN0ID0gWydVc2VyJywgJyRzdGF0ZVBhcmFtcycsICckc3RhdGUnLCAnJGF1dGgnXTtcbmZ1bmN0aW9uIFVzZXJzU2hvd0N0cmwoVXNlciwgJHN0YXRlUGFyYW1zLCAkc3RhdGUsICRhdXRoKSB7XG4gIHZhciB2bSA9IHRoaXM7XG4gIHZtLnVzZXIgPSBVc2VyLmdldCgkc3RhdGVQYXJhbXMpO1xuXG4gIGZ1bmN0aW9uIHVzZXJzRGVsZXRlKCkge1xuXG4gICAgdm0udXNlci4kcmVtb3ZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAkYXV0aC5sb2dvdXQoKTtcbiAgICAgICRzdGF0ZS5nbygncmVnaXN0ZXInKTtcbiAgICB9KTtcbiAgfVxuICB2bS5kZWxldGUgPSB1c2Vyc0RlbGV0ZTtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3Byb3BlcnR5LWFwcCcpLmRpcmVjdGl2ZSgnYmFzZTY0JywgYmFzZTY0KTtcblxuZnVuY3Rpb24gYmFzZTY0KCkge1xuICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24gbGluaygkc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG5cbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gZmlsZUxvYWRlZCgpIHtcbiAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGZpbGVSZWFkZXIucmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIGVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBmaWxlID0gKGUudGFyZ2V0LmZpbGVzIHx8IGUuZGF0YVRyYW5zZmVyLmZpbGVzKVswXTtcbiAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgncHJvcGVydHktYXBwJykuZmFjdG9yeSgnQ29tbWVudCcsIENvbW1lbnQpO1xuXG5Db21tZW50LiRpbmplY3QgPSBbJyRyZXNvdXJjZScsICdBUElfVVJMJ107XG5mdW5jdGlvbiBDb21tZW50KCRyZXNvdXJjZSwgQVBJX1VSTCkge1xuICByZXR1cm4gbmV3ICRyZXNvdXJjZShBUElfVVJMICsgJy9jb21tZW50cy86aWQnLCB7IGlkOiAnQGlkJyB9LCB7XG4gICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcgfVxuICB9KTtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3Byb3BlcnR5LWFwcCcpLmZhY3RvcnkoJ1Bvc3QnLCBQb3N0KTtcblxuUG9zdC4kaW5qZWN0ID0gWyckcmVzb3VyY2UnLCAnQVBJX1VSTCddO1xuZnVuY3Rpb24gUG9zdCgkcmVzb3VyY2UsIEFQSV9VUkwpIHtcbiAgcmV0dXJuIG5ldyAkcmVzb3VyY2UoQVBJX1VSTCArICcvcG9zdHMvOmlkJywgeyBpZDogJ0BpZCcgfSwge1xuICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnIH1cbiAgfSk7XG59XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdwcm9wZXJ0eS1hcHAnKS5mYWN0b3J5KCdVc2VyJywgVXNlcik7XG5cblVzZXIuJGluamVjdCA9IFsnJHJlc291cmNlJywgJ0FQSV9VUkwnXTtcbmZ1bmN0aW9uIFVzZXIoJHJlc291cmNlLCBBUElfVVJMKSB7XG4gIHJldHVybiBuZXcgJHJlc291cmNlKEFQSV9VUkwgKyAnL3VzZXJzLzppZCcsIHsgaWQ6ICdAaWQnIH0sIHtcbiAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJyB9XG4gIH0pO1xufSJdfQ==
